{"nodes":[{"content":"Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.","nodes":[{"pos":[0,134],"content":"Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.","nodes":[{"content":"Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.","pos":[0,134]}]}],"pos":[6181,6316],"yaml":true},{"content":"Use the <xref:System.Reflection.Assembly> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.  \n  \n To get an array of <xref:System.Reflection.Assembly> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref:System.AppDomain.GetAssemblies%2A?displayProperty=fullName> method.  \n  \n To load assemblies dynamically, the <xref:System.Reflection.Assembly> class provides the following static methods (`Shared` methods in Visual Basic). Assemblies are loaded into the application domain where the load operation occurs.  \n  \n-   The recommended way to load assemblies is to use the <xref:System.AppDomain.Load%2A> method, which identifies the assembly to be loaded by its display name (for example, \"System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). The search for the assembly follows the rules described in [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).  \n  \n-   The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.  \n  \n-   The <xref:System.Reflection.Assembly.LoadFile%2A> and <xref:System.Reflection.Assembly.LoadFrom%2A> methods are provided for rare scenarios in which an assembly must be identified by path.  \n  \n To get an <xref:System.Reflection.Assembly> object for the currently executing assembly, use the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method.  \n  \n Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly. For example:  \n  \n-   The <xref:System.Reflection.Assembly.GetName%2A> method returns an <xref:System.Reflection.AssemblyName> object that provides access to the parts of the assembly display name.  \n  \n-   The <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method lists the attributes applied to the assembly.  \n  \n-   The <xref:System.Reflection.Assembly.GetFiles%2A> method provides access to the files in the assembly manifest.  \n  \n-   The <xref:System.Reflection.Assembly.GetManifestResourceNames%2A> method provides the names of the resources in the assembly manifest.  \n  \n The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly. The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly. The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly. The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly.  \n  \n For more information on assemblies, see the \"Application Domains and Assemblies\" section in the [Application Domains](~/docs/framework/app-domains/application-domains.md) topic.","nodes":[{"pos":[0,215],"content":"Use the <xref:System.Reflection.Assembly> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.","pos":[0,215],"source":"Use the <xref:System.Reflection.Assembly> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types."}]},{"pos":[222,503],"content":"To get an array of <xref:System.Reflection.Assembly> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref:System.AppDomain.GetAssemblies%2A?displayProperty=fullName> method.","nodes":[{"content":"To get an array of <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <ph id=\"ph2\">&lt;xref:System.AppDomain.GetAssemblies%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,281],"source":"To get an array of <xref:System.Reflection.Assembly> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref:System.AppDomain.GetAssemblies%2A?displayProperty=fullName> method."}]},{"pos":[510,742],"content":"To load assemblies dynamically, the <xref:System.Reflection.Assembly> class provides the following static methods (`Shared` methods in Visual Basic). Assemblies are loaded into the application domain where the load operation occurs.","nodes":[{"content":"To load assemblies dynamically, the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> class provides the following static methods (<ph id=\"ph2\">`Shared`</ph> methods in Visual Basic).","pos":[0,149],"source":"To load assemblies dynamically, the <xref:System.Reflection.Assembly> class provides the following static methods (`Shared` methods in Visual Basic)."},{"content":"Assemblies are loaded into the application domain where the load operation occurs.","pos":[150,232]}]},{"pos":[752,1177],"content":"The recommended way to load assemblies is to use the <xref:System.AppDomain.Load%2A> method, which identifies the assembly to be loaded by its display name (for example, \"System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). The search for the assembly follows the rules described in [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).","nodes":[{"content":"The recommended way to load assemblies is to use the <ph id=\"ph1\">&lt;xref:System.AppDomain.Load%2A&gt;</ph> method, which identifies the assembly to be loaded by its display name (for example, \"System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\").","pos":[0,261],"source":"The recommended way to load assemblies is to use the <xref:System.AppDomain.Load%2A> method, which identifies the assembly to be loaded by its display name (for example, \"System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\")."},{"content":"The search for the assembly follows the rules described in <bpt id=\"p1\">[</bpt>How the Runtime Locates Assemblies<ept id=\"p1\">](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)</ept>.","pos":[262,425],"source":" The search for the assembly follows the rules described in [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md)."}]},{"pos":[1187,1506],"content":"The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.","nodes":[{"content":"The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.","pos":[0,319],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A&gt;</ph> methods enable you to load an assembly for reflection, but not for execution.","pos":[0,201],"source":"The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution."},{"content":"For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.","pos":[202,319]}]}]},{"pos":[1516,1704],"content":"The <xref:System.Reflection.Assembly.LoadFile%2A> and <xref:System.Reflection.Assembly.LoadFrom%2A> methods are provided for rare scenarios in which an assembly must be identified by path.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> methods are provided for rare scenarios in which an assembly must be identified by path.","pos":[0,188],"source":"The <xref:System.Reflection.Assembly.LoadFile%2A> and <xref:System.Reflection.Assembly.LoadFrom%2A> methods are provided for rare scenarios in which an assembly must be identified by path."}]},{"pos":[1711,1873],"content":"To get an <xref:System.Reflection.Assembly> object for the currently executing assembly, use the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method.","nodes":[{"content":"To get an <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> object for the currently executing assembly, use the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetExecutingAssembly%2A&gt;</ph> method.","pos":[0,162],"source":"To get an <xref:System.Reflection.Assembly> object for the currently executing assembly, use the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method."}]},{"pos":[1880,1991],"content":"Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly. For example:","nodes":[{"content":"Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly. For example:","pos":[0,111],"nodes":[{"content":"Many members of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> class provide information about an assembly.","pos":[0,98],"source":"Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly."},{"content":"For example:","pos":[99,111]}]}]},{"pos":[2001,2176],"content":"The <xref:System.Reflection.Assembly.GetName%2A> method returns an <xref:System.Reflection.AssemblyName> object that provides access to the parts of the assembly display name.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetName%2A&gt;</ph> method returns an <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object that provides access to the parts of the assembly display name.","pos":[0,175],"source":"The <xref:System.Reflection.Assembly.GetName%2A> method returns an <xref:System.Reflection.AssemblyName> object that provides access to the parts of the assembly display name."}]},{"pos":[2186,2299],"content":"The <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method lists the attributes applied to the assembly.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A&gt;</ph> method lists the attributes applied to the assembly.","pos":[0,113],"source":"The <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method lists the attributes applied to the assembly."}]},{"pos":[2309,2420],"content":"The <xref:System.Reflection.Assembly.GetFiles%2A> method provides access to the files in the assembly manifest.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetFiles%2A&gt;</ph> method provides access to the files in the assembly manifest.","pos":[0,111],"source":"The <xref:System.Reflection.Assembly.GetFiles%2A> method provides access to the files in the assembly manifest."}]},{"pos":[2430,2564],"content":"The <xref:System.Reflection.Assembly.GetManifestResourceNames%2A> method provides the names of the resources in the assembly manifest.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetManifestResourceNames%2A&gt;</ph> method provides the names of the resources in the assembly manifest.","pos":[0,134],"source":"The <xref:System.Reflection.Assembly.GetManifestResourceNames%2A> method provides the names of the resources in the assembly manifest."}]},{"pos":[2571,3048],"content":"The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly. The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly. The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly. The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly.","nodes":[{"content":"The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly. The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly. The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly. The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly.","pos":[0,477],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetTypes%2A&gt;</ph> method lists all the types in the assembly.","pos":[0,93],"source":"The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetExportedTypes%2A&gt;</ph> method lists the types that are visible to callers outside the assembly.","pos":[94,224],"source":" The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A&gt;</ph> method can be used to search for a particular type in the assembly.","pos":[225,341],"source":" The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.CreateInstance%2A&gt;</ph> method can be used to search for and create instances of types in the assembly.","pos":[342,477],"source":" The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly."}]}]},{"pos":[3055,3232],"content":"For more information on assemblies, see the \"Application Domains and Assemblies\" section in the <bpt id=\"p1\">[</bpt>Application Domains<ept id=\"p1\">](~/docs/framework/app-domains/application-domains.md)</ept> topic.","source":"For more information on assemblies, see the \"Application Domains and Assemblies\" section in the [Application Domains](~/docs/framework/app-domains/application-domains.md) topic."}],"pos":[6327,9592],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.Assembly\"></xref> class.","nodes":[{"pos":[0,88],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.Assembly\"></xref> class."}],"pos":[14190,14279],"yaml":true},{"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Assembly> objects.","nodes":[{"pos":[0,116],"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Assembly> objects.","nodes":[{"content":"This constructor is invoked by derived classes during the construction of <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> objects.","pos":[0,116],"source":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Assembly> objects."}]}],"pos":[14290,14407],"yaml":true,"extradata":"MT"},{"content":"Gets the location of the assembly as specified originally, for example, in an <xref href=\"System.Reflection.AssemblyName\"></xref> object.","nodes":[{"pos":[0,137],"content":"Gets the location of the assembly as specified originally, for example, in an <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyName\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the location of the assembly as specified originally, for example, in an <xref href=\"System.Reflection.AssemblyName\"></xref> object."}],"pos":[15648,15786],"yaml":true},{"content":"To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=fullName> property instead.  \n  \n If the assembly was loaded as a byte array, using an overload of the <xref:System.Reflection.Assembly.Load%2A> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly.","nodes":[{"pos":[0,161],"content":"To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=fullName> property instead.","nodes":[{"content":"To get the absolute path to the loaded manifest-containing file, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Location%2A?displayProperty=fullName&gt;</ph> property instead.","pos":[0,161],"source":"To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=fullName> property instead."}]},{"pos":[168,420],"content":"If the assembly was loaded as a byte array, using an overload of the <xref:System.Reflection.Assembly.Load%2A> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly.","nodes":[{"content":"If the assembly was loaded as a byte array, using an overload of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly.","pos":[0,252],"source":"If the assembly was loaded as a byte array, using an overload of the <xref:System.Reflection.Assembly.Load%2A> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly."}]}],"pos":[15797,16222],"yaml":true,"extradata":"MT"},{"content":"The location of the assembly as specified originally.","nodes":[{"pos":[0,53],"content":"The location of the assembly as specified originally.","nodes":[{"content":"The location of the assembly as specified originally.","pos":[0,53]}]}],"pos":[16875,16929],"yaml":true},{"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.","nodes":[{"pos":[0,132],"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.","nodes":[{"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.","pos":[0,132]}]}],"pos":[18355,18488],"yaml":true},{"content":"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:  \n  \n-   You haven't specified the fully qualified name of the type.  \n  \n-   You've specified the fully qualified type name, but its case doesn’t match the case of the type's <xref:System.Type.FullName%2A?displayProperty=fullName> property. For a case-insensitive comparison of `typeName` with the type's full name, call the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specify `true` for the `ignoreCase` argument.  \n  \n-   The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.","nodes":[{"pos":[0,173],"content":"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:","nodes":[{"content":"If the runtime is unable to find <ph id=\"ph1\">`typeName`</ph> in the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly&gt;</ph> instance, it returns <ph id=\"ph3\">`null`</ph> instead of throwing an exception.","pos":[0,146],"source":"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception."},{"content":"This might happen because:","pos":[147,173]}]},{"pos":[183,242],"content":"You haven't specified the fully qualified name of the type.","nodes":[{"content":"You haven't specified the fully qualified name of the type.","pos":[0,59]}]},{"pos":[252,643],"content":"You've specified the fully qualified type name, but its case doesn’t match the case of the type's <xref:System.Type.FullName%2A?displayProperty=fullName> property. For a case-insensitive comparison of `typeName` with the type's full name, call the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specify `true` for the `ignoreCase` argument.","nodes":[{"content":"You've specified the fully qualified type name, but its case doesn’t match the case of the type's <ph id=\"ph1\">&lt;xref:System.Type.FullName%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,163],"source":"You've specified the fully qualified type name, but its case doesn’t match the case of the type's <xref:System.Type.FullName%2A?displayProperty=fullName> property."},{"content":"For a case-insensitive comparison of <ph id=\"ph1\">`typeName`</ph> with the type's full name, call the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29&gt;</ph> overload and specify <ph id=\"ph3\">`true`</ph> for the <ph id=\"ph4\">`ignoreCase`</ph> argument.","pos":[164,391],"source":" For a case-insensitive comparison of `typeName` with the type's full name, call the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specify `true` for the `ignoreCase` argument."}]},{"pos":[653,734],"content":"The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.","nodes":[{"content":"The type doesn’t exist in the current <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> instance.","pos":[0,81],"source":"The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance."}]}],"pos":[18499,19242],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type.FullName\"></xref> of the type to locate.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type.FullName\"&gt;&lt;/xref&gt;</ph> of the type to locate.","source":"The <xref href=\"System.Type.FullName\"></xref> of the type to locate."}],"pos":[19928,19997],"yaml":true},{"content":"An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`.","nodes":[{"pos":[0,312],"content":"An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`.","nodes":[{"content":"An instance of the specified type created with the default constructor; or <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","pos":[0,120],"source":"An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found."},{"content":"The type is resolved using the default binder, without specifying culture or activation attributes, and with <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> set to <ph id=\"ph2\">`Public`</ph> or <ph id=\"ph3\">`Instance`</ph>.","pos":[121,312],"source":" The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`."}]}],"pos":[20054,20367],"yaml":true},{"content":"<code>typeName</code> is an empty string (\"\") or a string beginning with a null character.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> is an empty string (\"\") or a string beginning with a null character.","source":"<code>typeName</code> is an empty string (\"\") or a string beginning with a null character."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,173],"content":"The current assembly was loaded into the reflection-only context.","nodes":[{"content":"The current assembly was loaded into the reflection-only context.","pos":[0,65]}]}],"pos":[20530,20712],"yaml":true},{"content":"<code>typeName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeName</code> is `null`."}],"pos":[20814,20847],"yaml":true},{"content":"No matching constructor was found.","nodes":[{"pos":[0,34],"content":"No matching constructor was found.","nodes":[{"content":"No matching constructor was found.","pos":[0,34]}]}],"pos":[20951,20986],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>typeName</code> requires a dependent assembly that could not be found."}],"pos":[21094,21171],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>typeName</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,254],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded."}],"pos":[21271,21532],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,255],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.","source":"<code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version."}],"pos":[21638,21900],"yaml":true},{"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.","nodes":[{"pos":[0,140],"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.","nodes":[{"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.","pos":[0,140]}]}],"pos":[23332,23473],"yaml":true},{"content":"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:  \n  \n-   You haven't specified the fully qualified name of the type.  \n  \n-   The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.","nodes":[{"pos":[0,173],"content":"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:","nodes":[{"content":"If the runtime is unable to find <ph id=\"ph1\">`typeName`</ph> in the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly&gt;</ph> instance, it returns <ph id=\"ph3\">`null`</ph> instead of throwing an exception.","pos":[0,146],"source":"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception."},{"content":"This might happen because:","pos":[147,173]}]},{"pos":[183,242],"content":"You haven't specified the fully qualified name of the type.","nodes":[{"content":"You haven't specified the fully qualified name of the type.","pos":[0,59]}]},{"pos":[252,333],"content":"The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.","nodes":[{"content":"The type doesn’t exist in the current <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> instance.","pos":[0,81],"source":"The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance."}]}],"pos":[23484,23824],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type.FullName\"></xref> of the type to locate.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type.FullName\"&gt;&lt;/xref&gt;</ph> of the type to locate.","source":"The <xref href=\"System.Type.FullName\"></xref> of the type to locate."}],"pos":[24967,25036],"yaml":true},{"content":"`true` to ignore the case of the type name; otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> to ignore the case of the type name; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore the case of the type name; otherwise, `false`."}],"pos":[25103,25169],"yaml":true},{"content":"An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`.","nodes":[{"pos":[0,312],"content":"An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`.","nodes":[{"content":"An instance of the specified type created with the default constructor; or <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","pos":[0,120],"source":"An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found."},{"content":"The type is resolved using the default binder, without specifying culture or activation attributes, and with <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> set to <ph id=\"ph2\">`Public`</ph> or <ph id=\"ph3\">`Instance`</ph>.","pos":[121,312],"source":" The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`."}]}],"pos":[25226,25539],"yaml":true},{"content":"<code>typeName</code> is an empty string (\"\") or a string beginning with a null character.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> is an empty string (\"\") or a string beginning with a null character.","source":"<code>typeName</code> is an empty string (\"\") or a string beginning with a null character."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,173],"content":"The current assembly was loaded into the reflection-only context.","nodes":[{"content":"The current assembly was loaded into the reflection-only context.","pos":[0,65]}]}],"pos":[25702,25884],"yaml":true},{"content":"No matching constructor was found.","nodes":[{"pos":[0,34],"content":"No matching constructor was found.","nodes":[{"content":"No matching constructor was found.","pos":[0,34]}]}],"pos":[25988,26023],"yaml":true},{"content":"<code>typeName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeName</code> is `null`."}],"pos":[26125,26158],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>typeName</code> requires a dependent assembly that could not be found."}],"pos":[26266,26343],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>typeName</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,254],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded."}],"pos":[26443,26704],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,255],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.","source":"<code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version."}],"pos":[26810,27072],"yaml":true},{"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.","nodes":[{"pos":[0,223],"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.","nodes":[{"content":"Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.","pos":[0,223]}]}],"pos":[29010,29234],"yaml":true},{"content":"The <xref href=\"System.Type.FullName\"></xref> of the type to locate.","nodes":[{"pos":[0,68],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type.FullName\"&gt;&lt;/xref&gt;</ph> of the type to locate.","source":"The <xref href=\"System.Type.FullName\"></xref> of the type to locate."}],"pos":[29575,29644],"yaml":true},{"content":"`true` to ignore the case of the type name; otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> to ignore the case of the type name; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore the case of the type name; otherwise, `false`."}],"pos":[29711,29777],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,162],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,162],"source":" The value is a combination of bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[29861,30024],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,202],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects via reflection.","pos":[0,140],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[141,202],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[30097,30300],"yaml":true},{"content":"An array that contains the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <code>args</code> must be an empty array or `null`.","nodes":[{"pos":[0,271],"content":"An array that contains the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <code>args</code> must be an empty array or `null`.","nodes":[{"content":"An array that contains the arguments to be passed to the constructor.","pos":[0,69]},{"content":"This array of arguments must match in number, order, and type the parameters of the constructor to be invoked.","pos":[70,180]},{"content":"If the default constructor is desired, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> must be an empty array or <ph id=\"ph2\">`null`</ph>.","pos":[181,271],"source":" If the default constructor is desired, <code>args</code> must be an empty array or `null`."}]}],"pos":[30362,30634],"yaml":true},{"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)","nodes":[{"pos":[0,293],"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)","nodes":[{"content":"An instance of <ph id=\"ph1\">`CultureInfo`</ph> used to govern the coercion of types.","pos":[0,66],"source":"An instance of `CultureInfo` used to govern the coercion of types."},{"content":"If this is <ph id=\"ph1\">`null`</ph>, the <ph id=\"ph2\">`CultureInfo`</ph> for the current thread is used.","pos":[67,135],"source":" If this is `null`, the `CultureInfo` for the current thread is used."},{"content":"(This is necessary to convert a <ph id=\"ph1\">`String`</ph> that represents 1000 to a <ph id=\"ph2\">`Double`</ph> value, for example, since 1000 is represented differently by different cultures.)","pos":[136,293],"source":" (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)"}]}],"pos":[30716,31010],"yaml":true},{"content":"An array of one or more attributes that can participate in activation. Typically, an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.","nodes":[{"pos":[0,521],"content":"An array of one or more attributes that can participate in activation. Typically, an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.","nodes":[{"content":"An array of one or more attributes that can participate in activation.","pos":[0,70]},{"content":"Typically, an array that contains a single <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"&gt;&lt;/xref&gt;</ph> object that specifies the URL that is required to activate a remote object.","pos":[71,258],"source":" Typically, an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object."},{"content":"This parameter is related to client-activated objects.","pos":[260,314]},{"content":"Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development.","pos":[315,443]},{"content":"Distributed applications should instead use Windows Communication Foundation.","pos":[444,521]}]}],"pos":[31088,31610],"yaml":true},{"content":"An instance of the specified type, or `null` if <code>typeName</code> is not found. The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.","nodes":[{"pos":[0,201],"content":"An instance of the specified type, or `null` if <code>typeName</code> is not found. The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.","nodes":[{"content":"An instance of the specified type, or <ph id=\"ph1\">`null`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found.","pos":[0,83],"source":"An instance of the specified type, or `null` if <code>typeName</code> is not found."},{"content":"The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.","pos":[84,201]}]}],"pos":[31667,31869],"yaml":true},{"content":"<code>typeName</code> is an empty string (\"\") or a string beginning with a null character.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> is an empty string (\"\") or a string beginning with a null character.","source":"<code>typeName</code> is an empty string (\"\") or a string beginning with a null character."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,173],"content":"The current assembly was loaded into the reflection-only context.","nodes":[{"content":"The current assembly was loaded into the reflection-only context.","pos":[0,65]}]}],"pos":[32032,32214],"yaml":true},{"content":"<code>typeName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeName</code> is `null`."}],"pos":[32316,32349],"yaml":true},{"content":"No matching constructor was found.","nodes":[{"pos":[0,34],"content":"No matching constructor was found.","nodes":[{"content":"No matching constructor was found.","pos":[0,34]}]}],"pos":[32453,32488],"yaml":true},{"content":"A non-empty activation attributes array is passed to a type that does not inherit from <xref href=\"System.MarshalByRefObject\"></xref>.","nodes":[{"pos":[0,134],"content":"A non-empty activation attributes array is passed to a type that does not inherit from <ph id=\"ph1\">&lt;xref href=\"System.MarshalByRefObject\"&gt;&lt;/xref&gt;</ph>.","source":"A non-empty activation attributes array is passed to a type that does not inherit from <xref href=\"System.MarshalByRefObject\"></xref>."}],"pos":[32590,32725],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>typeName</code> requires a dependent assembly that could not be found."}],"pos":[32833,32910],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>typeName</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[98,102],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[109,254],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeName</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded."}],"pos":[33010,33271],"yaml":true},{"content":"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>typeName</code> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[97,101],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[108,261],"content":"<ph id=\"ph1\">&lt;code&gt;typeName&lt;/code&gt;</ph> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version.","source":"<code>typeName</code> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version."}],"pos":[33377,33645],"yaml":true},{"content":"Creates the name of a type qualified by the display name of its assembly.","nodes":[{"pos":[0,73],"content":"Creates the name of a type qualified by the display name of its assembly.","nodes":[{"content":"Creates the name of a type qualified by the display name of its assembly.","pos":[0,73]}]}],"pos":[34957,35031],"yaml":true},{"content":"The format of the returned string is:  \n  \n \\<FullTypeName>, \\<AssemblyDisplayName>  \n  \n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \n  \n To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.  For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>.","nodes":[{"pos":[0,37],"content":"The format of the returned string is:","nodes":[{"content":"The format of the returned string is:","pos":[0,37]}]},{"pos":[44,83],"content":"\\<FullTypeName>, \\<AssemblyDisplayName>","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph>FullTypeName&gt;, <ph id=\"ph2\">\\&lt;</ph>AssemblyDisplayName&gt;","pos":[0,39],"source":"\\<FullTypeName>, \\<AssemblyDisplayName>"}]},{"pos":[90,199],"content":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.","nodes":[{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a description of the format of the display name of an assembly.","pos":[0,109],"source":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly."}]},{"pos":[206,465],"content":"To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.  For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>.","nodes":[{"content":"To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.  For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>.","pos":[0,259],"nodes":[{"content":"To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.","pos":[0,136]},{"content":"For information about qualified assembly names, see <ph id=\"ph1\">&lt;xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName&gt;</ph>.","pos":[138,259],"source":"  For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>."}]}]}],"pos":[35042,35518],"yaml":true,"extradata":"MT"},{"content":"The display name of an assembly.","nodes":[{"pos":[0,32],"content":"The display name of an assembly.","nodes":[{"content":"The display name of an assembly.","pos":[0,32]}]}],"pos":[35706,35739],"yaml":true},{"content":"The full name of a type.","nodes":[{"pos":[0,24],"content":"The full name of a type.","nodes":[{"content":"The full name of a type.","pos":[0,24]}]}],"pos":[35803,35828],"yaml":true},{"content":"The full name of the type qualified by the display name of the assembly.","nodes":[{"pos":[0,72],"content":"The full name of the type qualified by the display name of the assembly.","nodes":[{"content":"The full name of the type qualified by the display name of the assembly.","pos":[0,72]}]}],"pos":[35885,35958],"yaml":true},{"content":"Gets a collection that contains this assembly's custom attributes.","nodes":[{"pos":[0,66],"content":"Gets a collection that contains this assembly's custom attributes.","nodes":[{"content":"Gets a collection that contains this assembly's custom attributes.","pos":[0,66]}]}],"pos":[37340,37407],"yaml":true},{"content":"A collection that contains this assembly's custom attributes.","nodes":[{"pos":[0,61],"content":"A collection that contains this assembly's custom attributes.","nodes":[{"content":"A collection that contains this assembly's custom attributes.","pos":[0,61]}]}],"pos":[37670,37732],"yaml":true},{"content":"Gets a collection of the types defined in this assembly.","nodes":[{"pos":[0,56],"content":"Gets a collection of the types defined in this assembly.","nodes":[{"content":"Gets a collection of the types defined in this assembly.","pos":[0,56]}]}],"pos":[39287,39344],"yaml":true},{"content":"The <xref:System.Reflection.Assembly.DefinedTypes%2A> property is comparable to the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method, except that the <xref:System.Reflection.Assembly.DefinedTypes%2A> property returns a [collection](../Topic/IEnumerable\\(T\\)%20Interface.md) of <xref:System.Reflection.TypeInfo> objects, and the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method returns an array of <xref:System.Type> objects.  \n  \n The returned array includes nested types.","nodes":[{"pos":[0,482],"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.DefinedTypes%2A&gt;</ph> property is comparable to the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName&gt;</ph> method, except that the <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.DefinedTypes%2A&gt;</ph> property returns a <bpt id=\"p1\">[</bpt>collection<ept id=\"p1\">](../Topic/IEnumerable\\(T\\)%20Interface.md)</ept> of <ph id=\"ph4\">&lt;xref:System.Reflection.TypeInfo&gt;</ph> objects, and the <ph id=\"ph5\">&lt;xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName&gt;</ph> method returns an array of <ph id=\"ph6\">&lt;xref:System.Type&gt;</ph> objects.","source":"The <xref:System.Reflection.Assembly.DefinedTypes%2A> property is comparable to the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method, except that the <xref:System.Reflection.Assembly.DefinedTypes%2A> property returns a [collection](../Topic/IEnumerable\\(T\\)%20Interface.md) of <xref:System.Reflection.TypeInfo> objects, and the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method returns an array of <xref:System.Type> objects."},{"pos":[489,530],"content":"The returned array includes nested types.","nodes":[{"content":"The returned array includes nested types.","pos":[0,41]}]}],"pos":[39355,39892],"yaml":true,"extradata":"MT"},{"content":"A collection of the types defined in this assembly.","nodes":[{"pos":[0,51],"content":"A collection of the types defined in this assembly.","nodes":[{"content":"A collection of the types defined in this assembly.","pos":[0,51]}]}],"pos":[40129,40181],"yaml":true},{"content":"Gets the entry point of this assembly.","nodes":[{"pos":[0,38],"content":"Gets the entry point of this assembly.","nodes":[{"content":"Gets the entry point of this assembly.","pos":[0,38]}]}],"pos":[41720,41759],"yaml":true},{"content":"An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), `null` is returned.","nodes":[{"pos":[0,144],"content":"An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), `null` is returned.","nodes":[{"content":"An object that represents the entry point of this assembly.","pos":[0,59]},{"content":"If no entry point is found (for example, the assembly is a DLL), <ph id=\"ph1\">`null`</ph> is returned.","pos":[60,144],"source":" If no entry point is found (for example, the assembly is a DLL), `null` is returned."}]}],"pos":[41918,42063],"yaml":true},{"content":"Determines whether this assembly and the specified object are equal.","nodes":[{"pos":[0,68],"content":"Determines whether this assembly and the specified object are equal.","nodes":[{"content":"Determines whether this assembly and the specified object are equal.","pos":[0,68]}]}],"pos":[43443,43512],"yaml":true},{"content":"The <xref:System.Reflection.Assembly.Equals%2A> method performs a test for reference equality to determine whether the current instance and `o` are equal.","nodes":[{"pos":[0,154],"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Equals%2A&gt;</ph> method performs a test for reference equality to determine whether the current instance and <ph id=\"ph2\">`o`</ph> are equal.","source":"The <xref:System.Reflection.Assembly.Equals%2A> method performs a test for reference equality to determine whether the current instance and `o` are equal."}],"pos":[43523,43678],"yaml":true,"extradata":"MT"},{"content":"The object to compare with this instance.","nodes":[{"pos":[0,41],"content":"The object to compare with this instance.","nodes":[{"content":"The object to compare with this instance.","pos":[0,41]}]}],"pos":[43814,43856],"yaml":true},{"content":"`true` if <code>o</code> is equal to this instance; otherwise, `false`.","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">o</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>o</code> is equal to this instance; otherwise, `false`."}],"pos":[43914,43988],"yaml":true},{"content":"Gets the URI, including escape characters, that represents the codebase.","nodes":[{"pos":[0,72],"content":"Gets the URI, including escape characters, that represents the codebase.","nodes":[{"content":"Gets the URI, including escape characters, that represents the codebase.","pos":[0,72]}]}],"pos":[45529,45602],"yaml":true},{"content":"A URI with escape characters.","nodes":[{"pos":[0,29],"content":"A URI with escape characters.","nodes":[{"content":"A URI with escape characters.","pos":[0,29]}]}],"pos":[45729,45759],"yaml":true},{"content":"Gets the evidence for this assembly.","nodes":[{"pos":[0,36],"content":"Gets the evidence for this assembly.","nodes":[{"content":"Gets the evidence for this assembly.","pos":[0,36]}]}],"pos":[46888,46925],"yaml":true},{"content":"Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.","nodes":[{"pos":[0,136],"content":"Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.","nodes":[{"content":"Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.","pos":[0,136]}]}],"pos":[46936,47073],"yaml":true,"extradata":"MT"},{"content":"The evidence for this assembly.","nodes":[{"pos":[0,31],"content":"The evidence for this assembly.","nodes":[{"content":"The evidence for this assembly.","pos":[0,31]}]}],"pos":[47236,47268],"yaml":true},{"content":"Gets a collection of the public types defined in this assembly that are visible outside the assembly.","nodes":[{"pos":[0,101],"content":"Gets a collection of the public types defined in this assembly that are visible outside the assembly.","nodes":[{"content":"Gets a collection of the public types defined in this assembly that are visible outside the assembly.","pos":[0,101]}]}],"pos":[48405,48507],"yaml":true},{"content":"A collection of the public types defined in this assembly that are visible outside the assembly.","nodes":[{"pos":[0,96],"content":"A collection of the public types defined in this assembly that are visible outside the assembly.","nodes":[{"content":"A collection of the public types defined in this assembly that are visible outside the assembly.","pos":[0,96]}]}],"pos":[48708,48805],"yaml":true},{"content":"Gets the display name of the assembly.","nodes":[{"pos":[0,38],"content":"Gets the display name of the assembly.","nodes":[{"content":"Gets the display name of the assembly.","pos":[0,38]}]}],"pos":[50333,50372],"yaml":true},{"content":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \n  \n> [!NOTE]\n>  Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.  \n  \n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","nodes":[{"pos":[0,109],"content":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.","nodes":[{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a description of the format of the display name of an assembly.","pos":[0,109],"source":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly."}]},{"pos":[117,395],"content":"[!NOTE]\n Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.","leadings":["","> "],"nodes":[{"content":" Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.","pos":[8,276],"nodes":[{"content":"Writing your own code to parse display names is not recommended.","pos":[1,65]},{"content":"Instead, pass the display name to the <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.%23ctor%2A&gt;</ph> constructor, which parses it and populates the appropriate fields of the new <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName&gt;</ph>.","pos":[66,268],"source":" Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>."}]}]},{"pos":[402,779],"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","nodes":[{"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","pos":[0,377],"nodes":[{"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.","pos":[0,143]},{"content":"However, it is not included in the string returned by the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.FullName%2A&gt;</ph> property, for compatibility reasons.","pos":[144,284],"source":" However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons."},{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName&gt;</ph>.","pos":[285,377],"source":" See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>."}]}]}],"pos":[50383,51170],"yaml":true,"extradata":"MT"},{"content":"The display name of the assembly.","nodes":[{"pos":[0,33],"content":"The display name of the assembly.","nodes":[{"content":"The display name of the assembly.","pos":[0,33]}]}],"pos":[51863,51897],"yaml":true},{"content":"Gets the currently loaded assembly in which the specified type is defined.","nodes":[{"pos":[0,74],"content":"Gets the currently loaded assembly in which the specified type is defined.","nodes":[{"content":"Gets the currently loaded assembly in which the specified type is defined.","pos":[0,74]}]}],"pos":[53471,53546],"yaml":true},{"content":"Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=fullName> property. However, the <xref:System.Type.Assembly?displayProperty=fullName> property typically offers superior performance.  \n  \n In order to call this method, you must have a <xref:System.Type> object, which means that the assembly in which the class is defined must already be loaded.","nodes":[{"pos":[0,242],"content":"Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=fullName> property. However, the <xref:System.Type.Assembly?displayProperty=fullName> property typically offers superior performance.","nodes":[{"content":"Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=fullName> property. However, the <xref:System.Type.Assembly?displayProperty=fullName> property typically offers superior performance.","pos":[0,242],"nodes":[{"content":"Calling this method is equivalent to retrieving the value of the  <ph id=\"ph1\">&lt;xref:System.Type.Assembly?displayProperty=fullName&gt;</ph> property.","pos":[0,128],"source":"Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=fullName> property."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.Type.Assembly?displayProperty=fullName&gt;</ph> property typically offers superior performance.","pos":[129,242],"source":" However, the <xref:System.Type.Assembly?displayProperty=fullName> property typically offers superior performance."}]}]},{"pos":[249,405],"content":"In order to call this method, you must have a <xref:System.Type> object, which means that the assembly in which the class is defined must already be loaded.","nodes":[{"content":"In order to call this method, you must have a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object, which means that the assembly in which the class is defined must already be loaded.","pos":[0,156],"source":"In order to call this method, you must have a <xref:System.Type> object, which means that the assembly in which the class is defined must already be loaded."}]}],"pos":[53557,53967],"yaml":true,"extradata":"MT"},{"content":"An object representing a type in the assembly that will be returned.","nodes":[{"pos":[0,68],"content":"An object representing a type in the assembly that will be returned.","nodes":[{"content":"An object representing a type in the assembly that will be returned.","pos":[0,68]}]}],"pos":[54720,54789],"yaml":true},{"content":"The assembly in which the specified type is defined.","nodes":[{"pos":[0,52],"content":"The assembly in which the specified type is defined.","nodes":[{"content":"The assembly in which the specified type is defined.","pos":[0,52]}]}],"pos":[54859,54912],"yaml":true},{"content":"<code>type</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>type</code> is `null`."}],"pos":[55080,55109],"yaml":true},{"content":"Returns the <xref href=\"System.Reflection.Assembly\"></xref> of the method that invoked the currently executing method.","nodes":[{"pos":[0,118],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> of the method that invoked the currently executing method.","source":"Returns the <xref href=\"System.Reflection.Assembly\"></xref> of the method that invoked the currently executing method."}],"pos":[56264,56383],"yaml":true},{"content":"If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A>may differ unexpectedly. For example, consider the following methods and assemblies:  \n  \n-   Method `M1` in assembly `A1` calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.  \n  \n-   Method `M2` in assembly `A2` calls `M1`.  \n  \n-   Method `M3` in assembly `A3` calls `M2`.  \n  \n When `M1` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M1` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`. Similarly, when `M2` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M2` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.  \n  \n This effect also occurs when `M1` executes as a tail call from `M2`, or when `M2` executes as a tail call from `M3`. You can prevent the JIT compiler from inlining the method that calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>, by applying the <xref:System.Runtime.CompilerServices.MethodImplAttribute> attribute with the <xref:System.Runtime.CompilerServices.MethodImplOptions?displayProperty=fullName> flag, but there is no similar mechanism for preventing tail calls.","nodes":[{"pos":[0,356],"content":"If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A>may differ unexpectedly. For example, consider the following methods and assemblies:","nodes":[{"content":"If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A>may differ unexpectedly. For example, consider the following methods and assemblies:","pos":[0,356],"nodes":[{"content":"If the method that calls the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph>may differ unexpectedly.","pos":[0,296],"source":"If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A>may differ unexpectedly."},{"content":"For example, consider the following methods and assemblies:","pos":[297,356]}]}]},{"pos":[366,457],"content":"Method <ph id=\"ph1\">`M1`</ph> in assembly <ph id=\"ph2\">`A1`</ph> calls <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph>.","source":"Method `M1` in assembly `A1` calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>."},{"pos":[467,507],"content":"Method <ph id=\"ph1\">`M2`</ph> in assembly <ph id=\"ph2\">`A2`</ph> calls <ph id=\"ph3\">`M1`</ph>.","source":"Method `M2` in assembly `A2` calls `M1`."},{"pos":[517,557],"content":"Method <ph id=\"ph1\">`M3`</ph> in assembly <ph id=\"ph2\">`A3`</ph> calls <ph id=\"ph3\">`M2`</ph>.","source":"Method `M3` in assembly `A3` calls `M2`."},{"pos":[564,950],"content":"When `M1` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M1` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`. Similarly, when `M2` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M2` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.","nodes":[{"content":"When <ph id=\"ph1\">`M1`</ph> is not inlined, <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph> returns <ph id=\"ph3\">`A2`</ph>.","pos":[0,95],"source":"When `M1` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`."},{"content":"When <ph id=\"ph1\">`M1`</ph> is inlined, <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph> returns <ph id=\"ph3\">`A3`</ph>.","pos":[96,187],"source":" When `M1` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`."},{"content":"Similarly, when <ph id=\"ph1\">`M2`</ph> is not inlined, <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph> returns <ph id=\"ph3\">`A2`</ph>.","pos":[188,294],"source":" Similarly, when `M2` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`."},{"content":"When <ph id=\"ph1\">`M2`</ph> is inlined, <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph> returns <ph id=\"ph3\">`A3`</ph>.","pos":[295,386],"source":" When `M2` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`."}]},{"pos":[957,1442],"content":"This effect also occurs when `M1` executes as a tail call from `M2`, or when `M2` executes as a tail call from `M3`. You can prevent the JIT compiler from inlining the method that calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>, by applying the <xref:System.Runtime.CompilerServices.MethodImplAttribute> attribute with the <xref:System.Runtime.CompilerServices.MethodImplOptions?displayProperty=fullName> flag, but there is no similar mechanism for preventing tail calls.","nodes":[{"content":"This effect also occurs when <ph id=\"ph1\">`M1`</ph> executes as a tail call from <ph id=\"ph2\">`M2`</ph>, or when <ph id=\"ph3\">`M2`</ph> executes as a tail call from <ph id=\"ph4\">`M3`</ph>.","pos":[0,116],"source":"This effect also occurs when `M1` executes as a tail call from `M2`, or when `M2` executes as a tail call from `M3`."},{"content":"You can prevent the JIT compiler from inlining the method that calls <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph>, by applying the <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.MethodImplAttribute&gt;</ph> attribute with the <ph id=\"ph3\">&lt;xref:System.Runtime.CompilerServices.MethodImplOptions?displayProperty=fullName&gt;</ph> flag, but there is no similar mechanism for preventing tail calls.","pos":[117,485],"source":" You can prevent the JIT compiler from inlining the method that calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>, by applying the <xref:System.Runtime.CompilerServices.MethodImplAttribute> attribute with the <xref:System.Runtime.CompilerServices.MethodImplOptions?displayProperty=fullName> flag, but there is no similar mechanism for preventing tail calls."}]}],"pos":[56394,57849],"yaml":true,"extradata":"MT"},{"content":"The `Assembly` object of the method that invoked the currently executing method.","nodes":[{"pos":[0,80],"content":"The <ph id=\"ph1\">`Assembly`</ph> object of the method that invoked the currently executing method.","source":"The `Assembly` object of the method that invoked the currently executing method."}],"pos":[58572,58653],"yaml":true},{"content":"Gets all the custom attributes for this assembly.","nodes":[{"pos":[0,49],"content":"Gets all the custom attributes for this assembly.","nodes":[{"content":"Gets all the custom attributes for this assembly.","pos":[0,49]}]}],"pos":[59959,60009],"yaml":true},{"content":"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.  \n  \n A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  \n  \n The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  \n  \n|Pseudo-Attribute|Metadata Bits|Reflection Accessor|  \n|-----------------------|-------------------|-------------------------|  \n|DllImportAttribute|CorPInvokeMap<br /><br /> DLL name|No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.|  \n|GuidAttribute|Stored as a real custom attribute.|Accessed as a real custom attribute.|  \n|ComImportAttribute|CorTypeAttr.tdImport|Type.Attributes.Import|  \n|SerializableAttribute|CorTypeAttr.tdSerializable|Type.Attributes.Serializable|  \n|NonSerializedAttribute|CorFieldAttr.fdNotSerialized|FieldInfo.Attributes.NotSerialized|  \n|MethodImplAttribute|CorMethodImpl|MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()|  \n|MarshalAsAttribute|Various bits.|No accessor.|  \n|PreserveSigAttribute|CorMethodImpl.miOLE|MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE|  \n|InAttribute|CorParamAttr.pdIn|ParameterInfo.Attributes.In|  \n|OutAttribute|CorParamAttr.pdOut|ParameterInfo.Attributes.Out|  \n|StructLayoutAttribute|CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.|Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.|  \n|FieldOffsetAttribute|Field offset.|No accessor.|  \n|AssemblyLoadAttribute|CorAssemblyFlags|No accessor or enumerator.|","nodes":[{"pos":[0,188],"content":"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.","nodes":[{"content":"This method implements the corresponding <ph id=\"ph1\">&lt;xref:System.Reflection.ICustomAttributeProvider&gt;</ph> interface method.","pos":[0,108],"source":"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method."},{"content":"Therefore, the <ph id=\"ph1\">`inherit`</ph> parameter must be specified even though it is ignored.","pos":[109,188],"source":" Therefore, the `inherit` parameter must be specified even though it is ignored."}]},{"pos":[195,549],"content":"A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.","nodes":[{"content":"A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.","pos":[0,354],"nodes":[{"content":"A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present.","pos":[0,102]},{"content":"Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded.","pos":[103,276]},{"content":"Some of the resulting bits cannot be accessed using existing reflection APIs.","pos":[277,354]}]}]},{"pos":[556,683],"content":"The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.","nodes":[{"content":"The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.","pos":[0,127]}]},{"pos":[690,706],"content":"Pseudo-Attribute","nodes":[{"content":"Pseudo-Attribute","pos":[0,16]}]},{"pos":[707,720],"content":"Metadata Bits","nodes":[{"content":"Metadata Bits","pos":[0,13]}]},{"pos":[721,740],"content":"Reflection Accessor","nodes":[{"content":"Reflection Accessor","pos":[0,19]}]},{"pos":[819,837],"content":"DllImportAttribute","nodes":[{"content":"DllImportAttribute","pos":[0,18]}]},{"pos":[838,872],"content":"CorPInvokeMap<br /><br /> DLL name","nodes":[{"content":"CorPInvokeMap","pos":[0,13]},{"content":"DLL name","pos":[26,34]}]},{"pos":[873,983],"content":"No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.","nodes":[{"content":"No accessor for PInvokeMap for ordinary method/global method attributes.","pos":[0,72]},{"content":"No accessor for DLL name.","pos":[85,110]}]},{"pos":[988,1001],"content":"GuidAttribute","nodes":[{"content":"GuidAttribute","pos":[0,13]}]},{"pos":[1002,1036],"content":"Stored as a real custom attribute.","nodes":[{"content":"Stored as a real custom attribute.","pos":[0,34]}]},{"pos":[1037,1073],"content":"Accessed as a real custom attribute.","nodes":[{"content":"Accessed as a real custom attribute.","pos":[0,36]}]},{"pos":[1078,1096],"content":"ComImportAttribute","nodes":[{"content":"ComImportAttribute","pos":[0,18]}]},{"pos":[1097,1117],"content":"CorTypeAttr.tdImport","nodes":[{"content":"CorTypeAttr.tdImport","pos":[0,20]}]},{"pos":[1118,1140],"content":"Type.Attributes.Import","nodes":[{"content":"Type.Attributes.Import","pos":[0,22]}]},{"pos":[1145,1166],"content":"SerializableAttribute","nodes":[{"content":"SerializableAttribute","pos":[0,21]}]},{"pos":[1167,1193],"content":"CorTypeAttr.tdSerializable","nodes":[{"content":"CorTypeAttr.tdSerializable","pos":[0,26]}]},{"pos":[1194,1222],"content":"Type.Attributes.Serializable","nodes":[{"content":"Type.Attributes.Serializable","pos":[0,28]}]},{"pos":[1227,1249],"content":"NonSerializedAttribute","nodes":[{"content":"NonSerializedAttribute","pos":[0,22]}]},{"pos":[1250,1278],"content":"CorFieldAttr.fdNotSerialized","nodes":[{"content":"CorFieldAttr.fdNotSerialized","pos":[0,28]}]},{"pos":[1279,1313],"content":"FieldInfo.Attributes.NotSerialized","nodes":[{"content":"FieldInfo.Attributes.NotSerialized","pos":[0,34]}]},{"pos":[1318,1337],"content":"MethodImplAttribute","nodes":[{"content":"MethodImplAttribute","pos":[0,19]}]},{"pos":[1338,1351],"content":"CorMethodImpl","nodes":[{"content":"CorMethodImpl","pos":[0,13]}]},{"pos":[1352,1452],"content":"MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()","nodes":[{"content":"MethodInfo.GetMethodImplementationFlags()","pos":[0,41]},{"content":"ConstructorInfo.GetMethodImplementationFlags()","pos":[54,100]}]},{"pos":[1457,1475],"content":"MarshalAsAttribute","nodes":[{"content":"MarshalAsAttribute","pos":[0,18]}]},{"pos":[1476,1489],"content":"Various bits.","nodes":[{"content":"Various bits.","pos":[0,13]}]},{"pos":[1490,1502],"content":"No accessor.","nodes":[{"content":"No accessor.","pos":[0,12]}]},{"pos":[1507,1527],"content":"PreserveSigAttribute","nodes":[{"content":"PreserveSigAttribute","pos":[0,20]}]},{"pos":[1528,1547],"content":"CorMethodImpl.miOLE","nodes":[{"content":"CorMethodImpl.miOLE","pos":[0,19]}]},{"pos":[1548,1656],"content":"MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE","nodes":[{"content":"MethodInfo.GetMethodImplementationFlags().OLE","pos":[0,45]},{"content":"ConstructorInfo.GetMethodImplementationFlags().OLE","pos":[58,108]}]},{"pos":[1661,1672],"content":"InAttribute","nodes":[{"content":"InAttribute","pos":[0,11]}]},{"pos":[1673,1690],"content":"CorParamAttr.pdIn","nodes":[{"content":"CorParamAttr.pdIn","pos":[0,17]}]},{"pos":[1691,1718],"content":"ParameterInfo.Attributes.In","nodes":[{"content":"ParameterInfo.Attributes.In","pos":[0,27]}]},{"pos":[1723,1735],"content":"OutAttribute","nodes":[{"content":"OutAttribute","pos":[0,12]}]},{"pos":[1736,1754],"content":"CorParamAttr.pdOut","nodes":[{"content":"CorParamAttr.pdOut","pos":[0,18]}]},{"pos":[1755,1783],"content":"ParameterInfo.Attributes.Out","nodes":[{"content":"ParameterInfo.Attributes.Out","pos":[0,28]}]},{"pos":[1788,1809],"content":"StructLayoutAttribute","nodes":[{"content":"StructLayoutAttribute","pos":[0,21]}]},{"pos":[1810,2019],"content":"CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.","nodes":[{"content":"CorTypeAttr.tdLayoutSequential","pos":[0,30]},{"content":"CorTypeAttr.tdExplicitLayout","pos":[43,71]},{"content":"CorTypeAttr.tdAnsiClass","pos":[84,107]},{"content":"CorTypeAttr.tdUnicodeClass","pos":[120,146]},{"content":"CorTypeAttr.tdAutoClass","pos":[159,182]},{"content":"Class packing.","pos":[195,209]}]},{"pos":[2020,2237],"content":"Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.","nodes":[{"content":"Type.Attributes.LayoutSequential","pos":[0,32]},{"content":"Type.Attributes.ExplicitLayout","pos":[45,75]},{"content":"Type.Attributes.AnsiClass","pos":[88,113]},{"content":"Type.Attributes.UnicodeClass","pos":[126,154]},{"content":"Type.Attributes.AutoClass","pos":[167,192]},{"content":"No accessor.","pos":[205,217]}]},{"pos":[2242,2262],"content":"FieldOffsetAttribute","nodes":[{"content":"FieldOffsetAttribute","pos":[0,20]}]},{"pos":[2263,2276],"content":"Field offset.","nodes":[{"content":"Field offset.","pos":[0,13]}]},{"pos":[2277,2289],"content":"No accessor.","nodes":[{"content":"No accessor.","pos":[0,12]}]},{"pos":[2294,2315],"content":"AssemblyLoadAttribute","nodes":[{"content":"AssemblyLoadAttribute","pos":[0,21]}]},{"pos":[2316,2332],"content":"CorAssemblyFlags","nodes":[{"content":"CorAssemblyFlags","pos":[0,16]}]},{"pos":[2333,2359],"content":"No accessor or enumerator.","nodes":[{"content":"No accessor or enumerator.","pos":[0,26]}]}],"pos":[60020,62403],"yaml":true,"extradata":"MT"},{"content":"This argument is ignored for objects of type <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,93],"content":"This argument is ignored for objects of type <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"This argument is ignored for objects of type <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[62566,62660],"yaml":true},{"content":"An array that contains the custom attributes for this assembly.","nodes":[{"pos":[0,63],"content":"An array that contains the custom attributes for this assembly.","nodes":[{"content":"An array that contains the custom attributes for this assembly.","pos":[0,63]}]}],"pos":[62719,62783],"yaml":true},{"content":"Gets the custom attributes for this assembly as specified by type.","nodes":[{"pos":[0,66],"content":"Gets the custom attributes for this assembly as specified by type.","nodes":[{"content":"Gets the custom attributes for this assembly as specified by type.","pos":[0,66]}]}],"pos":[64144,64211],"yaml":true},{"content":"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.  \n  \n A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  \n  \n The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  \n  \n|Pseudo-Attribute|Metadata Bits|Reflection Accessor|  \n|-----------------------|-------------------|-------------------------|  \n|DllImportAttribute|CorPInvokeMap<br /><br /> DLL name|No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.|  \n|GuidAttribute|Stored as a real custom attribute.|Accessed as a real custom attribute.|  \n|ComImportAttribute|CorTypeAttr.tdImport|Type.Attributes.Import|  \n|SerializableAttribute|CorTypeAttr.tdSerializable|Type.Attributes.Serializable|  \n|NonSerializedAttribute|CorFieldAttr.fdNotSerialized|FieldInfo.Attributes.NotSerialized|  \n|MethodImplAttribute|CorMethodImpl|MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()|  \n|MarshalAsAttribute|Various bits.|No accessor.|  \n|PreserveSigAttribute|CorMethodImpl.miOLE|MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE|  \n|InAttribute|CorParamAttr.pdIn|ParameterInfo.Attributes.In|  \n|OutAttribute|CorParamAttr.pdOut|ParameterInfo.Attributes.Out|  \n|StructLayoutAttribute|CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.|Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.|  \n|FieldOffsetAttribute|Field offset.|No accessor.|  \n|AssemblyLoadAttribute|CorAssemblyFlags|No accessor or enumerator.|","nodes":[{"pos":[0,188],"content":"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.","nodes":[{"content":"This method implements the corresponding <ph id=\"ph1\">&lt;xref:System.Reflection.ICustomAttributeProvider&gt;</ph> interface method.","pos":[0,108],"source":"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method."},{"content":"Therefore, the <ph id=\"ph1\">`inherit`</ph> parameter must be specified even though it is ignored.","pos":[109,188],"source":" Therefore, the `inherit` parameter must be specified even though it is ignored."}]},{"pos":[195,549],"content":"A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.","nodes":[{"content":"A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.","pos":[0,354],"nodes":[{"content":"A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present.","pos":[0,102]},{"content":"Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded.","pos":[103,276]},{"content":"Some of the resulting bits cannot be accessed using existing reflection APIs.","pos":[277,354]}]}]},{"pos":[556,683],"content":"The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.","nodes":[{"content":"The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.","pos":[0,127]}]},{"pos":[690,706],"content":"Pseudo-Attribute","nodes":[{"content":"Pseudo-Attribute","pos":[0,16]}]},{"pos":[707,720],"content":"Metadata Bits","nodes":[{"content":"Metadata Bits","pos":[0,13]}]},{"pos":[721,740],"content":"Reflection Accessor","nodes":[{"content":"Reflection Accessor","pos":[0,19]}]},{"pos":[819,837],"content":"DllImportAttribute","nodes":[{"content":"DllImportAttribute","pos":[0,18]}]},{"pos":[838,872],"content":"CorPInvokeMap<br /><br /> DLL name","nodes":[{"content":"CorPInvokeMap","pos":[0,13]},{"content":"DLL name","pos":[26,34]}]},{"pos":[873,983],"content":"No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.","nodes":[{"content":"No accessor for PInvokeMap for ordinary method/global method attributes.","pos":[0,72]},{"content":"No accessor for DLL name.","pos":[85,110]}]},{"pos":[988,1001],"content":"GuidAttribute","nodes":[{"content":"GuidAttribute","pos":[0,13]}]},{"pos":[1002,1036],"content":"Stored as a real custom attribute.","nodes":[{"content":"Stored as a real custom attribute.","pos":[0,34]}]},{"pos":[1037,1073],"content":"Accessed as a real custom attribute.","nodes":[{"content":"Accessed as a real custom attribute.","pos":[0,36]}]},{"pos":[1078,1096],"content":"ComImportAttribute","nodes":[{"content":"ComImportAttribute","pos":[0,18]}]},{"pos":[1097,1117],"content":"CorTypeAttr.tdImport","nodes":[{"content":"CorTypeAttr.tdImport","pos":[0,20]}]},{"pos":[1118,1140],"content":"Type.Attributes.Import","nodes":[{"content":"Type.Attributes.Import","pos":[0,22]}]},{"pos":[1145,1166],"content":"SerializableAttribute","nodes":[{"content":"SerializableAttribute","pos":[0,21]}]},{"pos":[1167,1193],"content":"CorTypeAttr.tdSerializable","nodes":[{"content":"CorTypeAttr.tdSerializable","pos":[0,26]}]},{"pos":[1194,1222],"content":"Type.Attributes.Serializable","nodes":[{"content":"Type.Attributes.Serializable","pos":[0,28]}]},{"pos":[1227,1249],"content":"NonSerializedAttribute","nodes":[{"content":"NonSerializedAttribute","pos":[0,22]}]},{"pos":[1250,1278],"content":"CorFieldAttr.fdNotSerialized","nodes":[{"content":"CorFieldAttr.fdNotSerialized","pos":[0,28]}]},{"pos":[1279,1313],"content":"FieldInfo.Attributes.NotSerialized","nodes":[{"content":"FieldInfo.Attributes.NotSerialized","pos":[0,34]}]},{"pos":[1318,1337],"content":"MethodImplAttribute","nodes":[{"content":"MethodImplAttribute","pos":[0,19]}]},{"pos":[1338,1351],"content":"CorMethodImpl","nodes":[{"content":"CorMethodImpl","pos":[0,13]}]},{"pos":[1352,1452],"content":"MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()","nodes":[{"content":"MethodInfo.GetMethodImplementationFlags()","pos":[0,41]},{"content":"ConstructorInfo.GetMethodImplementationFlags()","pos":[54,100]}]},{"pos":[1457,1475],"content":"MarshalAsAttribute","nodes":[{"content":"MarshalAsAttribute","pos":[0,18]}]},{"pos":[1476,1489],"content":"Various bits.","nodes":[{"content":"Various bits.","pos":[0,13]}]},{"pos":[1490,1502],"content":"No accessor.","nodes":[{"content":"No accessor.","pos":[0,12]}]},{"pos":[1507,1527],"content":"PreserveSigAttribute","nodes":[{"content":"PreserveSigAttribute","pos":[0,20]}]},{"pos":[1528,1547],"content":"CorMethodImpl.miOLE","nodes":[{"content":"CorMethodImpl.miOLE","pos":[0,19]}]},{"pos":[1548,1656],"content":"MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE","nodes":[{"content":"MethodInfo.GetMethodImplementationFlags().OLE","pos":[0,45]},{"content":"ConstructorInfo.GetMethodImplementationFlags().OLE","pos":[58,108]}]},{"pos":[1661,1672],"content":"InAttribute","nodes":[{"content":"InAttribute","pos":[0,11]}]},{"pos":[1673,1690],"content":"CorParamAttr.pdIn","nodes":[{"content":"CorParamAttr.pdIn","pos":[0,17]}]},{"pos":[1691,1718],"content":"ParameterInfo.Attributes.In","nodes":[{"content":"ParameterInfo.Attributes.In","pos":[0,27]}]},{"pos":[1723,1735],"content":"OutAttribute","nodes":[{"content":"OutAttribute","pos":[0,12]}]},{"pos":[1736,1754],"content":"CorParamAttr.pdOut","nodes":[{"content":"CorParamAttr.pdOut","pos":[0,18]}]},{"pos":[1755,1783],"content":"ParameterInfo.Attributes.Out","nodes":[{"content":"ParameterInfo.Attributes.Out","pos":[0,28]}]},{"pos":[1788,1809],"content":"StructLayoutAttribute","nodes":[{"content":"StructLayoutAttribute","pos":[0,21]}]},{"pos":[1810,2019],"content":"CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.","nodes":[{"content":"CorTypeAttr.tdLayoutSequential","pos":[0,30]},{"content":"CorTypeAttr.tdExplicitLayout","pos":[43,71]},{"content":"CorTypeAttr.tdAnsiClass","pos":[84,107]},{"content":"CorTypeAttr.tdUnicodeClass","pos":[120,146]},{"content":"CorTypeAttr.tdAutoClass","pos":[159,182]},{"content":"Class packing.","pos":[195,209]}]},{"pos":[2020,2237],"content":"Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.","nodes":[{"content":"Type.Attributes.LayoutSequential","pos":[0,32]},{"content":"Type.Attributes.ExplicitLayout","pos":[45,75]},{"content":"Type.Attributes.AnsiClass","pos":[88,113]},{"content":"Type.Attributes.UnicodeClass","pos":[126,154]},{"content":"Type.Attributes.AutoClass","pos":[167,192]},{"content":"No accessor.","pos":[205,217]}]},{"pos":[2242,2262],"content":"FieldOffsetAttribute","nodes":[{"content":"FieldOffsetAttribute","pos":[0,20]}]},{"pos":[2263,2276],"content":"Field offset.","nodes":[{"content":"Field offset.","pos":[0,13]}]},{"pos":[2277,2289],"content":"No accessor.","nodes":[{"content":"No accessor.","pos":[0,12]}]},{"pos":[2294,2315],"content":"AssemblyLoadAttribute","nodes":[{"content":"AssemblyLoadAttribute","pos":[0,21]}]},{"pos":[2316,2332],"content":"CorAssemblyFlags","nodes":[{"content":"CorAssemblyFlags","pos":[0,16]}]},{"pos":[2333,2359],"content":"No accessor or enumerator.","nodes":[{"content":"No accessor or enumerator.","pos":[0,26]}]}],"pos":[64222,66605],"yaml":true,"extradata":"MT"},{"content":"The type for which the custom attributes are to be returned.","nodes":[{"pos":[0,60],"content":"The type for which the custom attributes are to be returned.","nodes":[{"content":"The type for which the custom attributes are to be returned.","pos":[0,60]}]}],"pos":[66791,66852],"yaml":true},{"content":"This argument is ignored for objects of type <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,93],"content":"This argument is ignored for objects of type <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"This argument is ignored for objects of type <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[66916,67010],"yaml":true},{"content":"An array that contains the custom attributes for this assembly as specified by <code>attributeType</code>.","nodes":[{"pos":[0,106],"content":"An array that contains the custom attributes for this assembly as specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An array that contains the custom attributes for this assembly as specified by <code>attributeType</code>."}],"pos":[67069,67176],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[67352,67390],"yaml":true},{"content":"<code>attributeType</code> is not a runtime type.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is not a runtime type.","source":"<code>attributeType</code> is not a runtime type."}],"pos":[67484,67534],"yaml":true},{"content":"Returns information about the attributes that have been applied to the current <xref href=\"System.Reflection.Assembly\"></xref>, expressed as <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects.","nodes":[{"pos":[0,208],"content":"Returns information about the attributes that have been applied to the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>, expressed as <ph id=\"ph2\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects.","source":"Returns information about the attributes that have been applied to the current <xref href=\"System.Reflection.Assembly\"></xref>, expressed as <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects."}],"pos":[68719,68928],"yaml":true},{"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.","nodes":[{"pos":[0,614],"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.","nodes":[{"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.","pos":[0,614],"nodes":[{"content":"Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.","pos":[0,205]},{"content":"Methods like <ph id=\"ph1\">&lt;xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> cannot be used in such cases, because they create instances of the attributes.","pos":[206,455],"source":" Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes."},{"content":"Code in the reflection-only context cannot be executed.","pos":[456,511]},{"content":"For more information and for example code, see the <ph id=\"ph1\">&lt;xref:System.Reflection.CustomAttributeData&gt;</ph> class.","pos":[512,614],"source":" For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class."}]}]}],"pos":[68939,69554],"yaml":true,"extradata":"MT"},{"content":"A generic list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the current assembly.","nodes":[{"pos":[0,171],"content":"A generic list of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.CustomAttributeData\"&gt;&lt;/xref&gt;</ph> objects representing data about the attributes that have been applied to the current assembly.","source":"A generic list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the current assembly."}],"pos":[69826,69998],"yaml":true},{"content":"Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>.","nodes":[{"pos":[0,212],"content":"Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>.","nodes":[{"content":"Gets the process executable in the default application domain.","pos":[0,62]},{"content":"In other application domains, this is the first executable that was executed by <ph id=\"ph1\">&lt;xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"&gt;&lt;/xref&gt;</ph>.","pos":[63,212],"source":" In other application domains, this is the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>."}]}],"pos":[71244,71457],"yaml":true},{"content":"The <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method can return `null` when a managed assembly has been loaded from an unmanaged application. For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.","nodes":[{"pos":[0,450],"content":"The <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method can return `null` when a managed assembly has been loaded from an unmanaged application. For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> method can return <ph id=\"ph2\">`null`</ph> when a managed assembly has been loaded from an unmanaged application.","pos":[0,153],"source":"The <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method can return `null` when a managed assembly has been loaded from an unmanaged application."},{"content":"For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetEntryAssembly%2A&gt;</ph> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.","pos":[154,450],"source":" For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly."}]}],"pos":[71468,71919],"yaml":true,"extradata":"MT"},{"content":"The assembly that is the process executable in the default application domain, or the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>. Can return `null` when called from unmanaged code.","nodes":[{"pos":[0,244],"content":"The assembly that is the process executable in the default application domain, or the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>. Can return `null` when called from unmanaged code.","nodes":[{"content":"The assembly that is the process executable in the default application domain, or the first executable that was executed by <ph id=\"ph1\">&lt;xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"&gt;&lt;/xref&gt;</ph>.","pos":[0,193],"source":"The assembly that is the process executable in the default application domain, or the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>."},{"content":"Can return <ph id=\"ph1\">`null`</ph> when called from unmanaged code.","pos":[194,244],"source":" Can return `null` when called from unmanaged code."}]}],"pos":[72093,72338],"yaml":true},{"content":"Gets the assembly that contains the code that is currently executing.","nodes":[{"pos":[0,69],"content":"Gets the assembly that contains the code that is currently executing.","nodes":[{"content":"Gets the assembly that contains the code that is currently executing.","pos":[0,69]}]}],"pos":[73723,73793],"yaml":true},{"content":"For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing. The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=fullName> property of a type found in the assembly, as the following example illustrates.  \n  \n [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/assembly1.cs#1)]\n [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/assembly1.vb#1)]  \n  \n To get the assembly that contains the method that called the currently executing code, use <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.","nodes":[{"pos":[0,394],"content":"For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing. The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=fullName> property of a type found in the assembly, as the following example illustrates.","nodes":[{"content":"For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing. The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=fullName> property of a type found in the assembly, as the following example illustrates.","pos":[0,394],"nodes":[{"content":"For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing.","pos":[0,131]},{"content":"The recommended way to retrieve an <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> object that represents the current assembly is to use the <ph id=\"ph2\">&lt;xref:System.Type.Assembly%2A?displayProperty=fullName&gt;</ph> property of a type found in the assembly, as the following example illustrates.","pos":[132,394],"source":" The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=fullName> property of a type found in the assembly, as the following example illustrates."}]}]},{"pos":[401,766],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Reflection.Assembly.GetExecutingAssembly#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/assembly1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Reflection.Assembly.GetExecutingAssembly#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/assembly1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/assembly1.cs#1)]\n [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/assembly1.vb#1)]"},{"pos":[773,920],"content":"To get the assembly that contains the method that called the currently executing code, use <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.","nodes":[{"content":"To get the assembly that contains the method that called the currently executing code, use <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetCallingAssembly%2A&gt;</ph>.","pos":[0,147],"source":"To get the assembly that contains the method that called the currently executing code, use <xref:System.Reflection.Assembly.GetCallingAssembly%2A>."}]}],"pos":[73804,74732],"yaml":true,"extradata":"MT"},{"content":"The assembly that contains the code that is currently executing.","nodes":[{"pos":[0,64],"content":"The assembly that contains the code that is currently executing.","nodes":[{"content":"The assembly that contains the code that is currently executing.","pos":[0,64]}]}],"pos":[75884,75949],"yaml":true},{"content":"Gets the public types defined in this assembly that are visible outside the assembly.","nodes":[{"pos":[0,85],"content":"Gets the public types defined in this assembly that are visible outside the assembly.","nodes":[{"content":"Gets the public types defined in this assembly that are visible outside the assembly.","pos":[0,85]}]}],"pos":[77192,77278],"yaml":true},{"content":"The only types visible outside an assembly are public types and public types nested within other public types.","nodes":[{"pos":[0,110],"content":"The only types visible outside an assembly are public types and public types nested within other public types.","nodes":[{"content":"The only types visible outside an assembly are public types and public types nested within other public types.","pos":[0,110]}]}],"pos":[77289,77400],"yaml":true,"extradata":"MT"},{"content":"An array that represents the types defined in this assembly that are visible outside the assembly.","nodes":[{"pos":[0,98],"content":"An array that represents the types defined in this assembly that are visible outside the assembly.","nodes":[{"content":"An array that represents the types defined in this assembly that are visible outside the assembly.","pos":[0,98]}]}],"pos":[78162,78261],"yaml":true},{"content":"The assembly is a dynamic assembly.","nodes":[{"pos":[0,35],"content":"The assembly is a dynamic assembly.","nodes":[{"content":"The assembly is a dynamic assembly.","pos":[0,35]}]}],"pos":[78434,78470],"yaml":true},{"content":"Gets a <xref href=\"System.IO.FileStream\"></xref> for the specified file in the file table of the manifest of this assembly.","nodes":[{"pos":[0,123],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.IO.FileStream\"&gt;&lt;/xref&gt;</ph> for the specified file in the file table of the manifest of this assembly.","source":"Gets a <xref href=\"System.IO.FileStream\"></xref> for the specified file in the file table of the manifest of this assembly."}],"pos":[79766,79890],"yaml":true},{"content":"This method works on both public and private resource files.  \n  \n The `name` should not include the path to the file.","nodes":[{"pos":[0,60],"content":"This method works on both public and private resource files.","nodes":[{"content":"This method works on both public and private resource files.","pos":[0,60]}]},{"pos":[67,118],"content":"The <ph id=\"ph1\">`name`</ph> should not include the path to the file.","source":"The `name` should not include the path to the file."}],"pos":[79901,80024],"yaml":true,"extradata":"MT"},{"content":"The name of the specified file. Do not include the path to the file.","nodes":[{"pos":[0,68],"content":"The name of the specified file. Do not include the path to the file.","nodes":[{"content":"The name of the specified file. Do not include the path to the file.","pos":[0,68],"nodes":[{"content":"The name of the specified file.","pos":[0,31]},{"content":"Do not include the path to the file.","pos":[32,68]}]}]}],"pos":[80182,80251],"yaml":true},{"content":"A stream that contains the specified file, or `null` if the file is not found.","nodes":[{"pos":[0,78],"content":"A stream that contains the specified file, or <ph id=\"ph1\">`null`</ph> if the file is not found.","source":"A stream that contains the specified file, or `null` if the file is not found."}],"pos":[80315,80394],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[80556,80599],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[80701,80744],"yaml":true},{"content":"The <code>name</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>name</code> parameter is an empty string (\"\")."}],"pos":[80838,80895],"yaml":true},{"content":"<code>name</code> was not found.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> was not found.","source":"<code>name</code> was not found."}],"pos":[81003,81036],"yaml":true},{"content":"<code>name</code> is not a valid assembly.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>name</code> is not a valid assembly."}],"pos":[81142,81185],"yaml":true},{"content":"Gets the files in the file table of an assembly manifest.","nodes":[{"pos":[0,57],"content":"Gets the files in the file table of an assembly manifest.","nodes":[{"content":"Gets the files in the file table of an assembly manifest.","pos":[0,57]}]}],"pos":[82280,82338],"yaml":true},{"content":"This method works on public and private resource files.  \n  \n This overload is equivalent to calling the <xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29> overload and specifying `false`.","nodes":[{"pos":[0,55],"content":"This method works on public and private resource files.","nodes":[{"content":"This method works on public and private resource files.","pos":[0,55]}]},{"pos":[62,200],"content":"This overload is equivalent to calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29&gt;</ph> overload and specifying <ph id=\"ph2\">`false`</ph>.","source":"This overload is equivalent to calling the <xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29> overload and specifying `false`."}],"pos":[82349,82554],"yaml":true,"extradata":"MT"},{"content":"An array of streams that contain the files.","nodes":[{"pos":[0,43],"content":"An array of streams that contain the files.","nodes":[{"content":"An array of streams that contain the files.","pos":[0,43]}]}],"pos":[82713,82757],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[82920,82963],"yaml":true},{"content":"A file was not found.","nodes":[{"pos":[0,21],"content":"A file was not found.","nodes":[{"content":"A file was not found.","pos":[0,21]}]}],"pos":[83071,83093],"yaml":true},{"content":"A file was not a valid assembly.","nodes":[{"pos":[0,32],"content":"A file was not a valid assembly.","nodes":[{"content":"A file was not a valid assembly.","pos":[0,32]}]}],"pos":[83199,83232],"yaml":true},{"content":"Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.","nodes":[{"pos":[0,105],"content":"Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.","nodes":[{"content":"Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.","pos":[0,105]}]}],"pos":[84396,84502],"yaml":true},{"content":"This method works on public and private resource files.","nodes":[{"pos":[0,55],"content":"This method works on public and private resource files.","nodes":[{"content":"This method works on public and private resource files.","pos":[0,55]}]}],"pos":[84513,84569],"yaml":true,"extradata":"MT"},{"content":"`true` to include resource modules; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> to include resource modules; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include resource modules; otherwise, `false`."}],"pos":[84757,84815],"yaml":true},{"content":"An array of streams that contain the files.","nodes":[{"pos":[0,43],"content":"An array of streams that contain the files.","nodes":[{"content":"An array of streams that contain the files.","pos":[0,43]}]}],"pos":[84881,84925],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[85088,85131],"yaml":true},{"content":"A file was not found.","nodes":[{"pos":[0,21],"content":"A file was not found.","nodes":[{"content":"A file was not found.","pos":[0,21]}]}],"pos":[85239,85261],"yaml":true},{"content":"A file was not a valid assembly.","nodes":[{"pos":[0,32],"content":"A file was not a valid assembly.","nodes":[{"content":"A file was not a valid assembly.","pos":[0,32]}]}],"pos":[85367,85400],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[86535,86576],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[86710,86745],"yaml":true},{"content":"Gets all the loaded modules that are part of this assembly.","nodes":[{"pos":[0,59],"content":"Gets all the loaded modules that are part of this assembly.","nodes":[{"content":"Gets all the loaded modules that are part of this assembly.","pos":[0,59]}]}],"pos":[88301,88361],"yaml":true},{"content":"An array of modules.","nodes":[{"pos":[0,20],"content":"An array of modules.","nodes":[{"content":"An array of modules.","pos":[0,20]}]}],"pos":[88528,88549],"yaml":true},{"content":"Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.","nodes":[{"pos":[0,107],"content":"Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.","nodes":[{"content":"Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.","pos":[0,107]}]}],"pos":[89835,89943],"yaml":true},{"content":"`true` to include resource modules; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> to include resource modules; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include resource modules; otherwise, `false`."}],"pos":[90143,90201],"yaml":true},{"content":"An array of modules.","nodes":[{"pos":[0,20],"content":"An array of modules.","nodes":[{"content":"An array of modules.","pos":[0,20]}]}],"pos":[90271,90292],"yaml":true},{"content":"Returns information about how the given resource has been persisted.","nodes":[{"pos":[0,68],"content":"Returns information about how the given resource has been persisted.","nodes":[{"content":"Returns information about how the given resource has been persisted.","pos":[0,68]}]}],"pos":[91636,91705],"yaml":true},{"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.","nodes":[{"pos":[0,154],"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.","nodes":[{"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.","pos":[0,154],"source":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>."}]}],"pos":[91716,91871],"yaml":true,"extradata":"MT"},{"content":"The case-sensitive name of the resource.","nodes":[{"pos":[0,40],"content":"The case-sensitive name of the resource.","nodes":[{"content":"The case-sensitive name of the resource.","pos":[0,40]}]}],"pos":[92079,92120],"yaml":true},{"content":"An object that is populated with information about the resource's topology, or `null` if the resource is not found.","nodes":[{"pos":[0,115],"content":"An object that is populated with information about the resource's topology, or <ph id=\"ph1\">`null`</ph> if the resource is not found.","source":"An object that is populated with information about the resource's topology, or `null` if the resource is not found."}],"pos":[92202,92318],"yaml":true},{"content":"<code>resourceName</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;resourceName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>resourceName</code> is `null`."}],"pos":[92498,92535],"yaml":true},{"content":"The <code>resourceName</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,64],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">resourceName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>resourceName</code> parameter is an empty string (\"\")."}],"pos":[92629,92694],"yaml":true},{"content":"Returns the names of all the resources in this assembly.","nodes":[{"pos":[0,56],"content":"Returns the names of all the resources in this assembly.","nodes":[{"content":"Returns the names of all the resources in this assembly.","pos":[0,56]}]}],"pos":[94251,94308],"yaml":true},{"content":"You can use each resource name in the array returned by this method as follows:  \n  \n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> method to get additional information about the resource.  \n  \n-   If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=fullName> constructor to instantiate the resource manager.  \n  \n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.  \n  \n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.  \n  \n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.","nodes":[{"pos":[0,79],"content":"You can use each resource name in the array returned by this method as follows:","nodes":[{"content":"You can use each resource name in the array returned by this method as follows:","pos":[0,79]}]},{"pos":[89,244],"content":"You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> method to get additional information about the resource.","nodes":[{"content":"You can pass the resource name to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetManifestResourceInfo%2A&gt;</ph> method to get additional information about the resource.","pos":[0,155],"source":"You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> method to get additional information about the resource."}]},{"pos":[254,536],"content":"If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=fullName> constructor to instantiate the resource manager.","nodes":[{"content":"If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <ph id=\"ph1\">&lt;xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=fullName&gt;</ph> constructor to instantiate the resource manager.","pos":[0,282],"source":"If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=fullName> constructor to instantiate the resource manager."}]},{"pos":[546,835],"content":"You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.","nodes":[{"content":"You can pass the resource name to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A&gt;</ph> method to retrieve a <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> object that you can then pass to the <ph id=\"ph3\">&lt;xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,289],"source":"You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor."}]},{"pos":[845,1131],"content":"You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.","nodes":[{"content":"You can pass the resource name to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A&gt;</ph> method to retrieve a <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> object that you can then pass to the <ph id=\"ph3\">&lt;xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=fullName&gt;</ph> constructor.","pos":[0,286],"source":"You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor."}]},{"pos":[1138,1292],"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.","nodes":[{"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.","pos":[0,154],"source":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>."}]}],"pos":[94319,95624],"yaml":true,"extradata":"MT"},{"content":"An array that contains the names of all the resources.","nodes":[{"pos":[0,54],"content":"An array that contains the names of all the resources.","nodes":[{"content":"An array that contains the names of all the resources.","pos":[0,54]}]}],"pos":[95778,95833],"yaml":true},{"content":"Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.","nodes":[{"pos":[0,105],"content":"Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.","nodes":[{"content":"Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.","pos":[0,105]}]}],"pos":[97573,97679],"yaml":true},{"content":"For example, if the full name specified for `type` is \"MyNameSpace.MyClasses\" and `name` is \"Net\", this method overload searches for a resource named \"MyNameSpace.Net\".  \n  \n A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.  \n  \n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.  \n  \n> [!NOTE]\n>  This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \n  \n If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.","nodes":[{"pos":[0,168],"content":"For example, if the full name specified for <ph id=\"ph1\">`type`</ph> is \"MyNameSpace.MyClasses\" and <ph id=\"ph2\">`name`</ph> is \"Net\", this method overload searches for a resource named \"MyNameSpace.Net\".","source":"For example, if the full name specified for `type` is \"MyNameSpace.MyClasses\" and `name` is \"Net\", this method overload searches for a resource named \"MyNameSpace.Net\"."},{"pos":[175,444],"content":"A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.","nodes":[{"content":"A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time.","pos":[0,107]},{"content":"For more information about manifest resources, see <bpt id=\"p1\">[</bpt>Microsoft .NET Framework Resource Basics<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=204554)</ept> in the MSDN Library.","pos":[108,269],"source":" For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library."}]},{"pos":[451,605],"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.","nodes":[{"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.","pos":[0,154],"source":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>."}]},{"pos":[613,889],"content":"[!NOTE]\n This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.","leadings":["","> "],"nodes":[{"content":"This method returns <ph id=\"ph1\">`null`</ph> if a private resource in another assembly is accessed and the caller does not have <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[9,274],"source":" This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."}]},{"pos":[896,1299],"content":"If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.","nodes":[{"content":"If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.","pos":[0,403],"nodes":[{"content":"If the assembly manifest lists a resource file, <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> object even if the resource file cannot be found on disk at the time.","pos":[0,214],"source":"If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time."},{"content":"If the resource file is not found, passing the resulting <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object to the <ph id=\"ph2\">&lt;xref:System.Resources.ResourceReader&gt;</ph> constructor causes an <ph id=\"ph3\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[215,403],"source":" If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>."}]}]}],"pos":[97690,99007],"yaml":true,"extradata":"MT"},{"content":"The type whose namespace is used to scope the manifest resource name.","nodes":[{"pos":[0,69],"content":"The type whose namespace is used to scope the manifest resource name.","nodes":[{"content":"The type whose namespace is used to scope the manifest resource name.","pos":[0,69]}]}],"pos":[99188,99258],"yaml":true},{"content":"The case-sensitive name of the manifest resource being requested.","nodes":[{"pos":[0,65],"content":"The case-sensitive name of the manifest resource being requested.","nodes":[{"content":"The case-sensitive name of the manifest resource being requested.","pos":[0,65]}]}],"pos":[99318,99384],"yaml":true},{"content":"The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller.","nodes":[{"pos":[0,131],"content":"The manifest resource; or <ph id=\"ph1\">`null`</ph> if no resources were specified during compilation or if the resource is not visible to the caller.","source":"The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller."}],"pos":[99444,99576],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[99758,99801],"yaml":true},{"content":"The <code>name</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>name</code> parameter is an empty string (\"\")."}],"pos":[99895,99952],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[100052,100095],"yaml":true},{"content":"<code>name</code> was not found.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> was not found.","source":"<code>name</code> was not found."}],"pos":[100203,100236],"yaml":true},{"content":"<code>name</code> is not a valid assembly.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>name</code> is not a valid assembly."}],"pos":[100342,100385],"yaml":true},{"content":"Resource length is greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,75],"content":"Resource length is greater than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"Resource length is greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[100491,100567],"yaml":true},{"content":"Loads the specified manifest resource from this assembly.","nodes":[{"pos":[0,57],"content":"Loads the specified manifest resource from this assembly.","nodes":[{"content":"Loads the specified manifest resource from this assembly.","pos":[0,57]}]}],"pos":[101849,101907],"yaml":true},{"content":"A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.  \n  \n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.  \n  \n> [!NOTE]\n>  This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \n  \n If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.","nodes":[{"pos":[0,269],"content":"A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.","nodes":[{"content":"A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time.","pos":[0,107]},{"content":"For more information about manifest resources, see <bpt id=\"p1\">[</bpt>Microsoft .NET Framework Resource Basics<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=204554)</ept> in the MSDN Library.","pos":[108,269],"source":" For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library."}]},{"pos":[276,430],"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.","nodes":[{"content":"Resource information is returned only if the resource is visible to the caller, or the caller has <ph id=\"ph1\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph>.","pos":[0,154],"source":"Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>."}]},{"pos":[438,714],"content":"[!NOTE]\n This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.","leadings":["","> "],"nodes":[{"content":"This method returns <ph id=\"ph1\">`null`</ph> if a private resource in another assembly is accessed and the caller does not have <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[9,274],"source":" This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."}]},{"pos":[721,1124],"content":"If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.","nodes":[{"content":"If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.","pos":[0,403],"nodes":[{"content":"If the assembly manifest lists a resource file, <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetManifestResourceStream%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.IO.Stream&gt;</ph> object even if the resource file cannot be found on disk at the time.","pos":[0,214],"source":"If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time."},{"content":"If the resource file is not found, passing the resulting <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> object to the <ph id=\"ph2\">&lt;xref:System.Resources.ResourceReader&gt;</ph> constructor causes an <ph id=\"ph3\">&lt;xref:System.ArgumentException&gt;</ph>.","pos":[215,403],"source":" If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>."}]}]}],"pos":[101918,103052],"yaml":true,"extradata":"MT"},{"content":"The case-sensitive name of the manifest resource being requested.","nodes":[{"pos":[0,65],"content":"The case-sensitive name of the manifest resource being requested.","nodes":[{"content":"The case-sensitive name of the manifest resource being requested.","pos":[0,65]}]}],"pos":[103224,103290],"yaml":true},{"content":"The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller.","nodes":[{"pos":[0,131],"content":"The manifest resource; or <ph id=\"ph1\">`null`</ph> if no resources were specified during compilation or if the resource is not visible to the caller.","source":"The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller."}],"pos":[103350,103482],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[103664,103707],"yaml":true},{"content":"The <code>name</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>name</code> parameter is an empty string (\"\")."}],"pos":[103801,103858],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n A file that was found could not be loaded.","nodes":[{"pos":[0,342],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.IO.IOException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,342],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead."}]},{"pos":[348,365],"content":"</p>\n    </block>","nodes":[]},{"pos":[372,414],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[103958,104388],"yaml":true},{"content":"<code>name</code> was not found.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> was not found.","source":"<code>name</code> was not found."}],"pos":[104496,104529],"yaml":true},{"content":"<code>name</code> is not a valid assembly.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>name</code> is not a valid assembly."}],"pos":[104635,104678],"yaml":true},{"content":"Resource length is greater than <xref href=\"System.Int64.MaxValue\"></xref>.","nodes":[{"pos":[0,75],"content":"Resource length is greater than <ph id=\"ph1\">&lt;xref href=\"System.Int64.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"Resource length is greater than <xref href=\"System.Int64.MaxValue\"></xref>."}],"pos":[104784,104860],"yaml":true},{"content":"Gets the specified module in this assembly.","nodes":[{"pos":[0,43],"content":"Gets the specified module in this assembly.","nodes":[{"content":"Gets the specified module in this assembly.","pos":[0,43]}]}],"pos":[106368,106412],"yaml":true},{"content":"This method works on file names.  \n  \n Classes in the `Reflection.Emit` namespace emit the scope name for a dynamic module. The scope name can be determined by the <xref:System.Reflection.Module.ScopeName%2A?displayProperty=fullName> property. Pass the kind of module you want to `Assembly.GetModule`. For example, if you want the module that contains the assembly manifest, pass the scope name of the module to `GetModule`. Otherwise, pass the file name of the module. Assemblies loaded by one of the `Load` methods that have a byte[] parameter have only one module, and that is the manifest module. Always seek these modules using the scope name.  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling `Module.GetType` on the module containing the manifest will not initiate a search of the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"pos":[0,32],"content":"This method works on file names.","nodes":[{"content":"This method works on file names.","pos":[0,32]}]},{"pos":[39,648],"content":"Classes in the `Reflection.Emit` namespace emit the scope name for a dynamic module. The scope name can be determined by the <xref:System.Reflection.Module.ScopeName%2A?displayProperty=fullName> property. Pass the kind of module you want to `Assembly.GetModule`. For example, if you want the module that contains the assembly manifest, pass the scope name of the module to `GetModule`. Otherwise, pass the file name of the module. Assemblies loaded by one of the `Load` methods that have a byte[] parameter have only one module, and that is the manifest module. Always seek these modules using the scope name.","nodes":[{"content":"Classes in the <ph id=\"ph1\">`Reflection.Emit`</ph> namespace emit the scope name for a dynamic module.","pos":[0,84],"source":"Classes in the `Reflection.Emit` namespace emit the scope name for a dynamic module."},{"content":"The scope name can be determined by the <ph id=\"ph1\">&lt;xref:System.Reflection.Module.ScopeName%2A?displayProperty=fullName&gt;</ph> property.","pos":[85,204],"source":" The scope name can be determined by the <xref:System.Reflection.Module.ScopeName%2A?displayProperty=fullName> property."},{"content":"Pass the kind of module you want to <ph id=\"ph1\">`Assembly.GetModule`</ph>.","pos":[205,262],"source":" Pass the kind of module you want to `Assembly.GetModule`."},{"content":"For example, if you want the module that contains the assembly manifest, pass the scope name of the module to <ph id=\"ph1\">`GetModule`</ph>.","pos":[263,385],"source":" For example, if you want the module that contains the assembly manifest, pass the scope name of the module to `GetModule`."},{"content":"Otherwise, pass the file name of the module.","pos":[386,430]},{"content":"Assemblies loaded by one of the <ph id=\"ph1\">`Load`</ph> methods that have a byte[] parameter have only one module, and that is the manifest module.","pos":[431,561],"source":" Assemblies loaded by one of the `Load` methods that have a byte[] parameter have only one module, and that is the manifest module."},{"content":"Always seek these modules using the scope name.","pos":[562,609]}]},{"pos":[655,1049],"content":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling `Module.GetType` on the module containing the manifest will not initiate a search of the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.","nodes":[{"content":"A type can be retrieved from a specific module using <ph id=\"ph1\">&lt;xref:System.Reflection.Module.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[0,121],"source":"A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>."},{"content":"Calling <ph id=\"ph1\">`Module.GetType`</ph> on the module containing the manifest will not initiate a search of the entire assembly.","pos":[122,235],"source":" Calling `Module.GetType` on the module containing the manifest will not initiate a search of the entire assembly."},{"content":"To retrieve a type from an assembly, regardless of which module it is in, you must call <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph>.","pos":[236,394],"source":" To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."}]}],"pos":[106423,107479],"yaml":true,"extradata":"MT"},{"content":"The name of the module being requested.","nodes":[{"pos":[0,39],"content":"The name of the module being requested.","nodes":[{"content":"The name of the module being requested.","pos":[0,39]}]}],"pos":[107643,107683],"yaml":true},{"content":"The module being requested, or `null` if the module is not found.","nodes":[{"pos":[0,65],"content":"The module being requested, or <ph id=\"ph1\">`null`</ph> if the module is not found.","source":"The module being requested, or `null` if the module is not found."}],"pos":[107751,107817],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[107983,108026],"yaml":true},{"content":"The <code>name</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>name</code> parameter is an empty string (\"\")."}],"pos":[108120,108177],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[108277,108320],"yaml":true},{"content":"<code>name</code> was not found.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> was not found.","source":"<code>name</code> was not found."}],"pos":[108428,108461],"yaml":true},{"content":"<code>name</code> is not a valid assembly.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>name</code> is not a valid assembly."}],"pos":[108567,108610],"yaml":true},{"content":"Gets all the modules that are part of this assembly.","nodes":[{"pos":[0,52],"content":"Gets all the modules that are part of this assembly.","nodes":[{"content":"Gets all the modules that are part of this assembly.","pos":[0,52]}]}],"pos":[109717,109770],"yaml":true},{"content":"This method works on public and private resource files.  \n  \n> [!NOTE]\n>  Modules must be emitted with file name extensions.","nodes":[{"pos":[0,55],"content":"This method works on public and private resource files.","nodes":[{"content":"This method works on public and private resource files.","pos":[0,55]}]},{"pos":[63,124],"content":"[!NOTE]\n Modules must be emitted with file name extensions.","leadings":["","> "],"nodes":[{"content":"Modules must be emitted with file name extensions.","pos":[9,59]}]}],"pos":[109781,109911],"yaml":true,"extradata":"MT"},{"content":"An array of modules.","nodes":[{"pos":[0,20],"content":"An array of modules.","nodes":[{"content":"An array of modules.","pos":[0,20]}]}],"pos":[110679,110700],"yaml":true},{"content":"The module to be loaded does not specify a file name extension.","nodes":[{"pos":[0,63],"content":"The module to be loaded does not specify a file name extension.","nodes":[{"content":"The module to be loaded does not specify a file name extension.","pos":[0,63]}]}],"pos":[110873,110937],"yaml":true},{"content":"Gets all the modules that are part of this assembly, specifying whether to include resource modules.","nodes":[{"pos":[0,100],"content":"Gets all the modules that are part of this assembly, specifying whether to include resource modules.","nodes":[{"content":"Gets all the modules that are part of this assembly, specifying whether to include resource modules.","pos":[0,100]}]}],"pos":[112113,112214],"yaml":true},{"content":"This method works on public and private resource files.  \n  \n> [!NOTE]\n>  Modules must be emitted with file name extensions.","nodes":[{"pos":[0,55],"content":"This method works on public and private resource files.","nodes":[{"content":"This method works on public and private resource files.","pos":[0,55]}]},{"pos":[63,124],"content":"[!NOTE]\n Modules must be emitted with file name extensions.","leadings":["","> "],"nodes":[{"content":"Modules must be emitted with file name extensions.","pos":[9,59]}]}],"pos":[112225,112355],"yaml":true,"extradata":"MT"},{"content":"`true` to include resource modules; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> to include resource modules; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to include resource modules; otherwise, `false`."}],"pos":[112549,112607],"yaml":true},{"content":"An array of modules.","nodes":[{"pos":[0,20],"content":"An array of modules.","nodes":[{"content":"An array of modules.","pos":[0,20]}]}],"pos":[112677,112698],"yaml":true},{"content":"Gets an <xref href=\"System.Reflection.AssemblyName\"></xref> for this assembly.","nodes":[{"pos":[0,78],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyName\"&gt;&lt;/xref&gt;</ph> for this assembly.","source":"Gets an <xref href=\"System.Reflection.AssemblyName\"></xref> for this assembly."}],"pos":[113877,113956],"yaml":true},{"content":"An object that contains the fully parsed display name for this assembly.","nodes":[{"pos":[0,72],"content":"An object that contains the fully parsed display name for this assembly.","nodes":[{"content":"An object that contains the fully parsed display name for this assembly.","pos":[0,72]}]}],"pos":[114130,114203],"yaml":true},{"content":"Gets an <xref href=\"System.Reflection.AssemblyName\"></xref> for this assembly, setting the codebase as specified by <code>copiedName</code>.","nodes":[{"pos":[0,140],"content":"Gets an <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyName\"&gt;&lt;/xref&gt;</ph> for this assembly, setting the codebase as specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">copiedName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Gets an <xref href=\"System.Reflection.AssemblyName\"></xref> for this assembly, setting the codebase as specified by <code>copiedName</code>."}],"pos":[115770,115911],"yaml":true},{"content":"`true` to set the <xref href=\"System.Reflection.Assembly.CodeBase\"></xref> to the location of the assembly after it was shadow copied; `false` to set <xref href=\"System.Reflection.Assembly.CodeBase\"></xref> to the original location.","nodes":[{"pos":[0,232],"content":"<ph id=\"ph1\">`true`</ph> to set the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Assembly.CodeBase\"&gt;&lt;/xref&gt;</ph> to the location of the assembly after it was shadow copied; <ph id=\"ph3\">`false`</ph> to set <ph id=\"ph4\">&lt;xref href=\"System.Reflection.Assembly.CodeBase\"&gt;&lt;/xref&gt;</ph> to the original location.","source":"`true` to set the <xref href=\"System.Reflection.Assembly.CodeBase\"></xref> to the location of the assembly after it was shadow copied; `false` to set <xref href=\"System.Reflection.Assembly.CodeBase\"></xref> to the original location."}],"pos":[116090,116325],"yaml":true},{"content":"An object that contains the fully parsed display name for this assembly.","nodes":[{"pos":[0,72],"content":"An object that contains the fully parsed display name for this assembly.","nodes":[{"content":"An object that contains the fully parsed display name for this assembly.","pos":[0,72]}]}],"pos":[116399,116472],"yaml":true},{"content":"Gets serialization information with all of the data needed to reinstantiate this assembly.","nodes":[{"pos":[0,90],"content":"Gets serialization information with all of the data needed to reinstantiate this assembly.","nodes":[{"content":"Gets serialization information with all of the data needed to reinstantiate this assembly.","pos":[0,90]}]}],"pos":[118049,118140],"yaml":true},{"content":"The object to be populated with serialization information.","nodes":[{"pos":[0,58],"content":"The object to be populated with serialization information.","nodes":[{"content":"The object to be populated with serialization information.","pos":[0,58]}]}],"pos":[118416,118475],"yaml":true},{"content":"The destination context of the serialization.","nodes":[{"pos":[0,45],"content":"The destination context of the serialization.","nodes":[{"content":"The destination context of the serialization.","pos":[0,45]}]}],"pos":[118570,118616],"yaml":true},{"content":"<code>info</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>info</code> is `null`."}],"pos":[118786,118815],"yaml":true},{"content":"Gets the <xref href=\"System.Reflection.AssemblyName\"></xref> objects for all the assemblies referenced by this assembly.","nodes":[{"pos":[0,120],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyName\"&gt;&lt;/xref&gt;</ph> objects for all the assemblies referenced by this assembly.","source":"Gets the <xref href=\"System.Reflection.AssemblyName\"></xref> objects for all the assemblies referenced by this assembly."}],"pos":[120022,120143],"yaml":true},{"content":"> [!IMPORTANT]\n>  Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> enumeration. In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> in this situation.","nodes":[{"pos":[2,793],"content":"[!IMPORTANT]\n Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> enumeration. In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> in this situation.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> enumeration. In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> in this situation.","pos":[13,789],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, the <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property of an <ph id=\"ph3\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object that is returned by this method is <ph id=\"ph4\">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName&gt;</ph> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <ph id=\"ph5\">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName&gt;</ph> enumeration.","pos":[1,550],"source":" Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> enumeration."},{"content":"In previous versions of the .NET Framework, the <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.HashAlgorithm%2A&gt;</ph> property returned <ph id=\"ph2\">&lt;xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName&gt;</ph> in this situation.","pos":[551,776],"source":" In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> in this situation."}]}]}],"pos":[120154,120960],"yaml":true,"extradata":"MT"},{"content":"An array that contains the fully parsed display names of all the assemblies referenced by this assembly.","nodes":[{"pos":[0,104],"content":"An array that contains the fully parsed display names of all the assemblies referenced by this assembly.","nodes":[{"content":"An array that contains the fully parsed display names of all the assemblies referenced by this assembly.","pos":[0,104]}]}],"pos":[121711,121816],"yaml":true},{"content":"Gets the specified version of the satellite assembly for the specified culture.","nodes":[{"pos":[0,79],"content":"Gets the specified version of the satellite assembly for the specified culture.","nodes":[{"content":"Gets the specified version of the satellite assembly for the specified culture.","pos":[0,79]}]}],"pos":[123415,123495],"yaml":true},{"content":"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  \n  \n Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.  \n  \n If `version` is `null`, the current assembly version is used if both the resource and main assemblies are signed.","nodes":[{"pos":[0,222],"content":"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.","nodes":[{"content":"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.","pos":[0,222]}]},{"pos":[229,377],"content":"Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.","nodes":[{"content":"Call the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29&gt;</ph> overload to use your current assembly version.","pos":[0,148],"source":"Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version."}]},{"pos":[384,497],"content":"If <ph id=\"ph1\">`version`</ph> is <ph id=\"ph2\">`null`</ph>, the current assembly version is used if both the resource and main assemblies are signed.","source":"If `version` is `null`, the current assembly version is used if both the resource and main assemblies are signed."}],"pos":[123506,124010],"yaml":true,"extradata":"MT"},{"content":"The specified culture.","nodes":[{"pos":[0,22],"content":"The specified culture.","nodes":[{"content":"The specified culture.","pos":[0,22]}]}],"pos":[124255,124278],"yaml":true},{"content":"The version of the satellite assembly.","nodes":[{"pos":[0,38],"content":"The version of the satellite assembly.","nodes":[{"content":"The version of the satellite assembly.","pos":[0,38]}]}],"pos":[124342,124381],"yaml":true},{"content":"The specified satellite assembly.","nodes":[{"pos":[0,33],"content":"The specified satellite assembly.","nodes":[{"content":"The specified satellite assembly.","pos":[0,33]}]}],"pos":[124451,124485],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[124662,124694],"yaml":true},{"content":"The satellite assembly with a matching file name was found, but the `CultureInfo` or the version did not match the one specified.","nodes":[{"pos":[0,129],"content":"The satellite assembly with a matching file name was found, but the <ph id=\"ph1\">`CultureInfo`</ph> or the version did not match the one specified.","source":"The satellite assembly with a matching file name was found, but the `CultureInfo` or the version did not match the one specified."}],"pos":[124794,124924],"yaml":true},{"content":"The assembly cannot be found.","nodes":[{"pos":[0,29],"content":"The assembly cannot be found.","nodes":[{"content":"The assembly cannot be found.","pos":[0,29]}]}],"pos":[125032,125062],"yaml":true},{"content":"The satellite assembly is not a valid assembly.","nodes":[{"pos":[0,47],"content":"The satellite assembly is not a valid assembly.","nodes":[{"content":"The satellite assembly is not a valid assembly.","pos":[0,47]}]}],"pos":[125168,125216],"yaml":true},{"content":"Gets the satellite assembly for the specified culture.","nodes":[{"pos":[0,54],"content":"Gets the satellite assembly for the specified culture.","nodes":[{"content":"Gets the satellite assembly for the specified culture.","pos":[0,54]}]}],"pos":[126518,126573],"yaml":true},{"content":"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  \n  \n Call this method to use your current assembly version.","nodes":[{"pos":[0,222],"content":"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.","nodes":[{"content":"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.","pos":[0,222]}]},{"pos":[229,283],"content":"Call this method to use your current assembly version.","nodes":[{"content":"Call this method to use your current assembly version.","pos":[0,54]}]}],"pos":[126584,126872],"yaml":true,"extradata":"MT"},{"content":"The specified culture.","nodes":[{"pos":[0,22],"content":"The specified culture.","nodes":[{"content":"The specified culture.","pos":[0,22]}]}],"pos":[127100,127123],"yaml":true},{"content":"The specified satellite assembly.","nodes":[{"pos":[0,33],"content":"The specified satellite assembly.","nodes":[{"content":"The specified satellite assembly.","pos":[0,33]}]}],"pos":[127193,127227],"yaml":true},{"content":"<code>culture</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;culture&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>culture</code> is `null`."}],"pos":[127404,127436],"yaml":true},{"content":"The assembly cannot be found.","nodes":[{"pos":[0,29],"content":"The assembly cannot be found.","nodes":[{"content":"The assembly cannot be found.","pos":[0,29]}]}],"pos":[127544,127574],"yaml":true},{"content":"The satellite assembly with a matching file name was found, but the `CultureInfo` did not match the one specified.","nodes":[{"pos":[0,114],"content":"The satellite assembly with a matching file name was found, but the <ph id=\"ph1\">`CultureInfo`</ph> did not match the one specified.","source":"The satellite assembly with a matching file name was found, but the `CultureInfo` did not match the one specified."}],"pos":[127674,127789],"yaml":true},{"content":"The satellite assembly is not a valid assembly.","nodes":[{"pos":[0,47],"content":"The satellite assembly is not a valid assembly.","nodes":[{"content":"The satellite assembly is not a valid assembly.","pos":[0,47]}]}],"pos":[127895,127943],"yaml":true},{"content":"Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.","nodes":[{"pos":[0,158],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.","source":"Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance and optionally throws an exception if the type is not found."}],"pos":[129189,129348],"yaml":true},{"content":"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.","nodes":[{"pos":[0,337],"content":"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.","nodes":[{"content":"This method only searches the current assembly instance.","pos":[0,56]},{"content":"The <ph id=\"ph1\">`name`</ph> parameter includes the namespace but not the assembly.","pos":[57,122],"source":" The `name` parameter includes the namespace but not the assembly."},{"content":"To search other assemblies for a type, use the <ph id=\"ph1\">&lt;xref:System.Type.GetType%28System.String%29?displayProperty=fullName&gt;</ph> method overload, which can optionally include an assembly display name as part of the type name.","pos":[123,337],"source":" To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name."}]},{"pos":[345,614],"content":"[!NOTE]\n If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,267],"nodes":[{"content":"If the type has been forwarded to another assembly, it is still returned by this method.","pos":[1,89]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[90,259],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]},{"pos":[621,904],"content":"The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`throwOnError`</ph> parameter only affects what happens when the type is not found.","pos":[0,82],"source":"The `throwOnError` parameter only affects what happens when the type is not found."},{"content":"It does not affect any other exceptions that might be thrown.","pos":[83,144]},{"content":"In particular, if the type is found but cannot be loaded, <ph id=\"ph1\">&lt;xref:System.TypeLoadException&gt;</ph> can be thrown even if <ph id=\"ph2\">`throwOnError`</ph> is <ph id=\"ph3\">`false`</ph>.","pos":[145,283],"source":" In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`."}]}],"pos":[129359,130271],"yaml":true,"extradata":"MT"},{"content":"The full name of the type.","nodes":[{"pos":[0,26],"content":"The full name of the type.","nodes":[{"content":"The full name of the type.","pos":[0,26]}]}],"pos":[130432,130459],"yaml":true},{"content":"`true` to throw an exception if the type is not found; `false` to return `null`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception if the type is not found; <ph id=\"ph2\">`false`</ph> to return <ph id=\"ph3\">`null`</ph>.","source":"`true` to throw an exception if the type is not found; `false` to return `null`."}],"pos":[130528,130611],"yaml":true},{"content":"An object that represents the specified class.","nodes":[{"pos":[0,46],"content":"An object that represents the specified class.","nodes":[{"content":"An object that represents the specified class.","pos":[0,46]}]}],"pos":[130666,130713],"yaml":true},{"content":"<code>name</code> is invalid.  \n  \n -or-  \n  \n The length of <code>name</code> exceeds 1024 characters.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is invalid.","source":"<code>name</code> is invalid."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,103],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 1024 characters.","source":"The length of <code>name</code> exceeds 1024 characters."}],"pos":[130869,130979],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[131081,131110],"yaml":true},{"content":"<code>throwOnError</code> is `true`, and the type cannot be found.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;throwOnError&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph>, and the type cannot be found.","source":"<code>throwOnError</code> is `true`, and the type cannot be found."}],"pos":[131204,131271],"yaml":true},{"content":"<code>name</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>name</code> requires a dependent assembly that could not be found."}],"pos":[131379,131452],"yaml":true},{"content":"<code>name</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>name</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[94,98],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[105,246],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded."}],"pos":[131552,131805],"yaml":true},{"content":"<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>name</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,240],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","source":"<code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."}],"pos":[131911,132158],"yaml":true},{"content":"Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.","nodes":[{"pos":[0,192],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.","source":"Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found."}],"pos":[133620,133813],"yaml":true},{"content":"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.","nodes":[{"pos":[0,337],"content":"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.","nodes":[{"content":"This method only searches the current assembly instance.","pos":[0,56]},{"content":"The <ph id=\"ph1\">`name`</ph> parameter includes the namespace but not the assembly.","pos":[57,122],"source":" The `name` parameter includes the namespace but not the assembly."},{"content":"To search other assemblies for a type, use the <ph id=\"ph1\">&lt;xref:System.Type.GetType%28System.String%29?displayProperty=fullName&gt;</ph> method overload, which can optionally include an assembly display name as part of the type name.","pos":[123,337],"source":" To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name."}]},{"pos":[345,614],"content":"[!NOTE]\n If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,267],"nodes":[{"content":"If the type has been forwarded to another assembly, it is still returned by this method.","pos":[1,89]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[90,259],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]},{"pos":[621,904],"content":"The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`throwOnError`</ph> parameter only affects what happens when the type is not found.","pos":[0,82],"source":"The `throwOnError` parameter only affects what happens when the type is not found."},{"content":"It does not affect any other exceptions that might be thrown.","pos":[83,144]},{"content":"In particular, if the type is found but cannot be loaded, <ph id=\"ph1\">&lt;xref:System.TypeLoadException&gt;</ph> can be thrown even if <ph id=\"ph2\">`throwOnError`</ph> is <ph id=\"ph3\">`false`</ph>.","pos":[145,283],"source":" In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`."}]}],"pos":[133824,134736],"yaml":true,"extradata":"MT"},{"content":"The full name of the type.","nodes":[{"pos":[0,26],"content":"The full name of the type.","nodes":[{"content":"The full name of the type.","pos":[0,26]}]}],"pos":[134914,134941],"yaml":true},{"content":"`true` to throw an exception if the type is not found; `false` to return `null`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> to throw an exception if the type is not found; <ph id=\"ph2\">`false`</ph> to return <ph id=\"ph3\">`null`</ph>.","source":"`true` to throw an exception if the type is not found; `false` to return `null`."}],"pos":[135010,135093],"yaml":true},{"content":"`true` to ignore the case of the type name; otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> to ignore the case of the type name; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to ignore the case of the type name; otherwise, `false`."}],"pos":[135160,135226],"yaml":true},{"content":"An object that represents the specified class.","nodes":[{"pos":[0,46],"content":"An object that represents the specified class.","nodes":[{"content":"An object that represents the specified class.","pos":[0,46]}]}],"pos":[135281,135328],"yaml":true},{"content":"<code>name</code> is invalid.  \n  \n -or-  \n  \n The length of <code>name</code> exceeds 1024 characters.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is invalid.","source":"<code>name</code> is invalid."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,103],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds 1024 characters.","source":"The length of <code>name</code> exceeds 1024 characters."}],"pos":[135484,135594],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[135696,135725],"yaml":true},{"content":"<code>throwOnError</code> is `true`, and the type cannot be found.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;throwOnError&lt;/code&gt;</ph> is <ph id=\"ph2\">`true`</ph>, and the type cannot be found.","source":"<code>throwOnError</code> is `true`, and the type cannot be found."}],"pos":[135819,135886],"yaml":true},{"content":"<code>name</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>name</code> requires a dependent assembly that could not be found."}],"pos":[135994,136067],"yaml":true},{"content":"<code>name</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,87],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","source":"<code>name</code> requires a dependent assembly that was found but could not be loaded."},{"pos":[94,98],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[105,246],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded."}],"pos":[136167,136420],"yaml":true},{"content":"<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>name</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,240],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","source":"<code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."}],"pos":[136526,136773],"yaml":true},{"content":"Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance.","nodes":[{"pos":[0,98],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object with the specified name in the assembly instance.","source":"Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance."}],"pos":[138171,138270],"yaml":true},{"content":"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","nodes":[{"pos":[0,337],"content":"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.","nodes":[{"content":"This method only searches the current assembly instance.","pos":[0,56]},{"content":"The <ph id=\"ph1\">`name`</ph> parameter includes the namespace but not the assembly.","pos":[57,122],"source":" The `name` parameter includes the namespace but not the assembly."},{"content":"To search other assemblies for a type, use the <ph id=\"ph1\">&lt;xref:System.Type.GetType%28System.String%29?displayProperty=fullName&gt;</ph> method overload, which can optionally include an assembly display name as part of the type name.","pos":[123,337],"source":" To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name."}]},{"pos":[345,614],"content":"[!NOTE]\n If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,267],"nodes":[{"content":"If the type has been forwarded to another assembly, it is still returned by this method.","pos":[1,89]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[90,259],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]}],"pos":[138281,138901],"yaml":true,"extradata":"MT"},{"content":"The full name of the type.","nodes":[{"pos":[0,26],"content":"The full name of the type.","nodes":[{"content":"The full name of the type.","pos":[0,26]}]}],"pos":[140040,140067],"yaml":true},{"content":"An object that represents the specified class, or `null` if the class is not found.","nodes":[{"pos":[0,83],"content":"An object that represents the specified class, or <ph id=\"ph1\">`null`</ph> if the class is not found.","source":"An object that represents the specified class, or `null` if the class is not found."}],"pos":[140122,140206],"yaml":true},{"content":"<code>name</code> is invalid.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is invalid.","source":"<code>name</code> is invalid."}],"pos":[140362,140392],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[140494,140523],"yaml":true},{"content":"<code>name</code> requires a dependent assembly that could not be found.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly that could not be found.","source":"<code>name</code> requires a dependent assembly that could not be found."}],"pos":[140631,140704],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>\n    <code>name</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.","nodes":[{"pos":[0,342],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.IO.IOException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,342],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead."}]},{"pos":[348,457],"content":"</p>\n    </block>\n    <code>name</code> requires a dependent assembly that was found but could not be loaded.","nodes":[{"content":"<ph id=\"ph1\">\n    &lt;/block&gt;</ph><ph id=\"ph2\">\n    &lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly that was found but could not be loaded.","pos":[4,109],"source":"\n    </block>\n    <code>name</code> requires a dependent assembly that was found but could not be loaded."}]},{"pos":[464,468],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[475,616],"content":"The current assembly was loaded into the reflection-only context, and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> requires a dependent assembly that was not preloaded.","source":"The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded."}],"pos":[140804,141439],"yaml":true},{"content":"<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly, but the file is not a valid assembly.","source":"<code>name</code> requires a dependent assembly, but the file is not a valid assembly."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,240],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.","source":"<code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."}],"pos":[141545,141792],"yaml":true},{"content":"Gets the types defined in this assembly.","nodes":[{"pos":[0,40],"content":"Gets the types defined in this assembly.","nodes":[{"content":"Gets the types defined in this assembly.","pos":[0,40]}]}],"pos":[143253,143294],"yaml":true},{"content":"The returned array includes nested types.  \n  \n If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown. For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded. It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called.  \n  \n> [!NOTE]\n>  If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n To retrieve a collection of <xref:System.Reflection.TypeInfo> objects instead of an array of <xref:System.Type> objects, use the <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,41],"content":"The returned array includes nested types.","nodes":[{"content":"The returned array includes nested types.","pos":[0,41]}]},{"pos":[48,859],"content":"If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown. For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded. It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called.","nodes":[{"content":"If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown. For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded. It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called.","pos":[0,811],"nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.GetTypes%2A&gt;</ph> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <ph id=\"ph2\">&lt;xref:System.Reflection.ReflectionTypeLoadException&gt;</ph> is thrown.","pos":[0,306],"source":"If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown."},{"content":"For example, this can happen if the first assembly was loaded with the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A&gt;</ph> methods, and the second assembly was not loaded.","pos":[307,545],"source":" For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded."},{"content":"It can also happen with assemblies loaded using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> methods if the second assembly cannot be located when the <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.GetTypes%2A&gt;</ph> method is called.","pos":[546,811],"source":" It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called."}]}]},{"pos":[867,1139],"content":"[!NOTE]\n If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","leadings":["","> "],"nodes":[{"content":" If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).","pos":[8,270],"nodes":[{"content":"If a type has been forwarded to another assembly, it is not included in the returned array.","pos":[1,92]},{"content":"For information on type forwarding, see <bpt id=\"p1\">[</bpt>Type Forwarding in the Common Language Runtime<ept id=\"p1\">](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)</ept>.","pos":[93,262],"source":" For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."}]}]},{"pos":[1146,1359],"content":"To retrieve a collection of <xref:System.Reflection.TypeInfo> objects instead of an array of <xref:System.Type> objects, use the <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=fullName> property.","nodes":[{"content":"To retrieve a collection of <ph id=\"ph1\">&lt;xref:System.Reflection.TypeInfo&gt;</ph> objects instead of an array of <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> objects, use the <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,213],"source":"To retrieve a collection of <xref:System.Reflection.TypeInfo> objects instead of an array of <xref:System.Type> objects, use the <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=fullName> property."}]}],"pos":[143305,144674],"yaml":true,"extradata":"MT"},{"content":"An array that contains all the types that are defined in this assembly.","nodes":[{"pos":[0,71],"content":"An array that contains all the types that are defined in this assembly.","nodes":[{"content":"An array that contains all the types that are defined in this assembly.","pos":[0,71]}]}],"pos":[145350,145422],"yaml":true},{"content":"The assembly contains one or more types that cannot be loaded. The array returned by the <xref href=\"System.Reflection.ReflectionTypeLoadException.Types\"></xref> property of this exception contains a <xref href=\"System.Type\"></xref> object for each type that was loaded and `null` for each type that could not be loaded, while the <xref href=\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\"></xref> property contains an exception for each type that could not be loaded.","nodes":[{"pos":[0,485],"content":"The assembly contains one or more types that cannot be loaded. The array returned by the <xref href=\"System.Reflection.ReflectionTypeLoadException.Types\"></xref> property of this exception contains a <xref href=\"System.Type\"></xref> object for each type that was loaded and `null` for each type that could not be loaded, while the <xref href=\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\"></xref> property contains an exception for each type that could not be loaded.","nodes":[{"content":"The assembly contains one or more types that cannot be loaded.","pos":[0,62]},{"content":"The array returned by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ReflectionTypeLoadException.Types\"&gt;&lt;/xref&gt;</ph> property of this exception contains a <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object for each type that was loaded and <ph id=\"ph3\">`null`</ph> for each type that could not be loaded, while the <ph id=\"ph4\">&lt;xref href=\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\"&gt;&lt;/xref&gt;</ph> property contains an exception for each type that could not be loaded.","pos":[63,485],"source":" The array returned by the <xref href=\"System.Reflection.ReflectionTypeLoadException.Types\"></xref> property of this exception contains a <xref href=\"System.Type\"></xref> object for each type that was loaded and `null` for each type that could not be loaded, while the <xref href=\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\"></xref> property contains an exception for each type that could not be loaded."}]}],"pos":[145621,146107],"yaml":true},{"content":"Gets a value indicating whether the assembly was loaded from the global assembly cache.","nodes":[{"pos":[0,87],"content":"Gets a value indicating whether the assembly was loaded from the global assembly cache.","nodes":[{"content":"Gets a value indicating whether the assembly was loaded from the global assembly cache.","pos":[0,87]}]}],"pos":[147408,147496],"yaml":true},{"content":"`true` if the assembly was loaded from the global assembly cache; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if the assembly was loaded from the global assembly cache; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the assembly was loaded from the global assembly cache; otherwise, `false`."}],"pos":[147626,147714],"yaml":true},{"content":"Gets the host context with which the assembly was loaded.","nodes":[{"pos":[0,57],"content":"Gets the host context with which the assembly was loaded.","nodes":[{"content":"Gets the host context with which the assembly was loaded.","pos":[0,57]}]}],"pos":[148900,148958],"yaml":true},{"content":"An <xref href=\"System.Int64\"></xref> value that indicates the host context with which the assembly was loaded, if any.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Int64\"&gt;&lt;/xref&gt;</ph> value that indicates the host context with which the assembly was loaded, if any.","source":"An <xref href=\"System.Int64\"></xref> value that indicates the host context with which the assembly was loaded, if any."}],"pos":[149145,149264],"yaml":true},{"content":"Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.","nodes":[{"pos":[0,118],"content":"Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.","nodes":[{"content":"Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.","pos":[0,118]}]}],"pos":[150587,150706],"yaml":true},{"content":"For example, the value for the .NET Framework version 1.1 would be v1.1.4322. The binary files for that version would be located in the path %windir%\\Microsoft.NET\\Framework\\v1.1.4322.  \n  \n By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly. However, it might have been set to another value at compile time.","nodes":[{"pos":[0,184],"content":"For example, the value for the .NET Framework version 1.1 would be v1.1.4322. The binary files for that version would be located in the path %windir%\\Microsoft.NET\\Framework\\v1.1.4322.","nodes":[{"content":"For example, the value for the .NET Framework version 1.1 would be v1.1.4322. The binary files for that version would be located in the path %windir%\\Microsoft.NET\\Framework\\v1.1.4322.","pos":[0,184],"nodes":[{"content":"For example, the value for the .NET Framework version 1.1 would be v1.1.4322.","pos":[0,77]},{"content":"The binary files for that version would be located in the path %windir%\\Microsoft.NET\\Framework\\v1.1.4322.","pos":[78,184]}]}]},{"pos":[191,386],"content":"By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly. However, it might have been set to another value at compile time.","nodes":[{"content":"By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly. However, it might have been set to another value at compile time.","pos":[0,195],"nodes":[{"content":"By default, <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ImageRuntimeVersion%2A&gt;</ph> is set to the version of the CLR used to build the assembly.","pos":[0,129],"source":"By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly."},{"content":"However, it might have been set to another value at compile time.","pos":[130,195]}]}]}],"pos":[150717,151111],"yaml":true,"extradata":"MT"},{"content":"The CLR version folder name. This is not a full path.","nodes":[{"pos":[0,53],"content":"The CLR version folder name. This is not a full path.","nodes":[{"content":"The CLR version folder name. This is not a full path.","pos":[0,53],"nodes":[{"content":"The CLR version folder name.","pos":[0,28]},{"content":"This is not a full path.","pos":[29,53]}]}]}],"pos":[151309,151363],"yaml":true},{"content":"Indicates whether or not a specified attribute has been applied to the assembly.","nodes":[{"pos":[0,80],"content":"Indicates whether or not a specified attribute has been applied to the assembly.","nodes":[{"content":"Indicates whether or not a specified attribute has been applied to the assembly.","pos":[0,80]}]}],"pos":[152883,152964],"yaml":true},{"content":"The type of the attribute to be checked for this assembly.","nodes":[{"pos":[0,58],"content":"The type of the attribute to be checked for this assembly.","nodes":[{"content":"The type of the attribute to be checked for this assembly.","pos":[0,58]}]}],"pos":[153756,153815],"yaml":true},{"content":"This argument is ignored for objects of this type.","nodes":[{"pos":[0,50],"content":"This argument is ignored for objects of this type.","nodes":[{"content":"This argument is ignored for objects of this type.","pos":[0,50]}]}],"pos":[153879,153930],"yaml":true},{"content":"`true` if the attribute has been applied to the assembly; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if the attribute has been applied to the assembly; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the attribute has been applied to the assembly; otherwise, `false`."}],"pos":[153988,154068],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[154234,154272],"yaml":true},{"content":"<code>attributeType</code> uses an invalid type.","nodes":[{"pos":[0,48],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> uses an invalid type.","source":"<code>attributeType</code> uses an invalid type."}],"pos":[154366,154415],"yaml":true},{"content":"Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.","nodes":[{"pos":[0,131],"content":"Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.","nodes":[{"content":"Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.","pos":[0,131]}]}],"pos":[155534,155666],"yaml":true},{"content":"Dynamic assemblies are represented by the derived class <xref:System.Reflection.Emit.AssemblyBuilder>.  \n  \n When a dynamic assembly is saved to disk, the saved assembly is not dynamic. If the saved assembly is loaded into another application domain or process, the <xref:System.Reflection.Assembly.IsDynamic%2A> property returns `false`.","nodes":[{"pos":[0,102],"content":"Dynamic assemblies are represented by the derived class <xref:System.Reflection.Emit.AssemblyBuilder>.","nodes":[{"content":"Dynamic assemblies are represented by the derived class <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.AssemblyBuilder&gt;</ph>.","pos":[0,102],"source":"Dynamic assemblies are represented by the derived class <xref:System.Reflection.Emit.AssemblyBuilder>."}]},{"pos":[109,338],"content":"When a dynamic assembly is saved to disk, the saved assembly is not dynamic. If the saved assembly is loaded into another application domain or process, the <xref:System.Reflection.Assembly.IsDynamic%2A> property returns `false`.","nodes":[{"content":"When a dynamic assembly is saved to disk, the saved assembly is not dynamic.","pos":[0,76]},{"content":"If the saved assembly is loaded into another application domain or process, the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.IsDynamic%2A&gt;</ph> property returns <ph id=\"ph2\">`false`</ph>.","pos":[77,229],"source":" If the saved assembly is loaded into another application domain or process, the <xref:System.Reflection.Assembly.IsDynamic%2A> property returns `false`."}]}],"pos":[155677,156020],"yaml":true,"extradata":"MT"},{"content":"`true` if the current assembly was generated dynamically in the current process; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> if the current assembly was generated dynamically in the current process; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current assembly was generated dynamically in the current process; otherwise, `false`."}],"pos":[156140,156243],"yaml":true},{"content":"Gets a value that indicates whether the current assembly is loaded with full trust.","nodes":[{"pos":[0,83],"content":"Gets a value that indicates whether the current assembly is loaded with full trust.","nodes":[{"content":"Gets a value that indicates whether the current assembly is loaded with full trust.","pos":[0,83]}]}],"pos":[157781,157865],"yaml":true},{"content":"`true` if the current assembly is loaded with full trust; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if the current assembly is loaded with full trust; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current assembly is loaded with full trust; otherwise, `false`."}],"pos":[157982,158062],"yaml":true},{"content":"Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\"></xref>.","nodes":[{"pos":[0,80],"content":"Loads an assembly given its <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyName\"&gt;&lt;/xref&gt;</ph>.","source":"Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\"></xref>."}],"pos":[159359,159440],"yaml":true},{"content":"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n> [!NOTE]\n>  Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n> [!NOTE]\n>  If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.","nodes":[{"pos":[0,287],"content":"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if <ph id=\"ph2\">`assemblyRef`</ph> specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token.","pos":[0,201],"source":"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token."},{"content":"The loader does not continue probing for other assemblies that match the simple name.","pos":[202,287]}]},{"pos":[295,1053],"content":"[!NOTE]\n Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).","leadings":["","> "],"nodes":[{"content":" Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).","pos":[8,756],"nodes":[{"content":"Do not use an <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> with only the <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property set.","pos":[1,130],"source":" Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.","pos":[131,416],"source":" The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method."},{"content":"Instead, the assembly is loaded using load-from rules.","pos":[417,471]},{"content":"For information about the disadvantages of using the load-from context, see the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName&gt;</ph> method overload or <bpt id=\"p1\">[</bpt>Best Practices for Assembly Loading<ept id=\"p1\">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.","pos":[472,748],"source":" For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md)."}]}]},{"pos":[1060,1220],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[1230,1418],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with no <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, the assembly is loaded with the evidence that the loader supplies.","pos":[0,188],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies."}]},{"pos":[1428,1732],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","nodes":[{"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","pos":[0,304],"nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with an <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.","pos":[0,152],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged."},{"content":"Pieces of evidence supplied as an argument to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.","pos":[153,304],"source":" Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader."}]}]},{"pos":[1742,2032],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.","pos":[0,197],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly."},{"content":"This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","pos":[198,290]}]},{"pos":[2044,2395],"content":"[!NOTE]\nIn the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","leadings":["","    >  "],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","pos":[8,344],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a COFF image, evidence is combined.","pos":[0,208],"source":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined."},{"content":"<ph id=\"ph1\">`Zone`</ph>, <ph id=\"ph2\">`Url`</ph> and <ph id=\"ph3\">`Site`</ph> are inherited from the calling assembly, and <ph id=\"ph4\">`Hash`</ph> and <ph id=\"ph5\">`StrongName`</ph> are taken from the COFF assembly.","pos":[209,336],"source":"`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly."}]}]},{"pos":[2405,2671],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter and <ph id=\"ph3\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> to load a COFF image, only the supplied evidence is used.","pos":[0,190],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used."},{"content":"Evidence of the calling assembly and evidence of the COFF image is ignored.","pos":[191,266]}]},{"pos":[2678,3003],"content":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.","nodes":[{"content":"Reflecting on C++ executable files might throw a <ph id=\"ph1\">&lt;xref:System.BadImageFormatException&gt;</ph>.","pos":[0,87],"source":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the <ph id=\"ph1\">`.reloc`</ph> section from your executable file.","pos":[88,220],"source":" This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file."},{"content":"To preserve the <ph id=\"ph1\">`.reloc`</ph> address for your C++ executable file, specify <ph id=\"ph2\">`/fixed:no`</ph> when you are linking.","pos":[221,325],"source":" To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking."}]},{"pos":[3011,3728],"content":"[!NOTE]\n If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.","leadings":["","> "],"nodes":[{"content":" If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.","pos":[8,715],"nodes":[{"content":"If both the <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;</ph> property and the <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt;</ph> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;</ph> property).","pos":[1,395],"source":" If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property)."},{"content":"If the file is not found, <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> is used to search for the assembly.","pos":[396,507],"source":" If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly."},{"content":"If the assembly is found using <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph>, the display name is matched against the assembly.","pos":[508,639],"source":" If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly."},{"content":"If the match fails, a <ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown.","pos":[640,707],"source":" If the match fails, a <xref:System.IO.FileLoadException> is thrown."}]}]}],"pos":[159451,163203],"yaml":true,"extradata":"MT"},{"content":"The object that describes the assembly to be loaded.","nodes":[{"pos":[0,52],"content":"The object that describes the assembly to be loaded.","nodes":[{"content":"The object that describes the assembly to be loaded.","pos":[0,52]}]}],"pos":[163943,163996],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[164066,164087],"yaml":true},{"content":"<code>assemblyRef</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyRef</code> is `null`."}],"pos":[164248,164284],"yaml":true},{"content":"<code>assemblyRef</code> is not found.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not found.","source":"<code>assemblyRef</code> is not found."}],"pos":[164392,164431],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n A file that was found could not be loaded.","nodes":[{"pos":[0,342],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.IO.IOException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,342],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead."}]},{"pos":[348,365],"content":"</p>\n    </block>","nodes":[]},{"pos":[372,414],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[164531,164961],"yaml":true},{"content":"<code>assemblyRef</code> is not a valid assembly. -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.","nodes":[{"pos":[0,54],"content":"<code>assemblyRef</code> is not a valid assembly. -or-","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not a valid assembly.","pos":[0,49],"source":"<code>assemblyRef</code> is not a valid assembly."},{"content":"-or-","pos":[50,54]}]},{"pos":[61,196],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyRef</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version."}],"pos":[165067,165268],"yaml":true},{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.","nodes":[{"pos":[0,249],"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.","nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.","pos":[0,249],"nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context.","pos":[0,183]},{"content":"The assembly is loaded into the application domain of the caller.","pos":[184,249]}]}]}],"pos":[166960,167210],"yaml":true},{"content":"The assembly is loaded into the application domain of the caller using the specified source for the security context. If `rawSymbolStore` was specified, the raw bytes that represent the symbols for the assembly are also loaded.","nodes":[{"pos":[0,227],"content":"The assembly is loaded into the application domain of the caller using the specified source for the security context. If `rawSymbolStore` was specified, the raw bytes that represent the symbols for the assembly are also loaded.","nodes":[{"content":"The assembly is loaded into the application domain of the caller using the specified source for the security context.","pos":[0,117]},{"content":"If <ph id=\"ph1\">`rawSymbolStore`</ph> was specified, the raw bytes that represent the symbols for the assembly are also loaded.","pos":[118,227],"source":" If `rawSymbolStore` was specified, the raw bytes that represent the symbols for the assembly are also loaded."}]}],"pos":[167221,167449],"yaml":true,"extradata":"MT"},{"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"pos":[0,71],"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"content":"A byte array that is a COFF-based image containing an emitted assembly.","pos":[0,71]}]}],"pos":[167707,167779],"yaml":true},{"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","nodes":[{"pos":[0,83],"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","nodes":[{"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","pos":[0,83]}]}],"pos":[167849,167933],"yaml":true},{"content":"The source of the security context.","nodes":[{"pos":[0,35],"content":"The source of the security context.","nodes":[{"content":"The source of the security context.","pos":[0,35]}]}],"pos":[168034,168070],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[168140,168161],"yaml":true},{"content":"<code>rawAssembly</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rawAssembly</code> is `null`."}],"pos":[168322,168358],"yaml":true},{"content":"<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n <code>rawAssembly</code> was compiled with a later version of the common language runtime than the version that is currently loaded.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>rawAssembly</code> is not a valid assembly."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,199],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.","source":"<code>rawAssembly</code> was compiled with a later version of the common language runtime than the version that is currently loaded."}],"pos":[168464,168670],"yaml":true},{"content":"The value of <code>securityContextSource</code> is not one of the enumeration values.","nodes":[{"pos":[0,85],"content":"The value of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">securityContextSource</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not one of the enumeration values.","source":"The value of <code>securityContextSource</code> is not one of the enumeration values."}],"pos":[168784,168870],"yaml":true},{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.","nodes":[{"pos":[0,228],"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.","nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.","pos":[0,228],"nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly.","pos":[0,162]},{"content":"The assembly is loaded into the application domain of the caller.","pos":[163,228]}]}]}],"pos":[170089,170318],"yaml":true},{"content":"The assembly is loaded into the domain of the caller using the supplied evidence. The raw bytes representing the symbols for the assembly are also loaded.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image are ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n If you call the [\\], Byte\\<xref:System.Reflection.Assembly.Load%2A>method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.","nodes":[{"pos":[0,154],"content":"The assembly is loaded into the domain of the caller using the supplied evidence. The raw bytes representing the symbols for the assembly are also loaded.","nodes":[{"content":"The assembly is loaded into the domain of the caller using the supplied evidence. The raw bytes representing the symbols for the assembly are also loaded.","pos":[0,154],"nodes":[{"content":"The assembly is loaded into the domain of the caller using the supplied evidence.","pos":[0,81]},{"content":"The raw bytes representing the symbols for the assembly are also loaded.","pos":[82,154]}]}]},{"pos":[161,321],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[331,519],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with no <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, the assembly is loaded with the evidence that the loader supplies.","pos":[0,188],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies."}]},{"pos":[529,833],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","nodes":[{"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","pos":[0,304],"nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with an <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.","pos":[0,152],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged."},{"content":"Pieces of evidence supplied as an argument to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.","pos":[153,304],"source":" Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader."}]}]},{"pos":[843,1105],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a COFF image, evidence is inherited from the calling assembly.","pos":[0,169],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is inherited from the calling assembly."},{"content":"This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","pos":[170,262]}]},{"pos":[1117,1468],"content":"[!NOTE]\nIn the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","leadings":["","    >  "],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","pos":[8,344],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a COFF image, evidence is combined.","pos":[0,208],"source":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined."},{"content":"<ph id=\"ph1\">`Zone`</ph>, <ph id=\"ph2\">`Url`</ph> and <ph id=\"ph3\">`Site`</ph> are inherited from the calling assembly, and <ph id=\"ph4\">`Hash`</ph> and <ph id=\"ph5\">`StrongName`</ph> are taken from the COFF assembly.","pos":[209,336],"source":"`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly."}]}]},{"pos":[1478,1745],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image are ignored.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter and <ph id=\"ph3\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> to load a COFF image, only the supplied evidence is used.","pos":[0,190],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used."},{"content":"Evidence of the calling assembly and evidence of the COFF image are ignored.","pos":[191,267]}]},{"pos":[1752,2077],"content":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.","nodes":[{"content":"Reflecting on C++ executable files might throw a <ph id=\"ph1\">&lt;xref:System.BadImageFormatException&gt;</ph>.","pos":[0,87],"source":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the <ph id=\"ph1\">`.reloc`</ph> section from your executable file.","pos":[88,220],"source":" This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file."},{"content":"To preserve the <ph id=\"ph1\">`.reloc`</ph> address for your C++ executable file, specify <ph id=\"ph2\">`/fixed:no`</ph> when you are linking.","pos":[221,325],"source":" To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking."}]},{"pos":[2084,2475],"content":"If you call the [\\], Byte\\<xref:System.Reflection.Assembly.Load%2A>method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","nodes":[{"content":"If you call the [\\], Byte\\<xref:System.Reflection.Assembly.Load%2A>method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","pos":[0,391],"nodes":[{"content":"If you call the [<ph id=\"ph1\">\\]</ph>, Byte<ph id=\"ph2\">\\&lt;</ph>xref:System.Reflection.Assembly.Load%2A&gt;method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <ph id=\"ph3\">&lt;xref:System.IO.FileLoadException&gt;</ph> because the equality and integrity of the different evidence specifications cannot be determined.","pos":[0,328],"source":"If you call the [\\], Byte\\<xref:System.Reflection.Assembly.Load%2A>method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined."},{"content":"The evidence that first succeeds is the evidence that is used.","pos":[329,391]}]}]},{"pos":[2482,2596],"content":"Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.","nodes":[{"content":"Note that this method overload always creates a new <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> object with its own mapping.","pos":[0,114],"source":"Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping."}]}],"pos":[170329,172949],"yaml":true,"extradata":"MT"},{"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"pos":[0,71],"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"content":"A byte array that is a COFF-based image containing an emitted assembly.","pos":[0,71]}]}],"pos":[173230,173302],"yaml":true},{"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","nodes":[{"pos":[0,83],"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","nodes":[{"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","pos":[0,83]}]}],"pos":[173372,173456],"yaml":true},{"content":"Evidence for loading the assembly.","nodes":[{"pos":[0,34],"content":"Evidence for loading the assembly.","nodes":[{"content":"Evidence for loading the assembly.","pos":[0,34]}]}],"pos":[173546,173581],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[173651,173672],"yaml":true},{"content":"<code>rawAssembly</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rawAssembly</code> is `null`."}],"pos":[173833,173869],"yaml":true},{"content":"<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>rawAssembly</code> is not a valid assembly."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,202],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rawAssembly</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."}],"pos":[173975,174184],"yaml":true},{"content":"An assembly or module was loaded twice with two different evidences.","nodes":[{"pos":[0,68],"content":"An assembly or module was loaded twice with two different evidences.","nodes":[{"content":"An assembly or module was loaded twice with two different evidences.","pos":[0,68]}]}],"pos":[174284,174353],"yaml":true},{"content":"<code>securityEvidence</code> is not `null`.  By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.","nodes":[{"pos":[0,224],"content":"<code>securityEvidence</code> is not `null`.  By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph>.","pos":[0,44],"source":"<code>securityEvidence</code> is not `null`."},{"content":"By default, legacy CAS policy is not enabled in the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>; when it is not enabled, <ph id=\"ph2\">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> must be <ph id=\"ph3\">`null`</ph>.","pos":[46,224],"source":"  By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`."}]}],"pos":[174455,174680],"yaml":true},{"content":"Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.","nodes":[{"pos":[0,121],"content":"Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.","nodes":[{"content":"Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.","pos":[0,121]}]}],"pos":[175882,176004],"yaml":true},{"content":"<xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","nodes":[{"pos":[0,291],"content":"<xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if <ph id=\"ph2\">`assemblyString`</ph> specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.","pos":[0,205],"source":"<xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token."},{"content":"The loader does not continue probing for other assemblies that match the simple name.","pos":[206,291]}]},{"pos":[298,458],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[468,656],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with no <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, the assembly is loaded with the evidence that the loader supplies.","pos":[0,188],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies."}]},{"pos":[666,970],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","nodes":[{"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","pos":[0,304],"nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with an <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.","pos":[0,152],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged."},{"content":"Pieces of evidence supplied as an argument to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.","pos":[153,304],"source":" Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader."}]}]},{"pos":[980,1270],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.","pos":[0,197],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly."},{"content":"This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","pos":[198,290]}]},{"pos":[1282,1633],"content":"[!NOTE]\nIn the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","leadings":["","    >  "],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","pos":[8,344],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a COFF image, evidence is combined.","pos":[0,208],"source":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined."},{"content":"<ph id=\"ph1\">`Zone`</ph>, <ph id=\"ph2\">`Url`</ph> and <ph id=\"ph3\">`Site`</ph> are inherited from the calling assembly, and <ph id=\"ph4\">`Hash`</ph> and <ph id=\"ph5\">`StrongName`</ph> are taken from the COFF assembly.","pos":[209,336],"source":"`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly."}]}]},{"pos":[1643,1909],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter and <ph id=\"ph3\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> to load a COFF image, only the supplied evidence is used.","pos":[0,190],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used."},{"content":"Evidence of the calling assembly and evidence of the COFF image is ignored.","pos":[191,266]}]},{"pos":[1916,2241],"content":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.","nodes":[{"content":"Reflecting on C++ executable files might throw a <ph id=\"ph1\">&lt;xref:System.BadImageFormatException&gt;</ph>.","pos":[0,87],"source":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the <ph id=\"ph1\">`.reloc`</ph> section from your executable file.","pos":[88,220],"source":" This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file."},{"content":"To preserve the <ph id=\"ph1\">`.reloc`</ph> address for your C++ executable file, specify <ph id=\"ph2\">`/fixed:no`</ph> when you are linking.","pos":[221,325],"source":" To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking."}]},{"pos":[2248,2589],"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","nodes":[{"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","pos":[0,341],"nodes":[{"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> because the equality and integrity of the different evidence specifications cannot be determined.","pos":[0,278],"source":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined."},{"content":"The evidence that first succeeds is the evidence that is used.","pos":[279,341]}]}]},{"pos":[2596,3089],"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","nodes":[{"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","pos":[0,493],"nodes":[{"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.","pos":[0,143]},{"content":"For example, \"ProcessorArchitecture=msil\".","pos":[144,186]},{"content":"However, the recommended way to specify an assembly name is to create an <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object and pass it to an appropriate overload of the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.","pos":[187,400],"source":" However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method."},{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName&gt;</ph>.","pos":[401,493],"source":" See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>."}]}]}],"pos":[176015,179128],"yaml":true,"extradata":"MT"},{"content":"The display name of the assembly.","nodes":[{"pos":[0,33],"content":"The display name of the assembly.","nodes":[{"content":"The display name of the assembly.","pos":[0,33]}]}],"pos":[179392,179426],"yaml":true},{"content":"Evidence for loading the assembly.","nodes":[{"pos":[0,34],"content":"Evidence for loading the assembly.","nodes":[{"content":"Evidence for loading the assembly.","pos":[0,34]}]}],"pos":[179516,179551],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[179621,179642],"yaml":true},{"content":"<code>assemblyString</code> is `null`.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyString</code> is `null`."}],"pos":[179803,179842],"yaml":true},{"content":"<code>assemblyString</code> is not found.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not found.","source":"<code>assemblyString</code> is not found."}],"pos":[179950,179992],"yaml":true},{"content":"<code>assemblyString</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyString</code> is not a valid assembly."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,208],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyString</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version."}],"pos":[180098,180313],"yaml":true},{"content":"A file that was found could not be loaded.  \n  \n -or-  \n  \n An assembly or module was loaded twice with two different evidences.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,128],"content":"An assembly or module was loaded twice with two different evidences.","nodes":[{"content":"An assembly or module was loaded twice with two different evidences.","pos":[0,68]}]}],"pos":[180413,180548],"yaml":true},{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.","nodes":[{"pos":[0,168],"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.","nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.","pos":[0,168],"nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly.","pos":[0,102]},{"content":"The assembly is loaded into the application domain of the caller.","pos":[103,168]}]}]}],"pos":[181659,181828],"yaml":true},{"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.","nodes":[{"pos":[0,637],"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.","nodes":[{"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.","pos":[0,637],"nodes":[{"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly.","pos":[0,122]},{"content":"To load an assembly from a byte array with the trust level of the application domain, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29&gt;</ph> method overload.","pos":[123,355],"source":" To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload."},{"content":"For more information about the use of evidence with overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method that take byte arrays, see the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29&gt;</ph> method overload.","pos":[356,637],"source":" For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload."}]}]},{"pos":[644,969],"content":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.","nodes":[{"content":"Reflecting on C++ executable files might throw a <ph id=\"ph1\">&lt;xref:System.BadImageFormatException&gt;</ph>.","pos":[0,87],"source":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the <ph id=\"ph1\">`.reloc`</ph> section from your executable file.","pos":[88,220],"source":" This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file."},{"content":"To preserve the <ph id=\"ph1\">`.reloc`</ph> address for your C++ executable file, specify <ph id=\"ph2\">`/fixed:no`</ph> when you are linking.","pos":[221,325],"source":" To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking."}]},{"pos":[976,1090],"content":"Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.","nodes":[{"content":"Note that this method overload always creates a new <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> object with its own mapping.","pos":[0,114],"source":"Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping."}]}],"pos":[181839,182936],"yaml":true,"extradata":"MT"},{"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"pos":[0,71],"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"content":"A byte array that is a COFF-based image containing an emitted assembly.","pos":[0,71]}]}],"pos":[183110,183182],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[183252,183273],"yaml":true},{"content":"<code>rawAssembly</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rawAssembly</code> is `null`."}],"pos":[183434,183470],"yaml":true},{"content":"<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>rawAssembly</code> is not a valid assembly."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,202],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rawAssembly</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."}],"pos":[183576,183785],"yaml":true},{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.","nodes":[{"pos":[0,215],"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.","nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.","pos":[0,215],"nodes":[{"content":"Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly.","pos":[0,149]},{"content":"The assembly is loaded into the application domain of the caller.","pos":[150,215]}]}]}],"pos":[184985,185201],"yaml":true},{"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.","nodes":[{"pos":[0,637],"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.","nodes":[{"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.","pos":[0,637],"nodes":[{"content":"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly.","pos":[0,122]},{"content":"To load an assembly from a byte array with the trust level of the application domain, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29&gt;</ph> method overload.","pos":[123,355],"source":" To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload."},{"content":"For more information about the use of evidence with overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method that take byte arrays, see the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29&gt;</ph> method overload.","pos":[356,637],"source":" For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload."}]}]},{"pos":[644,969],"content":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.","nodes":[{"content":"Reflecting on C++ executable files might throw a <ph id=\"ph1\">&lt;xref:System.BadImageFormatException&gt;</ph>.","pos":[0,87],"source":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the <ph id=\"ph1\">`.reloc`</ph> section from your executable file.","pos":[88,220],"source":" This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file."},{"content":"To preserve the <ph id=\"ph1\">`.reloc`</ph> address for your C++ executable file, specify <ph id=\"ph2\">`/fixed:no`</ph> when you are linking.","pos":[221,325],"source":" To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking."}]},{"pos":[976,1090],"content":"Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.","nodes":[{"content":"Note that this method overload always creates a new <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly&gt;</ph> object with its own mapping.","pos":[0,114],"source":"Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping."}]}],"pos":[185212,186309],"yaml":true,"extradata":"MT"},{"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"pos":[0,71],"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"content":"A byte array that is a COFF-based image containing an emitted assembly.","pos":[0,71]}]}],"pos":[186506,186578],"yaml":true},{"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","nodes":[{"pos":[0,83],"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","nodes":[{"content":"A byte array that contains the raw bytes representing the symbols for the assembly.","pos":[0,83]}]}],"pos":[186648,186732],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[186802,186823],"yaml":true},{"content":"<code>rawAssembly</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rawAssembly</code> is `null`."}],"pos":[186984,187020],"yaml":true},{"content":"<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>rawAssembly</code> is not a valid assembly."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,202],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rawAssembly</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."}],"pos":[187126,187335],"yaml":true},{"content":"Loads an assembly given the long form of its name.","nodes":[{"pos":[0,50],"content":"Loads an assembly given the long form of its name.","nodes":[{"content":"Loads an assembly given the long form of its name.","pos":[0,50]}]}],"pos":[188469,188520],"yaml":true},{"content":"The long form of an assembly name consists of its simple name (such as \"System\" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture. It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property. The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.  \n  \n [!code-csharp[System.Reflection.Assembly.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/load1.cs#1)]\n [!code-vb[System.Reflection.Assembly.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/load1.vb#1)]  \n  \n <xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","nodes":[{"pos":[0,406],"content":"The long form of an assembly name consists of its simple name (such as \"System\" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture. It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property. The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.","nodes":[{"content":"The long form of an assembly name consists of its simple name (such as \"System\" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture. It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property. The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.","pos":[0,406],"nodes":[{"content":"The long form of an assembly name consists of its simple name (such as \"System\" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture.","pos":[0,202]},{"content":"It corresponds to the assembly's <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.FullName%2A&gt;</ph> property.","pos":[203,291],"source":" It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property."},{"content":"The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.","pos":[292,406]}]}]},{"pos":[413,706],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Reflection.Assembly.Load#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/load1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Reflection.Assembly.Load#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/load1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Reflection.Assembly.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/load1.cs#1)]\n [!code-vb[System.Reflection.Assembly.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/load1.vb#1)]"},{"pos":[713,1004],"content":"<xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if <ph id=\"ph2\">`assemblyString`</ph> specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.","pos":[0,205],"source":"<xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token."},{"content":"The loader does not continue probing for other assemblies that match the simple name.","pos":[206,291]}]},{"pos":[1011,1171],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[1181,1369],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with no <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, the assembly is loaded with the evidence that the loader supplies.","pos":[0,188],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies."}]},{"pos":[1379,1683],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","nodes":[{"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","pos":[0,304],"nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with an <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.","pos":[0,152],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged."},{"content":"Pieces of evidence supplied as an argument to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.","pos":[153,304],"source":" Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader."}]}]},{"pos":[1693,1983],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.","pos":[0,197],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly."},{"content":"This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","pos":[198,290]}]},{"pos":[1995,2346],"content":"[!NOTE]\nIn the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","leadings":["","    >  "],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","pos":[8,344],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a COFF image, evidence is combined.","pos":[0,208],"source":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined."},{"content":"<ph id=\"ph1\">`Zone`</ph>, <ph id=\"ph2\">`Url`</ph> and <ph id=\"ph3\">`Site`</ph> are inherited from the calling assembly, and <ph id=\"ph4\">`Hash`</ph> and <ph id=\"ph5\">`StrongName`</ph> are taken from the COFF assembly.","pos":[209,336],"source":"`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly."}]}]},{"pos":[2356,2622],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter and <ph id=\"ph3\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> to load a COFF image, only the supplied evidence is used.","pos":[0,190],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used."},{"content":"Evidence of the calling assembly and evidence of the COFF image is ignored.","pos":[191,266]}]},{"pos":[2629,2954],"content":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.","nodes":[{"content":"Reflecting on C++ executable files might throw a <ph id=\"ph1\">&lt;xref:System.BadImageFormatException&gt;</ph>.","pos":[0,87],"source":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the <ph id=\"ph1\">`.reloc`</ph> section from your executable file.","pos":[88,220],"source":" This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file."},{"content":"To preserve the <ph id=\"ph1\">`.reloc`</ph> address for your C++ executable file, specify <ph id=\"ph2\">`/fixed:no`</ph> when you are linking.","pos":[221,325],"source":" To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking."}]},{"pos":[2961,3454],"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","nodes":[{"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.","pos":[0,493],"nodes":[{"content":"In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings.","pos":[0,143]},{"content":"For example, \"ProcessorArchitecture=msil\".","pos":[144,186]},{"content":"However, the recommended way to specify an assembly name is to create an <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> object and pass it to an appropriate overload of the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.","pos":[187,400],"source":" However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method."},{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName&gt;</ph>.","pos":[401,493],"source":" See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>."}]}]}],"pos":[188531,192014],"yaml":true,"extradata":"MT"},{"content":"The long form of the assembly name.","nodes":[{"pos":[0,35],"content":"The long form of the assembly name.","nodes":[{"content":"The long form of the assembly name.","pos":[0,35]}]}],"pos":[192891,192927],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[192997,193018],"yaml":true},{"content":"<code>assemblyString</code> is `null`.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyString</code> is `null`."}],"pos":[193179,193218],"yaml":true},{"content":"<code>assemblyString</code> is a zero-length string.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is a zero-length string.","source":"<code>assemblyString</code> is a zero-length string."}],"pos":[193312,193365],"yaml":true},{"content":"<code>assemblyString</code> is not found.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not found.","source":"<code>assemblyString</code> is not found."}],"pos":[193473,193515],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[193615,193658],"yaml":true},{"content":"<code>assemblyString</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyString</code> is not a valid assembly."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,208],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyString</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version."}],"pos":[193764,193979],"yaml":true},{"content":"Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\"></xref>. The assembly is loaded into the domain of the caller using the supplied evidence.","nodes":[{"pos":[0,162],"content":"Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\"></xref>. The assembly is loaded into the domain of the caller using the supplied evidence.","nodes":[{"content":"Loads an assembly given its <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyName\"&gt;&lt;/xref&gt;</ph>.","pos":[0,80],"source":"Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\"></xref>."},{"content":"The assembly is loaded into the domain of the caller using the supplied evidence.","pos":[81,162]}]}],"pos":[195273,195436],"yaml":true},{"content":"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n> [!NOTE]\n>  Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n> [!NOTE]\n>  If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.  \n  \n If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","nodes":[{"pos":[0,288],"content":"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown if <ph id=\"ph2\">`assemblyRef`</ph> specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token.","pos":[0,202],"source":"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token."},{"content":"The loader does not continue probing for other assemblies that match the simple name.","pos":[203,288]}]},{"pos":[296,1054],"content":"[!NOTE]\n Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).","leadings":["","> "],"nodes":[{"content":" Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).","pos":[8,756],"nodes":[{"content":"Do not use an <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> with only the <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property set.","pos":[1,130],"source":" Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.","pos":[131,416],"source":" The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method."},{"content":"Instead, the assembly is loaded using load-from rules.","pos":[417,471]},{"content":"For information about the disadvantages of using the load-from context, see the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName&gt;</ph> method overload or <bpt id=\"p1\">[</bpt>Best Practices for Assembly Loading<ept id=\"p1\">](~/docs/framework/deployment/best-practices-for-assembly-loading.md)</ept>.","pos":[472,748],"source":" For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md)."}]}]},{"pos":[1061,1221],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[1231,1419],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with no <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, the assembly is loaded with the evidence that the loader supplies.","pos":[0,188],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies."}]},{"pos":[1429,1733],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","nodes":[{"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.","pos":[0,304],"nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with an <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.","pos":[0,152],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged."},{"content":"Pieces of evidence supplied as an argument to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.","pos":[153,304],"source":" Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader."}]}]},{"pos":[1743,2033],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly.","pos":[0,197],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly."},{"content":"This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.","pos":[198,290]}]},{"pos":[2045,2396],"content":"[!NOTE]\nIn the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","leadings":["","    >  "],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","pos":[8,344],"nodes":[{"content":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method overload with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a COFF image, evidence is combined.","pos":[0,208],"source":"In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined."},{"content":"<ph id=\"ph1\">`Zone`</ph>, <ph id=\"ph2\">`Url`</ph> and <ph id=\"ph3\">`Site`</ph> are inherited from the calling assembly, and <ph id=\"ph4\">`Hash`</ph> and <ph id=\"ph5\">`StrongName`</ph> are taken from the COFF assembly.","pos":[209,336],"source":"`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly."}]}]},{"pos":[2406,2672],"content":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter and <ph id=\"ph3\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> to load a COFF image, only the supplied evidence is used.","pos":[0,190],"source":"When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used."},{"content":"Evidence of the calling assembly and evidence of the COFF image is ignored.","pos":[191,266]}]},{"pos":[2679,3004],"content":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.","nodes":[{"content":"Reflecting on C++ executable files might throw a <ph id=\"ph1\">&lt;xref:System.BadImageFormatException&gt;</ph>.","pos":[0,87],"source":"Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the <ph id=\"ph1\">`.reloc`</ph> section from your executable file.","pos":[88,220],"source":" This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file."},{"content":"To preserve the <ph id=\"ph1\">`.reloc`</ph> address for your C++ executable file, specify <ph id=\"ph2\">`/fixed:no`</ph> when you are linking.","pos":[221,325],"source":" To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking."}]},{"pos":[3012,3729],"content":"[!NOTE]\n If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.","leadings":["","> "],"nodes":[{"content":" If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.","pos":[8,715],"nodes":[{"content":"If both the <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName&gt;</ph> property and the <ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName&gt;</ph> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName&gt;</ph> property).","pos":[1,395],"source":" If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property)."},{"content":"If the file is not found, <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph> is used to search for the assembly.","pos":[396,507],"source":" If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly."},{"content":"If the assembly is found using <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName.CodeBase%2A&gt;</ph>, the display name is matched against the assembly.","pos":[508,639],"source":" If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly."},{"content":"If the match fails, a <ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> is thrown.","pos":[640,707],"source":" If the match fails, a <xref:System.IO.FileLoadException> is thrown."}]}]},{"pos":[3736,4118],"content":"If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","nodes":[{"content":"If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","pos":[0,382],"nodes":[{"content":"If you call the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <ph id=\"ph2\">&lt;xref:System.IO.FileLoadException&gt;</ph> because the equality and integrity of the different evidence specifications cannot be determined.","pos":[0,319],"source":"If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined."},{"content":"The evidence that first succeeds is the evidence that is used.","pos":[320,382]}]}]}],"pos":[195447,199591],"yaml":true,"extradata":"MT"},{"content":"The object that describes the assembly to be loaded.","nodes":[{"pos":[0,52],"content":"The object that describes the assembly to be loaded.","nodes":[{"content":"The object that describes the assembly to be loaded.","pos":[0,52]}]}],"pos":[199890,199943],"yaml":true},{"content":"Evidence for loading the assembly.","nodes":[{"pos":[0,34],"content":"Evidence for loading the assembly.","nodes":[{"content":"Evidence for loading the assembly.","pos":[0,34]}]}],"pos":[200033,200068],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[200138,200159],"yaml":true},{"content":"<code>assemblyRef</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyRef</code> is `null`."}],"pos":[200320,200356],"yaml":true},{"content":"<code>assemblyRef</code> is not found.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not found.","source":"<code>assemblyRef</code> is not found."}],"pos":[200464,200503],"yaml":true},{"content":"<code>assemblyRef</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyRef&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyRef</code> is not a valid assembly."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,202],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyRef</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version."}],"pos":[200609,200818],"yaml":true},{"content":"An assembly or module was loaded twice with two different evidences.","nodes":[{"pos":[0,68],"content":"An assembly or module was loaded twice with two different evidences.","nodes":[{"content":"An assembly or module was loaded twice with two different evidences.","pos":[0,68]}]}],"pos":[200918,200987],"yaml":true},{"content":"Loads the contents of an assembly file on the specified path.","nodes":[{"pos":[0,61],"content":"Loads the contents of an assembly file on the specified path.","nodes":[{"content":"Loads the contents of an assembly file on the specified path.","pos":[0,61]}]}],"pos":[202122,202184],"yaml":true},{"content":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.<xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","nodes":[{"pos":[0,634],"content":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.<xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","nodes":[{"content":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.<xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","pos":[0,634],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method to load and examine assemblies that have the same identity, but are located in different paths.<ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method does.","pos":[0,371],"source":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.<xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does."},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> is useful in this limited scenario because <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","pos":[372,634],"source":" <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly."}]}]}],"pos":[202195,202830],"yaml":true,"extradata":"MT"},{"content":"The fully qualified path of the file to load.","nodes":[{"pos":[0,45],"content":"The fully qualified path of the file to load.","nodes":[{"content":"The fully qualified path of the file to load.","pos":[0,45]}]}],"pos":[202994,203040],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[203110,203131],"yaml":true},{"content":"The <code>path</code> argument is not an absolute path.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is not an absolute path.","source":"The <code>path</code> argument is not an absolute path."}],"pos":[203288,203344],"yaml":true},{"content":"The <code>path</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>path</code> parameter is `null`."}],"pos":[203446,203489],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[203589,203632],"yaml":true},{"content":"The <code>path</code> parameter is an empty string (\"\") or does not exist.","nodes":[{"pos":[0,74],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\") or does not exist.","source":"The <code>path</code> parameter is an empty string (\"\") or does not exist."}],"pos":[203740,203815],"yaml":true},{"content":"<code>path</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>path</code> is not a valid assembly."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,188],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version."}],"pos":[203921,204116],"yaml":true},{"content":"Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.","nodes":[{"pos":[0,113],"content":"Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.","nodes":[{"content":"Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.","pos":[0,113]}]}],"pos":[205365,205479],"yaml":true},{"content":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths. <xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","nodes":[{"pos":[0,670],"content":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths. <xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","nodes":[{"content":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths. <xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","pos":[0,670],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method to load and examine assemblies that have the same identity, but are located in different paths.","pos":[0,156],"source":"Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths."},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> does not load files into the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> context, and does not resolve dependencies using the load path, as the <ph id=\"ph3\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method does.","pos":[157,407],"source":" <xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does."},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> is useful in this limited scenario because <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.","pos":[408,670],"source":" <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly."}]}]}],"pos":[205490,206161],"yaml":true,"extradata":"MT"},{"content":"The fully qualified path of the assembly file.","nodes":[{"pos":[0,46],"content":"The fully qualified path of the assembly file.","nodes":[{"content":"The fully qualified path of the assembly file.","pos":[0,46]}]}],"pos":[206409,206456],"yaml":true},{"content":"Evidence for loading the assembly.","nodes":[{"pos":[0,34],"content":"Evidence for loading the assembly.","nodes":[{"content":"Evidence for loading the assembly.","pos":[0,34]}]}],"pos":[206546,206581],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[206651,206672],"yaml":true},{"content":"The <code>path</code> argument is not an absolute path.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is not an absolute path.","source":"The <code>path</code> argument is not an absolute path."}],"pos":[206829,206885],"yaml":true},{"content":"The <code>path</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>path</code> parameter is `null`."}],"pos":[206987,207030],"yaml":true},{"content":"The <code>path</code> parameter is an empty string (\"\") or does not exist.","nodes":[{"pos":[0,74],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\") or does not exist.","source":"The <code>path</code> parameter is an empty string (\"\") or does not exist."}],"pos":[207138,207213],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[207313,207356],"yaml":true},{"content":"<code>path</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;path&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>path</code> is not a valid assembly."},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,188],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version."}],"pos":[207462,207657],"yaml":true},{"content":"<code>securityEvidence</code> is not `null`. By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.","nodes":[{"pos":[0,223],"content":"<code>securityEvidence</code> is not `null`. By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> is not <ph id=\"ph2\">`null`</ph>.","pos":[0,44],"source":"<code>securityEvidence</code> is not `null`."},{"content":"By default, legacy CAS policy is not enabled in the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>; when it is not enabled, <ph id=\"ph2\">&lt;code&gt;securityEvidence&lt;/code&gt;</ph> must be <ph id=\"ph3\">`null`</ph>.","pos":[45,223],"source":" By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`."}]}],"pos":[207759,207983],"yaml":true},{"content":"Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.","nodes":[{"pos":[0,97],"content":"Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.","nodes":[{"content":"Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.","pos":[0,97]}]}],"pos":[209506,209604],"yaml":true},{"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \n  \n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"pos":[0,153],"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.","nodes":[{"content":"The <ph id=\"ph1\">`assemblyFile`</ph> parameter must refer to a URI without escape characters.","pos":[0,75],"source":"The `assemblyFile` parameter must refer to a URI without escape characters."},{"content":"This method supplies escape characters for all invalid characters in the URI.","pos":[76,153]}]},{"pos":[161,328],"content":"[!NOTE]\n File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","leadings":["","> "],"nodes":[{"content":" File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","pos":[8,165],"nodes":[{"content":"File transfer protocol (FTP) is not supported.","pos":[1,47]},{"content":"If the URI supplied for <ph id=\"ph1\">`assemblyFile`</ph> is an FTP address, the assembly is not loaded.","pos":[48,133],"source":" If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded."},{"content":"No exception is thrown.","pos":[134,157]}]}]},{"pos":[335,461],"content":"<ph id=\"ph1\">`assemblyFile`</ph> may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.","source":"`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller."},{"pos":[468,554],"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","nodes":[{"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","pos":[0,86]}]},{"pos":[564,923],"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","nodes":[{"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","pos":[0,359],"nodes":[{"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <ph id=\"ph1\">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> of the application domain.","pos":[0,253],"source":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain."},{"content":"Most overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method load assemblies into this context.","pos":[254,359],"source":" Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context."}]}]},{"pos":[933,1246],"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","nodes":[{"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","pos":[0,313],"nodes":[{"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.","pos":[0,129]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> are examples of methods that load by path.","pos":[130,313],"source":" <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path."}]}]},{"pos":[1256,1491],"content":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.","nodes":[{"content":"The reflection-only context contains assemblies loaded with the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A&gt;</ph> methods; code in these contexts cannot be executed.","pos":[0,235],"source":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed."}]},{"pos":[1501,1815],"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","nodes":[{"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[0,314],"nodes":[{"content":"If the user generated or found the assembly, it is not in any context.","pos":[0,70]},{"content":"This applies to assemblies loaded using overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[71,314],"source":" This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk."}]}]},{"pos":[1822,2035],"content":"The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","nodes":[{"content":"The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","pos":[0,213]}]},{"pos":[2042,2197],"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","nodes":[{"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","pos":[0,155],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method has the following disadvantages.","pos":[0,89],"source":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages."},{"content":"Consider using <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> instead.","pos":[90,155],"source":" Consider using <xref:System.Reflection.Assembly.Load%2A> instead."}]}]},{"pos":[2207,2377],"content":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.","nodes":[{"content":"If an assembly with the same identity is already loaded, <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> returns the loaded assembly even if a different path was specified.","pos":[0,170],"source":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified."}]},{"pos":[2387,2630],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.","nodes":[{"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.","pos":[0,243],"nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.","pos":[0,194],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails."},{"content":"This can occur when an assembly is deserialized.","pos":[195,243]}]}]},{"pos":[2640,2924],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.","nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and the probing path includes an assembly with the same identity but a different location, an <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.MissingMethodException&gt;</ph>, or other unexpected behavior can occur.","pos":[0,284],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur."}]},{"pos":[2934,3217],"content":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> demands <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.WebPermission&gt;</ph>, on the specified path.","pos":[0,283],"source":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path."}]},{"pos":[3227,3336],"content":"If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.","nodes":[{"content":"If a native image exists for <ph id=\"ph1\">`assemblyFile`</ph>, it is not used.","pos":[0,60],"source":"If a native image exists for `assemblyFile`, it is not used."},{"content":"The assembly cannot be loaded as domain neutral.","pos":[61,109]}]},{"pos":[3346,3411],"content":"In the .NET Framework version 1.0 and 1.1, policy is not applied.","nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, policy is not applied.","pos":[0,65]}]},{"pos":[3418,3578],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[3588,3780],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with no <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, the assembly is loaded with the evidence that the loader supplies.","pos":[0,192],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies."}]},{"pos":[3790,4102],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.","nodes":[{"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.","pos":[0,312],"nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with an <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.","pos":[0,156],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged."},{"content":"Pieces of evidence supplied as an argument to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.","pos":[157,312],"source":" Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader."}]}]},{"pos":[4112,4453],"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","nodes":[{"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","pos":[0,341],"nodes":[{"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> because the equality and integrity of the different evidence specifications cannot be determined.","pos":[0,278],"source":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined."},{"content":"The evidence that first succeeds is the evidence that is used.","pos":[279,341]}]}]},{"pos":[4463,4756],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a common object file format (COFF) image, evidence is combined.","pos":[0,165],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined."},{"content":"<ph id=\"ph1\">`Zone`</ph>, <ph id=\"ph2\">`Url`</ph> and <ph id=\"ph3\">`Site`</ph> are inherited from the calling assembly, and <ph id=\"ph4\">`Hash`</ph> and <ph id=\"ph5\">`StrongName`</ph> are taken from the COFF assembly.","pos":[166,293],"source":"`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly."}]},{"pos":[4766,5036],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter and <ph id=\"ph3\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> to load a COFF image, only the supplied evidence is used.","pos":[0,194],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used."},{"content":"Evidence of the calling assembly and evidence of the COFF image is ignored.","pos":[195,270]}]}],"pos":[209615,214697],"yaml":true,"extradata":"MT"},{"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"pos":[0,72],"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"content":"The name or path of the file that contains the manifest of the assembly.","pos":[0,72]}]}],"pos":[215048,215121],"yaml":true},{"content":"Evidence for loading the assembly.","nodes":[{"pos":[0,34],"content":"Evidence for loading the assembly.","nodes":[{"content":"Evidence for loading the assembly.","pos":[0,34]}]}],"pos":[215211,215246],"yaml":true},{"content":"The value of the computed hash code.","nodes":[{"pos":[0,36],"content":"The value of the computed hash code.","nodes":[{"content":"The value of the computed hash code.","pos":[0,36]}]}],"pos":[215311,215348],"yaml":true},{"content":"The hash algorithm used for hashing files and for generating the strong name.","nodes":[{"pos":[0,77],"content":"The hash algorithm used for hashing files and for generating the strong name.","nodes":[{"content":"The hash algorithm used for hashing files and for generating the strong name.","pos":[0,77]}]}],"pos":[215457,215535],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[215605,215626],"yaml":true},{"content":"<code>assemblyFile</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyFile</code> is `null`."}],"pos":[215791,215828],"yaml":true},{"content":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found, or the module you are trying to load does not specify a filename extension.","source":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension."}],"pos":[215936,216052],"yaml":true},{"content":"A file that was found could not be loaded.  \n  \n -or-  \n  \n The <code>securityEvidence</code> is not ambiguous and is determined to be invalid.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,143],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">securityEvidence</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not ambiguous and is determined to be invalid.","source":"The <code>securityEvidence</code> is not ambiguous and is determined to be invalid."}],"pos":[216152,216302],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.","nodes":[{"pos":[0,148],"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.","pos":[0,102],"source":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process."},{"content":"See the exception topic for more information.","pos":[103,148]}]},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,302],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."}],"pos":[216408,216717],"yaml":true},{"content":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,127],"content":"A codebase that does not start with \"file://\" was specified without the required <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[216829,216957],"yaml":true},{"content":"The <code>assemblyFile</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,64],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>assemblyFile</code> parameter is an empty string (\"\")."}],"pos":[217051,217116],"yaml":true},{"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"pos":[0,53],"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"content":"The assembly name is longer than MAX_PATH characters.","pos":[0,53]}]}],"pos":[217222,217276],"yaml":true},{"content":"Loads an assembly given its file name or path, hash value, and hash algorithm.","nodes":[{"pos":[0,78],"content":"Loads an assembly given its file name or path, hash value, and hash algorithm.","nodes":[{"content":"Loads an assembly given its file name or path, hash value, and hash algorithm.","pos":[0,78]}]}],"pos":[218708,218787],"yaml":true},{"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path that is not included in probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain-neutral.  \n  \n The assembly is loaded with the evidence that the loader supplies.","nodes":[{"pos":[0,153],"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.","nodes":[{"content":"The <ph id=\"ph1\">`assemblyFile`</ph> parameter must refer to a URI without escape characters.","pos":[0,75],"source":"The `assemblyFile` parameter must refer to a URI without escape characters."},{"content":"This method supplies escape characters for all invalid characters in the URI.","pos":[76,153]}]},{"pos":[161,328],"content":"[!NOTE]\n File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","leadings":["","> "],"nodes":[{"content":" File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","pos":[8,165],"nodes":[{"content":"File transfer protocol (FTP) is not supported.","pos":[1,47]},{"content":"If the URI supplied for <ph id=\"ph1\">`assemblyFile`</ph> is an FTP address, the assembly is not loaded.","pos":[48,133],"source":" If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded."},{"content":"No exception is thrown.","pos":[134,157]}]}]},{"pos":[335,461],"content":"<ph id=\"ph1\">`assemblyFile`</ph> may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.","source":"`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller."},{"pos":[468,554],"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","nodes":[{"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","pos":[0,86]}]},{"pos":[564,941],"content":"The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","nodes":[{"content":"The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","pos":[0,377],"nodes":[{"content":"The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <ph id=\"ph1\">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> of the application domain.","pos":[0,271],"source":"The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain."},{"content":"Most overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method load assemblies into this context.","pos":[272,377],"source":" Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context."}]}]},{"pos":[951,1244],"content":"The load-from context contains assemblies for which the user provided a path that is not included in probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","nodes":[{"content":"The load-from context contains assemblies for which the user provided a path that is not included in probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","pos":[0,293],"nodes":[{"content":"The load-from context contains assemblies for which the user provided a path that is not included in probing.","pos":[0,109]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> are examples of methods that load by path.","pos":[110,293],"source":" <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path."}]}]},{"pos":[1254,1489],"content":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.","nodes":[{"content":"The reflection-only context contains assemblies loaded with the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A&gt;</ph> methods; code in these contexts cannot be executed.","pos":[0,235],"source":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed."}]},{"pos":[1499,1813],"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","nodes":[{"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[0,314],"nodes":[{"content":"If the user generated or found the assembly, it is not in any context.","pos":[0,70]},{"content":"This applies to assemblies loaded using overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[71,314],"source":" This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk."}]}]},{"pos":[1820,2041],"content":"The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","nodes":[{"content":"The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","pos":[0,221]}]},{"pos":[2048,2203],"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","nodes":[{"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","pos":[0,155],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method has the following disadvantages.","pos":[0,89],"source":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages."},{"content":"Consider using <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> instead.","pos":[90,155],"source":" Consider using <xref:System.Reflection.Assembly.Load%2A> instead."}]}]},{"pos":[2213,2383],"content":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.","nodes":[{"content":"If an assembly with the same identity is already loaded, <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> returns the loaded assembly even if a different path was specified.","pos":[0,170],"source":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified."}]},{"pos":[2393,2636],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.","nodes":[{"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.","pos":[0,243],"nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.","pos":[0,194],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails."},{"content":"This can occur when an assembly is deserialized.","pos":[195,243]}]}]},{"pos":[2646,2930],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.","nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and the probing path includes an assembly with the same identity but a different location, an <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.MissingMethodException&gt;</ph>, or other unexpected behavior can occur.","pos":[0,284],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur."}]},{"pos":[2940,3223],"content":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> demands <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.WebPermission&gt;</ph>, on the specified path.","pos":[0,283],"source":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path."}]},{"pos":[3233,3342],"content":"If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain-neutral.","nodes":[{"content":"If a native image exists for <ph id=\"ph1\">`assemblyFile`</ph>, it is not used.","pos":[0,60],"source":"If a native image exists for `assemblyFile`, it is not used."},{"content":"The assembly cannot be loaded as domain-neutral.","pos":[61,109]}]},{"pos":[3349,3415],"content":"The assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"The assembly is loaded with the evidence that the loader supplies.","pos":[0,66]}]}],"pos":[218798,222247],"yaml":true,"extradata":"MT"},{"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"pos":[0,72],"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"content":"The name or path of the file that contains the manifest of the assembly.","pos":[0,72]}]}],"pos":[222514,222587],"yaml":true},{"content":"The value of the computed hash code.","nodes":[{"pos":[0,36],"content":"The value of the computed hash code.","nodes":[{"content":"The value of the computed hash code.","pos":[0,36]}]}],"pos":[222652,222689],"yaml":true},{"content":"The hash algorithm used for hashing files and for generating the strong name.","nodes":[{"pos":[0,77],"content":"The hash algorithm used for hashing files and for generating the strong name.","nodes":[{"content":"The hash algorithm used for hashing files and for generating the strong name.","pos":[0,77]}]}],"pos":[222798,222876],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[222946,222967],"yaml":true},{"content":"<code>assemblyFile</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyFile</code> is `null`."}],"pos":[223132,223169],"yaml":true},{"content":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found, or the module you are trying to load does not specify a file name extension.","source":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension."}],"pos":[223277,223394],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[223494,223537],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.","nodes":[{"pos":[0,148],"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.","pos":[0,102],"source":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process."},{"content":"See the exception topic for more information.","pos":[103,148]}]},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,299],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.","source":"<code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded."}],"pos":[223643,223949],"yaml":true},{"content":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,127],"content":"A codebase that does not start with \"file://\" was specified without the required <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[224061,224189],"yaml":true},{"content":"The <code>assemblyFile</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,64],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>assemblyFile</code> parameter is an empty string (\"\")."}],"pos":[224283,224348],"yaml":true},{"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"pos":[0,53],"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"content":"The assembly name is longer than MAX_PATH characters.","pos":[0,53]}]}],"pos":[224454,224508],"yaml":true},{"content":"Loads an assembly given its file name or path.","nodes":[{"pos":[0,46],"content":"Loads an assembly given its file name or path.","nodes":[{"content":"Loads an assembly given its file name or path.","pos":[0,46]}]}],"pos":[225666,225713],"yaml":true},{"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is de-serialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \n  \n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.","nodes":[{"pos":[0,153],"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.","nodes":[{"content":"The <ph id=\"ph1\">`assemblyFile`</ph> parameter must refer to a URI without escape characters.","pos":[0,75],"source":"The `assemblyFile` parameter must refer to a URI without escape characters."},{"content":"This method supplies escape characters for all invalid characters in the URI.","pos":[76,153]}]},{"pos":[161,328],"content":"[!NOTE]\n File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","leadings":["","> "],"nodes":[{"content":" File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","pos":[8,165],"nodes":[{"content":"File transfer protocol (FTP) is not supported.","pos":[1,47]},{"content":"If the URI supplied for <ph id=\"ph1\">`assemblyFile`</ph> is an FTP address, the assembly is not loaded.","pos":[48,133],"source":" If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded."},{"content":"No exception is thrown.","pos":[134,157]}]}]},{"pos":[335,461],"content":"<ph id=\"ph1\">`assemblyFile`</ph> may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.","source":"`assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller."},{"pos":[468,554],"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","nodes":[{"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","pos":[0,86]}]},{"pos":[564,923],"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","nodes":[{"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","pos":[0,359],"nodes":[{"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <ph id=\"ph1\">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> of the application domain.","pos":[0,253],"source":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain."},{"content":"Most overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method load assemblies into this context.","pos":[254,359],"source":" Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context."}]}]},{"pos":[933,1246],"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","nodes":[{"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","pos":[0,313],"nodes":[{"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.","pos":[0,129]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> are examples of methods that load by path.","pos":[130,313],"source":" <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path."}]}]},{"pos":[1256,1491],"content":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.","nodes":[{"content":"The reflection-only context contains assemblies loaded with the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A&gt;</ph> methods; code in these contexts cannot be executed.","pos":[0,235],"source":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed."}]},{"pos":[1501,1815],"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","nodes":[{"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[0,314],"nodes":[{"content":"If the user generated or found the assembly, it is not in any context.","pos":[0,70]},{"content":"This applies to assemblies loaded using overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[71,314],"source":" This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk."}]}]},{"pos":[1822,2035],"content":"The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","nodes":[{"content":"The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","pos":[0,213]}]},{"pos":[2042,2197],"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","nodes":[{"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","pos":[0,155],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method has the following disadvantages.","pos":[0,89],"source":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages."},{"content":"Consider using <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> instead.","pos":[90,155],"source":" Consider using <xref:System.Reflection.Assembly.Load%2A> instead."}]}]},{"pos":[2207,2377],"content":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.","nodes":[{"content":"If an assembly with the same identity is already loaded, <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> returns the loaded assembly even if a different path was specified.","pos":[0,170],"source":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified."}]},{"pos":[2387,2631],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is de-serialized.","nodes":[{"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is de-serialized.","pos":[0,244],"nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.","pos":[0,194],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails."},{"content":"This can occur when an assembly is de-serialized.","pos":[195,244]}]}]},{"pos":[2641,2925],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.","nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and the probing path includes an assembly with the same identity but a different location, an <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.MissingMethodException&gt;</ph>, or other unexpected behavior can occur.","pos":[0,284],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur."}]},{"pos":[2935,3218],"content":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> demands <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.WebPermission&gt;</ph>, on the specified path.","pos":[0,283],"source":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path."}]},{"pos":[3228,3337],"content":"If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.","nodes":[{"content":"If a native image exists for <ph id=\"ph1\">`assemblyFile`</ph>, it is not used.","pos":[0,60],"source":"If a native image exists for `assemblyFile`, it is not used."},{"content":"The assembly cannot be loaded as domain neutral.","pos":[61,109]}]},{"pos":[3347,3412],"content":"In the .NET Framework version 1.0 and 1.1, policy is not applied.","nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, policy is not applied.","pos":[0,65]}]}],"pos":[225724,229170],"yaml":true,"extradata":"MT"},{"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"pos":[0,72],"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"content":"The name or path of the file that contains the manifest of the assembly.","pos":[0,72]}]}],"pos":[229868,229941],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[230011,230032],"yaml":true},{"content":"<code>assemblyFile</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyFile</code> is `null`."}],"pos":[230197,230234],"yaml":true},{"content":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found, or the module you are trying to load does not specify a filename extension.","source":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension."}],"pos":[230342,230458],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[230558,230601],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.","nodes":[{"pos":[0,148],"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.","pos":[0,102],"source":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process."},{"content":"See the exception topic for more information.","pos":[103,148]}]},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,302],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."}],"pos":[230707,231016],"yaml":true},{"content":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,127],"content":"A codebase that does not start with \"file://\" was specified without the required <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[231128,231256],"yaml":true},{"content":"The <code>assemblyFile</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,64],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>assemblyFile</code> parameter is an empty string (\"\")."}],"pos":[231350,231415],"yaml":true},{"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"pos":[0,53],"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"content":"The assembly name is longer than MAX_PATH characters.","pos":[0,53]}]}],"pos":[231521,231575],"yaml":true},{"content":"Loads an assembly given its file name or path and supplying security evidence.","nodes":[{"pos":[0,78],"content":"Loads an assembly given its file name or path and supplying security evidence.","nodes":[{"content":"Loads an assembly given its file name or path and supplying security evidence.","pos":[0,78]}]}],"pos":[232824,232903],"yaml":true},{"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \n  \n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"pos":[0,153],"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.","nodes":[{"content":"The <ph id=\"ph1\">`assemblyFile`</ph> parameter must refer to a URI without escape characters.","pos":[0,75],"source":"The `assemblyFile` parameter must refer to a URI without escape characters."},{"content":"This method supplies escape characters for all invalid characters in the URI.","pos":[76,153]}]},{"pos":[161,328],"content":"[!NOTE]\n File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","leadings":["","> "],"nodes":[{"content":" File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.","pos":[8,165],"nodes":[{"content":"File transfer protocol (FTP) is not supported.","pos":[1,47]},{"content":"If the URI supplied for <ph id=\"ph1\">`assemblyFile`</ph> is an FTP address, the assembly is not loaded.","pos":[48,133],"source":" If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded."},{"content":"No exception is thrown.","pos":[134,157]}]}]},{"pos":[335,462],"content":"<ph id=\"ph1\">`assemblyFile`</ph> may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller.","source":"`assemblyFile` may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller."},{"pos":[469,555],"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","nodes":[{"content":"Assemblies can be loaded into one of three contexts, or can be loaded without context:","pos":[0,86]}]},{"pos":[565,924],"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","nodes":[{"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.","pos":[0,359],"nodes":[{"content":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <ph id=\"ph1\">&lt;xref:System.AppDomainSetup.ApplicationBase%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.AppDomainSetup.PrivateBinPath%2A&gt;</ph> of the application domain.","pos":[0,253],"source":"The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain."},{"content":"Most overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method load assemblies into this context.","pos":[254,359],"source":" Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context."}]}]},{"pos":[934,1247],"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","nodes":[{"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.","pos":[0,313],"nodes":[{"content":"The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing.","pos":[0,129]},{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AppDomain.CreateInstanceFrom%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.AppDomain.ExecuteAssembly%2A&gt;</ph> are examples of methods that load by path.","pos":[130,313],"source":" <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path."}]}]},{"pos":[1257,1492],"content":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.","nodes":[{"content":"The reflection-only context contains assemblies loaded with the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A&gt;</ph> methods; code in these contexts cannot be executed.","pos":[0,235],"source":"The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed."}]},{"pos":[1502,1816],"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","nodes":[{"content":"If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[0,314],"nodes":[{"content":"If the user generated or found the assembly, it is not in any context.","pos":[0,70]},{"content":"This applies to assemblies loaded using overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.","pos":[71,314],"source":" This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk."}]}]},{"pos":[1823,2036],"content":"The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","nodes":[{"content":"The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.","pos":[0,213]}]},{"pos":[2043,2198],"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","nodes":[{"content":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.","pos":[0,155],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method has the following disadvantages.","pos":[0,89],"source":"The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages."},{"content":"Consider using <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> instead.","pos":[90,155],"source":" Consider using <xref:System.Reflection.Assembly.Load%2A> instead."}]}]},{"pos":[2208,2378],"content":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.","nodes":[{"content":"If an assembly with the same identity is already loaded, <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> returns the loaded assembly even if a different path was specified.","pos":[0,170],"source":"If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified."}]},{"pos":[2388,2631],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.","nodes":[{"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.","pos":[0,243],"nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails.","pos":[0,194],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails."},{"content":"This can occur when an assembly is deserialized.","pos":[195,243]}]}]},{"pos":[2641,2925],"content":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.","nodes":[{"content":"If an assembly is loaded with <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph>, and the probing path includes an assembly with the same identity but a different location, an <ph id=\"ph2\">&lt;xref:System.InvalidCastException&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.MissingMethodException&gt;</ph>, or other unexpected behavior can occur.","pos":[0,284],"source":"If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur."}]},{"pos":[2935,3218],"content":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> demands <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Net.WebPermission&gt;</ph>, on the specified path.","pos":[0,283],"source":"<xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path."}]},{"pos":[3228,3337],"content":"If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.","nodes":[{"content":"If a native image exists for <ph id=\"ph1\">`assemblyFile`</ph>, it is not used.","pos":[0,60],"source":"If a native image exists for `assemblyFile`, it is not used."},{"content":"The assembly cannot be loaded as domain neutral.","pos":[61,109]}]},{"pos":[3347,3412],"content":"In the .NET Framework version 1.0 and 1.1, policy is not applied.","nodes":[{"content":"In the .NET Framework version 1.0 and 1.1, policy is not applied.","pos":[0,65]}]},{"pos":[3419,3579],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[3589,3781],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with no <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, the assembly is loaded with the evidence that the loader supplies.","pos":[0,192],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies."}]},{"pos":[3791,4103],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.","nodes":[{"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.","pos":[0,312],"nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with an <ph id=\"ph2\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> parameter, pieces of evidence are merged.","pos":[0,156],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged."},{"content":"Pieces of evidence supplied as an argument to the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method supersede pieces of evidence supplied by the loader.","pos":[157,312],"source":" Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader."}]}]},{"pos":[4113,4454],"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","nodes":[{"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.","pos":[0,341],"nodes":[{"content":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph> because the equality and integrity of the different evidence specifications cannot be determined.","pos":[0,278],"source":"If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined."},{"content":"The evidence that first succeeds is the evidence that is used.","pos":[279,341]}]}]},{"pos":[4464,4757],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter to load a common object file format (COFF) image, evidence is combined.","pos":[0,165],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined."},{"content":"<ph id=\"ph1\">`Zone`</ph>, <ph id=\"ph2\">`Url`</ph> and <ph id=\"ph3\">`Site`</ph> are inherited from the calling assembly, and <ph id=\"ph4\">`Hash`</ph> and <ph id=\"ph5\">`StrongName`</ph> are taken from the COFF assembly.","pos":[166,293],"source":"`Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly."}]},{"pos":[4767,5037],"content":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.","nodes":[{"content":"When you use a <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method with a <ph id=\"ph2\">`Byte[]`</ph> parameter and <ph id=\"ph3\">&lt;xref:System.Security.Policy.Evidence&gt;</ph> to load a COFF image, only the supplied evidence is used.","pos":[0,194],"source":"When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used."},{"content":"Evidence of the calling assembly and evidence of the COFF image is ignored.","pos":[195,270]}]}],"pos":[232914,237997],"yaml":true,"extradata":"MT"},{"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"pos":[0,72],"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"content":"The name or path of the file that contains the manifest of the assembly.","pos":[0,72]}]}],"pos":[238261,238334],"yaml":true},{"content":"Evidence for loading the assembly.","nodes":[{"pos":[0,34],"content":"Evidence for loading the assembly.","nodes":[{"content":"Evidence for loading the assembly.","pos":[0,34]}]}],"pos":[238424,238459],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[238529,238550],"yaml":true},{"content":"<code>assemblyFile</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyFile</code> is `null`."}],"pos":[238715,238752],"yaml":true},{"content":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found, or the module you are trying to load does not specify a filename extension.","source":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension."}],"pos":[238860,238976],"yaml":true},{"content":"A file that was found could not be loaded.  \n  \n -or-  \n  \n The <code>securityEvidence</code> is not ambiguous and is determined to be invalid.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]},{"pos":[49,53],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[60,143],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">securityEvidence</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not ambiguous and is determined to be invalid.","source":"The <code>securityEvidence</code> is not ambiguous and is determined to be invalid."}],"pos":[239076,239226],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.","nodes":[{"pos":[0,148],"content":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process.","pos":[0,102],"source":"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process."},{"content":"See the exception topic for more information.","pos":[103,148]}]},{"pos":[155,159],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[166,302],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."}],"pos":[239332,239641],"yaml":true},{"content":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,127],"content":"A codebase that does not start with \"file://\" was specified without the required <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[239753,239881],"yaml":true},{"content":"The <code>assemblyFile</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,64],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>assemblyFile</code> parameter is an empty string (\"\")."}],"pos":[239975,240040],"yaml":true},{"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"pos":[0,53],"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"content":"The assembly name is longer than MAX_PATH characters.","pos":[0,53]}]}],"pos":[240146,240200],"yaml":true},{"content":"Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.","nodes":[{"pos":[0,146],"content":"Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.","nodes":[{"content":"Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.","pos":[0,146]}]}],"pos":[241413,241560],"yaml":true},{"content":"The name of the module. This string must correspond to a file name in this assembly's manifest.","nodes":[{"pos":[0,95],"content":"The name of the module. This string must correspond to a file name in this assembly's manifest.","nodes":[{"content":"The name of the module. This string must correspond to a file name in this assembly's manifest.","pos":[0,95],"nodes":[{"content":"The name of the module.","pos":[0,23]},{"content":"This string must correspond to a file name in this assembly's manifest.","pos":[24,95]}]}]}],"pos":[241747,241843],"yaml":true},{"content":"A byte array that is a COFF-based image containing an emitted module, or a resource.","nodes":[{"pos":[0,84],"content":"A byte array that is a COFF-based image containing an emitted module, or a resource.","nodes":[{"content":"A byte array that is a COFF-based image containing an emitted module, or a resource.","pos":[0,84]}]}],"pos":[241908,241993],"yaml":true},{"content":"The loaded module.","nodes":[{"pos":[0,18],"content":"The loaded module.","nodes":[{"content":"The loaded module.","pos":[0,18]}]}],"pos":[242061,242080],"yaml":true},{"content":"<code>moduleName</code> or <code>rawModule</code> is `null`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;moduleName&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;rawModule&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>moduleName</code> or <code>rawModule</code> is `null`."}],"pos":[242247,242308],"yaml":true},{"content":"<code>moduleName</code> does not match a file entry in this assembly's manifest.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;moduleName&lt;/code&gt;</ph> does not match a file entry in this assembly's manifest.","source":"<code>moduleName</code> does not match a file entry in this assembly's manifest."}],"pos":[242402,242483],"yaml":true},{"content":"<code>rawModule</code> is not a valid module.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;rawModule&lt;/code&gt;</ph> is not a valid module.","source":"<code>rawModule</code> is not a valid module."}],"pos":[242589,242635],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[242735,242778],"yaml":true},{"content":"Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.","nodes":[{"pos":[0,217],"content":"Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.","nodes":[{"content":"Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.","pos":[0,217],"nodes":[{"content":"Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.","pos":[0,146]},{"content":"The raw bytes representing the symbols for the module are also loaded.","pos":[147,217]}]}]}],"pos":[244080,244298],"yaml":true},{"content":"The name of the module. This string must correspond to a file name in this assembly's manifest.","nodes":[{"pos":[0,95],"content":"The name of the module. This string must correspond to a file name in this assembly's manifest.","nodes":[{"content":"The name of the module. This string must correspond to a file name in this assembly's manifest.","pos":[0,95],"nodes":[{"content":"The name of the module.","pos":[0,23]},{"content":"This string must correspond to a file name in this assembly's manifest.","pos":[24,95]}]}]}],"pos":[244516,244612],"yaml":true},{"content":"A byte array that is a COFF-based image containing an emitted module, or a resource.","nodes":[{"pos":[0,84],"content":"A byte array that is a COFF-based image containing an emitted module, or a resource.","nodes":[{"content":"A byte array that is a COFF-based image containing an emitted module, or a resource.","pos":[0,84]}]}],"pos":[244677,244762],"yaml":true},{"content":"A byte array containing the raw bytes representing the symbols for the module. Must be `null` if this is a resource file.","nodes":[{"pos":[0,121],"content":"A byte array containing the raw bytes representing the symbols for the module. Must be `null` if this is a resource file.","nodes":[{"content":"A byte array containing the raw bytes representing the symbols for the module.","pos":[0,78]},{"content":"Must be <ph id=\"ph1\">`null`</ph> if this is a resource file.","pos":[79,121],"source":" Must be `null` if this is a resource file."}]}],"pos":[244832,244954],"yaml":true},{"content":"The loaded module.","nodes":[{"pos":[0,18],"content":"The loaded module.","nodes":[{"content":"The loaded module.","pos":[0,18]}]}],"pos":[245022,245041],"yaml":true},{"content":"<code>moduleName</code> or <code>rawModule</code> is `null`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;moduleName&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;rawModule&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>moduleName</code> or <code>rawModule</code> is `null`."}],"pos":[245208,245269],"yaml":true},{"content":"<code>moduleName</code> does not match a file entry in this assembly's manifest.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;moduleName&lt;/code&gt;</ph> does not match a file entry in this assembly's manifest.","source":"<code>moduleName</code> does not match a file entry in this assembly's manifest."}],"pos":[245363,245444],"yaml":true},{"content":"<code>rawModule</code> is not a valid module.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;rawModule&lt;/code&gt;</ph> is not a valid module.","source":"<code>rawModule</code> is not a valid module."}],"pos":[245550,245596],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[245696,245739],"yaml":true},{"content":"Loads an assembly from the application directory or from the global assembly cache using a partial name.","nodes":[{"pos":[0,104],"content":"Loads an assembly from the application directory or from the global assembly cache using a partial name.","nodes":[{"content":"Loads an assembly from the application directory or from the global assembly cache using a partial name.","pos":[0,104]}]}],"pos":[246963,247068],"yaml":true},{"content":"> [!IMPORTANT]\n>  The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.  \n  \n Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.  \n  \n This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","nodes":[{"pos":[2,279],"content":"[!IMPORTANT]\n The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.","pos":[13,275],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29&gt;</ph> method is obsolete and has been retained for backward compatibility.","pos":[1,146],"source":" The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility."},{"content":"The non-obsolete alternative is <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName&gt;</ph>.","pos":[147,262],"source":" The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>."}]}]},{"pos":[286,617],"content":"Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.","nodes":[{"content":"Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.","pos":[0,331],"nodes":[{"content":"Applications that load assemblies with this method will be affected by upgrades of those assemblies.","pos":[0,100]},{"content":"Therefore, do not use this method; redesign the application to use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%28System.String%29&gt;</ph> method overload or the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFrom%28System.String%29&gt;</ph> method overload.","pos":[101,331],"source":" Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload."}]}]},{"pos":[624,847],"content":"This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","nodes":[{"content":"This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","pos":[0,223],"nodes":[{"content":"This method first calls <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.","pos":[0,66],"source":"This method first calls <xref:System.Reflection.Assembly.Load%2A>."},{"content":"If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","pos":[67,223]}]}]}],"pos":[247079,247934],"yaml":true,"extradata":"MT"},{"content":"The display name of the assembly.","nodes":[{"pos":[0,33],"content":"The display name of the assembly.","nodes":[{"content":"The display name of the assembly.","pos":[0,33]}]}],"pos":[248157,248191],"yaml":true},{"content":"The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.","nodes":[{"pos":[0,90],"content":"The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.","nodes":[{"content":"The loaded assembly.","pos":[0,20]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partialName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found, this method returns <ph id=\"ph2\">`null`</ph>.","pos":[21,90],"source":" If <code>partialName</code> is not found, this method returns `null`."}]}],"pos":[248261,248352],"yaml":true},{"content":"The <code>partialName</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partialName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>partialName</code> parameter is `null`."}],"pos":[248528,248578],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyFile</code> is not a valid assembly."},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,203],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partialName</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version."}],"pos":[248684,248894],"yaml":true},{"content":"Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.","nodes":[{"pos":[0,186],"content":"Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.","nodes":[{"content":"Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.","pos":[0,186],"nodes":[{"content":"Loads an assembly from the application directory or from the global assembly cache using a partial name.","pos":[0,104]},{"content":"The assembly is loaded into the domain of the caller using the supplied evidence.","pos":[105,186]}]}]}],"pos":[250258,250445],"yaml":true},{"content":"> [!IMPORTANT]\n>  The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.  \n  \n Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.  \n  \n Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method.  \n  \n This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","nodes":[{"pos":[2,313],"content":"[!IMPORTANT]\n The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.","pos":[13,309],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29&gt;</ph> method is obsolete and has been retained for backward compatibility.","pos":[1,180],"source":" The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility."},{"content":"The non-obsolete alternative is <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName&gt;</ph>.","pos":[181,296],"source":" The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>."}]}]},{"pos":[320,456],"content":"Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.","nodes":[{"content":"Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.","pos":[0,136]}]},{"pos":[463,744],"content":"Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method.","nodes":[{"content":"Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method.","pos":[0,281],"nodes":[{"content":"Applications that load assemblies with this method will be affected by upgrades of those assemblies.","pos":[0,100]},{"content":"Therefore, do not use this method; redesign the application to use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.LoadFrom%2A&gt;</ph> method.","pos":[101,281],"source":" Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method."}]}]},{"pos":[751,974],"content":"This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","nodes":[{"content":"This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","pos":[0,223],"nodes":[{"content":"This method first calls <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph>.","pos":[0,66],"source":"This method first calls <xref:System.Reflection.Assembly.Load%2A>."},{"content":"If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.","pos":[67,223]}]}]}],"pos":[250456,251440],"yaml":true,"extradata":"MT"},{"content":"The display name of the assembly.","nodes":[{"pos":[0,33],"content":"The display name of the assembly.","nodes":[{"content":"The display name of the assembly.","pos":[0,33]}]}],"pos":[251713,251747],"yaml":true},{"content":"Evidence for loading the assembly.","nodes":[{"pos":[0,34],"content":"Evidence for loading the assembly.","nodes":[{"content":"Evidence for loading the assembly.","pos":[0,34]}]}],"pos":[251837,251872],"yaml":true},{"content":"The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.","nodes":[{"pos":[0,90],"content":"The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.","nodes":[{"content":"The loaded assembly.","pos":[0,20]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partialName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found, this method returns <ph id=\"ph2\">`null`</ph>.","pos":[21,90],"source":" If <code>partialName</code> is not found, this method returns `null`."}]}],"pos":[251942,252033],"yaml":true},{"content":"An assembly or module was loaded twice with two different sets of evidence.","nodes":[{"pos":[0,75],"content":"An assembly or module was loaded twice with two different sets of evidence.","nodes":[{"content":"An assembly or module was loaded twice with two different sets of evidence.","pos":[0,75]}]}],"pos":[252207,252283],"yaml":true},{"content":"The <code>partialName</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partialName</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>partialName</code> parameter is `null`."}],"pos":[252385,252435],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyFile</code> is not a valid assembly."},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,203],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">partialName</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version."}],"pos":[252541,252751],"yaml":true},{"content":"Gets the full path or UNC location of the loaded file that contains the manifest.","nodes":[{"pos":[0,81],"content":"Gets the full path or UNC location of the loaded file that contains the manifest.","nodes":[{"content":"Gets the full path or UNC location of the loaded file that contains the manifest.","pos":[0,81]}]}],"pos":[253841,253923],"yaml":true},{"content":"To get the location before the file has been shadow-copied, use the <xref:System.Reflection.Assembly.CodeBase%2A> property.","nodes":[{"pos":[0,123],"content":"To get the location before the file has been shadow-copied, use the <xref:System.Reflection.Assembly.CodeBase%2A> property.","nodes":[{"content":"To get the location before the file has been shadow-copied, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.CodeBase%2A&gt;</ph> property.","pos":[0,123],"source":"To get the location before the file has been shadow-copied, use the <xref:System.Reflection.Assembly.CodeBase%2A> property."}]}],"pos":[253934,254058],"yaml":true,"extradata":"MT"},{"content":"The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <xref href=\"System.Reflection.Assembly.Load(System.Byte[])\"></xref> method overload, the value returned is an empty string (\"\").","nodes":[{"pos":[0,354],"content":"The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <xref href=\"System.Reflection.Assembly.Load(System.Byte[])\"></xref> method overload, the value returned is an empty string (\"\").","nodes":[{"content":"The location of the loaded file that contains the manifest.","pos":[0,59]},{"content":"If the loaded file was shadow-copied, the location is that of the file after being shadow-copied.","pos":[60,157]},{"content":"If the assembly is loaded from a byte array, such as when using the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly.Load(System.Byte[])\"&gt;&lt;/xref&gt;</ph> method overload, the value returned is an empty string (\"\").","pos":[158,354],"source":" If the assembly is loaded from a byte array, such as when using the <xref href=\"System.Reflection.Assembly.Load(System.Byte[])\"></xref> method overload, the value returned is an empty string (\"\")."}]}],"pos":[254712,255067],"yaml":true},{"content":"The current assembly is a dynamic assembly, represented by an <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object.","nodes":[{"pos":[0,129],"content":"The current assembly is a dynamic assembly, represented by an <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.AssemblyBuilder\"&gt;&lt;/xref&gt;</ph> object.","source":"The current assembly is a dynamic assembly, represented by an <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object."}],"pos":[255232,255362],"yaml":true},{"content":"Gets the module that contains the manifest for the current assembly.","nodes":[{"pos":[0,68],"content":"Gets the module that contains the manifest for the current assembly.","nodes":[{"content":"Gets the module that contains the manifest for the current assembly.","pos":[0,68]}]}],"pos":[256655,256724],"yaml":true},{"content":"The module that contains the manifest for the assembly.","nodes":[{"pos":[0,55],"content":"The module that contains the manifest for the assembly.","nodes":[{"content":"The module that contains the manifest for the assembly.","pos":[0,55]}]}],"pos":[256879,256935],"yaml":true},{"content":"Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.","nodes":[{"pos":[0,138],"content":"Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.","nodes":[{"content":"Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.","pos":[0,138]}]}],"pos":[258469,258608],"yaml":true},{"content":"This event gives the callback a chance to find and load the module itself and return it.","nodes":[{"pos":[0,88],"content":"This event gives the callback a chance to find and load the module itself and return it.","nodes":[{"content":"This event gives the callback a chance to find and load the module itself and return it.","pos":[0,88]}]}],"pos":[258619,258708],"yaml":true,"extradata":"MT"},{"content":"Gets a collection that contains the modules in this assembly.","nodes":[{"pos":[0,61],"content":"Gets a collection that contains the modules in this assembly.","nodes":[{"content":"Gets a collection that contains the modules in this assembly.","pos":[0,61]}]}],"pos":[260025,260087],"yaml":true},{"content":"A collection that contains the modules in this assembly.","nodes":[{"pos":[0,56],"content":"A collection that contains the modules in this assembly.","nodes":[{"content":"A collection that contains the modules in this assembly.","pos":[0,56]}]}],"pos":[260315,260372],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.Assembly\"></xref> objects are equal.","nodes":[{"pos":[0,88],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> objects are equal.","source":"Indicates whether two <xref href=\"System.Reflection.Assembly\"></xref> objects are equal."}],"pos":[262115,262204],"yaml":true},{"content":"The assembly to compare to <code>right</code>.","nodes":[{"pos":[0,46],"content":"The assembly to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">right</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The assembly to compare to <code>right</code>."}],"pos":[262416,262463],"yaml":true},{"content":"The assembly to compare to <code>left</code>.","nodes":[{"pos":[0,45],"content":"The assembly to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The assembly to compare to <code>left</code>."}],"pos":[262537,262583],"yaml":true},{"content":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`."}],"pos":[262641,262723],"yaml":true},{"content":"Indicates whether two <xref href=\"System.Reflection.Assembly\"></xref> objects are not equal.","nodes":[{"pos":[0,92],"content":"Indicates whether two <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> objects are not equal.","source":"Indicates whether two <xref href=\"System.Reflection.Assembly\"></xref> objects are not equal."}],"pos":[264138,264231],"yaml":true},{"content":"The assembly to compare to <code>right</code>.","nodes":[{"pos":[0,46],"content":"The assembly to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">right</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The assembly to compare to <code>right</code>."}],"pos":[264445,264492],"yaml":true},{"content":"The assembly to compare to <code>left</code>.","nodes":[{"pos":[0,45],"content":"The assembly to compare to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The assembly to compare to <code>left</code>."}],"pos":[264566,264612],"yaml":true},{"content":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">left</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not equal to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">right</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`."}],"pos":[264670,264756],"yaml":true},{"content":"Gets the grant set of the current assembly.","nodes":[{"pos":[0,43],"content":"Gets the grant set of the current assembly.","nodes":[{"content":"Gets the grant set of the current assembly.","pos":[0,43]}]}],"pos":[265913,265957],"yaml":true},{"content":"<xref:System.Security.PermissionSet> objects can contain sensitive information such as paths. Therefore, full trust is required to access these objects.","nodes":[{"pos":[0,152],"content":"<xref:System.Security.PermissionSet> objects can contain sensitive information such as paths. Therefore, full trust is required to access these objects.","nodes":[{"content":"<xref:System.Security.PermissionSet> objects can contain sensitive information such as paths. Therefore, full trust is required to access these objects.","pos":[0,152],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.PermissionSet&gt;</ph> objects can contain sensitive information such as paths.","pos":[0,93],"source":"<xref:System.Security.PermissionSet> objects can contain sensitive information such as paths."},{"content":"Therefore, full trust is required to access these objects.","pos":[94,152]}]}]}],"pos":[265968,266121],"yaml":true,"extradata":"MT"},{"content":"The grant set of the current assembly.","nodes":[{"pos":[0,38],"content":"The grant set of the current assembly.","nodes":[{"content":"The grant set of the current assembly.","pos":[0,38]}]}],"pos":[266285,266324],"yaml":true},{"content":"Gets a <xref href=\"System.Boolean\"></xref> value indicating whether this assembly was loaded into the reflection-only context.","nodes":[{"pos":[0,126],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> value indicating whether this assembly was loaded into the reflection-only context.","source":"Gets a <xref href=\"System.Boolean\"></xref> value indicating whether this assembly was loaded into the reflection-only context."}],"pos":[267364,267491],"yaml":true},{"content":"If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly. To execute code, the assembly must be loaded into the execution context.","nodes":[{"pos":[0,252],"content":"If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly. To execute code, the assembly must be loaded into the execution context.","nodes":[{"content":"If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly. To execute code, the assembly must be loaded into the execution context.","pos":[0,252],"nodes":[{"content":"If an assembly has been loaded into the reflection-only context, using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A&gt;</ph> method, you cannot execute code in the assembly.","pos":[0,179],"source":"If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly."},{"content":"To execute code, the assembly must be loaded into the execution context.","pos":[180,252]}]}]}],"pos":[267502,267755],"yaml":true,"extradata":"MT"},{"content":"`true` if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, `false`.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">`true`</ph> if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, `false`."}],"pos":[267947,268072],"yaml":true},{"content":"Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.","nodes":[{"pos":[0,194],"content":"Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.","nodes":[{"content":"Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.","pos":[0,194],"nodes":[{"content":"Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly.","pos":[0,102]},{"content":"The assembly is loaded into the reflection-only context of the caller's application domain.","pos":[103,194]}]}]}],"pos":[269437,269632],"yaml":true},{"content":"You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.  \n  \n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","nodes":[{"pos":[0,222],"content":"You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.","nodes":[{"content":"You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.","pos":[0,222],"nodes":[{"content":"You cannot execute code from an assembly loaded into the reflection-only context.","pos":[0,81]},{"content":"To execute code, the assembly must be loaded into the execution context as well, using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.","pos":[82,222],"source":" To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method."}]}]},{"pos":[229,395],"content":"The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","nodes":[{"content":"The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","pos":[0,166],"nodes":[{"content":"The reflection-only context is no different from other contexts.","pos":[0,64]},{"content":"Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","pos":[65,166]}]}]}],"pos":[269643,270043],"yaml":true,"extradata":"MT"},{"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"pos":[0,71],"content":"A byte array that is a COFF-based image containing an emitted assembly.","nodes":[{"content":"A byte array that is a COFF-based image containing an emitted assembly.","pos":[0,71]}]}],"pos":[270231,270303],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[270373,270394],"yaml":true},{"content":"<code>rawAssembly</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>rawAssembly</code> is `null`."}],"pos":[270569,270605],"yaml":true},{"content":"<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>rawAssembly</code> is not a valid assembly."},{"pos":[56,60],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[67,202],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">rawAssembly</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."}],"pos":[270711,270920],"yaml":true},{"content":"<code>rawAssembly</code> cannot be loaded.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;rawAssembly&lt;/code&gt;</ph> cannot be loaded.","source":"<code>rawAssembly</code> cannot be loaded."}],"pos":[271020,271063],"yaml":true},{"content":"Loads an assembly into the reflection-only context, given its display name.","nodes":[{"pos":[0,75],"content":"Loads an assembly into the reflection-only context, given its display name.","nodes":[{"content":"Loads an assembly into the reflection-only context, given its display name.","pos":[0,75]}]}],"pos":[272281,272357],"yaml":true},{"content":"Dependencies are not automatically loaded into the reflection-only context.  \n  \n You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n> [!NOTE]\n>  Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file. To preserve the .reloc address, specify `/fixed:no` when you are linking.  \n  \n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","nodes":[{"pos":[0,75],"content":"Dependencies are not automatically loaded into the reflection-only context.","nodes":[{"content":"Dependencies are not automatically loaded into the reflection-only context.","pos":[0,75]}]},{"pos":[82,304],"content":"You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.","nodes":[{"content":"You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.","pos":[0,222],"nodes":[{"content":"You cannot execute code from an assembly loaded into the reflection-only context.","pos":[0,81]},{"content":"To execute code, the assembly must be loaded into the execution context as well, using the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.Load%2A&gt;</ph> method.","pos":[82,222],"source":" To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method."}]}]},{"pos":[311,471],"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:","pos":[0,160],"nodes":[{"content":"Whether certain permissions are granted or not granted to an assembly is based on evidence.","pos":[0,91]},{"content":"The rules for assembly and security evidence merging are as follows:","pos":[92,160]}]}]},{"pos":[479,791],"content":"[!NOTE]\n Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file. To preserve the .reloc address, specify `/fixed:no` when you are linking.","leadings":["","> "],"nodes":[{"content":" Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file. To preserve the .reloc address, specify `/fixed:no` when you are linking.","pos":[8,310],"nodes":[{"content":"Reflecting on executable files compiled in C++ might throw a <ph id=\"ph1\">&lt;xref:System.IO.FileLoadException&gt;</ph>.","pos":[1,97],"source":" Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>."},{"content":"This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file.","pos":[98,228]},{"content":"To preserve the .reloc address, specify <ph id=\"ph1\">`/fixed:no`</ph> when you are linking.","pos":[229,302],"source":" To preserve the .reloc address, specify `/fixed:no` when you are linking."}]}]},{"pos":[798,964],"content":"The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","nodes":[{"content":"The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","pos":[0,166],"nodes":[{"content":"The reflection-only context is no different from other contexts.","pos":[0,64]},{"content":"Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","pos":[65,166]}]}]}],"pos":[272368,273344],"yaml":true,"extradata":"MT"},{"content":"The display name of the assembly, as returned by the <xref href=\"System.Reflection.AssemblyName.FullName\"></xref> property.","nodes":[{"pos":[0,123],"content":"The display name of the assembly, as returned by the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.AssemblyName.FullName\"&gt;&lt;/xref&gt;</ph> property.","source":"The display name of the assembly, as returned by the <xref href=\"System.Reflection.AssemblyName.FullName\"></xref> property."}],"pos":[273538,273662],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[273732,273753],"yaml":true},{"content":"<code>assemblyString</code> is `null`.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyString</code> is `null`."}],"pos":[273928,273967],"yaml":true},{"content":"<code>assemblyString</code> is an empty string (\"\").","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is an empty string (\"\").","source":"<code>assemblyString</code> is an empty string (\"\")."}],"pos":[274061,274114],"yaml":true},{"content":"<code>assemblyString</code> is not found.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not found.","source":"<code>assemblyString</code> is not found."}],"pos":[274222,274264],"yaml":true},{"content":"<code>assemblyString</code> is found, but cannot be loaded.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is found, but cannot be loaded.","source":"<code>assemblyString</code> is found, but cannot be loaded."}],"pos":[274364,274424],"yaml":true},{"content":"<code>assemblyString</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyString&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyString</code> is not a valid assembly."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,208],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyString</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version."}],"pos":[274530,274745],"yaml":true},{"content":"Loads an assembly into the reflection-only context, given its path.","nodes":[{"pos":[0,67],"content":"Loads an assembly into the reflection-only context, given its path.","nodes":[{"content":"Loads an assembly into the reflection-only context, given its path.","pos":[0,67]}]}],"pos":[275987,276055],"yaml":true},{"content":"Dependencies are not automatically loaded into the reflection-only context. To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler.  \n  \n You cannot execute code from an assembly that has been loaded into the reflection-only context. To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method.  \n  \n The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n The path specified for `assemblyFile` is relative to the current directory. The assembly is loaded into the domain of the caller.  \n  \n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","nodes":[{"pos":[0,228],"content":"Dependencies are not automatically loaded into the reflection-only context. To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler.","nodes":[{"content":"Dependencies are not automatically loaded into the reflection-only context. To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler.","pos":[0,228],"nodes":[{"content":"Dependencies are not automatically loaded into the reflection-only context.","pos":[0,75]},{"content":"To automatically load dependencies, handle the <ph id=\"ph1\">&lt;xref:System.AppDomain.ReflectionOnlyAssemblyResolve&gt;</ph> event and load the dependency in the event handler.","pos":[76,228],"source":" To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler."}]}]},{"pos":[235,432],"content":"You cannot execute code from an assembly that has been loaded into the reflection-only context. To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method.","nodes":[{"content":"You cannot execute code from an assembly that has been loaded into the reflection-only context. To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method.","pos":[0,197],"nodes":[{"content":"You cannot execute code from an assembly that has been loaded into the reflection-only context.","pos":[0,95]},{"content":"To execute the code, load the assembly with the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFile%2A&gt;</ph> method.","pos":[96,197],"source":" To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method."}]}]},{"pos":[439,592],"content":"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.","nodes":[{"content":"The <ph id=\"ph1\">`assemblyFile`</ph> parameter must refer to a URI without escape characters.","pos":[0,75],"source":"The `assemblyFile` parameter must refer to a URI without escape characters."},{"content":"This method supplies escape characters for all invalid characters in the URI.","pos":[76,153]}]},{"pos":[599,728],"content":"The path specified for `assemblyFile` is relative to the current directory. The assembly is loaded into the domain of the caller.","nodes":[{"content":"The path specified for <ph id=\"ph1\">`assemblyFile`</ph> is relative to the current directory.","pos":[0,75],"source":"The path specified for `assemblyFile` is relative to the current directory."},{"content":"The assembly is loaded into the domain of the caller.","pos":[76,129]}]},{"pos":[735,901],"content":"The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","nodes":[{"content":"The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","pos":[0,166],"nodes":[{"content":"The reflection-only context is no different from other contexts.","pos":[0,64]},{"content":"Assemblies that are loaded into the context can be unloaded only by unloading the application domain.","pos":[65,166]}]}]}],"pos":[276066,276978],"yaml":true,"extradata":"MT"},{"content":"The path of the file that contains the manifest of the assembly.","nodes":[{"pos":[0,64],"content":"The path of the file that contains the manifest of the assembly.","nodes":[{"content":"The path of the file that contains the manifest of the assembly.","pos":[0,64]}]}],"pos":[277172,277237],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[277307,277328],"yaml":true},{"content":"<code>assemblyFile</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyFile</code> is `null`."}],"pos":[277507,277544],"yaml":true},{"content":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found, or the module you are trying to load does not specify a file name extension.","source":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension."}],"pos":[277652,277769],"yaml":true},{"content":"<code>assemblyFile</code> is found, but could not be loaded.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is found, but could not be loaded.","source":"<code>assemblyFile</code> is found, but could not be loaded."}],"pos":[277869,277930],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyFile</code> is not a valid assembly."},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,204],"content":"Version 2.0 or later of the common language runtime is currently loaded and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> was compiled with a later version.","source":"Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."}],"pos":[278036,278247],"yaml":true},{"content":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,127],"content":"A codebase that does not start with \"file://\" was specified without the required <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[278359,278487],"yaml":true},{"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"pos":[0,53],"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"content":"The assembly name is longer than MAX_PATH characters.","pos":[0,53]}]}],"pos":[278593,278647],"yaml":true},{"content":"<code>assemblyFile</code> is an empty string (\"\").","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is an empty string (\"\").","source":"<code>assemblyFile</code> is an empty string (\"\")."}],"pos":[278741,278792],"yaml":true},{"content":"Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.","nodes":[{"pos":[0,117],"content":"Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.","nodes":[{"content":"Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.","pos":[0,117]}]}],"pos":[279925,280043],"yaml":true},{"content":"By default, assemblies that you compile with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] have  transparency, although you can explicitly make them  instead. Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.  \n  \n See [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,273],"content":"By default, assemblies that you compile with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] have  transparency, although you can explicitly make them  instead. Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.","nodes":[{"content":"By default, assemblies that you compile with the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph> have  transparency, although you can explicitly make them  instead.","pos":[0,172],"source":"By default, assemblies that you compile with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] have  transparency, although you can explicitly make them  instead."},{"content":"Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.","pos":[173,273]}]},{"pos":[280,350],"content":"See <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","source":"See [Security Changes](~/docs/framework/security/security-changes.md)."}],"pos":[280054,280409],"yaml":true,"extradata":"MT"},{"content":"The security rule set that the CLR enforces for this assembly.","nodes":[{"pos":[0,62],"content":"The security rule set that the CLR enforces for this assembly.","nodes":[{"content":"The security rule set that the CLR enforces for this assembly.","pos":[0,62]}]}],"pos":[280579,280642],"yaml":true},{"content":"Returns the full name of the assembly, also known as the display name.","nodes":[{"pos":[0,70],"content":"Returns the full name of the assembly, also known as the display name.","nodes":[{"content":"Returns the full name of the assembly, also known as the display name.","pos":[0,70]}]}],"pos":[281832,281903],"yaml":true},{"content":"The full name of the assembly, or the class name if the full name of the assembly cannot be determined.","nodes":[{"pos":[0,103],"content":"The full name of the assembly, or the class name if the full name of the assembly cannot be determined.","nodes":[{"content":"The full name of the assembly, or the class name if the full name of the assembly cannot be determined.","pos":[0,103]}]}],"pos":[282038,282142],"yaml":true},{"content":"Loads an assembly into the load-from context, bypassing some security checks.","nodes":[{"pos":[0,77],"content":"Loads an assembly into the load-from context, bypassing some security checks.","nodes":[{"content":"Loads an assembly into the load-from context, bypassing some security checks.","pos":[0,77]}]}],"pos":[283746,283824],"yaml":true},{"content":"Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet). Before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], such assemblies were automatically loaded into a sandboxed application domain. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], they are loaded with full trust.  \n  \n As an alternative to using this method, you can apply the [\\&lt;NetFx40_LegacySecurityPolicy\\&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) in your application configuration file. This causes the common language runtime to revert to the security policy of the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].  \n  \n> [!CAUTION]\n>  If you use either of these solutions, you must be certain that it is safe to load `assemblyFile` with full trust.  \n  \n For a discussion of load contexts, including the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.","nodes":[{"pos":[0,453],"content":"Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet). Before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], such assemblies were automatically loaded into a sandboxed application domain. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], they are loaded with full trust.","nodes":[{"content":"Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet).","pos":[0,196]},{"content":"Before the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, such assemblies were automatically loaded into a sandboxed application domain.","pos":[197,343],"source":" Before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], such assemblies were automatically loaded into a sandboxed application domain."},{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]</ph>, they are loaded with full trust.","pos":[344,453],"source":" Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], they are loaded with full trust."}]},{"pos":[460,836],"content":"As an alternative to using this method, you can apply the [\\&lt;NetFx40_LegacySecurityPolicy\\&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) in your application configuration file. This causes the common language runtime to revert to the security policy of the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].","nodes":[{"content":"As an alternative to using this method, you can apply the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">\\&amp;</ph>lt;NetFx40_LegacySecurityPolicy<ph id=\"ph2\">\\&amp;</ph>gt; Element<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md)</ept> in your application configuration file.","pos":[0,239],"source":"As an alternative to using this method, you can apply the [\\&lt;NetFx40_LegacySecurityPolicy\\&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) in your application configuration file."},{"content":"This causes the common language runtime to revert to the security policy of the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph>.","pos":[240,376],"source":" This causes the common language runtime to revert to the security policy of the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]."}]},{"pos":[844,971],"content":"[!CAUTION]\n If you use either of these solutions, you must be certain that it is safe to load `assemblyFile` with full trust.","leadings":["","> "],"nodes":[{"content":"If you use either of these solutions, you must be certain that it is safe to load <ph id=\"ph1\">`assemblyFile`</ph> with full trust.","pos":[12,125],"source":" If you use either of these solutions, you must be certain that it is safe to load `assemblyFile` with full trust."}]},{"pos":[978,1132],"content":"For a discussion of load contexts, including the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.","nodes":[{"content":"For a discussion of load contexts, including the load-from context, see the <ph id=\"ph1\">&lt;xref:System.Reflection.Assembly.LoadFrom%28System.String%29&gt;</ph> method overload.","pos":[0,154],"source":"For a discussion of load contexts, including the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload."}]}],"pos":[283835,284979],"yaml":true,"extradata":"MT"},{"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"pos":[0,72],"content":"The name or path of the file that contains the manifest of the assembly.","nodes":[{"content":"The name or path of the file that contains the manifest of the assembly.","pos":[0,72]}]}],"pos":[285165,285238],"yaml":true},{"content":"The loaded assembly.","nodes":[{"pos":[0,20],"content":"The loaded assembly.","nodes":[{"content":"The loaded assembly.","pos":[0,20]}]}],"pos":[285308,285329],"yaml":true},{"content":"<code>assemblyFile</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assemblyFile</code> is `null`."}],"pos":[285500,285537],"yaml":true},{"content":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.","nodes":[{"pos":[0,115],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not found, or the module you are trying to load does not specify a filename extension.","source":"<code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension."}],"pos":[285645,285761],"yaml":true},{"content":"A file that was found could not be loaded.","nodes":[{"pos":[0,42],"content":"A file that was found could not be loaded.","nodes":[{"content":"A file that was found could not be loaded.","pos":[0,42]}]}],"pos":[285861,285904],"yaml":true},{"content":"<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.","nodes":[{"pos":[0,50],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> is not a valid assembly.","source":"<code>assemblyFile</code> is not a valid assembly."},{"pos":[57,61],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[68,201],"content":"<ph id=\"ph1\">&lt;code&gt;assemblyFile&lt;/code&gt;</ph> was compiled with a later version of the common language runtime than the version that is currently loaded.","source":"<code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded."}],"pos":[286010,286218],"yaml":true},{"content":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.","nodes":[{"pos":[0,127],"content":"A codebase that does not start with \"file://\" was specified without the required <ph id=\"ph1\">&lt;xref href=\"System.Net.WebPermission\"&gt;&lt;/xref&gt;</ph>.","source":"A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>."}],"pos":[286330,286458],"yaml":true},{"content":"The <code>assemblyFile</code> parameter is an empty string (\"\").","nodes":[{"pos":[0,64],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">assemblyFile</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an empty string (\"\").","source":"The <code>assemblyFile</code> parameter is an empty string (\"\")."}],"pos":[286552,286617],"yaml":true},{"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"pos":[0,53],"content":"The assembly name is longer than MAX_PATH characters.","nodes":[{"content":"The assembly name is longer than MAX_PATH characters.","pos":[0,53]}]}],"pos":[286723,286777],"yaml":true},{"content":"Returns the type of the current instance.","nodes":[{"pos":[0,41],"content":"Returns the type of the current instance.","nodes":[{"content":"Returns the type of the current instance.","pos":[0,41]}]}],"pos":[292131,292173],"yaml":true},{"content":"An object that represents the <xref href=\"System.Reflection.Assembly\"></xref> type.","nodes":[{"pos":[0,83],"content":"An object that represents the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> type.","source":"An object that represents the <xref href=\"System.Reflection.Assembly\"></xref> type."}],"pos":[292297,292381],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Assembly\n  commentId: T:System.Reflection.Assembly\n  id: Assembly\n  children:\n  - System.Reflection.Assembly.#ctor\n  - System.Reflection.Assembly.CodeBase\n  - System.Reflection.Assembly.CreateInstance(System.String)\n  - System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)\n  - System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])\n  - System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)\n  - System.Reflection.Assembly.CustomAttributes\n  - System.Reflection.Assembly.DefinedTypes\n  - System.Reflection.Assembly.EntryPoint\n  - System.Reflection.Assembly.Equals(System.Object)\n  - System.Reflection.Assembly.EscapedCodeBase\n  - System.Reflection.Assembly.Evidence\n  - System.Reflection.Assembly.ExportedTypes\n  - System.Reflection.Assembly.FullName\n  - System.Reflection.Assembly.GetAssembly(System.Type)\n  - System.Reflection.Assembly.GetCallingAssembly\n  - System.Reflection.Assembly.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Assembly.GetCustomAttributesData\n  - System.Reflection.Assembly.GetEntryAssembly\n  - System.Reflection.Assembly.GetExecutingAssembly\n  - System.Reflection.Assembly.GetExportedTypes\n  - System.Reflection.Assembly.GetFile(System.String)\n  - System.Reflection.Assembly.GetFiles\n  - System.Reflection.Assembly.GetFiles(System.Boolean)\n  - System.Reflection.Assembly.GetHashCode\n  - System.Reflection.Assembly.GetLoadedModules\n  - System.Reflection.Assembly.GetLoadedModules(System.Boolean)\n  - System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  - System.Reflection.Assembly.GetManifestResourceNames\n  - System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)\n  - System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  - System.Reflection.Assembly.GetModule(System.String)\n  - System.Reflection.Assembly.GetModules\n  - System.Reflection.Assembly.GetModules(System.Boolean)\n  - System.Reflection.Assembly.GetName\n  - System.Reflection.Assembly.GetName(System.Boolean)\n  - System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Reflection.Assembly.GetReferencedAssemblies\n  - System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)\n  - System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)\n  - System.Reflection.Assembly.GetType(System.String,System.Boolean)\n  - System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)\n  - System.Reflection.Assembly.GetType(System.String)\n  - System.Reflection.Assembly.GetTypes\n  - System.Reflection.Assembly.GlobalAssemblyCache\n  - System.Reflection.Assembly.HostContext\n  - System.Reflection.Assembly.ImageRuntimeVersion\n  - System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Assembly.IsDynamic\n  - System.Reflection.Assembly.IsFullyTrusted\n  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)\n  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)\n  - System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)\n  - System.Reflection.Assembly.Load(System.Byte[])\n  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[])\n  - System.Reflection.Assembly.Load(System.String)\n  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)\n  - System.Reflection.Assembly.LoadFile(System.String)\n  - System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)\n  - System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  - System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  - System.Reflection.Assembly.LoadFrom(System.String)\n  - System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)\n  - System.Reflection.Assembly.LoadModule(System.String,System.Byte[])\n  - System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])\n  - System.Reflection.Assembly.LoadWithPartialName(System.String)\n  - System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)\n  - System.Reflection.Assembly.Location\n  - System.Reflection.Assembly.ManifestModule\n  - System.Reflection.Assembly.ModuleResolve\n  - System.Reflection.Assembly.Modules\n  - System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)\n  - System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)\n  - System.Reflection.Assembly.PermissionSet\n  - System.Reflection.Assembly.ReflectionOnly\n  - System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])\n  - System.Reflection.Assembly.ReflectionOnlyLoad(System.String)\n  - System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)\n  - System.Reflection.Assembly.SecurityRuleSet\n  - System.Reflection.Assembly.ToString\n  - System.Reflection.Assembly.UnsafeLoadFrom(System.String)\n  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType\n  langs:\n  - csharp\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n  type: Class\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.\n  remarks: \"Use the <xref:System.Reflection.Assembly> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.  \\n  \\n To get an array of <xref:System.Reflection.Assembly> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref:System.AppDomain.GetAssemblies%2A?displayProperty=fullName> method.  \\n  \\n To load assemblies dynamically, the <xref:System.Reflection.Assembly> class provides the following static methods (`Shared` methods in Visual Basic). Assemblies are loaded into the application domain where the load operation occurs.  \\n  \\n-   The recommended way to load assemblies is to use the <xref:System.AppDomain.Load%2A> method, which identifies the assembly to be loaded by its display name (for example, \\\"System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\\\"). The search for the assembly follows the rules described in [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).  \\n  \\n-   The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.  \\n  \\n-   The <xref:System.Reflection.Assembly.LoadFile%2A> and <xref:System.Reflection.Assembly.LoadFrom%2A> methods are provided for rare scenarios in which an assembly must be identified by path.  \\n  \\n To get an <xref:System.Reflection.Assembly> object for the currently executing assembly, use the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method.  \\n  \\n Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly. For example:  \\n  \\n-   The <xref:System.Reflection.Assembly.GetName%2A> method returns an <xref:System.Reflection.AssemblyName> object that provides access to the parts of the assembly display name.  \\n  \\n-   The <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method lists the attributes applied to the assembly.  \\n  \\n-   The <xref:System.Reflection.Assembly.GetFiles%2A> method provides access to the files in the assembly manifest.  \\n  \\n-   The <xref:System.Reflection.Assembly.GetManifestResourceNames%2A> method provides the names of the resources in the assembly manifest.  \\n  \\n The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly. The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly. The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly. The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly.  \\n  \\n For more information on assemblies, see the \\\"Application Domains and Assemblies\\\" section in the [Application Domains](~/docs/framework/app-domains/application-domains.md) topic.\"\n  example:\n  - \"The following code example shows how to obtain the currently executing assembly, create an instance of a type contained in that assembly, and invoke one of the type's methods with late binding. For this purpose, the code example defines a class named `Example`, with a method named `SampleMethod`. The constructor of the class accepts an integer, which is used to compute the return value of the method.  \\n  \\n The code example also demonstrates the use of the <xref:System.Reflection.Assembly.GetName%2A> method to obtain an <xref:System.Reflection.AssemblyName> object that can be used to parse the full name of the assembly. The example displays the version number of the assembly, the <xref:System.Reflection.Assembly.CodeBase%2A> property, and the <xref:System.Reflection.Assembly.EntryPoint%2A> property.  \\n  \\n [!code-cpp[AssemblyClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyClass/cpp/source.cpp#1)]\\n [!code-csharp[AssemblyClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyClass/cs/source.cs#1)]\\n [!code-vb[AssemblyClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyClass/vb/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Assembly, System.Runtime.Serialization.ISerializable, System.Security.IEvidenceFactory\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Reflection.Emit.AssemblyBuilder\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  - System.Runtime.InteropServices._Assembly\n  - System.Runtime.Serialization.ISerializable\n  - System.Security.IEvidenceFactory\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  extensionMethods:\n  - System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)\n  - System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)\n  - System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.#ctor\n  commentId: M:System.Reflection.Assembly.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Assembly()\n  nameWithType: Assembly.Assembly()\n  fullName: Assembly.Assembly()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.Assembly\"></xref> class.\n  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Assembly> objects.\n  syntax:\n    content: protected Assembly ();\n    parameters: []\n  overload: System.Reflection.Assembly.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.CodeBase\n  commentId: P:System.Reflection.Assembly.CodeBase\n  id: CodeBase\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: CodeBase\n  nameWithType: Assembly.CodeBase\n  fullName: Assembly.CodeBase\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the location of the assembly as specified originally, for example, in an <xref href=\"System.Reflection.AssemblyName\"></xref> object.\n  remarks: \"To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=fullName> property instead.  \\n  \\n If the assembly was loaded as a byte array, using an overload of the <xref:System.Reflection.Assembly.Load%2A> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly.\"\n  example:\n  - \"The following example uses the <xref:System.Reflection.Assembly.CodeBase%2A> property.  \\n  \\n [!code-cpp[System.Reflection.Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/codebase1.cpp#1)]\\n [!code-csharp[System.Reflection.Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/codebase1.cs#1)]\\n [!code-vb[System.Reflection.Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/codebase1.vb#1)]\"\n  syntax:\n    content: public virtual string CodeBase { get; }\n    return:\n      type: System.String\n      description: The location of the assembly as specified originally.\n  overload: System.Reflection.Assembly.CodeBase*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.CreateInstance(System.String)\n  commentId: M:System.Reflection.Assembly.CreateInstance(System.String)\n  id: CreateInstance(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: CreateInstance(String)\n  nameWithType: Assembly.CreateInstance(String)\n  fullName: Assembly.CreateInstance(String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.\n  remarks: \"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:  \\n  \\n-   You haven't specified the fully qualified name of the type.  \\n  \\n-   You've specified the fully qualified type name, but its case doesn’t match the case of the type's <xref:System.Type.FullName%2A?displayProperty=fullName> property. For a case-insensitive comparison of `typeName` with the type's full name, call the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specify `true` for the `ignoreCase` argument.  \\n  \\n-   The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.\"\n  example:\n  - \"The following example defines a `Person` class and calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it.  \\n  \\n [!code-csharp[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance1.cs#1)]\\n [!code-vb[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance1.vb#1)]\"\n  syntax:\n    content: public object CreateInstance (string typeName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The <xref href=\"System.Type.FullName\"></xref> of the type to locate.\n    return:\n      type: System.Object\n      description: An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`.\n  overload: System.Reflection.Assembly.CreateInstance*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>typeName</code> is an empty string (\\\"\\\") or a string beginning with a null character.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>typeName</code> is `null`.\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: No matching constructor was found.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>typeName</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)\n  commentId: M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)\n  id: CreateInstance(System.String,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: CreateInstance(String, Boolean)\n  nameWithType: Assembly.CreateInstance(String, Boolean)\n  fullName: Assembly.CreateInstance(String, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.\n  remarks: \"If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:  \\n  \\n-   You haven't specified the fully qualified name of the type.  \\n  \\n-   The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance.\"\n  example:\n  - \"The following example defines a `Person` class. It then calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it, but because the casing of the `typeName` argument doesn’t match that of the type's <xref:System.Type.FullName%2A> property, the method returns `null`. When the example passes the same string to the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specifies that the comparison should be case-insensitive, the `Person` class is found, and a `Person` object is successfully instantiated.  \\n  \\n [!code-csharp[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance2.cs#2)]\\n [!code-vb[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance2.vb#2)]\"\n  syntax:\n    content: public object CreateInstance (string typeName, bool ignoreCase);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The <xref href=\"System.Type.FullName\"></xref> of the type to locate.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore the case of the type name; otherwise, `false`.'\n    return:\n      type: System.Object\n      description: An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href=\"System.Reflection.BindingFlags\"></xref> set to `Public` or `Instance`.\n  overload: System.Reflection.Assembly.CreateInstance*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>typeName</code> is an empty string (\\\"\\\") or a string beginning with a null character.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context.\"\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: No matching constructor was found.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>typeName</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>typeName</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])\n  commentId: M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])\n  id: CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])\n  nameWithType: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])\n  fullName: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.\n  syntax:\n    content: public virtual object CreateInstance (string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The <xref href=\"System.Type.FullName\"></xref> of the type to locate.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore the case of the type name; otherwise, `false`.'\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: args\n      type: System.Object[]\n      description: An array that contains the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <code>args</code> must be an empty array or `null`.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)\n    - id: activationAttributes\n      type: System.Object[]\n      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single <xref href=\"System.Runtime.Remoting.Activation.UrlAttribute\"></xref> object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.\n    return:\n      type: System.Object\n      description: An instance of the specified type, or `null` if <code>typeName</code> is not found. The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.\n  overload: System.Reflection.Assembly.CreateInstance*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>typeName</code> is an empty string (\\\"\\\") or a string beginning with a null character.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>typeName</code> is `null`.\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: No matching constructor was found.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: A non-empty activation attributes array is passed to a type that does not inherit from <xref href=\"System.MarshalByRefObject\"></xref>.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>typeName</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>typeName</code> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)\n  commentId: M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)\n  id: CreateQualifiedName(System.String,System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: CreateQualifiedName(String, String)\n  nameWithType: Assembly.CreateQualifiedName(String, String)\n  fullName: Assembly.CreateQualifiedName(String, String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Creates the name of a type qualified by the display name of its assembly.\n  remarks: \"The format of the returned string is:  \\n  \\n \\\\<FullTypeName>, \\\\<AssemblyDisplayName>  \\n  \\n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \\n  \\n To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.  For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public static string CreateQualifiedName (string assemblyName, string typeName);\n    parameters:\n    - id: assemblyName\n      type: System.String\n      description: The display name of an assembly.\n    - id: typeName\n      type: System.String\n      description: The full name of a type.\n    return:\n      type: System.String\n      description: The full name of the type qualified by the display name of the assembly.\n  overload: System.Reflection.Assembly.CreateQualifiedName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.CustomAttributes\n  commentId: P:System.Reflection.Assembly.CustomAttributes\n  id: CustomAttributes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: CustomAttributes\n  nameWithType: Assembly.CustomAttributes\n  fullName: Assembly.CustomAttributes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a collection that contains this assembly's custom attributes.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n      description: A collection that contains this assembly's custom attributes.\n  overload: System.Reflection.Assembly.CustomAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.DefinedTypes\n  commentId: P:System.Reflection.Assembly.DefinedTypes\n  id: DefinedTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: DefinedTypes\n  nameWithType: Assembly.DefinedTypes\n  fullName: Assembly.DefinedTypes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a collection of the types defined in this assembly.\n  remarks: \"The <xref:System.Reflection.Assembly.DefinedTypes%2A> property is comparable to the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method, except that the <xref:System.Reflection.Assembly.DefinedTypes%2A> property returns a [collection](../Topic/IEnumerable\\\\(T\\\\)%20Interface.md) of <xref:System.Reflection.TypeInfo> objects, and the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method returns an array of <xref:System.Type> objects.  \\n  \\n The returned array includes nested types.\"\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> DefinedTypes { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n      description: A collection of the types defined in this assembly.\n  overload: System.Reflection.Assembly.DefinedTypes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.EntryPoint\n  commentId: P:System.Reflection.Assembly.EntryPoint\n  id: EntryPoint\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: EntryPoint\n  nameWithType: Assembly.EntryPoint\n  fullName: Assembly.EntryPoint\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the entry point of this assembly.\n  syntax:\n    content: public virtual System.Reflection.MethodInfo EntryPoint { get; }\n    return:\n      type: System.Reflection.MethodInfo\n      description: An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), `null` is returned.\n  overload: System.Reflection.Assembly.EntryPoint*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Equals(System.Object)\n  commentId: M:System.Reflection.Assembly.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Assembly.Equals(Object)\n  fullName: Assembly.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Determines whether this assembly and the specified object are equal.\n  remarks: The <xref:System.Reflection.Assembly.Equals%2A> method performs a test for reference equality to determine whether the current instance and `o` are equal.\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: The object to compare with this instance.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>o</code> is equal to this instance; otherwise, `false`.'\n  overload: System.Reflection.Assembly.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.EscapedCodeBase\n  commentId: P:System.Reflection.Assembly.EscapedCodeBase\n  id: EscapedCodeBase\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: EscapedCodeBase\n  nameWithType: Assembly.EscapedCodeBase\n  fullName: Assembly.EscapedCodeBase\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the URI, including escape characters, that represents the codebase.\n  syntax:\n    content: public virtual string EscapedCodeBase { get; }\n    return:\n      type: System.String\n      description: A URI with escape characters.\n  overload: System.Reflection.Assembly.EscapedCodeBase*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Evidence\n  commentId: P:System.Reflection.Assembly.Evidence\n  id: Evidence\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Evidence\n  nameWithType: Assembly.Evidence\n  fullName: Assembly.Evidence\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets the evidence for this assembly.\n  remarks: Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.\n  syntax:\n    content: public virtual System.Security.Policy.Evidence Evidence { get; }\n    return:\n      type: System.Security.Policy.Evidence\n      description: The evidence for this assembly.\n  overload: System.Reflection.Assembly.Evidence*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ExportedTypes\n  commentId: P:System.Reflection.Assembly.ExportedTypes\n  id: ExportedTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ExportedTypes\n  nameWithType: Assembly.ExportedTypes\n  fullName: Assembly.ExportedTypes\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a collection of the public types defined in this assembly that are visible outside the assembly.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<Type> ExportedTypes { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Type}\n      description: A collection of the public types defined in this assembly that are visible outside the assembly.\n  overload: System.Reflection.Assembly.ExportedTypes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.FullName\n  commentId: P:System.Reflection.Assembly.FullName\n  id: FullName\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: FullName\n  nameWithType: Assembly.FullName\n  fullName: Assembly.FullName\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the display name of the assembly.\n  remarks: \"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \\n  \\n> [!NOTE]\\n>  Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.  \\n  \\n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example retrieves the display name of the currently executing assembly, and the display name of the assembly that contains the <xref:System.Int32> type (`int` in C#, `Integer` in Visual Basic).  \\n  \\n [!code-cpp[Assembly.FullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.FullName/CPP/Example.cpp#1)]\\n [!code-csharp[Assembly.FullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.FullName/CS/Example.cs#1)]\\n [!code-vb[Assembly.FullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.FullName/VB/Example.vb#1)]\"\n  syntax:\n    content: public virtual string FullName { get; }\n    return:\n      type: System.String\n      description: The display name of the assembly.\n  overload: System.Reflection.Assembly.FullName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetAssembly(System.Type)\n  commentId: M:System.Reflection.Assembly.GetAssembly(System.Type)\n  id: GetAssembly(System.Type)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetAssembly(Type)\n  nameWithType: Assembly.GetAssembly(Type)\n  fullName: Assembly.GetAssembly(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the currently loaded assembly in which the specified type is defined.\n  remarks: \"Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=fullName> property. However, the <xref:System.Type.Assembly?displayProperty=fullName> property typically offers superior performance.  \\n  \\n In order to call this method, you must have a <xref:System.Type> object, which means that the assembly in which the class is defined must already be loaded.\"\n  example:\n  - \"The following example retrieves the assembly that contains the <xref:System.Int32> type and displays its name and file location.  \\n  \\n [!code-cpp[System.Reflection.Assembly#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/GetAssembly1.cpp#12)]\\n [!code-csharp[System.Reflection.Assembly#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/GetAssembly1.cs#12)]\\n [!code-vb[System.Reflection.Assembly#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/GetAssembly1.vb#12)]\"\n  syntax:\n    content: public static System.Reflection.Assembly GetAssembly (Type type);\n    parameters:\n    - id: type\n      type: System.Type\n      description: An object representing a type in the assembly that will be returned.\n    return:\n      type: System.Reflection.Assembly\n      description: The assembly in which the specified type is defined.\n  overload: System.Reflection.Assembly.GetAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>type</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetCallingAssembly\n  commentId: M:System.Reflection.Assembly.GetCallingAssembly\n  id: GetCallingAssembly\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetCallingAssembly()\n  nameWithType: Assembly.GetCallingAssembly()\n  fullName: Assembly.GetCallingAssembly()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the <xref href=\"System.Reflection.Assembly\"></xref> of the method that invoked the currently executing method.\n  remarks: \"If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A>may differ unexpectedly. For example, consider the following methods and assemblies:  \\n  \\n-   Method `M1` in assembly `A1` calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.  \\n  \\n-   Method `M2` in assembly `A2` calls `M1`.  \\n  \\n-   Method `M3` in assembly `A3` calls `M2`.  \\n  \\n When `M1` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M1` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`. Similarly, when `M2` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M2` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.  \\n  \\n This effect also occurs when `M1` executes as a tail call from `M2`, or when `M2` executes as a tail call from `M3`. You can prevent the JIT compiler from inlining the method that calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>, by applying the <xref:System.Runtime.CompilerServices.MethodImplAttribute> attribute with the <xref:System.Runtime.CompilerServices.MethodImplOptions?displayProperty=fullName> flag, but there is no similar mechanism for preventing tail calls.\"\n  example:\n  - \"The following example gets the calling assembly of the current method.  \\n  \\n [!code-cpp[System.Reflection.Assembly#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/getcallingassembly1.cpp#4)]\\n [!code-csharp[System.Reflection.Assembly#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/getcallingassembly1.cs#4)]\\n [!code-vb[System.Reflection.Assembly#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/getcallingassembly1.vb#4)]\"\n  syntax:\n    content: public static System.Reflection.Assembly GetCallingAssembly ();\n    parameters: []\n    return:\n      type: System.Reflection.Assembly\n      description: The `Assembly` object of the method that invoked the currently executing method.\n  overload: System.Reflection.Assembly.GetCallingAssembly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: Assembly.GetCustomAttributes(Boolean)\n  fullName: Assembly.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets all the custom attributes for this assembly.\n  remarks: \"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.  \\n  \\n A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  \\n  \\n The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  \\n  \\n|Pseudo-Attribute|Metadata Bits|Reflection Accessor|  \\n|-----------------------|-------------------|-------------------------|  \\n|DllImportAttribute|CorPInvokeMap<br /><br /> DLL name|No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.|  \\n|GuidAttribute|Stored as a real custom attribute.|Accessed as a real custom attribute.|  \\n|ComImportAttribute|CorTypeAttr.tdImport|Type.Attributes.Import|  \\n|SerializableAttribute|CorTypeAttr.tdSerializable|Type.Attributes.Serializable|  \\n|NonSerializedAttribute|CorFieldAttr.fdNotSerialized|FieldInfo.Attributes.NotSerialized|  \\n|MethodImplAttribute|CorMethodImpl|MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()|  \\n|MarshalAsAttribute|Various bits.|No accessor.|  \\n|PreserveSigAttribute|CorMethodImpl.miOLE|MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE|  \\n|InAttribute|CorParamAttr.pdIn|ParameterInfo.Attributes.In|  \\n|OutAttribute|CorParamAttr.pdOut|ParameterInfo.Attributes.Out|  \\n|StructLayoutAttribute|CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.|Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.|  \\n|FieldOffsetAttribute|Field offset.|No accessor.|  \\n|AssemblyLoadAttribute|CorAssemblyFlags|No accessor or enumerator.|\"\n  syntax:\n    content: public virtual object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: This argument is ignored for objects of type <xref href=\"System.Reflection.Assembly\"></xref>.\n    return:\n      type: System.Object[]\n      description: An array that contains the custom attributes for this assembly.\n  overload: System.Reflection.Assembly.GetCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: Assembly.GetCustomAttributes(Type, Boolean)\n  fullName: Assembly.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the custom attributes for this assembly as specified by type.\n  remarks: \"This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.  \\n  \\n A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  \\n  \\n The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  \\n  \\n|Pseudo-Attribute|Metadata Bits|Reflection Accessor|  \\n|-----------------------|-------------------|-------------------------|  \\n|DllImportAttribute|CorPInvokeMap<br /><br /> DLL name|No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.|  \\n|GuidAttribute|Stored as a real custom attribute.|Accessed as a real custom attribute.|  \\n|ComImportAttribute|CorTypeAttr.tdImport|Type.Attributes.Import|  \\n|SerializableAttribute|CorTypeAttr.tdSerializable|Type.Attributes.Serializable|  \\n|NonSerializedAttribute|CorFieldAttr.fdNotSerialized|FieldInfo.Attributes.NotSerialized|  \\n|MethodImplAttribute|CorMethodImpl|MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()|  \\n|MarshalAsAttribute|Various bits.|No accessor.|  \\n|PreserveSigAttribute|CorMethodImpl.miOLE|MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE|  \\n|InAttribute|CorParamAttr.pdIn|ParameterInfo.Attributes.In|  \\n|OutAttribute|CorParamAttr.pdOut|ParameterInfo.Attributes.Out|  \\n|StructLayoutAttribute|CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.|Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.|  \\n|FieldOffsetAttribute|Field offset.|No accessor.|  \\n|AssemblyLoadAttribute|CorAssemblyFlags|No accessor or enumerator.|\"\n  syntax:\n    content: public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The type for which the custom attributes are to be returned.\n    - id: inherit\n      type: System.Boolean\n      description: This argument is ignored for objects of type <xref href=\"System.Reflection.Assembly\"></xref>.\n    return:\n      type: System.Object[]\n      description: An array that contains the custom attributes for this assembly as specified by <code>attributeType</code>.\n  overload: System.Reflection.Assembly.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributeType</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>attributeType</code> is not a runtime type.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetCustomAttributesData\n  commentId: M:System.Reflection.Assembly.GetCustomAttributesData\n  id: GetCustomAttributesData\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetCustomAttributesData()\n  nameWithType: Assembly.GetCustomAttributesData()\n  fullName: Assembly.GetCustomAttributesData()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns information about the attributes that have been applied to the current <xref href=\"System.Reflection.Assembly\"></xref>, expressed as <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects.\n  remarks: Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.\n  syntax:\n    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n      description: A generic list of <xref href=\"System.Reflection.CustomAttributeData\"></xref> objects representing data about the attributes that have been applied to the current assembly.\n  overload: System.Reflection.Assembly.GetCustomAttributesData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetEntryAssembly\n  commentId: M:System.Reflection.Assembly.GetEntryAssembly\n  id: GetEntryAssembly\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetEntryAssembly()\n  nameWithType: Assembly.GetEntryAssembly()\n  fullName: Assembly.GetEntryAssembly()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>.\n  remarks: The <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method can return `null` when a managed assembly has been loaded from an unmanaged application. For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.\n  syntax:\n    content: public static System.Reflection.Assembly GetEntryAssembly ();\n    parameters: []\n    return:\n      type: System.Reflection.Assembly\n      description: The assembly that is the process executable in the default application domain, or the first executable that was executed by <xref href=\"System.AppDomain.ExecuteAssembly(System.String)\"></xref>. Can return `null` when called from unmanaged code.\n  overload: System.Reflection.Assembly.GetEntryAssembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetExecutingAssembly\n  commentId: M:System.Reflection.Assembly.GetExecutingAssembly\n  id: GetExecutingAssembly\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetExecutingAssembly()\n  nameWithType: Assembly.GetExecutingAssembly()\n  fullName: Assembly.GetExecutingAssembly()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the assembly that contains the code that is currently executing.\n  remarks: \"For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing. The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=fullName> property of a type found in the assembly, as the following example illustrates.  \\n  \\n [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/assembly1.cs#1)]\\n [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/assembly1.vb#1)]  \\n  \\n To get the assembly that contains the method that called the currently executing code, use <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.\"\n  example:\n  - \"The following example uses the <xref:System.Type.Assembly%2A?displayProperty=fullName> property to get the currently executing assembly based on a type contained in that assembly. It also calls the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method to show that it returns an <xref:System.Reflection.Assembly> object that represents the same assembly.  \\n  \\n [!code-cpp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cpp/getexecutingassembly1.cpp#5)]\\n [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/getexecutingassembly1.cs#5)]\\n [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/getexecutingassembly1.vb#5)]\"\n  syntax:\n    content: public static System.Reflection.Assembly GetExecutingAssembly ();\n    parameters: []\n    return:\n      type: System.Reflection.Assembly\n      description: The assembly that contains the code that is currently executing.\n  overload: System.Reflection.Assembly.GetExecutingAssembly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetExportedTypes\n  commentId: M:System.Reflection.Assembly.GetExportedTypes\n  id: GetExportedTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetExportedTypes()\n  nameWithType: Assembly.GetExportedTypes()\n  fullName: Assembly.GetExportedTypes()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the public types defined in this assembly that are visible outside the assembly.\n  remarks: The only types visible outside an assembly are public types and public types nested within other public types.\n  example:\n  - \"The following code sample defines a number of classes with various access levels, and calls <xref:System.Reflection.Assembly.GetExportedTypes%2A> to display the ones that are visible from outside the assembly.  \\n  \\n [!code-cpp[Assembly.GetExportedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.GetExportedTypes/CPP/source.cpp#1)]\\n [!code-csharp[Assembly.GetExportedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.GetExportedTypes/CS/source.cs#1)]\\n [!code-vb[Assembly.GetExportedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.GetExportedTypes/VB/source.vb#1)]\"\n  syntax:\n    content: public virtual Type[] GetExportedTypes ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array that represents the types defined in this assembly that are visible outside the assembly.\n  overload: System.Reflection.Assembly.GetExportedTypes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The assembly is a dynamic assembly.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetFile(System.String)\n  commentId: M:System.Reflection.Assembly.GetFile(System.String)\n  id: GetFile(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetFile(String)\n  nameWithType: Assembly.GetFile(String)\n  fullName: Assembly.GetFile(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.IO.FileStream\"></xref> for the specified file in the file table of the manifest of this assembly.\n  remarks: \"This method works on both public and private resource files.  \\n  \\n The `name` should not include the path to the file.\"\n  syntax:\n    content: public virtual System.IO.FileStream GetFile (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the specified file. Do not include the path to the file.\n    return:\n      type: System.IO.FileStream\n      description: A stream that contains the specified file, or `null` if the file is not found.\n  overload: System.Reflection.Assembly.GetFile*\n  exceptions:\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>name</code> parameter is an empty string (\"\").\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>name</code> was not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>name</code> is not a valid assembly.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetFiles\n  commentId: M:System.Reflection.Assembly.GetFiles\n  id: GetFiles\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetFiles()\n  nameWithType: Assembly.GetFiles()\n  fullName: Assembly.GetFiles()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the files in the file table of an assembly manifest.\n  remarks: \"This method works on public and private resource files.  \\n  \\n This overload is equivalent to calling the <xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29> overload and specifying `false`.\"\n  syntax:\n    content: public virtual System.IO.FileStream[] GetFiles ();\n    parameters: []\n    return:\n      type: System.IO.FileStream[]\n      description: An array of streams that contain the files.\n  overload: System.Reflection.Assembly.GetFiles*\n  exceptions:\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: A file was not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: A file was not a valid assembly.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetFiles(System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetFiles(System.Boolean)\n  id: GetFiles(System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetFiles(Boolean)\n  nameWithType: Assembly.GetFiles(Boolean)\n  fullName: Assembly.GetFiles(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.\n  remarks: This method works on public and private resource files.\n  syntax:\n    content: public virtual System.IO.FileStream[] GetFiles (bool getResourceModules);\n    parameters:\n    - id: getResourceModules\n      type: System.Boolean\n      description: '`true` to include resource modules; otherwise, `false`.'\n    return:\n      type: System.IO.FileStream[]\n      description: An array of streams that contain the files.\n  overload: System.Reflection.Assembly.GetFiles*\n  exceptions:\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: A file was not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: A file was not a valid assembly.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetHashCode\n  commentId: M:System.Reflection.Assembly.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Assembly.GetHashCode()\n  fullName: Assembly.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Reflection.Assembly.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetLoadedModules\n  commentId: M:System.Reflection.Assembly.GetLoadedModules\n  id: GetLoadedModules\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetLoadedModules()\n  nameWithType: Assembly.GetLoadedModules()\n  fullName: Assembly.GetLoadedModules()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets all the loaded modules that are part of this assembly.\n  syntax:\n    content: public System.Reflection.Module[] GetLoadedModules ();\n    parameters: []\n    return:\n      type: System.Reflection.Module[]\n      description: An array of modules.\n  overload: System.Reflection.Assembly.GetLoadedModules*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetLoadedModules(System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)\n  id: GetLoadedModules(System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetLoadedModules(Boolean)\n  nameWithType: Assembly.GetLoadedModules(Boolean)\n  fullName: Assembly.GetLoadedModules(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.\n  syntax:\n    content: public virtual System.Reflection.Module[] GetLoadedModules (bool getResourceModules);\n    parameters:\n    - id: getResourceModules\n      type: System.Boolean\n      description: '`true` to include resource modules; otherwise, `false`.'\n    return:\n      type: System.Reflection.Module[]\n      description: An array of modules.\n  overload: System.Reflection.Assembly.GetLoadedModules*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  commentId: M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  id: GetManifestResourceInfo(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetManifestResourceInfo(String)\n  nameWithType: Assembly.GetManifestResourceInfo(String)\n  fullName: Assembly.GetManifestResourceInfo(String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns information about how the given resource has been persisted.\n  remarks: Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.\n  syntax:\n    content: public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);\n    parameters:\n    - id: resourceName\n      type: System.String\n      description: The case-sensitive name of the resource.\n    return:\n      type: System.Reflection.ManifestResourceInfo\n      description: An object that is populated with information about the resource's topology, or `null` if the resource is not found.\n  overload: System.Reflection.Assembly.GetManifestResourceInfo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>resourceName</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>resourceName</code> parameter is an empty string (\"\").\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetManifestResourceNames\n  commentId: M:System.Reflection.Assembly.GetManifestResourceNames\n  id: GetManifestResourceNames\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetManifestResourceNames()\n  nameWithType: Assembly.GetManifestResourceNames()\n  fullName: Assembly.GetManifestResourceNames()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the names of all the resources in this assembly.\n  remarks: \"You can use each resource name in the array returned by this method as follows:  \\n  \\n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> method to get additional information about the resource.  \\n  \\n-   If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=fullName> constructor to instantiate the resource manager.  \\n  \\n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.  \\n  \\n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.  \\n  \\n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.\"\n  syntax:\n    content: public virtual string[] GetManifestResourceNames ();\n    parameters: []\n    return:\n      type: System.String[]\n      description: An array that contains the names of all the resources.\n  overload: System.Reflection.Assembly.GetManifestResourceNames*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)\n  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)\n  id: GetManifestResourceStream(System.Type,System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetManifestResourceStream(Type, String)\n  nameWithType: Assembly.GetManifestResourceStream(Type, String)\n  fullName: Assembly.GetManifestResourceStream(Type, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.\n  remarks: \"For example, if the full name specified for `type` is \\\"MyNameSpace.MyClasses\\\" and `name` is \\\"Net\\\", this method overload searches for a resource named \\\"MyNameSpace.Net\\\".  \\n  \\n A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.  \\n  \\n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.  \\n  \\n> [!NOTE]\\n>  This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \\n  \\n If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.\"\n  syntax:\n    content: public virtual System.IO.Stream GetManifestResourceStream (Type type, string name);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The type whose namespace is used to scope the manifest resource name.\n    - id: name\n      type: System.String\n      description: The case-sensitive name of the manifest resource being requested.\n    return:\n      type: System.IO.Stream\n      description: The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller.\n  overload: System.Reflection.Assembly.GetManifestResourceStream*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>name</code> parameter is an empty string (\"\").\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>name</code> was not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>name</code> is not a valid assembly.\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Resource length is greater than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  id: GetManifestResourceStream(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetManifestResourceStream(String)\n  nameWithType: Assembly.GetManifestResourceStream(String)\n  fullName: Assembly.GetManifestResourceStream(String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the specified manifest resource from this assembly.\n  remarks: \"A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.  \\n  \\n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.  \\n  \\n> [!NOTE]\\n>  This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \\n  \\n If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>.\"\n  syntax:\n    content: public virtual System.IO.Stream GetManifestResourceStream (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The case-sensitive name of the manifest resource being requested.\n    return:\n      type: System.IO.Stream\n      description: The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller.\n  overload: System.Reflection.Assembly.GetManifestResourceStream*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>name</code> parameter is an empty string (\"\").\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.IO.IOException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n A file that was found could not be loaded.\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>name</code> was not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>name</code> is not a valid assembly.\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Resource length is greater than <xref href=\"System.Int64.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetModule(System.String)\n  commentId: M:System.Reflection.Assembly.GetModule(System.String)\n  id: GetModule(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetModule(String)\n  nameWithType: Assembly.GetModule(String)\n  fullName: Assembly.GetModule(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the specified module in this assembly.\n  remarks: \"This method works on file names.  \\n  \\n Classes in the `Reflection.Emit` namespace emit the scope name for a dynamic module. The scope name can be determined by the <xref:System.Reflection.Module.ScopeName%2A?displayProperty=fullName> property. Pass the kind of module you want to `Assembly.GetModule`. For example, if you want the module that contains the assembly manifest, pass the scope name of the module to `GetModule`. Otherwise, pass the file name of the module. Assemblies loaded by one of the `Load` methods that have a byte[] parameter have only one module, and that is the manifest module. Always seek these modules using the scope name.  \\n  \\n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling `Module.GetType` on the module containing the manifest will not initiate a search of the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public virtual System.Reflection.Module GetModule (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the module being requested.\n    return:\n      type: System.Reflection.Module\n      description: The module being requested, or `null` if the module is not found.\n  overload: System.Reflection.Assembly.GetModule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>name</code> parameter is an empty string (\"\").\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>name</code> was not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>name</code> is not a valid assembly.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetModules\n  commentId: M:System.Reflection.Assembly.GetModules\n  id: GetModules\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetModules()\n  nameWithType: Assembly.GetModules()\n  fullName: Assembly.GetModules()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets all the modules that are part of this assembly.\n  remarks: \"This method works on public and private resource files.  \\n  \\n> [!NOTE]\\n>  Modules must be emitted with file name extensions.\"\n  example:\n  - \"The following example displays the name of the module in the returned array that contains the assembly manifest.  \\n  \\n [!code-cpp[Classic Assembly.GetModules Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Assembly.GetModules Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CS/source.cs#1)]\\n [!code-vb[Classic Assembly.GetModules Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Module[] GetModules ();\n    parameters: []\n    return:\n      type: System.Reflection.Module[]\n      description: An array of modules.\n  overload: System.Reflection.Assembly.GetModules*\n  exceptions:\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The module to be loaded does not specify a file name extension.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetModules(System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetModules(System.Boolean)\n  id: GetModules(System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetModules(Boolean)\n  nameWithType: Assembly.GetModules(Boolean)\n  fullName: Assembly.GetModules(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets all the modules that are part of this assembly, specifying whether to include resource modules.\n  remarks: \"This method works on public and private resource files.  \\n  \\n> [!NOTE]\\n>  Modules must be emitted with file name extensions.\"\n  syntax:\n    content: public virtual System.Reflection.Module[] GetModules (bool getResourceModules);\n    parameters:\n    - id: getResourceModules\n      type: System.Boolean\n      description: '`true` to include resource modules; otherwise, `false`.'\n    return:\n      type: System.Reflection.Module[]\n      description: An array of modules.\n  overload: System.Reflection.Assembly.GetModules*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetName\n  commentId: M:System.Reflection.Assembly.GetName\n  id: GetName\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetName()\n  nameWithType: Assembly.GetName()\n  fullName: Assembly.GetName()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets an <xref href=\"System.Reflection.AssemblyName\"></xref> for this assembly.\n  syntax:\n    content: public virtual System.Reflection.AssemblyName GetName ();\n    parameters: []\n    return:\n      type: System.Reflection.AssemblyName\n      description: An object that contains the fully parsed display name for this assembly.\n  overload: System.Reflection.Assembly.GetName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetName(System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetName(System.Boolean)\n  id: GetName(System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetName(Boolean)\n  nameWithType: Assembly.GetName(Boolean)\n  fullName: Assembly.GetName(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets an <xref href=\"System.Reflection.AssemblyName\"></xref> for this assembly, setting the codebase as specified by <code>copiedName</code>.\n  syntax:\n    content: public virtual System.Reflection.AssemblyName GetName (bool copiedName);\n    parameters:\n    - id: copiedName\n      type: System.Boolean\n      description: '`true` to set the <xref href=\"System.Reflection.Assembly.CodeBase\"></xref> to the location of the assembly after it was shadow copied; `false` to set <xref href=\"System.Reflection.Assembly.CodeBase\"></xref> to the original location.'\n    return:\n      type: System.Reflection.AssemblyName\n      description: An object that contains the fully parsed display name for this assembly.\n  overload: System.Reflection.Assembly.GetName*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Assembly.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Assembly.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets serialization information with all of the data needed to reinstantiate this assembly.\n  syntax:\n    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object to be populated with serialization information.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination context of the serialization.\n  overload: System.Reflection.Assembly.GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetReferencedAssemblies\n  commentId: M:System.Reflection.Assembly.GetReferencedAssemblies\n  id: GetReferencedAssemblies\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetReferencedAssemblies()\n  nameWithType: Assembly.GetReferencedAssemblies()\n  fullName: Assembly.GetReferencedAssemblies()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the <xref href=\"System.Reflection.AssemblyName\"></xref> objects for all the assemblies referenced by this assembly.\n  remarks: >-\n    > [!IMPORTANT]\n\n    >  Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> enumeration. In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> in this situation.\n  example:\n  - \"The following code example demonstrates calling the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A> method. This code example is part of a larger example provided for the <xref:System.Reflection.Assembly> class.  \\n  \\n [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]\\n [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]\\n [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]\"\n  syntax:\n    content: public virtual System.Reflection.AssemblyName[] GetReferencedAssemblies ();\n    parameters: []\n    return:\n      type: System.Reflection.AssemblyName[]\n      description: An array that contains the fully parsed display names of all the assemblies referenced by this assembly.\n  overload: System.Reflection.Assembly.GetReferencedAssemblies*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)\n  commentId: M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)\n  id: GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetSatelliteAssembly(CultureInfo, Version)\n  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo, Version)\n  fullName: Assembly.GetSatelliteAssembly(CultureInfo, Version)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the specified version of the satellite assembly for the specified culture.\n  remarks: \"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  \\n  \\n Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.  \\n  \\n If `version` is `null`, the current assembly version is used if both the resource and main assemblies are signed.\"\n  syntax:\n    content: public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The specified culture.\n    - id: version\n      type: System.Version\n      description: The version of the satellite assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The specified satellite assembly.\n  overload: System.Reflection.Assembly.GetSatelliteAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: The satellite assembly with a matching file name was found, but the `CultureInfo` or the version did not match the one specified.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The assembly cannot be found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: The satellite assembly is not a valid assembly.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)\n  commentId: M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)\n  id: GetSatelliteAssembly(System.Globalization.CultureInfo)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetSatelliteAssembly(CultureInfo)\n  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo)\n  fullName: Assembly.GetSatelliteAssembly(CultureInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the satellite assembly for the specified culture.\n  remarks: \"Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  \\n  \\n Call this method to use your current assembly version.\"\n  syntax:\n    content: public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The specified culture.\n    return:\n      type: System.Reflection.Assembly\n      description: The specified satellite assembly.\n  overload: System.Reflection.Assembly.GetSatelliteAssembly*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>culture</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The assembly cannot be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: The satellite assembly with a matching file name was found, but the `CultureInfo` did not match the one specified.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: The satellite assembly is not a valid assembly.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean)\n  id: GetType(System.String,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetType(String, Boolean)\n  nameWithType: Assembly.GetType(String, Boolean)\n  fullName: Assembly.GetType(String, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.\n  remarks: \"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \\n  \\n> [!NOTE]\\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \\n  \\n The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.\"\n  syntax:\n    content: public virtual Type GetType (string name, bool throwOnError);\n    parameters:\n    - id: name\n      type: System.String\n      description: The full name of the type.\n    - id: throwOnError\n      type: System.Boolean\n      description: '`true` to throw an exception if the type is not found; `false` to return `null`.'\n    return:\n      type: System.Type\n      description: An object that represents the specified class.\n  overload: System.Reflection.Assembly.GetType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>name</code> is invalid.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> exceeds 1024 characters.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: <code>throwOnError</code> is `true`, and the type cannot be found.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>name</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>name</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)\n  id: GetType(System.String,System.Boolean,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetType(String, Boolean, Boolean)\n  nameWithType: Assembly.GetType(String, Boolean, Boolean)\n  fullName: Assembly.GetType(String, Boolean, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.\n  remarks: \"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \\n  \\n> [!NOTE]\\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \\n  \\n The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`.\"\n  syntax:\n    content: public virtual Type GetType (string name, bool throwOnError, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: The full name of the type.\n    - id: throwOnError\n      type: System.Boolean\n      description: '`true` to throw an exception if the type is not found; `false` to return `null`.'\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` to ignore the case of the type name; otherwise, `false`.'\n    return:\n      type: System.Type\n      description: An object that represents the specified class.\n  overload: System.Reflection.Assembly.GetType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>name</code> is invalid.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> exceeds 1024 characters.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: <code>throwOnError</code> is `true`, and the type cannot be found.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>name</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<code>name</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetType(System.String)\n  commentId: M:System.Reflection.Assembly.GetType(System.String)\n  id: GetType(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetType(String)\n  nameWithType: Assembly.GetType(String)\n  fullName: Assembly.GetType(String)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the <xref href=\"System.Type\"></xref> object with the specified name in the assembly instance.\n  remarks: \"This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \\n  \\n> [!NOTE]\\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).\"\n  example:\n  - \"The following example defines an abstract `MeansOfTransportation` class in the `Transportation` namespace. It calls the <xref:System.Reflection.Assembly.GetType%28System.String%29> method to retrieve its <xref:System.Type> object, calls the <xref:System.Type.GetProperties%2A?displayProperty=fullName> method to get an array of <xref:System.Reflection.PropertyInfo> objects that represent the type's properties, and then displays information on the type's abstract properties. Note that the call to the <xref:System.Reflection.Assembly.GetType%28System.String%29> method uses the type's fully qualified name (that is, its namespace along with its type name).  \\n  \\n [!code-csharp[System.Reflection.Assembly.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.gettype/cs/gettype1.cs#1)]\\n [!code-vb[System.Reflection.Assembly.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.gettype/vb/gettype1.vb#1)]\"\n  syntax:\n    content: public virtual Type GetType (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The full name of the type.\n    return:\n      type: System.Type\n      description: An object that represents the specified class, or `null` if the class is not found.\n  overload: System.Reflection.Assembly.GetType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>name</code> is invalid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>name</code> requires a dependent assembly that could not be found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.IO.IOException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>\\n    <code>name</code> requires a dependent assembly that was found but could not be loaded.  \\n  \\n -or-  \\n  \\n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GetTypes\n  commentId: M:System.Reflection.Assembly.GetTypes\n  id: GetTypes\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GetTypes()\n  nameWithType: Assembly.GetTypes()\n  fullName: Assembly.GetTypes()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the types defined in this assembly.\n  remarks: \"The returned array includes nested types.  \\n  \\n If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown. For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded. It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called.  \\n  \\n> [!NOTE]\\n>  If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \\n  \\n To retrieve a collection of <xref:System.Reflection.TypeInfo> objects instead of an array of <xref:System.Type> objects, use the <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=fullName> property.\"\n  example:\n  - \"The following example displays parameters of one method on a type in the specified assembly.  \\n  \\n [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]\\n [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]\\n [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]\"\n  syntax:\n    content: public virtual Type[] GetTypes ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array that contains all the types that are defined in this assembly.\n  overload: System.Reflection.Assembly.GetTypes*\n  exceptions:\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: The assembly contains one or more types that cannot be loaded. The array returned by the <xref href=\"System.Reflection.ReflectionTypeLoadException.Types\"></xref> property of this exception contains a <xref href=\"System.Type\"></xref> object for each type that was loaded and `null` for each type that could not be loaded, while the <xref href=\"System.Reflection.ReflectionTypeLoadException.LoaderExceptions\"></xref> property contains an exception for each type that could not be loaded.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.GlobalAssemblyCache\n  commentId: P:System.Reflection.Assembly.GlobalAssemblyCache\n  id: GlobalAssemblyCache\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: GlobalAssemblyCache\n  nameWithType: Assembly.GlobalAssemblyCache\n  fullName: Assembly.GlobalAssemblyCache\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the assembly was loaded from the global assembly cache.\n  syntax:\n    content: public virtual bool GlobalAssemblyCache { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the assembly was loaded from the global assembly cache; otherwise, `false`.'\n  overload: System.Reflection.Assembly.GlobalAssemblyCache*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.HostContext\n  commentId: P:System.Reflection.Assembly.HostContext\n  id: HostContext\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: HostContext\n  nameWithType: Assembly.HostContext\n  fullName: Assembly.HostContext\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the host context with which the assembly was loaded.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual long HostContext { get; }\n    return:\n      type: System.Int64\n      description: An <xref href=\"System.Int64\"></xref> value that indicates the host context with which the assembly was loaded, if any.\n  overload: System.Reflection.Assembly.HostContext*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ImageRuntimeVersion\n  commentId: P:System.Reflection.Assembly.ImageRuntimeVersion\n  id: ImageRuntimeVersion\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ImageRuntimeVersion\n  nameWithType: Assembly.ImageRuntimeVersion\n  fullName: Assembly.ImageRuntimeVersion\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.\n  remarks: \"For example, the value for the .NET Framework version 1.1 would be v1.1.4322. The binary files for that version would be located in the path %windir%\\\\Microsoft.NET\\\\Framework\\\\v1.1.4322.  \\n  \\n By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly. However, it might have been set to another value at compile time.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual string ImageRuntimeVersion { get; }\n    return:\n      type: System.String\n      description: The CLR version folder name. This is not a full path.\n  overload: System.Reflection.Assembly.ImageRuntimeVersion*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: Assembly.IsDefined(Type, Boolean)\n  fullName: Assembly.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether or not a specified attribute has been applied to the assembly.\n  remarks: ''\n  example:\n  - \"The following code example applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to an assembly and then uses <xref:System.Reflection.Assembly.IsDefined%2A> to indicate whether it was applied. It also tests an attribute that was not applied.  \\n  \\n [!code-csharp[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/CS/isdefined.cs#1)]\\n [!code-vb[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/VB/isdefined.vb#1)]\"\n  syntax:\n    content: public virtual bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The type of the attribute to be checked for this assembly.\n    - id: inherit\n      type: System.Boolean\n      description: This argument is ignored for objects of this type.\n    return:\n      type: System.Boolean\n      description: '`true` if the attribute has been applied to the assembly; otherwise, `false`.'\n  overload: System.Reflection.Assembly.IsDefined*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributeType</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>attributeType</code> uses an invalid type.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.IsDynamic\n  commentId: P:System.Reflection.Assembly.IsDynamic\n  id: IsDynamic\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: IsDynamic\n  nameWithType: Assembly.IsDynamic\n  fullName: Assembly.IsDynamic\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.\n  remarks: \"Dynamic assemblies are represented by the derived class <xref:System.Reflection.Emit.AssemblyBuilder>.  \\n  \\n When a dynamic assembly is saved to disk, the saved assembly is not dynamic. If the saved assembly is loaded into another application domain or process, the <xref:System.Reflection.Assembly.IsDynamic%2A> property returns `false`.\"\n  syntax:\n    content: public virtual bool IsDynamic { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current assembly was generated dynamically in the current process; otherwise, `false`.'\n  overload: System.Reflection.Assembly.IsDynamic*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.IsFullyTrusted\n  commentId: P:System.Reflection.Assembly.IsFullyTrusted\n  id: IsFullyTrusted\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: IsFullyTrusted\n  nameWithType: Assembly.IsFullyTrusted\n  fullName: Assembly.IsFullyTrusted\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether the current assembly is loaded with full trust.\n  syntax:\n    content: public bool IsFullyTrusted { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current assembly is loaded with full trust; otherwise, `false`.'\n  overload: System.Reflection.Assembly.IsFullyTrusted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  id: Load(System.Reflection.AssemblyName)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(AssemblyName)\n  nameWithType: Assembly.Load(AssemblyName)\n  fullName: Assembly.Load(AssemblyName)\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\"></xref>.\n  remarks: \"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \\n  \\n> [!NOTE]\\n>  Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \\n  \\n    > [!NOTE]\\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \\n  \\n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \\n  \\n> [!NOTE]\\n>  If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.\"\n  example:\n  - \"The following example instantiates an <xref:System.Reflection.AssemblyName> object and uses it to load the `sysglobal.dll` assembly. The example then displays the full name of the assembly's public types.  \\n  \\n [!code-csharp[System.Reflection.Assembly.Load#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/Load2.cs#2)]\\n [!code-vb[System.Reflection.Assembly.Load#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/Load2.vb#2)]\"\n  syntax:\n    content: public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);\n    parameters:\n    - id: assemblyRef\n      type: System.Reflection.AssemblyName\n      description: The object that describes the assembly to be loaded.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyRef</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyRef</code> is not found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.IO.IOException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n A file that was found could not be loaded.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyRef</code> is not a valid assembly. -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)\n  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)\n  id: Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(Byte[], Byte[], SecurityContextSource)\n  nameWithType: Assembly.Load(Byte[], Byte[], SecurityContextSource)\n  fullName: Assembly.Load(Byte[], Byte[], SecurityContextSource)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.\n  remarks: The assembly is loaded into the application domain of the caller using the specified source for the security context. If `rawSymbolStore` was specified, the raw bytes that represent the symbols for the assembly are also loaded.\n  syntax:\n    content: public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.SecurityContextSource securityContextSource);\n    parameters:\n    - id: rawAssembly\n      type: System.Byte[]\n      description: A byte array that is a COFF-based image containing an emitted assembly.\n    - id: rawSymbolStore\n      type: System.Byte[]\n      description: A byte array that contains the raw bytes representing the symbols for the assembly.\n    - id: securityContextSource\n      type: System.Security.SecurityContextSource\n      description: The source of the security context.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rawAssembly</code> is `null`.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>rawAssembly</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>rawAssembly</code> was compiled with a later version of the common language runtime than the version that is currently loaded.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The value of <code>securityContextSource</code> is not one of the enumeration values.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)\n  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)\n  id: Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(Byte[], Byte[], Evidence)\n  nameWithType: Assembly.Load(Byte[], Byte[], Evidence)\n  fullName: Assembly.Load(Byte[], Byte[], Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.\n  remarks: \"The assembly is loaded into the domain of the caller using the supplied evidence. The raw bytes representing the symbols for the assembly are also loaded.  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \\n  \\n    > [!NOTE]\\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image are ignored.  \\n  \\n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \\n  \\n If you call the [\\\\], Byte\\\\<xref:System.Reflection.Assembly.Load%2A>method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \\n  \\n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);\n    parameters:\n    - id: rawAssembly\n      type: System.Byte[]\n      description: A byte array that is a COFF-based image containing an emitted assembly.\n    - id: rawSymbolStore\n      type: System.Byte[]\n      description: A byte array that contains the raw bytes representing the symbols for the assembly.\n    - id: securityEvidence\n      type: System.Security.Policy.Evidence\n      description: Evidence for loading the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rawAssembly</code> is `null`.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>rawAssembly</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: An assembly or module was loaded twice with two different evidences.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>securityEvidence</code> is not `null`.  By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)\n  commentId: M:System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)\n  id: Load(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(String, Evidence)\n  nameWithType: Assembly.Load(String, Evidence)\n  fullName: Assembly.Load(String, Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.\n  remarks: \"<xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \\n  \\n    > [!NOTE]\\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \\n  \\n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \\n  \\n If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \\n  \\n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \\\"ProcessorArchitecture=msil\\\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);\n    parameters:\n    - id: assemblyString\n      type: System.String\n      description: The display name of the assembly.\n    - id: assemblySecurity\n      type: System.Security.Policy.Evidence\n      description: Evidence for loading the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyString</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyString</code> is not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyString</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"A file that was found could not be loaded.  \\n  \\n -or-  \\n  \\n An assembly or module was loaded twice with two different evidences.\"\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.Byte[])\n  commentId: M:System.Reflection.Assembly.Load(System.Byte[])\n  id: Load(System.Byte[])\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(Byte[])\n  nameWithType: Assembly.Load(Byte[])\n  fullName: Assembly.Load(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.\n  remarks: \"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.  \\n  \\n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \\n  \\n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.\"\n  syntax:\n    content: public static System.Reflection.Assembly Load (byte[] rawAssembly);\n    parameters:\n    - id: rawAssembly\n      type: System.Byte[]\n      description: A byte array that is a COFF-based image containing an emitted assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rawAssembly</code> is `null`.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>rawAssembly</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[])\n  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])\n  id: Load(System.Byte[],System.Byte[])\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(Byte[], Byte[])\n  nameWithType: Assembly.Load(Byte[], Byte[])\n  fullName: Assembly.Load(Byte[], Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.\n  remarks: \"The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.  \\n  \\n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \\n  \\n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping.\"\n  syntax:\n    content: public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);\n    parameters:\n    - id: rawAssembly\n      type: System.Byte[]\n      description: A byte array that is a COFF-based image containing an emitted assembly.\n    - id: rawSymbolStore\n      type: System.Byte[]\n      description: A byte array that contains the raw bytes representing the symbols for the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rawAssembly</code> is `null`.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>rawAssembly</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.String)\n  commentId: M:System.Reflection.Assembly.Load(System.String)\n  id: Load(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(String)\n  nameWithType: Assembly.Load(String)\n  fullName: Assembly.Load(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly given the long form of its name.\n  remarks: \"The long form of an assembly name consists of its simple name (such as \\\"System\\\" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture. It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property. The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.  \\n  \\n [!code-csharp[System.Reflection.Assembly.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/load1.cs#1)]\\n [!code-vb[System.Reflection.Assembly.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/load1.vb#1)]  \\n  \\n <xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \\n  \\n    > [!NOTE]\\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \\n  \\n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \\n  \\n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \\\"ProcessorArchitecture=msil\\\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.\"\n  example:\n  - \"The following example loads an assembly given its fully qualified name, and lists all the types contained in the specified assembly. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).  \\n  \\n [!code-cpp[assembly.load1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.Load1/CPP/load1.cpp#1)]\\n [!code-csharp[assembly.load1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.Load1/CS/load1.cs#1)]\\n [!code-vb[assembly.load1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.Load1/VB/load1.vb#1)]\"\n  syntax:\n    content: public static System.Reflection.Assembly Load (string assemblyString);\n    parameters:\n    - id: assemblyString\n      type: System.String\n      description: The long form of the assembly name.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyString</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>assemblyString</code> is a zero-length string.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyString</code> is not found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyString</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)\n  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)\n  id: Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Load(AssemblyName, Evidence)\n  nameWithType: Assembly.Load(AssemblyName, Evidence)\n  fullName: Assembly.Load(AssemblyName, Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads an assembly given its <xref href=\"System.Reflection.AssemblyName\"></xref>. The assembly is loaded into the domain of the caller using the supplied evidence.\n  remarks: \"<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \\n  \\n> [!NOTE]\\n>  Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \\n  \\n    > [!NOTE]\\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \\n  \\n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \\n  \\n> [!NOTE]\\n>  If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.  \\n  \\n If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);\n    parameters:\n    - id: assemblyRef\n      type: System.Reflection.AssemblyName\n      description: The object that describes the assembly to be loaded.\n    - id: assemblySecurity\n      type: System.Security.Policy.Evidence\n      description: Evidence for loading the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.Load*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyRef</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyRef</code> is not found.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyRef</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version.\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: An assembly or module was loaded twice with two different evidences.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadFile(System.String)\n  commentId: M:System.Reflection.Assembly.LoadFile(System.String)\n  id: LoadFile(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadFile(String)\n  nameWithType: Assembly.LoadFile(String)\n  fullName: Assembly.LoadFile(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the contents of an assembly file on the specified path.\n  remarks: Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.<xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.\n  syntax:\n    content: public static System.Reflection.Assembly LoadFile (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: The fully qualified path of the file to load.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.LoadFile*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> argument is not an absolute path.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>path</code> parameter is `null`.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The <code>path</code> parameter is an empty string (\"\") or does not exist.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>path</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)\n  commentId: M:System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)\n  id: LoadFile(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadFile(String, Evidence)\n  nameWithType: Assembly.LoadFile(String, Evidence)\n  fullName: Assembly.LoadFile(String, Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.\n  remarks: Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths. <xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly LoadFile (string path, System.Security.Policy.Evidence securityEvidence);\n    parameters:\n    - id: path\n      type: System.String\n      description: The fully qualified path of the assembly file.\n    - id: securityEvidence\n      type: System.Security.Policy.Evidence\n      description: Evidence for loading the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.LoadFile*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>path</code> argument is not an absolute path.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>path</code> parameter is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The <code>path</code> parameter is an empty string (\"\") or does not exist.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>path</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>securityEvidence</code> is not `null`. By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  id: LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)\n  nameWithType: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)\n  fullName: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.\n  remarks: \"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \\n  \\n> [!NOTE]\\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \\n  \\n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \\n  \\n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \\n  \\n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \\n  \\n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \\n  \\n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \\n  \\n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \\n  \\n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \\n  \\n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \\n  \\n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \\n  \\n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \\n  \\n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \\n  \\n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.  \\n  \\n-   If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The name or path of the file that contains the manifest of the assembly.\n    - id: securityEvidence\n      type: System.Security.Policy.Evidence\n      description: Evidence for loading the assembly.\n    - id: hashValue\n      type: System.Byte[]\n      description: The value of the computed hash code.\n    - id: hashAlgorithm\n      type: System.Configuration.Assemblies.AssemblyHashAlgorithm\n      description: The hash algorithm used for hashing files and for generating the strong name.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.LoadFrom*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"A file that was found could not be loaded.  \\n  \\n -or-  \\n  \\n The <code>securityEvidence</code> is not ambiguous and is determined to be invalid.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>assemblyFile</code> parameter is an empty string (\"\").\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The assembly name is longer than MAX_PATH characters.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  id: LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadFrom(String, Byte[], AssemblyHashAlgorithm)\n  nameWithType: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)\n  fullName: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly given its file name or path, hash value, and hash algorithm.\n  remarks: \"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \\n  \\n> [!NOTE]\\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \\n  \\n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \\n  \\n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \\n  \\n-   The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \\n  \\n-   The load-from context contains assemblies for which the user provided a path that is not included in probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \\n  \\n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \\n  \\n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \\n  \\n The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \\n  \\n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \\n  \\n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \\n  \\n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \\n  \\n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain-neutral.  \\n  \\n The assembly is loaded with the evidence that the loader supplies.\"\n  syntax:\n    content: public static System.Reflection.Assembly LoadFrom (string assemblyFile, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The name or path of the file that contains the manifest of the assembly.\n    - id: hashValue\n      type: System.Byte[]\n      description: The value of the computed hash code.\n    - id: hashAlgorithm\n      type: System.Configuration.Assemblies.AssemblyHashAlgorithm\n      description: The hash algorithm used for hashing files and for generating the strong name.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.LoadFrom*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \\n  \\n -or-  \\n  \\n <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>assemblyFile</code> parameter is an empty string (\"\").\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The assembly name is longer than MAX_PATH characters.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadFrom(System.String)\n  commentId: M:System.Reflection.Assembly.LoadFrom(System.String)\n  id: LoadFrom(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadFrom(String)\n  nameWithType: Assembly.LoadFrom(String)\n  fullName: Assembly.LoadFrom(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly given its file name or path.\n  remarks: \"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \\n  \\n> [!NOTE]\\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \\n  \\n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \\n  \\n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \\n  \\n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \\n  \\n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \\n  \\n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \\n  \\n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \\n  \\n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \\n  \\n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \\n  \\n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is de-serialized.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \\n  \\n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \\n  \\n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \\n  \\n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.\"\n  example:\n  - \"The following example loads an assembly given its file name or path.  \\n  \\n [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]\\n [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]\\n [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]\"\n  syntax:\n    content: public static System.Reflection.Assembly LoadFrom (string assemblyFile);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The name or path of the file that contains the manifest of the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.LoadFrom*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>assemblyFile</code> parameter is an empty string (\"\").\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The assembly name is longer than MAX_PATH characters.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)\n  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)\n  id: LoadFrom(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadFrom(String, Evidence)\n  nameWithType: Assembly.LoadFrom(String, Evidence)\n  fullName: Assembly.LoadFrom(String, Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads an assembly given its file name or path and supplying security evidence.\n  remarks: \"The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \\n  \\n> [!NOTE]\\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \\n  \\n `assemblyFile` may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller.  \\n  \\n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \\n  \\n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \\n  \\n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \\n  \\n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \\n  \\n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \\n  \\n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \\n  \\n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \\n  \\n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \\n  \\n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \\n  \\n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \\n  \\n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \\n  \\n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.  \\n  \\n-   If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \\n  \\n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The name or path of the file that contains the manifest of the assembly.\n    - id: securityEvidence\n      type: System.Security.Policy.Evidence\n      description: Evidence for loading the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.LoadFrom*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"A file that was found could not be loaded.  \\n  \\n -or-  \\n  \\n The <code>securityEvidence</code> is not ambiguous and is determined to be invalid.\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>assemblyFile</code> parameter is an empty string (\"\").\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The assembly name is longer than MAX_PATH characters.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[])\n  commentId: M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])\n  id: LoadModule(System.String,System.Byte[])\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadModule(String, Byte[])\n  nameWithType: Assembly.LoadModule(String, Byte[])\n  fullName: Assembly.LoadModule(String, Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.\n  syntax:\n    content: public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule);\n    parameters:\n    - id: moduleName\n      type: System.String\n      description: The name of the module. This string must correspond to a file name in this assembly's manifest.\n    - id: rawModule\n      type: System.Byte[]\n      description: A byte array that is a COFF-based image containing an emitted module, or a resource.\n    return:\n      type: System.Reflection.Module\n      description: The loaded module.\n  overload: System.Reflection.Assembly.LoadModule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>moduleName</code> or <code>rawModule</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>moduleName</code> does not match a file entry in this assembly's manifest.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>rawModule</code> is not a valid module.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])\n  commentId: M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])\n  id: LoadModule(System.String,System.Byte[],System.Byte[])\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadModule(String, Byte[], Byte[])\n  nameWithType: Assembly.LoadModule(String, Byte[], Byte[])\n  fullName: Assembly.LoadModule(String, Byte[], Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.\n  syntax:\n    content: public virtual System.Reflection.Module LoadModule (string moduleName, byte[] rawModule, byte[] rawSymbolStore);\n    parameters:\n    - id: moduleName\n      type: System.String\n      description: The name of the module. This string must correspond to a file name in this assembly's manifest.\n    - id: rawModule\n      type: System.Byte[]\n      description: A byte array that is a COFF-based image containing an emitted module, or a resource.\n    - id: rawSymbolStore\n      type: System.Byte[]\n      description: A byte array containing the raw bytes representing the symbols for the module. Must be `null` if this is a resource file.\n    return:\n      type: System.Reflection.Module\n      description: The loaded module.\n  overload: System.Reflection.Assembly.LoadModule*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>moduleName</code> or <code>rawModule</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>moduleName</code> does not match a file entry in this assembly's manifest.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: <code>rawModule</code> is not a valid module.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadWithPartialName(System.String)\n  commentId: M:System.Reflection.Assembly.LoadWithPartialName(System.String)\n  id: LoadWithPartialName(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadWithPartialName(String)\n  nameWithType: Assembly.LoadWithPartialName(String)\n  fullName: Assembly.LoadWithPartialName(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly from the application directory or from the global assembly cache using a partial name.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.  \\n  \\n Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.  \\n  \\n This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly LoadWithPartialName (string partialName);\n    parameters:\n    - id: partialName\n      type: System.String\n      description: The display name of the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.\n  overload: System.Reflection.Assembly.LoadWithPartialName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>partialName</code> parameter is `null`.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version.\"\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)\n  commentId: M:System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)\n  id: LoadWithPartialName(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: LoadWithPartialName(String, Evidence)\n  nameWithType: Assembly.LoadWithPartialName(String, Evidence)\n  fullName: Assembly.LoadWithPartialName(String, Evidence)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.  \\n  \\n Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.  \\n  \\n Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method.  \\n  \\n This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number.\"\n  syntax:\n    content: >-\n      [System.Obsolete]\n\n      public static System.Reflection.Assembly LoadWithPartialName (string partialName, System.Security.Policy.Evidence securityEvidence);\n    parameters:\n    - id: partialName\n      type: System.String\n      description: The display name of the assembly.\n    - id: securityEvidence\n      type: System.Security.Policy.Evidence\n      description: Evidence for loading the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.\n  overload: System.Reflection.Assembly.LoadWithPartialName*\n  exceptions:\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: An assembly or module was loaded twice with two different sets of evidence.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>partialName</code> parameter is `null`.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version.\"\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Location\n  commentId: P:System.Reflection.Assembly.Location\n  id: Location\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Location\n  nameWithType: Assembly.Location\n  fullName: Assembly.Location\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the full path or UNC location of the loaded file that contains the manifest.\n  remarks: To get the location before the file has been shadow-copied, use the <xref:System.Reflection.Assembly.CodeBase%2A> property.\n  example:\n  - \"The following example displays the location of the loaded file that contains the manifest.  \\n  \\n [!code-cpp[System.Reflection.Assembly#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#3)]\\n [!code-csharp[System.Reflection.Assembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#3)]\\n [!code-vb[System.Reflection.Assembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#3)]\"\n  syntax:\n    content: public virtual string Location { get; }\n    return:\n      type: System.String\n      description: The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <xref href=\"System.Reflection.Assembly.Load(System.Byte[])\"></xref> method overload, the value returned is an empty string (\"\").\n  overload: System.Reflection.Assembly.Location*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current assembly is a dynamic assembly, represented by an <xref href=\"System.Reflection.Emit.AssemblyBuilder\"></xref> object.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ManifestModule\n  commentId: P:System.Reflection.Assembly.ManifestModule\n  id: ManifestModule\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ManifestModule\n  nameWithType: Assembly.ManifestModule\n  fullName: Assembly.ManifestModule\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the module that contains the manifest for the current assembly.\n  syntax:\n    content: public virtual System.Reflection.Module ManifestModule { get; }\n    return:\n      type: System.Reflection.Module\n      description: The module that contains the manifest for the assembly.\n  overload: System.Reflection.Assembly.ManifestModule*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ModuleResolve\n  commentId: E:System.Reflection.Assembly.ModuleResolve\n  id: ModuleResolve\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ModuleResolve\n  nameWithType: Assembly.ModuleResolve\n  fullName: Assembly.ModuleResolve\n  type: Event\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.\n  remarks: This event gives the callback a chance to find and load the module itself and return it.\n  syntax:\n    content: public virtual event System.Reflection.ModuleResolveEventHandler ModuleResolve;\n    return:\n      type: System.Reflection.ModuleResolveEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.Modules\n  commentId: P:System.Reflection.Assembly.Modules\n  id: Modules\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: Modules\n  nameWithType: Assembly.Modules\n  fullName: Assembly.Modules\n  type: Property\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a collection that contains the modules in this assembly.\n  syntax:\n    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.Module> Modules { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.Module}\n      description: A collection that contains the modules in this assembly.\n  overload: System.Reflection.Assembly.Modules*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)\n  commentId: M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)\n  id: op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: op_Equality(Assembly, Assembly)\n  nameWithType: Assembly.op_Equality(Assembly, Assembly)\n  fullName: Assembly.op_Equality(Assembly, Assembly)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.Assembly\"></xref> objects are equal.\n  syntax:\n    content: public static bool op_Equality (System.Reflection.Assembly left, System.Reflection.Assembly right);\n    parameters:\n    - id: left\n      type: System.Reflection.Assembly\n      description: The assembly to compare to <code>right</code>.\n    - id: right\n      type: System.Reflection.Assembly\n      description: The assembly to compare to <code>left</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.Assembly.op_Equality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)\n  commentId: M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)\n  id: op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: op_Inequality(Assembly, Assembly)\n  nameWithType: Assembly.op_Inequality(Assembly, Assembly)\n  fullName: Assembly.op_Inequality(Assembly, Assembly)\n  type: Operator\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether two <xref href=\"System.Reflection.Assembly\"></xref> objects are not equal.\n  syntax:\n    content: public static bool op_Inequality (System.Reflection.Assembly left, System.Reflection.Assembly right);\n    parameters:\n    - id: left\n      type: System.Reflection.Assembly\n      description: The assembly to compare to <code>right</code>.\n    - id: right\n      type: System.Reflection.Assembly\n      description: The assembly to compare to <code>left</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'\n  overload: System.Reflection.Assembly.op_Inequality*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.PermissionSet\n  commentId: P:System.Reflection.Assembly.PermissionSet\n  id: PermissionSet\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: PermissionSet\n  nameWithType: Assembly.PermissionSet\n  fullName: Assembly.PermissionSet\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Gets the grant set of the current assembly.\n  remarks: <xref:System.Security.PermissionSet> objects can contain sensitive information such as paths. Therefore, full trust is required to access these objects.\n  syntax:\n    content: public virtual System.Security.PermissionSet PermissionSet { get; }\n    return:\n      type: System.Security.PermissionSet\n      description: The grant set of the current assembly.\n  overload: System.Reflection.Assembly.PermissionSet*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ReflectionOnly\n  commentId: P:System.Reflection.Assembly.ReflectionOnly\n  id: ReflectionOnly\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ReflectionOnly\n  nameWithType: Assembly.ReflectionOnly\n  fullName: Assembly.ReflectionOnly\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a <xref href=\"System.Boolean\"></xref> value indicating whether this assembly was loaded into the reflection-only context.\n  remarks: If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly. To execute code, the assembly must be loaded into the execution context.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual bool ReflectionOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, `false`.'\n  overload: System.Reflection.Assembly.ReflectionOnly*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])\n  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])\n  id: ReflectionOnlyLoad(System.Byte[])\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ReflectionOnlyLoad(Byte[])\n  nameWithType: Assembly.ReflectionOnlyLoad(Byte[])\n  fullName: Assembly.ReflectionOnlyLoad(Byte[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.\n  remarks: \"You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.  \\n  \\n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.\"\n  syntax:\n    content: public static System.Reflection.Assembly ReflectionOnlyLoad (byte[] rawAssembly);\n    parameters:\n    - id: rawAssembly\n      type: System.Byte[]\n      description: A byte array that is a COFF-based image containing an emitted assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.ReflectionOnlyLoad*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>rawAssembly</code> is `null`.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>rawAssembly</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version.\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: <code>rawAssembly</code> cannot be loaded.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)\n  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)\n  id: ReflectionOnlyLoad(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ReflectionOnlyLoad(String)\n  nameWithType: Assembly.ReflectionOnlyLoad(String)\n  fullName: Assembly.ReflectionOnlyLoad(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly into the reflection-only context, given its display name.\n  remarks: \"Dependencies are not automatically loaded into the reflection-only context.  \\n  \\n You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.  \\n  \\n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \\n  \\n> [!NOTE]\\n>  Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file. To preserve the .reloc address, specify `/fixed:no` when you are linking.  \\n  \\n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.\"\n  syntax:\n    content: public static System.Reflection.Assembly ReflectionOnlyLoad (string assemblyString);\n    parameters:\n    - id: assemblyString\n      type: System.String\n      description: The display name of the assembly, as returned by the <xref href=\"System.Reflection.AssemblyName.FullName\"></xref> property.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.ReflectionOnlyLoad*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyString</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>assemblyString</code> is an empty string (\"\").\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyString</code> is not found.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: <code>assemblyString</code> is found, but cannot be loaded.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyString</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)\n  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)\n  id: ReflectionOnlyLoadFrom(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ReflectionOnlyLoadFrom(String)\n  nameWithType: Assembly.ReflectionOnlyLoadFrom(String)\n  fullName: Assembly.ReflectionOnlyLoadFrom(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly into the reflection-only context, given its path.\n  remarks: \"Dependencies are not automatically loaded into the reflection-only context. To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler.  \\n  \\n You cannot execute code from an assembly that has been loaded into the reflection-only context. To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method.  \\n  \\n The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \\n  \\n The path specified for `assemblyFile` is relative to the current directory. The assembly is loaded into the domain of the caller.  \\n  \\n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain.\"\n  syntax:\n    content: public static System.Reflection.Assembly ReflectionOnlyLoadFrom (string assemblyFile);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The path of the file that contains the manifest of the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.ReflectionOnlyLoadFrom*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: <code>assemblyFile</code> is found, but could not be loaded.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The assembly name is longer than MAX_PATH characters.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>assemblyFile</code> is an empty string (\"\").\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.SecurityRuleSet\n  commentId: P:System.Reflection.Assembly.SecurityRuleSet\n  id: SecurityRuleSet\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: SecurityRuleSet\n  nameWithType: Assembly.SecurityRuleSet\n  fullName: Assembly.SecurityRuleSet\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.\n  remarks: \"By default, assemblies that you compile with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] have  transparency, although you can explicitly make them  instead. Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.  \\n  \\n See [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public virtual System.Security.SecurityRuleSet SecurityRuleSet { get; }\n    return:\n      type: System.Security.SecurityRuleSet\n      description: The security rule set that the CLR enforces for this assembly.\n  overload: System.Reflection.Assembly.SecurityRuleSet*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.ToString\n  commentId: M:System.Reflection.Assembly.ToString\n  id: ToString\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Assembly.ToString()\n  fullName: Assembly.ToString()\n  type: Method\n  assemblies:\n  - System.Reflection\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the full name of the assembly, also known as the display name.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The full name of the assembly, or the class name if the full name of the assembly cannot be determined.\n  overload: System.Reflection.Assembly.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.UnsafeLoadFrom(System.String)\n  commentId: M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)\n  id: UnsafeLoadFrom(System.String)\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: UnsafeLoadFrom(String)\n  nameWithType: Assembly.UnsafeLoadFrom(String)\n  fullName: Assembly.UnsafeLoadFrom(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Loads an assembly into the load-from context, bypassing some security checks.\n  remarks: \"Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet). Before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], such assemblies were automatically loaded into a sandboxed application domain. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], they are loaded with full trust.  \\n  \\n As an alternative to using this method, you can apply the [\\\\&lt;NetFx40_LegacySecurityPolicy\\\\&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) in your application configuration file. This causes the common language runtime to revert to the security policy of the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].  \\n  \\n> [!CAUTION]\\n>  If you use either of these solutions, you must be certain that it is safe to load `assemblyFile` with full trust.  \\n  \\n For a discussion of load contexts, including the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.\"\n  syntax:\n    content: public static System.Reflection.Assembly UnsafeLoadFrom (string assemblyFile);\n    parameters:\n    - id: assemblyFile\n      type: System.String\n      description: The name or path of the file that contains the manifest of the assembly.\n    return:\n      type: System.Reflection.Assembly\n      description: The loaded assembly.\n  overload: System.Reflection.Assembly.UnsafeLoadFrom*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assemblyFile</code> is `null`.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: A file that was found could not be loaded.\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"<code>assemblyFile</code> is not a valid assembly.  \\n  \\n -or-  \\n  \\n <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded.\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: A codebase that does not start with \"file://\" was specified without the required <xref href=\"System.Net.WebPermission\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>assemblyFile</code> parameter is an empty string (\"\").\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The assembly name is longer than MAX_PATH characters.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: ''\n    - id: inherit\n      type: System.Boolean\n      description: ''\n    return:\n      type: System.Object[]\n      description: ''\n  overload: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  isEii: true\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: ''\n    return:\n      type: System.Object[]\n      description: ''\n  overload: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: ''\n    - id: inherit\n      type: System.Boolean\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType\n  commentId: M:System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType\n  id: System#Runtime#InteropServices#_Assembly#GetType\n  isEii: true\n  parent: System.Reflection.Assembly\n  langs:\n  - csharp\n  name: _Assembly.GetType()\n  nameWithType: Assembly._Assembly.GetType()\n  fullName: Assembly._Assembly.GetType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection\n  summary: Returns the type of the current instance.\n  syntax:\n    content: Type _Assembly.GetType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: An object that represents the <xref href=\"System.Reflection.Assembly\"></xref> type.\n  overload: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.MissingMethodException\n  parent: System\n  isExternal: false\n  name: MissingMethodException\n  nameWithType: MissingMethodException\n  fullName: System.MissingMethodException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.IO.FileLoadException\n  parent: System.IO\n  isExternal: false\n  name: FileLoadException\n  nameWithType: FileLoadException\n  fullName: System.IO.FileLoadException\n- uid: System.BadImageFormatException\n  parent: System\n  isExternal: false\n  name: BadImageFormatException\n  nameWithType: BadImageFormatException\n  fullName: System.BadImageFormatException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  nameWithType: TypeLoadException\n  fullName: System.TypeLoadException\n- uid: System.Reflection.ReflectionTypeLoadException\n  parent: System.Reflection\n  isExternal: false\n  name: ReflectionTypeLoadException\n  nameWithType: ReflectionTypeLoadException\n  fullName: System.Reflection.ReflectionTypeLoadException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.IO.PathTooLongException\n  parent: System.IO\n  isExternal: false\n  name: PathTooLongException\n  nameWithType: PathTooLongException\n  fullName: System.IO.PathTooLongException\n- uid: System.Reflection.Assembly.#ctor\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Assembly()\n  nameWithType: Assembly.Assembly()\n  fullName: Assembly.Assembly()\n- uid: System.Reflection.Assembly.CodeBase\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CodeBase\n  nameWithType: Assembly.CodeBase\n  fullName: Assembly.CodeBase\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Assembly.CreateInstance(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CreateInstance(String)\n  nameWithType: Assembly.CreateInstance(String)\n  fullName: Assembly.CreateInstance(String)\n- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CreateInstance(String, Boolean)\n  nameWithType: Assembly.CreateInstance(String, Boolean)\n  fullName: Assembly.CreateInstance(String, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])\n  nameWithType: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])\n  fullName: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CreateQualifiedName(String, String)\n  nameWithType: Assembly.CreateQualifiedName(String, String)\n  fullName: Assembly.CreateQualifiedName(String, String)\n- uid: System.Reflection.Assembly.CustomAttributes\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: Assembly.CustomAttributes\n  fullName: Assembly.CustomAttributes\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Reflection.CustomAttributeData\n  name: CustomAttributeData\n  nameWithType: CustomAttributeData\n  fullName: System.Reflection.CustomAttributeData\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<CustomAttributeData>\n  nameWithType: IEnumerable<CustomAttributeData>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    nameWithType: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Assembly.DefinedTypes\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: DefinedTypes\n  nameWithType: Assembly.DefinedTypes\n  fullName: Assembly.DefinedTypes\n- uid: System.Reflection.TypeInfo\n  name: TypeInfo\n  nameWithType: TypeInfo\n  fullName: System.Reflection.TypeInfo\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TypeInfo>\n  nameWithType: IEnumerable<TypeInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.TypeInfo\n    name: TypeInfo\n    nameWithType: TypeInfo\n    fullName: System.Reflection.TypeInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Assembly.EntryPoint\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: EntryPoint\n  nameWithType: Assembly.EntryPoint\n  fullName: Assembly.EntryPoint\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.Assembly.Equals(System.Object)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Assembly.Equals(Object)\n  fullName: Assembly.Equals(Object)\n- uid: System.Reflection.Assembly.EscapedCodeBase\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: EscapedCodeBase\n  nameWithType: Assembly.EscapedCodeBase\n  fullName: Assembly.EscapedCodeBase\n- uid: System.Reflection.Assembly.Evidence\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Evidence\n  nameWithType: Assembly.Evidence\n  fullName: Assembly.Evidence\n- uid: System.Security.Policy.Evidence\n  parent: System.Security.Policy\n  isExternal: false\n  name: Evidence\n  nameWithType: Evidence\n  fullName: System.Security.Policy.Evidence\n- uid: System.Reflection.Assembly.ExportedTypes\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ExportedTypes\n  nameWithType: Assembly.ExportedTypes\n  fullName: Assembly.ExportedTypes\n- uid: System.Type\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Type}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Type>\n  nameWithType: IEnumerable<Type>\n  fullName: System.Collections.Generic.IEnumerable<System.Type>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Assembly.FullName\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: FullName\n  nameWithType: Assembly.FullName\n  fullName: Assembly.FullName\n- uid: System.Reflection.Assembly.GetAssembly(System.Type)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetAssembly(Type)\n  nameWithType: Assembly.GetAssembly(Type)\n  fullName: Assembly.GetAssembly(Type)\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Reflection.Assembly.GetCallingAssembly\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetCallingAssembly()\n  nameWithType: Assembly.GetCallingAssembly()\n  fullName: Assembly.GetCallingAssembly()\n- uid: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: Assembly.GetCustomAttributes(Boolean)\n  fullName: Assembly.GetCustomAttributes(Boolean)\n- uid: System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: Assembly.GetCustomAttributes(Type, Boolean)\n  fullName: Assembly.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Assembly.GetCustomAttributesData\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: Assembly.GetCustomAttributesData()\n  fullName: Assembly.GetCustomAttributesData()\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<CustomAttributeData>\n  nameWithType: IList<CustomAttributeData>\n  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    nameWithType: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Assembly.GetEntryAssembly\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetEntryAssembly()\n  nameWithType: Assembly.GetEntryAssembly()\n  fullName: Assembly.GetEntryAssembly()\n- uid: System.Reflection.Assembly.GetExecutingAssembly\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetExecutingAssembly()\n  nameWithType: Assembly.GetExecutingAssembly()\n  fullName: Assembly.GetExecutingAssembly()\n- uid: System.Reflection.Assembly.GetExportedTypes\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetExportedTypes()\n  nameWithType: Assembly.GetExportedTypes()\n  fullName: Assembly.GetExportedTypes()\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Assembly.GetFile(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetFile(String)\n  nameWithType: Assembly.GetFile(String)\n  fullName: Assembly.GetFile(String)\n- uid: System.IO.FileStream\n  parent: System.IO\n  isExternal: false\n  name: FileStream\n  nameWithType: FileStream\n  fullName: System.IO.FileStream\n- uid: System.Reflection.Assembly.GetFiles\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetFiles()\n  nameWithType: Assembly.GetFiles()\n  fullName: Assembly.GetFiles()\n- uid: System.IO.FileStream[]\n  parent: System.IO\n  isExternal: false\n  name: FileStream[]\n  nameWithType: FileStream[]\n  fullName: System.IO.FileStream[]\n  spec.csharp:\n  - uid: System.IO.FileStream\n    name: FileStream\n    nameWithType: FileStream\n    fullName: System.IO.FileStream\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Assembly.GetFiles(System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetFiles(Boolean)\n  nameWithType: Assembly.GetFiles(Boolean)\n  fullName: Assembly.GetFiles(Boolean)\n- uid: System.Reflection.Assembly.GetHashCode\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Assembly.GetHashCode()\n  fullName: Assembly.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Assembly.GetLoadedModules\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetLoadedModules()\n  nameWithType: Assembly.GetLoadedModules()\n  fullName: Assembly.GetLoadedModules()\n- uid: System.Reflection.Module\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Module[]\n  parent: System.Reflection\n  isExternal: false\n  name: Module[]\n  nameWithType: Module[]\n  fullName: System.Reflection.Module[]\n  spec.csharp:\n  - uid: System.Reflection.Module\n    name: Module\n    nameWithType: Module\n    fullName: System.Reflection.Module\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Assembly.GetLoadedModules(System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetLoadedModules(Boolean)\n  nameWithType: Assembly.GetLoadedModules(Boolean)\n  fullName: Assembly.GetLoadedModules(Boolean)\n- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetManifestResourceInfo(String)\n  nameWithType: Assembly.GetManifestResourceInfo(String)\n  fullName: Assembly.GetManifestResourceInfo(String)\n- uid: System.Reflection.ManifestResourceInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ManifestResourceInfo\n  nameWithType: ManifestResourceInfo\n  fullName: System.Reflection.ManifestResourceInfo\n- uid: System.Reflection.Assembly.GetManifestResourceNames\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetManifestResourceNames()\n  nameWithType: Assembly.GetManifestResourceNames()\n  fullName: Assembly.GetManifestResourceNames()\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetManifestResourceStream(Type, String)\n  nameWithType: Assembly.GetManifestResourceStream(Type, String)\n  fullName: Assembly.GetManifestResourceStream(Type, String)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetManifestResourceStream(String)\n  nameWithType: Assembly.GetManifestResourceStream(String)\n  fullName: Assembly.GetManifestResourceStream(String)\n- uid: System.Reflection.Assembly.GetModule(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetModule(String)\n  nameWithType: Assembly.GetModule(String)\n  fullName: Assembly.GetModule(String)\n- uid: System.Reflection.Assembly.GetModules\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetModules()\n  nameWithType: Assembly.GetModules()\n  fullName: Assembly.GetModules()\n- uid: System.Reflection.Assembly.GetModules(System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetModules(Boolean)\n  nameWithType: Assembly.GetModules(Boolean)\n  fullName: Assembly.GetModules(Boolean)\n- uid: System.Reflection.Assembly.GetName\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetName()\n  nameWithType: Assembly.GetName()\n  fullName: Assembly.GetName()\n- uid: System.Reflection.AssemblyName\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyName\n  nameWithType: AssemblyName\n  fullName: System.Reflection.AssemblyName\n- uid: System.Reflection.Assembly.GetName(System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetName(Boolean)\n  nameWithType: Assembly.GetName(Boolean)\n  fullName: Assembly.GetName(Boolean)\n- uid: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Assembly.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Assembly.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Reflection.Assembly.GetReferencedAssemblies\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetReferencedAssemblies()\n  nameWithType: Assembly.GetReferencedAssemblies()\n  fullName: Assembly.GetReferencedAssemblies()\n- uid: System.Reflection.AssemblyName[]\n  parent: System.Reflection\n  isExternal: false\n  name: AssemblyName[]\n  nameWithType: AssemblyName[]\n  fullName: System.Reflection.AssemblyName[]\n  spec.csharp:\n  - uid: System.Reflection.AssemblyName\n    name: AssemblyName\n    nameWithType: AssemblyName\n    fullName: System.Reflection.AssemblyName\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetSatelliteAssembly(CultureInfo, Version)\n  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo, Version)\n  fullName: Assembly.GetSatelliteAssembly(CultureInfo, Version)\n- uid: System.Version\n  parent: System\n  isExternal: false\n  name: Version\n  nameWithType: Version\n  fullName: System.Version\n- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetSatelliteAssembly(CultureInfo)\n  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo)\n  fullName: Assembly.GetSatelliteAssembly(CultureInfo)\n- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetType(String, Boolean)\n  nameWithType: Assembly.GetType(String, Boolean)\n  fullName: Assembly.GetType(String, Boolean)\n- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetType(String, Boolean, Boolean)\n  nameWithType: Assembly.GetType(String, Boolean, Boolean)\n  fullName: Assembly.GetType(String, Boolean, Boolean)\n- uid: System.Reflection.Assembly.GetType(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetType(String)\n  nameWithType: Assembly.GetType(String)\n  fullName: Assembly.GetType(String)\n- uid: System.Reflection.Assembly.GetTypes\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetTypes()\n  nameWithType: Assembly.GetTypes()\n  fullName: Assembly.GetTypes()\n- uid: System.Reflection.Assembly.GlobalAssemblyCache\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GlobalAssemblyCache\n  nameWithType: Assembly.GlobalAssemblyCache\n  fullName: Assembly.GlobalAssemblyCache\n- uid: System.Reflection.Assembly.HostContext\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: HostContext\n  nameWithType: Assembly.HostContext\n  fullName: Assembly.HostContext\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Reflection.Assembly.ImageRuntimeVersion\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ImageRuntimeVersion\n  nameWithType: Assembly.ImageRuntimeVersion\n  fullName: Assembly.ImageRuntimeVersion\n- uid: System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: Assembly.IsDefined(Type, Boolean)\n  fullName: Assembly.IsDefined(Type, Boolean)\n- uid: System.Reflection.Assembly.IsDynamic\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: IsDynamic\n  nameWithType: Assembly.IsDynamic\n  fullName: Assembly.IsDynamic\n- uid: System.Reflection.Assembly.IsFullyTrusted\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: IsFullyTrusted\n  nameWithType: Assembly.IsFullyTrusted\n  fullName: Assembly.IsFullyTrusted\n- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(AssemblyName)\n  nameWithType: Assembly.Load(AssemblyName)\n  fullName: Assembly.Load(AssemblyName)\n- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(Byte[], Byte[], SecurityContextSource)\n  nameWithType: Assembly.Load(Byte[], Byte[], SecurityContextSource)\n  fullName: Assembly.Load(Byte[], Byte[], SecurityContextSource)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.SecurityContextSource\n  parent: System.Security\n  isExternal: false\n  name: SecurityContextSource\n  nameWithType: SecurityContextSource\n  fullName: System.Security.SecurityContextSource\n- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(Byte[], Byte[], Evidence)\n  nameWithType: Assembly.Load(Byte[], Byte[], Evidence)\n  fullName: Assembly.Load(Byte[], Byte[], Evidence)\n- uid: System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(String, Evidence)\n  nameWithType: Assembly.Load(String, Evidence)\n  fullName: Assembly.Load(String, Evidence)\n- uid: System.Reflection.Assembly.Load(System.Byte[])\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(Byte[])\n  nameWithType: Assembly.Load(Byte[])\n  fullName: Assembly.Load(Byte[])\n- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[])\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(Byte[], Byte[])\n  nameWithType: Assembly.Load(Byte[], Byte[])\n  fullName: Assembly.Load(Byte[], Byte[])\n- uid: System.Reflection.Assembly.Load(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(String)\n  nameWithType: Assembly.Load(String)\n  fullName: Assembly.Load(String)\n- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load(AssemblyName, Evidence)\n  nameWithType: Assembly.Load(AssemblyName, Evidence)\n  fullName: Assembly.Load(AssemblyName, Evidence)\n- uid: System.Reflection.Assembly.LoadFile(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFile(String)\n  nameWithType: Assembly.LoadFile(String)\n  fullName: Assembly.LoadFile(String)\n- uid: System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFile(String, Evidence)\n  nameWithType: Assembly.LoadFile(String, Evidence)\n  fullName: Assembly.LoadFile(String, Evidence)\n- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)\n  nameWithType: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)\n  fullName: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)\n- uid: System.Configuration.Assemblies.AssemblyHashAlgorithm\n  parent: System.Configuration.Assemblies\n  isExternal: false\n  name: AssemblyHashAlgorithm\n  nameWithType: AssemblyHashAlgorithm\n  fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm\n- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFrom(String, Byte[], AssemblyHashAlgorithm)\n  nameWithType: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)\n  fullName: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)\n- uid: System.Reflection.Assembly.LoadFrom(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFrom(String)\n  nameWithType: Assembly.LoadFrom(String)\n  fullName: Assembly.LoadFrom(String)\n- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFrom(String, Evidence)\n  nameWithType: Assembly.LoadFrom(String, Evidence)\n  fullName: Assembly.LoadFrom(String, Evidence)\n- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[])\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadModule(String, Byte[])\n  nameWithType: Assembly.LoadModule(String, Byte[])\n  fullName: Assembly.LoadModule(String, Byte[])\n- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadModule(String, Byte[], Byte[])\n  nameWithType: Assembly.LoadModule(String, Byte[], Byte[])\n  fullName: Assembly.LoadModule(String, Byte[], Byte[])\n- uid: System.Reflection.Assembly.LoadWithPartialName(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadWithPartialName(String)\n  nameWithType: Assembly.LoadWithPartialName(String)\n  fullName: Assembly.LoadWithPartialName(String)\n- uid: System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadWithPartialName(String, Evidence)\n  nameWithType: Assembly.LoadWithPartialName(String, Evidence)\n  fullName: Assembly.LoadWithPartialName(String, Evidence)\n- uid: System.Reflection.Assembly.Location\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Location\n  nameWithType: Assembly.Location\n  fullName: Assembly.Location\n- uid: System.Reflection.Assembly.ManifestModule\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ManifestModule\n  nameWithType: Assembly.ManifestModule\n  fullName: Assembly.ManifestModule\n- uid: System.Reflection.Assembly.ModuleResolve\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ModuleResolve\n  nameWithType: Assembly.ModuleResolve\n  fullName: Assembly.ModuleResolve\n- uid: System.Reflection.ModuleResolveEventHandler\n  parent: System.Reflection\n  isExternal: false\n  name: ModuleResolveEventHandler\n  nameWithType: ModuleResolveEventHandler\n  fullName: System.Reflection.ModuleResolveEventHandler\n- uid: System.Reflection.Assembly.Modules\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Modules\n  nameWithType: Assembly.Modules\n  fullName: Assembly.Modules\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.Module}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<Module>\n  nameWithType: IEnumerable<Module>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Module>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Reflection.Module\n    name: Module\n    nameWithType: Module\n    fullName: System.Reflection.Module\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: op_Equality(Assembly, Assembly)\n  nameWithType: Assembly.op_Equality(Assembly, Assembly)\n  fullName: Assembly.op_Equality(Assembly, Assembly)\n- uid: System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: op_Inequality(Assembly, Assembly)\n  nameWithType: Assembly.op_Inequality(Assembly, Assembly)\n  fullName: Assembly.op_Inequality(Assembly, Assembly)\n- uid: System.Reflection.Assembly.PermissionSet\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: PermissionSet\n  nameWithType: Assembly.PermissionSet\n  fullName: Assembly.PermissionSet\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Reflection.Assembly.ReflectionOnly\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ReflectionOnly\n  nameWithType: Assembly.ReflectionOnly\n  fullName: Assembly.ReflectionOnly\n- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ReflectionOnlyLoad(Byte[])\n  nameWithType: Assembly.ReflectionOnlyLoad(Byte[])\n  fullName: Assembly.ReflectionOnlyLoad(Byte[])\n- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ReflectionOnlyLoad(String)\n  nameWithType: Assembly.ReflectionOnlyLoad(String)\n  fullName: Assembly.ReflectionOnlyLoad(String)\n- uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ReflectionOnlyLoadFrom(String)\n  nameWithType: Assembly.ReflectionOnlyLoadFrom(String)\n  fullName: Assembly.ReflectionOnlyLoadFrom(String)\n- uid: System.Reflection.Assembly.SecurityRuleSet\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: SecurityRuleSet\n  nameWithType: Assembly.SecurityRuleSet\n  fullName: Assembly.SecurityRuleSet\n- uid: System.Security.SecurityRuleSet\n  parent: System.Security\n  isExternal: false\n  name: SecurityRuleSet\n  nameWithType: SecurityRuleSet\n  fullName: System.Security.SecurityRuleSet\n- uid: System.Reflection.Assembly.ToString\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ToString()\n  nameWithType: Assembly.ToString()\n  fullName: Assembly.ToString()\n- uid: System.Reflection.Assembly.UnsafeLoadFrom(System.String)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: UnsafeLoadFrom(String)\n  nameWithType: Assembly.UnsafeLoadFrom(String)\n  fullName: Assembly.UnsafeLoadFrom(String)\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: _Assembly.GetType()\n  nameWithType: Assembly._Assembly.GetType()\n  fullName: Assembly._Assembly.GetType()\n- uid: System.Reflection.Assembly.LoadWithPartialName*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadWithPartialName\n  nameWithType: Assembly.LoadWithPartialName\n  fullName: Assembly.LoadWithPartialName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.#ctor*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly.Assembly\n  fullName: Assembly.Assembly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.CodeBase*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CodeBase\n  nameWithType: Assembly.CodeBase\n  fullName: Assembly.CodeBase\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.CreateInstance*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CreateInstance\n  nameWithType: Assembly.CreateInstance\n  fullName: Assembly.CreateInstance\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.CreateQualifiedName*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CreateQualifiedName\n  nameWithType: Assembly.CreateQualifiedName\n  fullName: Assembly.CreateQualifiedName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.CustomAttributes*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: Assembly.CustomAttributes\n  fullName: Assembly.CustomAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.DefinedTypes*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: DefinedTypes\n  nameWithType: Assembly.DefinedTypes\n  fullName: Assembly.DefinedTypes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.EntryPoint*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: EntryPoint\n  nameWithType: Assembly.EntryPoint\n  fullName: Assembly.EntryPoint\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.Equals*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Equals\n  nameWithType: Assembly.Equals\n  fullName: Assembly.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.EscapedCodeBase*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: EscapedCodeBase\n  nameWithType: Assembly.EscapedCodeBase\n  fullName: Assembly.EscapedCodeBase\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.Evidence*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Evidence\n  nameWithType: Assembly.Evidence\n  fullName: Assembly.Evidence\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.ExportedTypes*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ExportedTypes\n  nameWithType: Assembly.ExportedTypes\n  fullName: Assembly.ExportedTypes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.FullName*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: FullName\n  nameWithType: Assembly.FullName\n  fullName: Assembly.FullName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetAssembly*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetAssembly\n  nameWithType: Assembly.GetAssembly\n  fullName: Assembly.GetAssembly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetCallingAssembly*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetCallingAssembly\n  nameWithType: Assembly.GetCallingAssembly\n  fullName: Assembly.GetCallingAssembly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetCustomAttributes*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: Assembly.GetCustomAttributes\n  fullName: Assembly.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetCustomAttributesData*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetCustomAttributesData\n  nameWithType: Assembly.GetCustomAttributesData\n  fullName: Assembly.GetCustomAttributesData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetEntryAssembly*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetEntryAssembly\n  nameWithType: Assembly.GetEntryAssembly\n  fullName: Assembly.GetEntryAssembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetExecutingAssembly*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetExecutingAssembly\n  nameWithType: Assembly.GetExecutingAssembly\n  fullName: Assembly.GetExecutingAssembly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetExportedTypes*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetExportedTypes\n  nameWithType: Assembly.GetExportedTypes\n  fullName: Assembly.GetExportedTypes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetFile*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetFile\n  nameWithType: Assembly.GetFile\n  fullName: Assembly.GetFile\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetFiles*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetFiles\n  nameWithType: Assembly.GetFiles\n  fullName: Assembly.GetFiles\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetHashCode*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Assembly.GetHashCode\n  fullName: Assembly.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetLoadedModules*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetLoadedModules\n  nameWithType: Assembly.GetLoadedModules\n  fullName: Assembly.GetLoadedModules\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetManifestResourceInfo*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetManifestResourceInfo\n  nameWithType: Assembly.GetManifestResourceInfo\n  fullName: Assembly.GetManifestResourceInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetManifestResourceNames*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetManifestResourceNames\n  nameWithType: Assembly.GetManifestResourceNames\n  fullName: Assembly.GetManifestResourceNames\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetManifestResourceStream*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetManifestResourceStream\n  nameWithType: Assembly.GetManifestResourceStream\n  fullName: Assembly.GetManifestResourceStream\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetModule*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetModule\n  nameWithType: Assembly.GetModule\n  fullName: Assembly.GetModule\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetModules*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetModules\n  nameWithType: Assembly.GetModules\n  fullName: Assembly.GetModules\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetName*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetName\n  nameWithType: Assembly.GetName\n  fullName: Assembly.GetName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetObjectData*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetObjectData\n  nameWithType: Assembly.GetObjectData\n  fullName: Assembly.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetReferencedAssemblies*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetReferencedAssemblies\n  nameWithType: Assembly.GetReferencedAssemblies\n  fullName: Assembly.GetReferencedAssemblies\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetSatelliteAssembly*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetSatelliteAssembly\n  nameWithType: Assembly.GetSatelliteAssembly\n  fullName: Assembly.GetSatelliteAssembly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetType*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetType\n  nameWithType: Assembly.GetType\n  fullName: Assembly.GetType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GetTypes*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GetTypes\n  nameWithType: Assembly.GetTypes\n  fullName: Assembly.GetTypes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.GlobalAssemblyCache*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: GlobalAssemblyCache\n  nameWithType: Assembly.GlobalAssemblyCache\n  fullName: Assembly.GlobalAssemblyCache\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.HostContext*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: HostContext\n  nameWithType: Assembly.HostContext\n  fullName: Assembly.HostContext\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.ImageRuntimeVersion*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ImageRuntimeVersion\n  nameWithType: Assembly.ImageRuntimeVersion\n  fullName: Assembly.ImageRuntimeVersion\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.IsDefined*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: IsDefined\n  nameWithType: Assembly.IsDefined\n  fullName: Assembly.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.IsDynamic*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: IsDynamic\n  nameWithType: Assembly.IsDynamic\n  fullName: Assembly.IsDynamic\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.IsFullyTrusted*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: IsFullyTrusted\n  nameWithType: Assembly.IsFullyTrusted\n  fullName: Assembly.IsFullyTrusted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.Load*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Load\n  nameWithType: Assembly.Load\n  fullName: Assembly.Load\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.LoadFile*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFile\n  nameWithType: Assembly.LoadFile\n  fullName: Assembly.LoadFile\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.LoadFrom*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadFrom\n  nameWithType: Assembly.LoadFrom\n  fullName: Assembly.LoadFrom\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-2.0\n  - netstandard-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.LoadModule*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: LoadModule\n  nameWithType: Assembly.LoadModule\n  fullName: Assembly.LoadModule\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.Location*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Location\n  nameWithType: Assembly.Location\n  fullName: Assembly.Location\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.ManifestModule*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ManifestModule\n  nameWithType: Assembly.ManifestModule\n  fullName: Assembly.ManifestModule\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.Modules*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: Modules\n  nameWithType: Assembly.Modules\n  fullName: Assembly.Modules\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.op_Equality*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: op_Equality\n  nameWithType: Assembly.op_Equality\n  fullName: Assembly.op_Equality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.op_Inequality*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: op_Inequality\n  nameWithType: Assembly.op_Inequality\n  fullName: Assembly.op_Inequality\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.PermissionSet*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: PermissionSet\n  nameWithType: Assembly.PermissionSet\n  fullName: Assembly.PermissionSet\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.ReflectionOnly*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ReflectionOnly\n  nameWithType: Assembly.ReflectionOnly\n  fullName: Assembly.ReflectionOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.ReflectionOnlyLoad*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ReflectionOnlyLoad\n  nameWithType: Assembly.ReflectionOnlyLoad\n  fullName: Assembly.ReflectionOnlyLoad\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ReflectionOnlyLoadFrom\n  nameWithType: Assembly.ReflectionOnlyLoadFrom\n  fullName: Assembly.ReflectionOnlyLoadFrom\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.SecurityRuleSet*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: SecurityRuleSet\n  nameWithType: Assembly.SecurityRuleSet\n  fullName: Assembly.SecurityRuleSet\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.ToString*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: ToString\n  nameWithType: Assembly.ToString\n  fullName: Assembly.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.UnsafeLoadFrom*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: UnsafeLoadFrom\n  nameWithType: Assembly.UnsafeLoadFrom\n  fullName: Assembly.UnsafeLoadFrom\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  nameWithType: Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  fullName: Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: System.Reflection.ICustomAttributeProvider.IsDefined\n  nameWithType: Assembly.System.Reflection.ICustomAttributeProvider.IsDefined\n  fullName: Assembly.System.Reflection.ICustomAttributeProvider.IsDefined\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.5\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType*\n  parent: System.Reflection.Assembly\n  isExternal: false\n  name: System.Runtime.InteropServices._Assembly.GetType\n  nameWithType: Assembly.System.Runtime.InteropServices._Assembly.GetType\n  fullName: Assembly.System.Runtime.InteropServices._Assembly.GetType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)\n  parent: System.Reflection.AssemblyExtensions\n  isExternal: false\n  name: GetExportedTypes(Assembly)\n  nameWithType: AssemblyExtensions.GetExportedTypes(Assembly)\n  fullName: AssemblyExtensions.GetExportedTypes(Assembly)\n- uid: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)\n  parent: System.Reflection.AssemblyExtensions\n  isExternal: false\n  name: GetModules(Assembly)\n  nameWithType: AssemblyExtensions.GetModules(Assembly)\n  fullName: AssemblyExtensions.GetModules(Assembly)\n- uid: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)\n  parent: System.Reflection.AssemblyExtensions\n  isExternal: false\n  name: GetTypes(Assembly)\n  nameWithType: AssemblyExtensions.GetTypes(Assembly)\n  fullName: AssemblyExtensions.GetTypes(Assembly)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Assembly, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(Assembly, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(Assembly)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Assembly)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(Assembly)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(Assembly)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(Assembly, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(Assembly)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Assembly)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(Assembly)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(Assembly, Type)\n  fullName: CustomAttributeExtensions.IsDefined(Assembly, Type)\n- uid: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)\n  parent: System.Reflection.Metadata.AssemblyExtensions\n  isExternal: false\n  name: TryGetRawMetadata(Assembly, Byte*, Int32)\n  nameWithType: AssemblyExtensions.TryGetRawMetadata(Assembly, Byte*, Int32)\n  fullName: AssemblyExtensions.TryGetRawMetadata(Assembly, Byte*, Int32)\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n- uid: System.Runtime.InteropServices._Assembly\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _Assembly\n  nameWithType: _Assembly\n  fullName: System.Runtime.InteropServices._Assembly\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n- uid: System.Security.IEvidenceFactory\n  parent: System.Security\n  isExternal: false\n  name: IEvidenceFactory\n  nameWithType: IEvidenceFactory\n  fullName: System.Security.IEvidenceFactory\n"}