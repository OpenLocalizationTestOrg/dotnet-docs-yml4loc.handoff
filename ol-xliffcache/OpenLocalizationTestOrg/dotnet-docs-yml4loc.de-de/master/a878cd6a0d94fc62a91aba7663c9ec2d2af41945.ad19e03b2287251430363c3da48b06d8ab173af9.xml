{"nodes":[{"content":"The exception that is thrown when a method call is invalid for the object's current state.","nodes":[{"pos":[0,90],"content":"The exception that is thrown when a method call is invalid for the object's current state.","nodes":[{"content":"The exception that is thrown when a method call is invalid for the object's current state.","pos":[0,90]}]}],"pos":[729,820],"yaml":true},{"content":"<xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments. Typically, it is thrown when the state of an object cannot support the method call. For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:  \n  \n-   <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> if objects of a collection are modified after the enumerator is created. For more information, see [Changing a collection while iterating it](#Iterating).  \n  \n-   <xref:System.Resources.ResourceSet.GetString%2A?displayProperty=fullName> if the resource set is closed before the method call is made.  \n  \n-   <xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=fullName>, if the object or objects to be added would result in an incorrectly structured XML document.  \n  \n-   A method that attempts to manipulate the UI from a thread that is not the main or UI thread.  \n  \n> [!IMPORTANT]\n>  Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.  \n  \n In this section:  \n  \n [Some common causes of InvalidOperationException exceptions](#Causes)   \n [Updating a UI thread from a non-UI thread](#UI)  \n [Changing a collection while iterating it](#Iterating)  \n [Sorting an array or collection whose objects cannot be compared](#Sorting)  \n [Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable)   \n [Calling a System.Linq.Enumerable method on an empty collection](#Empty)  \n [Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element](#Single)  \n [Dynamic cross-application domain field access](#Emit)  \n[Throwing an InvalidOperationException exception](#Throwing)  \n[Miscellaneous information](#Misc)  \n  \n<a name=\"Causes\"></a>   \n## Some common causes of InvalidOperationException exceptions  \n The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app. How you handle the issue depends on the specific situation. Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.  \n  \n<a name=\"UI\"></a>   \n### Updating a UI thread from a non-UI thread  \n Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface. However. most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread). An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.  The text of the exception message is shown in the following table.  \n  \n|Application Type|Message|  \n|----------------------|-------------|  \n|WPF app|**The calling thread cannot access this object because a different thread owns it.**|  \n|UWP app|**The application called an interface that was marshalled for a different thread.**|  \n|Windows Forms app|**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**|  \n  \n UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:  \n  \n-   In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=fullName> method to determine if a method is running on a non-UI thread. It returns `true` if the method is running on the UI thread and `false` otherwise. Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=fullName> method to schedule the call on the UI thread.  \n  \n-   In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread. Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread. Use the  \n  \n-   In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=fullName> property to determine if a method is running on a non-UI thread. Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName> method to execute a delegate that updates the UI thread.  \n  \n The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.  Each example requires that you create two controls:  \n  \n-   A text box control named `textBox1`.  In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.  \n  \n-   A button  control named `threadExampleBtn`. The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.  \n  \n In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice. The first call runs synchronously and succeeds. But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread. This results in a <xref:System.InvalidOperationException> exception.  \n  \n WPF and UWP apps  \n [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]\n [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  \n  \n The following version of the `DoSomeWork` method eliminates the exception in a WPF app.  \n  \n [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]\n [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  \n  \n The following version of the `DoSomeWork` method eliminates the exception in a UWP app.  \n  \n [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]\n [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  \n  \n Windows Forms apps  \n [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]\n [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  \n  \n The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app.  \n  \n [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]\n [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  \n  \n<a name=\"Iterating\"></a>   \n### Changing a collection while iterating it  \n The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements. However, it can't be used to add or remove items from the collection. Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, \"**Collection was modified; enumeration operation may not execute.**\"  \n  \n The following example iterates a collection of integers attempts to add the square of each integer to the collection. The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName> method.  \n  \n [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]\n [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  \n  \n You can eliminate the exception in one of two ways, depending on your application logic:  \n  \n-   If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`. The following example uses the for statement to add the square of numbers in the collection to the collection.  \n  \n     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]\n     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  \n  \n     Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop. Otherwise, if an element is added to the collection on every iteration, an endless loop results.  \n  \n-   If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.  The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.  \n  \n     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]\n     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  \n  \n<a name=\"Sorting\"></a>   \n### Sorting an array or collection whose objects cannot be compared  \n General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface. If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception. The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them. As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method throws an <xref:System.InvalidOperationException>.  \n  \n [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]\n [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  \n  \n You can eliminate the exception in any of three ways:  \n  \n-   If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface. This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> or the <xref:System.IComparable.CompareTo%2A> method. Adding an interface implementation to an existing type is not a breaking change.  \n  \n     The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class. You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.  \n  \n     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]\n     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  \n  \n-   If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.  You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter. This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.  \n  \n     The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.  It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=fullName> method.  \n  \n     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]\n     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  \n  \n-   If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting. The delegate signature is  \n  \n    ```vb  \n    Function Comparison(Of T)(x As T, y As T) As Integer  \n    ```  \n  \n    ```csharp  \n    int Comparison<T>(T x, T y)  \n    ```  \n  \n     The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.  It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=fullName> method.  \n  \n     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]\n     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  \n  \n<a name=\"Nullable\"></a>   \n### Casting a Nullable\\<T> that is null to its underlying type  \n Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, \"**Nullable object must have a value.**  \n  \n The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value.  \n  \n [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]\n [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  \n  \n To prevent the exception:  \n  \n-   Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=fullName> property to select only those elements that are not `null`.  \n  \n-   Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName> overloads to provide a default value for a `null` value.  \n  \n The following example does both to avoid the  <xref:System.InvalidOperationException> exception.  \n  \n [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]\n [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  \n  \n<a name=\"Empty\"></a>   \n### Calling a System.Linq.Enumerable method on an empty collection  \n The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=fullName>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods perform operations on a sequence and return a single result.   Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`. The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.  \n  \n> [!NOTE]\n>  Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads. Be sure that you understand the behavior of the overload that you choose.  \n  \n The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=fullName> methods.  \n  \n|Method|Message|  \n|------------|-------------|  \n|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|**Sequence contains no elements**|  \n|`First`|**Sequence contains no matching element**|  \n|`Single` <br /> `SingleOrDefault`|**Sequence contains more than one matching element**|  \n  \n How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.  \n  \n-   When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence. In this case, catching or rethrowing the exception is appropriate .  \n  \n-   If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName> overload to determine whether a sequence contains any elements.  \n  \n    > [!TIP]\n    >  Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.  \n  \n-   If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=fullName>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName>, that returns a default value instead of a member of the sequence.  \n  \n The examples provide additional detail.  \n  \n The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName> method to compute the average of a sequence whose values are greater than 4. Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.  \n  \n [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]\n [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  \n  \n The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.  \n  \n [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]\n [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  \n  \n The <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition. If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.  \n  \n In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.  \n  \n [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]\n [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  \n  \n You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> to return a specified or default value. If the method does not find a first element in the sequence, it returns  the default value for that data type.  The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=fullName> for the <xref:System.DateTime> type.  \n  \n> [!NOTE]\n>  Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.  In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName>method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method.  \n  \n The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.  \n  \n [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]\n [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  \n  \n<a name=\"Single\"></a>   \n### Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element  \n The <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.    If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.  \n  \n You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method to return a default value instead of throwing an exception when the sequence contains no elements. However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.  \n  \n The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods.  \n  \n|Method|Message|  \n|------------|-------------|  \n|`Single`|**Sequence contains no matching element**|  \n|`Single` <br /> `SingleOrDefault`|**Sequence contains more than one matching element**|  \n  \n In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.  \n  \n [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]\n [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  \n  \n The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method. However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.  \n  \n [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]\n [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  \n  \n Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> assumes a sequence with zero or one result, but no more. If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate. Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.  \n  \n<a name=\"Emit\"></a>   \n### Dynamic cross-application domain field access  \n The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=fullName> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing. The address of a field can only be accessed from the application domain in which it resides.  \n  \n<a name=\"Throwing\"></a>   \n## Throwing an InvalidOperationException exception  \n You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call. That is, the method call is valid in some circumstances or contexts, but is invalid in others.  \n  \n If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.  \n  \n<a name=\"Misc\"></a>   \n## Miscellaneous information  \n <xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.  \n  \n For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.","nodes":[{"pos":[0,323],"content":"<xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments. Typically, it is thrown when the state of an object cannot support the method call. For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:","nodes":[{"content":"<xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments. Typically, it is thrown when the state of an object cannot support the method call. For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:","pos":[0,323],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments.","pos":[0,143],"source":"<xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments."},{"content":"Typically, it is thrown when the state of an object cannot support the method call.","pos":[144,227]},{"content":"For example, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown by methods such as:","pos":[228,323],"source":" For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:"}]}]},{"pos":[333,562],"content":"<xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> if objects of a collection are modified after the enumerator is created. For more information, see [Changing a collection while iterating it](#Iterating).","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName&gt;</ph> if objects of a collection are modified after the enumerator is created.","pos":[0,147],"source":"<xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> if objects of a collection are modified after the enumerator is created."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Changing a collection while iterating it<ept id=\"p1\">](#Iterating)</ept>.","pos":[148,229],"source":" For more information, see [Changing a collection while iterating it](#Iterating)."}]},{"pos":[572,707],"content":"<xref:System.Resources.ResourceSet.GetString%2A?displayProperty=fullName> if the resource set is closed before the method call is made.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Resources.ResourceSet.GetString%2A?displayProperty=fullName&gt;</ph> if the resource set is closed before the method call is made.","pos":[0,135],"source":"<xref:System.Resources.ResourceSet.GetString%2A?displayProperty=fullName> if the resource set is closed before the method call is made."}]},{"pos":[717,876],"content":"<xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=fullName>, if the object or objects to be added would result in an incorrectly structured XML document.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=fullName&gt;</ph>, if the object or objects to be added would result in an incorrectly structured XML document.","pos":[0,159],"source":"<xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=fullName>, if the object or objects to be added would result in an incorrectly structured XML document."}]},{"pos":[886,978],"content":"A method that attempts to manipulate the UI from a thread that is not the main or UI thread.","nodes":[{"content":"A method that attempts to manipulate the UI from a thread that is not the main or UI thread.","pos":[0,92]}]},{"pos":[986,1220],"content":"[!IMPORTANT]\n Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.","leadings":["","> "],"nodes":[{"content":"Because the <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <ph id=\"ph2\">&lt;xref:System.Exception.Message%2A&gt;</ph> property.","pos":[14,232],"source":" Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property."}]},{"pos":[1227,1243],"content":"In this section:","nodes":[{"content":"In this section:","pos":[0,16]}]},{"pos":[1250,1928],"content":"[Some common causes of InvalidOperationException exceptions](#Causes)   \n [Updating a UI thread from a non-UI thread](#UI)  \n [Changing a collection while iterating it](#Iterating)  \n [Sorting an array or collection whose objects cannot be compared](#Sorting)  \n [Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable)   \n [Calling a System.Linq.Enumerable method on an empty collection](#Empty)  \n [Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element](#Single)  \n [Dynamic cross-application domain field access](#Emit)  \n[Throwing an InvalidOperationException exception](#Throwing)  \n[Miscellaneous information](#Misc)","nodes":[{"content":"<bpt id=\"p1\">[</bpt>Some common causes of InvalidOperationException exceptions<ept id=\"p1\">](#Causes)</ept><ph id=\"ph1\"> </ph>","pos":[0,70],"source":"[Some common causes of InvalidOperationException exceptions](#Causes) "},{"content":"<bpt id=\"p1\"> [</bpt>Updating a UI thread from a non-UI thread<ept id=\"p1\">](#UI)</ept>","pos":[73,122],"source":" [Updating a UI thread from a non-UI thread](#UI)"},{"content":"<bpt id=\"p1\"> [</bpt>Changing a collection while iterating it<ept id=\"p1\">](#Iterating)</ept>","pos":[125,180],"source":" [Changing a collection while iterating it](#Iterating)"},{"content":"<bpt id=\"p1\"> [</bpt>Sorting an array or collection whose objects cannot be compared<ept id=\"p1\">](#Sorting)</ept>","pos":[183,259],"source":" [Sorting an array or collection whose objects cannot be compared](#Sorting)"},{"content":"<bpt id=\"p1\"> [</bpt>Casting a Nullable<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph> that is null to its underlying type<ept id=\"p1\">](#Nullable)</ept><ph id=\"ph3\"> </ph>","pos":[262,340],"source":" [Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable) "},{"content":"<bpt id=\"p1\"> [</bpt>Calling a System.Linq.Enumerable method on an empty collection<ept id=\"p1\">](#Empty)</ept>","pos":[343,416],"source":" [Calling a System.Linq.Enumerable method on an empty collection](#Empty)"},{"content":"<bpt id=\"p1\"> [</bpt>Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element<ept id=\"p1\">](#Single)</ept>","pos":[419,520],"source":" [Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element](#Single)"},{"content":"<bpt id=\"p1\"> [</bpt>Dynamic cross-application domain field access<ept id=\"p1\">](#Emit)</ept>","pos":[523,578],"source":" [Dynamic cross-application domain field access](#Emit)"},{"content":"<bpt id=\"p1\">[</bpt>Throwing an InvalidOperationException exception<ept id=\"p1\">](#Throwing)</ept>","pos":[581,641],"source":"[Throwing an InvalidOperationException exception](#Throwing)"},{"content":"<bpt id=\"p1\">[</bpt>Miscellaneous information<ept id=\"p1\">](#Misc)</ept>","pos":[644,678],"source":"[Miscellaneous information](#Misc)"}]},{"pos":[1962,2020],"content":"Some common causes of InvalidOperationException exceptions","linkify":"Some common causes of InvalidOperationException exceptions","nodes":[{"content":"Some common causes of InvalidOperationException exceptions","pos":[0,58]}]},{"pos":[2024,2374],"content":"The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app. How you handle the issue depends on the specific situation. Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.","nodes":[{"content":"The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app. How you handle the issue depends on the specific situation. Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.","pos":[0,350],"nodes":[{"content":"The following sections show how some common cases in which in <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception is thrown in an app.","pos":[0,132],"source":"The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app."},{"content":"How you handle the issue depends on the specific situation.","pos":[133,192]},{"content":"Most commonly, however, the exception results from developer error, and the <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception can be anticipated and avoided.","pos":[193,350],"source":" Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided."}]}]},{"pos":[2405,2446],"content":"Updating a UI thread from a non-UI thread","linkify":"Updating a UI thread from a non-UI thread","nodes":[{"content":"Updating a UI thread from a non-UI thread","pos":[0,41]}]},{"pos":[2450,3053],"content":"Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface. However. most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread). An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.  The text of the exception message is shown in the following table.","nodes":[{"content":"Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface. However. most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread). An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.  The text of the exception message is shown in the following table.","pos":[0,603],"nodes":[{"content":"Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface.","pos":[0,143]},{"content":"However.","pos":[144,152]},{"content":"most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread).","pos":[153,406]},{"content":"An <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when you try to access a UI element from a thread other than the UI thread.","pos":[407,535],"source":" An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread."},{"content":"The text of the exception message is shown in the following table.","pos":[537,603]}]}]},{"pos":[3060,3076],"content":"Application Type","nodes":[{"content":"Application Type","pos":[0,16]}]},{"pos":[3077,3084],"content":"Message","nodes":[{"content":"Message","pos":[0,7]}]},{"pos":[3130,3137],"content":"WPF app","nodes":[{"content":"WPF app","pos":[0,7]}]},{"pos":[3138,3222],"content":"<bpt id=\"p1\">**</bpt>The calling thread cannot access this object because a different thread owns it.<ept id=\"p1\">**</ept>","source":"**The calling thread cannot access this object because a different thread owns it.**"},{"pos":[3227,3234],"content":"UWP app","nodes":[{"content":"UWP app","pos":[0,7]}]},{"pos":[3235,3318],"content":"<bpt id=\"p1\">**</bpt>The application called an interface that was marshalled for a different thread.<ept id=\"p1\">**</ept>","source":"**The application called an interface that was marshalled for a different thread.**"},{"pos":[3323,3340],"content":"Windows Forms app","nodes":[{"content":"Windows Forms app","pos":[0,17]}]},{"pos":[3341,3461],"content":"<bpt id=\"p1\">**</bpt>Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.<ept id=\"p1\">**</ept>","source":"**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**"},{"pos":[3469,3706],"content":"UI frameworks for the .NET Framework implement a <bpt id=\"p1\">*</bpt>dispatcher<ept id=\"p1\">*</ept> pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:","source":"UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:"},{"pos":[3716,4123],"content":"In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=fullName> method to determine if a method is running on a non-UI thread. It returns `true` if the method is running on the UI thread and `false` otherwise. Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=fullName> method to schedule the call on the UI thread.","nodes":[{"content":"In WPF apps, call the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=fullName&gt;</ph> method to determine if a method is running on a non-UI thread.","pos":[0,167],"source":"In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=fullName> method to determine if a method is running on a non-UI thread."},{"content":"It returns <ph id=\"ph1\">`true`</ph> if the method is running on the UI thread and <ph id=\"ph2\">`false`</ph> otherwise.","pos":[168,250],"source":" It returns `true` if the method is running on the UI thread and `false` otherwise."},{"content":"Call one of the overloads of the <ph id=\"ph1\">&lt;xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=fullName&gt;</ph> method to schedule the call on the UI thread.","pos":[251,407],"source":" Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=fullName> method to schedule the call on the UI thread."}]},{"pos":[4133,4558],"content":"In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread. Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread. Use the","nodes":[{"content":"In UWP apps, call the <bpt id=\"p1\">[</bpt>CoreDispatcher.HasThreadAccess<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx)</ept> method to determine if a method is running on a non-UI thread.","pos":[0,224],"source":"In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread."},{"content":"Call the  <bpt id=\"p1\">[</bpt>CoreDispatcher.RunAsync<ept id=\"p1\">](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx)</ept> method to execute a delegate that updates the UI thread.","pos":[225,417],"source":" Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread."},{"content":"Use the","pos":[418,425]}]},{"pos":[4568,4903],"content":"In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=fullName> property to determine if a method is running on a non-UI thread. Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName> method to execute a delegate that updates the UI thread.","nodes":[{"content":"In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=fullName> property to determine if a method is running on a non-UI thread. Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName> method to execute a delegate that updates the UI thread.","pos":[0,335],"nodes":[{"content":"In Windows Forms apps, use the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=fullName&gt;</ph> property to determine if a method is running on a non-UI thread.","pos":[0,174],"source":"In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=fullName> property to determine if a method is running on a non-UI thread."},{"content":"Call one of the overloads of the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName&gt;</ph> method to execute a delegate that updates the UI thread.","pos":[175,335],"source":" Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName> method to execute a delegate that updates the UI thread."}]}]},{"pos":[4910,5158],"content":"The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.  Each example requires that you create two controls:","nodes":[{"content":"The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.  Each example requires that you create two controls:","pos":[0,248],"nodes":[{"content":"The following examples illustrate the <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.","pos":[0,195],"source":"The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it."},{"content":"Each example requires that you create two controls:","pos":[197,248]}]}]},{"pos":[5168,5317],"content":"A text box control named `textBox1`.  In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.","nodes":[{"content":"A text box control named <ph id=\"ph1\">`textBox1`</ph>.","pos":[0,36],"source":"A text box control named `textBox1`."},{"content":"In a Windows Forms app, you should set its <ph id=\"ph1\">&lt;xref:System.Windows.Forms.TextBox.Multiline%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph>.","pos":[38,149],"source":"  In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`."}]},{"pos":[5327,5461],"content":"A button  control named `threadExampleBtn`. The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.","nodes":[{"content":"A button  control named <ph id=\"ph1\">`threadExampleBtn`</ph>.","pos":[0,43],"source":"A button  control named `threadExampleBtn`."},{"content":"The example provides a handler, <ph id=\"ph1\">`ThreadsExampleBtn_Click`</ph>, for the button's <ph id=\"ph2\">`Click`</ph> event.","pos":[44,134],"source":" The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event."}]},{"pos":[5468,5803],"content":"In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice. The first call runs synchronously and succeeds. But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread. This results in a <xref:System.InvalidOperationException> exception.","nodes":[{"content":"In each case, the <ph id=\"ph1\">`threadExampleBtn_Click`</ph> event handler calls the <ph id=\"ph2\">`DoSomeWork`</ph> method twice.","pos":[0,93],"source":"In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice."},{"content":"The first call runs synchronously and succeeds.","pos":[94,141]},{"content":"But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread.","pos":[142,266]},{"content":"This results in a <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception.","pos":[267,335],"source":" This results in a <xref:System.InvalidOperationException> exception."}]},{"pos":[5810,6207],"content":"WPF and UWP apps  \n[!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]\n[!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]","leadings":[""," "," "],"nodes":[{"content":"WPF and UWP apps","pos":[0,16]},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException.Threading.WPF1#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException.Threading.WPF1#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)</ept><ept id=\"p3\">]</ept>","pos":[19,395],"source":"[!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]\n[!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]"}]},{"pos":[6214,6301],"content":"The following version of the <ph id=\"ph1\">`DoSomeWork`</ph> method eliminates the exception in a WPF app.","source":"The following version of the `DoSomeWork` method eliminates the exception in a WPF app."},{"pos":[6308,6705],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException.Threading.WPF2#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException.Threading.WPF2#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]\n[!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]"},{"pos":[6712,6799],"content":"The following version of the <ph id=\"ph1\">`DoSomeWork`</ph> method eliminates the exception in a UWP app.","source":"The following version of the `DoSomeWork` method eliminates the exception in a UWP app."},{"pos":[6806,7175],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException.Threading.UWP#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException.Threading.UWP#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]\n[!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]"},{"pos":[7182,7553],"content":"Windows Forms apps  \n[!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]\n[!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]","leadings":[""," "," "],"nodes":[{"content":"Windows Forms apps","pos":[0,18]},{"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException.Threading.WF#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException.Threading.WF#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)</ept><ept id=\"p3\">]</ept>","pos":[21,369],"source":"[!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]\n[!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]"}]},{"pos":[7560,7657],"content":"The following version of the <ph id=\"ph1\">`DoSomeWork`</ph> method eliminates the exception in a Windows Forms app.","source":"The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app."},{"pos":[7664,8017],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException.Threading.WF2#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException.Threading.WF2#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]\n[!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]"},{"pos":[8055,8095],"content":"Changing a collection while iterating it","linkify":"Changing a collection while iterating it","nodes":[{"content":"Changing a collection while iterating it","pos":[0,40]}]},{"pos":[8099,8509],"content":"The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements. However, it can't be used to add or remove items from the collection. Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, \"**Collection was modified; enumeration operation may not execute.**\"","nodes":[{"content":"The <ph id=\"ph1\">`foreach`</ph> statement in C# or <ph id=\"ph2\">`For Each`</ph> statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements.","pos":[0,163],"source":"The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements."},{"content":"However, it can't be used to add or remove items from the collection.","pos":[164,233]},{"content":"Doing this throws an  <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception with a message that is similar to, \"<bpt id=\"p1\">**</bpt>Collection was modified; enumeration operation may not execute.<ept id=\"p1\">**</ept>\"","pos":[234,410],"source":" Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, \"**Collection was modified; enumeration operation may not execute.**\""}]},{"pos":[8516,8805],"content":"The following example iterates a collection of integers attempts to add the square of each integer to the collection. The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName> method.","nodes":[{"content":"The following example iterates a collection of integers attempts to add the square of each integer to the collection. The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName> method.","pos":[0,289],"nodes":[{"content":"The following example iterates a collection of integers attempts to add the square of each integer to the collection.","pos":[0,117]},{"content":"The example throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> with the first call to the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName&gt;</ph> method.","pos":[118,289],"source":" The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName> method."}]}]},{"pos":[8812,9119],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]\n [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]"},{"pos":[9126,9214],"content":"You can eliminate the exception in one of two ways, depending on your application logic:","nodes":[{"content":"You can eliminate the exception in one of two ways, depending on your application logic:","pos":[0,88]}]},{"pos":[9224,9488],"content":"If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`. The following example uses the for statement to add the square of numbers in the collection to the collection.","nodes":[{"content":"If elements must be added to the collection while iterating it, you can iterate it by index using the <ph id=\"ph1\">`for`</ph> statement instead of <ph id=\"ph2\">`foreach`</ph> or <ph id=\"ph3\">`For Each`</ph>.","pos":[0,153],"source":"If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`."},{"content":"The following example uses the for statement to add the square of numbers in the collection to the collection.","pos":[154,264]}]},{"pos":[9499,9810],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]\n [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]"},{"pos":[9821,10273],"content":"Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop. Otherwise, if an element is added to the collection on every iteration, an endless loop results.","nodes":[{"content":"Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from <ph id=\"ph1\">`Count`</ph> - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop.","pos":[0,355],"source":"Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop."},{"content":"Otherwise, if an element is added to the collection on every iteration, an endless loop results.","pos":[356,452]}]},{"pos":[10283,10659],"content":"If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.  The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.","nodes":[{"content":"If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.  The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.","pos":[0,376],"nodes":[{"content":"If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.","pos":[0,198]},{"content":"The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.","pos":[200,376]}]}]},{"pos":[10670,10981],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]\n [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]"},{"pos":[11017,11080],"content":"Sorting an array or collection whose objects cannot be compared","linkify":"Sorting an array or collection whose objects cannot be compared","nodes":[{"content":"Sorting an array or collection whose objects cannot be compared","pos":[0,63]}]},{"pos":[11084,11920],"content":"General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface. If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception. The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them. As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method throws an <xref:System.InvalidOperationException>.","nodes":[{"content":"General-purpose sorting methods, such as the <ph id=\"ph1\">&lt;xref:System.Array.Sort%28System.Array%29?displayProperty=fullName&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName&gt;</ph> method, usually require that at least one of the objects to be sorted implement the <ph id=\"ph3\">&lt;xref:System.IComparable%601&gt;</ph> or the <ph id=\"ph4\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[0,357],"source":"General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface."},{"content":"If not, the collection or array cannot be sorted, and the method throws an  <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception.","pos":[358,484],"source":" If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception."},{"content":"The following example defines a <ph id=\"ph1\">`Person`</ph> class, stores two <ph id=\"ph2\">`Person`</ph> objects in a generic <ph id=\"ph3\">&lt;xref:System.Collections.Generic.List%601&gt;</ph> object, and attempts to sort them.","pos":[485,651],"source":" The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them."},{"content":"As the output from the example shows, the call to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName&gt;</ph> method throws an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[652,836],"source":" As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method throws an <xref:System.InvalidOperationException>."}]},{"pos":[11927,12238],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#12<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#12<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]\n [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]"},{"pos":[12245,12298],"content":"You can eliminate the exception in any of three ways:","nodes":[{"content":"You can eliminate the exception in any of three ways:","pos":[0,53]}]},{"pos":[12308,12758],"content":"If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface. This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> or the <xref:System.IComparable.CompareTo%2A> method. Adding an interface implementation to an existing type is not a breaking change.","nodes":[{"content":"If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface. This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> or the <xref:System.IComparable.CompareTo%2A> method. Adding an interface implementation to an existing type is not a breaking change.","pos":[0,450],"nodes":[{"content":"If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <ph id=\"ph1\">&lt;xref:System.IComparable%601&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.IComparable&gt;</ph> interface.","pos":[0,203],"source":"If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface."},{"content":"This requires that you implement either the <ph id=\"ph1\">&lt;xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName&gt;</ph> or the <ph id=\"ph2\">&lt;xref:System.IComparable.CompareTo%2A&gt;</ph> method.","pos":[204,369],"source":" This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> or the <xref:System.IComparable.CompareTo%2A> method."},{"content":"Adding an interface implementation to an existing type is not a breaking change.","pos":[370,450]}]}]},{"pos":[12769,13039],"content":"The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class. You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.","nodes":[{"content":"The following example uses this approach to provide an <ph id=\"ph1\">&lt;xref:System.IComparable%601&gt;</ph> implementation  for the <ph id=\"ph2\">`Person`</ph> class.","pos":[0,124],"source":"The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class."},{"content":"You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.","pos":[125,270]}]},{"pos":[13050,13365],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#13<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#13<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]\n [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]"},{"pos":[13375,13834],"content":"If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.  You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter. This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.","nodes":[{"content":"If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface.","pos":[0,199],"source":"If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface."},{"content":"You can call an overload of the <ph id=\"ph1\">`Sort`</ph> method that includes an  <ph id=\"ph2\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> parameter.","pos":[201,323],"source":"  You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter."},{"content":"This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.","pos":[324,459]}]},{"pos":[13845,14155],"content":"The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.  It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=fullName> method.","nodes":[{"content":"The following example uses the approach by developing a custom <ph id=\"ph1\">`PersonComparer`</ph> class that is used to sort <ph id=\"ph2\">`Person`</ph> collections.","pos":[0,128],"source":"The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections."},{"content":"It then passes an instance of this class to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=fullName&gt;</ph> method.","pos":[130,310],"source":"  It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=fullName> method."}]},{"pos":[14166,14481],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#14<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#14<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]\n [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]"},{"pos":[14491,14670],"content":"If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting. The delegate signature is","nodes":[{"content":"If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting. The delegate signature is","pos":[0,179],"nodes":[{"content":"If you cannot modify the source code for the type you are trying to sort, you can create a  <ph id=\"ph1\">&lt;xref:System.Comparison%601&gt;</ph> delegate to perform the sorting.","pos":[0,153],"source":"If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting."},{"content":"The delegate signature is","pos":[154,179]}]}]},{"pos":[14828,15126],"content":"The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.  It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=fullName> method.","nodes":[{"content":"The following example uses the approach by defining a  <ph id=\"ph1\">`PersonComparison`</ph> method that matches the  <ph id=\"ph2\">&lt;xref:System.Comparison%601&gt;</ph> delegate signature.","pos":[0,147],"source":"The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature."},{"content":"It then passes this delegate to the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=fullName&gt;</ph> method.","pos":[149,298],"source":"  It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=fullName> method."}]},{"pos":[15137,15452],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#15<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#15<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]\n [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]"},{"pos":[15489,15547],"content":"Casting a Nullable\\<T> that is null to its underlying type","linkify":"Casting a Nullable\\<T> that is null to its underlying type","nodes":[{"content":"Casting a Nullable<ph id=\"ph1\">\\&lt;</ph>T&gt; that is null to its underlying type","pos":[0,58],"source":"Casting a Nullable\\<T> that is null to its underlying type"}]},{"pos":[15551,15775],"content":"Attempting to cast a <ph id=\"ph1\">&lt;xref:System.Nullable%601&gt;</ph> value that is <ph id=\"ph2\">`null`</ph> to its underlying type throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph> exception  and displays the error message, \"<bpt id=\"p1\">**</bpt>Nullable object must have a value.<ept id=\"p1\">**</ept>","source":"Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, \"**Nullable object must have a value.**"},{"pos":[15782,15947],"content":"The following example throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception  when it attempts to iterate an array that includes a <ph id=\"ph2\">`Nullable(Of Integer)`</ph> value.","source":"The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value."},{"pos":[15954,16259],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]\n [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]"},{"pos":[16266,16291],"content":"To prevent the exception:","nodes":[{"content":"To prevent the exception:","pos":[0,25]}]},{"pos":[16301,16432],"content":"Use the <ph id=\"ph1\">&lt;xref:System.Nullable%601.HasValue%2A?displayProperty=fullName&gt;</ph> property to select only those elements that are not <ph id=\"ph2\">`null`</ph>.","source":"Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=fullName> property to select only those elements that are not `null`."},{"pos":[16442,16587],"content":"Call one of the <ph id=\"ph1\">&lt;xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName&gt;</ph> overloads to provide a default value for a <ph id=\"ph2\">`null`</ph> value.","source":"Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName> overloads to provide a default value for a `null` value."},{"pos":[16594,16690],"content":"The following example does both to avoid the  <xref:System.InvalidOperationException> exception.","nodes":[{"content":"The following example does both to avoid the  <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception.","pos":[0,96],"source":"The following example does both to avoid the  <xref:System.InvalidOperationException> exception."}]},{"pos":[16697,17002],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]\n[!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]"},{"pos":[17036,17098],"content":"Calling a System.Linq.Enumerable method on an empty collection","linkify":"Calling a System.Linq.Enumerable method on an empty collection","nodes":[{"content":"Calling a System.Linq.Enumerable method on an empty collection","pos":[0,62]}]},{"pos":[17102,18068],"content":"The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=fullName>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods perform operations on a sequence and return a single result.   Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`. The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.Max%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.Min%2A?displayProperty=fullName&gt;</ph>,  <ph id=\"ph7\">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;</ph>, and <ph id=\"ph8\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph> methods perform operations on a sequence and return a single result.","pos":[0,608],"source":"The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=fullName>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods perform operations on a sequence and return a single result."},{"content":"Some overloads of these methods throw an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception when the sequence is empty, while other overloads return <ph id=\"ph2\">`null`</ph>.","pos":[611,766],"source":"   Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph> method also throws an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> exception when the sequence contains more than one element.","pos":[767,966],"source":" The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element."}]},{"pos":[18076,18259],"content":"[!NOTE]\n Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads. Be sure that you understand the behavior of the overload that you choose.","leadings":["","> "],"nodes":[{"content":" Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads. Be sure that you understand the behavior of the overload that you choose.","pos":[8,181],"nodes":[{"content":"Most of the methods that throw an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception are overloads.","pos":[1,99],"source":" Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads."},{"content":"Be sure that you understand the behavior of the overload that you choose.","pos":[100,173]}]}]},{"pos":[18266,18469],"content":"The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=fullName> methods.","nodes":[{"content":"The following table lists the exception messages from the <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception objects thrown by calls to some <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable?displayProperty=fullName&gt;</ph> methods.","pos":[0,203],"source":"The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=fullName> methods."}]},{"pos":[18476,18482],"content":"Method","nodes":[{"content":"Method","pos":[0,6]}]},{"pos":[18483,18490],"content":"Message","nodes":[{"content":"Message","pos":[0,7]}]},{"pos":[18526,18594],"content":"`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`","nodes":[]},{"pos":[18595,18628],"content":"<bpt id=\"p1\">**</bpt>Sequence contains no elements<ept id=\"p1\">**</ept>","source":"**Sequence contains no elements**"},{"pos":[18641,18682],"content":"<bpt id=\"p1\">**</bpt>Sequence contains no matching element<ept id=\"p1\">**</ept>","source":"**Sequence contains no matching element**"},{"pos":[18687,18720],"content":"`Single` <br /> `SingleOrDefault`","nodes":[]},{"pos":[18721,18773],"content":"<bpt id=\"p1\">**</bpt>Sequence contains more than one matching element<ept id=\"p1\">**</ept>","source":"**Sequence contains more than one matching element**"},{"pos":[18781,18903],"content":"How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.","nodes":[{"content":"How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.","pos":[0,122]}]},{"pos":[18913,19173],"content":"When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence. In this case, catching or rethrowing the exception is appropriate .","nodes":[{"content":"When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence. In this case, catching or rethrowing the exception is appropriate .","pos":[0,260],"nodes":[{"content":"When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence.","pos":[0,192]},{"content":"In this case, catching or rethrowing the exception is appropriate .","pos":[193,260]}]}]},{"pos":[19183,19414],"content":"If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName> overload to determine whether a sequence contains any elements.","nodes":[{"content":"If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName&gt;</ph> overload to determine whether a sequence contains any elements.","pos":[0,231],"source":"If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName> overload to determine whether a sequence contains any elements."}]},{"pos":[19426,19805],"content":"[!TIP]\nCalling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.","leadings":["","    >  "],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName&gt;</ph> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.","pos":[7,372],"source":"Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive."}]},{"pos":[19815,20386],"content":"If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=fullName>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName>, that returns a default value instead of a member of the sequence.","nodes":[{"content":"If you've called a method such as <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;</ph>, you can substitute an alternate method, such as <ph id=\"ph4\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=fullName&gt;</ph>, or  <ph id=\"ph6\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph>, that returns a default value instead of a member of the sequence.","pos":[0,571],"source":"If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=fullName>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName>, that returns a default value instead of a member of the sequence."}]},{"pos":[20393,20432],"content":"The examples provide additional detail.","nodes":[{"content":"The examples provide additional detail.","pos":[0,39]}]},{"pos":[20439,20778],"content":"The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName> method to compute the average of a sequence whose values are greater than 4. Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.","nodes":[{"content":"The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName> method to compute the average of a sequence whose values are greater than 4. Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.","pos":[0,339],"nodes":[{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName&gt;</ph> method to compute the average of a sequence whose values are greater than 4.","pos":[0,173],"source":"The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName> method to compute the average of a sequence whose values are greater than 4."},{"content":"Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception.","pos":[174,339],"source":" Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception."}]}]},{"pos":[20785,21094],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]\n[!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]"},{"pos":[21101,21334],"content":"The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.","nodes":[{"content":"The exception can be eliminated by calling the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Any%2A&gt;</ph> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.","pos":[0,233],"source":"The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows."}]},{"pos":[21341,21650],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]\n[!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]"},{"pos":[21657,21975],"content":"The <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition. If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.","nodes":[{"content":"The <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition. If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.","pos":[0,318],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt;</ph> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition.","pos":[0,184],"source":"The <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition."},{"content":"If the sequence is empty and therefore does not have a first element, it throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception.","pos":[185,318],"source":" If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception."}]}]},{"pos":[21982,22323],"content":"In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.","nodes":[{"content":"In the following example, the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName&gt;</ph> method throws an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> exception because the dbQueryResults array doesn't contain an element greater than 4.","pos":[0,341],"source":"In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4."}]},{"pos":[22330,22639],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)</ept><ept id=\"p3\">]</ept>","leadings":[""," "],"source":"[!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]\n[!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]"},{"pos":[22646,23147],"content":"You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> to return a specified or default value. If the method does not find a first element in the sequence, it returns  the default value for that data type.  The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=fullName> for the <xref:System.DateTime> type.","nodes":[{"content":"You can call the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName&gt;</ph> method instead of <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt;</ph> to return a specified or default value.","pos":[0,211],"source":"You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> to return a specified or default value."},{"content":"If the method does not find a first element in the sequence, it returns  the default value for that data type.","pos":[212,322]},{"content":"The default value is <ph id=\"ph1\">`null`</ph> for a reference type, zero for a numeric data type, and <ph id=\"ph2\">&lt;xref:System.DateTime.MinValue?displayProperty=fullName&gt;</ph> for the <ph id=\"ph3\">&lt;xref:System.DateTime&gt;</ph> type.","pos":[324,501],"source":"  The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=fullName> for the <xref:System.DateTime> type."}]},{"pos":[23155,23632],"content":"[!NOTE]\n Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.  In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName>method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":" Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.  In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName>method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method.","pos":[8,475],"nodes":[{"content":"Interpreting the value returned by the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName&gt;</ph> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.","pos":[1,225],"source":" Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method is often complicated by the fact that the default value of the type can be a valid value in the sequence."},{"content":"In this case, you an call the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName&gt;</ph>method to determine whether the sequence has valid members before calling the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.First%2A?displayProperty=fullName&gt;</ph> method.","pos":[227,467],"source":"  In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName>method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method."}]}]},{"pos":[23639,23953],"content":"The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.","nodes":[{"content":"The following example calls the  <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName&gt;</ph> method to prevent the <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> exception thrown in the previous example.","pos":[0,314],"source":"The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example."}]},{"pos":[23960,24269],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#9<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#9<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]\n [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]"},{"pos":[24304,24393],"content":"Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element","linkify":"Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element","nodes":[{"content":"Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element","pos":[0,89]}]},{"pos":[24397,24736],"content":"The <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.    If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.","nodes":[{"content":"The <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.    If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.","pos":[0,339],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;</ph> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.","pos":[0,183],"source":"The <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition."},{"content":"If there are no elements in the sequence, or if there is more than one element , the method throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception.","pos":[187,339],"source":"    If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception."}]}]},{"pos":[24743,25149],"content":"You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method to return a default value instead of throwing an exception when the sequence contains no elements. However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.","nodes":[{"content":"You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method to return a default value instead of throwing an exception when the sequence contains no elements. However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.","pos":[0,406],"nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph> method to return a default value instead of throwing an exception when the sequence contains no elements.","pos":[0,195],"source":"You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method to return a default value instead of throwing an exception when the sequence contains no elements."},{"content":"However, the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph> method still throws an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> exception  when the sequence contains more than one element.","pos":[196,406],"source":" However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element."}]}]},{"pos":[25156,25446],"content":"The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods.","nodes":[{"content":"The following table lists the exception messages from the <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception objects thrown by calls to the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph> methods.","pos":[0,290],"source":"The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods."}]},{"pos":[25453,25459],"content":"Method","nodes":[{"content":"Method","pos":[0,6]}]},{"pos":[25460,25467],"content":"Message","nodes":[{"content":"Message","pos":[0,7]}]},{"pos":[25512,25553],"content":"<bpt id=\"p1\">**</bpt>Sequence contains no matching element<ept id=\"p1\">**</ept>","source":"**Sequence contains no matching element**"},{"pos":[25558,25591],"content":"`Single` <br /> `SingleOrDefault`","nodes":[]},{"pos":[25592,25644],"content":"<bpt id=\"p1\">**</bpt>Sequence contains more than one matching element<ept id=\"p1\">**</ept>","source":"**Sequence contains more than one matching element**"},{"pos":[25652,25886],"content":"In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.","nodes":[{"content":"In the following example, the call to the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;</ph> method throws an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> exception because the sequence doesn't have an element greater than 4.","pos":[0,234],"source":"In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4."}]},{"pos":[25893,26206],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]\n [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]"},{"pos":[26213,26602],"content":"The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method. However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.","nodes":[{"content":"The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method. However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.","pos":[0,389],"nodes":[{"content":"The following example attempts to prevent the <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception thrown when a sequence is empty by instead calling the <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,232],"source":"The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method."},{"content":"However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception.","pos":[233,389],"source":" However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception."}]}]},{"pos":[26609,26922],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.InvalidOperationException#11<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.InvalidOperationException#11<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]\n [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]"},{"pos":[26929,27685],"content":"Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> assumes a sequence with zero or one result, but no more. If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate. Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.","nodes":[{"content":"Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> assumes a sequence with zero or one result, but no more. If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate. Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.","pos":[0,756],"nodes":[{"content":"Calling the <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName&gt;</ph> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.","pos":[0,187],"source":"Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method assumes that either a sequence or the sequence that meets specified criteria contains only one element."},{"content":"<ph id=\"ph1\">&lt;xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName&gt;</ph> assumes a sequence with zero or one result, but no more.","pos":[189,319],"source":"  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> assumes a sequence with zero or one result, but no more."},{"content":"If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is appropriate.","pos":[320,498],"source":" If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate."},{"content":"Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <ph id=\"ph1\">&lt;xref:System.Linq.Enumerable&gt;</ph> method, such as <ph id=\"ph2\">&lt;xref:System.Linq.Enumerable.FirstOrDefault%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Linq.Enumerable.Where%2A&gt;</ph>.","pos":[499,756],"source":" Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>."}]}]},{"pos":[27718,27763],"content":"Dynamic cross-application domain field access","linkify":"Dynamic cross-application domain field access","nodes":[{"content":"Dynamic cross-application domain field access","pos":[0,45]}]},{"pos":[27767,28190],"content":"The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=fullName> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing. The address of a field can only be accessed from the application domain in which it resides.","nodes":[{"content":"The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=fullName> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing. The address of a field can only be accessed from the application domain in which it resides.","pos":[0,423],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=fullName&gt;</ph> Microsoft intermediate language (MSIL) instruction throws an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing.","pos":[0,330],"source":"The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=fullName> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing."},{"content":"The address of a field can only be accessed from the application domain in which it resides.","pos":[331,423]}]}]},{"pos":[28226,28273],"content":"Throwing an InvalidOperationException exception","linkify":"Throwing an InvalidOperationException exception","nodes":[{"content":"Throwing an InvalidOperationException exception","pos":[0,47]}]},{"pos":[28277,28535],"content":"You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call. That is, the method call is valid in some circumstances or contexts, but is invalid in others.","nodes":[{"content":"You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call. That is, the method call is valid in some circumstances or contexts, but is invalid in others.","pos":[0,258],"nodes":[{"content":"You should throw an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> exception only when the state of your object for some reason does not support a particular method call.","pos":[0,163],"source":"You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call."},{"content":"That is, the method call is valid in some circumstances or contexts, but is invalid in others.","pos":[164,258]}]}]},{"pos":[28542,28779],"content":"If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.","nodes":[{"content":"If the method invocation failure is due to invalid arguments, then <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> or one of its derived classes, <ph id=\"ph2\">&lt;xref:System.ArgumentNullException&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.ArgumentOutOfRangeException&gt;</ph>, should be thrown instead.","pos":[0,237],"source":"If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead."}]},{"pos":[28811,28836],"content":"Miscellaneous information","linkify":"Miscellaneous information","nodes":[{"content":"Miscellaneous information","pos":[0,25]}]},{"pos":[28840,28952],"content":"<xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.","pos":[0,112],"source":"<xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509."}]},{"pos":[28959,29129],"content":"For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.","nodes":[{"content":"For a list of initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph>, see the <ph id=\"ph2\">&lt;xref:System.InvalidOperationException.%23ctor%2A&gt;</ph> constructors.","pos":[0,170],"source":"For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors."}]}],"pos":[831,30241],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class.","nodes":[{"pos":[0,94],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class."}],"pos":[33435,33530],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation cannot be performed.\" This message takes into account the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The localized error message string.|","nodes":[{"pos":[0,266],"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation cannot be performed.\" This message takes into account the current system culture.","nodes":[{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation cannot be performed.\" This message takes into account the current system culture.","pos":[0,266],"nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation cannot be performed.\"","pos":[0,206],"source":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation cannot be performed.\""},{"content":"This message takes into account the current system culture.","pos":[207,266]}]}]},{"pos":[273,386],"content":"The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,113],"source":"The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>."}]},{"pos":[393,401],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[402,407],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[443,484],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[485,530],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[535,569],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[570,605],"content":"The localized error message string.","nodes":[{"content":"The localized error message string.","pos":[0,35]}]}],"pos":[33541,34159],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with a specified error message.","nodes":[{"pos":[0,125],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph> class with a specified error message.","source":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with a specified error message."}],"pos":[35905,36031],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter. The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,339],"content":"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter. The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.","nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A?displayProperty=fullName&gt;</ph> property of the new exception using the <ph id=\"ph2\">`message`</ph> parameter.","pos":[0,153],"source":"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter."},{"content":"The content of <ph id=\"ph1\">`message`</ph> is intended to be understood by humans.","pos":[154,218],"source":" The content of `message` is intended to be understood by humans."},{"content":"The caller of this constructor is required to ensure that this string has been localized for the current system culture.","pos":[219,339]}]},{"pos":[346,459],"content":"The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,113],"source":"The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>."}]},{"pos":[466,474],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[475,480],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[516,557],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[558,603],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[608,642],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[643,668],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[36042,36721],"yaml":true,"extradata":"MT"},{"content":"The message that describes the error.","nodes":[{"pos":[0,37],"content":"The message that describes the error.","nodes":[{"content":"The message that describes the error.","pos":[0,37]}]}],"pos":[36874,36912],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with serialized data.","nodes":[{"pos":[0,115],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph> class with serialized data.","source":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with serialized data."}],"pos":[38903,39019],"yaml":true},{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"pos":[0,231],"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).","nodes":[{"content":"This constructor is called during deserialization to reconstitute the exception object transmitted over a stream.","pos":[0,113]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>XML and SOAP Serialization<ept id=\"p1\">](~/docs/framework/serialization/xml-and-soap-serialization.md)</ept>.","pos":[114,231],"source":" For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md)."}]}],"pos":[39030,39262],"yaml":true,"extradata":"MT"},{"content":"The object that holds the serialized object data.","nodes":[{"pos":[0,49],"content":"The object that holds the serialized object data.","nodes":[{"content":"The object that holds the serialized object data.","pos":[0,49]}]}],"pos":[39540,39590],"yaml":true},{"content":"The contextual information about the source or destination.","nodes":[{"pos":[0,59],"content":"The contextual information about the source or destination.","nodes":[{"content":"The contextual information about the source or destination.","pos":[0,59]}]}],"pos":[39685,39745],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.","nodes":[{"pos":[0,200],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.InvalidOperationException\"&gt;&lt;/xref&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception."}],"pos":[41152,41353],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,465],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,182],"source":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) if the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.","pos":[183,465],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[472,585],"content":"The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[0,113],"source":"The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>."}]},{"pos":[592,600],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[601,606],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[642,683],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[684,714],"content":"The inner exception reference.","nodes":[{"content":"The inner exception reference.","pos":[0,30]}]},{"pos":[719,753],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[754,779],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[41364,42154],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception.","nodes":[{"pos":[0,61],"content":"The error message that explains the reason for the exception.","nodes":[{"content":"The error message that explains the reason for the exception.","pos":[0,61]}]}],"pos":[42333,42395],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,240],"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">innerException</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic), the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,240],"source":" If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[42468,42709],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.InvalidOperationException\n  commentId: T:System.InvalidOperationException\n  id: InvalidOperationException\n  children:\n  - System.InvalidOperationException.#ctor\n  - System.InvalidOperationException.#ctor(System.String)\n  - System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.InvalidOperationException.#ctor(System.String,System.Exception)\n  langs:\n  - csharp\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: The exception that is thrown when a method call is invalid for the object's current state.\n  remarks: \"<xref:System.InvalidOperationException> is used in cases when the failure to invoke a method is caused by reasons other than invalid arguments. Typically, it is thrown when the state of an object cannot support the method call. For example, an <xref:System.InvalidOperationException> exception is thrown by methods such as:  \\n  \\n-   <xref:System.Collections.IEnumerator.MoveNext%2A?displayProperty=fullName> if objects of a collection are modified after the enumerator is created. For more information, see [Changing a collection while iterating it](#Iterating).  \\n  \\n-   <xref:System.Resources.ResourceSet.GetString%2A?displayProperty=fullName> if the resource set is closed before the method call is made.  \\n  \\n-   <xref:System.Xml.Linq.XContainer.Add%2A?displayProperty=fullName>, if the object or objects to be added would result in an incorrectly structured XML document.  \\n  \\n-   A method that attempts to manipulate the UI from a thread that is not the main or UI thread.  \\n  \\n> [!IMPORTANT]\\n>  Because the <xref:System.InvalidOperationException> exception can be thrown in a wide variety of circumstances, it is important to read the exception message returned by the <xref:System.Exception.Message%2A> property.  \\n  \\n In this section:  \\n  \\n [Some common causes of InvalidOperationException exceptions](#Causes)   \\n [Updating a UI thread from a non-UI thread](#UI)  \\n [Changing a collection while iterating it](#Iterating)  \\n [Sorting an array or collection whose objects cannot be compared](#Sorting)  \\n [Casting a Nullable&lt;T&gt; that is null to its underlying type](#Nullable)   \\n [Calling a System.Linq.Enumerable method on an empty collection](#Empty)  \\n [Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element](#Single)  \\n [Dynamic cross-application domain field access](#Emit)  \\n[Throwing an InvalidOperationException exception](#Throwing)  \\n[Miscellaneous information](#Misc)  \\n  \\n<a name=\\\"Causes\\\"></a>   \\n## Some common causes of InvalidOperationException exceptions  \\n The following sections show how some common cases in which in <xref:System.InvalidOperationException> exception is thrown in an app. How you handle the issue depends on the specific situation. Most commonly, however, the exception results from developer error, and the <xref:System.InvalidOperationException> exception can be anticipated and avoided.  \\n  \\n<a name=\\\"UI\\\"></a>   \\n### Updating a UI thread from a non-UI thread  \\n Often, worker threads are used to perform some background work that involves gathering data to be displayed in an application's user interface. However. most GUI (graphical user interface) application frameworks for the .NET Framework, such as Windows Forms and Windows Presentation Foundation (WPF),  let you access GUI objects only from the thread that creates and manages the UI (the Main or UI thread). An <xref:System.InvalidOperationException> is thrown when you try to access a UI element from a thread other than the UI thread.  The text of the exception message is shown in the following table.  \\n  \\n|Application Type|Message|  \\n|----------------------|-------------|  \\n|WPF app|**The calling thread cannot access this object because a different thread owns it.**|  \\n|UWP app|**The application called an interface that was marshalled for a different thread.**|  \\n|Windows Forms app|**Cross-thread operation not valid: Control 'TextBox1' accessed from a thread other than the thread it was created on.**|  \\n  \\n UI frameworks for the .NET Framework implement a *dispatcher* pattern that includes a method to check whether a call to a member of a UI element is being executed on the UI thread, and other methods to schedule the call on the UI thread:  \\n  \\n-   In WPF apps, call the <xref:System.Windows.Threading.Dispatcher.CheckAccess%2A?displayProperty=fullName> method to determine if a method is running on a non-UI thread. It returns `true` if the method is running on the UI thread and `false` otherwise. Call one of the overloads of the <xref:System.Windows.Threading.Dispatcher.Invoke%2A?displayProperty=fullName> method to schedule the call on the UI thread.  \\n  \\n-   In UWP apps, call the [CoreDispatcher.HasThreadAccess](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.hasthreadaccess.aspx) method to determine if a method is running on a non-UI thread. Call the  [CoreDispatcher.RunAsync](https://msdn.microsoft.com/en-us/library/windows/apps/windows.ui.core.coredispatcher.runasync.aspx) method to execute a delegate that updates the UI thread. Use the  \\n  \\n-   In Windows Forms apps, use the <xref:System.Windows.Forms.Control.InvokeRequired%2A?displayProperty=fullName> property to determine if a method is running on a non-UI thread. Call one of the overloads of the <xref:System.Windows.Forms.Control.Invoke%2A?displayProperty=fullName> method to execute a delegate that updates the UI thread.  \\n  \\n The following examples illustrate the <xref:System.InvalidOperationException> exception that is thrown when you attempt to update a UI element from a thread other than the thread that created it.  Each example requires that you create two controls:  \\n  \\n-   A text box control named `textBox1`.  In a Windows Forms app, you should set its <xref:System.Windows.Forms.TextBox.Multiline%2A> property to `true`.  \\n  \\n-   A button  control named `threadExampleBtn`. The example provides a handler, `ThreadsExampleBtn_Click`, for the button's `Click` event.  \\n  \\n In each case, the `threadExampleBtn_Click` event handler calls the `DoSomeWork` method twice. The first call runs synchronously and succeeds. But the second call, because it runs asynchronously on a thread pool thread, attempts to update the UI from a non-UI thread. This results in a <xref:System.InvalidOperationException> exception.  \\n  \\n WPF and UWP apps  \\n [!code-csharp[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/cs/MainWindow.xaml.cs#1)]\\n [!code-vb[System.InvalidOperationException.Threading.WPF1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf1/vb/MainWindow.xaml.vb#1)]  \\n  \\n The following version of the `DoSomeWork` method eliminates the exception in a WPF app.  \\n  \\n [!code-csharp[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/cs/MainWindowDispatcher.xaml.cs#3)]\\n [!code-vb[System.InvalidOperationException.Threading.WPF2#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wpf2/vb/MainWindowDispatcher.xaml.vb#3)]  \\n  \\n The following version of the `DoSomeWork` method eliminates the exception in a UWP app.  \\n  \\n [!code-csharp[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/cs/MainPage.xaml.cs#4)]\\n [!code-vb[System.InvalidOperationException.Threading.UWP#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception.threading.uwp/vb/MainPage.xaml.vb#4)]  \\n  \\n Windows Forms apps  \\n [!code-csharp[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/cs/Form1.cs#2)]\\n [!code-vb[System.InvalidOperationException.Threading.WF#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf/vb/Form1.vb#2)]  \\n  \\n The following version of the `DoSomeWork` method eliminates the exception in a Windows Forms app.  \\n  \\n [!code-csharp[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/cs/Form1.cs#5)]\\n [!code-vb[System.InvalidOperationException.Threading.WF2#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Invalidoperationexception.threading.wf2/vb/Form1.vb#5)]  \\n  \\n<a name=\\\"Iterating\\\"></a>   \\n### Changing a collection while iterating it  \\n The `foreach` statement in C# or `For Each` statement in Visual Basic is used to iterate the members of a collection and to read or modify its individual elements. However, it can't be used to add or remove items from the collection. Doing this throws an  <xref:System.InvalidOperationException> exception with a message that is similar to, \\\"**Collection was modified; enumeration operation may not execute.**\\\"  \\n  \\n The following example iterates a collection of integers attempts to add the square of each integer to the collection. The example throws an <xref:System.InvalidOperationException> with the first call to the <xref:System.Collections.Generic.List%601.Add%2A?displayProperty=fullName> method.  \\n  \\n [!code-csharp[System.InvalidOperationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating1.cs#1)]\\n [!code-vb[System.InvalidOperationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating1.vb#1)]  \\n  \\n You can eliminate the exception in one of two ways, depending on your application logic:  \\n  \\n-   If elements must be added to the collection while iterating it, you can iterate it by index using the `for` statement instead of `foreach` or `For Each`. The following example uses the for statement to add the square of numbers in the collection to the collection.  \\n  \\n     [!code-csharp[System.InvalidOperationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating2.cs#2)]\\n     [!code-vb[System.InvalidOperationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating2.vb#2)]  \\n  \\n     Note that you must establish the number of iterations before iterating the collection either by using a counter inside the loop that will exit the loop appropraitely, by iterating backward, from `Count` - 1 to 0, or, as the example does, by assigning the number of elements in the array to a variable and using it to establish the upper bound of the loop. Otherwise, if an element is added to the collection on every iteration, an endless loop results.  \\n  \\n-   If it is not necessary to add elements to the collection while iterating it, you can store the elements to be added in a temporary collection that you add when iterating the collection has finished.  The following example uses this approach to add the square of numbers in a collection to a temporary collection, and then to combine the collections into a single array object.  \\n  \\n     [!code-csharp[System.InvalidOperationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Iterating3.cs#3)]\\n     [!code-vb[System.InvalidOperationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Iterating3.vb#3)]  \\n  \\n<a name=\\\"Sorting\\\"></a>   \\n### Sorting an array or collection whose objects cannot be compared  \\n General-purpose sorting methods, such as the <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> method or the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method, usually require that at least one of the objects to be sorted implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface. If not, the collection or array cannot be sorted, and the method throws an  <xref:System.InvalidOperationException> exception. The following example defines a `Person` class, stores two `Person` objects in a generic <xref:System.Collections.Generic.List%601> object, and attempts to sort them. As the output from the example shows, the call to the <xref:System.Collections.Generic.List%601.Sort?displayProperty=fullName> method throws an <xref:System.InvalidOperationException>.  \\n  \\n [!code-csharp[System.InvalidOperationException#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort1.cs#12)]\\n [!code-vb[System.InvalidOperationException#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort1.vb#12)]  \\n  \\n You can eliminate the exception in any of three ways:  \\n  \\n-   If you can own the type that you are trying to sort (that is, if you control its source code), you can modify it to implement the <xref:System.IComparable%601> or the <xref:System.IComparable> interface. This requires that you implement either the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> or the <xref:System.IComparable.CompareTo%2A> method. Adding an interface implementation to an existing type is not a breaking change.  \\n  \\n     The following example uses this approach to provide an <xref:System.IComparable%601> implementation  for the `Person` class. You can still call the collection or array's general sorting method and, as the output from the example shows, the collection sorts successfully.  \\n  \\n     [!code-csharp[System.InvalidOperationException#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort2.cs#13)]\\n     [!code-vb[System.InvalidOperationException#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort2.vb#13)]  \\n  \\n-   If you cannot modify the source code for the type you are trying to sort, you can define a special-purpose sorting class that implements the <xref:System.Collections.Generic.IComparer%601> interface.  You can call an overload of the `Sort` method that includes an  <xref:System.Collections.Generic.IComparer%601> parameter. This approach is especially useful if you want to develop a specialized sorting class that can sort objects based on multiple criteria.  \\n  \\n     The following example uses the approach by developing a custom `PersonComparer` class that is used to sort `Person` collections.  It then passes an instance of this class to the <xref:System.Collections.Generic.List%601.Sort%28System.Collections.Generic.IComparer%7B%600%7D%29?displayProperty=fullName> method.  \\n  \\n     [!code-csharp[System.InvalidOperationException#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort3.cs#14)]\\n     [!code-vb[System.InvalidOperationException#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort3.vb#14)]  \\n  \\n-   If you cannot modify the source code for the type you are trying to sort, you can create a  <xref:System.Comparison%601> delegate to perform the sorting. The delegate signature is  \\n  \\n    ```vb  \\n    Function Comparison(Of T)(x As T, y As T) As Integer  \\n    ```  \\n  \\n    ```csharp  \\n    int Comparison<T>(T x, T y)  \\n    ```  \\n  \\n     The following example uses the approach by defining a  `PersonComparison` method that matches the  <xref:System.Comparison%601> delegate signature.  It then passes this delegate to the <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29?displayProperty=fullName> method.  \\n  \\n     [!code-csharp[System.InvalidOperationException#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/List_Sort4.cs#15)]\\n     [!code-vb[System.InvalidOperationException#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/List_Sort4.vb#15)]  \\n  \\n<a name=\\\"Nullable\\\"></a>   \\n### Casting a Nullable\\\\<T> that is null to its underlying type  \\n Attempting to cast a <xref:System.Nullable%601> value that is `null` to its underlying type throws an <xref:System.InvalidOperationException> exception  and displays the error message, \\\"**Nullable object must have a value.**  \\n  \\n The following example throws an <xref:System.InvalidOperationException> exception  when it attempts to iterate an array that includes a `Nullable(Of Integer)` value.  \\n  \\n [!code-csharp[System.InvalidOperationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable1.cs#4)]\\n [!code-vb[System.InvalidOperationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable1.vb#4)]  \\n  \\n To prevent the exception:  \\n  \\n-   Use the <xref:System.Nullable%601.HasValue%2A?displayProperty=fullName> property to select only those elements that are not `null`.  \\n  \\n-   Call one of the <xref:System.Nullable%601.GetValueOrDefault%2A?displayProperty=fullName> overloads to provide a default value for a `null` value.  \\n  \\n The following example does both to avoid the  <xref:System.InvalidOperationException> exception.  \\n  \\n [!code-csharp[System.InvalidOperationException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Nullable2.cs#5)]\\n [!code-vb[System.InvalidOperationException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Nullable2.vb#5)]  \\n  \\n<a name=\\\"Empty\\\"></a>   \\n### Calling a System.Linq.Enumerable method on an empty collection  \\n The <xref:System.Linq.Enumerable.Aggregate%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Max%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Min%2A?displayProperty=fullName>,  <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods perform operations on a sequence and return a single result.   Some overloads of these methods throw an <xref:System.InvalidOperationException> exception when the sequence is empty, while other overloads return `null`. The <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method also throws an <xref:System.InvalidOperationException> exception when the sequence contains more than one element.  \\n  \\n> [!NOTE]\\n>  Most of the methods that throw an <xref:System.InvalidOperationException> exception are overloads. Be sure that you understand the behavior of the overload that you choose.  \\n  \\n The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to some <xref:System.Linq.Enumerable?displayProperty=fullName> methods.  \\n  \\n|Method|Message|  \\n|------------|-------------|  \\n|`Aggregate` <br /> `Average` <br /> `Last` <br /> `Max` <br /> `Min`|**Sequence contains no elements**|  \\n|`First`|**Sequence contains no matching element**|  \\n|`Single` <br /> `SingleOrDefault`|**Sequence contains more than one matching element**|  \\n  \\n How you eliminate or handle the exception depends on your application's assumptions and on the particular method you call.  \\n  \\n-   When you deliberately call one of these methods without checking for an empty sequence, you are assuming that the sequence is not empty, and that an empty sequence is an unexpected occurrence. In this case, catching or rethrowing the exception is appropriate .  \\n  \\n-   If your failure to check for an empty sequence was inadvertent, you can  call one of the overloads of the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName> overload to determine whether a sequence contains any elements.  \\n  \\n    > [!TIP]\\n    >  Calling the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method before generating a sequence can improve performance if the data to be processed might contain a large number of elements or if operation that generates the sequence is expensive.  \\n  \\n-   If you've called a method such as <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.Last%2A?displayProperty=fullName>, or <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName>, you can substitute an alternate method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName>, <xref:System.Linq.Enumerable.LastOrDefault%2A?displayProperty=fullName>, or  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName>, that returns a default value instead of a member of the sequence.  \\n  \\n The examples provide additional detail.  \\n  \\n The following example uses the <xref:System.Linq.Enumerable.Average%2A?displayProperty=fullName> method to compute the average of a sequence whose values are greater than 4. Since no values from the original array exceed 4, no values are included in the sequence, and the method throws an <xref:System.InvalidOperationException> exception.  \\n  \\n [!code-csharp[System.InvalidOperationException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable1.cs#6)]\\n [!code-vb[System.InvalidOperationException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable1.vb#6)]  \\n  \\n The exception can be eliminated by calling the <xref:System.Linq.Enumerable.Any%2A> method to determine whether the sequence contains any elements before calling the method that processes the sequence, as the following example shows.  \\n  \\n [!code-csharp[System.InvalidOperationException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable2.cs#7)]\\n [!code-vb[System.InvalidOperationException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable2.vb#7)]  \\n  \\n The <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method returns the first item in a sequence or the first element in a sequence that satisfies a specified condition. If the sequence is empty and therefore does not have a first element, it throws an <xref:System.InvalidOperationException> exception.  \\n  \\n In the following example, the <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the dbQueryResults array doesn't contain an element greater than 4.  \\n  \\n [!code-csharp[System.InvalidOperationException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable3.cs#8)]\\n [!code-vb[System.InvalidOperationException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable3.vb#8)]  \\n  \\n You can call the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method instead of <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> to return a specified or default value. If the method does not find a first element in the sequence, it returns  the default value for that data type.  The default value is `null` for a reference type, zero for a numeric data type, and <xref:System.DateTime.MinValue?displayProperty=fullName> for the <xref:System.DateTime> type.  \\n  \\n> [!NOTE]\\n>  Interpreting the value returned by the <xref:System.Linq.Enumerable.FirstOrDefault%2A?displayProperty=fullName> method is often complicated by the fact that the default value of the type can be a valid value in the sequence.  In this case, you an call the <xref:System.Linq.Enumerable.Any%2A?displayProperty=fullName>method to determine whether the sequence has valid members before calling the <xref:System.Linq.Enumerable.First%2A?displayProperty=fullName> method.  \\n  \\n The following example calls the  <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29?displayProperty=fullName> method to prevent the <xref:System.InvalidOperationException> exception thrown in the previous example.  \\n  \\n [!code-csharp[System.InvalidOperationException#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable4.cs#9)]\\n [!code-vb[System.InvalidOperationException#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable4.vb#9)]  \\n  \\n<a name=\\\"Single\\\"></a>   \\n### Calling Enumerable.Single or Enumerable.SingleOrDefault on a sequence without one element  \\n The <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method returns the only element of a sequence, or the only element of a sequence that meets a specified condition.    If there are no elements in the sequence, or if there is more than one element , the method throws an <xref:System.InvalidOperationException> exception.  \\n  \\n You can use the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method to return a default value instead of throwing an exception when the sequence contains no elements. However, the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method still throws an <xref:System.InvalidOperationException> exception  when the sequence contains more than one element.  \\n  \\n The following table lists the exception messages from the <xref:System.InvalidOperationException> exception objects thrown by calls to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> and <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> methods.  \\n  \\n|Method|Message|  \\n|------------|-------------|  \\n|`Single`|**Sequence contains no matching element**|  \\n|`Single` <br /> `SingleOrDefault`|**Sequence contains more than one matching element**|  \\n  \\n In the following example, the call to the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method throws an <xref:System.InvalidOperationException> exception because the sequence doesn't have an element greater than 4.  \\n  \\n [!code-csharp[System.InvalidOperationException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable5.cs#10)]\\n [!code-vb[System.InvalidOperationException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable5.vb#10)]  \\n  \\n The following example attempts to prevent the <xref:System.InvalidOperationException> exception thrown when a sequence is empty by instead calling the <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> method. However, because this sequence returns multiple elements whose value is greater than 2, it also throws an <xref:System.InvalidOperationException> exception.  \\n  \\n [!code-csharp[System.InvalidOperationException#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.invalidoperationexception/cs/Enumerable6.cs#11)]\\n [!code-vb[System.InvalidOperationException#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.invalidoperationexception/vb/Enumerable6.vb#11)]  \\n  \\n Calling the <xref:System.Linq.Enumerable.Single%2A?displayProperty=fullName> method assumes that either a sequence or the sequence that meets specified criteria contains only one element.  <xref:System.Linq.Enumerable.SingleOrDefault%2A?displayProperty=fullName> assumes a sequence with zero or one result, but no more. If this assumption is a deliberate one on your part and these conditions are not met, rethrowing or catching the resulting <xref:System.InvalidOperationException> is appropriate. Otherwise, or if you expect that invalid conditions will occur with some frequency, you should consider using some other <xref:System.Linq.Enumerable> method, such as <xref:System.Linq.Enumerable.FirstOrDefault%2A> or <xref:System.Linq.Enumerable.Where%2A>.  \\n  \\n<a name=\\\"Emit\\\"></a>   \\n### Dynamic cross-application domain field access  \\n The <xref:System.Reflection.Emit.OpCodes.Ldflda?displayProperty=fullName> Microsoft intermediate language (MSIL) instruction throws an <xref:System.InvalidOperationException> exception if the object containing the field whose address you are trying to retrieve is not within the application domain in which your code is executing. The address of a field can only be accessed from the application domain in which it resides.  \\n  \\n<a name=\\\"Throwing\\\"></a>   \\n## Throwing an InvalidOperationException exception  \\n You should throw an <xref:System.InvalidOperationException> exception only when the state of your object for some reason does not support a particular method call. That is, the method call is valid in some circumstances or contexts, but is invalid in others.  \\n  \\n If the method invocation failure is due to invalid arguments, then <xref:System.ArgumentException> or one of its derived classes, <xref:System.ArgumentNullException> or <xref:System.ArgumentOutOfRangeException>, should be thrown instead.  \\n  \\n<a name=\\\"Misc\\\"></a>   \\n## Miscellaneous information  \\n <xref:System.InvalidOperationException> uses the HRESULT COR_E_INVALIDOPERATION, which has the value 0x80131509.  \\n  \\n For a list of initial property values for an instance of <xref:System.InvalidOperationException>, see the <xref:System.InvalidOperationException.%23ctor%2A> constructors.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class InvalidOperationException : SystemException\n  inheritance:\n  - System.Object\n  - System.Exception\n  derivedClasses:\n  - System.ObjectDisposedException\n  - System.Data.Linq.DuplicateKeyException\n  - System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException\n  - System.Data.Services.DataServiceException\n  - System.Data.Services.Client.DataServiceClientException\n  - System.Data.Services.Client.DataServiceQueryException\n  - System.Data.Services.Client.DataServiceRequestException\n  - System.Net.ProtocolViolationException\n  - System.Net.WebException\n  - System.Net.NetworkInformation.PingException\n  - System.Windows.ResourceReferenceKeyNotFoundException\n  - System.Windows.Automation.ElementNotEnabledException\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/InvalidOperationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.InvalidOperationException.#ctor\n  commentId: M:System.InvalidOperationException.#ctor\n  id: '#ctor'\n  parent: System.InvalidOperationException\n  langs:\n  - csharp\n  name: InvalidOperationException()\n  nameWithType: InvalidOperationException.InvalidOperationException()\n  fullName: InvalidOperationException.InvalidOperationException()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \\\"The requested operation cannot be performed.\\\" This message takes into account the current system culture.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The localized error message string.|\"\n  syntax:\n    content: public InvalidOperationException ();\n    parameters: []\n  overload: System.InvalidOperationException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/InvalidOperationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.InvalidOperationException.#ctor(System.String)\n  commentId: M:System.InvalidOperationException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.InvalidOperationException\n  langs:\n  - csharp\n  name: InvalidOperationException(String)\n  nameWithType: InvalidOperationException.InvalidOperationException(String)\n  fullName: InvalidOperationException.InvalidOperationException(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with a specified error message.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter. The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  syntax:\n    content: public InvalidOperationException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the error.\n  overload: System.InvalidOperationException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/InvalidOperationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'\n  parent: System.InvalidOperationException\n  langs:\n  - csharp\n  name: InvalidOperationException(SerializationInfo, StreamingContext)\n  nameWithType: InvalidOperationException.InvalidOperationException(SerializationInfo, StreamingContext)\n  fullName: InvalidOperationException.InvalidOperationException(SerializationInfo, StreamingContext)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with serialized data.\n  remarks: This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. For more information, see [XML and SOAP Serialization](~/docs/framework/serialization/xml-and-soap-serialization.md).\n  syntax:\n    content: protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The object that holds the serialized object data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The contextual information about the source or destination.\n  overload: System.InvalidOperationException.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/InvalidOperationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.InvalidOperationException.#ctor(System.String,System.Exception)\n  commentId: M:System.InvalidOperationException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.InvalidOperationException\n  langs:\n  - csharp\n  name: InvalidOperationException(String, Exception)\n  nameWithType: InvalidOperationException.InvalidOperationException(String, Exception)\n  fullName: InvalidOperationException.InvalidOperationException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.InvalidOperationException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.\n  remarks: \"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.InvalidOperationException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  syntax:\n    content: public InvalidOperationException (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for the exception.\n    - id: innerException\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.InvalidOperationException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/InvalidOperationException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.InvalidOperationException.#ctor\n  parent: System.InvalidOperationException\n  isExternal: false\n  name: InvalidOperationException()\n  nameWithType: InvalidOperationException.InvalidOperationException()\n  fullName: InvalidOperationException.InvalidOperationException()\n- uid: System.InvalidOperationException.#ctor(System.String)\n  parent: System.InvalidOperationException\n  isExternal: false\n  name: InvalidOperationException(String)\n  nameWithType: InvalidOperationException.InvalidOperationException(String)\n  fullName: InvalidOperationException.InvalidOperationException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.InvalidOperationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.InvalidOperationException\n  isExternal: false\n  name: InvalidOperationException(SerializationInfo, StreamingContext)\n  nameWithType: InvalidOperationException.InvalidOperationException(SerializationInfo, StreamingContext)\n  fullName: InvalidOperationException.InvalidOperationException(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.InvalidOperationException.#ctor(System.String,System.Exception)\n  parent: System.InvalidOperationException\n  isExternal: false\n  name: InvalidOperationException(String, Exception)\n  nameWithType: InvalidOperationException.InvalidOperationException(String, Exception)\n  fullName: InvalidOperationException.InvalidOperationException(String, Exception)\n- uid: System.InvalidOperationException.#ctor*\n  parent: System.InvalidOperationException\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException.InvalidOperationException\n  fullName: InvalidOperationException.InvalidOperationException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/InvalidOperationException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}