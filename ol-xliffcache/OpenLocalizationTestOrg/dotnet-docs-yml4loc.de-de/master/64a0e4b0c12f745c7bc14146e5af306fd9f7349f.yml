### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedWordUnit
  commentId: T:System.Speech.Recognition.RecognizedWordUnit
  id: RecognizedWordUnit
  children:
  - System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  - System.Speech.Recognition.RecognizedWordUnit.Confidence
  - System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  - System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  - System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  - System.Speech.Recognition.RecognizedWordUnit.Text
  langs:
  - csharp
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit
  fullName: System.Speech.Recognition.RecognizedWordUnit
  type: Class
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: Provides the atomic unit of recognized speech.
  remarks: "All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.  \n  \n An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:  \n  \n-   Normalized and exact (or lexical) text representations for a recognized word. For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.  \n  \n-   Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS). For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.  \n  \n-   Formatting for printing. For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property."
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates strings. The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects. The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```csharp  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```csharp  \ninternal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public class RecognizedWordUnit
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
  ms.technology:
  - dotnet-standard
  ms.author: kbridge
  manager: ghogen
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  commentId: M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  id: '#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)'
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)
  fullName: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: Initializes a new instance of the <xref href="System.Speech.Recognition.RecognizedWordUnit"></xref> class.
  remarks: "If `text` or `pronunciation` are `null`, \"\", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.  \n  \n Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.  \n  \n For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object."
  example:
  - "The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.  \n  \n```csharp  \nprivate void _emulateAndVerify_Click(object sender, EventArgs e)   \n{  \n  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\\t' };  \n  string text = _emulateTextBox.Text;  \n  string[] words = text.Split(delimiterChars);  \n  \n  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  \n  for (int i = 0; i < words.Length; i++)   \n  {  \n    InputWordUnits[i] = new RecognizedWordUnit(  \n        \"\",   \n        0,   \n        \"\",  \n        words[i].ToLower(),   \n        DisplayAttributes.OneTrailingSpace,   \n        new TimeSpan(),   \n        new TimeSpan());  \n  }  \n  \n  RecognitionResult rec = _recognizer.EmulateRecognize(  \n        InputWordUnits,   \n        System.Globalization.CompareOptions.IgnoreCase);  \n  if (rec == null)   \n  {  \n    MessageBox.Show(String.Format(\"Recognition emulation for {0} failed.\\n\", text));  \n  }   \n  else if (InputWordUnits.Length != rec.Words.Count)   \n  {  \n    MessageBox.Show(  \n       String.Format(\"Length mismatch: Input was {0} words, Recognition has {1} words.\\n}\"));  \n  }   \n  else   \n  {  \n    for (int i = 0; i < InputWordUnits.Length; i++)   \n    {  \n  \n      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   \n      {  \n        MessageBox.Show(  \n          String.Format(\"Input word {0} \\\"{1}\\\" not found. Recognition output is {2}\",  \n          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  \n        continue;  \n      }  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);
    parameters:
    - id: text
      type: System.String
      description: "The normalized text for a recognized word.  \n  \n This value can be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>."
    - id: confidence
      type: System.Single
      description: A `float` value from 0.0 through 1.0 indicating the certainty of word recognition.
    - id: pronunciation
      type: System.String
      description: "The phonetic spelling of a recognized word.  \n  \n This value can be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>."
    - id: lexicalForm
      type: System.String
      description: "The unnormalized text for a recognized word.  \n  \n This argument is required and may not be `null`, \"\", or <xref href=\"System.String.Empty\"></xref>."
    - id: displayAttributes
      type: System.Speech.Recognition.DisplayAttributes
      description: Defines the use of white space to display recognized words.
    - id: audioPosition
      type: System.TimeSpan
      description: "The location of the recognized word in the audio input stream.  \n  \n This value can be <xref href=\"System.TimeSpan.Zero\"></xref>."
    - id: audioDuration
      type: System.TimeSpan
      description: "The length of the audio input corresponding to the recognized word.  \n  \n This value can be <xref href=\"System.TimeSpan.Zero\"></xref>."
  overload: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
  ms.technology:
  - dotnet-standard
  ms.author: kbridge
  manager: ghogen
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  commentId: P:System.Speech.Recognition.RecognizedWordUnit.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: RecognizedWordUnit.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.
  remarks: "Confidence scores do not indicate the absolute likelihood that a word was recognized correctly. Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input. This facilitates returning the most accurate recognition result. For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.  It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.  \n  \n A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.  \n  \n The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine. There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.  \n  \n A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences. If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods. Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry. Applications should not write changes to the registry for the properties of the shared recognizer."
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: A relative measure of the certainty of correct recognition for a word. The value is from 0.0 to 1.0, for low to high confidence, respectively.
  overload: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
  ms.technology:
  - dotnet-standard
  ms.author: kbridge
  manager: ghogen
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  commentId: P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  id: DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: RecognizedWordUnit.DisplayAttributes
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: Gets formatting information used to create the text output from the current <xref href="System.Speech.Recognition.RecognizedWordUnit"></xref> instance.
  remarks: "The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.  \n  \n For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration."
  example:
  - "The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```csharp  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```csharp  \ninternal static string stringFromWordArray(  \n        ReadOnlyCollection<RecognizedWordUnit> words,   \n        WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }  \n    else if (type == WordType.Pronunciation)   \n    {  \n       wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n         String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }
    return:
      type: System.Speech.Recognition.DisplayAttributes
      description: Specifies the use of white space to display of the contents of a <xref href="System.Speech.Recognition.RecognizedWordUnit"></xref> object.
  overload: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
  ms.technology:
  - dotnet-standard
  ms.author: kbridge
  manager: ghogen
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  commentId: P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  id: LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: RecognizedWordUnit.LexicalForm
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: Gets the unnormalized text of a recognized word.
  remarks: "In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.  \n  \n Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text."
  example:
  - "The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```csharp  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```csharp  \ninternal static string stringFromWordArray(  \n         ReadOnlyCollection<RecognizedWordUnit> words,   \n         WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  \n    {  \n    wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string LexicalForm { get; }
    return:
      type: System.String
      description: Returns a <xref href="System.String"></xref> containing the text of a recognized word, without any normalization.
  overload: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
  ms.technology:
  - dotnet-standard
  ms.author: kbridge
  manager: ghogen
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  commentId: P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  id: Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: RecognizedWordUnit.Pronunciation
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: Gets the phonetic spelling of a recognized word.
  remarks: "The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects. Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object. A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.  \n  \n Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings. For more information, see [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363)."
  example:
  - "The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```csharp  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```csharp  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n          String.Format(\"[0}: is not a valid input\", type));  \n    }  \n    // Use display attribute  \n  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Pronunciation { get; }
    return:
      type: System.String
      description: A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).
  overload: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
  ms.technology:
  - dotnet-standard
  ms.author: kbridge
  manager: ghogen
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  commentId: P:System.Speech.Recognition.RecognizedWordUnit.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: RecognizedWordUnit.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: Gets the normalized text for a recognized word.
  remarks: "In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical. However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.  \n  \n Speech normalization is the use of special constructs or symbols to express speech in writing. For example, normalization can replace the spoken words \"a dollar and sixteen cents\" with \"$1.16\" in output text."
  example:
  - "The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>). The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.  \n  \n```csharp  \n  \ninternal enum WordType   \n{  \n  Text,  \n  Normalized = Text,  \n  Lexical,  \n  Pronunciation  \n}  \n```  \n  \n```csharp  \ninternal static string stringFromWordArray(  \n          ReadOnlyCollection<RecognizedWordUnit> words,   \n          WordType type)   \n{  \n  string text = \"\";  \n  foreach (RecognizedWordUnit word in words)   \n  {  \n    string wordText = \"\";  \n    if (type == WordType.Text || type == WordType.Normalized)   \n    {  \n      wordText = word.Text;  \n    }   \n    else if (type == WordType.Lexical)   \n    {  \n      wordText = word.LexicalForm;  \n    }   \n    else if (type == WordType.Pronunciation)   \n    {  \n      wordText = word.Pronunciation;  \n    }   \n    else   \n    {  \n      throw new InvalidEnumArgumentException(  \n           String.Format(\"[0}: is not a valid input\", type));  \n    }  \n  \n    // Use display attribute  \n    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   \n    {  \n      wordText += \" \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   \n    {  \n      wordText += \"  \";  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimStart();  \n    }  \n    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \n    {  \n      wordText = wordText.TrimEnd();  \n    }  \n  \n    text += wordText;  \n  \n  }  \n  return text;  \n}  \n```"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: A string that contains the normalized text output for a given input word.
  overload: System.Speech.Recognition.RecognizedWordUnit.Text*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
  ms.technology:
  - dotnet-standard
  ms.author: kbridge
  manager: ghogen
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)
  nameWithType: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)
  fullName: RecognizedWordUnit.RecognizedWordUnit(String, Single, String, String, DisplayAttributes, TimeSpan, TimeSpan)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.DisplayAttributes
  parent: System.Speech.Recognition
  isExternal: false
  name: DisplayAttributes
  nameWithType: DisplayAttributes
  fullName: System.Speech.Recognition.DisplayAttributes
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: RecognizedWordUnit.Confidence
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: RecognizedWordUnit.DisplayAttributes
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: RecognizedWordUnit.LexicalForm
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: RecognizedWordUnit.Pronunciation
- uid: System.Speech.Recognition.RecognizedWordUnit.Text
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: RecognizedWordUnit.Text
- uid: System.Speech.Recognition.RecognizedWordUnit.#ctor*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: RecognizedWordUnit
  nameWithType: RecognizedWordUnit.RecognizedWordUnit
  fullName: RecognizedWordUnit.RecognizedWordUnit
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
- uid: System.Speech.Recognition.RecognizedWordUnit.Confidence*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Confidence
  nameWithType: RecognizedWordUnit.Confidence
  fullName: RecognizedWordUnit.Confidence
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
- uid: System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: DisplayAttributes
  nameWithType: RecognizedWordUnit.DisplayAttributes
  fullName: RecognizedWordUnit.DisplayAttributes
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
- uid: System.Speech.Recognition.RecognizedWordUnit.LexicalForm*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: LexicalForm
  nameWithType: RecognizedWordUnit.LexicalForm
  fullName: RecognizedWordUnit.LexicalForm
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
- uid: System.Speech.Recognition.RecognizedWordUnit.Pronunciation*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Pronunciation
  nameWithType: RecognizedWordUnit.Pronunciation
  fullName: RecognizedWordUnit.Pronunciation
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
- uid: System.Speech.Recognition.RecognizedWordUnit.Text*
  parent: System.Speech.Recognition.RecognizedWordUnit
  isExternal: false
  name: Text
  nameWithType: RecognizedWordUnit.Text
  fullName: RecognizedWordUnit.Text
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/RecognizedWordUnit.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
