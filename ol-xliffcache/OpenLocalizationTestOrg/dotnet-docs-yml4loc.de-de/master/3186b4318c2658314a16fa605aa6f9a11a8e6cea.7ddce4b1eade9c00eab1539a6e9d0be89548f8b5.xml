{"nodes":[{"content":"Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.","nodes":[{"pos":[0,165],"content":"Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.","nodes":[{"content":"Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.","pos":[0,165]}]}],"pos":[1081,1247],"yaml":true},{"content":"This class is the base class for the implementation of custom peer name resolvers. A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh. It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.","nodes":[{"pos":[0,337],"content":"This class is the base class for the implementation of custom peer name resolvers. A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh. It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.","nodes":[{"content":"This class is the base class for the implementation of custom peer name resolvers. A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh. It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.","pos":[0,337],"nodes":[{"content":"This class is the base class for the implementation of custom peer name resolvers.","pos":[0,82]},{"content":"A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh.","pos":[83,197]},{"content":"It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.","pos":[198,337]}]}]}],"pos":[1258,1596],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.PeerResolver\"></xref> class.","nodes":[{"pos":[0,94],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerResolver\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.PeerResolver\"></xref> class."}],"pos":[2875,2970],"yaml":true},{"content":"Gets whether the peer name resolver can share referrals.","nodes":[{"pos":[0,56],"content":"Gets whether the peer name resolver can share referrals.","nodes":[{"content":"Gets whether the peer name resolver can share referrals.","pos":[0,56]}]}],"pos":[4025,4082],"yaml":true},{"content":"If true, the peer name resolver can share referrals; if false, it cannot.","nodes":[{"pos":[0,73],"content":"If true, the peer name resolver can share referrals; if false, it cannot.","nodes":[{"content":"If true, the peer name resolver can share referrals; if false, it cannot.","pos":[0,73]}]}],"pos":[4211,4285],"yaml":true},{"content":"Initializes the current peer resolver instance with the new supplied endpoint address and settings.","nodes":[{"pos":[0,99],"content":"Initializes the current peer resolver instance with the new supplied endpoint address and settings.","nodes":[{"content":"Initializes the current peer resolver instance with the new supplied endpoint address and settings.","pos":[0,99]}]}],"pos":[5965,6065],"yaml":true},{"content":"This method simply initializes the existing peer resolver instance; it does not create a new one. To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).","nodes":[{"pos":[0,283],"content":"This method simply initializes the existing peer resolver instance; it does not create a new one. To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).","nodes":[{"content":"This method simply initializes the existing peer resolver instance; it does not create a new one. To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).","pos":[0,283],"nodes":[{"content":"This method simply initializes the existing peer resolver instance; it does not create a new one.","pos":[0,97]},{"content":"To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <ph id=\"ph1\">&lt;xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement&gt;</ph>).","pos":[98,283],"source":" To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>)."}]}]}],"pos":[6076,6360],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.ServiceModel.EndpointAddress\"></xref> that contains the new endpoint address of this peer resolver instance.","nodes":[{"pos":[0,127],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.EndpointAddress\"&gt;&lt;/xref&gt;</ph> that contains the new endpoint address of this peer resolver instance.","source":"<xref href=\"System.ServiceModel.EndpointAddress\"></xref> that contains the new endpoint address of this peer resolver instance."}],"pos":[6740,6868],"yaml":true},{"content":"<xref href=\"System.ServiceModel.Channels.Binding\"></xref> that specifies the new network binding for this peer resolver.","nodes":[{"pos":[0,120],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Channels.Binding\"&gt;&lt;/xref&gt;</ph> that specifies the new network binding for this peer resolver.","source":"<xref href=\"System.ServiceModel.Channels.Binding\"></xref> that specifies the new network binding for this peer resolver."}],"pos":[6954,7075],"yaml":true},{"content":"<xref href=\"System.ServiceModel.Description.ClientCredentials\"></xref> that specifies the new client credentials for this peer resolver.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Description.ClientCredentials\"&gt;&lt;/xref&gt;</ph> that specifies the new client credentials for this peer resolver.","source":"<xref href=\"System.ServiceModel.Description.ClientCredentials\"></xref> that specifies the new client credentials for this peer resolver."}],"pos":[7178,7315],"yaml":true},{"content":"<xref href=\"System.ServiceModel.PeerResolvers.PeerReferralPolicy\"></xref> that specifies the new referral policy for this peer resolver.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerResolvers.PeerReferralPolicy\"&gt;&lt;/xref&gt;</ph> that specifies the new referral policy for this peer resolver.","source":"<xref href=\"System.ServiceModel.PeerResolvers.PeerReferralPolicy\"></xref> that specifies the new referral policy for this peer resolver."}],"pos":[7424,7561],"yaml":true},{"content":"Registers a <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a specific peer mesh.","nodes":[{"pos":[0,94],"content":"Registers a <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;&lt;/xref&gt;</ph> for a specific peer mesh.","source":"Registers a <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a specific peer mesh."}],"pos":[8802,8897],"yaml":true},{"content":"The ID of the peer mesh in which the peer node is to be registered.","nodes":[{"pos":[0,67],"content":"The ID of the peer mesh in which the peer node is to be registered.","nodes":[{"content":"The ID of the peer mesh in which the peer node is to be registered.","pos":[0,67]}]}],"pos":[9114,9182],"yaml":true},{"content":"The <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> to be registered with the peer mesh.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;&lt;/xref&gt;</ph> to be registered with the peer mesh.","source":"The <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> to be registered with the peer mesh."}],"pos":[9271,9369],"yaml":true},{"content":"The length of time to wait for success before aborting the attempt to register with the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"pos":[0,188],"content":"The length of time to wait for success before aborting the attempt to register with the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"content":"The length of time to wait for success before aborting the attempt to register with the peer mesh.","pos":[0,98]},{"content":"If the attempt fails, <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is raised on the peer.","pos":[99,188],"source":" If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer."}]}],"pos":[9434,9623],"yaml":true},{"content":"An <xref href=\"System.Object\"></xref> that represents the registration ID. This registration ID object is passed to the <xref href=\"System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref> and <xref href=\"System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\"></xref> methods.","nodes":[{"pos":[0,356],"content":"An <xref href=\"System.Object\"></xref> that represents the registration ID. This registration ID object is passed to the <xref href=\"System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref> and <xref href=\"System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\"></xref> methods.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Object\"&gt;&lt;/xref&gt;</ph> that represents the registration ID.","pos":[0,74],"source":"An <xref href=\"System.Object\"></xref> that represents the registration ID."},{"content":"This registration ID object is passed to the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\"&gt;&lt;/xref&gt;</ph> methods.","pos":[75,356],"source":" This registration ID object is passed to the <xref href=\"System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref> and <xref href=\"System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\"></xref> methods."}]}],"pos":[9680,10037],"yaml":true},{"content":"Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.","nodes":[{"pos":[0,105],"content":"Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.","nodes":[{"content":"Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.","pos":[0,105]}]}],"pos":[11171,11277],"yaml":true},{"content":"The mesh ID of the peer mesh within which the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing participating nodes are to be obtained.","nodes":[{"pos":[0,163],"content":"The mesh ID of the peer mesh within which the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;&lt;/xref&gt;</ph> objects representing participating nodes are to be obtained.","source":"The mesh ID of the peer mesh within which the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing participating nodes are to be obtained."}],"pos":[11542,11706],"yaml":true},{"content":"The number of endpoint addresses to return.","nodes":[{"pos":[0,43],"content":"The number of endpoint addresses to return.","nodes":[{"content":"The number of endpoint addresses to return.","pos":[0,43]}]}],"pos":[11773,11817],"yaml":true},{"content":"The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"pos":[0,208],"content":"The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"content":"The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh.","pos":[0,118]},{"content":"If the attempt fails, <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is raised on the peer.","pos":[119,208],"source":" If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer."}]}],"pos":[11882,12091],"yaml":true},{"content":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> that contains <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing nodes participating in the peer mesh.","nodes":[{"pos":[0,204],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> that contains <ph id=\"ph2\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;&lt;/xref&gt;</ph> objects representing nodes participating in the peer mesh.","source":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> that contains <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing nodes participating in the peer mesh."}],"pos":[12221,12426],"yaml":true},{"content":"Removes the registration entry for a node from a peer mesh.","nodes":[{"pos":[0,59],"content":"Removes the registration entry for a node from a peer mesh.","nodes":[{"content":"Removes the registration entry for a node from a peer mesh.","pos":[0,59]}]}],"pos":[13517,13577],"yaml":true},{"content":"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID. This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.  \n  \n <xref:System.ServiceModel.PeerResolver.Unregister%2A> is called in two specific cases:  \n  \n-   When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).  \n  \n-   When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh. As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>. If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.","nodes":[{"pos":[0,239],"content":"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID. This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.","nodes":[{"content":"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID. This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.","pos":[0,239],"nodes":[{"content":"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID.","pos":[0,126]},{"content":"This ID value must have been obtained in a previous call to <ph id=\"ph1\">&lt;xref:System.ServiceModel.PeerResolver.Register%2A&gt;</ph>.","pos":[127,239],"source":" This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>."}]}]},{"pos":[246,332],"content":"<xref:System.ServiceModel.PeerResolver.Unregister%2A> is called in two specific cases:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.PeerResolver.Unregister%2A&gt;</ph> is called in two specific cases:","pos":[0,86],"source":"<xref:System.ServiceModel.PeerResolver.Unregister%2A> is called in two specific cases:"}]},{"pos":[342,512],"content":"When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.ServiceModel.PeerNode&gt;</ph> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).","pos":[0,170],"source":"When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it)."}]},{"pos":[522,1099],"content":"When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh. As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>. If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.","nodes":[{"content":"When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh. As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>. If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.","pos":[0,577],"nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.ServiceModel.PeerNode&gt;</ph> can find no available endpoint addresses of other nodes participating in the peer mesh.","pos":[0,132],"source":"When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh."},{"content":"As a result, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.PeerNode&gt;</ph> is no longer reachable, and it will attempt to call <ph id=\"ph2\">&lt;xref:System.ServiceModel.PeerResolver.Unregister%2A&gt;</ph> to unregister itself from the <ph id=\"ph3\">&lt;xref:System.ServiceModel.PeerResolver&gt;</ph>.","pos":[133,362],"source":" As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>."},{"content":"If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <ph id=\"ph1\">&lt;xref:System.ServiceModel.PeerResolver.Register%2A&gt;</ph> and obtaining a new registration ID.","pos":[363,577],"source":" If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID."}]}]}],"pos":[13588,14696],"yaml":true,"extradata":"MT"},{"content":"A registration ID for the node obtained by a previous call to <xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref>.","nodes":[{"pos":[0,192],"content":"A registration ID for the node obtained by a previous call to <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"&gt;&lt;/xref&gt;</ph>.","source":"A registration ID for the node obtained by a previous call to <xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref>."}],"pos":[14880,15073],"yaml":true},{"content":"The length of time to wait for a successful removal of the registration from the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"pos":[0,181],"content":"The length of time to wait for a successful removal of the registration from the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"content":"The length of time to wait for a successful removal of the registration from the peer mesh.","pos":[0,91]},{"content":"If the attempt fails, <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is raised on the peer.","pos":[92,181],"source":" If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer."}]}],"pos":[15138,15320],"yaml":true},{"content":"Updates the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a node registered with a specific peer mesh.","nodes":[{"pos":[0,117],"content":"Updates the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerNodeAddress\"&gt;&lt;/xref&gt;</ph> for a node registered with a specific peer mesh.","source":"Updates the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a node registered with a specific peer mesh."}],"pos":[16549,16667],"yaml":true},{"content":"<xref:System.ServiceModel.PeerResolver.Update%2A> is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.","nodes":[{"pos":[0,149],"content":"<xref:System.ServiceModel.PeerResolver.Update%2A> is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.PeerResolver.Update%2A&gt;</ph> is called when the address of the <ph id=\"ph2\">&lt;xref:System.ServiceModel.PeerNode&gt;</ph> changes on the local machine.","pos":[0,149],"source":"<xref:System.ServiceModel.PeerResolver.Update%2A> is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine."}]}],"pos":[16678,16828],"yaml":true,"extradata":"MT"},{"content":"A registration ID token for the node, obtained by a previous call to <xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref>","nodes":[{"pos":[0,198],"content":"A registration ID token for the node, obtained by a previous call to <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"&gt;&lt;/xref&gt;</ph>","source":"A registration ID token for the node, obtained by a previous call to <xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref>"}],"pos":[17064,17263],"yaml":true},{"content":"The updated endpoint address (and other multihoming IP addresses).","nodes":[{"pos":[0,66],"content":"The updated endpoint address (and other multihoming IP addresses).","nodes":[{"content":"The updated endpoint address (and other multihoming IP addresses).","pos":[0,66]}]}],"pos":[17359,17426],"yaml":true},{"content":"The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"pos":[0,212],"content":"The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.","nodes":[{"content":"The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh.","pos":[0,122]},{"content":"If the attempt fails, <ph id=\"ph1\">&lt;xref href=\"System.TimeoutException\"&gt;&lt;/xref&gt;</ph> is raised on the peer.","pos":[123,212],"source":" If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer."}]}],"pos":[17491,17704],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.PeerResolver\n  commentId: T:System.ServiceModel.PeerResolver\n  id: PeerResolver\n  children:\n  - System.ServiceModel.PeerResolver.#ctor\n  - System.ServiceModel.PeerResolver.CanShareReferrals\n  - System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  - System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  - System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)\n  - System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\n  - System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  langs:\n  - csharp\n  name: PeerResolver\n  nameWithType: PeerResolver\n  fullName: System.ServiceModel.PeerResolver\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Specifies a base type used to define the contract for the registration and resolution of a peer mesh ID to the endpoint addresses of nodes participating in the mesh.\n  remarks: This class is the base class for the implementation of custom peer name resolvers. A peer name resolver is a discovery service used by peer channels to find peer nodes participating in a peer mesh. It is also used to \"register\" a node with a peer mesh, the mechanism by which the peer node becomes known and available from the peer mesh.\n  syntax:\n    content: public abstract class PeerResolver\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.PeerResolver.#ctor\n  commentId: M:System.ServiceModel.PeerResolver.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: PeerResolver()\n  nameWithType: PeerResolver.PeerResolver()\n  fullName: PeerResolver.PeerResolver()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.PeerResolver\"></xref> class.\n  syntax:\n    content: protected PeerResolver ();\n    parameters: []\n  overload: System.ServiceModel.PeerResolver.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.PeerResolver.CanShareReferrals\n  commentId: P:System.ServiceModel.PeerResolver.CanShareReferrals\n  id: CanShareReferrals\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: CanShareReferrals\n  nameWithType: PeerResolver.CanShareReferrals\n  fullName: PeerResolver.CanShareReferrals\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets whether the peer name resolver can share referrals.\n  syntax:\n    content: public abstract bool CanShareReferrals { get; }\n    return:\n      type: System.Boolean\n      description: If true, the peer name resolver can share referrals; if false, it cannot.\n  overload: System.ServiceModel.PeerResolver.CanShareReferrals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  commentId: M:System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  id: Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Initialize(EndpointAddress, Binding, ClientCredentials, PeerReferralPolicy)\n  nameWithType: PeerResolver.Initialize(EndpointAddress, Binding, ClientCredentials, PeerReferralPolicy)\n  fullName: PeerResolver.Initialize(EndpointAddress, Binding, ClientCredentials, PeerReferralPolicy)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes the current peer resolver instance with the new supplied endpoint address and settings.\n  remarks: This method simply initializes the existing peer resolver instance; it does not create a new one. To create a new peer resolver, call the CreatePeerResolver method on the corresponding binding element (for example, <xref:System.ServiceModel.Channels.PnrpPeerResolverBindingElement>).\n  syntax:\n    content: public virtual void Initialize (System.ServiceModel.EndpointAddress address, System.ServiceModel.Channels.Binding binding, System.ServiceModel.Description.ClientCredentials credentials, System.ServiceModel.PeerResolvers.PeerReferralPolicy referralPolicy);\n    parameters:\n    - id: address\n      type: System.ServiceModel.EndpointAddress\n      description: <xref href=\"System.ServiceModel.EndpointAddress\"></xref> that contains the new endpoint address of this peer resolver instance.\n    - id: binding\n      type: System.ServiceModel.Channels.Binding\n      description: <xref href=\"System.ServiceModel.Channels.Binding\"></xref> that specifies the new network binding for this peer resolver.\n    - id: credentials\n      type: System.ServiceModel.Description.ClientCredentials\n      description: <xref href=\"System.ServiceModel.Description.ClientCredentials\"></xref> that specifies the new client credentials for this peer resolver.\n    - id: referralPolicy\n      type: System.ServiceModel.PeerResolvers.PeerReferralPolicy\n      description: <xref href=\"System.ServiceModel.PeerResolvers.PeerReferralPolicy\"></xref> that specifies the new referral policy for this peer resolver.\n  overload: System.ServiceModel.PeerResolver.Initialize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  commentId: M:System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  id: Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Register(String, PeerNodeAddress, TimeSpan)\n  nameWithType: PeerResolver.Register(String, PeerNodeAddress, TimeSpan)\n  fullName: PeerResolver.Register(String, PeerNodeAddress, TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Registers a <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a specific peer mesh.\n  syntax:\n    content: public abstract object Register (string meshId, System.ServiceModel.PeerNodeAddress nodeAddress, TimeSpan timeout);\n    parameters:\n    - id: meshId\n      type: System.String\n      description: The ID of the peer mesh in which the peer node is to be registered.\n    - id: nodeAddress\n      type: System.ServiceModel.PeerNodeAddress\n      description: The <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> to be registered with the peer mesh.\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for success before aborting the attempt to register with the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.\n    return:\n      type: System.Object\n      description: An <xref href=\"System.Object\"></xref> that represents the registration ID. This registration ID object is passed to the <xref href=\"System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref> and <xref href=\"System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\"></xref> methods.\n  overload: System.ServiceModel.PeerResolver.Register*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)\n  commentId: M:System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)\n  id: Resolve(System.String,System.Int32,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Resolve(String, Int32, TimeSpan)\n  nameWithType: PeerResolver.Resolve(String, Int32, TimeSpan)\n  fullName: PeerResolver.Resolve(String, Int32, TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Resolves the supplied mesh ID to zero or more endpoint addresses of nodes participating in the peer mesh.\n  syntax:\n    content: public abstract System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.PeerNodeAddress> Resolve (string meshId, int maxAddresses, TimeSpan timeout);\n    parameters:\n    - id: meshId\n      type: System.String\n      description: The mesh ID of the peer mesh within which the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing participating nodes are to be obtained.\n    - id: maxAddresses\n      type: System.Int32\n      description: The number of endpoint addresses to return.\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for success before aborting the attempt to resolve endpoint addresses within the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.ServiceModel.PeerNodeAddress}\n      description: A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> that contains <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> objects representing nodes participating in the peer mesh.\n  overload: System.ServiceModel.PeerResolver.Resolve*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\n  commentId: M:System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\n  id: Unregister(System.Object,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Unregister(Object, TimeSpan)\n  nameWithType: PeerResolver.Unregister(Object, TimeSpan)\n  fullName: PeerResolver.Unregister(Object, TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Removes the registration entry for a node from a peer mesh.\n  remarks: \"A registration ID is a peer resolver token, that, at the very minimum, represents the tuple of a peer node ID and the mesh ID. This ID value must have been obtained in a previous call to <xref:System.ServiceModel.PeerResolver.Register%2A>.  \\n  \\n <xref:System.ServiceModel.PeerResolver.Unregister%2A> is called in two specific cases:  \\n  \\n-   When the <xref:System.ServiceModel.PeerNode> is leaving the peer mesh (usually as the result of closing the last peer channel or service host that is associated with it).  \\n  \\n-   When the <xref:System.ServiceModel.PeerNode> can find no available endpoint addresses of other nodes participating in the peer mesh. As a result, the <xref:System.ServiceModel.PeerNode> is no longer reachable, and it will attempt to call <xref:System.ServiceModel.PeerResolver.Unregister%2A> to unregister itself from the <xref:System.ServiceModel.PeerResolver>. If other peer nodes within the mesh become available subsequent to unregistration, the node can re-register itself by calling <xref:System.ServiceModel.PeerResolver.Register%2A> and obtaining a new registration ID.\"\n  syntax:\n    content: public abstract void Unregister (object registrationId, TimeSpan timeout);\n    parameters:\n    - id: registrationId\n      type: System.Object\n      description: A registration ID for the node obtained by a previous call to <xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref>.\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for a successful removal of the registration from the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.\n  overload: System.ServiceModel.PeerResolver.Unregister*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  commentId: M:System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  id: Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  langs:\n  - csharp\n  name: Update(Object, PeerNodeAddress, TimeSpan)\n  nameWithType: PeerResolver.Update(Object, PeerNodeAddress, TimeSpan)\n  fullName: PeerResolver.Update(Object, PeerNodeAddress, TimeSpan)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Updates the <xref href=\"System.ServiceModel.PeerNodeAddress\"></xref> for a node registered with a specific peer mesh.\n  remarks: <xref:System.ServiceModel.PeerResolver.Update%2A> is called when the address of the <xref:System.ServiceModel.PeerNode> changes on the local machine.\n  syntax:\n    content: public abstract void Update (object registrationId, System.ServiceModel.PeerNodeAddress updatedNodeAddress, TimeSpan timeout);\n    parameters:\n    - id: registrationId\n      type: System.Object\n      description: A registration ID token for the node, obtained by a previous call to <xref href=\"System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\"></xref>\n    - id: updatedNodeAddress\n      type: System.ServiceModel.PeerNodeAddress\n      description: The updated endpoint address (and other multihoming IP addresses).\n    - id: timeout\n      type: System.TimeSpan\n      description: The length of time to wait for success before aborting the attempt to update the node's registration within the peer mesh. If the attempt fails, <xref href=\"System.TimeoutException\"></xref> is raised on the peer.\n  overload: System.ServiceModel.PeerResolver.Update*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.PeerResolver.#ctor\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: PeerResolver()\n  nameWithType: PeerResolver.PeerResolver()\n  fullName: PeerResolver.PeerResolver()\n- uid: System.ServiceModel.PeerResolver.CanShareReferrals\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: CanShareReferrals\n  nameWithType: PeerResolver.CanShareReferrals\n  fullName: PeerResolver.CanShareReferrals\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.PeerResolver.Initialize(System.ServiceModel.EndpointAddress,System.ServiceModel.Channels.Binding,System.ServiceModel.Description.ClientCredentials,System.ServiceModel.PeerResolvers.PeerReferralPolicy)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Initialize(EndpointAddress, Binding, ClientCredentials, PeerReferralPolicy)\n  nameWithType: PeerResolver.Initialize(EndpointAddress, Binding, ClientCredentials, PeerReferralPolicy)\n  fullName: PeerResolver.Initialize(EndpointAddress, Binding, ClientCredentials, PeerReferralPolicy)\n- uid: System.ServiceModel.EndpointAddress\n  parent: System.ServiceModel\n  isExternal: false\n  name: EndpointAddress\n  nameWithType: EndpointAddress\n  fullName: System.ServiceModel.EndpointAddress\n- uid: System.ServiceModel.Channels.Binding\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: Binding\n  nameWithType: Binding\n  fullName: System.ServiceModel.Channels.Binding\n- uid: System.ServiceModel.Description.ClientCredentials\n  parent: System.ServiceModel.Description\n  isExternal: false\n  name: ClientCredentials\n  nameWithType: ClientCredentials\n  fullName: System.ServiceModel.Description.ClientCredentials\n- uid: System.ServiceModel.PeerResolvers.PeerReferralPolicy\n  parent: System.ServiceModel.PeerResolvers\n  isExternal: false\n  name: PeerReferralPolicy\n  nameWithType: PeerReferralPolicy\n  fullName: System.ServiceModel.PeerResolvers.PeerReferralPolicy\n- uid: System.ServiceModel.PeerResolver.Register(System.String,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Register(String, PeerNodeAddress, TimeSpan)\n  nameWithType: PeerResolver.Register(String, PeerNodeAddress, TimeSpan)\n  fullName: PeerResolver.Register(String, PeerNodeAddress, TimeSpan)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ServiceModel.PeerNodeAddress\n  parent: System.ServiceModel\n  isExternal: false\n  name: PeerNodeAddress\n  nameWithType: PeerNodeAddress\n  fullName: System.ServiceModel.PeerNodeAddress\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.ServiceModel.PeerResolver.Resolve(System.String,System.Int32,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Resolve(String, Int32, TimeSpan)\n  nameWithType: PeerResolver.Resolve(String, Int32, TimeSpan)\n  fullName: PeerResolver.Resolve(String, Int32, TimeSpan)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.ServiceModel.PeerNodeAddress}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<PeerNodeAddress>\n  nameWithType: ReadOnlyCollection<PeerNodeAddress>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.ServiceModel.PeerNodeAddress>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ServiceModel.PeerNodeAddress\n    name: PeerNodeAddress\n    nameWithType: PeerNodeAddress\n    fullName: System.ServiceModel.PeerNodeAddress\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ServiceModel.PeerResolver.Unregister(System.Object,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Unregister(Object, TimeSpan)\n  nameWithType: PeerResolver.Unregister(Object, TimeSpan)\n  fullName: PeerResolver.Unregister(Object, TimeSpan)\n- uid: System.ServiceModel.PeerResolver.Update(System.Object,System.ServiceModel.PeerNodeAddress,System.TimeSpan)\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Update(Object, PeerNodeAddress, TimeSpan)\n  nameWithType: PeerResolver.Update(Object, PeerNodeAddress, TimeSpan)\n  fullName: PeerResolver.Update(Object, PeerNodeAddress, TimeSpan)\n- uid: System.ServiceModel.PeerResolver.#ctor*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: PeerResolver\n  nameWithType: PeerResolver.PeerResolver\n  fullName: PeerResolver.PeerResolver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n- uid: System.ServiceModel.PeerResolver.CanShareReferrals*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: CanShareReferrals\n  nameWithType: PeerResolver.CanShareReferrals\n  fullName: PeerResolver.CanShareReferrals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n- uid: System.ServiceModel.PeerResolver.Initialize*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Initialize\n  nameWithType: PeerResolver.Initialize\n  fullName: PeerResolver.Initialize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n- uid: System.ServiceModel.PeerResolver.Register*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Register\n  nameWithType: PeerResolver.Register\n  fullName: PeerResolver.Register\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n- uid: System.ServiceModel.PeerResolver.Resolve*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Resolve\n  nameWithType: PeerResolver.Resolve\n  fullName: PeerResolver.Resolve\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n- uid: System.ServiceModel.PeerResolver.Unregister*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Unregister\n  nameWithType: PeerResolver.Unregister\n  fullName: PeerResolver.Unregister\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n- uid: System.ServiceModel.PeerResolver.Update*\n  parent: System.ServiceModel.PeerResolver\n  isExternal: false\n  name: Update\n  nameWithType: PeerResolver.Update\n  fullName: PeerResolver.Update\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/PeerResolver.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}