{"nodes":[{"content":"Defines the type of normalization to perform.","nodes":[{"pos":[0,45],"content":"Defines the type of normalization to perform.","nodes":[{"content":"Defines the type of normalization to perform.","pos":[0,45]}]}],"pos":[585,631],"yaml":true},{"content":"Some Unicode sequences are considered equivalent because they represent the same character. For example, the following are considered equivalent because any of these can be used to represent \"ắ\":  \n  \n-   \"\\u1EAF\"  \n  \n-   \"\\u0103\\u0301\"  \n  \n-   \"\\u0061\\u0306\\u0301\"  \n  \n However, ordinal, that is, binary, comparisons consider these sequences different because they contain different Unicode code values. Before performing ordinal comparisons, applications must normalize these strings to decompose them into their basic components.  \n  \n Each composite Unicode character is mapped to a more basic sequence of one or more characters. The process of decomposition replaces composite characters in a string with their more basic mappings. A full decomposition recursively performs this replacement until none of the characters in the string can be decomposed further.  \n  \n Unicode defines two types of decompositions: compatibility decomposition and canonical decomposition. In compatibility decomposition, formatting information might be lost. In canonical decomposition, which is a subset of compatibility decomposition, formatting information is preserved.  \n  \n Two sets of characters are considered to have canonical equivalence if their full canonical decompositions are identical. Likewise, two sets of characters are considered to have compatibility equivalence if their full compatibility decompositions are identical.  \n  \n For more information about normalization, decompositions and equivalence, see [Unicode Standard Annex #15: Unicode Normalization Forms](http://unicode.org/reports/tr15/) at unicode.org.","nodes":[{"pos":[0,195],"content":"Some Unicode sequences are considered equivalent because they represent the same character. For example, the following are considered equivalent because any of these can be used to represent \"ắ\":","nodes":[{"content":"Some Unicode sequences are considered equivalent because they represent the same character. For example, the following are considered equivalent because any of these can be used to represent \"ắ\":","pos":[0,195],"nodes":[{"content":"Some Unicode sequences are considered equivalent because they represent the same character.","pos":[0,91]},{"content":"For example, the following are considered equivalent because any of these can be used to represent \"ắ\":","pos":[92,195]}]}]},{"pos":[205,213],"content":"\"\\u1EAF\"","nodes":[{"content":"\"\\u1EAF\"","pos":[0,8]}]},{"pos":[223,237],"content":"\"\\u0103\\u0301\"","nodes":[{"content":"\"\\u0103\\u0301\"","pos":[0,14]}]},{"pos":[247,267],"content":"\"\\u0061\\u0306\\u0301\"","nodes":[{"content":"\"\\u0061\\u0306\\u0301\"","pos":[0,20]}]},{"pos":[274,535],"content":"However, ordinal, that is, binary, comparisons consider these sequences different because they contain different Unicode code values. Before performing ordinal comparisons, applications must normalize these strings to decompose them into their basic components.","nodes":[{"content":"However, ordinal, that is, binary, comparisons consider these sequences different because they contain different Unicode code values. Before performing ordinal comparisons, applications must normalize these strings to decompose them into their basic components.","pos":[0,261],"nodes":[{"content":"However, ordinal, that is, binary, comparisons consider these sequences different because they contain different Unicode code values.","pos":[0,133]},{"content":"Before performing ordinal comparisons, applications must normalize these strings to decompose them into their basic components.","pos":[134,261]}]}]},{"pos":[542,868],"content":"Each composite Unicode character is mapped to a more basic sequence of one or more characters. The process of decomposition replaces composite characters in a string with their more basic mappings. A full decomposition recursively performs this replacement until none of the characters in the string can be decomposed further.","nodes":[{"content":"Each composite Unicode character is mapped to a more basic sequence of one or more characters. The process of decomposition replaces composite characters in a string with their more basic mappings. A full decomposition recursively performs this replacement until none of the characters in the string can be decomposed further.","pos":[0,326],"nodes":[{"content":"Each composite Unicode character is mapped to a more basic sequence of one or more characters.","pos":[0,94]},{"content":"The process of decomposition replaces composite characters in a string with their more basic mappings.","pos":[95,197]},{"content":"A full decomposition recursively performs this replacement until none of the characters in the string can be decomposed further.","pos":[198,326]}]}]},{"pos":[875,1161],"content":"Unicode defines two types of decompositions: compatibility decomposition and canonical decomposition. In compatibility decomposition, formatting information might be lost. In canonical decomposition, which is a subset of compatibility decomposition, formatting information is preserved.","nodes":[{"content":"Unicode defines two types of decompositions: compatibility decomposition and canonical decomposition. In compatibility decomposition, formatting information might be lost. In canonical decomposition, which is a subset of compatibility decomposition, formatting information is preserved.","pos":[0,286],"nodes":[{"content":"Unicode defines two types of decompositions: compatibility decomposition and canonical decomposition.","pos":[0,101]},{"content":"In compatibility decomposition, formatting information might be lost.","pos":[102,171]},{"content":"In canonical decomposition, which is a subset of compatibility decomposition, formatting information is preserved.","pos":[172,286]}]}]},{"pos":[1168,1429],"content":"Two sets of characters are considered to have canonical equivalence if their full canonical decompositions are identical. Likewise, two sets of characters are considered to have compatibility equivalence if their full compatibility decompositions are identical.","nodes":[{"content":"Two sets of characters are considered to have canonical equivalence if their full canonical decompositions are identical. Likewise, two sets of characters are considered to have compatibility equivalence if their full compatibility decompositions are identical.","pos":[0,261],"nodes":[{"content":"Two sets of characters are considered to have canonical equivalence if their full canonical decompositions are identical.","pos":[0,121]},{"content":"Likewise, two sets of characters are considered to have compatibility equivalence if their full compatibility decompositions are identical.","pos":[122,261]}]}]},{"pos":[1436,1621],"content":"For more information about normalization, decompositions and equivalence, see <bpt id=\"p1\">[</bpt>Unicode Standard Annex #15: Unicode Normalization Forms<ept id=\"p1\">](http://unicode.org/reports/tr15/)</ept> at unicode.org.","source":"For more information about normalization, decompositions and equivalence, see [Unicode Standard Annex #15: Unicode Normalization Forms](http://unicode.org/reports/tr15/) at unicode.org."}],"pos":[642,2296],"yaml":true,"extradata":"MT"},{"content":"Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.","nodes":[{"pos":[0,166],"content":"Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.","nodes":[{"content":"Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.","pos":[0,166]}]}],"pos":[3754,3921],"yaml":true},{"content":"Indicates that a Unicode string is normalized using full canonical decomposition.","nodes":[{"pos":[0,81],"content":"Indicates that a Unicode string is normalized using full canonical decomposition.","nodes":[{"content":"Indicates that a Unicode string is normalized using full canonical decomposition.","pos":[0,81]}]}],"pos":[5140,5222],"yaml":true},{"content":"Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.","nodes":[{"pos":[0,170],"content":"Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.","nodes":[{"content":"Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.","pos":[0,170]}]}],"pos":[6447,6618],"yaml":true},{"content":"Indicates that a Unicode string is normalized using full compatibility decomposition.","nodes":[{"pos":[0,85],"content":"Indicates that a Unicode string is normalized using full compatibility decomposition.","nodes":[{"content":"Indicates that a Unicode string is normalized using full compatibility decomposition.","pos":[0,85]}]}],"pos":[7844,7930],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.NormalizationForm\n  commentId: T:System.Text.NormalizationForm\n  id: NormalizationForm\n  children:\n  - System.Text.NormalizationForm.FormC\n  - System.Text.NormalizationForm.FormD\n  - System.Text.NormalizationForm.FormKC\n  - System.Text.NormalizationForm.FormKD\n  langs:\n  - csharp\n  name: NormalizationForm\n  nameWithType: NormalizationForm\n  fullName: System.Text.NormalizationForm\n  type: Enum\n  assemblies:\n  - System.Globalization.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Defines the type of normalization to perform.\n  remarks: \"Some Unicode sequences are considered equivalent because they represent the same character. For example, the following are considered equivalent because any of these can be used to represent \\\"ắ\\\":  \\n  \\n-   \\\"\\\\u1EAF\\\"  \\n  \\n-   \\\"\\\\u0103\\\\u0301\\\"  \\n  \\n-   \\\"\\\\u0061\\\\u0306\\\\u0301\\\"  \\n  \\n However, ordinal, that is, binary, comparisons consider these sequences different because they contain different Unicode code values. Before performing ordinal comparisons, applications must normalize these strings to decompose them into their basic components.  \\n  \\n Each composite Unicode character is mapped to a more basic sequence of one or more characters. The process of decomposition replaces composite characters in a string with their more basic mappings. A full decomposition recursively performs this replacement until none of the characters in the string can be decomposed further.  \\n  \\n Unicode defines two types of decompositions: compatibility decomposition and canonical decomposition. In compatibility decomposition, formatting information might be lost. In canonical decomposition, which is a subset of compatibility decomposition, formatting information is preserved.  \\n  \\n Two sets of characters are considered to have canonical equivalence if their full canonical decompositions are identical. Likewise, two sets of characters are considered to have compatibility equivalence if their full compatibility decompositions are identical.  \\n  \\n For more information about normalization, decompositions and equivalence, see [Unicode Standard Annex #15: Unicode Normalization Forms](http://unicode.org/reports/tr15/) at unicode.org.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum NormalizationForm\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/NormalizationForm.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.NormalizationForm.FormC\n  commentId: F:System.Text.NormalizationForm.FormC\n  id: FormC\n  parent: System.Text.NormalizationForm\n  langs:\n  - csharp\n  name: FormC\n  nameWithType: NormalizationForm.FormC\n  fullName: NormalizationForm.FormC\n  type: Field\n  assemblies:\n  - System.Globalization.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Indicates that a Unicode string is normalized using full canonical decomposition, followed by the replacement of sequences with their primary composites, if possible.\n  syntax:\n    content: FormC\n    return:\n      type: System.Text.NormalizationForm\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/NormalizationForm.xml\n- uid: System.Text.NormalizationForm.FormD\n  commentId: F:System.Text.NormalizationForm.FormD\n  id: FormD\n  parent: System.Text.NormalizationForm\n  langs:\n  - csharp\n  name: FormD\n  nameWithType: NormalizationForm.FormD\n  fullName: NormalizationForm.FormD\n  type: Field\n  assemblies:\n  - System.Globalization.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Indicates that a Unicode string is normalized using full canonical decomposition.\n  syntax:\n    content: FormD\n    return:\n      type: System.Text.NormalizationForm\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/NormalizationForm.xml\n- uid: System.Text.NormalizationForm.FormKC\n  commentId: F:System.Text.NormalizationForm.FormKC\n  id: FormKC\n  parent: System.Text.NormalizationForm\n  langs:\n  - csharp\n  name: FormKC\n  nameWithType: NormalizationForm.FormKC\n  fullName: NormalizationForm.FormKC\n  type: Field\n  assemblies:\n  - System.Globalization.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Indicates that a Unicode string is normalized using full compatibility decomposition, followed by the replacement of sequences with their primary composites, if possible.\n  syntax:\n    content: FormKC\n    return:\n      type: System.Text.NormalizationForm\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/NormalizationForm.xml\n- uid: System.Text.NormalizationForm.FormKD\n  commentId: F:System.Text.NormalizationForm.FormKD\n  id: FormKD\n  parent: System.Text.NormalizationForm\n  langs:\n  - csharp\n  name: FormKD\n  nameWithType: NormalizationForm.FormKD\n  fullName: NormalizationForm.FormKD\n  type: Field\n  assemblies:\n  - System.Globalization.Extensions\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Indicates that a Unicode string is normalized using full compatibility decomposition.\n  syntax:\n    content: FormKD\n    return:\n      type: System.Text.NormalizationForm\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/NormalizationForm.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Text.NormalizationForm.FormC\n  parent: System.Text.NormalizationForm\n  isExternal: false\n  name: FormC\n  nameWithType: NormalizationForm.FormC\n  fullName: NormalizationForm.FormC\n- uid: System.Text.NormalizationForm\n  parent: System.Text\n  isExternal: false\n  name: NormalizationForm\n  nameWithType: NormalizationForm\n  fullName: System.Text.NormalizationForm\n- uid: System.Text.NormalizationForm.FormD\n  parent: System.Text.NormalizationForm\n  isExternal: false\n  name: FormD\n  nameWithType: NormalizationForm.FormD\n  fullName: NormalizationForm.FormD\n- uid: System.Text.NormalizationForm.FormKC\n  parent: System.Text.NormalizationForm\n  isExternal: false\n  name: FormKC\n  nameWithType: NormalizationForm.FormKC\n  fullName: NormalizationForm.FormKC\n- uid: System.Text.NormalizationForm.FormKD\n  parent: System.Text.NormalizationForm\n  isExternal: false\n  name: FormKD\n  nameWithType: NormalizationForm.FormKD\n  fullName: NormalizationForm.FormKD\n"}