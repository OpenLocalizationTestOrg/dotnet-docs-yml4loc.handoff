{"nodes":[{"content":"Defines the methods that enable the initialization and recycling of thread-local storage with the thread that invokes user code.","nodes":[{"pos":[0,128],"content":"Defines the methods that enable the initialization and recycling of thread-local storage with the thread that invokes user code.","nodes":[{"content":"Defines the methods that enable the initialization and recycling of thread-local storage with the thread that invokes user code.","pos":[0,128]}]}],"pos":[747,876],"yaml":true},{"content":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer> interface and add it to the <xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName> property to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","nodes":[{"pos":[0,637],"content":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer> interface and add it to the <xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName> property to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","nodes":[{"content":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer> interface and add it to the <xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName> property to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","pos":[0,637],"nodes":[{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ICallContextInitializer&gt;</ph> interface and add it to the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName&gt;</ph> property to initialize and clean up thread-local storage for the thread that invokes user code.","pos":[0,307],"source":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer> interface and add it to the <xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName> property to initialize and clean up thread-local storage for the thread that invokes user code."},{"content":"Typical usage is to set some value, such as impersonation or changing the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt;</ph>.","pos":[308,447],"source":" Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>."},{"content":"If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","pos":[448,637]}]}]}],"pos":[887,1525],"yaml":true,"extradata":"MT"},{"content":"Implement to participate in cleaning up the thread that invoked the operation.","nodes":[{"pos":[0,78],"content":"Implement to participate in cleaning up the thread that invoked the operation.","nodes":[{"content":"Implement to participate in cleaning up the thread that invoked the operation.","pos":[0,78]}]}],"pos":[2750,2829],"yaml":true},{"content":"Use this method to perform any necessary cleaning up of the operation thread.","nodes":[{"pos":[0,77],"content":"Use this method to perform any necessary cleaning up of the operation thread.","nodes":[{"content":"Use this method to perform any necessary cleaning up of the operation thread.","pos":[0,77]}]}],"pos":[2840,2918],"yaml":true,"extradata":"MT"},{"content":"The correlation object returned from the <xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\"></xref> method.","nodes":[{"pos":[0,246],"content":"The correlation object returned from the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\"&gt;&lt;/xref&gt;</ph> method.","source":"The correlation object returned from the <xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\"></xref> method."}],"pos":[3080,3327],"yaml":true},{"content":"Implement to participate in the initialization of the operation thread.","nodes":[{"pos":[0,71],"content":"Implement to participate in the initialization of the operation thread.","nodes":[{"content":"Implement to participate in the initialization of the operation thread.","pos":[0,71]}]}],"pos":[4958,5030],"yaml":true},{"content":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke%2A> method to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","nodes":[{"pos":[0,515],"content":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke%2A> method to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","nodes":[{"content":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke%2A> method to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","pos":[0,515],"nodes":[{"content":"Implement the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke%2A&gt;</ph> method to initialize and clean up thread-local storage for the thread that invokes user code.","pos":[0,185],"source":"Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke%2A> method to initialize and clean up thread-local storage for the thread that invokes user code."},{"content":"Typical usage is to set some value, such as impersonation or changing the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt;</ph>.","pos":[186,325],"source":" Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>."},{"content":"If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.","pos":[326,515]}]}]}],"pos":[5041,5557],"yaml":true,"extradata":"MT"},{"content":"The service instance for the operation.","nodes":[{"pos":[0,39],"content":"The service instance for the operation.","nodes":[{"content":"The service instance for the operation.","pos":[0,39]}]}],"pos":[5861,5901],"yaml":true},{"content":"The client channel.","nodes":[{"pos":[0,19],"content":"The client channel.","nodes":[{"content":"The client channel.","pos":[0,19]}]}],"pos":[5985,6005],"yaml":true},{"content":"The incoming message.","nodes":[{"pos":[0,21],"content":"The incoming message.","nodes":[{"content":"The incoming message.","pos":[0,21]}]}],"pos":[6091,6113],"yaml":true},{"content":"A correlation object passed back as the parameter of the <xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\"></xref> method.","nodes":[{"pos":[0,167],"content":"A correlation object passed back as the parameter of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"A correlation object passed back as the parameter of the <xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\"></xref> method."}],"pos":[6170,6338],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.ICallContextInitializer\n  commentId: T:System.ServiceModel.Dispatcher.ICallContextInitializer\n  id: ICallContextInitializer\n  children:\n  - System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\n  - System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\n  langs:\n  - csharp\n  name: ICallContextInitializer\n  nameWithType: ICallContextInitializer\n  fullName: System.ServiceModel.Dispatcher.ICallContextInitializer\n  type: Interface\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Defines the methods that enable the initialization and recycling of thread-local storage with the thread that invokes user code.\n  remarks: Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer> interface and add it to the <xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName> property to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.\n  syntax:\n    content: public interface ICallContextInitializer\n  implements: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ICallContextInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\n  commentId: M:System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\n  id: AfterInvoke(System.Object)\n  parent: System.ServiceModel.Dispatcher.ICallContextInitializer\n  langs:\n  - csharp\n  name: AfterInvoke(Object)\n  nameWithType: ICallContextInitializer.AfterInvoke(Object)\n  fullName: ICallContextInitializer.AfterInvoke(Object)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Implement to participate in cleaning up the thread that invoked the operation.\n  remarks: Use this method to perform any necessary cleaning up of the operation thread.\n  syntax:\n    content: public void AfterInvoke (object correlationState);\n    parameters:\n    - id: correlationState\n      type: System.Object\n      description: The correlation object returned from the <xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\"></xref> method.\n  overload: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ICallContextInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\n  commentId: M:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\n  id: BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.ICallContextInitializer\n  langs:\n  - csharp\n  name: BeforeInvoke(InstanceContext, IClientChannel, Message)\n  nameWithType: ICallContextInitializer.BeforeInvoke(InstanceContext, IClientChannel, Message)\n  fullName: ICallContextInitializer.BeforeInvoke(InstanceContext, IClientChannel, Message)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Implement to participate in the initialization of the operation thread.\n  remarks: Implement the <xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke%2A> method to initialize and clean up thread-local storage for the thread that invokes user code. Typical usage is to set some value, such as impersonation or changing the <xref:System.Globalization.CultureInfo?displayProperty=fullName>. If you wanted to establish some custom context, this is the extension point to initialize the static context property, which is then available for developers in the course of the operation.\n  syntax:\n    content: public object BeforeInvoke (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.IClientChannel channel, System.ServiceModel.Channels.Message message);\n    parameters:\n    - id: instanceContext\n      type: System.ServiceModel.InstanceContext\n      description: The service instance for the operation.\n    - id: channel\n      type: System.ServiceModel.IClientChannel\n      description: The client channel.\n    - id: message\n      type: System.ServiceModel.Channels.Message\n      description: The incoming message.\n    return:\n      type: System.Object\n      description: A correlation object passed back as the parameter of the <xref href=\"System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\"></xref> method.\n  overload: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ICallContextInitializer.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)\n  parent: System.ServiceModel.Dispatcher.ICallContextInitializer\n  isExternal: false\n  name: AfterInvoke(Object)\n  nameWithType: ICallContextInitializer.AfterInvoke(Object)\n  fullName: ICallContextInitializer.AfterInvoke(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)\n  parent: System.ServiceModel.Dispatcher.ICallContextInitializer\n  isExternal: false\n  name: BeforeInvoke(InstanceContext, IClientChannel, Message)\n  nameWithType: ICallContextInitializer.BeforeInvoke(InstanceContext, IClientChannel, Message)\n  fullName: ICallContextInitializer.BeforeInvoke(InstanceContext, IClientChannel, Message)\n- uid: System.ServiceModel.InstanceContext\n  parent: System.ServiceModel\n  isExternal: false\n  name: InstanceContext\n  nameWithType: InstanceContext\n  fullName: System.ServiceModel.InstanceContext\n- uid: System.ServiceModel.IClientChannel\n  parent: System.ServiceModel\n  isExternal: false\n  name: IClientChannel\n  nameWithType: IClientChannel\n  fullName: System.ServiceModel.IClientChannel\n- uid: System.ServiceModel.Channels.Message\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.ServiceModel.Channels.Message\n- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke*\n  parent: System.ServiceModel.Dispatcher.ICallContextInitializer\n  isExternal: false\n  name: AfterInvoke\n  nameWithType: ICallContextInitializer.AfterInvoke\n  fullName: ICallContextInitializer.AfterInvoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ICallContextInitializer.xml\n- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke*\n  parent: System.ServiceModel.Dispatcher.ICallContextInitializer\n  isExternal: false\n  name: BeforeInvoke\n  nameWithType: ICallContextInitializer.BeforeInvoke\n  fullName: ICallContextInitializer.BeforeInvoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ICallContextInitializer.xml\n"}