{"nodes":[{"content":"Implements a set of methods for culture-sensitive string comparisons.","nodes":[{"pos":[0,69],"content":"Implements a set of methods for culture-sensitive string comparisons.","nodes":[{"content":"Implements a set of methods for culture-sensitive string comparisons.","pos":[0,69]}]}],"pos":[5150,5220],"yaml":true},{"content":"Conventions for comparing and sorting data vary from culture to culture. For example, sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \"Æ\" character that it sorts after \"Z\" in the alphabet. In addition, comparisons may be case-sensitive or case-insensitive, and casing rules may also differ by culture. The <xref:System.Globalization.CompareInfo> class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations.  \n  \n Typically, you do not have to instantiate a <xref:System.Globalization.CompareInfo> object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <xref:System.String.Compare%2A?displayProperty=fullName> method. However, if you do want to retrieve a <xref:System.Globalization.CompareInfo> object, you can do it in one of these ways:  \n  \n-   By retrieving the value of the <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> property for a particular culture.  \n  \n-   By calling the static <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> method with a culture name. This allows for late-bound access to a <xref:System.Globalization.CompareInfo> object.  \n  \n## Ignored search values  \n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. Comparison methods such as <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> do not consider such characters when they perform a culture-sensitive comparison. Ignorable characters include:  \n  \n-   <xref:System.String.Empty?displayProperty=fullName>. Culture-sensitive comparison methods will always find an empty string at the beginning (index zero) of the string being searched.  \n  \n-   A character or string consisting of characters with code points that are not considered in the operation because of comparison options, In particular, the  <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> options produce searches in which symbols and nonspacing combining characters are ignored.  \n  \n-   A string with code points that have no linguistic significance. For example, a soft hyphen (U+00AD) is always ignored in a culture-sensitive string comparison.  \n  \n## Security considerations  \n If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent, regardless of the culture settings of the operating system.  \n  \n> [!NOTE]\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","nodes":[{"pos":[0,727],"content":"Conventions for comparing and sorting data vary from culture to culture. For example, sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \"Æ\" character that it sorts after \"Z\" in the alphabet. In addition, comparisons may be case-sensitive or case-insensitive, and casing rules may also differ by culture. The <xref:System.Globalization.CompareInfo> class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations.","nodes":[{"content":"Conventions for comparing and sorting data vary from culture to culture. For example, sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \"Æ\" character that it sorts after \"Z\" in the alphabet. In addition, comparisons may be case-sensitive or case-insensitive, and casing rules may also differ by culture. The <xref:System.Globalization.CompareInfo> class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations.","pos":[0,727],"nodes":[{"content":"Conventions for comparing and sorting data vary from culture to culture.","pos":[0,72]},{"content":"For example, sort order may be based on phonetics or on the visual representation of characters.","pos":[73,169]},{"content":"In East Asian languages, characters are sorted by the stroke and radical of ideographs.","pos":[170,257]},{"content":"Sorting also depends on the order languages and cultures use for the alphabet.","pos":[258,336]},{"content":"For example, the Danish language has an \"Æ\" character that it sorts after \"Z\" in the alphabet.","pos":[337,431]},{"content":"In addition, comparisons may be case-sensitive or case-insensitive, and casing rules may also differ by culture.","pos":[432,544]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations.","pos":[545,727],"source":" The <xref:System.Globalization.CompareInfo> class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations."}]}]},{"pos":[734,1124],"content":"Typically, you do not have to instantiate a <xref:System.Globalization.CompareInfo> object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <xref:System.String.Compare%2A?displayProperty=fullName> method. However, if you do want to retrieve a <xref:System.Globalization.CompareInfo> object, you can do it in one of these ways:","nodes":[{"content":"Typically, you do not have to instantiate a <xref:System.Globalization.CompareInfo> object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <xref:System.String.Compare%2A?displayProperty=fullName> method. However, if you do want to retrieve a <xref:System.Globalization.CompareInfo> object, you can do it in one of these ways:","pos":[0,390],"nodes":[{"content":"Typically, you do not have to instantiate a <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <ph id=\"ph2\">&lt;xref:System.String.Compare%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,268],"source":"Typically, you do not have to instantiate a <xref:System.Globalization.CompareInfo> object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <xref:System.String.Compare%2A?displayProperty=fullName> method."},{"content":"However, if you do want to retrieve a <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> object, you can do it in one of these ways:","pos":[269,390],"source":" However, if you do want to retrieve a <xref:System.Globalization.CompareInfo> object, you can do it in one of these ways:"}]}]},{"pos":[1134,1279],"content":"By retrieving the value of the <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> property for a particular culture.","nodes":[{"content":"By retrieving the value of the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName&gt;</ph> property for a particular culture.","pos":[0,145],"source":"By retrieving the value of the <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> property for a particular culture."}]},{"pos":[1289,1483],"content":"By calling the static <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> method with a culture name. This allows for late-bound access to a <xref:System.Globalization.CompareInfo> object.","nodes":[{"content":"By calling the static <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> method with a culture name. This allows for late-bound access to a <xref:System.Globalization.CompareInfo> object.","pos":[0,194],"nodes":[{"content":"By calling the static <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.GetCompareInfo%2A&gt;</ph> method with a culture name.","pos":[0,107],"source":"By calling the static <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> method with a culture name."},{"content":"This allows for late-bound access to a <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> object.","pos":[108,194],"source":" This allows for late-bound access to a <xref:System.Globalization.CompareInfo> object."}]}]},{"pos":[1492,1513],"content":"Ignored search values","linkify":"Ignored search values","nodes":[{"content":"Ignored search values","pos":[0,21]}]},{"pos":[1517,1917],"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. Comparison methods such as <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> do not consider such characters when they perform a culture-sensitive comparison. Ignorable characters include:","nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. Comparison methods such as <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> do not consider such characters when they perform a culture-sensitive comparison. Ignorable characters include:","pos":[0,400],"nodes":[{"content":"Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison.","pos":[0,151]},{"content":"Comparison methods such as <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo.LastIndexOf%2A&gt;</ph> do not consider such characters when they perform a culture-sensitive comparison.","pos":[152,370],"source":" Comparison methods such as <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> do not consider such characters when they perform a culture-sensitive comparison."},{"content":"Ignorable characters include:","pos":[371,400]}]}]},{"pos":[1927,2109],"content":"<xref:System.String.Empty?displayProperty=fullName>. Culture-sensitive comparison methods will always find an empty string at the beginning (index zero) of the string being searched.","nodes":[{"content":"<xref:System.String.Empty?displayProperty=fullName>. Culture-sensitive comparison methods will always find an empty string at the beginning (index zero) of the string being searched.","pos":[0,182],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.String.Empty?displayProperty=fullName&gt;</ph>.","pos":[0,52],"source":"<xref:System.String.Empty?displayProperty=fullName>."},{"content":"Culture-sensitive comparison methods will always find an empty string at the beginning (index zero) of the string being searched.","pos":[53,182]}]}]},{"pos":[2119,2505],"content":"A character or string consisting of characters with code points that are not considered in the operation because of comparison options, In particular, the  <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> options produce searches in which symbols and nonspacing combining characters are ignored.","nodes":[{"content":"A character or string consisting of characters with code points that are not considered in the operation because of comparison options, In particular, the  <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> options produce searches in which symbols and nonspacing combining characters are ignored.","pos":[0,386],"source":"A character or string consisting of characters with code points that are not considered in the operation because of comparison options, In particular, the  <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> options produce searches in which symbols and nonspacing combining characters are ignored."}]},{"pos":[2515,2674],"content":"A string with code points that have no linguistic significance. For example, a soft hyphen (U+00AD) is always ignored in a culture-sensitive string comparison.","nodes":[{"content":"A string with code points that have no linguistic significance. For example, a soft hyphen (U+00AD) is always ignored in a culture-sensitive string comparison.","pos":[0,159],"nodes":[{"content":"A string with code points that have no linguistic significance.","pos":[0,63]},{"content":"For example, a soft hyphen (U+00AD) is always ignored in a culture-sensitive string comparison.","pos":[64,159]}]}]},{"pos":[2683,2706],"content":"Security considerations","linkify":"Security considerations","nodes":[{"content":"Security considerations","pos":[0,23]}]},{"pos":[2710,2972],"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent, regardless of the culture settings of the operating system.","nodes":[{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent, regardless of the culture settings of the operating system.","pos":[0,262],"source":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent, regardless of the culture settings of the operating system."}]},{"pos":[2980,3440],"content":"[!NOTE]\n When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","pos":[8,458],"nodes":[{"content":"When possible, you should use string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,173],"source":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase&gt;</ph> for security comparisons.","pos":[174,450],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons."}]}]}],"pos":[5231,8699],"yaml":true,"extradata":"MT"},{"content":"Compares two strings.","nodes":[{"pos":[0,21],"content":"Compares two strings.","nodes":[{"content":"Compares two strings.","pos":[0,21]}]}],"pos":[11499,11521],"yaml":true},{"content":"By default, the comparison is performed by using <xref:System.Globalization.CompareOptions?displayProperty=fullName>. If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","nodes":[{"pos":[0,379],"content":"By default, the comparison is performed by using <xref:System.Globalization.CompareOptions?displayProperty=fullName>. If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"content":"By default, the comparison is performed by using <xref:System.Globalization.CompareOptions?displayProperty=fullName>. If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[0,379],"nodes":[{"content":"By default, the comparison is performed by using <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph>.","pos":[0,117],"source":"By default, the comparison is performed by using <xref:System.Globalization.CompareOptions?displayProperty=fullName>."},{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[118,379],"source":" If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system."}]}]},{"pos":[387,848],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","pos":[8,459],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase&gt;</ph> for security comparisons.","pos":[175,451],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons."}]}]}],"pos":[11532,12386],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[14077,14106],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[14169,14199],"yaml":true},{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td><code>string1</code> is less than <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td><code>string1</code> is greater than <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,87],"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","pos":[0,87]}]},{"pos":[94,498],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td><code>string1</code> is less than <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td><code>string1</code> is greater than <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"zero","pos":[95,104],"source":" zero  \n  \n "},{"content":" The two strings are equal.  \n  \n ","pos":[115,149],"nodes":[{"content":"The two strings are equal.","pos":[1,27]}]},{"content":"less than zero","pos":[168,187],"source":" less than zero  \n  \n "},{"content":"<code>string1</code> is less than <code>string2</code>.  \n  \n ","pos":[198,260],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[0,55],"source":"<code>string1</code> is less than <code>string2</code>."}]},{"content":"greater than zero","pos":[279,301],"source":" greater than zero  \n  \n "},{"content":"<code>string1</code> is greater than <code>string2</code>.  \n  \n ","pos":[312,377],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[0,58],"source":"<code>string1</code> is greater than <code>string2</code>."}]}]}],"pos":[14255,14773],"yaml":true},{"content":"Compares two strings using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"Compares two strings using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Compares two strings using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[16580,16685],"yaml":true},{"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","nodes":[{"pos":[0,261],"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[0,261],"source":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system."}]},{"pos":[269,730],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","pos":[8,459],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase&gt;</ph> for security comparisons.","pos":[175,451],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons."}]}]}],"pos":[16696,17432],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[18795,18824],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[18887,18917],"yaml":true},{"content":"A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.","nodes":[{"pos":[0,704],"content":"A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">string2</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,90],"source":"A value that defines how <code>string1</code> and <code>string2</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph8\">&lt;xref href=\"System.Globalization.CompareOptions.StringSort\"&gt;&lt;/xref&gt;</ph>.","pos":[91,704],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>."}]}],"pos":[19002,19709],"yaml":true},{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td><code>string1</code> is less than <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td><code>string1</code> is greater than <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,87],"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","pos":[0,87]}]},{"pos":[94,498],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td><code>string1</code> is less than <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td><code>string1</code> is greater than <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"zero","pos":[95,104],"source":" zero  \n  \n "},{"content":" The two strings are equal.  \n  \n ","pos":[115,149],"nodes":[{"content":"The two strings are equal.","pos":[1,27]}]},{"content":"less than zero","pos":[168,187],"source":" less than zero  \n  \n "},{"content":"<code>string1</code> is less than <code>string2</code>.  \n  \n ","pos":[198,260],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[0,55],"source":"<code>string1</code> is less than <code>string2</code>."}]},{"content":"greater than zero","pos":[279,301],"source":" greater than zero  \n  \n "},{"content":"<code>string1</code> is greater than <code>string2</code>.  \n  \n ","pos":[312,377],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[0,58],"source":"<code>string1</code> is greater than <code>string2</code>."}]}]}],"pos":[19765,20283],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[20445,20550],"yaml":true},{"content":"Compares the end section of a string with the end section of another string.","nodes":[{"pos":[0,76],"content":"Compares the end section of a string with the end section of another string.","nodes":[{"content":"Compares the end section of a string with the end section of another string.","pos":[0,76]}]}],"pos":[22267,22344],"yaml":true},{"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","nodes":[{"pos":[0,261],"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[0,261],"source":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system."}]},{"pos":[269,730],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","pos":[8,459],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase&gt;</ph> for security comparisons.","pos":[175,451],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons."}]}]}],"pos":[22355,23091],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[24424,24453],"yaml":true},{"content":"The zero-based index of the character in <code>string1</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string1</code> at which to start comparing."}],"pos":[24515,24606],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[24669,24699],"yaml":true},{"content":"The zero-based index of the character in <code>string2</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string2</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string2</code> at which to start comparing."}],"pos":[24761,24852],"yaml":true},{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,87],"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","pos":[0,87]}]},{"pos":[94,600],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"zero","pos":[95,104],"source":" zero  \n  \n "},{"content":" The two strings are equal.  \n  \n ","pos":[115,149],"nodes":[{"content":"The two strings are equal.","pos":[1,27]}]},{"content":"less than zero","pos":[168,187],"source":" less than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n ","pos":[198,311],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is less than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,106],"source":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>."}]},{"content":"greater than zero","pos":[330,352],"source":" greater than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n ","pos":[363,479],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is greater than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,109],"source":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>."}]}]}],"pos":[24908,25528],"yaml":true},{"content":"<code>offset1</code> or <code>offset2</code> is less than zero.  \n  \n -or-  \n  \n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \n  \n -or-  \n  \n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;offset2&lt;/code&gt;</ph> is less than zero.","source":"<code>offset1</code> or <code>offset2</code> is less than zero."},{"pos":[70,74],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[81,179],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string1&lt;/code&gt;</ph>.","source":"<code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>."},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,295],"content":"<ph id=\"ph1\">&lt;code&gt;offset2&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","source":"<code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>."}],"pos":[25710,26016],"yaml":true},{"content":"Compares the end section of a string with the end section of another string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,159],"content":"Compares the end section of a string with the end section of another string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Compares the end section of a string with the end section of another string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[27872,28032],"yaml":true},{"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","nodes":[{"pos":[0,261],"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[0,261],"source":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system."}]},{"pos":[269,730],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","pos":[8,459],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase&gt;</ph> for security comparisons.","pos":[175,451],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons."}]}]}],"pos":[28043,28779],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[29796,29825],"yaml":true},{"content":"The zero-based index of the character in <code>string1</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string1</code> at which to start comparing."}],"pos":[29887,29978],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[30041,30071],"yaml":true},{"content":"The zero-based index of the character in <code>string2</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string2</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string2</code> at which to start comparing."}],"pos":[30133,30224],"yaml":true},{"content":"A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.","nodes":[{"pos":[0,704],"content":"A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">string2</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,90],"source":"A value that defines how <code>string1</code> and <code>string2</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph8\">&lt;xref href=\"System.Globalization.CompareOptions.StringSort\"&gt;&lt;/xref&gt;</ph>.","pos":[91,704],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>."}]}],"pos":[30309,31016],"yaml":true},{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,87],"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","pos":[0,87]}]},{"pos":[94,600],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"zero","pos":[95,104],"source":" zero  \n  \n "},{"content":" The two strings are equal.  \n  \n ","pos":[115,149],"nodes":[{"content":"The two strings are equal.","pos":[1,27]}]},{"content":"less than zero","pos":[168,187],"source":" less than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n ","pos":[198,311],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is less than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,106],"source":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>."}]},{"content":"greater than zero","pos":[330,352],"source":" greater than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n ","pos":[363,479],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is greater than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,109],"source":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>."}]}]}],"pos":[31072,31692],"yaml":true},{"content":"<code>offset1</code> or <code>offset2</code> is less than zero.  \n  \n -or-  \n  \n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \n  \n -or-  \n  \n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;offset2&lt;/code&gt;</ph> is less than zero.","source":"<code>offset1</code> or <code>offset2</code> is less than zero."},{"pos":[70,74],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[81,179],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string1&lt;/code&gt;</ph>.","source":"<code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>."},{"pos":[186,190],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[197,295],"content":"<ph id=\"ph1\">&lt;code&gt;offset2&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","source":"<code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>."}],"pos":[31874,32180],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[32274,32379],"yaml":true},{"content":"Compares a section of one string with a section of another string.","nodes":[{"pos":[0,66],"content":"Compares a section of one string with a section of another string.","nodes":[{"content":"Compares a section of one string with a section of another string.","pos":[0,66]}]}],"pos":[34199,34266],"yaml":true},{"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \n  \n> [!NOTE]\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","nodes":[{"pos":[0,261],"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[0,261],"source":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system."}]},{"pos":[269,729],"content":"[!NOTE]\n When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","pos":[8,458],"nodes":[{"content":"When possible, you should use string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,173],"source":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase&gt;</ph> for security comparisons.","pos":[174,450],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons."}]}]}],"pos":[34277,35012],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[36425,36454],"yaml":true},{"content":"The zero-based index of the character in <code>string1</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string1</code> at which to start comparing."}],"pos":[36516,36607],"yaml":true},{"content":"The number of consecutive characters in <code>string1</code> to compare.","nodes":[{"pos":[0,72],"content":"The number of consecutive characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> to compare.","source":"The number of consecutive characters in <code>string1</code> to compare."}],"pos":[36669,36742],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[36805,36835],"yaml":true},{"content":"The zero-based index of the character in <code>string2</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string2</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string2</code> at which to start comparing."}],"pos":[36897,36988],"yaml":true},{"content":"The number of consecutive characters in <code>string2</code> to compare.","nodes":[{"pos":[0,72],"content":"The number of consecutive characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string2</ph><ept id=\"p1\">&lt;/code&gt;</ept> to compare.","source":"The number of consecutive characters in <code>string2</code> to compare."}],"pos":[37050,37123],"yaml":true},{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,87],"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","pos":[0,87]}]},{"pos":[94,600],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"zero","pos":[95,104],"source":" zero  \n  \n "},{"content":" The two strings are equal.  \n  \n ","pos":[115,149],"nodes":[{"content":"The two strings are equal.","pos":[1,27]}]},{"content":"less than zero","pos":[168,187],"source":" less than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n ","pos":[198,311],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is less than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,106],"source":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>."}]},{"content":"greater than zero","pos":[330,352],"source":" greater than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n ","pos":[363,479],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is greater than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,109],"source":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>."}]}]}],"pos":[37179,37799],"yaml":true},{"content":"<code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero.  \n  \n -or-  \n  \n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \n  \n -or-  \n  \n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.  \n  \n -or-  \n  \n <code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>.  \n  \n -or-  \n  \n <code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length1&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;offset2&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;length2&lt;/code&gt;</ph> is less than zero.","source":"<code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero."},{"pos":[118,122],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[129,227],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string1&lt;/code&gt;</ph>.","source":"<code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>."},{"pos":[234,238],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[245,343],"content":"<ph id=\"ph1\">&lt;code&gt;offset2&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","source":"<code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>."},{"pos":[350,354],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[361,484],"content":"<ph id=\"ph1\">&lt;code&gt;length1&lt;/code&gt;</ph> is greater than the number of characters from <ph id=\"ph2\">&lt;code&gt;offset1&lt;/code&gt;</ph> to the end of <ph id=\"ph3\">&lt;code&gt;string1&lt;/code&gt;</ph>.","source":"<code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>."},{"pos":[491,495],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[502,625],"content":"<ph id=\"ph1\">&lt;code&gt;length2&lt;/code&gt;</ph> is greater than the number of characters from <ph id=\"ph2\">&lt;code&gt;offset2&lt;/code&gt;</ph> to the end of <ph id=\"ph3\">&lt;code&gt;string2&lt;/code&gt;</ph>.","source":"<code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>."}],"pos":[37981,38625],"yaml":true},{"content":"Compares a section of one string with a section of another string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,149],"content":"Compares a section of one string with a section of another string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Compares a section of one string with a section of another string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[40601,40751],"yaml":true},{"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","nodes":[{"pos":[0,261],"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[0,261],"source":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system."}]},{"pos":[269,730],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.","pos":[8,459],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.OrdinalIgnoreCase&gt;</ph> for security comparisons.","pos":[175,451],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons."}]}]}],"pos":[40762,41498],"yaml":true,"extradata":"MT"},{"content":"The first string to compare.","nodes":[{"pos":[0,28],"content":"The first string to compare.","nodes":[{"content":"The first string to compare.","pos":[0,28]}]}],"pos":[42595,42624],"yaml":true},{"content":"The zero-based index of the character in <code>string1</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string1</code> at which to start comparing."}],"pos":[42686,42777],"yaml":true},{"content":"The number of consecutive characters in <code>string1</code> to compare.","nodes":[{"pos":[0,72],"content":"The number of consecutive characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> to compare.","source":"The number of consecutive characters in <code>string1</code> to compare."}],"pos":[42839,42912],"yaml":true},{"content":"The second string to compare.","nodes":[{"pos":[0,29],"content":"The second string to compare.","nodes":[{"content":"The second string to compare.","pos":[0,29]}]}],"pos":[42975,43005],"yaml":true},{"content":"The zero-based index of the character in <code>string2</code> at which to start comparing.","nodes":[{"pos":[0,90],"content":"The zero-based index of the character in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string2</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to start comparing.","source":"The zero-based index of the character in <code>string2</code> at which to start comparing."}],"pos":[43067,43158],"yaml":true},{"content":"The number of consecutive characters in <code>string2</code> to compare.","nodes":[{"pos":[0,72],"content":"The number of consecutive characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string2</ph><ept id=\"p1\">&lt;/code&gt;</ept> to compare.","source":"The number of consecutive characters in <code>string2</code> to compare."}],"pos":[43220,43293],"yaml":true},{"content":"A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.","nodes":[{"pos":[0,704],"content":"A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">string1</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">string2</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,90],"source":"A value that defines how <code>string1</code> and <code>string2</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph8\">&lt;xref href=\"System.Globalization.CompareOptions.StringSort\"&gt;&lt;/xref&gt;</ph>.","pos":[91,704],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>."}]}],"pos":[43378,44085],"yaml":true},{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,87],"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","nodes":[{"content":"A 32-bit signed integer indicating the lexical relationship between the two comparands.","pos":[0,87]}]},{"pos":[94,600],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> zero  \n  \n </td><td> The two strings are equal.  \n  \n </td></tr><tr><td> less than zero  \n  \n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n </td></tr><tr><td> greater than zero  \n  \n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Condition","pos":[45,59],"source":" Condition  \n  \n "},{"content":"zero","pos":[95,104],"source":" zero  \n  \n "},{"content":" The two strings are equal.  \n  \n ","pos":[115,149],"nodes":[{"content":"The two strings are equal.","pos":[1,27]}]},{"content":"less than zero","pos":[168,187],"source":" less than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \n  \n ","pos":[198,311],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is less than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,106],"source":" The specified section of <code>string1</code> is less than the specified section of <code>string2</code>."}]},{"content":"greater than zero","pos":[330,352],"source":" greater than zero  \n  \n "},{"content":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \n  \n ","pos":[363,479],"nodes":[{"content":"The specified section of <ph id=\"ph1\">&lt;code&gt;string1&lt;/code&gt;</ph> is greater than the specified section of <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","pos":[1,109],"source":" The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>."}]}]}],"pos":[44141,44761],"yaml":true},{"content":"<code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero.  \n  \n -or-  \n  \n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \n  \n -or-  \n  \n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.  \n  \n -or-  \n  \n <code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>.  \n  \n -or-  \n  \n <code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;length1&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;offset2&lt;/code&gt;</ph> or <ph id=\"ph4\">&lt;code&gt;length2&lt;/code&gt;</ph> is less than zero.","source":"<code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero."},{"pos":[118,122],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[129,227],"content":"<ph id=\"ph1\">&lt;code&gt;offset1&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string1&lt;/code&gt;</ph>.","source":"<code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>."},{"pos":[234,238],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[245,343],"content":"<ph id=\"ph1\">&lt;code&gt;offset2&lt;/code&gt;</ph> is greater than or equal to the number of characters in <ph id=\"ph2\">&lt;code&gt;string2&lt;/code&gt;</ph>.","source":"<code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>."},{"pos":[350,354],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[361,484],"content":"<ph id=\"ph1\">&lt;code&gt;length1&lt;/code&gt;</ph> is greater than the number of characters from <ph id=\"ph2\">&lt;code&gt;offset1&lt;/code&gt;</ph> to the end of <ph id=\"ph3\">&lt;code&gt;string1&lt;/code&gt;</ph>.","source":"<code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>."},{"pos":[491,495],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[502,625],"content":"<ph id=\"ph1\">&lt;code&gt;length2&lt;/code&gt;</ph> is greater than the number of characters from <ph id=\"ph2\">&lt;code&gt;offset2&lt;/code&gt;</ph> to the end of <ph id=\"ph3\">&lt;code&gt;string2&lt;/code&gt;</ph>.","source":"<code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>."}],"pos":[44943,45587],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[45681,45786],"yaml":true},{"content":"Determines whether the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\"></xref> object.","nodes":[{"pos":[0,125],"content":"Determines whether the specified object is equal to the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\"></xref> object."}],"pos":[47311,47437],"yaml":true},{"content":"Two <xref:System.Globalization.CompareInfo> objects are equal if their <xref:System.Globalization.CompareInfo.LCID%2A> and <xref:System.Globalization.CompareInfo.Name%2A> properties are equal.  \n  \n This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>.  \n  \n If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"pos":[0,192],"content":"Two <xref:System.Globalization.CompareInfo> objects are equal if their <xref:System.Globalization.CompareInfo.LCID%2A> and <xref:System.Globalization.CompareInfo.Name%2A> properties are equal.","nodes":[{"content":"Two <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> objects are equal if their <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo.LCID%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Globalization.CompareInfo.Name%2A&gt;</ph> properties are equal.","pos":[0,192],"source":"Two <xref:System.Globalization.CompareInfo> objects are equal if their <xref:System.Globalization.CompareInfo.LCID%2A> and <xref:System.Globalization.CompareInfo.Name%2A> properties are equal."}]},{"pos":[199,277],"content":"This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A?displayProperty=fullName&gt;</ph>.","pos":[0,78],"source":"This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>."}]},{"pos":[284,545],"content":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","nodes":[{"content":"If a security decision depends on a string comparison or a case change, you should use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.InvariantCulture%2A&gt;</ph> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.","pos":[0,261],"source":"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system."}]}],"pos":[47448,48000],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current <xref href=\"System.Globalization.CompareInfo\"></xref>.","nodes":[{"pos":[0,93],"content":"The object to compare with the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph>.","source":"The object to compare with the current <xref href=\"System.Globalization.CompareInfo\"></xref>."}],"pos":[48144,48238],"yaml":true},{"content":"`true` if the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,129],"content":"<ph id=\"ph1\">`true`</ph> if the specified object is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\"></xref>; otherwise, `false`."}],"pos":[48296,48428],"yaml":true},{"content":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the specified culture and that uses string comparison methods in the specified <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,230],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object that is associated with the specified culture and that uses string comparison methods in the specified <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the specified culture and that uses string comparison methods in the specified <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[50140,50371],"yaml":true},{"content":"> [!NOTE]\n>  The behavior of this method is unpredictable. We recommend that you use a version of this method that does not take an assembly input.  \n  \n The `assembly` parameter must be of the same type as <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>.","nodes":[{"pos":[2,147],"content":"[!NOTE]\n The behavior of this method is unpredictable. We recommend that you use a version of this method that does not take an assembly input.","leadings":["","> "],"nodes":[{"content":" The behavior of this method is unpredictable. We recommend that you use a version of this method that does not take an assembly input.","pos":[8,143],"nodes":[{"content":"The behavior of this method is unpredictable.","pos":[1,46]},{"content":"We recommend that you use a version of this method that does not take an assembly input.","pos":[47,135]}]}]},{"pos":[154,276],"content":"The <ph id=\"ph1\">`assembly`</ph> parameter must be of the same type as <ph id=\"ph2\">&lt;xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName&gt;</ph>.","source":"The `assembly` parameter must be of the same type as <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>."}],"pos":[50382,50664],"yaml":true,"extradata":"MT"},{"content":"A string representing the culture name.","nodes":[{"pos":[0,39],"content":"A string representing the culture name.","nodes":[{"content":"A string representing the culture name.","pos":[0,39]}]}],"pos":[50877,50917],"yaml":true},{"content":"An <xref href=\"System.Reflection.Assembly\"></xref> that contains the string comparison methods to use.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> that contains the string comparison methods to use.","source":"An <xref href=\"System.Reflection.Assembly\"></xref> that contains the string comparison methods to use."}],"pos":[50994,51097],"yaml":true},{"content":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,224],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object associated with the culture with the specified identifier and using string comparison methods in the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[51173,51398],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>assembly</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,78],"content":"<ph id=\"ph1\">&lt;code&gt;assembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assembly</code> is `null`."}],"pos":[51575,51660],"yaml":true},{"content":"<code>name</code> is an invalid culture name.  \n  \n -or-  \n  \n <code>assembly</code> is of an invalid type.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is an invalid culture name.","source":"<code>name</code> is an invalid culture name."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,107],"content":"<ph id=\"ph1\">&lt;code&gt;assembly&lt;/code&gt;</ph> is of an invalid type.","source":"<code>assembly</code> is of an invalid type."}],"pos":[51754,51868],"yaml":true},{"content":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the specified culture and that uses string comparison methods in the specified <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,230],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object that is associated with the specified culture and that uses string comparison methods in the specified <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the specified culture and that uses string comparison methods in the specified <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[53200,53431],"yaml":true},{"content":"> [!NOTE]\n>  The behavior of this method is unpredictable. It is recommended for your application to use a version of this method that does not take an assembly input.  \n  \n The `assembly` parameter must be of the same type as <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>.","nodes":[{"pos":[2,167],"content":"[!NOTE]\n The behavior of this method is unpredictable. It is recommended for your application to use a version of this method that does not take an assembly input.","leadings":["","> "],"nodes":[{"content":" The behavior of this method is unpredictable. It is recommended for your application to use a version of this method that does not take an assembly input.","pos":[8,163],"nodes":[{"content":"The behavior of this method is unpredictable.","pos":[1,46]},{"content":"It is recommended for your application to use a version of this method that does not take an assembly input.","pos":[47,155]}]}]},{"pos":[174,296],"content":"The <ph id=\"ph1\">`assembly`</ph> parameter must be of the same type as <ph id=\"ph2\">&lt;xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName&gt;</ph>.","source":"The `assembly` parameter must be of the same type as <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>."}],"pos":[53442,53744],"yaml":true,"extradata":"MT"},{"content":"An integer representing the culture identifier.","nodes":[{"pos":[0,47],"content":"An integer representing the culture identifier.","nodes":[{"content":"An integer representing the culture identifier.","pos":[0,47]}]}],"pos":[53959,54007],"yaml":true},{"content":"An <xref href=\"System.Reflection.Assembly\"></xref> that contains the string comparison methods to use.","nodes":[{"pos":[0,102],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> that contains the string comparison methods to use.","source":"An <xref href=\"System.Reflection.Assembly\"></xref> that contains the string comparison methods to use."}],"pos":[54084,54187],"yaml":true},{"content":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,224],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object associated with the culture with the specified identifier and using string comparison methods in the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[54263,54488],"yaml":true},{"content":"<code>assembly</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;assembly&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>assembly</code> is `null`."}],"pos":[54665,54698],"yaml":true},{"content":"<code>assembly</code> is of an invalid type.","nodes":[{"pos":[0,44],"content":"<ph id=\"ph1\">&lt;code&gt;assembly&lt;/code&gt;</ph> is of an invalid type.","source":"<code>assembly</code> is of an invalid type."}],"pos":[54792,54837],"yaml":true},{"content":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the culture with the specified identifier.","nodes":[{"pos":[0,145],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object that is associated with the culture with the specified identifier.","source":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the culture with the specified identifier."}],"pos":[56058,56204],"yaml":true},{"content":"An integer representing the culture identifier.","nodes":[{"pos":[0,47],"content":"An integer representing the culture identifier.","nodes":[{"content":"An integer representing the culture identifier.","pos":[0,47]}]}],"pos":[57486,57534],"yaml":true},{"content":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,224],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object associated with the culture with the specified identifier and using string comparison methods in the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[57610,57835],"yaml":true},{"content":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the culture with the specified name.","nodes":[{"pos":[0,139],"content":"Initializes a new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object that is associated with the culture with the specified name.","source":"Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the culture with the specified name."}],"pos":[59165,59305],"yaml":true},{"content":"A string representing the culture name.","nodes":[{"pos":[0,39],"content":"A string representing the culture name.","nodes":[{"content":"A string representing the culture name.","pos":[0,39]}]}],"pos":[60585,60625],"yaml":true},{"content":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.","nodes":[{"pos":[0,224],"content":"A new <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object associated with the culture with the specified identifier and using string comparison methods in the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph>.","source":"A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>."}],"pos":[60701,60926],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[61103,61132],"yaml":true},{"content":"<code>name</code> is an invalid culture name.","nodes":[{"pos":[0,45],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is an invalid culture name.","source":"<code>name</code> is an invalid culture name."}],"pos":[61226,61272],"yaml":true},{"content":"Serves as a hash function for the current <xref href=\"System.Globalization.CompareInfo\"></xref> for hashing algorithms and data structures, such as a hash table.","nodes":[{"pos":[0,161],"content":"Serves as a hash function for the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> for hashing algorithms and data structures, such as a hash table.","source":"Serves as a hash function for the current <xref href=\"System.Globalization.CompareInfo\"></xref> for hashing algorithms and data structures, such as a hash table."}],"pos":[62747,62909],"yaml":true},{"content":"This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \n  \n This method generates the same hash code for two objects that are equal according to the <xref:System.Globalization.CompareInfo.Equals%2A> method.","nodes":[{"pos":[0,83],"content":"This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph>.","pos":[0,83],"source":"This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>."}]},{"pos":[90,236],"content":"This method generates the same hash code for two objects that are equal according to the <xref:System.Globalization.CompareInfo.Equals%2A> method.","nodes":[{"content":"This method generates the same hash code for two objects that are equal according to the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.Equals%2A&gt;</ph> method.","pos":[0,146],"source":"This method generates the same hash code for two objects that are equal according to the <xref:System.Globalization.CompareInfo.Equals%2A> method."}]}],"pos":[62920,63161],"yaml":true,"extradata":"MT"},{"content":"A hash code for the current <xref href=\"System.Globalization.CompareInfo\"></xref>.","nodes":[{"pos":[0,82],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the current <xref href=\"System.Globalization.CompareInfo\"></xref>."}],"pos":[63295,63378],"yaml":true},{"content":"Gets the hash code for a string based on specified comparison options.","nodes":[{"pos":[0,70],"content":"Gets the hash code for a string based on specified comparison options.","nodes":[{"content":"Gets the hash code for a string based on specified comparison options.","pos":[0,70]}]}],"pos":[65147,65218],"yaml":true},{"content":"The behavior of <xref:System.Globalization.CompareInfo.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another, or from one .NET Framework platform to another.  \n  \n> [!IMPORTANT]\n>  If two string objects are equal, the <xref:System.Globalization.CompareInfo.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.  \n>   \n>  The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.  \n>   \n>  As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.","nodes":[{"pos":[0,233],"content":"The behavior of <xref:System.Globalization.CompareInfo.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another, or from one .NET Framework platform to another.","nodes":[{"content":"The behavior of <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.GetHashCode%2A&gt;</ph> is dependent on its implementation, which might change from one version of the common language runtime to another, or from one .NET Framework platform to another.","pos":[0,233],"source":"The behavior of <xref:System.Globalization.CompareInfo.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another, or from one .NET Framework platform to another."}]},{"pos":[241,507],"content":"[!IMPORTANT]\n If two string objects are equal, the <xref:System.Globalization.CompareInfo.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.","leadings":["","> "],"nodes":[{"content":" If two string objects are equal, the <xref:System.Globalization.CompareInfo.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.","pos":[13,264],"nodes":[{"content":"If two string objects are equal, the <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.GetHashCode%2A&gt;</ph> method returns identical values.","pos":[1,125],"source":" If two string objects are equal, the <xref:System.Globalization.CompareInfo.GetHashCode%2A> method returns identical values."},{"content":"However, there is not a unique hash code value for each unique string value.","pos":[126,202]},{"content":"Different strings can return the same hash code.","pos":[203,251]}]}]},{"pos":[518,804],"content":"The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.","nodes":[{"content":"The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.","pos":[0,286],"nodes":[{"content":"The hash code itself is not guaranteed to be stable.","pos":[0,52]},{"content":"Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework.","pos":[53,227]},{"content":"In some cases, they can even differ by application domain.","pos":[228,286]}]}]},{"pos":[815,1014],"content":"As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.","nodes":[{"content":"As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.","pos":[0,199]}]}],"pos":[65229,66253],"yaml":true,"extradata":"MT"},{"content":"The string whose hash code is to be returned.","nodes":[{"pos":[0,45],"content":"The string whose hash code is to be returned.","nodes":[{"content":"The string whose hash code is to be returned.","pos":[0,45]}]}],"pos":[66447,66493],"yaml":true},{"content":"A value that determines how strings are compared.","nodes":[{"pos":[0,49],"content":"A value that determines how strings are compared.","nodes":[{"content":"A value that determines how strings are compared.","pos":[0,49]}]}],"pos":[66578,66628],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[66684,66719],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[66893,66924],"yaml":true},{"content":"Gets the sort key for the specified string.","nodes":[{"pos":[0,43],"content":"Gets the sort key for the specified string.","nodes":[{"content":"Gets the sort key for the specified string.","pos":[0,43]}]}],"pos":[68177,68221],"yaml":true},{"content":"Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag.","nodes":[{"pos":[0,468],"content":"Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag.","nodes":[{"content":"Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights.","pos":[0,130]},{"content":"A sort key is the repository of these weights for a particular string.","pos":[131,201]},{"content":"For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on.","pos":[202,320]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.GetSortKey%2A&gt;</ph> method is equivalent to the Windows API method <ph id=\"ph2\">`LCMapString`</ph> with the LCMAP_SORTKEY flag.","pos":[321,468],"source":" The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag."}]}],"pos":[68232,68701],"yaml":true,"extradata":"MT"},{"content":"The string for which a <xref href=\"System.Globalization.SortKey\"></xref> object is obtained.","nodes":[{"pos":[0,92],"content":"The string for which a <ph id=\"ph1\">&lt;xref href=\"System.Globalization.SortKey\"&gt;&lt;/xref&gt;</ph> object is obtained.","source":"The string for which a <xref href=\"System.Globalization.SortKey\"></xref> object is obtained."}],"pos":[68874,68967],"yaml":true},{"content":"The <xref href=\"System.Globalization.SortKey\"></xref> object that contains the sort key for the specified string.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Globalization.SortKey\"&gt;&lt;/xref&gt;</ph> object that contains the sort key for the specified string.","source":"The <xref href=\"System.Globalization.SortKey\"></xref> object that contains the sort key for the specified string."}],"pos":[69039,69153],"yaml":true},{"content":"Gets a <xref href=\"System.Globalization.SortKey\"></xref> object for the specified string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,172],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Globalization.SortKey\"&gt;&lt;/xref&gt;</ph> object for the specified string using the specified <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Gets a <xref href=\"System.Globalization.SortKey\"></xref> object for the specified string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[70586,70759],"yaml":true},{"content":"Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag.","nodes":[{"pos":[0,468],"content":"Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag.","nodes":[{"content":"Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights.","pos":[0,130]},{"content":"A sort key is the repository of these weights for a particular string.","pos":[131,201]},{"content":"For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on.","pos":[202,320]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.GetSortKey%2A&gt;</ph> method is equivalent to the Windows API method <ph id=\"ph2\">`LCMapString`</ph> with the LCMAP_SORTKEY flag.","pos":[321,468],"source":" The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag."}]}],"pos":[70770,71239],"yaml":true,"extradata":"MT"},{"content":"The string for which a <xref href=\"System.Globalization.SortKey\"></xref> object is obtained.","nodes":[{"pos":[0,92],"content":"The string for which a <ph id=\"ph1\">&lt;xref href=\"System.Globalization.SortKey\"&gt;&lt;/xref&gt;</ph> object is obtained.","source":"The string for which a <xref href=\"System.Globalization.SortKey\"></xref> object is obtained."}],"pos":[71457,71550],"yaml":true},{"content":"A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.","nodes":[{"pos":[0,546],"content":"A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.StringSort\"&gt;&lt;/xref&gt;</ph>.","source":"A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>."}],"pos":[71635,72184],"yaml":true},{"content":"The <xref href=\"System.Globalization.SortKey\"></xref> object that contains the sort key for the specified string.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Globalization.SortKey\"&gt;&lt;/xref&gt;</ph> object that contains the sort key for the specified string.","source":"The <xref href=\"System.Globalization.SortKey\"></xref> object that contains the sort key for the specified string."}],"pos":[72256,72370],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[72535,72640],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.","nodes":[{"pos":[0,215],"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.","nodes":[{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.","pos":[0,215]}]}],"pos":[74024,74240],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \n  \n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,104],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> - 1.","source":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1."},{"pos":[111,958],"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[0,847],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,311]},{"content":"To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[312,647],"source":" To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[648,847],"source":" Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]}]},{"pos":[966,1451],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[74251,75714],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[76615,76637],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[76696,76748],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[76813,76858],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[76918,76967],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,323],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that starts at <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> and contains the number of elements specified by <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,242],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[243,323],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[77023,77347],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[77517,77548],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[77662,77933],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,298],"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[79789,80088],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,104],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> - 1.","source":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1."},{"pos":[111,218],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[225,804],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,392]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","pos":[393,579],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared."}]},{"pos":[812,1297],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[80099,81410],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[82358,82380],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[82441,82490],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[82555,82600],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[82660,82709],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[82794,83429],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,363],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that starts at <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> and contains the number of elements specified by <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,282],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[283,363],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[83485,83849],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[84019,84103],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[84217,84488],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[84582,84687],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,298],"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[86548,86847],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,104],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> - 1.","source":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1."},{"pos":[111,218],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[225,1075],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,403]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search.","pos":[404,551],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search."},{"content":"A character is considered equivalent to another character only if the Unicode values are the same.","pos":[552,650]},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[651,850],"source":" Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]},{"pos":[1083,1568],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[86858,88440],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[89386,89408],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[89467,89519],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[89584,89629],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[89689,89738],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[89823,90458],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,363],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that starts at <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> and contains the number of elements specified by <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,282],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[283,363],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[90514,90878],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[91048,91079],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[91193,91464],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[91558,91663],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,280],"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[93476,93757],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,99],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the end of the string.","source":"The source string is searched forward starting at `startIndex` and ending at the end of the string."},{"pos":[106,213],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[220,799],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,392]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","pos":[393,579],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared."}]},{"pos":[807,1292],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[93768,95074],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[96198,96220],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[96281,96330],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[96395,96440],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[96525,97160],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,332],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> to the end of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,251],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[252,332],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[97216,97549],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[97719,97803],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[97917,98004],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[98098,98203],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,280],"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[99987,100268],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,99],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the end of the string.","source":"The source string is searched forward starting at `startIndex` and ending at the end of the string."},{"pos":[106,213],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[220,1070],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,403]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search.","pos":[404,551],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search."},{"content":"A character is considered equivalent to another character only if the Unicode values are the same.","pos":[552,650]},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[651,850],"source":" Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]},{"pos":[1078,1563],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[100279,101856],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[102978,103000],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[103059,103111],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[103176,103221],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[103306,103941],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,332],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> to the end of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,251],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[252,332],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[103997,104330],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[104500,104531],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[104645,104732],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[104826,104931],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.","nodes":[{"pos":[0,215],"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.","nodes":[{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.","pos":[0,215]}]}],"pos":[106631,106847],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \n  \n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,104],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> + </ph><ph id=\"ph4\">`count`</ph> - 1.","source":"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1."},{"pos":[111,681],"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","nodes":[{"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","pos":[0,570],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,300]},{"content":"To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[301,570],"source":" To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."}]}]},{"pos":[689,1174],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[106858,108044],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[108947,108969],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[109030,109079],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[109144,109189],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[109249,109298],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,323],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that starts at <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> and contains the number of elements specified by <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,242],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[243,323],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[109354,109678],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[109848,109932],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[110046,110317],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,209],"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[112053,112263],"yaml":true},{"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,114],"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.","nodes":[{"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.","pos":[0,114]}]},{"pos":[121,228],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[235,814],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,392]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","pos":[393,579],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared."}]},{"pos":[822,1307],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[112274,113595],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[114449,114471],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[114532,114581],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[114666,115301],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,226],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,160],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns 0 (zero) if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an ignorable character.","pos":[161,226],"source":" Returns 0 (zero) if <code>value</code> is an ignorable character."}]}],"pos":[115357,115584],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[115754,115838],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[115932,116037],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.","nodes":[{"pos":[0,197],"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.","nodes":[{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.","pos":[0,197]}]}],"pos":[117640,117838],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \n  \n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,99],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the end of the string.","source":"The source string is searched forward starting at `startIndex` and ending at the end of the string."},{"pos":[106,953],"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[0,847],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,311]},{"content":"To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[312,647],"source":" To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[648,847],"source":" Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]}]},{"pos":[961,1446],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[117849,119307],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[120384,120406],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[120465,120517],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[120582,120627],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,292],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> to the end of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,211],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[212,292],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[120683,120976],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[121146,121177],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[121291,121378],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,209],"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[122798,123008],"yaml":true},{"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,114],"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.","nodes":[{"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.","pos":[0,114]}]},{"pos":[121,228],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[235,1085],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,403]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search.","pos":[404,551],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search."},{"content":"A character is considered equivalent to another character only if the Unicode values are the same.","pos":[552,650]},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[651,850],"source":" Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]},{"pos":[1093,1577],"content":"[!NOTE]\n When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,482],"nodes":[{"content":"When possible, you should use string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,173],"source":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[174,474],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[123019,124610],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[125462,125484],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[125543,125595],"yaml":true},{"content":"A value that defines how the strings should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,601],"content":"A value that defines how the strings should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how the strings should be compared.","pos":[0,56]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[57,601],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[125680,126284],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,226],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,160],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns 0 (zero) if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an ignorable character.","pos":[161,226],"source":" Returns 0 (zero) if <code>value</code> is an ignorable character."}]}],"pos":[126340,126567],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[126737,126768],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[126862,126967],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.","nodes":[{"pos":[0,197],"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.","nodes":[{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.","pos":[0,197]}]}],"pos":[128582,128780],"yaml":true},{"content":"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \n  \n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,99],"content":"The source string is searched forward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the end of the string.","source":"The source string is searched forward starting at `startIndex` and ending at the end of the string."},{"pos":[106,676],"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","nodes":[{"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","pos":[0,570],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,300]},{"content":"To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[301,570],"source":" To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."}]}]},{"pos":[684,1169],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[128791,129972],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[131051,131073],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[131134,131183],"yaml":true},{"content":"The zero-based starting index of the search.","nodes":[{"pos":[0,44],"content":"The zero-based starting index of the search.","nodes":[{"content":"The zero-based starting index of the search.","pos":[0,44]}]}],"pos":[131248,131293],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,292],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">startIndex</ph><ept id=\"p3\">&lt;/code&gt;</ept> to the end of <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,211],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[212,292],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[131349,131642],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[131812,131896],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[132010,132097],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.","nodes":[{"pos":[0,126],"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.","nodes":[{"content":"Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.","pos":[0,126]}]}],"pos":[133373,133500],"yaml":true},{"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.  \n  \n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,114],"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.","nodes":[{"content":"The source string is searched forward starting at the beginning of the string and ending at the end of the string.","pos":[0,114]}]},{"pos":[121,690],"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","nodes":[{"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","pos":[0,569],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,300]},{"content":"To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[301,569],"source":" To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."}]}]},{"pos":[698,1183],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[133511,134706],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[135515,135537],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[135598,135647],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,186],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,120],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1."},{"content":"Returns 0 (zero) if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an ignorable character.","pos":[121,186],"source":" Returns 0 (zero) if <code>value</code> is an ignorable character."}]}],"pos":[135703,135890],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[136060,136144],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.","nodes":[{"pos":[0,126],"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.","nodes":[{"content":"Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.","pos":[0,126]}]}],"pos":[137712,137839],"yaml":true},{"content":"This method searches the source string from the beginning of the string to the end of the string.  \n  \n This overload performs a culture-sensitive search. If `value` represents a precomposed Unicode character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode code points are the same, you should call an overload that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value. Unlike <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, which performs a culture-sensitive comparison, overloads of the <xref:System.String.IndexOf%2A?displayProperty=fullName> method that search for a character perform an ordinal comparison and overloads that search for a string perform a culture-sensitive comparison.  \n  \n> [!NOTE]\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,97],"content":"This method searches the source string from the beginning of the string to the end of the string.","nodes":[{"content":"This method searches the source string from the beginning of the string to the end of the string.","pos":[0,97]}]},{"pos":[104,1096],"content":"This overload performs a culture-sensitive search. If `value` represents a precomposed Unicode character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode code points are the same, you should call an overload that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value. Unlike <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, which performs a culture-sensitive comparison, overloads of the <xref:System.String.IndexOf%2A?displayProperty=fullName> method that search for a character perform an ordinal comparison and overloads that search for a string perform a culture-sensitive comparison.","nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"If <ph id=\"ph1\">`value`</ph> represents a precomposed Unicode character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,292],"source":" If `value` represents a precomposed Unicode character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture."},{"content":"To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode code points are the same, you should call an overload that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value.","pos":[293,643],"source":" To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode code points are the same, you should call an overload that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value."},{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName&gt;</ph>, which performs a culture-sensitive comparison, overloads of the <ph id=\"ph2\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph> method that search for a character perform an ordinal comparison and overloads that search for a string perform a culture-sensitive comparison.","pos":[644,992],"source":" Unlike <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, which performs a culture-sensitive comparison, overloads of the <xref:System.String.IndexOf%2A?displayProperty=fullName> method that search for a character perform an ordinal comparison and overloads that search for a string perform a culture-sensitive comparison."}]},{"pos":[1104,1588],"content":"[!NOTE]\n When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,482],"nodes":[{"content":"When possible, you should use string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,173],"source":" When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[174,474],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[137850,139450],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[140257,140279],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[140338,140390],"yaml":true},{"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,186],"content":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the first occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,120],"source":"The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1."},{"content":"Returns 0 (zero) if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an ignorable character.","pos":[121,186],"source":" Returns 0 (zero) if <code>value</code> is an ignorable character."}]}],"pos":[140446,140633],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[140803,140834],"yaml":true},{"content":"Determines whether the specified source string starts with the specified prefix.","nodes":[{"pos":[0,80],"content":"Determines whether the specified source string starts with the specified prefix.","nodes":[{"content":"Determines whether the specified source string starts with the specified prefix.","pos":[0,80]}]}],"pos":[142420,142501],"yaml":true},{"content":"Every string starts and ends with an empty substring (\"\"); therefore, if `prefix` is an empty string, this method returns `true`.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,129],"content":"Every string starts and ends with an empty substring (\"\"); therefore, if <ph id=\"ph1\">`prefix`</ph> is an empty string, this method returns <ph id=\"ph2\">`true`</ph>.","source":"Every string starts and ends with an empty substring (\"\"); therefore, if `prefix` is an empty string, this method returns `true`."},{"pos":[137,622],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[142512,143142],"yaml":true,"extradata":"MT"},{"content":"The string to search in.","nodes":[{"pos":[0,24],"content":"The string to search in.","nodes":[{"content":"The string to search in.","pos":[0,24]}]}],"pos":[143984,144009],"yaml":true},{"content":"The string to compare with the beginning of <code>source</code>.","nodes":[{"pos":[0,64],"content":"The string to compare with the beginning of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to compare with the beginning of <code>source</code>."}],"pos":[144071,144136],"yaml":true},{"content":"`true` if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, `false`.","nodes":[{"pos":[0,179],"content":"<ph id=\"ph1\">`true`</ph> if the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">prefix</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> starts with <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">prefix</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, `false`."}],"pos":[144194,144376],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>prefix</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,78],"content":"<ph id=\"ph1\">&lt;code&gt;prefix&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>prefix</code> is `null`."}],"pos":[144547,144632],"yaml":true},{"content":"Determines whether the specified source string starts with the specified prefix using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,163],"content":"Determines whether the specified source string starts with the specified prefix using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Determines whether the specified source string starts with the specified prefix using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[146374,146538],"yaml":true},{"content":"Every string starts and ends with an empty substring (\"\"); therefore, if `prefix` is an empty string, this method returns `true`.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,129],"content":"Every string starts and ends with an empty substring (\"\"); therefore, if <ph id=\"ph1\">`prefix`</ph> is an empty string, this method returns <ph id=\"ph2\">`true`</ph>.","source":"Every string starts and ends with an empty substring (\"\"); therefore, if `prefix` is an empty string, this method returns `true`."},{"pos":[136,243],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[251,736],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[146549,147295],"yaml":true,"extradata":"MT"},{"content":"The string to search in.","nodes":[{"pos":[0,24],"content":"The string to search in.","nodes":[{"content":"The string to search in.","pos":[0,24]}]}],"pos":[148258,148283],"yaml":true},{"content":"The string to compare with the beginning of <code>source</code>.","nodes":[{"pos":[0,64],"content":"The string to compare with the beginning of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to compare with the beginning of <code>source</code>."}],"pos":[148345,148410],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>prefix</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,633],"content":"A value that defines how <code>source</code> and <code>prefix</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">prefix</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,88],"source":"A value that defines how <code>source</code> and <code>prefix</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[89,633],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[148495,149131],"yaml":true},{"content":"`true` if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, `false`.","nodes":[{"pos":[0,179],"content":"<ph id=\"ph1\">`true`</ph> if the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">prefix</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> starts with <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">prefix</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, `false`."}],"pos":[149189,149371],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>prefix</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,78],"content":"<ph id=\"ph1\">&lt;code&gt;prefix&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>prefix</code> is `null`."}],"pos":[149542,149627],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[149721,149826],"yaml":true},{"content":"Indicates whether a specified Unicode string is sortable.","nodes":[{"pos":[0,57],"content":"Indicates whether a specified Unicode string is sortable.","nodes":[{"content":"Indicates whether a specified Unicode string is sortable.","pos":[0,57]}]}],"pos":[151350,151408],"yaml":true},{"content":"Each Unicode character in the `str` parameter is represented by one or more UTF-16 encoded <xref:System.Char> objects. The `str` parameter is sortable if each Unicode character is defined in an internal <xref:System.Globalization.CompareInfo> class sort table, and is not a private use or unpaired high or low surrogate character.","nodes":[{"pos":[0,330],"content":"Each Unicode character in the `str` parameter is represented by one or more UTF-16 encoded <xref:System.Char> objects. The `str` parameter is sortable if each Unicode character is defined in an internal <xref:System.Globalization.CompareInfo> class sort table, and is not a private use or unpaired high or low surrogate character.","nodes":[{"content":"Each Unicode character in the <ph id=\"ph1\">`str`</ph> parameter is represented by one or more UTF-16 encoded <ph id=\"ph2\">&lt;xref:System.Char&gt;</ph> objects.","pos":[0,118],"source":"Each Unicode character in the `str` parameter is represented by one or more UTF-16 encoded <xref:System.Char> objects."},{"content":"The <ph id=\"ph1\">`str`</ph> parameter is sortable if each Unicode character is defined in an internal <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> class sort table, and is not a private use or unpaired high or low surrogate character.","pos":[119,330],"source":" The `str` parameter is sortable if each Unicode character is defined in an internal <xref:System.Globalization.CompareInfo> class sort table, and is not a private use or unpaired high or low surrogate character."}]}],"pos":[151419,151750],"yaml":true,"extradata":"MT"},{"content":"A string of zero or more Unicode characters.","nodes":[{"pos":[0,44],"content":"A string of zero or more Unicode characters.","nodes":[{"content":"A string of zero or more Unicode characters.","pos":[0,44]}]}],"pos":[151961,152006],"yaml":true},{"content":"`true` if the <code>str</code> parameter is not an empty string (\"\") and all the Unicode characters in <code>str</code> are sortable; otherwise, `false`.","nodes":[{"pos":[0,153],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">str</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not an empty string (\"\") and all the Unicode characters in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">str</ph><ept id=\"p2\">&lt;/code&gt;</ept> are sortable; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the <code>str</code> parameter is not an empty string (\"\") and all the Unicode characters in <code>str</code> are sortable; otherwise, `false`."}],"pos":[152064,152220],"yaml":true},{"content":"<code>str</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;str&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>str</code> is `null`."}],"pos":[152393,152421],"yaml":true},{"content":"Indicates whether a specified Unicode character is sortable.","nodes":[{"pos":[0,60],"content":"Indicates whether a specified Unicode character is sortable.","nodes":[{"content":"Indicates whether a specified Unicode character is sortable.","pos":[0,60]}]}],"pos":[153687,153748],"yaml":true},{"content":"The `ch` parameter is sortable if it is a Unicode character that is defined in an internal <xref:System.Globalization.CompareInfo> class sort table, and is not a private use or unpaired high or low surrogate character.","nodes":[{"pos":[0,218],"content":"The <ph id=\"ph1\">`ch`</ph> parameter is sortable if it is a Unicode character that is defined in an internal <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> class sort table, and is not a private use or unpaired high or low surrogate character.","source":"The `ch` parameter is sortable if it is a Unicode character that is defined in an internal <xref:System.Globalization.CompareInfo> class sort table, and is not a private use or unpaired high or low surrogate character."}],"pos":[153759,153978],"yaml":true,"extradata":"MT"},{"content":"A Unicode character.","nodes":[{"pos":[0,20],"content":"A Unicode character.","nodes":[{"content":"A Unicode character.","pos":[0,20]}]}],"pos":[154181,154202],"yaml":true},{"content":"`true` if the <code>ch</code> parameter is sortable; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">ch</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is sortable; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <code>ch</code> parameter is sortable; otherwise, `false`."}],"pos":[154260,154335],"yaml":true},{"content":"Determines whether the specified source string ends with the specified suffix.","nodes":[{"pos":[0,78],"content":"Determines whether the specified source string ends with the specified suffix.","nodes":[{"content":"Determines whether the specified source string ends with the specified suffix.","pos":[0,78]}]}],"pos":[155766,155845],"yaml":true},{"content":"Every string starts and ends with an empty substring (\"\"); therefore, if `suffix` is an empty string, this method returns `true`.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,129],"content":"Every string starts and ends with an empty substring (\"\"); therefore, if <ph id=\"ph1\">`suffix`</ph> is an empty string, this method returns <ph id=\"ph2\">`true`</ph>.","source":"Every string starts and ends with an empty substring (\"\"); therefore, if `suffix` is an empty string, this method returns `true`."},{"pos":[137,622],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[155856,156486],"yaml":true,"extradata":"MT"},{"content":"The string to search in.","nodes":[{"pos":[0,24],"content":"The string to search in.","nodes":[{"content":"The string to search in.","pos":[0,24]}]}],"pos":[157328,157353],"yaml":true},{"content":"The string to compare with the end of <code>source</code>.","nodes":[{"pos":[0,58],"content":"The string to compare with the end of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to compare with the end of <code>source</code>."}],"pos":[157415,157474],"yaml":true},{"content":"`true` if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, `false`.","nodes":[{"pos":[0,177],"content":"<ph id=\"ph1\">`true`</ph> if the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">suffix</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> ends with <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">suffix</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, `false`."}],"pos":[157532,157712],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>suffix</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,78],"content":"<ph id=\"ph1\">&lt;code&gt;suffix&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>suffix</code> is `null`."}],"pos":[157883,157968],"yaml":true},{"content":"Determines whether the specified source string ends with the specified suffix using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,161],"content":"Determines whether the specified source string ends with the specified suffix using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Determines whether the specified source string ends with the specified suffix using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[159710,159872],"yaml":true},{"content":"Every string starts and ends with an empty substring (\"\"); therefore, if `suffix` is an empty string, this method returns `true`.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,129],"content":"Every string starts and ends with an empty substring (\"\"); therefore, if <ph id=\"ph1\">`suffix`</ph> is an empty string, this method returns <ph id=\"ph2\">`true`</ph>.","source":"Every string starts and ends with an empty substring (\"\"); therefore, if `suffix` is an empty string, this method returns `true`."},{"pos":[136,243],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[251,736],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[159883,160629],"yaml":true,"extradata":"MT"},{"content":"The string to search in.","nodes":[{"pos":[0,24],"content":"The string to search in.","nodes":[{"content":"The string to search in.","pos":[0,24]}]}],"pos":[161592,161617],"yaml":true},{"content":"The string to compare with the end of <code>source</code>.","nodes":[{"pos":[0,58],"content":"The string to compare with the end of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to compare with the end of <code>source</code>."}],"pos":[161679,161738],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>suffix</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref> used by itself, or the bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,650],"content":"A value that defines how <code>source</code> and <code>suffix</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref> used by itself, or the bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">suffix</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,88],"source":"A value that defines how <code>source</code> and <code>suffix</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph> used by itself, or the bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[89,650],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref> used by itself, or the bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[161823,162476],"yaml":true},{"content":"`true` if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, `false`.","nodes":[{"pos":[0,177],"content":"<ph id=\"ph1\">`true`</ph> if the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">suffix</ph><ept id=\"p1\">&lt;/code&gt;</ept> is less than or equal to the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> ends with <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph5\">suffix</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph6\">`false`</ph>.","source":"`true` if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, `false`."}],"pos":[162534,162714],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>suffix</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,78],"content":"<ph id=\"ph1\">&lt;code&gt;suffix&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>suffix</code> is `null`."}],"pos":[162885,162970],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[163064,163169],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,295],"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[165054,165350],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,105],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> - </ph><ph id=\"ph4\">`count`</ph> + 1.","source":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1."},{"pos":[112,219],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[226,1080],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,403]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search.","pos":[404,551],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search."},{"content":"A character is considered equivalent to another character only if the Unicode values are the same.","pos":[552,650]},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[651,854],"source":" Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]},{"pos":[1088,1573],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[165361,166948],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[167898,167920],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[167979,168031],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[168096,168150],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[168210,168259],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[168344,168979],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,365],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that contains the number of elements specified by <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> and that ends at <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,284],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[285,365],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[169035,169401],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[169575,169606],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[169720,169991],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[170085,170190],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.","nodes":[{"pos":[0,212],"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.","nodes":[{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.","pos":[0,212]}]}],"pos":[171931,172144],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \n  \n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons .","nodes":[{"pos":[0,105],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> - </ph><ph id=\"ph4\">`count`</ph> + 1.","source":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1."},{"pos":[112,682],"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","nodes":[{"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.","pos":[0,570],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,300]},{"content":"To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[301,570],"source":" To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."}]}]},{"pos":[690,1176],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons .","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons .","pos":[8,484],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons .","pos":[175,476],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons ."}]}]}],"pos":[172155,173343],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[174250,174272],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[174333,174382],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[174447,174501],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[174561,174610],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,325],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that contains the number of elements specified by <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> and that ends at <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,244],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[245,325],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[174666,174992],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[175166,175250],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[175364,175635],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,295],"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[177515,177811],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,105],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> - </ph><ph id=\"ph4\">`count`</ph> + 1.","source":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1."},{"pos":[112,219],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[226,805],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,392]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","pos":[393,579],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared."}]},{"pos":[813,1298],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[177822,179134],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[180086,180108],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[180169,180218],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[180283,180337],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[180397,180446],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[180531,181166],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,365],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that contains the number of elements specified by <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> and that ends at <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,284],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[285,365],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[181222,181588],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[181762,181846],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[181960,182231],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[182325,182430],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,285],"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[184267,184553],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,106],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the beginning of the string.","source":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string."},{"pos":[113,220],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[227,806],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,392]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","pos":[393,579],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared."}]},{"pos":[814,1299],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[184564,185877],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[187005,187027],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[187088,187137],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[187202,187256],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[187341,187976],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,337],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from the beginning of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> to <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,256],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[257,337],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[188032,188370],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[188544,188628],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[188742,188829],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[188923,189028],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.","nodes":[{"pos":[0,212],"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.","nodes":[{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.","pos":[0,212]}]}],"pos":[190740,190953],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \n  \n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,105],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at <ph id=\"ph2\">`startIndex`</ph><ph id=\"ph3\"> - </ph><ph id=\"ph4\">`count`</ph> + 1.","source":"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1."},{"pos":[112,963],"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[0,851],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,311]},{"content":"To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[312,647],"source":" To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[648,851],"source":" Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]}]},{"pos":[971,1456],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[190964,192432],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[193337,193359],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[193418,193470],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[193535,193589],"yaml":true},{"content":"The number of elements in the section to search.","nodes":[{"pos":[0,48],"content":"The number of elements in the section to search.","nodes":[{"content":"The number of elements in the section to search.","pos":[0,48]}]}],"pos":[193649,193698],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,325],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that contains the number of elements specified by <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> and that ends at <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,244],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[245,325],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[193754,194080],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[194254,194285],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \n  \n -or-  \n  \n <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."},{"pos":[93,97],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[104,141],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."},{"pos":[148,152],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[159,260],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not specify a valid section in <ph id=\"ph3\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>."}],"pos":[194399,194670],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,285],"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[196478,196764],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,106],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the beginning of the string.","source":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string."},{"pos":[113,220],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[227,1081],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,403]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search.","pos":[404,551],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search."},{"content":"A character is considered equivalent to another character only if the Unicode values are the same.","pos":[552,650]},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[651,854],"source":" Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]},{"pos":[1089,1574],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[196775,198363],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[199489,199511],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[199570,199622],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[199687,199741],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[199826,200461],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,337],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from the beginning of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> to <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","pos":[0,256],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[257,337],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[200517,200855],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[201029,201060],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[201174,201261],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[201355,201460],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,208],"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[203208,203417],"yaml":true},{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,115],"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","nodes":[{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","pos":[0,115]}]},{"pos":[122,229],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[236,1090],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,403]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search.","pos":[404,551],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search."},{"content":"A character is considered equivalent to another character only if the Unicode values are the same.","pos":[552,650]},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[651,854],"source":" Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]},{"pos":[1098,1583],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[203428,205025],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[205881,205903],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[205962,206014],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[206099,206734],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1.","nodes":[{"pos":[0,159],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","source":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1."}],"pos":[206790,206950],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[207124,207155],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[207249,207354],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,208],"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[209114,209323],"yaml":true},{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \n  \n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \n  \n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,115],"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","nodes":[{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","pos":[0,115]}]},{"pos":[122,229],"content":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value is not valid for this method.","pos":[0,107],"source":"The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method."}]},{"pos":[236,815],"content":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","nodes":[{"content":"If <ph id=\"ph1\">`options`</ph> does not include the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs a culture-sensitive search.","pos":[0,142],"source":"If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search."},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[143,392]},{"content":"If <ph id=\"ph1\">`options`</ph> includes the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.","pos":[393,579],"source":" If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared."}]},{"pos":[823,1308],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[209334,210656],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[211514,211536],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[211597,211646],"yaml":true},{"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"pos":[0,632],"content":"A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.","nodes":[{"content":"A value that defines how <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> should be compared.","pos":[0,87],"source":"A value that defines how <code>source</code> and <code>value</code> should be compared."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">options</ph><ept id=\"p1\">&lt;/code&gt;</ept> is either the enumeration value <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions.Ordinal\"&gt;&lt;/xref&gt;</ph>, or a bitwise combination of one or more of the following values: <ph id=\"ph3\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreCase\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph4\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph7\">&lt;xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"&gt;&lt;/xref&gt;</ph>.","pos":[88,632],"source":"<code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>."}]}],"pos":[211731,212366],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1.","nodes":[{"pos":[0,159],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>, using the specified comparison options; otherwise, -1.","source":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1."}],"pos":[212422,212582],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[212756,212840],"yaml":true},{"content":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">&lt;code&gt;options&lt;/code&gt;</ph> contains an invalid <ph id=\"ph2\">&lt;xref href=\"System.Globalization.CompareOptions\"&gt;&lt;/xref&gt;</ph> value.","source":"<code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value."}],"pos":[212934,213039],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.","nodes":[{"pos":[0,202],"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.","nodes":[{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.","pos":[0,202]}]}],"pos":[214666,214869],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \n  \n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,106],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the beginning of the string.","source":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string."},{"pos":[113,964],"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[0,851],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,311]},{"content":"To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[312,647],"source":" To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[648,851],"source":" Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]}]},{"pos":[972,1457],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[214880,216349],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[217430,217452],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[217511,217563],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[217628,217682],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,297],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from the beginning of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> to <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,216],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[217,297],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[217738,218036],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[218210,218241],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[218355,218442],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.","nodes":[{"pos":[0,125],"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.","nodes":[{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.","pos":[0,125]}]}],"pos":[219742,219868],"yaml":true},{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \n  \n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,115],"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","nodes":[{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","pos":[0,115]}]},{"pos":[122,709],"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.","nodes":[{"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.","pos":[0,587],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,300]},{"content":"To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value.","pos":[301,587],"source":" To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value."}]}]},{"pos":[717,1202],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[219879,221093],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[221906,221928],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[221989,222038],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1.","nodes":[{"pos":[0,119],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, -1.","source":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1."}],"pos":[222094,222214],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[222388,222472],"yaml":true},{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.","nodes":[{"pos":[0,125],"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.","nodes":[{"content":"Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.","pos":[0,125]}]}],"pos":[224064,224190],"yaml":true},{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \n  \n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,115],"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","nodes":[{"content":"The source string is searched backward starting at the end of the string and ending at the beginning of the string.","pos":[0,115]}]},{"pos":[122,973],"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","nodes":[{"content":"This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[0,851],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"If the character is a Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,311]},{"content":"To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions.Ordinal&gt;</ph> value.","pos":[312,647],"source":" To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value."},{"content":"Overloads of <ph id=\"ph1\">&lt;xref:System.String.LastIndexOf%2A?displayProperty=fullName&gt;</ph> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.","pos":[648,851],"source":" Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search."}]}]},{"pos":[981,1466],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[224201,225679],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[226490,226512],"yaml":true},{"content":"The character to locate within <code>source</code>.","nodes":[{"pos":[0,51],"content":"The character to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The character to locate within <code>source</code>."}],"pos":[226571,226623],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1.","nodes":[{"pos":[0,119],"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, -1.","source":"The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1."}],"pos":[226679,226799],"yaml":true},{"content":"<code>source</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."}],"pos":[226973,227004],"yaml":true},{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.","nodes":[{"pos":[0,202],"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.","nodes":[{"content":"Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.","pos":[0,202]}]}],"pos":[228643,228846],"yaml":true},{"content":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \n  \n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.  \n  \n> [!NOTE]\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","nodes":[{"pos":[0,106],"content":"The source string is searched backward starting at <ph id=\"ph1\">`startIndex`</ph> and ending at the beginning of the string.","source":"The source string is searched backward starting at `startIndex` and ending at the beginning of the string."},{"pos":[113,700],"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.","nodes":[{"content":"This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.","pos":[0,587],"nodes":[{"content":"This overload performs a culture-sensitive search.","pos":[0,50]},{"content":"A Unicode value representing a precomposed character, such as the ligature \"Æ\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \"AE\" (U+0041, U+0045), depending on the culture.","pos":[51,300]},{"content":"To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> and use the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> value.","pos":[301,587],"source":" To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value."}]}]},{"pos":[708,1193],"content":"[!NOTE]\n When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","leadings":["","> "],"nodes":[{"content":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.","pos":[8,483],"nodes":[{"content":"When possible, you should call string comparison methods that have a parameter of type <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions&gt;</ph> to specify the kind of comparison expected.","pos":[1,174],"source":" When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected."},{"content":"As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <ph id=\"ph1\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Globalization.CompareOptions?displayProperty=fullName&gt;</ph> for security comparisons.","pos":[175,475],"source":" As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons."}]}]}],"pos":[228857,230062],"yaml":true,"extradata":"MT"},{"content":"The string to search.","nodes":[{"pos":[0,21],"content":"The string to search.","nodes":[{"content":"The string to search.","pos":[0,21]}]}],"pos":[231145,231167],"yaml":true},{"content":"The string to locate within <code>source</code>.","nodes":[{"pos":[0,48],"content":"The string to locate within <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The string to locate within <code>source</code>."}],"pos":[231228,231277],"yaml":true},{"content":"The zero-based starting index of the backward search.","nodes":[{"pos":[0,53],"content":"The zero-based starting index of the backward search.","nodes":[{"content":"The zero-based starting index of the backward search.","pos":[0,53]}]}],"pos":[231342,231396],"yaml":true},{"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"pos":[0,297],"content":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.","nodes":[{"content":"The zero-based index of the last occurrence of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if found, within the section of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">source</ph><ept id=\"p2\">&lt;/code&gt;</ept> that extends from the beginning of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">source</ph><ept id=\"p3\">&lt;/code&gt;</ept> to <bpt id=\"p4\">&lt;code&gt;</bpt><ph id=\"ph4\">startIndex</ph><ept id=\"p4\">&lt;/code&gt;</ept>; otherwise, -1.","pos":[0,216],"source":"The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1."},{"content":"Returns <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">startIndex</ph><ept id=\"p1\">&lt;/code&gt;</ept> if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> is an ignorable character.","pos":[217,297],"source":" Returns <code>startIndex</code> if <code>value</code> is an ignorable character."}]}],"pos":[231452,231750],"yaml":true},{"content":"<code>source</code> is `null`.  \n  \n -or-  \n  \n <code>value</code> is `null`.","nodes":[{"pos":[0,30],"content":"<ph id=\"ph1\">&lt;code&gt;source&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>source</code> is `null`."},{"pos":[37,41],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[48,77],"content":"<ph id=\"ph1\">&lt;code&gt;value&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>value</code> is `null`."}],"pos":[231924,232008],"yaml":true},{"content":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.","nodes":[{"pos":[0,86],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is outside the range of valid indexes for <ph id=\"ph2\">&lt;code&gt;source&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>."}],"pos":[232122,232209],"yaml":true},{"content":"Gets the properly formed culture identifier for the current <xref href=\"System.Globalization.CompareInfo\"></xref>.","nodes":[{"pos":[0,114],"content":"Gets the properly formed culture identifier for the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the properly formed culture identifier for the current <xref href=\"System.Globalization.CompareInfo\"></xref>."}],"pos":[233309,233424],"yaml":true},{"content":"The properly formed culture identifier for the current <xref href=\"System.Globalization.CompareInfo\"></xref>.","nodes":[{"pos":[0,109],"content":"The properly formed culture identifier for the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph>.","source":"The properly formed culture identifier for the current <xref href=\"System.Globalization.CompareInfo\"></xref>."}],"pos":[233980,234090],"yaml":true},{"content":"Gets the name of the culture used for sorting operations by this <xref href=\"System.Globalization.CompareInfo\"></xref> object.","nodes":[{"pos":[0,126],"content":"Gets the name of the culture used for sorting operations by this <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the name of the culture used for sorting operations by this <xref href=\"System.Globalization.CompareInfo\"></xref> object."}],"pos":[235283,235410],"yaml":true},{"content":"The <xref:System.Globalization.CompareInfo.Name%2A> and <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> properties can have different values. For example, an <xref:System.Globalization.CompareInfo.LCID%2A> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book. The <xref:System.Globalization.CompareInfo.Name%2A> property has a value of \"de-de_phoneb\", whereas the <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> property of the associated German (Germany) culture has a value of \"de-DE\".","nodes":[{"pos":[0,618],"content":"The <xref:System.Globalization.CompareInfo.Name%2A> and <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> properties can have different values. For example, an <xref:System.Globalization.CompareInfo.LCID%2A> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book. The <xref:System.Globalization.CompareInfo.Name%2A> property has a value of \"de-de_phoneb\", whereas the <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> property of the associated German (Germany) culture has a value of \"de-DE\".","nodes":[{"content":"The <xref:System.Globalization.CompareInfo.Name%2A> and <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> properties can have different values. For example, an <xref:System.Globalization.CompareInfo.LCID%2A> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book. The <xref:System.Globalization.CompareInfo.Name%2A> property has a value of \"de-de_phoneb\", whereas the <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> property of the associated German (Germany) culture has a value of \"de-DE\".","pos":[0,618],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.Name%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.Name?displayProperty=fullName&gt;</ph> properties can have different values.","pos":[0,163],"source":"The <xref:System.Globalization.CompareInfo.Name%2A> and <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> properties can have different values."},{"content":"For example, an <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.LCID%2A&gt;</ph> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book.","pos":[164,368],"source":" For example, an <xref:System.Globalization.CompareInfo.LCID%2A> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.Name%2A&gt;</ph> property has a value of \"de-de_phoneb\", whereas the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.Name?displayProperty=fullName&gt;</ph> property of the associated German (Germany) culture has a value of \"de-DE\".","pos":[369,618],"source":" The <xref:System.Globalization.CompareInfo.Name%2A> property has a value of \"de-de_phoneb\", whereas the <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> property of the associated German (Germany) culture has a value of \"de-DE\"."}]}]}],"pos":[235421,236040],"yaml":true,"extradata":"MT"},{"content":"The name of a culture.","nodes":[{"pos":[0,22],"content":"The name of a culture.","nodes":[{"content":"The name of a culture.","pos":[0,22]}]}],"pos":[236751,236774],"yaml":true},{"content":"Returns a string that represents the current <xref href=\"System.Globalization.CompareInfo\"></xref> object.","nodes":[{"pos":[0,106],"content":"Returns a string that represents the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"Returns a string that represents the current <xref href=\"System.Globalization.CompareInfo\"></xref> object."}],"pos":[238374,238481],"yaml":true},{"content":"This method overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method. It returns a string that consists of the class name and the value of the instance <xref:System.Globalization.CompareInfo.Name%2A> property, separated by a hyphen.","nodes":[{"pos":[0,254],"content":"This method overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method. It returns a string that consists of the class name and the value of the instance <xref:System.Globalization.CompareInfo.Name%2A> property, separated by a hyphen.","nodes":[{"content":"This method overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method. It returns a string that consists of the class name and the value of the instance <xref:System.Globalization.CompareInfo.Name%2A> property, separated by a hyphen.","pos":[0,254],"nodes":[{"content":"This method overrides the <ph id=\"ph1\">&lt;xref:System.Object.ToString%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,91],"source":"This method overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method."},{"content":"It returns a string that consists of the class name and the value of the instance <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo.Name%2A&gt;</ph> property, separated by a hyphen.","pos":[92,254],"source":" It returns a string that consists of the class name and the value of the instance <xref:System.Globalization.CompareInfo.Name%2A> property, separated by a hyphen."}]}]}],"pos":[238492,238747],"yaml":true,"extradata":"MT"},{"content":"A string that represents the current <xref href=\"System.Globalization.CompareInfo\"></xref> object.","nodes":[{"pos":[0,98],"content":"A string that represents the current <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CompareInfo\"&gt;&lt;/xref&gt;</ph> object.","source":"A string that represents the current <xref href=\"System.Globalization.CompareInfo\"></xref> object."}],"pos":[238882,238981],"yaml":true},{"content":"Gets information about the version of Unicode used for comparing and sorting strings.","nodes":[{"pos":[0,85],"content":"Gets information about the version of Unicode used for comparing and sorting strings.","nodes":[{"content":"Gets information about the version of Unicode used for comparing and sorting strings.","pos":[0,85]}]}],"pos":[240475,240561],"yaml":true},{"content":"The weight of individual characters, and therefore the way in which particular strings are compared or ordered, depends on the version of the Unicode specification that a particular version of the .NET Framework implements. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], this also depends on the host operating system, as the following table shows. Note that this list of supported Unicode versions applies to character comparison and sorting only; it does not apply to classification of Unicode characters by category.  \n  \n|.NET Framework version|Operating system|Unicode version|  \n|----------------------------|----------------------|---------------------|  \n|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|All operating systems|Unicode 5.0|  \n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  \n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions|[!INCLUDE[win8](~/includes/win8-md.md)] and later Windows operating system versions|Unicode 6.3|  \n  \n The <xref:System.Globalization.SortVersion> object returned by the <xref:System.Globalization.CompareInfo.Version%2A> property doesn't identify the precise Unicode version used to compare strings. It is useful only when comparing two <xref:System.Globalization.SortVersion> objects to determine whether they use the same Unicode version and culture to compare strings. For more information and an example, see the <xref:System.Globalization.SortVersion> reference page.","nodes":[{"pos":[0,526],"content":"The weight of individual characters, and therefore the way in which particular strings are compared or ordered, depends on the version of the Unicode specification that a particular version of the .NET Framework implements. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], this also depends on the host operating system, as the following table shows. Note that this list of supported Unicode versions applies to character comparison and sorting only; it does not apply to classification of Unicode characters by category.","nodes":[{"content":"The weight of individual characters, and therefore the way in which particular strings are compared or ordered, depends on the version of the Unicode specification that a particular version of the .NET Framework implements.","pos":[0,223]},{"content":"In the <ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph>, this also depends on the host operating system, as the following table shows.","pos":[224,355],"source":" In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], this also depends on the host operating system, as the following table shows."},{"content":"Note that this list of supported Unicode versions applies to character comparison and sorting only; it does not apply to classification of Unicode characters by category.","pos":[356,526]}]},{"pos":[533,555],"content":".NET Framework version","nodes":[{"content":".NET Framework version","pos":[0,22]}]},{"pos":[556,572],"content":"Operating system","nodes":[{"content":"Operating system","pos":[0,16]}]},{"pos":[573,588],"content":"Unicode version","nodes":[{"content":"Unicode version","pos":[0,15]}]},{"pos":[729,750],"content":"All operating systems","nodes":[{"content":"All operating systems","pos":[0,21]}]},{"pos":[751,762],"content":"Unicode 5.0","nodes":[{"content":"Unicode 5.0","pos":[0,11]}]},{"pos":[767,831],"content":"<ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later versions","source":"[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions"},{"pos":[872,883],"content":"Unicode 5.0","nodes":[{"content":"Unicode 5.0","pos":[0,11]}]},{"pos":[888,952],"content":"<ph id=\"ph1\">[!INCLUDE[net_v45](~/includes/net-v45-md.md)]</ph> and later versions","source":"[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions"},{"pos":[953,1036],"content":"<ph id=\"ph1\">[!INCLUDE[win8](~/includes/win8-md.md)]</ph> and later Windows operating system versions","source":"[!INCLUDE[win8](~/includes/win8-md.md)] and later Windows operating system versions"},{"pos":[1037,1048],"content":"Unicode 6.3","nodes":[{"content":"Unicode 6.3","pos":[0,11]}]},{"pos":[1056,1525],"content":"The <xref:System.Globalization.SortVersion> object returned by the <xref:System.Globalization.CompareInfo.Version%2A> property doesn't identify the precise Unicode version used to compare strings. It is useful only when comparing two <xref:System.Globalization.SortVersion> objects to determine whether they use the same Unicode version and culture to compare strings. For more information and an example, see the <xref:System.Globalization.SortVersion> reference page.","nodes":[{"content":"The <xref:System.Globalization.SortVersion> object returned by the <xref:System.Globalization.CompareInfo.Version%2A> property doesn't identify the precise Unicode version used to compare strings. It is useful only when comparing two <xref:System.Globalization.SortVersion> objects to determine whether they use the same Unicode version and culture to compare strings. For more information and an example, see the <xref:System.Globalization.SortVersion> reference page.","pos":[0,469],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.SortVersion&gt;</ph> object returned by the <ph id=\"ph2\">&lt;xref:System.Globalization.CompareInfo.Version%2A&gt;</ph> property doesn't identify the precise Unicode version used to compare strings.","pos":[0,196],"source":"The <xref:System.Globalization.SortVersion> object returned by the <xref:System.Globalization.CompareInfo.Version%2A> property doesn't identify the precise Unicode version used to compare strings."},{"content":"It is useful only when comparing two <ph id=\"ph1\">&lt;xref:System.Globalization.SortVersion&gt;</ph> objects to determine whether they use the same Unicode version and culture to compare strings.","pos":[197,368],"source":" It is useful only when comparing two <xref:System.Globalization.SortVersion> objects to determine whether they use the same Unicode version and culture to compare strings."},{"content":"For more information and an example, see the <ph id=\"ph1\">&lt;xref:System.Globalization.SortVersion&gt;</ph> reference page.","pos":[369,469],"source":" For more information and an example, see the <xref:System.Globalization.SortVersion> reference page."}]}]}],"pos":[240572,242108],"yaml":true,"extradata":"MT"},{"content":"An object that contains information about the Unicode version used for comparing and sorting strings.","nodes":[{"pos":[0,101],"content":"An object that contains information about the Unicode version used for comparing and sorting strings.","nodes":[{"content":"An object that contains information about the Unicode version used for comparing and sorting strings.","pos":[0,101]}]}],"pos":[242324,242426],"yaml":true},{"content":"Runs when the entire object graph has been deserialized.","nodes":[{"pos":[0,56],"content":"Runs when the entire object graph has been deserialized.","nodes":[{"content":"Runs when the entire object graph has been deserialized.","pos":[0,56]}]}],"pos":[244061,244118],"yaml":true},{"content":"This member is an explicit interface member implementation that can be used only when the current <xref:System.Globalization.CompareInfo> object is cast to an <xref:System.Runtime.Serialization.IDeserializationCallback> interface. For more information, see the <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> method.","nodes":[{"pos":[0,350],"content":"This member is an explicit interface member implementation that can be used only when the current <xref:System.Globalization.CompareInfo> object is cast to an <xref:System.Runtime.Serialization.IDeserializationCallback> interface. For more information, see the <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> method.","nodes":[{"content":"This member is an explicit interface member implementation that can be used only when the current <xref:System.Globalization.CompareInfo> object is cast to an <xref:System.Runtime.Serialization.IDeserializationCallback> interface. For more information, see the <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> method.","pos":[0,350],"nodes":[{"content":"This member is an explicit interface member implementation that can be used only when the current <ph id=\"ph1\">&lt;xref:System.Globalization.CompareInfo&gt;</ph> object is cast to an <ph id=\"ph2\">&lt;xref:System.Runtime.Serialization.IDeserializationCallback&gt;</ph> interface.","pos":[0,230],"source":"This member is an explicit interface member implementation that can be used only when the current <xref:System.Globalization.CompareInfo> object is cast to an <xref:System.Runtime.Serialization.IDeserializationCallback> interface."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A&gt;</ph> method.","pos":[231,350],"source":" For more information, see the <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> method."}]}]}],"pos":[244129,244480],"yaml":true,"extradata":"MT"},{"content":"The object that initiated the callback.","nodes":[{"pos":[0,39],"content":"The object that initiated the callback.","nodes":[{"content":"The object that initiated the callback.","pos":[0,39]}]}],"pos":[244646,244686],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.CompareInfo\n  commentId: T:System.Globalization.CompareInfo\n  id: CompareInfo\n  children:\n  - System.Globalization.CompareInfo.Compare(System.String,System.String)\n  - System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.Equals(System.Object)\n  - System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)\n  - System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)\n  - System.Globalization.CompareInfo.GetCompareInfo(System.Int32)\n  - System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  - System.Globalization.CompareInfo.GetHashCode\n  - System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.GetSortKey(System.String)\n  - System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.String)\n  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String)\n  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.IsSortable(System.String)\n  - System.Globalization.CompareInfo.IsSortable(System.Char)\n  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String)\n  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)\n  - System.Globalization.CompareInfo.LCID\n  - System.Globalization.CompareInfo.Name\n  - System.Globalization.CompareInfo.ToString\n  - System.Globalization.CompareInfo.Version\n  - System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  langs:\n  - csharp\n  name: CompareInfo\n  nameWithType: CompareInfo\n  fullName: System.Globalization.CompareInfo\n  type: Class\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Implements a set of methods for culture-sensitive string comparisons.\n  remarks: \"Conventions for comparing and sorting data vary from culture to culture. For example, sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an \\\"Æ\\\" character that it sorts after \\\"Z\\\" in the alphabet. In addition, comparisons may be case-sensitive or case-insensitive, and casing rules may also differ by culture. The <xref:System.Globalization.CompareInfo> class is responsible for maintaining this culture-sensitive string comparison data and for performing culture-sensitive string operations.  \\n  \\n Typically, you do not have to instantiate a <xref:System.Globalization.CompareInfo> object directly, because one is used implicitly by all non-ordinal string comparison operations, including calls to the <xref:System.String.Compare%2A?displayProperty=fullName> method. However, if you do want to retrieve a <xref:System.Globalization.CompareInfo> object, you can do it in one of these ways:  \\n  \\n-   By retrieving the value of the <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> property for a particular culture.  \\n  \\n-   By calling the static <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> method with a culture name. This allows for late-bound access to a <xref:System.Globalization.CompareInfo> object.  \\n  \\n## Ignored search values  \\n Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. Comparison methods such as <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> do not consider such characters when they perform a culture-sensitive comparison. Ignorable characters include:  \\n  \\n-   <xref:System.String.Empty?displayProperty=fullName>. Culture-sensitive comparison methods will always find an empty string at the beginning (index zero) of the string being searched.  \\n  \\n-   A character or string consisting of characters with code points that are not considered in the operation because of comparison options, In particular, the  <xref:System.Globalization.CompareOptions?displayProperty=fullName> and <xref:System.Globalization.CompareOptions?displayProperty=fullName> options produce searches in which symbols and nonspacing combining characters are ignored.  \\n  \\n-   A string with code points that have no linguistic significance. For example, a soft hyphen (U+00AD) is always ignored in a culture-sensitive string comparison.  \\n  \\n## Security considerations  \\n If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent, regardless of the culture settings of the operating system.  \\n  \\n> [!NOTE]\\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.\"\n  example:\n  - \"The following example shows how the <xref:System.Globalization.CompareInfo> object associated with a <xref:System.Globalization.CultureInfo> object affects string comparison.  \\n  \\n [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]\\n [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]\\n [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback\n  inheritance:\n  - System.Object\n  implements:\n  - System.Runtime.Serialization.IDeserializationCallback\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  extensionMethods:\n  - System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String)\n  id: Compare(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Compare(String, String)\n  nameWithType: CompareInfo.Compare(String, String)\n  fullName: CompareInfo.Compare(String, String)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Compares two strings.\n  remarks: \"By default, the comparison is performed by using <xref:System.Globalization.CompareOptions?displayProperty=fullName>. If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.\"\n  example:\n  - \"The following example compares portions of two strings using the different <xref:System.Globalization.CompareInfo> objects:  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with international sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with traditional sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  \\n  \\n The following example demonstrates calling the <xref:System.Globalization.CompareInfo.Compare%2A> method.  \\n  \\n [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]\\n [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]\\n [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]\"\n  syntax:\n    content: public virtual int Compare (string string1, string string2);\n    parameters:\n    - id: string1\n      type: System.String\n      description: The first string to compare.\n    - id: string2\n      type: System.String\n      description: The second string to compare.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> zero  \\n  \\n </td><td> The two strings are equal.  \\n  \\n </td></tr><tr><td> less than zero  \\n  \\n </td><td><code>string1</code> is less than <code>string2</code>.  \\n  \\n </td></tr><tr><td> greater than zero  \\n  \\n </td><td><code>string1</code> is greater than <code>string2</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Globalization.CompareInfo.Compare*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Compare(String, String, CompareOptions)\n  nameWithType: CompareInfo.Compare(String, String, CompareOptions)\n  fullName: CompareInfo.Compare(String, String, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Compares two strings using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.\"\n  example:\n  - \"The following example compares two strings using different <xref:System.Globalization.CompareOptions> settings.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  \\n  \\n The following example demonstrates calling the <xref:System.Globalization.CompareInfo.Compare%2A> method.  \\n  \\n [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]\\n [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]\\n [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]\"\n  syntax:\n    content: public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);\n    parameters:\n    - id: string1\n      type: System.String\n      description: The first string to compare.\n    - id: string2\n      type: System.String\n      description: The second string to compare.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.'\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> zero  \\n  \\n </td><td> The two strings are equal.  \\n  \\n </td></tr><tr><td> less than zero  \\n  \\n </td><td><code>string1</code> is less than <code>string2</code>.  \\n  \\n </td></tr><tr><td> greater than zero  \\n  \\n </td><td><code>string1</code> is greater than <code>string2</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Globalization.CompareInfo.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)\n  id: Compare(System.String,System.Int32,System.String,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Compare(String, Int32, String, Int32)\n  nameWithType: CompareInfo.Compare(String, Int32, String, Int32)\n  fullName: CompareInfo.Compare(String, Int32, String, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Compares the end section of a string with the end section of another string.\n  remarks: \"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.\"\n  example:\n  - \"The following example compares portions of two strings using the different <xref:System.Globalization.CompareInfo> objects:  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with international sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with traditional sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]\"\n  syntax:\n    content: public virtual int Compare (string string1, int offset1, string string2, int offset2);\n    parameters:\n    - id: string1\n      type: System.String\n      description: The first string to compare.\n    - id: offset1\n      type: System.Int32\n      description: The zero-based index of the character in <code>string1</code> at which to start comparing.\n    - id: string2\n      type: System.String\n      description: The second string to compare.\n    - id: offset2\n      type: System.Int32\n      description: The zero-based index of the character in <code>string2</code> at which to start comparing.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> zero  \\n  \\n </td><td> The two strings are equal.  \\n  \\n </td></tr><tr><td> less than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \\n  \\n </td></tr><tr><td> greater than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Globalization.CompareInfo.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset1</code> or <code>offset2</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \\n  \\n -or-  \\n  \\n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Compare(String, Int32, String, Int32, CompareOptions)\n  nameWithType: CompareInfo.Compare(String, Int32, String, Int32, CompareOptions)\n  fullName: CompareInfo.Compare(String, Int32, String, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Compares the end section of a string with the end section of another string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.\"\n  example:\n  - \"The following example compares portions of two strings using different <xref:System.Globalization.CompareOptions> settings.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]\"\n  syntax:\n    content: public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);\n    parameters:\n    - id: string1\n      type: System.String\n      description: The first string to compare.\n    - id: offset1\n      type: System.Int32\n      description: The zero-based index of the character in <code>string1</code> at which to start comparing.\n    - id: string2\n      type: System.String\n      description: The second string to compare.\n    - id: offset2\n      type: System.Int32\n      description: The zero-based index of the character in <code>string2</code> at which to start comparing.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.'\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> zero  \\n  \\n </td><td> The two strings are equal.  \\n  \\n </td></tr><tr><td> less than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \\n  \\n </td></tr><tr><td> greater than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Globalization.CompareInfo.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset1</code> or <code>offset2</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \\n  \\n -or-  \\n  \\n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Compare(String, Int32, Int32, String, Int32, Int32)\n  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32)\n  fullName: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Compares a section of one string with a section of another string.\n  remarks: \"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \\n  \\n> [!NOTE]\\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.\"\n  example:\n  - \"The following example compares portions of two strings using the different <xref:System.Globalization.CompareInfo> objects:  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with international sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with traditional sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]\"\n  syntax:\n    content: public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);\n    parameters:\n    - id: string1\n      type: System.String\n      description: The first string to compare.\n    - id: offset1\n      type: System.Int32\n      description: The zero-based index of the character in <code>string1</code> at which to start comparing.\n    - id: length1\n      type: System.Int32\n      description: The number of consecutive characters in <code>string1</code> to compare.\n    - id: string2\n      type: System.String\n      description: The second string to compare.\n    - id: offset2\n      type: System.Int32\n      description: The zero-based index of the character in <code>string2</code> at which to start comparing.\n    - id: length2\n      type: System.Int32\n      description: The number of consecutive characters in <code>string2</code> to compare.\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> zero  \\n  \\n </td><td> The two strings are equal.  \\n  \\n </td></tr><tr><td> less than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \\n  \\n </td></tr><tr><td> greater than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Globalization.CompareInfo.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \\n  \\n -or-  \\n  \\n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.  \\n  \\n -or-  \\n  \\n <code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>.  \\n  \\n -or-  \\n  \\n <code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Compares a section of one string with a section of another string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.\"\n  example:\n  - \"The following example compares portions of two strings using different <xref:System.Globalization.CompareOptions> settings.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]\"\n  syntax:\n    content: public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);\n    parameters:\n    - id: string1\n      type: System.String\n      description: The first string to compare.\n    - id: offset1\n      type: System.Int32\n      description: The zero-based index of the character in <code>string1</code> at which to start comparing.\n    - id: length1\n      type: System.Int32\n      description: The number of consecutive characters in <code>string1</code> to compare.\n    - id: string2\n      type: System.String\n      description: The second string to compare.\n    - id: offset2\n      type: System.Int32\n      description: The zero-based index of the character in <code>string2</code> at which to start comparing.\n    - id: length2\n      type: System.Int32\n      description: The number of consecutive characters in <code>string2</code> to compare.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>string1</code> and <code>string2</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.'\n    return:\n      type: System.Int32\n      description: \"A 32-bit signed integer indicating the lexical relationship between the two comparands.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Condition  \\n  \\n </th></tr></thead><tbody><tr><td> zero  \\n  \\n </td><td> The two strings are equal.  \\n  \\n </td></tr><tr><td> less than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is less than the specified section of <code>string2</code>.  \\n  \\n </td></tr><tr><td> greater than zero  \\n  \\n </td><td> The specified section of <code>string1</code> is greater than the specified section of <code>string2</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Globalization.CompareInfo.Compare*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>offset1</code> or <code>length1</code> or <code>offset2</code> or <code>length2</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>offset1</code> is greater than or equal to the number of characters in <code>string1</code>.  \\n  \\n -or-  \\n  \\n <code>offset2</code> is greater than or equal to the number of characters in <code>string2</code>.  \\n  \\n -or-  \\n  \\n <code>length1</code> is greater than the number of characters from <code>offset1</code> to the end of <code>string1</code>.  \\n  \\n -or-  \\n  \\n <code>length2</code> is greater than the number of characters from <code>offset2</code> to the end of <code>string2</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Equals(System.Object)\n  commentId: M:System.Globalization.CompareInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: CompareInfo.Equals(Object)\n  fullName: CompareInfo.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\"></xref> object.\n  remarks: \"Two <xref:System.Globalization.CompareInfo> objects are equal if their <xref:System.Globalization.CompareInfo.LCID%2A> and <xref:System.Globalization.CompareInfo.Name%2A> properties are equal.  \\n  \\n This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>.  \\n  \\n If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent regardless of the culture settings of the operating system.\"\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to compare with the current <xref href=\"System.Globalization.CompareInfo\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\"></xref>; otherwise, `false`.'\n  overload: System.Globalization.CompareInfo.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)\n  commentId: M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)\n  id: GetCompareInfo(System.String,System.Reflection.Assembly)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetCompareInfo(String, Assembly)\n  nameWithType: CompareInfo.GetCompareInfo(String, Assembly)\n  fullName: CompareInfo.GetCompareInfo(String, Assembly)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the specified culture and that uses string comparison methods in the specified <xref href=\"System.Reflection.Assembly\"></xref>.\n  remarks: \"> [!NOTE]\\n>  The behavior of this method is unpredictable. We recommend that you use a version of this method that does not take an assembly input.  \\n  \\n The `assembly` parameter must be of the same type as <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);\n    parameters:\n    - id: name\n      type: System.String\n      description: A string representing the culture name.\n    - id: assembly\n      type: System.Reflection.Assembly\n      description: An <xref href=\"System.Reflection.Assembly\"></xref> that contains the string comparison methods to use.\n    return:\n      type: System.Globalization.CompareInfo\n      description: A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.\n  overload: System.Globalization.CompareInfo.GetCompareInfo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>assembly</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>name</code> is an invalid culture name.  \\n  \\n -or-  \\n  \\n <code>assembly</code> is of an invalid type.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)\n  commentId: M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)\n  id: GetCompareInfo(System.Int32,System.Reflection.Assembly)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetCompareInfo(Int32, Assembly)\n  nameWithType: CompareInfo.GetCompareInfo(Int32, Assembly)\n  fullName: CompareInfo.GetCompareInfo(Int32, Assembly)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the specified culture and that uses string comparison methods in the specified <xref href=\"System.Reflection.Assembly\"></xref>.\n  remarks: \"> [!NOTE]\\n>  The behavior of this method is unpredictable. It is recommended for your application to use a version of this method that does not take an assembly input.  \\n  \\n The `assembly` parameter must be of the same type as <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);\n    parameters:\n    - id: culture\n      type: System.Int32\n      description: An integer representing the culture identifier.\n    - id: assembly\n      type: System.Reflection.Assembly\n      description: An <xref href=\"System.Reflection.Assembly\"></xref> that contains the string comparison methods to use.\n    return:\n      type: System.Globalization.CompareInfo\n      description: A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.\n  overload: System.Globalization.CompareInfo.GetCompareInfo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>assembly</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>assembly</code> is of an invalid type.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.Int32)\n  commentId: M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)\n  id: GetCompareInfo(System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetCompareInfo(Int32)\n  nameWithType: CompareInfo.GetCompareInfo(Int32)\n  fullName: CompareInfo.GetCompareInfo(Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the culture with the specified identifier.\n  remarks: ''\n  example:\n  - \"The following example compares portions of two strings using the different <xref:System.Globalization.CompareInfo> objects:  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with international sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with traditional sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]\"\n  syntax:\n    content: public static System.Globalization.CompareInfo GetCompareInfo (int culture);\n    parameters:\n    - id: culture\n      type: System.Int32\n      description: An integer representing the culture identifier.\n    return:\n      type: System.Globalization.CompareInfo\n      description: A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.\n  overload: System.Globalization.CompareInfo.GetCompareInfo*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  commentId: M:System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  id: GetCompareInfo(System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetCompareInfo(String)\n  nameWithType: CompareInfo.GetCompareInfo(String)\n  fullName: CompareInfo.GetCompareInfo(String)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Initializes a new <xref href=\"System.Globalization.CompareInfo\"></xref> object that is associated with the culture with the specified name.\n  remarks: ''\n  example:\n  - \"The following example compares portions of two strings using the different <xref:System.Globalization.CompareInfo> objects:  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with international sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the Spanish (Spain) culture with traditional sort  \\n  \\n-   <xref:System.Globalization.CompareInfo> object associated with the <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.CompareStrStr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]\"\n  syntax:\n    content: public static System.Globalization.CompareInfo GetCompareInfo (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: A string representing the culture name.\n    return:\n      type: System.Globalization.CompareInfo\n      description: A new <xref href=\"System.Globalization.CompareInfo\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\"></xref>.\n  overload: System.Globalization.CompareInfo.GetCompareInfo*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>name</code> is an invalid culture name.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetHashCode\n  commentId: M:System.Globalization.CompareInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: CompareInfo.GetHashCode()\n  fullName: CompareInfo.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Serves as a hash function for the current <xref href=\"System.Globalization.CompareInfo\"></xref> for hashing algorithms and data structures, such as a hash table.\n  remarks: \"This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.  \\n  \\n This method generates the same hash code for two objects that are equal according to the <xref:System.Globalization.CompareInfo.Equals%2A> method.\"\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Globalization.CompareInfo\"></xref>.\n  overload: System.Globalization.CompareInfo.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\n  id: GetHashCode(System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetHashCode(String, CompareOptions)\n  nameWithType: CompareInfo.GetHashCode(String, CompareOptions)\n  fullName: CompareInfo.GetHashCode(String, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the hash code for a string based on specified comparison options.\n  remarks: \"The behavior of <xref:System.Globalization.CompareInfo.GetHashCode%2A> is dependent on its implementation, which might change from one version of the common language runtime to another, or from one .NET Framework platform to another.  \\n  \\n> [!IMPORTANT]\\n>  If two string objects are equal, the <xref:System.Globalization.CompareInfo.GetHashCode%2A> method returns identical values. However, there is not a unique hash code value for each unique string value. Different strings can return the same hash code.  \\n>   \\n>  The hash code itself is not guaranteed to be stable. Hash codes for identical strings can differ across versions of the .NET Framework and across platforms (such as 32-bit and 64-bit) for a single version of the .NET Framework. In some cases, they can even differ by application domain.  \\n>   \\n>  As a result, hash codes should never be used outside of the application domain in which they were created, they should never be used as key fields in a collection, and they should never be persisted.\"\n  syntax:\n    content: public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string whose hash code is to be returned.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: A value that determines how strings are compared.\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.Globalization.CompareInfo.GetHashCode*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetSortKey(System.String)\n  commentId: M:System.Globalization.CompareInfo.GetSortKey(System.String)\n  id: GetSortKey(System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetSortKey(String)\n  nameWithType: CompareInfo.GetSortKey(String)\n  fullName: CompareInfo.GetSortKey(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the sort key for the specified string.\n  remarks: Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag.\n  syntax:\n    content: public virtual System.Globalization.SortKey GetSortKey (string source);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string for which a <xref href=\"System.Globalization.SortKey\"></xref> object is obtained.\n    return:\n      type: System.Globalization.SortKey\n      description: The <xref href=\"System.Globalization.SortKey\"></xref> object that contains the sort key for the specified string.\n  overload: System.Globalization.CompareInfo.GetSortKey*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)\n  id: GetSortKey(System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: GetSortKey(String, CompareOptions)\n  nameWithType: CompareInfo.GetSortKey(String, CompareOptions)\n  fullName: CompareInfo.GetSortKey(String, CompareOptions)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets a <xref href=\"System.Globalization.SortKey\"></xref> object for the specified string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: Each character in a string is given several categories of sort weights, including script, alphabetic, case, and diacritic weights. A sort key is the repository of these weights for a particular string. For example, a sort key might contain a string of alphabetic weights, followed by a string of case weights, and so on. The <xref:System.Globalization.CompareInfo.GetSortKey%2A> method is equivalent to the Windows API method `LCMapString` with the LCMAP_SORTKEY flag.\n  syntax:\n    content: public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string for which a <xref href=\"System.Globalization.SortKey\"></xref> object is obtained.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A bitwise combination of one or more of the following enumeration values that define how the sort key is calculated: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\"></xref>.'\n    return:\n      type: System.Globalization.SortKey\n      description: The <xref href=\"System.Globalization.SortKey\"></xref> object that contains the sort key for the specified string.\n  overload: System.Globalization.CompareInfo.GetSortKey*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  id: IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, Char, Int32, Int32)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32)\n  fullName: CompareInfo.IndexOf(String, Char, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \\n  \\n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, char value, int startIndex, int count);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, String, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, String, Int32, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, Char, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, Char, Int32, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, String, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, String, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, Char, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, Char, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)\n  id: IndexOf(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, String, Int32, Int32)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32)\n  fullName: CompareInfo.IndexOf(String, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at `startIndex` + `count` - 1.  \\n  \\n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, string value, int startIndex, int count);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that starts at <code>startIndex</code> and contains the number of elements specified by <code>count</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, String, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, String, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, String, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched forward starting at the beginning of the string and ending at the end of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)\n  id: IndexOf(System.String,System.Char,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, Char, Int32)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32)\n  fullName: CompareInfo.IndexOf(String, Char, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \\n  \\n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, char value, int startIndex);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  id: IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, Char, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, Char, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, Char, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched forward starting at the beginning of the string and ending at the end of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.IndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how the strings should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)\n  id: IndexOf(System.String,System.String,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, String, Int32)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32)\n  fullName: CompareInfo.IndexOf(String, String, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string.\n  remarks: \"The source string is searched forward starting at `startIndex` and ending at the end of the string.  \\n  \\n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, string value, int startIndex);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from <code>startIndex</code> to the end of <code>source</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)\n  id: IndexOf(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, String)\n  nameWithType: CompareInfo.IndexOf(String, String)\n  fullName: CompareInfo.IndexOf(String, String)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.\n  remarks: \"The source string is searched forward starting at the beginning of the string and ending at the end of the string.  \\n  \\n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should use one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, string value);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  id: IndexOf(System.String,System.Char)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IndexOf(String, Char)\n  nameWithType: CompareInfo.IndexOf(String, Char)\n  fullName: CompareInfo.IndexOf(String, Char)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.\n  remarks: \"This method searches the source string from the beginning of the string to the end of the string.  \\n  \\n This overload performs a culture-sensitive search. If `value` represents a precomposed Unicode character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if their Unicode code points are the same, you should call an overload that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value. Unlike <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, which performs a culture-sensitive comparison, overloads of the <xref:System.String.IndexOf%2A?displayProperty=fullName> method that search for a character perform an ordinal comparison and overloads that search for a string perform a culture-sensitive comparison.  \\n  \\n> [!NOTE]\\n>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int IndexOf (string source, char value);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    return:\n      type: System.Int32\n      description: The zero-based index of the first occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1. Returns 0 (zero) if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.IndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)\n  id: IsPrefix(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IsPrefix(String, String)\n  nameWithType: CompareInfo.IsPrefix(String, String)\n  fullName: CompareInfo.IsPrefix(String, String)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified source string starts with the specified prefix.\n  remarks: \"Every string starts and ends with an empty substring (\\\"\\\"); therefore, if `prefix` is an empty string, this method returns `true`.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines whether a string is the prefix or suffix of another string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]\"\n  syntax:\n    content: public virtual bool IsPrefix (string source, string prefix);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search in.\n    - id: prefix\n      type: System.String\n      description: The string to compare with the beginning of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, `false`.'\n  overload: System.Globalization.CompareInfo.IsPrefix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>prefix</code> is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  id: IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IsPrefix(String, String, CompareOptions)\n  nameWithType: CompareInfo.IsPrefix(String, String, CompareOptions)\n  fullName: CompareInfo.IsPrefix(String, String, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified source string starts with the specified prefix using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"Every string starts and ends with an empty substring (\\\"\\\"); therefore, if `prefix` is an empty string, this method returns `true`.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines whether a string is the prefix or suffix of another string using <xref:System.Globalization.CompareOptions>.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]\"\n  syntax:\n    content: public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search in.\n    - id: prefix\n      type: System.String\n      description: The string to compare with the beginning of <code>source</code>.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>prefix</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Boolean\n      description: '`true` if the length of <code>prefix</code> is less than or equal to the length of <code>source</code> and <code>source</code> starts with <code>prefix</code>; otherwise, `false`.'\n  overload: System.Globalization.CompareInfo.IsPrefix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>prefix</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IsSortable(System.String)\n  commentId: M:System.Globalization.CompareInfo.IsSortable(System.String)\n  id: IsSortable(System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IsSortable(String)\n  nameWithType: CompareInfo.IsSortable(String)\n  fullName: CompareInfo.IsSortable(String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates whether a specified Unicode string is sortable.\n  remarks: Each Unicode character in the `str` parameter is represented by one or more UTF-16 encoded <xref:System.Char> objects. The `str` parameter is sortable if each Unicode character is defined in an internal <xref:System.Globalization.CompareInfo> class sort table, and is not a private use or unpaired high or low surrogate character.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static bool IsSortable (string text);\n    parameters:\n    - id: text\n      type: System.String\n      description: A string of zero or more Unicode characters.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>str</code> parameter is not an empty string (\"\") and all the Unicode characters in <code>str</code> are sortable; otherwise, `false`.'\n  overload: System.Globalization.CompareInfo.IsSortable*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>str</code> is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IsSortable(System.Char)\n  commentId: M:System.Globalization.CompareInfo.IsSortable(System.Char)\n  id: IsSortable(System.Char)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IsSortable(Char)\n  nameWithType: CompareInfo.IsSortable(Char)\n  fullName: CompareInfo.IsSortable(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Indicates whether a specified Unicode character is sortable.\n  remarks: The `ch` parameter is sortable if it is a Unicode character that is defined in an internal <xref:System.Globalization.CompareInfo> class sort table, and is not a private use or unpaired high or low surrogate character.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public static bool IsSortable (char ch);\n    parameters:\n    - id: ch\n      type: System.Char\n      description: A Unicode character.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>ch</code> parameter is sortable; otherwise, `false`.'\n  overload: System.Globalization.CompareInfo.IsSortable*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)\n  id: IsSuffix(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IsSuffix(String, String)\n  nameWithType: CompareInfo.IsSuffix(String, String)\n  fullName: CompareInfo.IsSuffix(String, String)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified source string ends with the specified suffix.\n  remarks: \"Every string starts and ends with an empty substring (\\\"\\\"); therefore, if `suffix` is an empty string, this method returns `true`.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines whether a string is the prefix or suffix of another string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]\"\n  syntax:\n    content: public virtual bool IsSuffix (string source, string suffix);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search in.\n    - id: suffix\n      type: System.String\n      description: The string to compare with the end of <code>source</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, `false`.'\n  overload: System.Globalization.CompareInfo.IsSuffix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>suffix</code> is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  id: IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IsSuffix(String, String, CompareOptions)\n  nameWithType: CompareInfo.IsSuffix(String, String, CompareOptions)\n  fullName: CompareInfo.IsSuffix(String, String, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Determines whether the specified source string ends with the specified suffix using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"Every string starts and ends with an empty substring (\\\"\\\"); therefore, if `suffix` is an empty string, this method returns `true`.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines whether a string is the prefix or suffix of another string using <xref:System.Globalization.CompareOptions>.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]\"\n  syntax:\n    content: public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search in.\n    - id: suffix\n      type: System.String\n      description: The string to compare with the end of <code>source</code>.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>suffix</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref> used by itself, or the bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Boolean\n      description: '`true` if the length of <code>suffix</code> is less than or equal to the length of <code>source</code> and <code>source</code> ends with <code>suffix</code>; otherwise, `false`.'\n  overload: System.Globalization.CompareInfo.IsSuffix*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>suffix</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, String, Int32, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \\n  \\n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons .\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, string value, int startIndex, int count);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, String, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, String, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, Char, Int32, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at `startIndex` - `count` + 1.  \\n  \\n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, char value, int startIndex, int count);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: count\n      type: System.Int32\n      description: The number of elements in the section to search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that contains the number of elements specified by <code>count</code> and that ends at <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>startIndex</code> is outside the range of valid indexes for <code>source</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>startIndex</code> and <code>count</code> do not specify a valid section in <code>source</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, Char, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>, using the specified comparison options; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, Char, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, Char, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search. A character is considered equivalent to another character only if the Unicode values are the same. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  id: LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, String, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, String, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, String, CompareOptions)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  remarks: \"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \\n  \\n The <xref:System.Globalization.CompareOptions?displayProperty=fullName> value is not valid for this method.  \\n  \\n If `options` does not include the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. If `options` includes the <xref:System.Globalization.CompareOptions.Ordinal> value, this overload performs an ordinal (culture-insensitive) search, where the Unicode values are compared.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: options\n      type: System.Globalization.CompareOptions\n      description: 'A value that defines how <code>source</code> and <code>value</code> should be compared. <code>options</code> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\"></xref>.'\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>, using the specified comparison options; otherwise, -1.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>options</code> contains an invalid <xref href=\"System.Globalization.CompareOptions\"></xref> value.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)\n  id: LastIndexOf(System.String,System.Char,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, Char, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \\n  \\n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, char value, int startIndex);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)\n  id: LastIndexOf(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, String)\n  nameWithType: CompareInfo.LastIndexOf(String, String)\n  fullName: CompareInfo.LastIndexOf(String, String)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.\n  remarks: \"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \\n  \\n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, string value);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  id: LastIndexOf(System.String,System.Char)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, Char)\n  nameWithType: CompareInfo.LastIndexOf(String, Char)\n  fullName: CompareInfo.LastIndexOf(String, Char)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.\n  remarks: \"The source string is searched backward starting at the end of the string and ending at the beginning of the string.  \\n  \\n This overload performs a culture-sensitive search. If the character is a Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), it might be considered equivalent to any occurrence of its components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where a character is considered equivalent to another character only if the Unicode values are the same, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions.Ordinal> value. Overloads of <xref:System.String.LastIndexOf%2A?displayProperty=fullName> that search for a character perform an ordinal search, whereas those that search for a string perform a culture-sensitive search.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a string.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, char value);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.Char\n      description: The character to locate within <code>source</code>.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within <code>source</code>; otherwise, -1.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>source</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)\n  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)\n  id: LastIndexOf(System.String,System.String,System.Int32)\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LastIndexOf(String, String, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index.\n  remarks: \"The source string is searched backward starting at `startIndex` and ending at the beginning of the string.  \\n  \\n This overload performs a culture-sensitive search. A Unicode value representing a precomposed character, such as the ligature \\\"Æ\\\" (U+00C6), might be considered equivalent to any occurrence of the character's components in the correct sequence, such as \\\"AE\\\" (U+0041, U+0045), depending on the culture. To perform an ordinal (culture-insensitive) search, where the Unicode values are compared, you should call one of the overloads that has a parameter of type <xref:System.Globalization.CompareOptions> and use the <xref:System.Globalization.CompareOptions?displayProperty=fullName> value.  \\n  \\n> [!NOTE]\\n>  When possible, you should call string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options (using the current culture) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions?displayProperty=fullName> or <xref:System.Globalization.CompareOptions?displayProperty=fullName> for security comparisons.\"\n  example:\n  - \"The following example determines the indexes of the first and last occurrences of a character or a substring within a portion of a string. Note that <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> are searching in different portions of the string, even with the same `startIndex` parameter.  \\n  \\n [!code-cpp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]\\n [!code-csharp[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]\\n [!code-vb[System.Globalization.CompareInfo.IndexOfInt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]\"\n  syntax:\n    content: public virtual int LastIndexOf (string source, string value, int startIndex);\n    parameters:\n    - id: source\n      type: System.String\n      description: The string to search.\n    - id: value\n      type: System.String\n      description: The string to locate within <code>source</code>.\n    - id: startIndex\n      type: System.Int32\n      description: The zero-based starting index of the backward search.\n    return:\n      type: System.Int32\n      description: The zero-based index of the last occurrence of <code>value</code>, if found, within the section of <code>source</code> that extends from the beginning of <code>source</code> to <code>startIndex</code>; otherwise, -1. Returns <code>startIndex</code> if <code>value</code> is an ignorable character.\n  overload: System.Globalization.CompareInfo.LastIndexOf*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>source</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>value</code> is `null`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>startIndex</code> is outside the range of valid indexes for <code>source</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.LCID\n  commentId: P:System.Globalization.CompareInfo.LCID\n  id: LCID\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: LCID\n  nameWithType: CompareInfo.LCID\n  fullName: CompareInfo.LCID\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the properly formed culture identifier for the current <xref href=\"System.Globalization.CompareInfo\"></xref>.\n  remarks: ''\n  example:\n  - \"The following example demonstrates the <xref:System.Globalization.CompareInfo.LCID%2A> property.  \\n  \\n [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]\\n [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]\\n [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]\"\n  syntax:\n    content: public int LCID { get; }\n    return:\n      type: System.Int32\n      description: The properly formed culture identifier for the current <xref href=\"System.Globalization.CompareInfo\"></xref>.\n  overload: System.Globalization.CompareInfo.LCID*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Name\n  commentId: P:System.Globalization.CompareInfo.Name\n  id: Name\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Name\n  nameWithType: CompareInfo.Name\n  fullName: CompareInfo.Name\n  type: Property\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the name of the culture used for sorting operations by this <xref href=\"System.Globalization.CompareInfo\"></xref> object.\n  remarks: The <xref:System.Globalization.CompareInfo.Name%2A> and <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> properties can have different values. For example, an <xref:System.Globalization.CompareInfo.LCID%2A> property value of hexadecimal 0x10407 identifies an alternate sort culture that sorts names as they might appear in a German telephone book. The <xref:System.Globalization.CompareInfo.Name%2A> property has a value of \"de-de_phoneb\", whereas the <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> property of the associated German (Germany) culture has a value of \"de-DE\".\n  example:\n  - \"The following example compares three strings using the fr-FR and ja-JP cultures. The <xref:System.Globalization.CultureInfo.Name%2A> property is used to display the name of each culture.  \\n  \\n [!code-cpp[CompareInfo#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]\\n [!code-csharp[CompareInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]\\n [!code-vb[CompareInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual string Name { get; }\n    return:\n      type: System.String\n      description: The name of a culture.\n  overload: System.Globalization.CompareInfo.Name*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.ToString\n  commentId: M:System.Globalization.CompareInfo.ToString\n  id: ToString\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: CompareInfo.ToString()\n  fullName: CompareInfo.ToString()\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Returns a string that represents the current <xref href=\"System.Globalization.CompareInfo\"></xref> object.\n  remarks: This method overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method. It returns a string that consists of the class name and the value of the instance <xref:System.Globalization.CompareInfo.Name%2A> property, separated by a hyphen.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that represents the current <xref href=\"System.Globalization.CompareInfo\"></xref> object.\n  overload: System.Globalization.CompareInfo.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.Version\n  commentId: P:System.Globalization.CompareInfo.Version\n  id: Version\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: Version\n  nameWithType: CompareInfo.Version\n  fullName: CompareInfo.Version\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets information about the version of Unicode used for comparing and sorting strings.\n  remarks: \"The weight of individual characters, and therefore the way in which particular strings are compared or ordered, depends on the version of the Unicode specification that a particular version of the .NET Framework implements. In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], this also depends on the host operating system, as the following table shows. Note that this list of supported Unicode versions applies to character comparison and sorting only; it does not apply to classification of Unicode characters by category.  \\n  \\n|.NET Framework version|Operating system|Unicode version|  \\n|----------------------------|----------------------|---------------------|  \\n|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|All operating systems|Unicode 5.0|  \\n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  \\n|[!INCLUDE[net_v45](~/includes/net-v45-md.md)] and later versions|[!INCLUDE[win8](~/includes/win8-md.md)] and later Windows operating system versions|Unicode 6.3|  \\n  \\n The <xref:System.Globalization.SortVersion> object returned by the <xref:System.Globalization.CompareInfo.Version%2A> property doesn't identify the precise Unicode version used to compare strings. It is useful only when comparing two <xref:System.Globalization.SortVersion> objects to determine whether they use the same Unicode version and culture to compare strings. For more information and an example, see the <xref:System.Globalization.SortVersion> reference page.\"\n  syntax:\n    content: >-\n      [get: System.Security.SecuritySafeCritical]\n\n      public System.Globalization.SortVersion Version { get; }\n    return:\n      type: System.Globalization.SortVersion\n      description: An object that contains information about the Unicode version used for comparing and sorting strings.\n  overload: System.Globalization.CompareInfo.Version*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecuritySafeCritical'\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  commentId: M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  isEii: true\n  parent: System.Globalization.CompareInfo\n  langs:\n  - csharp\n  name: IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: CompareInfo.IDeserializationCallback.OnDeserialization(Object)\n  fullName: CompareInfo.IDeserializationCallback.OnDeserialization(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Runs when the entire object graph has been deserialized.\n  remarks: This member is an explicit interface member implementation that can be used only when the current <xref:System.Globalization.CompareInfo> object is cast to an <xref:System.Runtime.Serialization.IDeserializationCallback> interface. For more information, see the <xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> method.\n  syntax:\n    content: void IDeserializationCallback.OnDeserialization (object sender);\n    parameters:\n    - id: sender\n      type: System.Object\n      description: The object that initiated the callback.\n  overload: System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Compare(String, String)\n  nameWithType: CompareInfo.Compare(String, String)\n  fullName: CompareInfo.Compare(String, String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Compare(String, String, CompareOptions)\n  nameWithType: CompareInfo.Compare(String, String, CompareOptions)\n  fullName: CompareInfo.Compare(String, String, CompareOptions)\n- uid: System.Globalization.CompareOptions\n  parent: System.Globalization\n  isExternal: false\n  name: CompareOptions\n  nameWithType: CompareOptions\n  fullName: System.Globalization.CompareOptions\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Compare(String, Int32, String, Int32)\n  nameWithType: CompareInfo.Compare(String, Int32, String, Int32)\n  fullName: CompareInfo.Compare(String, Int32, String, Int32)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Compare(String, Int32, String, Int32, CompareOptions)\n  nameWithType: CompareInfo.Compare(String, Int32, String, Int32, CompareOptions)\n  fullName: CompareInfo.Compare(String, Int32, String, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Compare(String, Int32, Int32, String, Int32, Int32)\n  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32)\n  fullName: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32)\n- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.Equals(System.Object)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CompareInfo.Equals(Object)\n  fullName: CompareInfo.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetCompareInfo(String, Assembly)\n  nameWithType: CompareInfo.GetCompareInfo(String, Assembly)\n  fullName: CompareInfo.GetCompareInfo(String, Assembly)\n- uid: System.Globalization.CompareInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CompareInfo\n  nameWithType: CompareInfo\n  fullName: System.Globalization.CompareInfo\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetCompareInfo(Int32, Assembly)\n  nameWithType: CompareInfo.GetCompareInfo(Int32, Assembly)\n  fullName: CompareInfo.GetCompareInfo(Int32, Assembly)\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetCompareInfo(Int32)\n  nameWithType: CompareInfo.GetCompareInfo(Int32)\n  fullName: CompareInfo.GetCompareInfo(Int32)\n- uid: System.Globalization.CompareInfo.GetCompareInfo(System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetCompareInfo(String)\n  nameWithType: CompareInfo.GetCompareInfo(String)\n  fullName: CompareInfo.GetCompareInfo(String)\n- uid: System.Globalization.CompareInfo.GetHashCode\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CompareInfo.GetHashCode()\n  fullName: CompareInfo.GetHashCode()\n- uid: System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetHashCode(String, CompareOptions)\n  nameWithType: CompareInfo.GetHashCode(String, CompareOptions)\n  fullName: CompareInfo.GetHashCode(String, CompareOptions)\n- uid: System.Globalization.CompareInfo.GetSortKey(System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetSortKey(String)\n  nameWithType: CompareInfo.GetSortKey(String)\n  fullName: CompareInfo.GetSortKey(String)\n- uid: System.Globalization.SortKey\n  parent: System.Globalization\n  isExternal: false\n  name: SortKey\n  nameWithType: SortKey\n  fullName: System.Globalization.SortKey\n- uid: System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetSortKey(String, CompareOptions)\n  nameWithType: CompareInfo.GetSortKey(String, CompareOptions)\n  fullName: CompareInfo.GetSortKey(String, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, Char, Int32, Int32)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32)\n  fullName: CompareInfo.IndexOf(String, Char, Int32, Int32)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, String, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, String, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, Char, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, Char, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, String, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, String, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, Char, Int32, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, Char, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, String, Int32, Int32)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32)\n  fullName: CompareInfo.IndexOf(String, String, Int32, Int32)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, String, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, String, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, Char, Int32)\n  nameWithType: CompareInfo.IndexOf(String, Char, Int32)\n  fullName: CompareInfo.IndexOf(String, Char, Int32)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, Char, CompareOptions)\n  nameWithType: CompareInfo.IndexOf(String, Char, CompareOptions)\n  fullName: CompareInfo.IndexOf(String, Char, CompareOptions)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, String, Int32)\n  nameWithType: CompareInfo.IndexOf(String, String, Int32)\n  fullName: CompareInfo.IndexOf(String, String, Int32)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, String)\n  nameWithType: CompareInfo.IndexOf(String, String)\n  fullName: CompareInfo.IndexOf(String, String)\n- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf(String, Char)\n  nameWithType: CompareInfo.IndexOf(String, Char)\n  fullName: CompareInfo.IndexOf(String, Char)\n- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsPrefix(String, String)\n  nameWithType: CompareInfo.IsPrefix(String, String)\n  fullName: CompareInfo.IsPrefix(String, String)\n- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsPrefix(String, String, CompareOptions)\n  nameWithType: CompareInfo.IsPrefix(String, String, CompareOptions)\n  fullName: CompareInfo.IsPrefix(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.IsSortable(System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsSortable(String)\n  nameWithType: CompareInfo.IsSortable(String)\n  fullName: CompareInfo.IsSortable(String)\n- uid: System.Globalization.CompareInfo.IsSortable(System.Char)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsSortable(Char)\n  nameWithType: CompareInfo.IsSortable(Char)\n  fullName: CompareInfo.IsSortable(Char)\n- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsSuffix(String, String)\n  nameWithType: CompareInfo.IsSuffix(String, String)\n  fullName: CompareInfo.IsSuffix(String, String)\n- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsSuffix(String, String, CompareOptions)\n  nameWithType: CompareInfo.IsSuffix(String, String, CompareOptions)\n  fullName: CompareInfo.IsSuffix(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, String, Int32, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32, Int32)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, String, Int32, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, String, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, Char, Int32, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32, Int32)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, Char, Int32, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, Char, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, Char, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, String, CompareOptions)\n  nameWithType: CompareInfo.LastIndexOf(String, String, CompareOptions)\n  fullName: CompareInfo.LastIndexOf(String, String, CompareOptions)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, Char, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32)\n  fullName: CompareInfo.LastIndexOf(String, Char, Int32)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, String)\n  nameWithType: CompareInfo.LastIndexOf(String, String)\n  fullName: CompareInfo.LastIndexOf(String, String)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, Char)\n  nameWithType: CompareInfo.LastIndexOf(String, Char)\n  fullName: CompareInfo.LastIndexOf(String, Char)\n- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf(String, String, Int32)\n  nameWithType: CompareInfo.LastIndexOf(String, String, Int32)\n  fullName: CompareInfo.LastIndexOf(String, String, Int32)\n- uid: System.Globalization.CompareInfo.LCID\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LCID\n  nameWithType: CompareInfo.LCID\n  fullName: CompareInfo.LCID\n- uid: System.Globalization.CompareInfo.Name\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Name\n  nameWithType: CompareInfo.Name\n  fullName: CompareInfo.Name\n- uid: System.Globalization.CompareInfo.ToString\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: ToString()\n  nameWithType: CompareInfo.ToString()\n  fullName: CompareInfo.ToString()\n- uid: System.Globalization.CompareInfo.Version\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Version\n  nameWithType: CompareInfo.Version\n  fullName: CompareInfo.Version\n- uid: System.Globalization.SortVersion\n  parent: System.Globalization\n  isExternal: false\n  name: SortVersion\n  nameWithType: SortVersion\n  fullName: System.Globalization.SortVersion\n- uid: System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IDeserializationCallback.OnDeserialization(Object)\n  nameWithType: CompareInfo.IDeserializationCallback.OnDeserialization(Object)\n  fullName: CompareInfo.IDeserializationCallback.OnDeserialization(Object)\n- uid: System.Globalization.CompareInfo.Compare*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Compare\n  nameWithType: CompareInfo.Compare\n  fullName: CompareInfo.Compare\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.Equals*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Equals\n  nameWithType: CompareInfo.Equals\n  fullName: CompareInfo.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.GetCompareInfo*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetCompareInfo\n  nameWithType: CompareInfo.GetCompareInfo\n  fullName: CompareInfo.GetCompareInfo\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.GetHashCode*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetHashCode\n  nameWithType: CompareInfo.GetHashCode\n  fullName: CompareInfo.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.GetSortKey*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: GetSortKey\n  nameWithType: CompareInfo.GetSortKey\n  fullName: CompareInfo.GetSortKey\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.IndexOf*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IndexOf\n  nameWithType: CompareInfo.IndexOf\n  fullName: CompareInfo.IndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.IsPrefix*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsPrefix\n  nameWithType: CompareInfo.IsPrefix\n  fullName: CompareInfo.IsPrefix\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.IsSortable*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsSortable\n  nameWithType: CompareInfo.IsSortable\n  fullName: CompareInfo.IsSortable\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.IsSuffix*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: IsSuffix\n  nameWithType: CompareInfo.IsSuffix\n  fullName: CompareInfo.IsSuffix\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.LastIndexOf*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LastIndexOf\n  nameWithType: CompareInfo.LastIndexOf\n  fullName: CompareInfo.LastIndexOf\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.LCID*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: LCID\n  nameWithType: CompareInfo.LCID\n  fullName: CompareInfo.LCID\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.Name*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Name\n  nameWithType: CompareInfo.Name\n  fullName: CompareInfo.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.ToString*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: ToString\n  nameWithType: CompareInfo.ToString\n  fullName: CompareInfo.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.Version*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: Version\n  nameWithType: CompareInfo.Version\n  fullName: CompareInfo.Version\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*\n  parent: System.Globalization.CompareInfo\n  isExternal: false\n  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  nameWithType: CompareInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  fullName: CompareInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CompareInfo.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Globalization.GlobalizationExtensions.GetStringComparer(System.Globalization.CompareInfo,System.Globalization.CompareOptions)\n  parent: System.Globalization.GlobalizationExtensions\n  isExternal: false\n  name: GetStringComparer(CompareInfo, CompareOptions)\n  nameWithType: GlobalizationExtensions.GetStringComparer(CompareInfo, CompareOptions)\n  fullName: GlobalizationExtensions.GetStringComparer(CompareInfo, CompareOptions)\n- uid: System.Runtime.Serialization.IDeserializationCallback\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: IDeserializationCallback\n  nameWithType: IDeserializationCallback\n  fullName: System.Runtime.Serialization.IDeserializationCallback\n"}