{"nodes":[{"content":"Provides data for the <xref href=\"System.Windows.UIElement.KeyUp\"></xref> and <xref href=\"System.Windows.UIElement.KeyDown\"></xref> routed events, as well as related attached and Preview events.","nodes":[{"pos":[0,194],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.KeyUp\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement.KeyDown\"&gt;&lt;/xref&gt;</ph> routed events, as well as related attached and Preview events.","source":"Provides data for the <xref href=\"System.Windows.UIElement.KeyUp\"></xref> and <xref href=\"System.Windows.UIElement.KeyDown\"></xref> routed events, as well as related attached and Preview events."}],"pos":[1092,1287],"yaml":true},{"content":"This event data class is used with the following attached events:  \n  \n-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>  \n  \n-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>  \n  \n-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>  \n  \n-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>  \n  \n This event data class is also used with the following routed events on base elements. These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].  \n  \n-   <xref:System.Windows.UIElement.KeyUp?displayProperty=fullName>  \n  \n-   <xref:System.Windows.UIElement.KeyDown?displayProperty=fullName>  \n  \n-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName>  \n  \n-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName>  \n  \n-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName>  \n  \n-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName>  \n  \n-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName>  \n  \n-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName>  \n  \n The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data. This can affect the handled characteristics of the event as it travels the event route. For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an `AND` comparison of the first bit. Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.","nodes":[{"pos":[0,65],"content":"This event data class is used with the following attached events:","nodes":[{"content":"This event data class is used with the following attached events:","pos":[0,65]}]},{"pos":[75,142],"content":"<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>","nodes":[]},{"pos":[152,221],"content":"<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>","nodes":[]},{"pos":[231,305],"content":"<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>","nodes":[]},{"pos":[315,391],"content":"<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>","nodes":[]},{"pos":[398,683],"content":"This event data class is also used with the following routed events on base elements. These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].","nodes":[{"content":"This event data class is also used with the following routed events on base elements.","pos":[0,85]},{"content":"These routed events forward the previously listed attached events to make them more accessible to the general element model in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.","pos":[86,285],"source":" These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]."}]},{"pos":[693,755],"content":"<xref:System.Windows.UIElement.KeyUp?displayProperty=fullName>","nodes":[]},{"pos":[765,829],"content":"<xref:System.Windows.UIElement.KeyDown?displayProperty=fullName>","nodes":[]},{"pos":[839,908],"content":"<xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName>","nodes":[]},{"pos":[918,989],"content":"<xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName>","nodes":[]},{"pos":[999,1066],"content":"<xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName>","nodes":[]},{"pos":[1076,1145],"content":"<xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName>","nodes":[]},{"pos":[1155,1229],"content":"<xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName>","nodes":[]},{"pos":[1239,1315],"content":"<xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName>","nodes":[]},{"pos":[1322,1656],"content":"The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data. This can affect the handled characteristics of the event as it travels the event route. For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.","pos":[0,162]},{"content":"This can affect the handled characteristics of the event as it travels the event route.","pos":[163,250]},{"content":"For details, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[251,334],"source":" For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[1663,2286],"content":"A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an `AND` comparison of the first bit. Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.","nodes":[{"content":"A key can be in both the up and toggled states or the down and toggled states.","pos":[0,78]},{"content":"For this reason, determining whether a key is up or down is not as simple as checking the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyEventArgs.KeyStates%2A&gt;</ph> value as a numeric value.","pos":[79,248],"source":" For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value."},{"content":"Instead, you should check the value by treating it as a flag enumeration.","pos":[249,322]},{"content":"Use an <ph id=\"ph1\">`AND`</ph> comparison of the first bit.","pos":[323,364],"source":" Use an `AND` comparison of the first bit."},{"content":"Alternatively, use the helper properties <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt;</ph> to determine whether a given key is up, down, or toggled.","pos":[365,623],"source":" Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled."}]}],"pos":[1298,3617],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> class."}],"pos":[5998,6094],"yaml":true},{"content":"The logical keyboard device associated with this event.","nodes":[{"pos":[0,55],"content":"The logical keyboard device associated with this event.","nodes":[{"content":"The logical keyboard device associated with this event.","pos":[0,55]}]}],"pos":[6430,6486],"yaml":true},{"content":"The input source.","nodes":[{"pos":[0,17],"content":"The input source.","nodes":[{"content":"The input source.","pos":[0,17]}]}],"pos":[6573,6591],"yaml":true},{"content":"The time when the input occurred.","nodes":[{"pos":[0,33],"content":"The time when the input occurred.","nodes":[{"content":"The time when the input occurred.","pos":[0,33]}]}],"pos":[6655,6689],"yaml":true},{"content":"The key referenced by the event.","nodes":[{"pos":[0,32],"content":"The key referenced by the event.","nodes":[{"content":"The key referenced by the event.","pos":[0,32]}]}],"pos":[6759,6792],"yaml":true},{"content":"Gets the key that is part of dead key composition to create a single combined character.","nodes":[{"pos":[0,88],"content":"Gets the key that is part of dead key composition to create a single combined character.","nodes":[{"content":"Gets the key that is part of dead key composition to create a single combined character.","pos":[0,88]}]}],"pos":[7901,7990],"yaml":true},{"content":"A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.  If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key?displayProperty=fullName>, you can use this property to get the actual key that was entered.","nodes":[{"pos":[0,344],"content":"A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.  If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key?displayProperty=fullName>, you can use this property to get the actual key that was entered.","nodes":[{"content":"A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.  If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key?displayProperty=fullName>, you can use this property to get the actual key that was entered.","pos":[0,344],"nodes":[{"content":"A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.","pos":[0,160]},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyEventArgs.Key%2A&gt;</ph> returns <ph id=\"ph2\">&lt;xref:System.Windows.Input.Key?displayProperty=fullName&gt;</ph>, you can use this property to get the actual key that was entered.","pos":[162,344],"source":"  If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key?displayProperty=fullName>, you can use this property to get the actual key that was entered."}]}]}],"pos":[8001,8346],"yaml":true,"extradata":"MT"},{"content":"The key that is part of dead key composition to create a single combined character.","nodes":[{"pos":[0,83],"content":"The key that is part of dead key composition to create a single combined character.","nodes":[{"content":"The key that is part of dead key composition to create a single combined character.","pos":[0,83]}]}],"pos":[8499,8583],"yaml":true},{"content":"Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].","nodes":[{"pos":[0,140],"content":"Gets the keyboard key referenced by the event, if the key will be processed by an <ph id=\"ph1\">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>.","source":"Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]."}],"pos":[9611,9752],"yaml":true},{"content":"The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph> referenced by the event.","source":"The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event."}],"pos":[9900,9975],"yaml":true},{"content":"Gets the input source that provided this input.","nodes":[{"pos":[0,47],"content":"Gets the input source that provided this input.","nodes":[{"content":"Gets the input source that provided this input.","pos":[0,47]}]}],"pos":[10974,11022],"yaml":true},{"content":"The input source.","nodes":[{"pos":[0,17],"content":"The input source.","nodes":[{"content":"The input source.","pos":[0,17]}]}],"pos":[11240,11258],"yaml":true},{"content":"Invokes event handlers in a type-specific way, which can increase event system efficiency.","nodes":[{"pos":[0,90],"content":"Invokes event handlers in a type-specific way, which can increase event system efficiency.","nodes":[{"content":"Invokes event handlers in a type-specific way, which can increase event system efficiency.","pos":[0,90]}]}],"pos":[12482,12573],"yaml":true},{"content":"This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it. For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).","nodes":[{"pos":[0,333],"content":"This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it. For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).","nodes":[{"content":"This implementation casts the generic handler as a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyEventHandler&gt;</ph> and then invokes it.","pos":[0,115],"source":"This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it."},{"content":"For details on this implementation pattern and the reasons for it, see <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A&gt;</ph> and <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept>.","pos":[116,333],"source":" For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md)."}]}],"pos":[12584,12918],"yaml":true,"extradata":"MT"},{"content":"The generic handler to call in a type-specific way.","nodes":[{"pos":[0,51],"content":"The generic handler to call in a type-specific way.","nodes":[{"content":"The generic handler to call in a type-specific way.","pos":[0,51]}]}],"pos":[13121,13173],"yaml":true},{"content":"The target to call the handler on.","nodes":[{"pos":[0,34],"content":"The target to call the handler on.","nodes":[{"content":"The target to call the handler on.","pos":[0,34]}]}],"pos":[13242,13277],"yaml":true},{"content":"Gets a value that indicates whether the key referenced by the event is in the down state.","nodes":[{"pos":[0,89],"content":"Gets a value that indicates whether the key referenced by the event is in the down state.","nodes":[{"content":"Gets a value that indicates whether the key referenced by the event is in the down state.","pos":[0,89]}]}],"pos":[14249,14339],"yaml":true},{"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.","nodes":[{"pos":[0,233],"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.","nodes":[{"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.","pos":[0,233],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class also provides information about the state of the keys on the keyboard.","pos":[0,117],"source":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard."},{"content":"For instance, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.IsKeyDown%2A&gt;</ph> method returns whether a specified key is down.","pos":[118,233],"source":" For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down."}]}]}],"pos":[14350,14584],"yaml":true,"extradata":"MT"},{"content":"`true` if the key is down; otherwise, `false`.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">`true`</ph> if the key is down; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the key is down; otherwise, `false`."}],"pos":[15266,15315],"yaml":true},{"content":"Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.","nodes":[{"pos":[0,95],"content":"Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.","nodes":[{"content":"Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.","pos":[0,95]}]}],"pos":[16287,16383],"yaml":true},{"content":"`true` if the key is repeated; otherwise, `false`.  There is no default value.","nodes":[{"pos":[0,78],"content":"`true` if the key is repeated; otherwise, `false`.  There is no default value.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the key is repeated; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,50],"source":"`true` if the key is repeated; otherwise, `false`."},{"content":"There is no default value.","pos":[52,78]}]}],"pos":[17101,17182],"yaml":true},{"content":"Gets a value that indicates whether the key referenced by the event is in the toggled state.","nodes":[{"pos":[0,92],"content":"Gets a value that indicates whether the key referenced by the event is in the toggled state.","nodes":[{"content":"Gets a value that indicates whether the key referenced by the event is in the toggled state.","pos":[0,92]}]}],"pos":[18162,18255],"yaml":true},{"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.","nodes":[{"pos":[0,239],"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.","nodes":[{"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.","pos":[0,239],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class also provides information about the state of the keys on the keyboard.","pos":[0,117],"source":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard."},{"content":"For instance, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.IsKeyToggled%2A&gt;</ph> method returns whether a specified key is toggled.","pos":[118,239],"source":" For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled."}]}]}],"pos":[18266,18506],"yaml":true,"extradata":"MT"},{"content":"`true` if the key is toggled; otherwise, `false`.  There is no default value.","nodes":[{"pos":[0,77],"content":"`true` if the key is toggled; otherwise, `false`.  There is no default value.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the key is toggled; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,49],"source":"`true` if the key is toggled; otherwise, `false`."},{"content":"There is no default value.","pos":[51,77]}]}],"pos":[19209,19289],"yaml":true},{"content":"Gets a value that indicates whether the key referenced by the event is in the up state.","nodes":[{"pos":[0,87],"content":"Gets a value that indicates whether the key referenced by the event is in the up state.","nodes":[{"content":"Gets a value that indicates whether the key referenced by the event is in the up state.","pos":[0,87]}]}],"pos":[20240,20328],"yaml":true},{"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.  For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.","nodes":[{"pos":[0,226],"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.  For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.","nodes":[{"content":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.  For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.","pos":[0,226],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard&gt;</ph> class also provides information about the state of the keys on the keyboard.","pos":[0,117],"source":"The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard."},{"content":"For instance, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.IsKeyUp%2A&gt;</ph> method returns whether a specified is up.","pos":[119,226],"source":"  For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up."}]}]}],"pos":[20339,20566],"yaml":true,"extradata":"MT"},{"content":"`true` if the key is up; otherwise, `false`.  There is no default value.","nodes":[{"pos":[0,72],"content":"`true` if the key is up; otherwise, `false`.  There is no default value.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the key is up; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,44],"source":"`true` if the key is up; otherwise, `false`."},{"content":"There is no default value.","pos":[46,72]}]}],"pos":[21234,21309],"yaml":true},{"content":"Gets the keyboard key associated with the event.","nodes":[{"pos":[0,48],"content":"Gets the keyboard key associated with the event.","nodes":[{"content":"Gets the keyboard key associated with the event.","pos":[0,48]}]}],"pos":[22249,22298],"yaml":true},{"content":"The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph> referenced by the event.","source":"The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event."}],"pos":[22948,23023],"yaml":true},{"content":"Gets the state of the keyboard key associated with this event.","nodes":[{"pos":[0,62],"content":"Gets the state of the keyboard key associated with this event.","nodes":[{"content":"Gets the state of the keyboard key associated with this event.","pos":[0,62]}]}],"pos":[23976,24039],"yaml":true},{"content":"A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an `AND` comparison of the first bit. Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.","nodes":[{"pos":[0,623],"content":"A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an `AND` comparison of the first bit. Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.","nodes":[{"content":"A key can be in both the up and toggled states or the down and toggled states.","pos":[0,78]},{"content":"For this reason, determining whether a key is up or down is not as simple as checking the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyEventArgs.KeyStates%2A&gt;</ph> value as a numeric value.","pos":[79,248],"source":" For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value."},{"content":"Instead, you should check the value by treating it as a flag enumeration.","pos":[249,322]},{"content":"Use an <ph id=\"ph1\">`AND`</ph> comparison of the first bit.","pos":[323,364],"source":" Use an `AND` comparison of the first bit."},{"content":"Alternatively, use the helper properties <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyEventArgs.IsUp%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyEventArgs.IsDown%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyEventArgs.IsToggled%2A&gt;</ph> to determine whether a given key is up, down, or toggled.","pos":[365,623],"source":" Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled."}]}],"pos":[24050,24674],"yaml":true,"extradata":"MT"},{"content":"The state of the key.","nodes":[{"pos":[0,21],"content":"The state of the key.","nodes":[{"content":"The state of the key.","pos":[0,21]}]}],"pos":[25519,25541],"yaml":true},{"content":"Gets the keyboard key referenced by the event, if the key will be processed by the system.","nodes":[{"pos":[0,90],"content":"Gets the keyboard key referenced by the event, if the key will be processed by the system.","nodes":[{"content":"Gets the keyboard key referenced by the event, if the key will be processed by the system.","pos":[0,90]}]}],"pos":[26522,26613],"yaml":true},{"content":"The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event.","nodes":[{"pos":[0,74],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph> referenced by the event.","source":"The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event."}],"pos":[26755,26830],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.KeyEventArgs\n  commentId: T:System.Windows.Input.KeyEventArgs\n  id: KeyEventArgs\n  children:\n  - System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)\n  - System.Windows.Input.KeyEventArgs.DeadCharProcessedKey\n  - System.Windows.Input.KeyEventArgs.ImeProcessedKey\n  - System.Windows.Input.KeyEventArgs.InputSource\n  - System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  - System.Windows.Input.KeyEventArgs.IsDown\n  - System.Windows.Input.KeyEventArgs.IsRepeat\n  - System.Windows.Input.KeyEventArgs.IsToggled\n  - System.Windows.Input.KeyEventArgs.IsUp\n  - System.Windows.Input.KeyEventArgs.Key\n  - System.Windows.Input.KeyEventArgs.KeyStates\n  - System.Windows.Input.KeyEventArgs.SystemKey\n  langs:\n  - csharp\n  name: KeyEventArgs\n  nameWithType: KeyEventArgs\n  fullName: System.Windows.Input.KeyEventArgs\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Provides data for the <xref href=\"System.Windows.UIElement.KeyUp\"></xref> and <xref href=\"System.Windows.UIElement.KeyDown\"></xref> routed events, as well as related attached and Preview events.\n  remarks: \"This event data class is used with the following attached events:  \\n  \\n-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>  \\n  \\n This event data class is also used with the following routed events on base elements. These routed events forward the previously listed attached events to make them more accessible to the general element model in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)].  \\n  \\n-   <xref:System.Windows.UIElement.KeyUp?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.UIElement.KeyDown?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName>  \\n  \\n-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName>  \\n  \\n The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data. This can affect the handled characteristics of the event as it travels the event route. For details, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an `AND` comparison of the first bit. Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.\"\n  syntax:\n    content: 'public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs'\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  - System.Windows.RoutedEventArgs\n  - System.Windows.Input.InputEventArgs\n  - System.Windows.Input.KeyboardEventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.Input.InputEventArgs.Device\n  - System.Windows.Input.InputEventArgs.Timestamp\n  - System.Windows.Input.KeyboardEventArgs.KeyboardDevice\n  - System.Windows.RoutedEventArgs.Handled\n  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  - System.Windows.RoutedEventArgs.OriginalSource\n  - System.Windows.RoutedEventArgs.RoutedEvent\n  - System.Windows.RoutedEventArgs.Source\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)\n  commentId: M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)\n  id: '#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)'\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: KeyEventArgs(KeyboardDevice, PresentationSource, Int32, Key)\n  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice, PresentationSource, Int32, Key)\n  fullName: KeyEventArgs.KeyEventArgs(KeyboardDevice, PresentationSource, Int32, Key)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> class.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);\n    parameters:\n    - id: keyboard\n      type: System.Windows.Input.KeyboardDevice\n      description: The logical keyboard device associated with this event.\n    - id: inputSource\n      type: System.Windows.PresentationSource\n      description: The input source.\n    - id: timestamp\n      type: System.Int32\n      description: The time when the input occurred.\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key referenced by the event.\n  overload: System.Windows.Input.KeyEventArgs.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey\n  commentId: P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey\n  id: DeadCharProcessedKey\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: DeadCharProcessedKey\n  nameWithType: KeyEventArgs.DeadCharProcessedKey\n  fullName: KeyEventArgs.DeadCharProcessedKey\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the key that is part of dead key composition to create a single combined character.\n  remarks: A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.  If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key?displayProperty=fullName>, you can use this property to get the actual key that was entered.\n  syntax:\n    content: public System.Windows.Input.Key DeadCharProcessedKey { get; }\n    return:\n      type: System.Windows.Input.Key\n      description: The key that is part of dead key composition to create a single combined character.\n  overload: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey\n  commentId: P:System.Windows.Input.KeyEventArgs.ImeProcessedKey\n  id: ImeProcessedKey\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: ImeProcessedKey\n  nameWithType: KeyEventArgs.ImeProcessedKey\n  fullName: KeyEventArgs.ImeProcessedKey\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the keyboard key referenced by the event, if the key will be processed by an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)].\n  syntax:\n    content: public System.Windows.Input.Key ImeProcessedKey { get; }\n    return:\n      type: System.Windows.Input.Key\n      description: The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event.\n  overload: System.Windows.Input.KeyEventArgs.ImeProcessedKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.InputSource\n  commentId: P:System.Windows.Input.KeyEventArgs.InputSource\n  id: InputSource\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: InputSource\n  nameWithType: KeyEventArgs.InputSource\n  fullName: KeyEventArgs.InputSource\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the input source that provided this input.\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public System.Windows.PresentationSource InputSource { get; }\n    return:\n      type: System.Windows.PresentationSource\n      description: The input source.\n  overload: System.Windows.Input.KeyEventArgs.InputSource*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  commentId: M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  id: InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: InvokeEventHandler(Delegate, Object)\n  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate, Object)\n  fullName: KeyEventArgs.InvokeEventHandler(Delegate, Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Invokes event handlers in a type-specific way, which can increase event system efficiency.\n  remarks: This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it. For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md).\n  syntax:\n    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);\n    parameters:\n    - id: genericHandler\n      type: System.Delegate\n      description: The generic handler to call in a type-specific way.\n    - id: genericTarget\n      type: System.Object\n      description: The target to call the handler on.\n  overload: System.Windows.Input.KeyEventArgs.InvokeEventHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.IsDown\n  commentId: P:System.Windows.Input.KeyEventArgs.IsDown\n  id: IsDown\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: IsDown\n  nameWithType: KeyEventArgs.IsDown\n  fullName: KeyEventArgs.IsDown\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the key referenced by the event is in the down state.\n  remarks: The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.\n  example:\n  - \"The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> property.  \\n  \\n [!code-csharp[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisdown)]\\n [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisdown)]\"\n  syntax:\n    content: public bool IsDown { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key is down; otherwise, `false`.'\n  overload: System.Windows.Input.KeyEventArgs.IsDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.IsRepeat\n  commentId: P:System.Windows.Input.KeyEventArgs.IsRepeat\n  id: IsRepeat\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: IsRepeat\n  nameWithType: KeyEventArgs.IsRepeat\n  fullName: KeyEventArgs.IsRepeat\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.\n  remarks: ''\n  example:\n  - \"The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> property.  \\n  \\n [!code-csharp[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisrepeat)]\\n [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisrepeat)]\"\n  syntax:\n    content: public bool IsRepeat { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key is repeated; otherwise, `false`.  There is no default value.'\n  overload: System.Windows.Input.KeyEventArgs.IsRepeat*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.IsToggled\n  commentId: P:System.Windows.Input.KeyEventArgs.IsToggled\n  id: IsToggled\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: IsToggled\n  nameWithType: KeyEventArgs.IsToggled\n  fullName: KeyEventArgs.IsToggled\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the key referenced by the event is in the toggled state.\n  remarks: The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard. For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.\n  example:\n  - \"The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> property.  \\n  \\n [!code-csharp[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsistoggled)]\\n [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsistoggled)]\"\n  syntax:\n    content: public bool IsToggled { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key is toggled; otherwise, `false`.  There is no default value.'\n  overload: System.Windows.Input.KeyEventArgs.IsToggled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.IsUp\n  commentId: P:System.Windows.Input.KeyEventArgs.IsUp\n  id: IsUp\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: IsUp\n  nameWithType: KeyEventArgs.IsUp\n  fullName: KeyEventArgs.IsUp\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a value that indicates whether the key referenced by the event is in the up state.\n  remarks: The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.  For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.\n  example:\n  - \"The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> property.  \\n  \\n [!code-csharp[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisup)]\\n [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisup)]\"\n  syntax:\n    content: public bool IsUp { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the key is up; otherwise, `false`.  There is no default value.'\n  overload: System.Windows.Input.KeyEventArgs.IsUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.Key\n  commentId: P:System.Windows.Input.KeyEventArgs.Key\n  id: Key\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: Key\n  nameWithType: KeyEventArgs.Key\n  fullName: KeyEventArgs.Key\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the keyboard key associated with the event.\n  remarks: ''\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key.Return> key.  \\n  \\n [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]\\n [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]\"\n  syntax:\n    content: public System.Windows.Input.Key Key { get; }\n    return:\n      type: System.Windows.Input.Key\n      description: The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event.\n  overload: System.Windows.Input.KeyEventArgs.Key*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.KeyEventArgs.KeyStates\n  commentId: P:System.Windows.Input.KeyEventArgs.KeyStates\n  id: KeyStates\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: KeyStates\n  nameWithType: KeyEventArgs.KeyStates\n  fullName: KeyEventArgs.KeyStates\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the state of the keyboard key associated with this event.\n  remarks: A key can be in both the up and toggled states or the down and toggled states. For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value. Instead, you should check the value by treating it as a flag enumeration. Use an `AND` comparison of the first bit. Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.\n  example:\n  - \"The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> of the key and the <xref:System.Windows.Input.KeyStates.Down> enumeration value.  \\n  \\n [!code-csharp[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeystatesdown)]\\n [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeystatesdown)]\"\n  syntax:\n    content: public System.Windows.Input.KeyStates KeyStates { get; }\n    return:\n      type: System.Windows.Input.KeyStates\n      description: The state of the key.\n  overload: System.Windows.Input.KeyEventArgs.KeyStates*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyEventArgs.SystemKey\n  commentId: P:System.Windows.Input.KeyEventArgs.SystemKey\n  id: SystemKey\n  parent: System.Windows.Input.KeyEventArgs\n  langs:\n  - csharp\n  name: SystemKey\n  nameWithType: KeyEventArgs.SystemKey\n  fullName: KeyEventArgs.SystemKey\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the keyboard key referenced by the event, if the key will be processed by the system.\n  syntax:\n    content: public System.Windows.Input.Key SystemKey { get; }\n    return:\n      type: System.Windows.Input.Key\n      description: The <xref href=\"System.Windows.Input.Key\"></xref> referenced by the event.\n  overload: System.Windows.Input.KeyEventArgs.SystemKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.KeyboardEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyboardEventArgs\n  nameWithType: KeyboardEventArgs\n  fullName: System.Windows.Input.KeyboardEventArgs\n- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: KeyEventArgs(KeyboardDevice, PresentationSource, Int32, Key)\n  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice, PresentationSource, Int32, Key)\n  fullName: KeyEventArgs.KeyEventArgs(KeyboardDevice, PresentationSource, Int32, Key)\n- uid: System.Windows.Input.KeyboardDevice\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyboardDevice\n  nameWithType: KeyboardDevice\n  fullName: System.Windows.Input.KeyboardDevice\n- uid: System.Windows.PresentationSource\n  parent: System.Windows\n  isExternal: false\n  name: PresentationSource\n  nameWithType: PresentationSource\n  fullName: System.Windows.PresentationSource\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Input.Key\n  parent: System.Windows.Input\n  isExternal: false\n  name: Key\n  nameWithType: Key\n  fullName: System.Windows.Input.Key\n- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: DeadCharProcessedKey\n  nameWithType: KeyEventArgs.DeadCharProcessedKey\n  fullName: KeyEventArgs.DeadCharProcessedKey\n- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: ImeProcessedKey\n  nameWithType: KeyEventArgs.ImeProcessedKey\n  fullName: KeyEventArgs.ImeProcessedKey\n- uid: System.Windows.Input.KeyEventArgs.InputSource\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: InputSource\n  nameWithType: KeyEventArgs.InputSource\n  fullName: KeyEventArgs.InputSource\n- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: InvokeEventHandler(Delegate, Object)\n  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate, Object)\n  fullName: KeyEventArgs.InvokeEventHandler(Delegate, Object)\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.KeyEventArgs.IsDown\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsDown\n  nameWithType: KeyEventArgs.IsDown\n  fullName: KeyEventArgs.IsDown\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Input.KeyEventArgs.IsRepeat\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsRepeat\n  nameWithType: KeyEventArgs.IsRepeat\n  fullName: KeyEventArgs.IsRepeat\n- uid: System.Windows.Input.KeyEventArgs.IsToggled\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsToggled\n  nameWithType: KeyEventArgs.IsToggled\n  fullName: KeyEventArgs.IsToggled\n- uid: System.Windows.Input.KeyEventArgs.IsUp\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsUp\n  nameWithType: KeyEventArgs.IsUp\n  fullName: KeyEventArgs.IsUp\n- uid: System.Windows.Input.KeyEventArgs.Key\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: Key\n  nameWithType: KeyEventArgs.Key\n  fullName: KeyEventArgs.Key\n- uid: System.Windows.Input.KeyEventArgs.KeyStates\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: KeyStates\n  nameWithType: KeyEventArgs.KeyStates\n  fullName: KeyEventArgs.KeyStates\n- uid: System.Windows.Input.KeyStates\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyStates\n  nameWithType: KeyStates\n  fullName: System.Windows.Input.KeyStates\n- uid: System.Windows.Input.KeyEventArgs.SystemKey\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: SystemKey\n  nameWithType: KeyEventArgs.SystemKey\n  fullName: KeyEventArgs.SystemKey\n- uid: System.Windows.Input.KeyEventArgs.#ctor*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: KeyEventArgs\n  nameWithType: KeyEventArgs.KeyEventArgs\n  fullName: KeyEventArgs.KeyEventArgs\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: DeadCharProcessedKey\n  nameWithType: KeyEventArgs.DeadCharProcessedKey\n  fullName: KeyEventArgs.DeadCharProcessedKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: ImeProcessedKey\n  nameWithType: KeyEventArgs.ImeProcessedKey\n  fullName: KeyEventArgs.ImeProcessedKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.InputSource*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: InputSource\n  nameWithType: KeyEventArgs.InputSource\n  fullName: KeyEventArgs.InputSource\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: InvokeEventHandler\n  nameWithType: KeyEventArgs.InvokeEventHandler\n  fullName: KeyEventArgs.InvokeEventHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.IsDown*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsDown\n  nameWithType: KeyEventArgs.IsDown\n  fullName: KeyEventArgs.IsDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.IsRepeat*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsRepeat\n  nameWithType: KeyEventArgs.IsRepeat\n  fullName: KeyEventArgs.IsRepeat\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.IsToggled*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsToggled\n  nameWithType: KeyEventArgs.IsToggled\n  fullName: KeyEventArgs.IsToggled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.IsUp*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: IsUp\n  nameWithType: KeyEventArgs.IsUp\n  fullName: KeyEventArgs.IsUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.Key*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: Key\n  nameWithType: KeyEventArgs.Key\n  fullName: KeyEventArgs.Key\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.KeyStates*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: KeyStates\n  nameWithType: KeyEventArgs.KeyStates\n  fullName: KeyEventArgs.KeyStates\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Windows.Input.KeyEventArgs.SystemKey*\n  parent: System.Windows.Input.KeyEventArgs\n  isExternal: false\n  name: SystemKey\n  nameWithType: KeyEventArgs.SystemKey\n  fullName: KeyEventArgs.SystemKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n- uid: System.Windows.RoutedEventArgs.Handled\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: RoutedEventArgs.Handled\n  fullName: RoutedEventArgs.Handled\n- uid: System.Windows.RoutedEventArgs.OnSetSource(System.Object)\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: OnSetSource(Object)\n  nameWithType: RoutedEventArgs.OnSetSource(Object)\n  fullName: RoutedEventArgs.OnSetSource(Object)\n- uid: System.Windows.RoutedEventArgs.OriginalSource\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: OriginalSource\n  nameWithType: RoutedEventArgs.OriginalSource\n  fullName: RoutedEventArgs.OriginalSource\n- uid: System.Windows.RoutedEventArgs.RoutedEvent\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEventArgs.RoutedEvent\n  fullName: RoutedEventArgs.RoutedEvent\n- uid: System.Windows.RoutedEventArgs.Source\n  parent: System.Windows.RoutedEventArgs\n  isExternal: false\n  name: Source\n  nameWithType: RoutedEventArgs.Source\n  fullName: RoutedEventArgs.Source\n- uid: System.Windows.Input.InputEventArgs.Device\n  parent: System.Windows.Input.InputEventArgs\n  isExternal: false\n  name: Device\n  nameWithType: InputEventArgs.Device\n  fullName: InputEventArgs.Device\n- uid: System.Windows.Input.InputEventArgs.Timestamp\n  parent: System.Windows.Input.InputEventArgs\n  isExternal: false\n  name: Timestamp\n  nameWithType: InputEventArgs.Timestamp\n  fullName: InputEventArgs.Timestamp\n- uid: System.Windows.Input.KeyboardEventArgs.KeyboardDevice\n  parent: System.Windows.Input.KeyboardEventArgs\n  isExternal: false\n  name: KeyboardDevice\n  nameWithType: KeyboardEventArgs.KeyboardDevice\n  fullName: KeyboardEventArgs.KeyboardDevice\n"}