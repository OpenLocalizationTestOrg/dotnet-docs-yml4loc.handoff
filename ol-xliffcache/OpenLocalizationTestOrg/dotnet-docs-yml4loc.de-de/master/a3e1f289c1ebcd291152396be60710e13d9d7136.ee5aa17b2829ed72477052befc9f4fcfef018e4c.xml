{"nodes":[{"content":"Represents a method within a symbol store.","nodes":[{"pos":[0,42],"content":"Represents a method within a symbol store.","nodes":[{"content":"Represents a method within a symbol store.","pos":[0,42]}]}],"pos":[1679,1722],"yaml":true},{"content":"The <xref:System.Diagnostics.SymbolStore.SymMethod> class provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information. Use the <xref:System.Reflection> classes to read the type-related attributes of a method.","nodes":[{"pos":[0,282],"content":"The <xref:System.Diagnostics.SymbolStore.SymMethod> class provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information. Use the <xref:System.Reflection> classes to read the type-related attributes of a method.","nodes":[{"content":"The <xref:System.Diagnostics.SymbolStore.SymMethod> class provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information. Use the <xref:System.Reflection> classes to read the type-related attributes of a method.","pos":[0,282],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.SymbolStore.SymMethod&gt;</ph> class provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information.","pos":[0,192],"source":"The <xref:System.Diagnostics.SymbolStore.SymMethod> class provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection&gt;</ph> classes to read the type-related attributes of a method.","pos":[193,282],"source":" Use the <xref:System.Reflection> classes to read the type-related attributes of a method."}]}]}],"pos":[1733,2016],"yaml":true,"extradata":"MT"},{"content":"Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> class.","nodes":[{"pos":[0,127],"content":"Releases the resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymMethod\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> class."}],"pos":[5146,5274],"yaml":true},{"content":"Called by the <xref href=\"System.Diagnostics.SymbolStore.SymMethod.Dispose\"></xref> and <xref href=\"System.Diagnostics.SymbolStore.SymMethod.Finalize\"></xref> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> class.","nodes":[{"pos":[0,318],"content":"Called by the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymMethod.Dispose\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymMethod.Finalize\"&gt;&lt;/xref&gt;</ph> methods to release the managed and unmanaged resources used by the current instance of the <ph id=\"ph3\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymMethod\"&gt;&lt;/xref&gt;</ph> class.","source":"Called by the <xref href=\"System.Diagnostics.SymbolStore.SymMethod.Dispose\"></xref> and <xref href=\"System.Diagnostics.SymbolStore.SymMethod.Finalize\"></xref> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> class."}],"pos":[6433,6752],"yaml":true},{"content":"This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> methods; do not call this method directly.","nodes":[{"pos":[0,206],"content":"This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> methods; do not call this method directly.","nodes":[{"content":"This method is called only by the public <ph id=\"ph1\">&lt;xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A&gt;</ph> methods; do not call this method directly.","pos":[0,206],"source":"This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> methods; do not call this method directly."}]}],"pos":[6763,6970],"yaml":true,"extradata":"MT"},{"content":"`true` to release managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">`true`</ph> to release managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[7201,7299],"yaml":true},{"content":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> is reclaimed by garbage collection.","nodes":[{"pos":[0,175],"content":"Releases unmanaged resources and performs other cleanup operations before the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymMethod\"&gt;&lt;/xref&gt;</ph> is reclaimed by garbage collection.","source":"Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> is reclaimed by garbage collection."}],"pos":[8417,8593],"yaml":true},{"content":"This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.","nodes":[{"pos":[0,309],"content":"This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.","nodes":[{"content":"This method overrides  <ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph>.","pos":[0,56],"source":"This method overrides  <xref:System.Object.Finalize%2A>."},{"content":"Application code should not call this method; an object's <ph id=\"ph1\">`Finalize`</ph> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <ph id=\"ph2\">&lt;xref:System.GC.SuppressFinalize%2A&gt;</ph> method.","pos":[57,309],"source":" Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method."}]}],"pos":[8604,8914],"yaml":true,"extradata":"MT"},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[10010,10083],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[10296,10369],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[10552,10566],"yaml":true},{"content":"Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.","nodes":[{"pos":[0,116],"content":"Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.","nodes":[{"content":"Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.","pos":[0,116]}]}],"pos":[11816,11933],"yaml":true},{"content":"The document for which the offset is requested.","nodes":[{"pos":[0,47],"content":"The document for which the offset is requested.","nodes":[{"content":"The document for which the offset is requested.","pos":[0,47]}]}],"pos":[12179,12227],"yaml":true},{"content":"The document line for which the offset is requested.","nodes":[{"pos":[0,52],"content":"The document line for which the offset is requested.","nodes":[{"content":"The document line for which the offset is requested.","pos":[0,52]}]}],"pos":[12286,12339],"yaml":true},{"content":"The document column for which the offset is requested.","nodes":[{"pos":[0,54],"content":"The document column for which the offset is requested.","nodes":[{"content":"The document column for which the offset is requested.","pos":[0,54]}]}],"pos":[12400,12455],"yaml":true},{"content":"The IL offset within the current method of the specified location in the document.","nodes":[{"pos":[0,82],"content":"The IL offset within the current method of the specified location in the document.","nodes":[{"content":"The IL offset within the current method of the specified location in the document.","pos":[0,82]}]}],"pos":[12511,12594],"yaml":true},{"content":"Gets the parameters for the current method.","nodes":[{"pos":[0,43],"content":"Gets the parameters for the current method.","nodes":[{"content":"Gets the parameters for the current method.","pos":[0,43]}]}],"pos":[13640,13684],"yaml":true},{"content":"The parameters are returned in the order that they are defined within the signature of the method. The returned array is empty if the method does not have parameters.","nodes":[{"pos":[0,166],"content":"The parameters are returned in the order that they are defined within the signature of the method. The returned array is empty if the method does not have parameters.","nodes":[{"content":"The parameters are returned in the order that they are defined within the signature of the method. The returned array is empty if the method does not have parameters.","pos":[0,166],"nodes":[{"content":"The parameters are returned in the order that they are defined within the signature of the method.","pos":[0,98]},{"content":"The returned array is empty if the method does not have parameters.","pos":[99,166]}]}]}],"pos":[13695,13862],"yaml":true,"extradata":"MT"},{"content":"The array of parameters for the current method.","nodes":[{"pos":[0,47],"content":"The array of parameters for the current method.","nodes":[{"content":"The array of parameters for the current method.","pos":[0,47]}]}],"pos":[14078,14126],"yaml":true},{"content":"Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) offsets that a given position covers within this method.","nodes":[{"pos":[0,172],"content":"Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) offsets that a given position covers within this method.","nodes":[{"content":"Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) offsets that a given position covers within this method.","pos":[0,172]}]}],"pos":[15461,15634],"yaml":true},{"content":"The array is an array of integers in the format {{start1, end1}, {start2, end2}...}, where each pair represents an IL offset range within the method. The number of ranges is the length of the array divided by 2.","nodes":[{"pos":[0,211],"content":"The array is an array of integers in the format {{start1, end1}, {start2, end2}...}, where each pair represents an IL offset range within the method. The number of ranges is the length of the array divided by 2.","nodes":[{"content":"The array is an array of integers in the format {{start1, end1}, {start2, end2}...}, where each pair represents an IL offset range within the method. The number of ranges is the length of the array divided by 2.","pos":[0,211],"nodes":[{"content":"The array is an array of integers in the format {{start1, end1}, {start2, end2}...}, where each pair represents an IL offset range within the method.","pos":[0,149]},{"content":"The number of ranges is the length of the array divided by 2.","pos":[150,211]}]}]}],"pos":[15645,15857],"yaml":true,"extradata":"MT"},{"content":"The document for which the IL offset ranges are requested.","nodes":[{"pos":[0,58],"content":"The document for which the IL offset ranges are requested.","nodes":[{"content":"The document for which the IL offset ranges are requested.","pos":[0,58]}]}],"pos":[16105,16164],"yaml":true},{"content":"The document line for which the IL offset ranges are requested.","nodes":[{"pos":[0,63],"content":"The document line for which the IL offset ranges are requested.","nodes":[{"content":"The document line for which the IL offset ranges are requested.","pos":[0,63]}]}],"pos":[16223,16287],"yaml":true},{"content":"The document column for which the IL offset ranges are requested.","nodes":[{"pos":[0,65],"content":"The document column for which the IL offset ranges are requested.","nodes":[{"content":"The document column for which the IL offset ranges are requested.","pos":[0,65]}]}],"pos":[16348,16414],"yaml":true},{"content":"An array of start and end IL offset pairs.","nodes":[{"pos":[0,42],"content":"An array of start and end IL offset pairs.","nodes":[{"content":"An array of start and end IL offset pairs.","pos":[0,42]}]}],"pos":[16472,16515],"yaml":true},{"content":"Returns the most enclosing lexical scope corresponding to an offset within a method.","nodes":[{"pos":[0,84],"content":"Returns the most enclosing lexical scope corresponding to an offset within a method.","nodes":[{"content":"Returns the most enclosing lexical scope corresponding to an offset within a method.","pos":[0,84]}]}],"pos":[17588,17673],"yaml":true},{"content":"You can use the <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A> method to start local variable searches.","nodes":[{"pos":[0,120],"content":"You can use the <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A> method to start local variable searches.","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A&gt;</ph> method to start local variable searches.","pos":[0,120],"source":"You can use the <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A> method to start local variable searches."}]}],"pos":[17684,17805],"yaml":true,"extradata":"MT"},{"content":"The IL offset within the method to look up.","nodes":[{"pos":[0,43],"content":"The IL offset within the method to look up.","nodes":[{"content":"The IL offset within the method to look up.","pos":[0,43]}]}],"pos":[17987,18031],"yaml":true},{"content":"The most enclosing lexical scope for the given IL offset within the method.","nodes":[{"pos":[0,75],"content":"The most enclosing lexical scope for the given IL offset within the method.","nodes":[{"content":"The most enclosing lexical scope for the given IL offset within the method.","pos":[0,75]}]}],"pos":[18118,18194],"yaml":true},{"content":"Gets the sequence points for the current method and stores the information in the specified arrays.","nodes":[{"pos":[0,99],"content":"Gets the sequence points for the current method and stores the information in the specified arrays.","nodes":[{"content":"Gets the sequence points for the current method and stores the information in the specified arrays.","pos":[0,99]}]}],"pos":[19824,19924],"yaml":true},{"content":"Sequence points are used to map between source file locations and IL offsets.  Each sequence point consists of an IL offset, and source file region specified by start and end line/column numbers relative to an <xref:System.Diagnostics.SymbolStore.ISymbolDocument> object.  Each element at a specific index of every array corresponds to a specific sequence point. The caller must supply pre-allocated arrays to hold the information to be returned. Any values in the arrays are overwritten. Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size. The sequence points are sorted by offset and are for all documents in the method. <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> verifies the size of each array and places the sequence point information into each. If any array is `null`, the data for that array is not returned.","nodes":[{"pos":[0,954],"content":"Sequence points are used to map between source file locations and IL offsets.  Each sequence point consists of an IL offset, and source file region specified by start and end line/column numbers relative to an <xref:System.Diagnostics.SymbolStore.ISymbolDocument> object.  Each element at a specific index of every array corresponds to a specific sequence point. The caller must supply pre-allocated arrays to hold the information to be returned. Any values in the arrays are overwritten. Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size. The sequence points are sorted by offset and are for all documents in the method. <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> verifies the size of each array and places the sequence point information into each. If any array is `null`, the data for that array is not returned.","nodes":[{"content":"Sequence points are used to map between source file locations and IL offsets.","pos":[0,77]},{"content":"Each sequence point consists of an IL offset, and source file region specified by start and end line/column numbers relative to an <ph id=\"ph1\">&lt;xref:System.Diagnostics.SymbolStore.ISymbolDocument&gt;</ph> object.","pos":[79,271],"source":"  Each sequence point consists of an IL offset, and source file region specified by start and end line/column numbers relative to an <xref:System.Diagnostics.SymbolStore.ISymbolDocument> object."},{"content":"Each element at a specific index of every array corresponds to a specific sequence point.","pos":[273,362]},{"content":"The caller must supply pre-allocated arrays to hold the information to be returned.","pos":[363,446]},{"content":"Any values in the arrays are overwritten.","pos":[447,488]},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A&gt;</ph> to retrieve the count of all sequence points and create arrays of the proper size.","pos":[489,649],"source":" Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size."},{"content":"The sequence points are sorted by offset and are for all documents in the method.","pos":[650,731]},{"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A&gt;</ph> verifies the size of each array and places the sequence point information into each.","pos":[732,889],"source":" <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> verifies the size of each array and places the sequence point information into each."},{"content":"If any array is <ph id=\"ph1\">`null`</ph>, the data for that array is not returned.","pos":[890,954],"source":" If any array is `null`, the data for that array is not returned."}]}],"pos":[19935,20890],"yaml":true,"extradata":"MT"},{"content":"An array in which to store the IL offsets from the beginning of the method for the sequence points.","nodes":[{"pos":[0,99],"content":"An array in which to store the IL offsets from the beginning of the method for the sequence points.","nodes":[{"content":"An array in which to store the IL offsets from the beginning of the method for the sequence points.","pos":[0,99]}]}],"pos":[21170,21270],"yaml":true},{"content":"An array in which to store the  documents in which the sequence points are located.","nodes":[{"pos":[0,83],"content":"An array in which to store the  documents in which the sequence points are located.","nodes":[{"content":"An array in which to store the  documents in which the sequence points are located.","pos":[0,83]}]}],"pos":[21370,21454],"yaml":true},{"content":"An array in which to store the lines in the documents at which the sequence points are located.","nodes":[{"pos":[0,95],"content":"An array in which to store the lines in the documents at which the sequence points are located.","nodes":[{"content":"An array in which to store the lines in the documents at which the sequence points are located.","pos":[0,95]}]}],"pos":[21516,21612],"yaml":true},{"content":"An array in which to store the columns in the documents at which the sequence points are located.","nodes":[{"pos":[0,97],"content":"An array in which to store the columns in the documents at which the sequence points are located.","nodes":[{"content":"An array in which to store the columns in the documents at which the sequence points are located.","pos":[0,97]}]}],"pos":[21676,21774],"yaml":true},{"content":"The array of lines in the documents at which the sequence points end.","nodes":[{"pos":[0,69],"content":"The array of lines in the documents at which the sequence points end.","nodes":[{"content":"The array of lines in the documents at which the sequence points end.","pos":[0,69]}]}],"pos":[21839,21909],"yaml":true},{"content":"The array of columns in the documents at which the sequence points end.","nodes":[{"pos":[0,71],"content":"The array of columns in the documents at which the sequence points end.","nodes":[{"content":"The array of columns in the documents at which the sequence points end.","pos":[0,71]}]}],"pos":[21976,22048],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[23471,23544],"yaml":true},{"content":"This parameter is not used.","nodes":[{"pos":[0,27],"content":"This parameter is not used.","nodes":[{"content":"This parameter is not used.","pos":[0,27]}]}],"pos":[23801,23829],"yaml":true},{"content":"This parameter is not used.","nodes":[{"pos":[0,27],"content":"This parameter is not used.","nodes":[{"content":"This parameter is not used.","pos":[0,27]}]}],"pos":[23891,23919],"yaml":true},{"content":"This parameter is not used.","nodes":[{"pos":[0,27],"content":"This parameter is not used.","nodes":[{"content":"This parameter is not used.","pos":[0,27]}]}],"pos":[23983,24011],"yaml":true},{"content":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.","nodes":[{"pos":[0,72],"content":"Throws a <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph> in all cases.","source":"Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases."}],"pos":[24069,24142],"yaml":true},{"content":"In all cases.","nodes":[{"pos":[0,13],"content":"In all cases.","nodes":[{"content":"In all cases.","pos":[0,13]}]}],"pos":[24330,24344],"yaml":true},{"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","nodes":[{"pos":[0,90],"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","nodes":[{"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","pos":[0,90],"nodes":[{"content":"Gets the root lexical scope for the current method.","pos":[0,51]},{"content":"This scope encloses the entire method.","pos":[52,90]}]}]}],"pos":[25281,25372],"yaml":true},{"content":"The root lexical scope that encloses the entire method.","nodes":[{"pos":[0,55],"content":"The root lexical scope that encloses the entire method.","nodes":[{"content":"The root lexical scope that encloses the entire method.","pos":[0,55]}]}],"pos":[25560,25616],"yaml":true},{"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","nodes":[{"pos":[0,90],"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","nodes":[{"content":"Gets the root lexical scope for the current method. This scope encloses the entire method.","pos":[0,90],"nodes":[{"content":"Gets the root lexical scope for the current method.","pos":[0,51]},{"content":"This scope encloses the entire method.","pos":[52,90]}]}]}],"pos":[26686,26777],"yaml":true},{"content":"The root lexical scope that encloses the entire method.","nodes":[{"pos":[0,55],"content":"The root lexical scope that encloses the entire method.","nodes":[{"content":"The root lexical scope that encloses the entire method.","pos":[0,55]}]}],"pos":[26987,27043],"yaml":true},{"content":"Gets a count of the sequence points in the method.","nodes":[{"pos":[0,50],"content":"Gets a count of the sequence points in the method.","nodes":[{"content":"Gets a count of the sequence points in the method.","pos":[0,50]}]}],"pos":[28123,28174],"yaml":true},{"content":"The count of the sequence points in the method.","nodes":[{"pos":[0,47],"content":"The count of the sequence points in the method.","nodes":[{"content":"The count of the sequence points in the method.","pos":[0,47]}]}],"pos":[28300,28348],"yaml":true},{"content":"Gets the <xref href=\"System.Diagnostics.SymbolStore.SymbolToken\"></xref> containing the metadata for the current method.","nodes":[{"pos":[0,120],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.SymbolStore.SymbolToken\"&gt;&lt;/xref&gt;</ph> containing the metadata for the current method.","source":"Gets the <xref href=\"System.Diagnostics.SymbolStore.SymbolToken\"></xref> containing the metadata for the current method."}],"pos":[29351,29472],"yaml":true},{"content":"The metadata token for the current method.","nodes":[{"pos":[0,42],"content":"The metadata token for the current method.","nodes":[{"content":"The metadata token for the current method.","pos":[0,42]}]}],"pos":[29654,29697],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.SymbolStore.SymMethod\n  commentId: T:System.Diagnostics.SymbolStore.SymMethod\n  id: SymMethod\n  children:\n  - System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)\n  - System.Diagnostics.SymbolStore.SymMethod.Dispose\n  - System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)\n  - System.Diagnostics.SymbolStore.SymMethod.Finalize\n  - System.Diagnostics.SymbolStore.SymMethod.GetNamespace\n  - System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  - System.Diagnostics.SymbolStore.SymMethod.GetParameters\n  - System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  - System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)\n  - System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  - System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  - System.Diagnostics.SymbolStore.SymMethod.RootScope\n  - System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal\n  - System.Diagnostics.SymbolStore.SymMethod.SequencePointCount\n  - System.Diagnostics.SymbolStore.SymMethod.Token\n  langs:\n  - csharp\n  name: SymMethod\n  nameWithType: SymMethod\n  fullName: System.Diagnostics.SymbolStore.SymMethod\n  type: Class\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Represents a method within a symbol store.\n  remarks: The <xref:System.Diagnostics.SymbolStore.SymMethod> class provides access only to the symbol-related attributes of a method, such as sequence points, lexical scopes, and parameter information. Use the <xref:System.Reflection> classes to read the type-related attributes of a method.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class SymMethod : System.Diagnostics.SymbolStore.SymMethodBase, IDisposable, System.Diagnostics.SymbolStore.ISymbolMethod\n  inheritance:\n  - System.Object\n  - System.Diagnostics.SymbolStore.SymMethodBase\n  implements:\n  - System.Diagnostics.SymbolStore.ISymbolMethod\n  - System.IDisposable\n  inheritedMembers:\n  - System.Diagnostics.SymbolStore.SymMethodBase.{dtor}\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)\n  id: '#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)'\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: SymMethod(ISymUnmanagedMethod*)\n  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)\n  fullName: SymMethod.SymMethod(ISymUnmanagedMethod*)\n  type: Constructor\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  syntax:\n    content: public SymMethod (System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod* pMethod);\n    parameters:\n    - id: pMethod\n      type: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*\n      description: ''\n  overload: System.Diagnostics.SymbolStore.SymMethod.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.Dispose\n  id: Dispose\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: SymMethod.Dispose()\n  fullName: SymMethod.Dispose()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Releases the resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> class.\n  syntax:\n    content: public override sealed void Dispose ();\n    parameters: []\n  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: SymMethod.Dispose(Boolean)\n  fullName: SymMethod.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Called by the <xref href=\"System.Diagnostics.SymbolStore.SymMethod.Dispose\"></xref> and <xref href=\"System.Diagnostics.SymbolStore.SymMethod.Finalize\"></xref> methods to release the managed and unmanaged resources used by the current instance of the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> class.\n  remarks: This method is called only by the public <xref:System.Diagnostics.SymbolStore.SymMethod.Dispose%2A> and <xref:System.Diagnostics.SymbolStore.SymMethod.Finalize%2A> methods; do not call this method directly.\n  syntax:\n    content: >-\n      [System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions]\n\n      protected virtual void Dispose (bool A_0);\n    parameters:\n    - id: A_0\n      type: System.Boolean\n      description: '`true` to release managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Diagnostics.SymbolStore.SymMethod.Dispose*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.Finalize\n  id: Finalize\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: SymMethod.Finalize()\n  fullName: SymMethod.Finalize()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Releases unmanaged resources and performs other cleanup operations before the <xref href=\"System.Diagnostics.SymbolStore.SymMethod\"></xref> is reclaimed by garbage collection.\n  remarks: This method overrides  <xref:System.Object.Finalize%2A>. Application code should not call this method; an object's `Finalize` method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A> method.\n  syntax:\n    content: ~SymMethod ();\n    parameters: []\n  overload: System.Diagnostics.SymbolStore.SymMethod.Finalize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.GetNamespace\n  id: GetNamespace\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: GetNamespace()\n  nameWithType: SymMethod.GetNamespace()\n  fullName: SymMethod.GetNamespace()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolNamespace\n      description: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  overload: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  id: GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: GetOffset(ISymbolDocument, Int32, Int32)\n  nameWithType: SymMethod.GetOffset(ISymbolDocument, Int32, Int32)\n  fullName: SymMethod.GetOffset(ISymbolDocument, Int32, Int32)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.\n  syntax:\n    content: public virtual int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);\n    parameters:\n    - id: document\n      type: System.Diagnostics.SymbolStore.ISymbolDocument\n      description: The document for which the offset is requested.\n    - id: line\n      type: System.Int32\n      description: The document line for which the offset is requested.\n    - id: column\n      type: System.Int32\n      description: The document column for which the offset is requested.\n    return:\n      type: System.Int32\n      description: The IL offset within the current method of the specified location in the document.\n  overload: System.Diagnostics.SymbolStore.SymMethod.GetOffset*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.GetParameters\n  id: GetParameters\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: GetParameters()\n  nameWithType: SymMethod.GetParameters()\n  fullName: SymMethod.GetParameters()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the parameters for the current method.\n  remarks: The parameters are returned in the order that they are defined within the signature of the method. The returned array is empty if the method does not have parameters.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolVariable[]\n      description: The array of parameters for the current method.\n  overload: System.Diagnostics.SymbolStore.SymMethod.GetParameters*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  id: GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: GetRanges(ISymbolDocument, Int32, Int32)\n  nameWithType: SymMethod.GetRanges(ISymbolDocument, Int32, Int32)\n  fullName: SymMethod.GetRanges(ISymbolDocument, Int32, Int32)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) offsets that a given position covers within this method.\n  remarks: The array is an array of integers in the format {{start1, end1}, {start2, end2}...}, where each pair represents an IL offset range within the method. The number of ranges is the length of the array divided by 2.\n  syntax:\n    content: public virtual int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);\n    parameters:\n    - id: document\n      type: System.Diagnostics.SymbolStore.ISymbolDocument\n      description: The document for which the IL offset ranges are requested.\n    - id: line\n      type: System.Int32\n      description: The document line for which the IL offset ranges are requested.\n    - id: column\n      type: System.Int32\n      description: The document column for which the IL offset ranges are requested.\n    return:\n      type: System.Int32[]\n      description: An array of start and end IL offset pairs.\n  overload: System.Diagnostics.SymbolStore.SymMethod.GetRanges*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)\n  id: GetScope(System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: GetScope(Int32)\n  nameWithType: SymMethod.GetScope(Int32)\n  fullName: SymMethod.GetScope(Int32)\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Returns the most enclosing lexical scope corresponding to an offset within a method.\n  remarks: You can use the <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope%2A> method to start local variable searches.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: The IL offset within the method to look up.\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope\n      description: The most enclosing lexical scope for the given IL offset within the method.\n  overload: System.Diagnostics.SymbolStore.SymMethod.GetScope*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  id: GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: GetSequencePoints(Int32[], ISymbolDocument[], Int32[], Int32[], Int32[], Int32[])\n  nameWithType: SymMethod.GetSequencePoints(Int32[], ISymbolDocument[], Int32[], Int32[], Int32[], Int32[])\n  fullName: SymMethod.GetSequencePoints(Int32[], ISymbolDocument[], Int32[], Int32[], Int32[], Int32[])\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the sequence points for the current method and stores the information in the specified arrays.\n  remarks: Sequence points are used to map between source file locations and IL offsets.  Each sequence point consists of an IL offset, and source file region specified by start and end line/column numbers relative to an <xref:System.Diagnostics.SymbolStore.ISymbolDocument> object.  Each element at a specific index of every array corresponds to a specific sequence point. The caller must supply pre-allocated arrays to hold the information to be returned. Any values in the arrays are overwritten. Use <xref:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount%2A> to retrieve the count of all sequence points and create arrays of the proper size. The sequence points are sorted by offset and are for all documents in the method. <xref:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints%2A> verifies the size of each array and places the sequence point information into each. If any array is `null`, the data for that array is not returned.\n  syntax:\n    content: public virtual void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);\n    parameters:\n    - id: offsets\n      type: System.Int32[]\n      description: An array in which to store the IL offsets from the beginning of the method for the sequence points.\n    - id: documents\n      type: System.Diagnostics.SymbolStore.ISymbolDocument[]\n      description: An array in which to store the  documents in which the sequence points are located.\n    - id: lines\n      type: System.Int32[]\n      description: An array in which to store the lines in the documents at which the sequence points are located.\n    - id: columns\n      type: System.Int32[]\n      description: An array in which to store the columns in the documents at which the sequence points are located.\n    - id: endLines\n      type: System.Int32[]\n      description: The array of lines in the documents at which the sequence points end.\n    - id: endColumns\n      type: System.Int32[]\n      description: The array of columns in the documents at which the sequence points end.\n  overload: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  id: GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: GetSourceStartEnd(ISymbolDocument[], Int32[], Int32[])\n  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[], Int32[], Int32[])\n  fullName: SymMethod.GetSourceStartEnd(ISymbolDocument[], Int32[], Int32[])\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  syntax:\n    content: public virtual bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);\n    parameters:\n    - id: docs\n      type: System.Diagnostics.SymbolStore.ISymbolDocument[]\n      description: This parameter is not used.\n    - id: lines\n      type: System.Int32[]\n      description: This parameter is not used.\n    - id: columns\n      type: System.Int32[]\n      description: This parameter is not used.\n    return:\n      type: System.Boolean\n      description: Throws a <xref href=\"System.NotSupportedException\"></xref> in all cases.\n  overload: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: In all cases.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope\n  commentId: P:System.Diagnostics.SymbolStore.SymMethod.RootScope\n  id: RootScope\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: RootScope\n  nameWithType: SymMethod.RootScope\n  fullName: SymMethod.RootScope\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the root lexical scope for the current method. This scope encloses the entire method.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope\n      description: The root lexical scope that encloses the entire method.\n  overload: System.Diagnostics.SymbolStore.SymMethod.RootScope*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal\n  commentId: M:System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal\n  id: RootScopeInternal\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: RootScopeInternal()\n  nameWithType: SymMethod.RootScopeInternal()\n  fullName: SymMethod.RootScopeInternal()\n  type: Method\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the root lexical scope for the current method. This scope encloses the entire method.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.ISymbolScope RootScopeInternal ();\n    parameters: []\n    return:\n      type: System.Diagnostics.SymbolStore.ISymbolScope\n      description: The root lexical scope that encloses the entire method.\n  overload: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount\n  commentId: P:System.Diagnostics.SymbolStore.SymMethod.SequencePointCount\n  id: SequencePointCount\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: SequencePointCount\n  nameWithType: SymMethod.SequencePointCount\n  fullName: SymMethod.SequencePointCount\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets a count of the sequence points in the method.\n  syntax:\n    content: public virtual int SequencePointCount { get; }\n    return:\n      type: System.Int32\n      description: The count of the sequence points in the method.\n  overload: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Diagnostics.SymbolStore.SymMethod.Token\n  commentId: P:System.Diagnostics.SymbolStore.SymMethod.Token\n  id: Token\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  langs:\n  - csharp\n  name: Token\n  nameWithType: SymMethod.Token\n  fullName: SymMethod.Token\n  type: Property\n  assemblies:\n  - ISymWrapper\n  namespace: System.Diagnostics.SymbolStore\n  summary: Gets the <xref href=\"System.Diagnostics.SymbolStore.SymbolToken\"></xref> containing the metadata for the current method.\n  syntax:\n    content: public virtual System.Diagnostics.SymbolStore.SymbolToken Token { get; }\n    return:\n      type: System.Diagnostics.SymbolStore.SymbolToken\n      description: The metadata token for the current method.\n  overload: System.Diagnostics.SymbolStore.SymMethod.Token*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Diagnostics.SymbolStore.SymMethodBase\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymMethodBase\n  nameWithType: SymMethodBase\n  fullName: System.Diagnostics.SymbolStore.SymMethodBase\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor(System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: SymMethod(ISymUnmanagedMethod*)\n  nameWithType: SymMethod.SymMethod(ISymUnmanagedMethod*)\n  fullName: SymMethod.SymMethod(ISymUnmanagedMethod*)\n- uid: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod\n  name: ISymUnmanagedMethod\n  nameWithType: ISymUnmanagedMethod\n  fullName: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod\n- uid: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*\n  parent: System.Diagnostics.SymbolStore.Private\n  isExternal: true\n  name: ISymUnmanagedMethod*\n  nameWithType: ISymUnmanagedMethod*\n  fullName: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod*\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod\n    name: ISymUnmanagedMethod\n    nameWithType: ISymUnmanagedMethod\n    fullName: System.Diagnostics.SymbolStore.Private.ISymUnmanagedMethod\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: Dispose()\n  nameWithType: SymMethod.Dispose()\n  fullName: SymMethod.Dispose()\n- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose(System.Boolean)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: SymMethod.Dispose(Boolean)\n  fullName: SymMethod.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: Finalize()\n  nameWithType: SymMethod.Finalize()\n  fullName: SymMethod.Finalize()\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetNamespace()\n  nameWithType: SymMethod.GetNamespace()\n  fullName: SymMethod.GetNamespace()\n- uid: System.Diagnostics.SymbolStore.ISymbolNamespace\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolNamespace\n  nameWithType: ISymbolNamespace\n  fullName: System.Diagnostics.SymbolStore.ISymbolNamespace\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetOffset(ISymbolDocument, Int32, Int32)\n  nameWithType: SymMethod.GetOffset(ISymbolDocument, Int32, Int32)\n  fullName: SymMethod.GetOffset(ISymbolDocument, Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Diagnostics.SymbolStore.ISymbolDocument\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolDocument\n  nameWithType: ISymbolDocument\n  fullName: System.Diagnostics.SymbolStore.ISymbolDocument\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetParameters()\n  nameWithType: SymMethod.GetParameters()\n  fullName: SymMethod.GetParameters()\n- uid: System.Diagnostics.SymbolStore.ISymbolVariable\n  name: ISymbolVariable\n  nameWithType: ISymbolVariable\n  fullName: System.Diagnostics.SymbolStore.ISymbolVariable\n- uid: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolVariable[]\n  nameWithType: ISymbolVariable[]\n  fullName: System.Diagnostics.SymbolStore.ISymbolVariable[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolVariable\n    name: ISymbolVariable\n    nameWithType: ISymbolVariable\n    fullName: System.Diagnostics.SymbolStore.ISymbolVariable\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetRanges(ISymbolDocument, Int32, Int32)\n  nameWithType: SymMethod.GetRanges(ISymbolDocument, Int32, Int32)\n  fullName: SymMethod.GetRanges(ISymbolDocument, Int32, Int32)\n- uid: System.Int32[]\n  parent: System\n  isExternal: false\n  name: Int32[]\n  nameWithType: Int32[]\n  fullName: System.Int32[]\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope(System.Int32)\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetScope(Int32)\n  nameWithType: SymMethod.GetScope(Int32)\n  fullName: SymMethod.GetScope(Int32)\n- uid: System.Diagnostics.SymbolStore.ISymbolScope\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolScope\n  nameWithType: ISymbolScope\n  fullName: System.Diagnostics.SymbolStore.ISymbolScope\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetSequencePoints(Int32[], ISymbolDocument[], Int32[], Int32[], Int32[], Int32[])\n  nameWithType: SymMethod.GetSequencePoints(Int32[], ISymbolDocument[], Int32[], Int32[], Int32[], Int32[])\n  fullName: SymMethod.GetSequencePoints(Int32[], ISymbolDocument[], Int32[], Int32[], Int32[], Int32[])\n- uid: System.Diagnostics.SymbolStore.ISymbolDocument[]\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolDocument[]\n  nameWithType: ISymbolDocument[]\n  fullName: System.Diagnostics.SymbolStore.ISymbolDocument[]\n  spec.csharp:\n  - uid: System.Diagnostics.SymbolStore.ISymbolDocument\n    name: ISymbolDocument\n    nameWithType: ISymbolDocument\n    fullName: System.Diagnostics.SymbolStore.ISymbolDocument\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetSourceStartEnd(ISymbolDocument[], Int32[], Int32[])\n  nameWithType: SymMethod.GetSourceStartEnd(ISymbolDocument[], Int32[], Int32[])\n  fullName: SymMethod.GetSourceStartEnd(ISymbolDocument[], Int32[], Int32[])\n- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: RootScope\n  nameWithType: SymMethod.RootScope\n  fullName: SymMethod.RootScope\n- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: RootScopeInternal()\n  nameWithType: SymMethod.RootScopeInternal()\n  fullName: SymMethod.RootScopeInternal()\n- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: SequencePointCount\n  nameWithType: SymMethod.SequencePointCount\n  fullName: SymMethod.SequencePointCount\n- uid: System.Diagnostics.SymbolStore.SymMethod.Token\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: Token\n  nameWithType: SymMethod.Token\n  fullName: SymMethod.Token\n- uid: System.Diagnostics.SymbolStore.SymbolToken\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: SymbolToken\n  nameWithType: SymbolToken\n  fullName: System.Diagnostics.SymbolStore.SymbolToken\n- uid: System.Diagnostics.SymbolStore.SymMethod.#ctor*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: SymMethod\n  nameWithType: SymMethod.SymMethod\n  fullName: SymMethod.SymMethod\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.Dispose*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: Dispose\n  nameWithType: SymMethod.Dispose\n  fullName: SymMethod.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.Finalize*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: Finalize\n  nameWithType: SymMethod.Finalize\n  fullName: SymMethod.Finalize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetNamespace*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetNamespace\n  nameWithType: SymMethod.GetNamespace\n  fullName: SymMethod.GetNamespace\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetOffset*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetOffset\n  nameWithType: SymMethod.GetOffset\n  fullName: SymMethod.GetOffset\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetParameters*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetParameters\n  nameWithType: SymMethod.GetParameters\n  fullName: SymMethod.GetParameters\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetRanges*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetRanges\n  nameWithType: SymMethod.GetRanges\n  fullName: SymMethod.GetRanges\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetScope*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetScope\n  nameWithType: SymMethod.GetScope\n  fullName: SymMethod.GetScope\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetSequencePoints*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetSequencePoints\n  nameWithType: SymMethod.GetSequencePoints\n  fullName: SymMethod.GetSequencePoints\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.GetSourceStartEnd*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: GetSourceStartEnd\n  nameWithType: SymMethod.GetSourceStartEnd\n  fullName: SymMethod.GetSourceStartEnd\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.RootScope*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: RootScope\n  nameWithType: SymMethod.RootScope\n  fullName: SymMethod.RootScope\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.RootScopeInternal*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: RootScopeInternal\n  nameWithType: SymMethod.RootScopeInternal\n  fullName: SymMethod.RootScopeInternal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.SequencePointCount*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: SequencePointCount\n  nameWithType: SymMethod.SequencePointCount\n  fullName: SymMethod.SequencePointCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Diagnostics.SymbolStore.SymMethod.Token*\n  parent: System.Diagnostics.SymbolStore.SymMethod\n  isExternal: false\n  name: Token\n  nameWithType: SymMethod.Token\n  fullName: SymMethod.Token\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.SymbolStore/SymMethod.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Diagnostics.SymbolStore.SymMethodBase.{dtor}\n  parent: System.Diagnostics.SymbolStore.SymMethodBase\n  isExternal: false\n  name: '{dtor}()'\n  nameWithType: SymMethodBase.{dtor}()\n  fullName: SymMethodBase.{dtor}()\n- uid: System.Diagnostics.SymbolStore.ISymbolMethod\n  parent: System.Diagnostics.SymbolStore\n  isExternal: false\n  name: ISymbolMethod\n  nameWithType: ISymbolMethod\n  fullName: System.Diagnostics.SymbolStore.ISymbolMethod\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}