{"nodes":[{"content":"Provides functionality for resolving a coordinate-based location to a civic address.","nodes":[{"pos":[0,84],"content":"Provides functionality for resolving a coordinate-based location to a civic address.","nodes":[{"content":"Provides functionality for resolving a coordinate-based location to a civic address.","pos":[0,84]}]}],"pos":[753,838],"yaml":true},{"content":"The <xref:System.Device.Location.CivicAddressResolver> class provides an implementation of <xref:System.Device.Location.ICivicAddressResolver> that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data.","nodes":[{"pos":[0,278],"content":"The <xref:System.Device.Location.CivicAddressResolver> class provides an implementation of <xref:System.Device.Location.ICivicAddressResolver> that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Device.Location.CivicAddressResolver&gt;</ph> class provides an implementation of <ph id=\"ph2\">&lt;xref:System.Device.Location.ICivicAddressResolver&gt;</ph> that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data.","pos":[0,278],"source":"The <xref:System.Device.Location.CivicAddressResolver> class provides an implementation of <xref:System.Device.Location.ICivicAddressResolver> that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data."}]}],"pos":[849,1128],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Device.Location.CivicAddressResolver\"></xref> class.","nodes":[{"pos":[0,105],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Device.Location.CivicAddressResolver\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Device.Location.CivicAddressResolver\"></xref> class."}],"pos":[3698,3804],"yaml":true},{"content":"Synchronously resolves a civic address from a location based on latitude and longitude. This call will block execution of the calling thread while the address is being resolved.","nodes":[{"pos":[0,177],"content":"Synchronously resolves a civic address from a location based on latitude and longitude. This call will block execution of the calling thread while the address is being resolved.","nodes":[{"content":"Synchronously resolves a civic address from a location based on latitude and longitude. This call will block execution of the calling thread while the address is being resolved.","pos":[0,177],"nodes":[{"content":"Synchronously resolves a civic address from a location based on latitude and longitude.","pos":[0,87]},{"content":"This call will block execution of the calling thread while the address is being resolved.","pos":[88,177]}]}]}],"pos":[5321,5499],"yaml":true},{"content":"The <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event is raised when the address resolve operation completes. The civic address that is resolved from the `coordinate` parameter is returned by the <xref:System.Device.Location.ResolveAddressCompletedEventArgs.Address%2A> member of the <xref:System.Device.Location.ResolveAddressCompletedEventArgs> object that is passed to the event handler.","nodes":[{"pos":[0,422],"content":"The <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event is raised when the address resolve operation completes. The civic address that is resolved from the `coordinate` parameter is returned by the <xref:System.Device.Location.ResolveAddressCompletedEventArgs.Address%2A> member of the <xref:System.Device.Location.ResolveAddressCompletedEventArgs> object that is passed to the event handler.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted&gt;</ph> event is raised when the address resolve operation completes.","pos":[0,141],"source":"The <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event is raised when the address resolve operation completes."},{"content":"The civic address that is resolved from the <ph id=\"ph1\">`coordinate`</ph> parameter is returned by the <ph id=\"ph2\">&lt;xref:System.Device.Location.ResolveAddressCompletedEventArgs.Address%2A&gt;</ph> member of the <ph id=\"ph3\">&lt;xref:System.Device.Location.ResolveAddressCompletedEventArgs&gt;</ph> object that is passed to the event handler.","pos":[142,422],"source":" The civic address that is resolved from the `coordinate` parameter is returned by the <xref:System.Device.Location.ResolveAddressCompletedEventArgs.Address%2A> member of the <xref:System.Device.Location.ResolveAddressCompletedEventArgs> object that is passed to the event handler."}]}],"pos":[5510,5933],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Device.Location.GeoCoordinate\"></xref> containing the location to resolve to a civic address.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Device.Location.GeoCoordinate\"&gt;&lt;/xref&gt;</ph> containing the location to resolve to a civic address.","source":"The <xref href=\"System.Device.Location.GeoCoordinate\"></xref> containing the location to resolve to a civic address."}],"pos":[6732,6849],"yaml":true},{"content":"The civic address that is resolved from the <code>coordinate</code> parameter. <xref href=\"System.Device.Location.CivicAddress.Unknown\"></xref> is returned if the address cannot be resolved.","nodes":[{"pos":[0,190],"content":"The civic address that is resolved from the <code>coordinate</code> parameter. <xref href=\"System.Device.Location.CivicAddress.Unknown\"></xref> is returned if the address cannot be resolved.","nodes":[{"content":"The civic address that is resolved from the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">coordinate</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[0,78],"source":"The civic address that is resolved from the <code>coordinate</code> parameter."},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Device.Location.CivicAddress.Unknown\"&gt;&lt;/xref&gt;</ph> is returned if the address cannot be resolved.","pos":[79,190],"source":"<xref href=\"System.Device.Location.CivicAddress.Unknown\"></xref> is returned if the address cannot be resolved."}]}],"pos":[6928,7119],"yaml":true},{"content":"<code>coordinate</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;coordinate&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>coordinate</code> is `null`."}],"pos":[7307,7342],"yaml":true},{"content":"<code>coordinate</code> does not contain a valid latitude and longitude.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;coordinate&lt;/code&gt;</ph> does not contain a valid latitude and longitude.","source":"<code>coordinate</code> does not contain a valid latitude and longitude."}],"pos":[7436,7509],"yaml":true},{"content":"Resolves an address asynchronously from a location that is based on latitude and longitude. The call does not block execution of the calling thread while the address is being resolved.","nodes":[{"pos":[0,184],"content":"Resolves an address asynchronously from a location that is based on latitude and longitude. The call does not block execution of the calling thread while the address is being resolved.","nodes":[{"content":"Resolves an address asynchronously from a location that is based on latitude and longitude. The call does not block execution of the calling thread while the address is being resolved.","pos":[0,184],"nodes":[{"content":"Resolves an address asynchronously from a location that is based on latitude and longitude.","pos":[0,91]},{"content":"The call does not block execution of the calling thread while the address is being resolved.","pos":[92,184]}]}]}],"pos":[8654,8839],"yaml":true},{"content":"The <xref href=\"System.Device.Location.GeoCoordinate\"></xref> containing the location to resolve to a civic address.","nodes":[{"pos":[0,116],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Device.Location.GeoCoordinate\"&gt;&lt;/xref&gt;</ph> containing the location to resolve to a civic address.","source":"The <xref href=\"System.Device.Location.GeoCoordinate\"></xref> containing the location to resolve to a civic address."}],"pos":[9631,9748],"yaml":true},{"content":"<code>coordinate</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;coordinate&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>coordinate</code> is `null`."}],"pos":[9941,9976],"yaml":true},{"content":"<code>coordinate</code> does not contain a valid latitude and longitude.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">&lt;code&gt;coordinate&lt;/code&gt;</ph> does not contain a valid latitude and longitude.","source":"<code>coordinate</code> does not contain a valid latitude and longitude."}],"pos":[10070,10143],"yaml":true},{"content":"Occurs when the address resolution that was initiated by a call to <xref href=\"System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\"></xref> completes.","nodes":[{"pos":[0,200],"content":"Occurs when the address resolution that was initiated by a call to <ph id=\"ph1\">&lt;xref href=\"System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\"&gt;&lt;/xref&gt;</ph> completes.","source":"Occurs when the address resolution that was initiated by a call to <xref href=\"System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\"></xref> completes."}],"pos":[11152,11353],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Device.Location.CivicAddressResolver\n  commentId: T:System.Device.Location.CivicAddressResolver\n  id: CivicAddressResolver\n  children:\n  - System.Device.Location.CivicAddressResolver.#ctor\n  - System.Device.Location.CivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)\n  - System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  - System.Device.Location.CivicAddressResolver.ResolveAddressCompleted\n  langs:\n  - csharp\n  name: CivicAddressResolver\n  nameWithType: CivicAddressResolver\n  fullName: System.Device.Location.CivicAddressResolver\n  type: Class\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Provides functionality for resolving a coordinate-based location to a civic address.\n  remarks: The <xref:System.Device.Location.CivicAddressResolver> class provides an implementation of <xref:System.Device.Location.ICivicAddressResolver> that resolves a coordinate-based location to a civic address if the location provider provides both coordinates and civic address data.\n  example:\n  - \"The following program shows how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddress%2A> to resolve a civic address synchronously.  \\n  \\n [!code-csharp[System.Device.Location.ResolveCivicAddressSync#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.resolvecivicaddresssync/cs/resolvecivicaddresssync.cs#1)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.resolvecivicaddresssync/vb/resolvecivicaddresssync.vb#1)]  \\n  \\n The following program shows how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddressAsync%2A> to resolve a civic address asynchronously.  \\n  \\n [!code-csharp[System.Device.Location.ResolveCivicAddressSync#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.resolvecivicaddresssync/cs/resolvecivicaddresssync.cs#1)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.resolvecivicaddresssync/vb/resolvecivicaddresssync.vb#1)]\"\n  syntax:\n    content: 'public sealed class CivicAddressResolver : System.Device.Location.ICivicAddressResolver'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Device.Location.ICivicAddressResolver\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: martinek\n- uid: System.Device.Location.CivicAddressResolver.#ctor\n  commentId: M:System.Device.Location.CivicAddressResolver.#ctor\n  id: '#ctor'\n  parent: System.Device.Location.CivicAddressResolver\n  langs:\n  - csharp\n  name: CivicAddressResolver()\n  nameWithType: CivicAddressResolver.CivicAddressResolver()\n  fullName: CivicAddressResolver.CivicAddressResolver()\n  type: Constructor\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Initializes a new instance of the <xref href=\"System.Device.Location.CivicAddressResolver\"></xref> class.\n  remarks: ''\n  example:\n  - \"The following example shows how to initialize a new instance of the <xref:System.Device.Location.CivicAddressResolver> class.  \\n  \\n```csharp  \\nCivicAddressResolver resolver = new CivicAddressResolver();  \\n  \\n```\"\n  syntax:\n    content: public CivicAddressResolver ();\n    parameters: []\n  overload: System.Device.Location.CivicAddressResolver.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: martinek\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)\n  commentId: M:System.Device.Location.CivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)\n  id: ResolveAddress(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.CivicAddressResolver\n  langs:\n  - csharp\n  name: ResolveAddress(GeoCoordinate)\n  nameWithType: CivicAddressResolver.ResolveAddress(GeoCoordinate)\n  fullName: CivicAddressResolver.ResolveAddress(GeoCoordinate)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Synchronously resolves a civic address from a location based on latitude and longitude. This call will block execution of the calling thread while the address is being resolved.\n  remarks: The <xref:System.Device.Location.ICivicAddressResolver.ResolveAddressCompleted> event is raised when the address resolve operation completes. The civic address that is resolved from the `coordinate` parameter is returned by the <xref:System.Device.Location.ResolveAddressCompletedEventArgs.Address%2A> member of the <xref:System.Device.Location.ResolveAddressCompletedEventArgs> object that is passed to the event handler.\n  example:\n  - \"The following program demonstrates how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddress%2A> to resolve a civic address synchronously.  \\n  \\n [!code-csharp[System.Device.Location.ResolveCivicAddressSync#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.resolvecivicaddresssync/cs/resolvecivicaddresssync.cs#1)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressSync#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.resolvecivicaddresssync/vb/resolvecivicaddresssync.vb#1)]\"\n  syntax:\n    content: public System.Device.Location.CivicAddress ResolveAddress (System.Device.Location.GeoCoordinate coordinate);\n    parameters:\n    - id: coordinate\n      type: System.Device.Location.GeoCoordinate\n      description: The <xref href=\"System.Device.Location.GeoCoordinate\"></xref> containing the location to resolve to a civic address.\n    return:\n      type: System.Device.Location.CivicAddress\n      description: The civic address that is resolved from the <code>coordinate</code> parameter. <xref href=\"System.Device.Location.CivicAddress.Unknown\"></xref> is returned if the address cannot be resolved.\n  overload: System.Device.Location.CivicAddressResolver.ResolveAddress*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>coordinate</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>coordinate</code> does not contain a valid latitude and longitude.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: martinek\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  commentId: M:System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  id: ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.CivicAddressResolver\n  langs:\n  - csharp\n  name: ResolveAddressAsync(GeoCoordinate)\n  nameWithType: CivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n  fullName: CivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n  type: Method\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Resolves an address asynchronously from a location that is based on latitude and longitude. The call does not block execution of the calling thread while the address is being resolved.\n  remarks: ''\n  example:\n  - \"The following program shows how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddressAsync%2A> to resolve a civic address asynchronously.  \\n  \\n [!code-csharp[System.Device.Location.ResolveCivicAddressAsync#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.resolvecivicaddressasync/cs/resolvecivicaddressasync.cs#1)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.resolvecivicaddressasync/vb/resolvecivicaddressasync.vb#1)]\"\n  syntax:\n    content: public void ResolveAddressAsync (System.Device.Location.GeoCoordinate coordinate);\n    parameters:\n    - id: coordinate\n      type: System.Device.Location.GeoCoordinate\n      description: The <xref href=\"System.Device.Location.GeoCoordinate\"></xref> containing the location to resolve to a civic address.\n  overload: System.Device.Location.CivicAddressResolver.ResolveAddressAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>coordinate</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>coordinate</code> does not contain a valid latitude and longitude.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: martinek\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddressCompleted\n  commentId: E:System.Device.Location.CivicAddressResolver.ResolveAddressCompleted\n  id: ResolveAddressCompleted\n  parent: System.Device.Location.CivicAddressResolver\n  langs:\n  - csharp\n  name: ResolveAddressCompleted\n  nameWithType: CivicAddressResolver.ResolveAddressCompleted\n  fullName: CivicAddressResolver.ResolveAddressCompleted\n  type: Event\n  assemblies:\n  - System.Device\n  namespace: System.Device.Location\n  summary: Occurs when the address resolution that was initiated by a call to <xref href=\"System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\"></xref> completes.\n  remarks: ''\n  example:\n  - \"The following program shows how to call <xref:System.Device.Location.CivicAddressResolver.ResolveAddressAsync%2A> to resolve a civic address asynchronously.  \\n  \\n [!code-csharp[System.Device.Location.ResolveCivicAddressAsync#1](~/samples/snippets/csharp/VS_Snippets_Misc/system.device.location.resolvecivicaddressasync/cs/resolvecivicaddressasync.cs#1)]\\n [!code-vb[System.Device.Location.ResolveCivicAddressAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/system.device.location.resolvecivicaddressasync/vb/resolvecivicaddressasync.vb#1)]\"\n  syntax:\n    content: public event EventHandler<System.Device.Location.ResolveAddressCompletedEventArgs> ResolveAddressCompleted;\n    return:\n      type: System.EventHandler{System.Device.Location.ResolveAddressCompletedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n  ms.technology:\n  - dotnet-standard\n  manager: martinek\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Device.Location.CivicAddressResolver.#ctor\n  parent: System.Device.Location.CivicAddressResolver\n  isExternal: false\n  name: CivicAddressResolver()\n  nameWithType: CivicAddressResolver.CivicAddressResolver()\n  fullName: CivicAddressResolver.CivicAddressResolver()\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddress(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.CivicAddressResolver\n  isExternal: false\n  name: ResolveAddress(GeoCoordinate)\n  nameWithType: CivicAddressResolver.ResolveAddress(GeoCoordinate)\n  fullName: CivicAddressResolver.ResolveAddress(GeoCoordinate)\n- uid: System.Device.Location.CivicAddress\n  parent: System.Device.Location\n  isExternal: false\n  name: CivicAddress\n  nameWithType: CivicAddress\n  fullName: System.Device.Location.CivicAddress\n- uid: System.Device.Location.GeoCoordinate\n  parent: System.Device.Location\n  isExternal: false\n  name: GeoCoordinate\n  nameWithType: GeoCoordinate\n  fullName: System.Device.Location.GeoCoordinate\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddressAsync(System.Device.Location.GeoCoordinate)\n  parent: System.Device.Location.CivicAddressResolver\n  isExternal: false\n  name: ResolveAddressAsync(GeoCoordinate)\n  nameWithType: CivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n  fullName: CivicAddressResolver.ResolveAddressAsync(GeoCoordinate)\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddressCompleted\n  parent: System.Device.Location.CivicAddressResolver\n  isExternal: false\n  name: ResolveAddressCompleted\n  nameWithType: CivicAddressResolver.ResolveAddressCompleted\n  fullName: CivicAddressResolver.ResolveAddressCompleted\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Device.Location.ResolveAddressCompletedEventArgs\n  name: ResolveAddressCompletedEventArgs\n  nameWithType: ResolveAddressCompletedEventArgs\n  fullName: System.Device.Location.ResolveAddressCompletedEventArgs\n- uid: System.EventHandler{System.Device.Location.ResolveAddressCompletedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ResolveAddressCompletedEventArgs>\n  nameWithType: EventHandler<ResolveAddressCompletedEventArgs>\n  fullName: System.EventHandler<System.Device.Location.ResolveAddressCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Device.Location.ResolveAddressCompletedEventArgs\n    name: ResolveAddressCompletedEventArgs\n    nameWithType: ResolveAddressCompletedEventArgs\n    fullName: System.Device.Location.ResolveAddressCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Device.Location.CivicAddressResolver.#ctor*\n  parent: System.Device.Location.CivicAddressResolver\n  isExternal: false\n  name: CivicAddressResolver\n  nameWithType: CivicAddressResolver.CivicAddressResolver\n  fullName: CivicAddressResolver.CivicAddressResolver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddress*\n  parent: System.Device.Location.CivicAddressResolver\n  isExternal: false\n  name: ResolveAddress\n  nameWithType: CivicAddressResolver.ResolveAddress\n  fullName: CivicAddressResolver.ResolveAddress\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n- uid: System.Device.Location.CivicAddressResolver.ResolveAddressAsync*\n  parent: System.Device.Location.CivicAddressResolver\n  isExternal: false\n  name: ResolveAddressAsync\n  nameWithType: CivicAddressResolver.ResolveAddressAsync\n  fullName: CivicAddressResolver.ResolveAddressAsync\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Device.Location/CivicAddressResolver.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Device.Location.ICivicAddressResolver\n  parent: System.Device.Location\n  isExternal: false\n  name: ICivicAddressResolver\n  nameWithType: ICivicAddressResolver\n  fullName: System.Device.Location.ICivicAddressResolver\n"}