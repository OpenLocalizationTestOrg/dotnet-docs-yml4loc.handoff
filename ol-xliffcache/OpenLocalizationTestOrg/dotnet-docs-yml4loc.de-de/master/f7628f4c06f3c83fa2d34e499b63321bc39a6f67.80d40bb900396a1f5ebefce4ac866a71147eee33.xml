{"nodes":[{"content":"Represents the access control and audit security for a directory. This class cannot be inherited.","nodes":[{"pos":[0,97],"content":"Represents the access control and audit security for a directory. This class cannot be inherited.","nodes":[{"content":"Represents the access control and audit security for a directory. This class cannot be inherited.","pos":[0,97],"nodes":[{"content":"Represents the access control and audit security for a directory.","pos":[0,65]},{"content":"This class cannot be inherited.","pos":[66,97]}]}]}],"pos":[647,745],"yaml":true},{"content":"The <xref:System.Security.AccessControl.DirectorySecurity> class specifies the access rights for a system directory and how access attempts are audited. This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.  \n  \n The <xref:System.Security.AccessControl.DirectorySecurity> class is an abstraction of the underlying Windows file security system. In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited. The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.  \n  \n The <xref:System.Security.AccessControl.DirectorySecurity> class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.  \n  \n Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.  \n  \n The following tables lists the methods you can use to access and maintain directory security.  \n  \n|Task|Methods|  \n|----------|-------------|  \n|Add rules|<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|  \n|Remove rules|<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|  \n|Retrieve the access control to a directory|<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|  \n|Persist the access control to a directory|<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|","nodes":[{"pos":[0,427],"content":"The <xref:System.Security.AccessControl.DirectorySecurity> class specifies the access rights for a system directory and how access attempts are audited. This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.","nodes":[{"content":"The <xref:System.Security.AccessControl.DirectorySecurity> class specifies the access rights for a system directory and how access attempts are audited. This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.","pos":[0,427],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> class specifies the access rights for a system directory and how access attempts are audited.","pos":[0,152],"source":"The <xref:System.Security.AccessControl.DirectorySecurity> class specifies the access rights for a system directory and how access attempts are audited."},{"content":"This class represents access and audit rights as a set of rules.","pos":[153,217]},{"content":"Each access rule is represented by a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt;</ph> object, while each audit rule is represented by a <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt;</ph> object.","pos":[218,427],"source":" Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object."}]}]},{"pos":[434,1002],"content":"The <xref:System.Security.AccessControl.DirectorySecurity> class is an abstraction of the underlying Windows file security system. In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited. The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.","nodes":[{"content":"The <xref:System.Security.AccessControl.DirectorySecurity> class is an abstraction of the underlying Windows file security system. In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited. The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.","pos":[0,568],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> class is an abstraction of the underlying Windows file security system.","pos":[0,130],"source":"The <xref:System.Security.AccessControl.DirectorySecurity> class is an abstraction of the underlying Windows file security system."},{"content":"In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited.","pos":[131,352]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.FileSystemAccessRule&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.AccessControl.FileSystemAuditRule&gt;</ph> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.","pos":[353,568],"source":" The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs."}]}]},{"pos":[1009,1178],"content":"The <xref:System.Security.AccessControl.DirectorySecurity> class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.","pos":[0,169],"source":"The <xref:System.Security.AccessControl.DirectorySecurity> class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS."}]},{"pos":[1185,1337],"content":"Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.FileSecurity&gt;</ph> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.","pos":[0,152],"source":"Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file."}]},{"pos":[1344,1437],"content":"The following tables lists the methods you can use to access and maintain directory security.","nodes":[{"content":"The following tables lists the methods you can use to access and maintain directory security.","pos":[0,93]}]},{"pos":[1444,1448],"content":"Task","nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[1449,1456],"content":"Methods","nodes":[{"content":"Methods","pos":[0,7]}]},{"pos":[1490,1499],"content":"Add rules","nodes":[{"content":"Add rules","pos":[0,9]}]},{"pos":[1500,1706],"content":"<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>","nodes":[]},{"pos":[1711,1723],"content":"Remove rules","nodes":[{"content":"Remove rules","pos":[0,12]}]},{"pos":[1724,1936],"content":"<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>","nodes":[]},{"pos":[1941,1983],"content":"Retrieve the access control to a directory","nodes":[{"content":"Retrieve the access control to a directory","pos":[0,42]}]},{"pos":[1984,2143],"content":"<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>","nodes":[]},{"pos":[2148,2189],"content":"Persist the access control to a directory","nodes":[{"content":"Persist the access control to a directory","pos":[0,41]}]},{"pos":[2190,2349],"content":"<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>","nodes":[]}],"pos":[756,3124],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class."}],"pos":[13352,13462],"yaml":true},{"content":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.","nodes":[{"pos":[0,253],"content":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.","nodes":[{"content":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.","pos":[0,253],"nodes":[{"content":"Use this constructor when you want to create an empty <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object that is not based on an existing directory.","pos":[0,159],"source":"Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory."},{"content":"You can then populate the object with access control information and apply it to a directory.","pos":[160,253]}]}]}],"pos":[13473,13727],"yaml":true,"extradata":"MT"},{"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"pos":[0,68],"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]}],"pos":[13997,14066],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class from a specified directory using the specified values of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> enumeration.","nodes":[{"pos":[0,255],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> class from a specified directory using the specified values of the <ph id=\"ph2\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;&lt;/xref&gt;</ph> enumeration.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class from a specified directory using the specified values of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> enumeration."}],"pos":[15613,15869],"yaml":true},{"content":"This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information. You can then inspect, add, or delete the access control information for the specified directory.","nodes":[{"pos":[0,299],"content":"This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information. You can then inspect, add, or delete the access control information for the specified directory.","nodes":[{"content":"This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information. You can then inspect, add, or delete the access control information for the specified directory.","pos":[0,299],"nodes":[{"content":"This constructor retrieves the access control information for the specified directory and then creates a <ph id=\"ph1\">&lt;xref:System.Security.AccessControl.DirectorySecurity&gt;</ph> object that encapsulates that information.","pos":[0,202],"source":"This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information."},{"content":"You can then inspect, add, or delete the access control information for the specified directory.","pos":[203,299]}]}]}],"pos":[15880,16180],"yaml":true,"extradata":"MT"},{"content":"The location of a directory to create a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object from.","nodes":[{"pos":[0,121],"content":"The location of a directory to create a <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.DirectorySecurity\"&gt;&lt;/xref&gt;</ph> object from.","source":"The location of a directory to create a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object from."}],"pos":[16388,16510],"yaml":true},{"content":"One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to retrieve.","nodes":[{"pos":[0,168],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlSections\"&gt;&lt;/xref&gt;</ph> values that specifies the type of access control list (ACL) information to retrieve.","source":"One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to retrieve."}],"pos":[16619,16788],"yaml":true},{"content":"The <code>name</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\"></xref>.","nodes":[{"pos":[0,194],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <ph id=\"ph2\">&lt;xref href=\"System.IO.Path.InvalidPathChars\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>name</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\"></xref>."}],"pos":[16963,17158],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[17260,17303],"yaml":true},{"content":"The specified path is invalid, (for example, it is on an unmapped drive).","nodes":[{"pos":[0,73],"content":"The specified path is invalid, (for example, it is on an unmapped drive).","nodes":[{"content":"The specified path is invalid, (for example, it is on an unmapped drive).","pos":[0,73]}]}],"pos":[17421,17495],"yaml":true},{"content":"The file specified in the <code>name</code> parameter was not found.","nodes":[{"pos":[0,68],"content":"The file specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter was not found.","source":"The file specified in the <code>name</code> parameter was not found."}],"pos":[17603,17672],"yaml":true},{"content":"An I/O error occurred while opening the directory.","nodes":[{"pos":[0,50],"content":"An I/O error occurred while opening the directory.","nodes":[{"content":"An I/O error occurred while opening the directory.","pos":[0,50]}]}],"pos":[17760,17811],"yaml":true},{"content":"The <code>name</code> parameter is in an invalid format.","nodes":[{"pos":[0,56],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is in an invalid format.","source":"The <code>name</code> parameter is in an invalid format."}],"pos":[17913,17970],"yaml":true},{"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"pos":[0,68],"content":"The current operating system is not Microsoft Windows 2000 or later.","nodes":[{"content":"The current operating system is not Microsoft Windows 2000 or later.","pos":[0,68]}]}],"pos":[18088,18157],"yaml":true},{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"pos":[0,210],"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[0,210],"nodes":[{"content":"The specified path, file name, or both exceed the system-defined maximum length.","pos":[0,80]},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[81,210]}]}]}],"pos":[18263,18474],"yaml":true},{"content":"The current system account does not have administrative privileges.","nodes":[{"pos":[0,67],"content":"The current system account does not have administrative privileges.","nodes":[{"content":"The current system account does not have administrative privileges.","pos":[0,67]}]}],"pos":[18630,18698],"yaml":true},{"content":"The directory could not be found.","nodes":[{"pos":[0,33],"content":"The directory could not be found.","nodes":[{"content":"The directory could not be found.","pos":[0,33]}]}],"pos":[18788,18822],"yaml":true},{"content":"The <code>name</code> parameter specified a directory that is read-only.  \n  \n -or-  \n  \n This operation is not supported on the current platform.  \n  \n -or-  \n  \n The caller does not have the required permission.","nodes":[{"pos":[0,72],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter specified a directory that is read-only.","source":"The <code>name</code> parameter specified a directory that is read-only."},{"pos":[79,83],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[90,146],"content":"This operation is not supported on the current platform.","nodes":[{"content":"This operation is not supported on the current platform.","pos":[0,56]}]},{"pos":[153,157],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[164,213],"content":"The caller does not have the required permission.","nodes":[{"content":"The caller does not have the required permission.","pos":[0,49]}]}],"pos":[18936,19160],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.DirectorySecurity\n  commentId: T:System.Security.AccessControl.DirectorySecurity\n  id: DirectorySecurity\n  children:\n  - System.Security.AccessControl.DirectorySecurity.#ctor\n  - System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  langs:\n  - csharp\n  name: DirectorySecurity\n  nameWithType: DirectorySecurity\n  fullName: System.Security.AccessControl.DirectorySecurity\n  type: Class\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Represents the access control and audit security for a directory. This class cannot be inherited.\n  remarks: \"The <xref:System.Security.AccessControl.DirectorySecurity> class specifies the access rights for a system directory and how access attempts are audited. This class represents access and audit rights as a set of rules. Each access rule is represented by a <xref:System.Security.AccessControl.FileSystemAccessRule> object, while each audit rule is represented by a <xref:System.Security.AccessControl.FileSystemAuditRule> object.  \\n  \\n The <xref:System.Security.AccessControl.DirectorySecurity> class is an abstraction of the underlying Windows file security system. In this system, each directory has a discretionary access control list (DACL), which controls access to the directory, and a system access control list (SACL), which specifies the access control attempts that are audited. The <xref:System.Security.AccessControl.FileSystemAccessRule> and <xref:System.Security.AccessControl.FileSystemAuditRule> classes are abstractions of the access control entries (ACEs) that comprise DACLs and SACLs.  \\n  \\n The <xref:System.Security.AccessControl.DirectorySecurity> class hides many of the details of DACLs and SACLs; you do not have to worry about ACE ordering or null DACLS.  \\n  \\n Use the <xref:System.Security.AccessControl.FileSecurity> class to retrieve, add, or change the access rules that represent the DACL and SACL of a file.  \\n  \\n The following tables lists the methods you can use to access and maintain directory security.  \\n  \\n|Task|Methods|  \\n|----------|-------------|  \\n|Add rules|<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|  \\n|Remove rules|<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|  \\n|Retrieve the access control to a directory|<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|  \\n|Persist the access control to a directory|<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|\"\n  example:\n  - \"The following code example uses the <xref:System.Security.AccessControl.DirectorySecurity> class to add and then remove an access control list (ACL) entry from a directory.  You must supply a valid user or group account to run this example.  \\n  \\n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/cpp/sample.cpp#1)]\\n [!code-csharp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/CS/sample.cs#1)]\\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.DiretoryInfo.GetAccessControl-SetAccessControl/VB/sample.vb#1)]\"\n  syntax:\n    content: 'public sealed class DirectorySecurity : System.Security.AccessControl.FileSystemSecurity'\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.ObjectSecurity\n  - System.Security.AccessControl.CommonObjectSecurity\n  - System.Security.AccessControl.NativeObjectSecurity\n  - System.Security.AccessControl.FileSystemSecurity\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)\n  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.AccessRightType\n  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType\n  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)\n  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.GroupModified\n  - System.Security.AccessControl.ObjectSecurity.IsContainer\n  - System.Security.AccessControl.ObjectSecurity.IsDS\n  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  - System.Security.AccessControl.ObjectSecurity.OwnerModified\n  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.ReadLock\n  - System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  - System.Security.AccessControl.ObjectSecurity.WriteLock\n  - System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/DirectorySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor\n  commentId: M:System.Security.AccessControl.DirectorySecurity.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.DirectorySecurity\n  langs:\n  - csharp\n  name: DirectorySecurity()\n  nameWithType: DirectorySecurity.DirectorySecurity()\n  fullName: DirectorySecurity.DirectorySecurity()\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class.\n  remarks: Use this constructor when you want to create an empty <xref:System.Security.AccessControl.DirectorySecurity> object that is not based on an existing directory. You can then populate the object with access control information and apply it to a directory.\n  syntax:\n    content: public DirectorySecurity ();\n    parameters: []\n  overload: System.Security.AccessControl.DirectorySecurity.#ctor*\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/DirectorySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  commentId: M:System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'\n  parent: System.Security.AccessControl.DirectorySecurity\n  langs:\n  - csharp\n  name: DirectorySecurity(String, AccessControlSections)\n  nameWithType: DirectorySecurity.DirectorySecurity(String, AccessControlSections)\n  fullName: DirectorySecurity.DirectorySecurity(String, AccessControlSections)\n  type: Constructor\n  assemblies:\n  - System.IO.FileSystem.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> class from a specified directory using the specified values of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> enumeration.\n  remarks: This constructor retrieves the access control information for the specified directory and then creates a <xref:System.Security.AccessControl.DirectorySecurity> object that encapsulates that information. You can then inspect, add, or delete the access control information for the specified directory.\n  syntax:\n    content: public DirectorySecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);\n    parameters:\n    - id: name\n      type: System.String\n      description: The location of a directory to create a <xref href=\"System.Security.AccessControl.DirectorySecurity\"></xref> object from.\n    - id: includeSections\n      type: System.Security.AccessControl.AccessControlSections\n      description: One of the <xref href=\"System.Security.AccessControl.AccessControlSections\"></xref> values that specifies the type of access control list (ACL) information to retrieve.\n  overload: System.Security.AccessControl.DirectorySecurity.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>name</code> parameter is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <xref href=\"System.IO.Path.InvalidPathChars\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  - type: System.IO.DirectoryNotFoundException\n    commentId: T:System.IO.DirectoryNotFoundException\n    description: The specified path is invalid, (for example, it is on an unmapped drive).\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified in the <code>name</code> parameter was not found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while opening the directory.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <code>name</code> parameter is in an invalid format.\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: The current operating system is not Microsoft Windows 2000 or later.\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.\n  - type: System.Security.AccessControl.PrivilegeNotHeldException\n    commentId: T:System.Security.AccessControl.PrivilegeNotHeldException\n    description: The current system account does not have administrative privileges.\n  - type: System.SystemException\n    commentId: T:System.SystemException\n    description: The directory could not be found.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"The <code>name</code> parameter specified a directory that is read-only.  \\n  \\n -or-  \\n  \\n This operation is not supported on the current platform.  \\n  \\n -or-  \\n  \\n The caller does not have the required permission.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/DirectorySecurity.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.AccessControl.FileSystemSecurity\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: FileSystemSecurity\n  nameWithType: FileSystemSecurity\n  fullName: System.Security.AccessControl.FileSystemSecurity\n- uid: System.PlatformNotSupportedException\n  parent: System\n  isExternal: false\n  name: PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IO.DirectoryNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: DirectoryNotFoundException\n  nameWithType: DirectoryNotFoundException\n  fullName: System.IO.DirectoryNotFoundException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.IO.PathTooLongException\n  parent: System.IO\n  isExternal: false\n  name: PathTooLongException\n  nameWithType: PathTooLongException\n  fullName: System.IO.PathTooLongException\n- uid: System.Security.AccessControl.PrivilegeNotHeldException\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PrivilegeNotHeldException\n  nameWithType: PrivilegeNotHeldException\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor\n  parent: System.Security.AccessControl.DirectorySecurity\n  isExternal: false\n  name: DirectorySecurity()\n  nameWithType: DirectorySecurity.DirectorySecurity()\n  fullName: DirectorySecurity.DirectorySecurity()\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.DirectorySecurity\n  isExternal: false\n  name: DirectorySecurity(String, AccessControlSections)\n  nameWithType: DirectorySecurity.DirectorySecurity(String, AccessControlSections)\n  fullName: DirectorySecurity.DirectorySecurity(String, AccessControlSections)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.AccessControlSections\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlSections\n  nameWithType: AccessControlSections\n  fullName: System.Security.AccessControl.AccessControlSections\n- uid: System.Security.AccessControl.DirectorySecurity.#ctor*\n  parent: System.Security.AccessControl.DirectorySecurity\n  isExternal: false\n  name: DirectorySecurity\n  nameWithType: DirectorySecurity.DirectorySecurity\n  fullName: DirectorySecurity.DirectorySecurity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/DirectorySecurity.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.AccessControl.FileSystemSecurity.AccessRightType\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: AccessRightType\n  nameWithType: FileSystemSecurity.AccessRightType\n  fullName: FileSystemSecurity.AccessRightType\n- uid: System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  nameWithType: FileSystemSecurity.AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n  fullName: FileSystemSecurity.AccessRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AccessControlType)\n- uid: System.Security.AccessControl.ObjectSecurity.AccessRulesModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AccessRulesModified\n  nameWithType: ObjectSecurity.AccessRulesModified\n  fullName: ObjectSecurity.AccessRulesModified\n- uid: System.Security.AccessControl.FileSystemSecurity.AccessRuleType\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: AccessRuleType\n  nameWithType: FileSystemSecurity.AccessRuleType\n  fullName: FileSystemSecurity.AccessRuleType\n- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAccessRulesCanonical\n  nameWithType: ObjectSecurity.AreAccessRulesCanonical\n  fullName: ObjectSecurity.AreAccessRulesCanonical\n- uid: System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAccessRulesProtected\n  nameWithType: ObjectSecurity.AreAccessRulesProtected\n  fullName: ObjectSecurity.AreAccessRulesProtected\n- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAuditRulesCanonical\n  nameWithType: ObjectSecurity.AreAuditRulesCanonical\n  fullName: ObjectSecurity.AreAuditRulesCanonical\n- uid: System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AreAuditRulesProtected\n  nameWithType: ObjectSecurity.AreAuditRulesProtected\n  fullName: ObjectSecurity.AreAuditRulesProtected\n- uid: System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  nameWithType: FileSystemSecurity.AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n  fullName: FileSystemSecurity.AuditRuleFactory(IdentityReference, Int32, Boolean, InheritanceFlags, PropagationFlags, AuditFlags)\n- uid: System.Security.AccessControl.ObjectSecurity.AuditRulesModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: AuditRulesModified\n  nameWithType: ObjectSecurity.AuditRulesModified\n  fullName: ObjectSecurity.AuditRulesModified\n- uid: System.Security.AccessControl.FileSystemSecurity.AuditRuleType\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: AuditRuleType\n  nameWithType: FileSystemSecurity.AuditRuleType\n  fullName: FileSystemSecurity.AuditRuleType\n- uid: System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetGroup(Type)\n  nameWithType: ObjectSecurity.GetGroup(Type)\n  fullName: ObjectSecurity.GetGroup(Type)\n- uid: System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetOwner(Type)\n  nameWithType: ObjectSecurity.GetOwner(Type)\n  fullName: ObjectSecurity.GetOwner(Type)\n- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetSecurityDescriptorBinaryForm()\n  nameWithType: ObjectSecurity.GetSecurityDescriptorBinaryForm()\n  fullName: ObjectSecurity.GetSecurityDescriptorBinaryForm()\n- uid: System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GetSecurityDescriptorSddlForm(AccessControlSections)\n  nameWithType: ObjectSecurity.GetSecurityDescriptorSddlForm(AccessControlSections)\n  fullName: ObjectSecurity.GetSecurityDescriptorSddlForm(AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.GroupModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: GroupModified\n  nameWithType: ObjectSecurity.GroupModified\n  fullName: ObjectSecurity.GroupModified\n- uid: System.Security.AccessControl.ObjectSecurity.IsContainer\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: IsContainer\n  nameWithType: ObjectSecurity.IsContainer\n  fullName: ObjectSecurity.IsContainer\n- uid: System.Security.AccessControl.ObjectSecurity.IsDS\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: IsDS\n  nameWithType: ObjectSecurity.IsDS\n  fullName: ObjectSecurity.IsDS\n- uid: System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: IsSddlConversionSupported()\n  nameWithType: ObjectSecurity.IsSddlConversionSupported()\n  fullName: ObjectSecurity.IsSddlConversionSupported()\n- uid: System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: ModifyAccess(AccessControlModification, AccessRule, Boolean)\n  nameWithType: CommonObjectSecurity.ModifyAccess(AccessControlModification, AccessRule, Boolean)\n  fullName: CommonObjectSecurity.ModifyAccess(AccessControlModification, AccessRule, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ModifyAccessRule(AccessControlModification, AccessRule, Boolean)\n  nameWithType: ObjectSecurity.ModifyAccessRule(AccessControlModification, AccessRule, Boolean)\n  fullName: ObjectSecurity.ModifyAccessRule(AccessControlModification, AccessRule, Boolean)\n- uid: System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: ModifyAudit(AccessControlModification, AuditRule, Boolean)\n  nameWithType: CommonObjectSecurity.ModifyAudit(AccessControlModification, AuditRule, Boolean)\n  fullName: CommonObjectSecurity.ModifyAudit(AccessControlModification, AuditRule, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ModifyAuditRule(AccessControlModification, AuditRule, Boolean)\n  nameWithType: ObjectSecurity.ModifyAuditRule(AccessControlModification, AuditRule, Boolean)\n  fullName: ObjectSecurity.ModifyAuditRule(AccessControlModification, AuditRule, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.OwnerModified\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: OwnerModified\n  nameWithType: ObjectSecurity.OwnerModified\n  fullName: ObjectSecurity.OwnerModified\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(SafeHandle, AccessControlSections)\n  nameWithType: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections)\n  fullName: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections)\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(String, AccessControlSections)\n  nameWithType: NativeObjectSecurity.Persist(String, AccessControlSections)\n  fullName: NativeObjectSecurity.Persist(String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: Persist(Boolean, String, AccessControlSections)\n  nameWithType: ObjectSecurity.Persist(Boolean, String, AccessControlSections)\n  fullName: ObjectSecurity.Persist(Boolean, String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: PurgeAccessRules(IdentityReference)\n  nameWithType: ObjectSecurity.PurgeAccessRules(IdentityReference)\n  fullName: ObjectSecurity.PurgeAccessRules(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: PurgeAuditRules(IdentityReference)\n  nameWithType: ObjectSecurity.PurgeAuditRules(IdentityReference)\n  fullName: ObjectSecurity.PurgeAuditRules(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.ReadLock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ReadLock()\n  nameWithType: ObjectSecurity.ReadLock()\n  fullName: ObjectSecurity.ReadLock()\n- uid: System.Security.AccessControl.ObjectSecurity.ReadUnlock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: ReadUnlock()\n  nameWithType: ObjectSecurity.ReadUnlock()\n  fullName: ObjectSecurity.ReadUnlock()\n- uid: System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetAccessRuleProtection(Boolean, Boolean)\n  nameWithType: ObjectSecurity.SetAccessRuleProtection(Boolean, Boolean)\n  fullName: ObjectSecurity.SetAccessRuleProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetAuditRuleProtection(Boolean, Boolean)\n  nameWithType: ObjectSecurity.SetAuditRuleProtection(Boolean, Boolean)\n  fullName: ObjectSecurity.SetAuditRuleProtection(Boolean, Boolean)\n- uid: System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetGroup(IdentityReference)\n  nameWithType: ObjectSecurity.SetGroup(IdentityReference)\n  fullName: ObjectSecurity.SetGroup(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetOwner(IdentityReference)\n  nameWithType: ObjectSecurity.SetOwner(IdentityReference)\n  fullName: ObjectSecurity.SetOwner(IdentityReference)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorBinaryForm(Byte[])\n  nameWithType: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[])\n  fullName: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[])\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n  nameWithType: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n  fullName: ObjectSecurity.SetSecurityDescriptorBinaryForm(Byte[], AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorSddlForm(String)\n  nameWithType: ObjectSecurity.SetSecurityDescriptorSddlForm(String)\n  fullName: ObjectSecurity.SetSecurityDescriptorSddlForm(String)\n- uid: System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: SetSecurityDescriptorSddlForm(String, AccessControlSections)\n  nameWithType: ObjectSecurity.SetSecurityDescriptorSddlForm(String, AccessControlSections)\n  fullName: ObjectSecurity.SetSecurityDescriptorSddlForm(String, AccessControlSections)\n- uid: System.Security.AccessControl.ObjectSecurity.WriteLock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: WriteLock()\n  nameWithType: ObjectSecurity.WriteLock()\n  fullName: ObjectSecurity.WriteLock()\n- uid: System.Security.AccessControl.ObjectSecurity.WriteUnlock\n  parent: System.Security.AccessControl.ObjectSecurity\n  isExternal: false\n  name: WriteUnlock()\n  nameWithType: ObjectSecurity.WriteUnlock()\n  fullName: ObjectSecurity.WriteUnlock()\n- uid: System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: AddAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.AddAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.AddAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: AddAuditRule(AuditRule)\n  nameWithType: CommonObjectSecurity.AddAuditRule(AuditRule)\n  fullName: CommonObjectSecurity.AddAuditRule(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: GetAccessRules(Boolean, Boolean, Type)\n  nameWithType: CommonObjectSecurity.GetAccessRules(Boolean, Boolean, Type)\n  fullName: CommonObjectSecurity.GetAccessRules(Boolean, Boolean, Type)\n- uid: System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: GetAuditRules(Boolean, Boolean, Type)\n  nameWithType: CommonObjectSecurity.GetAuditRules(Boolean, Boolean, Type)\n  fullName: CommonObjectSecurity.GetAuditRules(Boolean, Boolean, Type)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.RemoveAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.RemoveAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAccessRuleAll(AccessRule)\n  nameWithType: CommonObjectSecurity.RemoveAccessRuleAll(AccessRule)\n  fullName: CommonObjectSecurity.RemoveAccessRuleAll(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAccessRuleSpecific(AccessRule)\n  nameWithType: CommonObjectSecurity.RemoveAccessRuleSpecific(AccessRule)\n  fullName: CommonObjectSecurity.RemoveAccessRuleSpecific(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAuditRule(AuditRule)\n  nameWithType: CommonObjectSecurity.RemoveAuditRule(AuditRule)\n  fullName: CommonObjectSecurity.RemoveAuditRule(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAuditRuleAll(AuditRule)\n  nameWithType: CommonObjectSecurity.RemoveAuditRuleAll(AuditRule)\n  fullName: CommonObjectSecurity.RemoveAuditRuleAll(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: RemoveAuditRuleSpecific(AuditRule)\n  nameWithType: CommonObjectSecurity.RemoveAuditRuleSpecific(AuditRule)\n  fullName: CommonObjectSecurity.RemoveAuditRuleSpecific(AuditRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: ResetAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.ResetAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.ResetAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: SetAccessRule(AccessRule)\n  nameWithType: CommonObjectSecurity.SetAccessRule(AccessRule)\n  fullName: CommonObjectSecurity.SetAccessRule(AccessRule)\n- uid: System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)\n  parent: System.Security.AccessControl.CommonObjectSecurity\n  isExternal: false\n  name: SetAuditRule(AuditRule)\n  nameWithType: CommonObjectSecurity.SetAuditRule(AuditRule)\n  fullName: CommonObjectSecurity.SetAuditRule(AuditRule)\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(SafeHandle, AccessControlSections, Object)\n  nameWithType: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections, Object)\n  fullName: NativeObjectSecurity.Persist(SafeHandle, AccessControlSections, Object)\n- uid: System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)\n  parent: System.Security.AccessControl.NativeObjectSecurity\n  isExternal: false\n  name: Persist(String, AccessControlSections, Object)\n  nameWithType: NativeObjectSecurity.Persist(String, AccessControlSections, Object)\n  fullName: NativeObjectSecurity.Persist(String, AccessControlSections, Object)\n- uid: System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: AddAccessRule(FileSystemAccessRule)\n  nameWithType: FileSystemSecurity.AddAccessRule(FileSystemAccessRule)\n  fullName: FileSystemSecurity.AddAccessRule(FileSystemAccessRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: AddAuditRule(FileSystemAuditRule)\n  nameWithType: FileSystemSecurity.AddAuditRule(FileSystemAuditRule)\n  fullName: FileSystemSecurity.AddAuditRule(FileSystemAuditRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: RemoveAccessRule(FileSystemAccessRule)\n  nameWithType: FileSystemSecurity.RemoveAccessRule(FileSystemAccessRule)\n  fullName: FileSystemSecurity.RemoveAccessRule(FileSystemAccessRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: RemoveAccessRuleAll(FileSystemAccessRule)\n  nameWithType: FileSystemSecurity.RemoveAccessRuleAll(FileSystemAccessRule)\n  fullName: FileSystemSecurity.RemoveAccessRuleAll(FileSystemAccessRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: RemoveAccessRuleSpecific(FileSystemAccessRule)\n  nameWithType: FileSystemSecurity.RemoveAccessRuleSpecific(FileSystemAccessRule)\n  fullName: FileSystemSecurity.RemoveAccessRuleSpecific(FileSystemAccessRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: RemoveAuditRule(FileSystemAuditRule)\n  nameWithType: FileSystemSecurity.RemoveAuditRule(FileSystemAuditRule)\n  fullName: FileSystemSecurity.RemoveAuditRule(FileSystemAuditRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: RemoveAuditRuleAll(FileSystemAuditRule)\n  nameWithType: FileSystemSecurity.RemoveAuditRuleAll(FileSystemAuditRule)\n  fullName: FileSystemSecurity.RemoveAuditRuleAll(FileSystemAuditRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: RemoveAuditRuleSpecific(FileSystemAuditRule)\n  nameWithType: FileSystemSecurity.RemoveAuditRuleSpecific(FileSystemAuditRule)\n  fullName: FileSystemSecurity.RemoveAuditRuleSpecific(FileSystemAuditRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: ResetAccessRule(FileSystemAccessRule)\n  nameWithType: FileSystemSecurity.ResetAccessRule(FileSystemAccessRule)\n  fullName: FileSystemSecurity.ResetAccessRule(FileSystemAccessRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: SetAccessRule(FileSystemAccessRule)\n  nameWithType: FileSystemSecurity.SetAccessRule(FileSystemAccessRule)\n  fullName: FileSystemSecurity.SetAccessRule(FileSystemAccessRule)\n- uid: System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)\n  parent: System.Security.AccessControl.FileSystemSecurity\n  isExternal: false\n  name: SetAuditRule(FileSystemAuditRule)\n  nameWithType: FileSystemSecurity.SetAuditRule(FileSystemAuditRule)\n  fullName: FileSystemSecurity.SetAuditRule(FileSystemAuditRule)\n"}