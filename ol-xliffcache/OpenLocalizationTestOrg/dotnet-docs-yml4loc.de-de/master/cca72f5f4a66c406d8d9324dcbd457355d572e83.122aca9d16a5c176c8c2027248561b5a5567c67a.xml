{"nodes":[{"content":"The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.","nodes":[{"pos":[0,145],"content":"The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.","nodes":[{"content":"The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.","pos":[0,145],"nodes":[{"content":"The exception that is thrown when the execution stack overflows because it contains too many nested method calls.","pos":[0,113]},{"content":"This class cannot be inherited.","pos":[114,145]}]}]}],"pos":[565,711],"yaml":true},{"content":"<xref:System.StackOverflowException> is thrown for execution stack overflow errors, typically in case of a very deep or unbounded recursion.  \n  \n <xref:System.StackOverflowException> uses the HRESULT COR_E_STACKOVERFLOW, which has the value 0x800703E9. The <xref:System.Reflection.Emit.OpCodes.Localloc> intermediate language (IL) instruction throws <xref:System.StackOverflowException>. For a list of initial property values for a <xref:System.StackOverflowException> object, see the <xref:System.StackOverflowException.%23ctor%2A> constructors.  \n  \n## Version Considerations  \n In the .NET Framework 1.0 and 1.1, you could catch a <xref:System.StackOverflowException> object (for example, to recover from unbounded recursion). Starting with the .NET Framework 2.0, you can’t catch a <xref:System.StackOverflowException> object with a `try`/`catch` block, and the corresponding process is terminated by default. Consequently, you should write your code to detect and prevent a stack overflow. For example, if your app depends on recursion, use a counter or a state condition to terminate the recursive loop. The following example uses a counter to ensure that the number of recursive calls to the `Execute` method do not exceed a maximum defined by the MAX_RECURSIVE_CALLS constant.  \n  \n [!code-csharp[System.StackOverflowException.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.stackoverflowexception.class/cs/example1a.cs#1)]\n [!code-vb[System.StackOverflowException.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.stackoverflowexception.class/vb/example1a.vb#1)]  \n  \n> [!NOTE]\n>  Applying the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to a method that throws a <xref:System.StackOverflowException> has no effect. You still cannot handle the exception from user code.  \n  \n If your app hosts the common language runtime (CLR), it can specify that the CLR should unload the application domain where the stack overflow exception occurs and let the corresponding process continue. For more information, see [ICLRPolicyManager Interface](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-interface.md).","nodes":[{"pos":[0,140],"content":"<xref:System.StackOverflowException> is thrown for execution stack overflow errors, typically in case of a very deep or unbounded recursion.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> is thrown for execution stack overflow errors, typically in case of a very deep or unbounded recursion.","pos":[0,140],"source":"<xref:System.StackOverflowException> is thrown for execution stack overflow errors, typically in case of a very deep or unbounded recursion."}]},{"pos":[147,547],"content":"<xref:System.StackOverflowException> uses the HRESULT COR_E_STACKOVERFLOW, which has the value 0x800703E9. The <xref:System.Reflection.Emit.OpCodes.Localloc> intermediate language (IL) instruction throws <xref:System.StackOverflowException>. For a list of initial property values for a <xref:System.StackOverflowException> object, see the <xref:System.StackOverflowException.%23ctor%2A> constructors.","nodes":[{"content":"<xref:System.StackOverflowException> uses the HRESULT COR_E_STACKOVERFLOW, which has the value 0x800703E9. The <xref:System.Reflection.Emit.OpCodes.Localloc> intermediate language (IL) instruction throws <xref:System.StackOverflowException>. For a list of initial property values for a <xref:System.StackOverflowException> object, see the <xref:System.StackOverflowException.%23ctor%2A> constructors.","pos":[0,400],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> uses the HRESULT COR_E_STACKOVERFLOW, which has the value 0x800703E9.","pos":[0,106],"source":"<xref:System.StackOverflowException> uses the HRESULT COR_E_STACKOVERFLOW, which has the value 0x800703E9."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.OpCodes.Localloc&gt;</ph> intermediate language (IL) instruction throws <ph id=\"ph2\">&lt;xref:System.StackOverflowException&gt;</ph>.","pos":[107,241],"source":" The <xref:System.Reflection.Emit.OpCodes.Localloc> intermediate language (IL) instruction throws <xref:System.StackOverflowException>."},{"content":"For a list of initial property values for a <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> object, see the <ph id=\"ph2\">&lt;xref:System.StackOverflowException.%23ctor%2A&gt;</ph> constructors.","pos":[242,400],"source":" For a list of initial property values for a <xref:System.StackOverflowException> object, see the <xref:System.StackOverflowException.%23ctor%2A> constructors."}]}]},{"pos":[556,578],"content":"Version Considerations","linkify":"Version Considerations","nodes":[{"content":"Version Considerations","pos":[0,22]}]},{"pos":[582,1285],"content":"In the .NET Framework 1.0 and 1.1, you could catch a <xref:System.StackOverflowException> object (for example, to recover from unbounded recursion). Starting with the .NET Framework 2.0, you can’t catch a <xref:System.StackOverflowException> object with a `try`/`catch` block, and the corresponding process is terminated by default. Consequently, you should write your code to detect and prevent a stack overflow. For example, if your app depends on recursion, use a counter or a state condition to terminate the recursive loop. The following example uses a counter to ensure that the number of recursive calls to the `Execute` method do not exceed a maximum defined by the MAX_RECURSIVE_CALLS constant.","nodes":[{"content":"In the .NET Framework 1.0 and 1.1, you could catch a <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> object (for example, to recover from unbounded recursion).","pos":[0,148],"source":"In the .NET Framework 1.0 and 1.1, you could catch a <xref:System.StackOverflowException> object (for example, to recover from unbounded recursion)."},{"content":"Starting with the .NET Framework 2.0, you can’t catch a <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph> object with a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block, and the corresponding process is terminated by default.","pos":[149,332],"source":" Starting with the .NET Framework 2.0, you can’t catch a <xref:System.StackOverflowException> object with a `try`/`catch` block, and the corresponding process is terminated by default."},{"content":"Consequently, you should write your code to detect and prevent a stack overflow.","pos":[333,413]},{"content":"For example, if your app depends on recursion, use a counter or a state condition to terminate the recursive loop.","pos":[414,528]},{"content":"The following example uses a counter to ensure that the number of recursive calls to the <ph id=\"ph1\">`Execute`</ph> method do not exceed a maximum defined by the MAX_RECURSIVE_CALLS constant.","pos":[529,703],"source":" The following example uses a counter to ensure that the number of recursive calls to the `Execute` method do not exceed a maximum defined by the MAX_RECURSIVE_CALLS constant."}]},{"pos":[1292,1609],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.StackOverflowException.Class#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.stackoverflowexception.class/cs/example1a.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.StackOverflowException.Class#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.stackoverflowexception.class/vb/example1a.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.StackOverflowException.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.stackoverflowexception.class/cs/example1a.cs#1)]\n [!code-vb[System.StackOverflowException.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.stackoverflowexception.class/vb/example1a.vb#1)]"},{"pos":[1617,1869],"content":"[!NOTE]\n Applying the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to a method that throws a <xref:System.StackOverflowException> has no effect. You still cannot handle the exception from user code.","leadings":["","> "],"nodes":[{"content":" Applying the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to a method that throws a <xref:System.StackOverflowException> has no effect. You still cannot handle the exception from user code.","pos":[8,250],"nodes":[{"content":"Applying the <ph id=\"ph1\">&lt;xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute&gt;</ph> attribute to a method that throws a <ph id=\"ph2\">&lt;xref:System.StackOverflowException&gt;</ph> has no effect.","pos":[1,188],"source":" Applying the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to a method that throws a <xref:System.StackOverflowException> has no effect."},{"content":"You still cannot handle the exception from user code.","pos":[189,242]}]}]},{"pos":[1876,2207],"content":"If your app hosts the common language runtime (CLR), it can specify that the CLR should unload the application domain where the stack overflow exception occurs and let the corresponding process continue. For more information, see [ICLRPolicyManager Interface](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-interface.md).","nodes":[{"content":"If your app hosts the common language runtime (CLR), it can specify that the CLR should unload the application domain where the stack overflow exception occurs and let the corresponding process continue.","pos":[0,203]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>ICLRPolicyManager Interface<ept id=\"p1\">](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-interface.md)</ept>.","pos":[204,331],"source":" For more information, see [ICLRPolicyManager Interface](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-interface.md)."}]}],"pos":[722,2945],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class, setting the <xref href=\"System.Exception.Message\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation caused a stack overflow.\" This message takes into account the current system culture.","nodes":[{"pos":[0,352],"content":"Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class, setting the <xref href=\"System.Exception.Message\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation caused a stack overflow.\" This message takes into account the current system culture.","nodes":[{"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.StackOverflowException\"&gt;&lt;/xref&gt;</ph> class, setting the <ph id=\"ph2\">&lt;xref href=\"System.Exception.Message\"&gt;&lt;/xref&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation caused a stack overflow.\"","pos":[0,292],"source":"Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class, setting the <xref href=\"System.Exception.Message\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation caused a stack overflow.\""},{"content":"This message takes into account the current system culture.","pos":[293,352]}]}],"pos":[5183,5536],"yaml":true},{"content":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|`null`.|  \n|<xref:System.Exception.Message%2A>|The localized error message string.|","nodes":[{"pos":[0,110],"content":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph>.","pos":[0,110],"source":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>."}]},{"pos":[117,125],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[126,131],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[167,208],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[209,216],"content":"<ph id=\"ph1\">`null`</ph>.","source":"`null`."},{"pos":[221,255],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[256,291],"content":"The localized error message string.","nodes":[{"content":"The localized error message string.","pos":[0,35]}]}],"pos":[5547,5847],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class with a specified error message.","nodes":[{"pos":[0,122],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.StackOverflowException\"&gt;&lt;/xref&gt;</ph> class with a specified error message.","source":"Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class with a specified error message."}],"pos":[7216,7339],"yaml":true},{"content":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,110],"content":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph>.","pos":[0,110],"source":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>."}]},{"pos":[117,125],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[126,131],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[167,208],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[209,254],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[259,293],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[294,319],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[7350,7678],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.","nodes":[{"pos":[0,246],"content":"A <xref href=\"System.String\"></xref> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that describes the error.","pos":[0,62],"source":"A <xref href=\"System.String\"></xref> that describes the error."},{"content":"The content of message is intended to be understood by humans.","pos":[63,125]},{"content":"The caller of this constructor is required to ensure that this string has been localized for the current system culture.","pos":[126,246]}]}],"pos":[7828,8075],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.","nodes":[{"pos":[0,197],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.StackOverflowException\"&gt;&lt;/xref&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception."}],"pos":[9452,9650],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,462],"content":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,179],"source":"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) if the <ph id=\"ph3\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property does not supply the inner exception value to the constructor.","pos":[180,462],"source":" The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor."}]},{"pos":[469,579],"content":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.StackOverflowException&gt;</ph>.","pos":[0,110],"source":"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>."}]},{"pos":[586,594],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[595,600],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[636,677],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[678,708],"content":"The inner exception reference.","nodes":[{"content":"The inner exception reference.","pos":[0,30]}]},{"pos":[713,747],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[748,773],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[9661,10445],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception.","nodes":[{"pos":[0,61],"content":"The error message that explains the reason for the exception.","nodes":[{"content":"The error message that explains the reason for the exception.","pos":[0,61]}]}],"pos":[10621,10683],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,240],"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">innerException</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic), the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,240],"source":" If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[10756,10997],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.StackOverflowException\n  commentId: T:System.StackOverflowException\n  id: StackOverflowException\n  children:\n  - System.StackOverflowException.#ctor\n  - System.StackOverflowException.#ctor(System.String)\n  - System.StackOverflowException.#ctor(System.String,System.Exception)\n  langs:\n  - csharp\n  name: StackOverflowException\n  nameWithType: StackOverflowException\n  fullName: System.StackOverflowException\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: The exception that is thrown when the execution stack overflows because it contains too many nested method calls. This class cannot be inherited.\n  remarks: \"<xref:System.StackOverflowException> is thrown for execution stack overflow errors, typically in case of a very deep or unbounded recursion.  \\n  \\n <xref:System.StackOverflowException> uses the HRESULT COR_E_STACKOVERFLOW, which has the value 0x800703E9. The <xref:System.Reflection.Emit.OpCodes.Localloc> intermediate language (IL) instruction throws <xref:System.StackOverflowException>. For a list of initial property values for a <xref:System.StackOverflowException> object, see the <xref:System.StackOverflowException.%23ctor%2A> constructors.  \\n  \\n## Version Considerations  \\n In the .NET Framework 1.0 and 1.1, you could catch a <xref:System.StackOverflowException> object (for example, to recover from unbounded recursion). Starting with the .NET Framework 2.0, you can’t catch a <xref:System.StackOverflowException> object with a `try`/`catch` block, and the corresponding process is terminated by default. Consequently, you should write your code to detect and prevent a stack overflow. For example, if your app depends on recursion, use a counter or a state condition to terminate the recursive loop. The following example uses a counter to ensure that the number of recursive calls to the `Execute` method do not exceed a maximum defined by the MAX_RECURSIVE_CALLS constant.  \\n  \\n [!code-csharp[System.StackOverflowException.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.stackoverflowexception.class/cs/example1a.cs#1)]\\n [!code-vb[System.StackOverflowException.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.stackoverflowexception.class/vb/example1a.vb#1)]  \\n  \\n> [!NOTE]\\n>  Applying the <xref:System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptionsAttribute> attribute to a method that throws a <xref:System.StackOverflowException> has no effect. You still cannot handle the exception from user code.  \\n  \\n If your app hosts the common language runtime (CLR), it can specify that the CLR should unload the application domain where the stack overflow exception occurs and let the corresponding process continue. For more information, see [ICLRPolicyManager Interface](~/docs/framework/unmanaged-api/hosting/iclrpolicymanager-interface.md).\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class StackOverflowException : SystemException\n  inheritance:\n  - System.Object\n  - System.Exception\n  - System.SystemException\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StackOverflowException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StackOverflowException.#ctor\n  commentId: M:System.StackOverflowException.#ctor\n  id: '#ctor'\n  parent: System.StackOverflowException\n  langs:\n  - csharp\n  name: StackOverflowException()\n  nameWithType: StackOverflowException.StackOverflowException()\n  fullName: StackOverflowException.StackOverflowException()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class, setting the <xref href=\"System.Exception.Message\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"The requested operation caused a stack overflow.\" This message takes into account the current system culture.\n  remarks: \"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|`null`.|  \\n|<xref:System.Exception.Message%2A>|The localized error message string.|\"\n  syntax:\n    content: public StackOverflowException ();\n    parameters: []\n  overload: System.StackOverflowException.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StackOverflowException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StackOverflowException.#ctor(System.String)\n  commentId: M:System.StackOverflowException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.StackOverflowException\n  langs:\n  - csharp\n  name: StackOverflowException(String)\n  nameWithType: StackOverflowException.StackOverflowException(String)\n  fullName: StackOverflowException.StackOverflowException(String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class with a specified error message.\n  remarks: \"The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  syntax:\n    content: public StackOverflowException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.\n  overload: System.StackOverflowException.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StackOverflowException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StackOverflowException.#ctor(System.String,System.Exception)\n  commentId: M:System.StackOverflowException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.StackOverflowException\n  langs:\n  - csharp\n  name: StackOverflowException(String, Exception)\n  nameWithType: StackOverflowException.StackOverflowException(String, Exception)\n  fullName: StackOverflowException.StackOverflowException(String, Exception)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.StackOverflowException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.\n  remarks: \"An exception that is thrown as a direct result of a previous exception can include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The <xref:System.Exception.InnerException%2A> property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the <xref:System.Exception.InnerException%2A> property does not supply the inner exception value to the constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.StackOverflowException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  syntax:\n    content: public StackOverflowException (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for the exception.\n    - id: innerException\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.StackOverflowException.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StackOverflowException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.SystemException\n  parent: System\n  isExternal: false\n  name: SystemException\n  nameWithType: SystemException\n  fullName: System.SystemException\n- uid: System.StackOverflowException.#ctor\n  parent: System.StackOverflowException\n  isExternal: false\n  name: StackOverflowException()\n  nameWithType: StackOverflowException.StackOverflowException()\n  fullName: StackOverflowException.StackOverflowException()\n- uid: System.StackOverflowException.#ctor(System.String)\n  parent: System.StackOverflowException\n  isExternal: false\n  name: StackOverflowException(String)\n  nameWithType: StackOverflowException.StackOverflowException(String)\n  fullName: StackOverflowException.StackOverflowException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.StackOverflowException.#ctor(System.String,System.Exception)\n  parent: System.StackOverflowException\n  isExternal: false\n  name: StackOverflowException(String, Exception)\n  nameWithType: StackOverflowException.StackOverflowException(String, Exception)\n  fullName: StackOverflowException.StackOverflowException(String, Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.StackOverflowException.#ctor*\n  parent: System.StackOverflowException\n  isExternal: false\n  name: StackOverflowException\n  nameWithType: StackOverflowException.StackOverflowException\n  fullName: StackOverflowException.StackOverflowException\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StackOverflowException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}