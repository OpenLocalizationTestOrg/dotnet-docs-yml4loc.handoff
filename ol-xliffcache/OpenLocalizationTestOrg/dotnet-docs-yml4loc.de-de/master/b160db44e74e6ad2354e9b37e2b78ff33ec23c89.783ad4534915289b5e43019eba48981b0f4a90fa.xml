{"nodes":[{"content":"Describes and represents an enumeration type.","nodes":[{"pos":[0,45],"content":"Describes and represents an enumeration type.","nodes":[{"content":"Describes and represents an enumeration type.","pos":[0,45]}]}],"pos":[6480,6526],"yaml":true},{"content":"> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.","nodes":[{"pos":[2,426],"content":"[!NOTE]\n In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.","pos":[8,422],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> because <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements are of type <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph> instead of the enumeration type.","pos":[1,280],"source":" In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type."},{"content":"In the .NET Framework version 2.0, <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements have the correct type.","pos":[281,414],"source":" In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type."}]}]}],"pos":[6537,6976],"yaml":true,"extradata":"MT"},{"content":"Retrieves the dynamic assembly that contains this enum definition.","nodes":[{"pos":[0,66],"content":"Retrieves the dynamic assembly that contains this enum definition.","nodes":[{"content":"Retrieves the dynamic assembly that contains this enum definition.","pos":[0,66]}]}],"pos":[18585,18652],"yaml":true},{"content":"Read-only. The dynamic assembly that contains this enum definition.","nodes":[{"pos":[0,67],"content":"Read-only. The dynamic assembly that contains this enum definition.","nodes":[{"content":"Read-only. The dynamic assembly that contains this enum definition.","pos":[0,67],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The dynamic assembly that contains this enum definition.","pos":[11,67]}]}]}],"pos":[19415,19483],"yaml":true},{"content":"Returns the full path of this enum qualified by the display name of the parent assembly.","nodes":[{"pos":[0,88],"content":"Returns the full path of this enum qualified by the display name of the parent assembly.","nodes":[{"content":"Returns the full path of this enum qualified by the display name of the parent assembly.","pos":[0,88]}]}],"pos":[20785,20874],"yaml":true},{"content":"The format of the returned string is:  \n  \n \\<FullTypeName>, \\<AssemblyDisplayName>  \n  \n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \n  \n## Version Information  \n In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.","nodes":[{"pos":[0,37],"content":"The format of the returned string is:","nodes":[{"content":"The format of the returned string is:","pos":[0,37]}]},{"pos":[44,83],"content":"\\<FullTypeName>, \\<AssemblyDisplayName>","nodes":[{"content":"<ph id=\"ph1\">\\&lt;</ph>FullTypeName&gt;, <ph id=\"ph2\">\\&lt;</ph>AssemblyDisplayName&gt;","pos":[0,39],"source":"\\<FullTypeName>, \\<AssemblyDisplayName>"}]},{"pos":[90,199],"content":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.","nodes":[{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a description of the format of the display name of an assembly.","pos":[0,109],"source":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly."}]},{"pos":[208,227],"content":"Version Information","linkify":"Version Information","nodes":[{"content":"Version Information","pos":[0,19]}]},{"pos":[231,354],"content":"In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.","nodes":[{"content":"In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.","pos":[0,123]}]}],"pos":[20885,21251],"yaml":true,"extradata":"MT"},{"content":"Read-only. The full path of this enum qualified by the display name of the parent assembly.","nodes":[{"pos":[0,91],"content":"Read-only. The full path of this enum qualified by the display name of the parent assembly.","nodes":[{"content":"Read-only. The full path of this enum qualified by the display name of the parent assembly.","pos":[0,91],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The full path of this enum qualified by the display name of the parent assembly.","pos":[11,91]}]}]}],"pos":[22008,22100],"yaml":true},{"content":"Returns the parent <xref href=\"System.Type\"></xref> of this type which is always <xref href=\"System.Enum\"></xref>.","nodes":[{"pos":[0,114],"content":"Returns the parent <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of this type which is always <ph id=\"ph2\">&lt;xref href=\"System.Enum\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the parent <xref href=\"System.Type\"></xref> of this type which is always <xref href=\"System.Enum\"></xref>."}],"pos":[24159,24274],"yaml":true},{"content":"Read-only. The parent <xref href=\"System.Type\"></xref> of this type.","nodes":[{"pos":[0,68],"content":"Read-only. The parent <xref href=\"System.Type\"></xref> of this type.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The parent <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of this type.","pos":[11,68],"source":" The parent <xref href=\"System.Type\"></xref> of this type."}]}],"pos":[24391,24460],"yaml":true},{"content":"Creates a <xref href=\"System.Type\"></xref> object for this enum.","nodes":[{"pos":[0,64],"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object for this enum.","source":"Creates a <xref href=\"System.Type\"></xref> object for this enum."}],"pos":[26569,26634],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object for this enum.","nodes":[{"pos":[0,56],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object for this enum.","source":"A <xref href=\"System.Type\"></xref> object for this enum."}],"pos":[26758,26815],"yaml":true},{"content":"This type has been previously created.  \n  \n -or-  \n  \n The enclosing type has not been created.","nodes":[{"pos":[0,38],"content":"This type has been previously created.","nodes":[{"content":"This type has been previously created.","pos":[0,38]}]},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,96],"content":"The enclosing type has not been created.","nodes":[{"content":"The enclosing type has not been created.","pos":[0,40]}]}],"pos":[26998,27101],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.TypeInfo\"></xref> object that represents this enumeration.","nodes":[{"pos":[0,95],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.TypeInfo\"&gt;&lt;/xref&gt;</ph> object that represents this enumeration.","source":"Gets a <xref href=\"System.Reflection.TypeInfo\"></xref> object that represents this enumeration."}],"pos":[28155,28251],"yaml":true},{"content":"An object that represents this enumeration.","nodes":[{"pos":[0,43],"content":"An object that represents this enumeration.","nodes":[{"content":"An object that represents this enumeration.","pos":[0,43]}]}],"pos":[28416,28460],"yaml":true},{"content":"Returns the type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.","nodes":[{"pos":[0,92],"content":"Returns the type that declared this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>."}],"pos":[30574,30667],"yaml":true},{"content":"Read-only. The type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.","nodes":[{"pos":[0,95],"content":"Read-only. The type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The type that declared this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph>.","pos":[11,95],"source":" The type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>."}]}],"pos":[30789,30885],"yaml":true},{"content":"Defines the named static field in an enumeration type with the specified constant value.","nodes":[{"pos":[0,88],"content":"Defines the named static field in an enumeration type with the specified constant value.","nodes":[{"content":"Defines the named static field in an enumeration type with the specified constant value.","pos":[0,88]}]}],"pos":[32237,32326],"yaml":true},{"content":"The defined field will have the field attributes <xref:System.Reflection.FieldAttributes.Public>, <xref:System.Reflection.FieldAttributes.Static>, and <xref:System.Reflection.FieldAttributes.Literal> set.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.","nodes":[{"pos":[0,204],"content":"The defined field will have the field attributes <xref:System.Reflection.FieldAttributes.Public>, <xref:System.Reflection.FieldAttributes.Static>, and <xref:System.Reflection.FieldAttributes.Literal> set.","nodes":[{"content":"The defined field will have the field attributes <ph id=\"ph1\">&lt;xref:System.Reflection.FieldAttributes.Public&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.FieldAttributes.Static&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.FieldAttributes.Literal&gt;</ph> set.","pos":[0,204],"source":"The defined field will have the field attributes <xref:System.Reflection.FieldAttributes.Public>, <xref:System.Reflection.FieldAttributes.Static>, and <xref:System.Reflection.FieldAttributes.Literal> set."}]},{"pos":[212,636],"content":"[!NOTE]\n In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.","leadings":["","> "],"nodes":[{"content":" In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.","pos":[8,422],"nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> because <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements are of type <ph id=\"ph3\">&lt;xref:System.Int32&gt;</ph> instead of the enumeration type.","pos":[1,280],"source":" In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type."},{"content":"In the .NET Framework version 2.0, <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph> emits enumerations whose elements have the correct type.","pos":[281,414],"source":" In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type."}]}]}],"pos":[32337,32979],"yaml":true,"extradata":"MT"},{"content":"The name of the static field.","nodes":[{"pos":[0,29],"content":"The name of the static field.","nodes":[{"content":"The name of the static field.","pos":[0,29]}]}],"pos":[34303,34333],"yaml":true},{"content":"The constant value of the literal.","nodes":[{"pos":[0,34],"content":"The constant value of the literal.","nodes":[{"content":"The constant value of the literal.","pos":[0,34]}]}],"pos":[34401,34436],"yaml":true},{"content":"The defined field.","nodes":[{"pos":[0,18],"content":"The defined field.","nodes":[{"content":"The defined field.","pos":[0,18]}]}],"pos":[34515,34534],"yaml":true},{"content":"Returns the full path of this enum.","nodes":[{"pos":[0,35],"content":"Returns the full path of this enum.","nodes":[{"content":"Returns the full path of this enum.","pos":[0,35]}]}],"pos":[35763,35799],"yaml":true},{"content":"The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.","nodes":[{"pos":[0,115],"content":"The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.","nodes":[{"content":"The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.","pos":[0,115]}]}],"pos":[35810,35926],"yaml":true,"extradata":"MT"},{"content":"Read-only. The full path of this enum.","nodes":[{"pos":[0,38],"content":"Read-only. The full path of this enum.","nodes":[{"content":"Read-only. The full path of this enum.","pos":[0,38],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The full path of this enum.","pos":[11,38]}]}]}],"pos":[36047,36086],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the public and non-public constructors defined for this class, as specified.","nodes":[{"pos":[0,172],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public constructors defined for this class, as specified.","source":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the public and non-public constructors defined for this class, as specified."}],"pos":[44849,45022],"yaml":true},{"content":"As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,266],"content":"As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,266],"source":"As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[45033,45300],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,122],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}],"pos":[45603,45728],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.","nodes":[{"pos":[0,206],"content":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> objects representing the specified constructors defined for this class.","pos":[0,146],"source":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class."},{"content":"If no constructors are defined, an empty array is returned.","pos":[147,206]}]}],"pos":[45807,46014],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[46194,46265],"yaml":true},{"content":"Returns the custom attributes identified by the given type.","nodes":[{"pos":[0,59],"content":"Returns the custom attributes identified by the given type.","nodes":[{"content":"Returns the custom attributes identified by the given type.","pos":[0,59]}]}],"pos":[47579,47639],"yaml":true},{"content":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName> on the returned <xref:System.Type>.  \n  \n The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.  \n  \n [!code-cpp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CPP/enumbuilder_setcustomattribute1.cpp#2)]\n [!code-csharp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CS/enumbuilder_setcustomattribute1.cs#2)]\n [!code-vb[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/VB/enumbuilder_setcustomattribute1.vb#2)]","nodes":[{"pos":[0,278],"content":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName> on the returned <xref:System.Type>.","nodes":[{"content":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> and call <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph>.","pos":[0,278],"source":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName> on the returned <xref:System.Type>."}]},{"pos":[285,415],"content":"The following code sample illustrates the use of <ph id=\"ph1\">`GetCustomAttribute`</ph> in the context of <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>.","source":"The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>."},{"pos":[422,915],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>EnumBuilder_SetCustomAttribute1#2<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CPP/enumbuilder_setcustomattribute1.cpp#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>EnumBuilder_SetCustomAttribute1#2<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CS/enumbuilder_setcustomattribute1.cs#2)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>EnumBuilder_SetCustomAttribute1#2<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/VB/enumbuilder_setcustomattribute1.vb#2)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CPP/enumbuilder_setcustomattribute1.cpp#2)]\n [!code-csharp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CS/enumbuilder_setcustomattribute1.cs#2)]\n [!code-vb[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/VB/enumbuilder_setcustomattribute1.vb#2)]"}],"pos":[47650,48574],"yaml":true,"extradata":"MT"},{"content":"The `Type` object to which the custom attributes are applied.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">`Type`</ph> object to which the custom attributes are applied.","source":"The `Type` object to which the custom attributes are applied."}],"pos":[48761,48823],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[48887,48971],"yaml":true},{"content":"Returns an array of objects representing the attributes of this constructor that are of <xref href=\"System.Type\"></xref><code>attributeType</code>.","nodes":[{"pos":[0,147],"content":"Returns an array of objects representing the attributes of this constructor that are of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph><bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Returns an array of objects representing the attributes of this constructor that are of <xref href=\"System.Type\"></xref><code>attributeType</code>."}],"pos":[49030,49178],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[49362,49433],"yaml":true},{"content":"Returns all the custom attributes defined for this constructor.","nodes":[{"pos":[0,63],"content":"Returns all the custom attributes defined for this constructor.","nodes":[{"content":"Returns all the custom attributes defined for this constructor.","pos":[0,63]}]}],"pos":[50618,50682],"yaml":true},{"content":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.  \n  \n The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.  \n  \n [!code-cpp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#1)]\n [!code-csharp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#1)]\n [!code-vb[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#1)]","nodes":[{"pos":[0,253],"content":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.","nodes":[{"content":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> and call <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph>.","pos":[0,253],"source":"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>."}]},{"pos":[260,390],"content":"The following code sample illustrates the use of <ph id=\"ph1\">`GetCustomAttribute`</ph> in the context of <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.EnumBuilder&gt;</ph>.","source":"The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>."},{"pos":[397,890],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>EnumBuilder_SetCustomAttribute2#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>EnumBuilder_SetCustomAttribute2#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#1)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>EnumBuilder_SetCustomAttribute2#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#1)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#1)]\n [!code-csharp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#1)]\n [!code-vb[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#1)]"}],"pos":[50693,51592],"yaml":true,"extradata":"MT"},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[51756,51840],"yaml":true},{"content":"Returns an array of objects representing all the custom attributes of the constructor represented by this <xref href=\"System.Reflection.Emit.ConstructorBuilder\"></xref> instance.","nodes":[{"pos":[0,178],"content":"Returns an array of objects representing all the custom attributes of the constructor represented by this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.ConstructorBuilder\"&gt;&lt;/xref&gt;</ph> instance.","source":"Returns an array of objects representing all the custom attributes of the constructor represented by this <xref href=\"System.Reflection.Emit.ConstructorBuilder\"></xref> instance."}],"pos":[51899,52078],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[52262,52333],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.NotSupportedException\"></xref>.","nodes":[{"pos":[0,84],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.NotSupportedException\"></xref>."}],"pos":[53419,53504],"yaml":true},{"content":"This method is not supported. No value is returned.","nodes":[{"pos":[0,51],"content":"This method is not supported. No value is returned.","nodes":[{"content":"This method is not supported. No value is returned.","pos":[0,51],"nodes":[{"content":"This method is not supported.","pos":[0,29]},{"content":"No value is returned.","pos":[30,51]}]}]}],"pos":[53641,53693],"yaml":true},{"content":"This method is not currently supported.","nodes":[{"pos":[0,39],"content":"This method is not currently supported.","nodes":[{"content":"This method is not currently supported.","pos":[0,39]}]}],"pos":[53872,53912],"yaml":true},{"content":"Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.","nodes":[{"pos":[0,117],"content":"Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.","nodes":[{"content":"Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.","pos":[0,117]}]}],"pos":[55144,55262],"yaml":true},{"content":"The underlying type.","nodes":[{"pos":[0,20],"content":"The underlying type.","nodes":[{"content":"The underlying type.","pos":[0,20]}]}],"pos":[55406,55427],"yaml":true},{"content":"Returns the event with the specified name.","nodes":[{"pos":[0,42],"content":"Returns the event with the specified name.","nodes":[{"content":"Returns the event with the specified name.","pos":[0,42]}]}],"pos":[56762,56805],"yaml":true},{"content":"As a workaround, to retrieve the event of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,252],"content":"As a workaround, to retrieve the event of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the event of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,252],"source":"As a workaround, to retrieve the event of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[56816,57069],"yaml":true,"extradata":"MT"},{"content":"The name of the event to get.","nodes":[{"pos":[0,29],"content":"The name of the event to get.","nodes":[{"content":"The name of the event to get.","pos":[0,29]}]}],"pos":[57280,57310],"yaml":true},{"content":"This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,149],"content":"This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"content":"This invocation attribute.","pos":[0,26]},{"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","pos":[27,149],"source":" This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}]}],"pos":[57394,57546],"yaml":true},{"content":"Returns an <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name. If there are no matches, `null` is returned.","nodes":[{"pos":[0,194],"content":"Returns an <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name. If there are no matches, `null` is returned.","nodes":[{"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> object representing the event declared or inherited by this type with the specified name.","pos":[0,149],"source":"Returns an <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name."},{"content":"If there are no matches, <ph id=\"ph1\">`null`</ph> is returned.","pos":[150,194],"source":" If there are no matches, `null` is returned."}]}],"pos":[57617,57812],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[57985,58056],"yaml":true},{"content":"Returns the events for the public events declared or inherited by this type.","nodes":[{"pos":[0,76],"content":"Returns the events for the public events declared or inherited by this type.","nodes":[{"content":"Returns the events for the public events declared or inherited by this type.","pos":[0,76]}]}],"pos":[59112,59189],"yaml":true},{"content":"As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,253],"content":"As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the events of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,253],"source":"As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[59200,59454],"yaml":true,"extradata":"MT"},{"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.","nodes":[{"pos":[0,201],"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public events declared or inherited by this type.","pos":[0,143],"source":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type."},{"content":"An empty array is returned if there are no public events.","pos":[144,201]}]}],"pos":[59629,59831],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[60005,60076],"yaml":true},{"content":"Returns the public and non-public events that are declared by this type.","nodes":[{"pos":[0,72],"content":"Returns the public and non-public events that are declared by this type.","nodes":[{"content":"Returns the public and non-public events that are declared by this type.","pos":[0,72]}]}],"pos":[61264,61337],"yaml":true},{"content":"As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type to retrieve the events.","nodes":[{"pos":[0,276],"content":"As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type to retrieve the events.","nodes":[{"content":"As a workaround, to retrieve the events of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type to retrieve the events.","pos":[0,276],"source":"As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type to retrieve the events."}]}],"pos":[61348,61625],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,129],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>, such as <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on."}],"pos":[61850,61980],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.","nodes":[{"pos":[0,223],"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public events declared or inherited by this type.","pos":[0,158],"source":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public and non-public events declared or inherited by this type."},{"content":"An empty array is returned if there are no events, as specified.","pos":[159,223]}]}],"pos":[62053,62277],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[62451,62522],"yaml":true},{"content":"Returns the field specified by the given name.","nodes":[{"pos":[0,46],"content":"Returns the field specified by the given name.","nodes":[{"content":"Returns the field specified by the given name.","pos":[0,46]}]}],"pos":[63770,63817],"yaml":true},{"content":"As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.","nodes":[{"pos":[0,227],"content":"As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the field of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A&gt;</ph> and use reflection on the retrieved type.","pos":[0,227],"source":"As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type."}]}],"pos":[63828,64056],"yaml":true,"extradata":"MT"},{"content":"The name of the field to get.","nodes":[{"pos":[0,29],"content":"The name of the field to get.","nodes":[{"content":"The name of the field to get.","pos":[0,29]}]}],"pos":[64267,64297],"yaml":true},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,122],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}],"pos":[64381,64506],"yaml":true},{"content":"Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.","nodes":[{"pos":[0,232],"content":"Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.","nodes":[{"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.","pos":[0,184],"source":"Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier."},{"content":"If there are no matches, then null is returned.","pos":[185,232]}]}],"pos":[64577,64810],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[64983,65054],"yaml":true},{"content":"Returns the public and non-public fields that are declared by this type.","nodes":[{"pos":[0,72],"content":"Returns the public and non-public fields that are declared by this type.","nodes":[{"content":"Returns the public and non-public fields that are declared by this type.","pos":[0,72]}]}],"pos":[66242,66315],"yaml":true},{"content":"As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \n  \n The <xref:System.Reflection.Emit.EnumBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"pos":[0,252],"content":"As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the field of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,252],"source":"As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]},{"pos":[259,511],"content":"The <xref:System.Reflection.Emit.EnumBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"content":"The <xref:System.Reflection.Emit.EnumBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[0,252],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.EnumBuilder.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.","pos":[0,154],"source":"The <xref:System.Reflection.Emit.EnumBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order."},{"content":"Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[155,252]}]}]}],"pos":[66326,66842],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as InvokeMethod, NonPublic, and so on.","nodes":[{"pos":[0,125],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>, such as InvokeMethod, NonPublic, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as InvokeMethod, NonPublic, and so on."}],"pos":[67067,67193],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.","nodes":[{"pos":[0,223],"content":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public fields declared or inherited by this type.","pos":[0,158],"source":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type."},{"content":"An empty array is returned if there are no fields, as specified.","pos":[159,223]}]}],"pos":[67266,67490],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[67664,67735],"yaml":true},{"content":"Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.","nodes":[{"pos":[0,113],"content":"Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.","nodes":[{"content":"Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.","pos":[0,113]}]}],"pos":[70802,70916],"yaml":true},{"content":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,256],"content":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,256],"source":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[70927,71184],"yaml":true,"extradata":"MT"},{"content":"The name of the interface.","nodes":[{"pos":[0,26],"content":"The name of the interface.","nodes":[{"content":"The name of the interface.","pos":[0,26]}]}],"pos":[71349,71376],"yaml":true},{"content":"If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.","nodes":[{"pos":[0,84],"content":"If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.","nodes":[{"content":"If <ph id=\"ph1\">`true`</ph>, the search is case-insensitive.","pos":[0,42],"source":"If `true`, the search is case-insensitive."},{"content":"If <ph id=\"ph1\">`false`</ph>, the search is case-sensitive.","pos":[43,84],"source":" If `false`, the search is case-sensitive."}]}],"pos":[71443,71528],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface. Returns null if no interface matching name is found.","nodes":[{"pos":[0,142],"content":"Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface. Returns null if no interface matching name is found.","nodes":[{"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the implemented interface.","pos":[0,89],"source":"Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface."},{"content":"Returns null if no interface matching name is found.","pos":[90,142]}]}],"pos":[71583,71726],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[71903,71974],"yaml":true},{"content":"Returns an interface mapping for the interface requested.","nodes":[{"pos":[0,57],"content":"Returns an interface mapping for the interface requested.","nodes":[{"content":"Returns an interface mapping for the interface requested.","pos":[0,57]}]}],"pos":[73117,73175],"yaml":true},{"content":"As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,270],"content":"As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,270],"source":"As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[73186,73457],"yaml":true,"extradata":"MT"},{"content":"The type of the interface for which the interface mapping is to be retrieved.","nodes":[{"pos":[0,77],"content":"The type of the interface for which the interface mapping is to be retrieved.","nodes":[{"content":"The type of the interface for which the interface mapping is to be retrieved.","pos":[0,77]}]}],"pos":[73718,73796],"yaml":true},{"content":"The requested interface mapping.","nodes":[{"pos":[0,32],"content":"The requested interface mapping.","nodes":[{"content":"The requested interface mapping.","pos":[0,32]}]}],"pos":[73874,73907],"yaml":true},{"content":"The type does not implement the interface.","nodes":[{"pos":[0,42],"content":"The type does not implement the interface.","nodes":[{"content":"The type does not implement the interface.","pos":[0,42]}]}],"pos":[74079,74122],"yaml":true},{"content":"Returns an array of all the interfaces implemented on this a class and its base classes.","nodes":[{"pos":[0,88],"content":"Returns an array of all the interfaces implemented on this a class and its base classes.","nodes":[{"content":"Returns an array of all the interfaces implemented on this a class and its base classes.","pos":[0,88]}]}],"pos":[75277,75366],"yaml":true},{"content":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,256],"content":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,256],"source":"As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[75377,75634],"yaml":true,"extradata":"MT"},{"content":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces. If none are defined, an empty array is returned.","nodes":[{"pos":[0,150],"content":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces. If none are defined, an empty array is returned.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the implemented interfaces.","pos":[0,101],"source":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces."},{"content":"If none are defined, an empty array is returned.","pos":[102,150]}]}],"pos":[75774,75925],"yaml":true},{"content":"Returns all members with the specified name, type, and binding that are declared or inherited by this type.","nodes":[{"pos":[0,107],"content":"Returns all members with the specified name, type, and binding that are declared or inherited by this type.","nodes":[{"content":"Returns all members with the specified name, type, and binding that are declared or inherited by this type.","pos":[0,107]}]}],"pos":[77387,77495],"yaml":true},{"content":"As a workaround, to retrieve the member of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,253],"content":"As a workaround, to retrieve the member of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the member of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,253],"source":"As a workaround, to retrieve the member of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[77506,77760],"yaml":true,"extradata":"MT"},{"content":"The name of the member.","nodes":[{"pos":[0,23],"content":"The name of the member.","nodes":[{"content":"The name of the member.","pos":[0,23]}]}],"pos":[78011,78035],"yaml":true},{"content":"The type of member that is to be returned.","nodes":[{"pos":[0,42],"content":"The type of member that is to be returned.","nodes":[{"content":"The type of member that is to be returned.","pos":[0,42]}]}],"pos":[78111,78154],"yaml":true},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,122],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}],"pos":[78238,78363],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned.","nodes":[{"pos":[0,229],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public members defined on this type if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is used; otherwise, only the public members are returned.","source":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned."}],"pos":[78437,78667],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[78841,78912],"yaml":true},{"content":"Returns the specified members declared or inherited by this type,.","nodes":[{"pos":[0,66],"content":"Returns the specified members declared or inherited by this type,.","nodes":[{"content":"Returns the specified members declared or inherited by this type,.","pos":[0,66]}]}],"pos":[80106,80173],"yaml":true},{"content":"As a workaround, to retrieve the members of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,254],"content":"As a workaround, to retrieve the members of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the members of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,254],"source":"As a workaround, to retrieve the members of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[80184,80439],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,122],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}],"pos":[80666,80791],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.","nodes":[{"pos":[0,221],"content":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public members declared or inherited by this type.","pos":[0,160],"source":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type."},{"content":"An empty array is returned if there are no matching members.","pos":[161,221]}]}],"pos":[80865,81087],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[81262,81333],"yaml":true},{"content":"Returns all the public and non-public methods declared or inherited by this type, as specified.","nodes":[{"pos":[0,95],"content":"Returns all the public and non-public methods declared or inherited by this type, as specified.","nodes":[{"content":"Returns all the public and non-public methods declared or inherited by this type, as specified.","pos":[0,95]}]}],"pos":[85151,85247],"yaml":true},{"content":"As a workaround, to retrieve the methods of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,254],"content":"As a workaround, to retrieve the methods of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the methods of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,254],"source":"As a workaround, to retrieve the methods of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[85258,85513],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,129],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>, such as <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on."}],"pos":[85740,85870],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned.","nodes":[{"pos":[0,229],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public methods defined on this type if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is used; otherwise, only the public methods are returned.","source":"Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned."}],"pos":[85944,86174],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[86349,86420],"yaml":true},{"content":"Returns the specified nested type that is declared by this type.","nodes":[{"pos":[0,64],"content":"Returns the specified nested type that is declared by this type.","nodes":[{"content":"Returns the specified nested type that is declared by this type.","pos":[0,64]}]}],"pos":[87698,87763],"yaml":true},{"content":"As a workaround, to retrieve the nested type of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,258],"content":"As a workaround, to retrieve the nested type of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the nested type of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,258],"source":"As a workaround, to retrieve the nested type of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[87774,88033],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the name of the nested type to get.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the name of the nested type to get.","source":"The <xref href=\"System.String\"></xref> containing the name of the nested type to get."}],"pos":[88226,88312],"yaml":true},{"content":"A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to conduct a case-sensitive search for public methods.","nodes":[{"pos":[0,128],"content":"A bitmask comprised of one or more <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> that specify how the search is conducted.","source":"A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted."},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,206],"content":"Zero, to conduct a case-sensitive search for public methods.","nodes":[{"content":"Zero, to conduct a case-sensitive search for public methods.","pos":[0,60]}]}],"pos":[88396,88611],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the nested type that matches the specified requirements, if found; otherwise, `null`.","nodes":[{"pos":[0,140],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the nested type that matches the specified requirements, if found; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"A <xref href=\"System.Type\"></xref> object representing the nested type that matches the specified requirements, if found; otherwise, `null`."}],"pos":[88666,88807],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[88985,89056],"yaml":true},{"content":"Returns the public and non-public nested types that are declared or inherited by this type.","nodes":[{"pos":[0,91],"content":"Returns the public and non-public nested types that are declared or inherited by this type.","nodes":[{"content":"Returns the public and non-public nested types that are declared or inherited by this type.","pos":[0,91]}]}],"pos":[90274,90366],"yaml":true},{"content":"As a workaround, to retrieve the nested types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,259],"content":"As a workaround, to retrieve the nested types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the nested types of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,259],"source":"As a workaround, to retrieve the nested types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[90377,90637],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,129],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>, such as <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on."}],"pos":[90844,90974],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing all the types nested within the current <xref href=\"System.Type\"></xref> that match the specified binding constraints.  \n  \n An empty array of type <xref href=\"System.Type\"></xref>, if no types are nested within the current <xref href=\"System.Type\"></xref>, or if none of the nested types match the binding constraints.","nodes":[{"pos":[0,184],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing all the types nested within the current <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that match the specified binding constraints.","source":"An array of <xref href=\"System.Type\"></xref> objects representing all the types nested within the current <xref href=\"System.Type\"></xref> that match the specified binding constraints."},{"pos":[191,385],"content":"An empty array of type <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>, if no types are nested within the current <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>, or if none of the nested types match the binding constraints.","source":"An empty array of type <xref href=\"System.Type\"></xref>, if no types are nested within the current <xref href=\"System.Type\"></xref>, or if none of the nested types match the binding constraints."}],"pos":[91031,91429],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[91608,91679],"yaml":true},{"content":"Returns all the public and non-public properties declared or inherited by this type, as specified.","nodes":[{"pos":[0,98],"content":"Returns all the public and non-public properties declared or inherited by this type, as specified.","nodes":[{"content":"Returns all the public and non-public properties declared or inherited by this type, as specified.","pos":[0,98]}]}],"pos":[92891,92990],"yaml":true},{"content":"As a workaround, to retrieve the properties of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,257],"content":"As a workaround, to retrieve the properties of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"As a workaround, to retrieve the properties of a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,257],"source":"As a workaround, to retrieve the properties of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[93001,93259],"yaml":true,"extradata":"MT"},{"content":"This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,149],"content":"This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"content":"This invocation attribute.","pos":[0,26]},{"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","pos":[27,149],"source":" This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}]}],"pos":[93491,93643],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned.","nodes":[{"pos":[0,237],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public properties defined on this type if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is used; otherwise, only the public properties are returned.","source":"Returns an array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned."}],"pos":[93719,93957],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[94135,94206],"yaml":true},{"content":"Returns the GUID of this enum.","nodes":[{"pos":[0,30],"content":"Returns the GUID of this enum.","nodes":[{"content":"Returns the GUID of this enum.","pos":[0,30]}]}],"pos":[97690,97721],"yaml":true},{"content":"Read-only. The GUID of this enum.","nodes":[{"pos":[0,33],"content":"Read-only. The GUID of this enum.","nodes":[{"content":"Read-only. The GUID of this enum.","pos":[0,33],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The GUID of this enum.","pos":[11,33]}]}]}],"pos":[98471,98505],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[98674,98745],"yaml":true},{"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.","nodes":[{"pos":[0,223],"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.","nodes":[{"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.","pos":[0,223],"nodes":[{"content":"Invokes the specified member.","pos":[0,29]},{"content":"The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.","pos":[30,223]}]}]}],"pos":[101993,102217],"yaml":true},{"content":"You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,201],"content":"You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"You can retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,201],"source":"You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[102228,102430],"yaml":true,"extradata":"MT"},{"content":"The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","nodes":[{"pos":[0,258],"content":"The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","nodes":[{"content":"The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","pos":[0,258],"nodes":[{"content":"The name of the member to invoke.","pos":[0,33]},{"content":"This can be a constructor, method, property, or field.","pos":[34,88]},{"content":"A suitable invocation attribute must be specified.","pos":[89,139]},{"content":"Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","pos":[140,258]}]}]}],"pos":[102803,103062],"yaml":true},{"content":"The invocation attribute. This must be a bit flag from `BindingFlags`.","nodes":[{"pos":[0,70],"content":"The invocation attribute. This must be a bit flag from `BindingFlags`.","nodes":[{"content":"The invocation attribute.","pos":[0,25]},{"content":"This must be a bit flag from <ph id=\"ph1\">`BindingFlags`</ph>.","pos":[26,70],"source":" This must be a bit flag from `BindingFlags`."}]}],"pos":[103145,103216],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"pos":[0,242],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects using reflection.","pos":[0,142],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection."},{"content":"If binder is <ph id=\"ph1\">`null`</ph>, the default binder is used.","pos":[143,191],"source":" If binder is `null`, the default binder is used."},{"content":"See <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph>.","pos":[192,242],"source":" See <xref href=\"System.Reflection.Binder\"></xref>."}]}],"pos":[103289,103532],"yaml":true},{"content":"The object on which to invoke the specified member. If the member is static, this parameter is ignored.","nodes":[{"pos":[0,103],"content":"The object on which to invoke the specified member. If the member is static, this parameter is ignored.","nodes":[{"content":"The object on which to invoke the specified member. If the member is static, this parameter is ignored.","pos":[0,103],"nodes":[{"content":"The object on which to invoke the specified member.","pos":[0,51]},{"content":"If the member is static, this parameter is ignored.","pos":[52,103]}]}]}],"pos":[103594,103698],"yaml":true},{"content":"An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.","nodes":[{"pos":[0,182],"content":"An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.","nodes":[{"content":"An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.","pos":[0,182],"nodes":[{"content":"An argument list.","pos":[0,17]},{"content":"This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked.","pos":[18,134]},{"content":"If there are no parameters this should be null.","pos":[135,182]}]}]}],"pos":[103760,103943],"yaml":true},{"content":"An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.","nodes":[{"pos":[0,315],"content":"An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.","nodes":[{"content":"An array of the same length as <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> with elements that represent the attributes associated with the arguments of the member to be invoked.","pos":[0,151],"source":"An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked."},{"content":"A parameter has attributes associated with it in the metadata.","pos":[152,214]},{"content":"They are used by various interoperability services.","pos":[215,266]},{"content":"See the metadata specs for details such as this.","pos":[267,315]}]}],"pos":[104032,104348],"yaml":true},{"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is null, the `CultureInfo` for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)","nodes":[{"pos":[0,298],"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is null, the `CultureInfo` for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)","nodes":[{"content":"An instance of <ph id=\"ph1\">`CultureInfo`</ph> used to govern the coercion of types.","pos":[0,66],"source":"An instance of `CultureInfo` used to govern the coercion of types."},{"content":"If this is null, the <ph id=\"ph1\">`CultureInfo`</ph> for the current thread is used.","pos":[67,133],"source":" If this is null, the `CultureInfo` for the current thread is used."},{"content":"(Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)","pos":[134,298]}]}],"pos":[104430,104729],"yaml":true},{"content":"Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.","nodes":[{"pos":[0,278],"content":"Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.","nodes":[{"content":"Each parameter in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">namedParameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> array gets the value in the corresponding element in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept> array.","pos":[0,132],"source":"Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array."},{"content":"If the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">namedParameters</ph><ept id=\"p2\">&lt;/code&gt;</ept>, the remaining argument values are passed in order.","pos":[133,278],"source":" If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order."}]}],"pos":[104802,105081],"yaml":true},{"content":"Returns the return value of the invoked member.","nodes":[{"pos":[0,47],"content":"Returns the return value of the invoked member.","nodes":[{"content":"Returns the return value of the invoked member.","pos":[0,47]}]}],"pos":[105138,105186],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[105363,105434],"yaml":true},{"content":"Gets a value that indicates whether a specified <xref href=\"System.Reflection.TypeInfo\"></xref> object can be assigned to this object.","nodes":[{"pos":[0,134],"content":"Gets a value that indicates whether a specified <ph id=\"ph1\">&lt;xref href=\"System.Reflection.TypeInfo\"&gt;&lt;/xref&gt;</ph> object can be assigned to this object.","source":"Gets a value that indicates whether a specified <xref href=\"System.Reflection.TypeInfo\"></xref> object can be assigned to this object."}],"pos":[107820,107955],"yaml":true},{"content":"The object to test.","nodes":[{"pos":[0,19],"content":"The object to test.","nodes":[{"content":"The object to test.","pos":[0,19]}]}],"pos":[108148,108168],"yaml":true},{"content":"`true` if <code>typeInfo</code> can be assigned to this object; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeInfo</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be assigned to this object; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>typeInfo</code> can be assigned to this object; otherwise, `false`."}],"pos":[108226,108312],"yaml":true},{"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"pos":[0,86],"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"content":"Gets a value that indicates whether this object represents a constructed generic type.","pos":[0,86]}]}],"pos":[111960,112047],"yaml":true},{"content":"`true` if this object represents a constructed generic type; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if this object represents a constructed generic type; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this object represents a constructed generic type; otherwise, `false`."}],"pos":[112183,112266],"yaml":true},{"content":"Checks if the specified custom attribute type is defined.","nodes":[{"pos":[0,57],"content":"Checks if the specified custom attribute type is defined.","nodes":[{"content":"Checks if the specified custom attribute type is defined.","pos":[0,57]}]}],"pos":[113535,113593],"yaml":true},{"content":"As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <xref:System.Type.GetType%2A> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.","nodes":[{"pos":[0,237],"content":"As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <xref:System.Type.GetType%2A> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.","nodes":[{"content":"As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A&gt;</ph> and call <ph id=\"ph2\">&lt;xref:System.Reflection.MemberInfo.GetCustomAttributes%2A&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph>.","pos":[0,237],"source":"As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <xref:System.Type.GetType%2A> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>."}]}],"pos":[113604,113842],"yaml":true,"extradata":"MT"},{"content":"The `Type` object to which the custom attributes are applied.","nodes":[{"pos":[0,61],"content":"The <ph id=\"ph1\">`Type`</ph> object to which the custom attributes are applied.","source":"The `Type` object to which the custom attributes are applied."}],"pos":[114015,114077],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[114141,114225],"yaml":true},{"content":"`true` if one or more instance of <code>attributeType</code> is defined on this member; otherwise, `false`.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">`true`</ph> if one or more instance of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined on this member; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if one or more instance of <code>attributeType</code> is defined on this member; otherwise, `false`."}],"pos":[114283,114393],"yaml":true},{"content":"This method is not currently supported in types that are not complete.","nodes":[{"pos":[0,70],"content":"This method is not currently supported in types that are not complete.","nodes":[{"content":"This method is not currently supported in types that are not complete.","pos":[0,70]}]}],"pos":[114567,114638],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.","nodes":[{"pos":[0,135],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing a one-dimensional array of the current type, with a lower bound of zero.","source":"Returns a <xref href=\"System.Type\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero."}],"pos":[125762,125898],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.","nodes":[{"pos":[0,127],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing a one-dimensional array of the current type, with a lower bound of zero.","source":"A <xref href=\"System.Type\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero."}],"pos":[126034,126162],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object representing an array of the current type, with the specified number of dimensions.","nodes":[{"pos":[0,133],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing an array of the current type, with the specified number of dimensions.","source":"Returns a <xref href=\"System.Type\"></xref> object representing an array of the current type, with the specified number of dimensions."}],"pos":[127442,127576],"yaml":true},{"content":"The number of dimensions for the array. This number must be less than or equal to 32.","nodes":[{"pos":[0,85],"content":"The number of dimensions for the array. This number must be less than or equal to 32.","nodes":[{"content":"The number of dimensions for the array. This number must be less than or equal to 32.","pos":[0,85],"nodes":[{"content":"The number of dimensions for the array.","pos":[0,39]},{"content":"This number must be less than or equal to 32.","pos":[40,85]}]}]}],"pos":[127721,127807],"yaml":true},{"content":"An object representing an array of the current type, with the specified number of dimensions.","nodes":[{"pos":[0,93],"content":"An object representing an array of the current type, with the specified number of dimensions.","nodes":[{"content":"An object representing an array of the current type, with the specified number of dimensions.","pos":[0,93]}]}],"pos":[127862,127956],"yaml":true},{"content":"<code>rank</code> is less than 1.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;rank&lt;/code&gt;</ph> is less than 1.","source":"<code>rank</code> is less than 1."}],"pos":[128140,128174],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).","nodes":[{"pos":[0,156],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the current type when passed as a <bpt id=\"p1\">**</bpt>ref<ept id=\"p1\">**</ept> parameter (<bpt id=\"p2\">**</bpt>ByRef<ept id=\"p2\">**</ept> parameter in Visual Basic).","source":"Returns a <xref href=\"System.Type\"></xref> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic)."}],"pos":[129318,129475],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).","nodes":[{"pos":[0,148],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the current type when passed as a <bpt id=\"p1\">**</bpt>ref<ept id=\"p1\">**</ept> parameter (<bpt id=\"p2\">**</bpt>ByRef<ept id=\"p2\">**</ept> parameter in Visual Basic).","source":"A <xref href=\"System.Type\"></xref> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic)."}],"pos":[129611,129760],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents a pointer to the current type.","nodes":[{"pos":[0,96],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a pointer to the current type.","source":"Returns a <xref href=\"System.Type\"></xref> object that represents a pointer to the current type."}],"pos":[131978,132075],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that represents a pointer to the current type.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a pointer to the current type.","source":"A <xref href=\"System.Type\"></xref> object that represents a pointer to the current type."}],"pos":[132213,132302],"yaml":true},{"content":"Retrieves the dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref> definition.","nodes":[{"pos":[0,115],"content":"Retrieves the dynamic module that contains this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph> definition.","source":"Retrieves the dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref> definition."}],"pos":[133481,133597],"yaml":true},{"content":"Read-only. The dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref> definition.","nodes":[{"pos":[0,116],"content":"Read-only. The dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref> definition.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The dynamic module that contains this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph> definition.","pos":[11,116],"source":" The dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref> definition."}]}],"pos":[134350,134467],"yaml":true},{"content":"Returns the name of this enum.","nodes":[{"pos":[0,30],"content":"Returns the name of this enum.","nodes":[{"content":"Returns the name of this enum.","pos":[0,30]}]}],"pos":[135665,135696],"yaml":true},{"content":"Read-only. The name of this enum.","nodes":[{"pos":[0,33],"content":"Read-only. The name of this enum.","nodes":[{"content":"Read-only. The name of this enum.","pos":[0,33],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The name of this enum.","pos":[11,33]}]}]}],"pos":[136407,136441],"yaml":true},{"content":"Returns the namespace of this enum.","nodes":[{"pos":[0,35],"content":"Returns the namespace of this enum.","nodes":[{"content":"Returns the namespace of this enum.","pos":[0,35]}]}],"pos":[137667,137703],"yaml":true},{"content":"Read-only. The namespace of this enum.","nodes":[{"pos":[0,38],"content":"Read-only. The namespace of this enum.","nodes":[{"content":"Read-only. The namespace of this enum.","pos":[0,38],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The namespace of this enum.","pos":[11,38]}]}]}],"pos":[138440,138479],"yaml":true},{"content":"Returns the type that was used to obtain this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.","nodes":[{"pos":[0,102],"content":"Returns the type that was used to obtain this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the type that was used to obtain this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>."}],"pos":[139734,139837],"yaml":true},{"content":"Read-only. The type that was used to obtain this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.","nodes":[{"pos":[0,105],"content":"Read-only. The type that was used to obtain this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The type that was used to obtain this <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.EnumBuilder\"&gt;&lt;/xref&gt;</ph>.","pos":[11,105],"source":" The type that was used to obtain this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>."}]}],"pos":[139959,140065],"yaml":true},{"content":"Sets a custom attribute using a custom attribute builder.","nodes":[{"pos":[0,57],"content":"Sets a custom attribute using a custom attribute builder.","nodes":[{"content":"Sets a custom attribute using a custom attribute builder.","pos":[0,57]}]}],"pos":[141461,141519],"yaml":true},{"content":"An instance of a helper class to define the custom attribute.","nodes":[{"pos":[0,61],"content":"An instance of a helper class to define the custom attribute.","nodes":[{"content":"An instance of a helper class to define the custom attribute.","pos":[0,61]}]}],"pos":[142483,142545],"yaml":true},{"content":"<code>con</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>con</code> is `null`."}],"pos":[142728,142756],"yaml":true},{"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"pos":[0,64],"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"content":"Sets a custom attribute using a specified custom attribute blob.","pos":[0,64]}]}],"pos":[144186,144251],"yaml":true},{"content":"See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,414],"content":"See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"See the metadata specification in the ECMA Partition II documentation for details on how to format <ph id=\"ph1\">`binaryAttribute`</ph>.","pos":[0,117],"source":"See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[118,414],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}],"pos":[144262,144677],"yaml":true,"extradata":"MT"},{"content":"The constructor for the custom attribute.","nodes":[{"pos":[0,41],"content":"The constructor for the custom attribute.","nodes":[{"content":"The constructor for the custom attribute.","pos":[0,41]}]}],"pos":[145630,145672],"yaml":true},{"content":"A byte blob representing the attributes.","nodes":[{"pos":[0,40],"content":"A byte blob representing the attributes.","nodes":[{"content":"A byte blob representing the attributes.","pos":[0,40]}]}],"pos":[145743,145784],"yaml":true},{"content":"<code>con</code> or <code>binaryAttribute</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;binaryAttribute&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>con</code> or <code>binaryAttribute</code> is `null`."}],"pos":[145967,146027],"yaml":true},{"content":"Retrieves the internal handle for this enum.","nodes":[{"pos":[0,44],"content":"Retrieves the internal handle for this enum.","nodes":[{"content":"Retrieves the internal handle for this enum.","pos":[0,44]}]}],"pos":[147264,147309],"yaml":true},{"content":"You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \n  \n Use this handle to access the underlying metadata handle.","nodes":[{"pos":[0,201],"content":"You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"You can retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,201],"source":"You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]},{"pos":[208,265],"content":"Use this handle to access the underlying metadata handle.","nodes":[{"content":"Use this handle to access the underlying metadata handle.","pos":[0,57]}]}],"pos":[147320,147590],"yaml":true,"extradata":"MT"},{"content":"Read-only. The internal handle for this enum.","nodes":[{"pos":[0,45],"content":"Read-only. The internal handle for this enum.","nodes":[{"content":"Read-only. The internal handle for this enum.","pos":[0,45],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The internal handle for this enum.","pos":[11,45]}]}]}],"pos":[147735,147781],"yaml":true},{"content":"This property is not currently supported.","nodes":[{"pos":[0,41],"content":"This property is not currently supported.","nodes":[{"content":"This property is not currently supported.","pos":[0,41]}]}],"pos":[147956,147998],"yaml":true},{"content":"Returns the internal metadata type token of this enum.","nodes":[{"pos":[0,54],"content":"Returns the internal metadata type token of this enum.","nodes":[{"content":"Returns the internal metadata type token of this enum.","pos":[0,54]}]}],"pos":[149023,149078],"yaml":true},{"content":"Read-only. The type token of this enum.","nodes":[{"pos":[0,39],"content":"Read-only. The type token of this enum.","nodes":[{"content":"Read-only. The type token of this enum.","pos":[0,39],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The type token of this enum.","pos":[11,39]}]}]}],"pos":[149236,149276],"yaml":true},{"content":"Returns the underlying field for this enum.","nodes":[{"pos":[0,43],"content":"Returns the underlying field for this enum.","nodes":[{"content":"Returns the underlying field for this enum.","pos":[0,43]}]}],"pos":[150407,150451],"yaml":true},{"content":"Read-only. The underlying field for this enum.","nodes":[{"pos":[0,46],"content":"Read-only. The underlying field for this enum.","nodes":[{"content":"Read-only. The underlying field for this enum.","pos":[0,46],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The underlying field for this enum.","pos":[11,46]}]}]}],"pos":[150621,150668],"yaml":true},{"content":"Returns the underlying system type for this enum.","nodes":[{"pos":[0,49],"content":"Returns the underlying system type for this enum.","nodes":[{"content":"Returns the underlying system type for this enum.","pos":[0,49]}]}],"pos":[151971,152021],"yaml":true},{"content":"Read-only. Returns the underlying system type.","nodes":[{"pos":[0,46],"content":"Read-only. Returns the underlying system type.","nodes":[{"content":"Read-only. Returns the underlying system type.","pos":[0,46],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Returns the underlying system type.","pos":[11,46]}]}]}],"pos":[152150,152197],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[153839,153907],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[153918,154105],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[154310,154353],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[154418,154457],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[154519,154552],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[154612,154664],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[154728,154802],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[155028,155108],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[156497,156612],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[156623,156808],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[156981,157013],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[157073,157121],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[157184,157245],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[157469,157549],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[158839,158932],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[158943,159133],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[159290,159391],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[159620,159700],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[161374,161438],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[161449,161629],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[161897,161920],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[161978,162021],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[162081,162133],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[162194,162236],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[162303,162463],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[162529,162587],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[162653,162713],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[162777,162828],"yaml":true},{"content":"The method is called late-bound using the COM <code>IDispatch</code> interface.","nodes":[{"pos":[0,79],"content":"The method is called late-bound using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface.","source":"The method is called late-bound using the COM <code>IDispatch</code> interface."}],"pos":[163047,163127],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.EnumBuilder\n  commentId: T:System.Reflection.Emit.EnumBuilder\n  id: EnumBuilder\n  children:\n  - System.Reflection.Emit.EnumBuilder.#ctor\n  - System.Reflection.Emit.EnumBuilder.Assembly\n  - System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName\n  - System.Reflection.Emit.EnumBuilder.Attributes\n  - System.Reflection.Emit.EnumBuilder.BaseType\n  - System.Reflection.Emit.EnumBuilder.ContainsGenericParameters\n  - System.Reflection.Emit.EnumBuilder.CreateType\n  - System.Reflection.Emit.EnumBuilder.CreateTypeInfo\n  - System.Reflection.Emit.EnumBuilder.DeclaringMethod\n  - System.Reflection.Emit.EnumBuilder.DeclaringType\n  - System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)\n  - System.Reflection.Emit.EnumBuilder.FullName\n  - System.Reflection.Emit.EnumBuilder.GenericParameterAttributes\n  - System.Reflection.Emit.EnumBuilder.GenericParameterPosition\n  - System.Reflection.Emit.EnumBuilder.GenericTypeArguments\n  - System.Reflection.Emit.EnumBuilder.GetArrayRank\n  - System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl\n  - System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Emit.EnumBuilder.GetElementType\n  - System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType\n  - System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetEvents\n  - System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints\n  - System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition\n  - System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)\n  - System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)\n  - System.Reflection.Emit.EnumBuilder.GetInterfaces\n  - System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.EnumBuilder.GUID\n  - System.Reflection.Emit.EnumBuilder.HasElementTypeImpl\n  - System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  - System.Reflection.Emit.EnumBuilder.IsArrayImpl\n  - System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  - System.Reflection.Emit.EnumBuilder.IsByRefImpl\n  - System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl\n  - System.Reflection.Emit.EnumBuilder.IsConstructedGenericType\n  - System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Emit.EnumBuilder.IsEnum\n  - System.Reflection.Emit.EnumBuilder.IsGenericParameter\n  - System.Reflection.Emit.EnumBuilder.IsGenericType\n  - System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition\n  - System.Reflection.Emit.EnumBuilder.IsPointerImpl\n  - System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl\n  - System.Reflection.Emit.EnumBuilder.IsSerializable\n  - System.Reflection.Emit.EnumBuilder.IsSZArray\n  - System.Reflection.Emit.EnumBuilder.IsTypeDefinition\n  - System.Reflection.Emit.EnumBuilder.IsValueTypeImpl\n  - System.Reflection.Emit.EnumBuilder.IsVariableBoundArray\n  - System.Reflection.Emit.EnumBuilder.MakeArrayType\n  - System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)\n  - System.Reflection.Emit.EnumBuilder.MakeByRefType\n  - System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])\n  - System.Reflection.Emit.EnumBuilder.MakePointerType\n  - System.Reflection.Emit.EnumBuilder.Module\n  - System.Reflection.Emit.EnumBuilder.Name\n  - System.Reflection.Emit.EnumBuilder.Namespace\n  - System.Reflection.Emit.EnumBuilder.ReflectedType\n  - System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  - System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  - System.Reflection.Emit.EnumBuilder.TypeHandle\n  - System.Reflection.Emit.EnumBuilder.TypeToken\n  - System.Reflection.Emit.EnumBuilder.UnderlyingField\n  - System.Reflection.Emit.EnumBuilder.UnderlyingSystemType\n  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: EnumBuilder\n  nameWithType: EnumBuilder\n  fullName: System.Reflection.Emit.EnumBuilder\n  type: Class\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Describes and represents an enumeration type.\n  remarks: >-\n    > [!NOTE]\n\n    >  In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.\n  example:\n  - \"The following code example demonstrates the construction of an enumeration within a dynamic assembly, using `EnumBuilder`. The example defines an enumeration named `Elevation`, with an underlying type of <xref:System.Int32>, and creates two elements: `Low`, with a value of 0, and `High`, with a value of 1. After the type has been created, the assembly is saved with the name `TempAssembly.dll`. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the contents of this assembly.  \\n  \\n> [!NOTE]\\n>  Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.  \\n  \\n [!code-cpp[ModuleBuilder_DefineEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CPP/modulebuilder_defineenum.cpp#1)]\\n [!code-csharp[ModuleBuilder_DefineEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CS/modulebuilder_defineenum.cs#1)]\\n [!code-vb[ModuleBuilder_DefineEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ModuleBuilder_DefineEnum/VB/modulebuilder_defineenum.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class EnumBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._EnumBuilder\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.TypeInfo\n  implements:\n  - System.Runtime.InteropServices._EnumBuilder\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.Equals(System.Object)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.GetHashCode\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.TypeInfo.AsType\n  - System.Reflection.TypeInfo.DeclaredConstructors\n  - System.Reflection.TypeInfo.DeclaredEvents\n  - System.Reflection.TypeInfo.DeclaredFields\n  - System.Reflection.TypeInfo.DeclaredMembers\n  - System.Reflection.TypeInfo.DeclaredMethods\n  - System.Reflection.TypeInfo.DeclaredNestedTypes\n  - System.Reflection.TypeInfo.DeclaredProperties\n  - System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  - System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  - System.Reflection.TypeInfo.GenericTypeParameters\n  - System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  - System.Reflection.TypeInfo.GetConstructors\n  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  - System.Reflection.TypeInfo.GetDefaultMembers\n  - System.Reflection.TypeInfo.GetEnumName(System.Object)\n  - System.Reflection.TypeInfo.GetEnumNames\n  - System.Reflection.TypeInfo.GetEnumValues\n  - System.Reflection.TypeInfo.GetEvent(System.String)\n  - System.Reflection.TypeInfo.GetField(System.String)\n  - System.Reflection.TypeInfo.GetFields\n  - System.Reflection.TypeInfo.GetGenericArguments\n  - System.Reflection.TypeInfo.GetInterface(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMembers\n  - System.Reflection.TypeInfo.GetMethod(System.String)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetMethods\n  - System.Reflection.TypeInfo.GetNestedType(System.String)\n  - System.Reflection.TypeInfo.GetNestedTypes\n  - System.Reflection.TypeInfo.GetProperties\n  - System.Reflection.TypeInfo.GetProperty(System.String)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  - System.Reflection.TypeInfo.HasElementType\n  - System.Reflection.TypeInfo.ImplementedInterfaces\n  - System.Reflection.TypeInfo.IsAbstract\n  - System.Reflection.TypeInfo.IsAnsiClass\n  - System.Reflection.TypeInfo.IsArray\n  - System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  - System.Reflection.TypeInfo.IsAutoClass\n  - System.Reflection.TypeInfo.IsAutoLayout\n  - System.Reflection.TypeInfo.IsByRef\n  - System.Reflection.TypeInfo.IsClass\n  - System.Reflection.TypeInfo.IsCOMObject\n  - System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  - System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  - System.Reflection.TypeInfo.IsExplicitLayout\n  - System.Reflection.TypeInfo.IsImport\n  - System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  - System.Reflection.TypeInfo.IsInterface\n  - System.Reflection.TypeInfo.IsLayoutSequential\n  - System.Reflection.TypeInfo.IsMarshalByRef\n  - System.Reflection.TypeInfo.IsNested\n  - System.Reflection.TypeInfo.IsNestedAssembly\n  - System.Reflection.TypeInfo.IsNestedFamANDAssem\n  - System.Reflection.TypeInfo.IsNestedFamily\n  - System.Reflection.TypeInfo.IsNestedFamORAssem\n  - System.Reflection.TypeInfo.IsNestedPrivate\n  - System.Reflection.TypeInfo.IsNestedPublic\n  - System.Reflection.TypeInfo.IsNotPublic\n  - System.Reflection.TypeInfo.IsPointer\n  - System.Reflection.TypeInfo.IsPrimitive\n  - System.Reflection.TypeInfo.IsPublic\n  - System.Reflection.TypeInfo.IsSealed\n  - System.Reflection.TypeInfo.IsSpecialName\n  - System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  - System.Reflection.TypeInfo.IsUnicodeClass\n  - System.Reflection.TypeInfo.IsValueType\n  - System.Reflection.TypeInfo.IsVisible\n  - System.Reflection.TypeInfo.MemberType\n  - System.Reflection.TypeInfo.StructLayoutAttribute\n  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  - System.Reflection.TypeInfo.TypeInitializer\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.#ctor\n  commentId: M:System.Reflection.Emit.EnumBuilder.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: EnumBuilder()\n  nameWithType: EnumBuilder.EnumBuilder()\n  fullName: EnumBuilder.EnumBuilder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected EnumBuilder ();\n    parameters: []\n  overload: System.Reflection.Emit.EnumBuilder.#ctor*\n  exceptions: []\n  version:\n  - xamarinios-10.8\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.Assembly\n  commentId: P:System.Reflection.Emit.EnumBuilder.Assembly\n  id: Assembly\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: Assembly\n  nameWithType: EnumBuilder.Assembly\n  fullName: EnumBuilder.Assembly\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the dynamic assembly that contains this enum definition.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the use of the `Assembly` property to reference the parent assembly of the current `EnumBuilder`.  \\n  \\n [!code-cpp[EnumBuilder_Properties_5#1](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#1)]\\n [!code-csharp[EnumBuilder_Properties_5#1](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#1)]\\n [!code-vb[EnumBuilder_Properties_5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#1)]\"\n  syntax:\n    content: public override System.Reflection.Assembly Assembly { get; }\n    return:\n      type: System.Reflection.Assembly\n      description: Read-only. The dynamic assembly that contains this enum definition.\n  overload: System.Reflection.Emit.EnumBuilder.Assembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName\n  commentId: P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName\n  id: AssemblyQualifiedName\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: AssemblyQualifiedName\n  nameWithType: EnumBuilder.AssemblyQualifiedName\n  fullName: EnumBuilder.AssemblyQualifiedName\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the full path of this enum qualified by the display name of the parent assembly.\n  remarks: \"The format of the returned string is:  \\n  \\n \\\\<FullTypeName>, \\\\<AssemblyDisplayName>  \\n  \\n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \\n  \\n## Version Information  \\n In the .NET Framework version 1.1 and earlier, the return value of this property did not include the culture or public key.\"\n  example:\n  - \"The following code sample demonstrates the use of the `AssemblyQualifiedName` property to reference the qualified parent assembly name of the current `EnumBuilder`.  \\n  \\n [!code-cpp[EnumBuilder_Properties_5#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#2)]\\n [!code-csharp[EnumBuilder_Properties_5#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#2)]\\n [!code-vb[EnumBuilder_Properties_5#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#2)]\"\n  syntax:\n    content: public override string AssemblyQualifiedName { get; }\n    return:\n      type: System.String\n      description: Read-only. The full path of this enum qualified by the display name of the parent assembly.\n  overload: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.Attributes\n  commentId: P:System.Reflection.Emit.EnumBuilder.Attributes\n  id: Attributes\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: EnumBuilder.Attributes\n  fullName: EnumBuilder.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override System.Reflection.TypeAttributes Attributes { get; }\n    return:\n      type: System.Reflection.TypeAttributes\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.BaseType\n  commentId: P:System.Reflection.Emit.EnumBuilder.BaseType\n  id: BaseType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: BaseType\n  nameWithType: EnumBuilder.BaseType\n  fullName: EnumBuilder.BaseType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the parent <xref href=\"System.Type\"></xref> of this type which is always <xref href=\"System.Enum\"></xref>.\n  syntax:\n    content: public override Type BaseType { get; }\n    return:\n      type: System.Type\n      description: Read-only. The parent <xref href=\"System.Type\"></xref> of this type.\n  overload: System.Reflection.Emit.EnumBuilder.BaseType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.ContainsGenericParameters\n  commentId: P:System.Reflection.Emit.EnumBuilder.ContainsGenericParameters\n  id: ContainsGenericParameters\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: ContainsGenericParameters\n  nameWithType: EnumBuilder.ContainsGenericParameters\n  fullName: EnumBuilder.ContainsGenericParameters\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool ContainsGenericParameters { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.ContainsGenericParameters*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.CreateType\n  commentId: M:System.Reflection.Emit.EnumBuilder.CreateType\n  id: CreateType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: CreateType()\n  nameWithType: EnumBuilder.CreateType()\n  fullName: EnumBuilder.CreateType()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Creates a <xref href=\"System.Type\"></xref> object for this enum.\n  syntax:\n    content: public Type CreateType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object for this enum.\n  overload: System.Reflection.Emit.EnumBuilder.CreateType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"This type has been previously created.  \\n  \\n -or-  \\n  \\n The enclosing type has not been created.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.CreateTypeInfo\n  commentId: M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo\n  id: CreateTypeInfo\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: CreateTypeInfo()\n  nameWithType: EnumBuilder.CreateTypeInfo()\n  fullName: EnumBuilder.CreateTypeInfo()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a <xref href=\"System.Reflection.TypeInfo\"></xref> object that represents this enumeration.\n  syntax:\n    content: public System.Reflection.TypeInfo CreateTypeInfo ();\n    parameters: []\n    return:\n      type: System.Reflection.TypeInfo\n      description: An object that represents this enumeration.\n  overload: System.Reflection.Emit.EnumBuilder.CreateTypeInfo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.DeclaringMethod\n  commentId: P:System.Reflection.Emit.EnumBuilder.DeclaringMethod\n  id: DeclaringMethod\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: DeclaringMethod\n  nameWithType: EnumBuilder.DeclaringMethod\n  fullName: EnumBuilder.DeclaringMethod\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override System.Reflection.MethodBase DeclaringMethod { get; }\n    return:\n      type: System.Reflection.MethodBase\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.DeclaringMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.DeclaringType\n  commentId: P:System.Reflection.Emit.EnumBuilder.DeclaringType\n  id: DeclaringType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: DeclaringType\n  nameWithType: EnumBuilder.DeclaringType\n  fullName: EnumBuilder.DeclaringType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.\n  syntax:\n    content: public override Type DeclaringType { get; }\n    return:\n      type: System.Type\n      description: Read-only. The type that declared this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.\n  overload: System.Reflection.Emit.EnumBuilder.DeclaringType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)\n  commentId: M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)\n  id: DefineLiteral(System.String,System.Object)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: DefineLiteral(String, Object)\n  nameWithType: EnumBuilder.DefineLiteral(String, Object)\n  fullName: EnumBuilder.DefineLiteral(String, Object)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines the named static field in an enumeration type with the specified constant value.\n  remarks: \"The defined field will have the field attributes <xref:System.Reflection.FieldAttributes.Public>, <xref:System.Reflection.FieldAttributes.Static>, and <xref:System.Reflection.FieldAttributes.Literal> set.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0 and 1.1, it is necessary to define enumerations using <xref:System.Reflection.Emit.TypeBuilder> because <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements are of type <xref:System.Int32> instead of the enumeration type. In the .NET Framework version 2.0, <xref:System.Reflection.Emit.EnumBuilder> emits enumerations whose elements have the correct type.\"\n  example:\n  - \"The following code example demonstrates the construction of an enumeration within a dynamic assembly, using `EnumBuilder`. The example defines an enumeration named `Elevation`, with an underlying type of <xref:System.Int32>, and creates two elements: `Low`, with a value of 0, and `High`, with a value of 1. After the type has been created, the assembly is saved with the name `TempAssembly.dll`. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the contents of this assembly.  \\n  \\n> [!NOTE]\\n>  Prior to the .NET Framework version 2.0, this code example does not produce a correct enumeration.  \\n  \\n [!code-cpp[ModuleBuilder_DefineEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CPP/modulebuilder_defineenum.cpp#1)]\\n [!code-csharp[ModuleBuilder_DefineEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/ModuleBuilder_DefineEnum/CS/modulebuilder_defineenum.cs#1)]\\n [!code-vb[ModuleBuilder_DefineEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ModuleBuilder_DefineEnum/VB/modulebuilder_defineenum.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.FieldBuilder DefineLiteral (string literalName, object literalValue);\n    parameters:\n    - id: literalName\n      type: System.String\n      description: The name of the static field.\n    - id: literalValue\n      type: System.Object\n      description: The constant value of the literal.\n    return:\n      type: System.Reflection.Emit.FieldBuilder\n      description: The defined field.\n  overload: System.Reflection.Emit.EnumBuilder.DefineLiteral*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.FullName\n  commentId: P:System.Reflection.Emit.EnumBuilder.FullName\n  id: FullName\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: FullName\n  nameWithType: EnumBuilder.FullName\n  fullName: EnumBuilder.FullName\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the full path of this enum.\n  remarks: The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.\n  syntax:\n    content: public override string FullName { get; }\n    return:\n      type: System.String\n      description: Read-only. The full path of this enum.\n  overload: System.Reflection.Emit.EnumBuilder.FullName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GenericParameterAttributes\n  commentId: P:System.Reflection.Emit.EnumBuilder.GenericParameterAttributes\n  id: GenericParameterAttributes\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GenericParameterAttributes\n  nameWithType: EnumBuilder.GenericParameterAttributes\n  fullName: EnumBuilder.GenericParameterAttributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }\n    return:\n      type: System.Reflection.GenericParameterAttributes\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GenericParameterAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GenericParameterPosition\n  commentId: P:System.Reflection.Emit.EnumBuilder.GenericParameterPosition\n  id: GenericParameterPosition\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GenericParameterPosition\n  nameWithType: EnumBuilder.GenericParameterPosition\n  fullName: EnumBuilder.GenericParameterPosition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override int GenericParameterPosition { get; }\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GenericParameterPosition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GenericTypeArguments\n  commentId: P:System.Reflection.Emit.EnumBuilder.GenericTypeArguments\n  id: GenericTypeArguments\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GenericTypeArguments\n  nameWithType: EnumBuilder.GenericTypeArguments\n  fullName: EnumBuilder.GenericTypeArguments\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type[] GenericTypeArguments { get; }\n    return:\n      type: System.Type[]\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GenericTypeArguments*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetArrayRank\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetArrayRank\n  id: GetArrayRank\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetArrayRank()\n  nameWithType: EnumBuilder.GetArrayRank()\n  fullName: EnumBuilder.GetArrayRank()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override int GetArrayRank ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GetArrayRank*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl\n  id: GetAttributeFlagsImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetAttributeFlagsImpl()\n  nameWithType: EnumBuilder.GetAttributeFlagsImpl()\n  fullName: EnumBuilder.GetAttributeFlagsImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();\n    parameters: []\n    return:\n      type: System.Reflection.TypeAttributes\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: EnumBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: EnumBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.ConstructorInfo\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GetConstructorImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)\n  id: GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetConstructors(BindingFlags)\n  nameWithType: EnumBuilder.GetConstructors(BindingFlags)\n  fullName: EnumBuilder.GetConstructors(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the public and non-public constructors defined for this class, as specified.\n  remarks: As a workaround, to retrieve the constructor of a finished type, you can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.ConstructorInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetConstructors*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: EnumBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: EnumBuilder.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the custom attributes identified by the given type.\n  remarks: \"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=fullName> on the returned <xref:System.Type>.  \\n  \\n The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.  \\n  \\n [!code-cpp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CPP/enumbuilder_setcustomattribute1.cpp#2)]\\n [!code-csharp[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/CS/enumbuilder_setcustomattribute1.cs#2)]\\n [!code-vb[EnumBuilder_SetCustomAttribute1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute1/VB/enumbuilder_setcustomattribute1.vb#2)]\"\n  syntax:\n    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The `Type` object to which the custom attributes are applied.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: Returns an array of objects representing the attributes of this constructor that are of <xref href=\"System.Type\"></xref><code>attributeType</code>.\n  overload: System.Reflection.Emit.EnumBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: EnumBuilder.GetCustomAttributes(Boolean)\n  fullName: EnumBuilder.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the custom attributes defined for this constructor.\n  remarks: \"As a workaround, to retrieve the custom attributes of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.  \\n  \\n The following code sample illustrates the use of `GetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>.  \\n  \\n [!code-cpp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#1)]\\n [!code-csharp[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#1)]\\n [!code-vb[EnumBuilder_SetCustomAttribute2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#1)]\"\n  syntax:\n    content: public override object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: Returns an array of objects representing all the custom attributes of the constructor represented by this <xref href=\"System.Reflection.Emit.ConstructorBuilder\"></xref> instance.\n  overload: System.Reflection.Emit.EnumBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetElementType\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetElementType\n  id: GetElementType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetElementType()\n  nameWithType: EnumBuilder.GetElementType()\n  fullName: EnumBuilder.GetElementType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Calling this method always throws <xref href=\"System.NotSupportedException\"></xref>.\n  syntax:\n    content: public override Type GetElementType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: This method is not supported. No value is returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetElementType*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType\n  id: GetEnumUnderlyingType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetEnumUnderlyingType()\n  nameWithType: EnumBuilder.GetEnumUnderlyingType()\n  fullName: EnumBuilder.GetEnumUnderlyingType()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.\n  syntax:\n    content: public override Type GetEnumUnderlyingType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: The underlying type.\n  overload: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  id: GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetEvent(String, BindingFlags)\n  nameWithType: EnumBuilder.GetEvent(String, BindingFlags)\n  fullName: EnumBuilder.GetEvent(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the event with the specified name.\n  remarks: As a workaround, to retrieve the event of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the event to get.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.EventInfo\n      description: Returns an <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name. If there are no matches, `null` is returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetEvent*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetEvents\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetEvents\n  id: GetEvents\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetEvents()\n  nameWithType: EnumBuilder.GetEvents()\n  fullName: EnumBuilder.GetEvents()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the events for the public events declared or inherited by this type.\n  remarks: As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents ();\n    parameters: []\n    return:\n      type: System.Reflection.EventInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.\n  overload: System.Reflection.Emit.EnumBuilder.GetEvents*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)\n  id: GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetEvents(BindingFlags)\n  nameWithType: EnumBuilder.GetEvents(BindingFlags)\n  fullName: EnumBuilder.GetEvents(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public events that are declared by this type.\n  remarks: As a workaround, to retrieve the events of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type to retrieve the events.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Reflection.EventInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.\n  overload: System.Reflection.Emit.EnumBuilder.GetEvents*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  id: GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetField(String, BindingFlags)\n  nameWithType: EnumBuilder.GetField(String, BindingFlags)\n  fullName: EnumBuilder.GetField(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the field specified by the given name.\n  remarks: As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the field to get.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.FieldInfo\n      description: Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetField*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)\n  id: GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetFields(BindingFlags)\n  nameWithType: EnumBuilder.GetFields(BindingFlags)\n  fullName: EnumBuilder.GetFields(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public fields that are declared by this type.\n  remarks: \"As a workaround, to retrieve the field of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \\n  \\n The <xref:System.Reflection.Emit.EnumBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.\"\n  syntax:\n    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as InvokeMethod, NonPublic, and so on.\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.\n  overload: System.Reflection.Emit.EnumBuilder.GetFields*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints\n  id: GetGenericParameterConstraints\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetGenericParameterConstraints()\n  nameWithType: EnumBuilder.GetGenericParameterConstraints()\n  fullName: EnumBuilder.GetGenericParameterConstraints()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type[] GetGenericParameterConstraints ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition\n  id: GetGenericTypeDefinition\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetGenericTypeDefinition()\n  nameWithType: EnumBuilder.GetGenericTypeDefinition()\n  fullName: EnumBuilder.GetGenericTypeDefinition()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type GetGenericTypeDefinition ();\n    parameters: []\n    return:\n      type: System.Type\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)\n  id: GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetInterface(String, Boolean)\n  nameWithType: EnumBuilder.GetInterface(String, Boolean)\n  fullName: EnumBuilder.GetInterface(String, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.\n  remarks: As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override Type GetInterface (string name, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the interface.\n    - id: ignoreCase\n      type: System.Boolean\n      description: If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.\n    return:\n      type: System.Type\n      description: Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface. Returns null if no interface matching name is found.\n  overload: System.Reflection.Emit.EnumBuilder.GetInterface*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)\n  id: GetInterfaceMap(System.Type)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetInterfaceMap(Type)\n  nameWithType: EnumBuilder.GetInterfaceMap(Type)\n  fullName: EnumBuilder.GetInterfaceMap(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an interface mapping for the interface requested.\n  remarks: As a workaround, to retrieve the interface mapping types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);\n    parameters:\n    - id: interfaceType\n      type: System.Type\n      description: The type of the interface for which the interface mapping is to be retrieved.\n    return:\n      type: System.Reflection.InterfaceMapping\n      description: The requested interface mapping.\n  overload: System.Reflection.Emit.EnumBuilder.GetInterfaceMap*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The type does not implement the interface.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetInterfaces\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetInterfaces\n  id: GetInterfaces\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetInterfaces()\n  nameWithType: EnumBuilder.GetInterfaces()\n  fullName: EnumBuilder.GetInterfaces()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of all the interfaces implemented on this a class and its base classes.\n  remarks: As a workaround, to retrieve the interface of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override Type[] GetInterfaces ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces. If none are defined, an empty array is returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetInterfaces*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: EnumBuilder.GetMember(String, MemberTypes, BindingFlags)\n  fullName: EnumBuilder.GetMember(String, MemberTypes, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all members with the specified name, type, and binding that are declared or inherited by this type.\n  remarks: As a workaround, to retrieve the member of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the member.\n    - id: type\n      type: System.Reflection.MemberTypes\n      description: The type of member that is to be returned.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetMember*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)\n  id: GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetMembers(BindingFlags)\n  nameWithType: EnumBuilder.GetMembers(BindingFlags)\n  fullName: EnumBuilder.GetMembers(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the specified members declared or inherited by this type,.\n  remarks: As a workaround, to retrieve the members of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.\n  overload: System.Reflection.Emit.EnumBuilder.GetMembers*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: EnumBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: EnumBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: ''\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.MethodInfo\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GetMethodImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)\n  id: GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetMethods(BindingFlags)\n  nameWithType: EnumBuilder.GetMethods(BindingFlags)\n  fullName: EnumBuilder.GetMethods(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the public and non-public methods declared or inherited by this type, as specified.\n  remarks: As a workaround, to retrieve the methods of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetMethods*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  id: GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: EnumBuilder.GetNestedType(String, BindingFlags)\n  fullName: EnumBuilder.GetNestedType(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the specified nested type that is declared by this type.\n  remarks: As a workaround, to retrieve the nested type of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the name of the nested type to get.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: \"A bitmask comprised of one or more <xref href=\\\"System.Reflection.BindingFlags\\\"></xref> that specify how the search is conducted.  \\n  \\n -or-  \\n  \\n Zero, to conduct a case-sensitive search for public methods.\"\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the nested type that matches the specified requirements, if found; otherwise, `null`.\n  overload: System.Reflection.Emit.EnumBuilder.GetNestedType*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  id: GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: EnumBuilder.GetNestedTypes(BindingFlags)\n  fullName: EnumBuilder.GetNestedTypes(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public nested types that are declared or inherited by this type.\n  remarks: As a workaround, to retrieve the nested types of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Type[]\n      description: \"An array of <xref href=\\\"System.Type\\\"></xref> objects representing all the types nested within the current <xref href=\\\"System.Type\\\"></xref> that match the specified binding constraints.  \\n  \\n An empty array of type <xref href=\\\"System.Type\\\"></xref>, if no types are nested within the current <xref href=\\\"System.Type\\\"></xref>, or if none of the nested types match the binding constraints.\"\n  overload: System.Reflection.Emit.EnumBuilder.GetNestedTypes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)\n  id: GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetProperties(BindingFlags)\n  nameWithType: EnumBuilder.GetProperties(BindingFlags)\n  fullName: EnumBuilder.GetProperties(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the public and non-public properties declared or inherited by this type, as specified.\n  remarks: As a workaround, to retrieve the properties of a finished type, retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.PropertyInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned.\n  overload: System.Reflection.Emit.EnumBuilder.GetProperties*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: EnumBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: EnumBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: ''\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: returnType\n      type: System.Type\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.PropertyInfo\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.GetPropertyImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GUID\n  commentId: P:System.Reflection.Emit.EnumBuilder.GUID\n  id: GUID\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: GUID\n  nameWithType: EnumBuilder.GUID\n  fullName: EnumBuilder.GUID\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the GUID of this enum.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the use of the `GUID` property to reference the associated <xref:System.Guid> of the current `EnumBuilder`.  \\n  \\n [!code-cpp[EnumBuilder_Properties_4.cs#4](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_4.cs/CPP/enumbuilder_properties_4.cpp#4)]\\n [!code-csharp[EnumBuilder_Properties_4.cs#4](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_4.cs/CS/enumbuilder_properties_4.cs#4)]\\n [!code-vb[EnumBuilder_Properties_4.cs#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_4.cs/VB/enumbuilder_properties_4.vb#4)]\"\n  syntax:\n    content: public override Guid GUID { get; }\n    return:\n      type: System.Guid\n      description: Read-only. The GUID of this enum.\n  overload: System.Reflection.Emit.EnumBuilder.GUID*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.HasElementTypeImpl\n  id: HasElementTypeImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: HasElementTypeImpl()\n  nameWithType: EnumBuilder.HasElementTypeImpl()\n  fullName: EnumBuilder.HasElementTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool HasElementTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  commentId: M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: EnumBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: EnumBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the contraints of the specified binder and invocation attributes.\n  remarks: You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: The invocation attribute. This must be a bit flag from `BindingFlags`.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.\n    - id: target\n      type: System.Object\n      description: The object on which to invoke the specified member. If the member is static, this parameter is ignored.\n    - id: args\n      type: System.Object[]\n      description: An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An instance of `CultureInfo` used to govern the coercion of types. If this is null, the `CultureInfo` for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)\n    - id: namedParameters\n      type: System.String[]\n      description: Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.\n    return:\n      type: System.Object\n      description: Returns the return value of the invoked member.\n  overload: System.Reflection.Emit.EnumBuilder.InvokeMember*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.IsArrayImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsArrayImpl\n  id: IsArrayImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsArrayImpl()\n  nameWithType: EnumBuilder.IsArrayImpl()\n  fullName: EnumBuilder.IsArrayImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsArrayImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsArrayImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  id: IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: EnumBuilder.IsAssignableFrom(TypeInfo)\n  fullName: EnumBuilder.IsAssignableFrom(TypeInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether a specified <xref href=\"System.Reflection.TypeInfo\"></xref> object can be assigned to this object.\n  syntax:\n    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);\n    parameters:\n    - id: typeInfo\n      type: System.Reflection.TypeInfo\n      description: The object to test.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>typeInfo</code> can be assigned to this object; otherwise, `false`.'\n  overload: System.Reflection.Emit.EnumBuilder.IsAssignableFrom*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.IsByRefImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsByRefImpl\n  id: IsByRefImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsByRefImpl()\n  nameWithType: EnumBuilder.IsByRefImpl()\n  fullName: EnumBuilder.IsByRefImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsByRefImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsByRefImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl\n  id: IsCOMObjectImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsCOMObjectImpl()\n  nameWithType: EnumBuilder.IsCOMObjectImpl()\n  fullName: EnumBuilder.IsCOMObjectImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsCOMObjectImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType\n  id: IsConstructedGenericType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsConstructedGenericType\n  nameWithType: EnumBuilder.IsConstructedGenericType\n  fullName: EnumBuilder.IsConstructedGenericType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether this object represents a constructed generic type.\n  syntax:\n    content: public override bool IsConstructedGenericType { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this object represents a constructed generic type; otherwise, `false`.'\n  overload: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: EnumBuilder.IsDefined(Type, Boolean)\n  fullName: EnumBuilder.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Checks if the specified custom attribute type is defined.\n  remarks: As a workaround, to check if a custom attribute is defined for a finished type, retrieve the type using <xref:System.Type.GetType%2A> and call <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> on the returned <xref:System.Type>.\n  syntax:\n    content: public override bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The `Type` object to which the custom attributes are applied.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Boolean\n      description: '`true` if one or more instance of <code>attributeType</code> is defined on this member; otherwise, `false`.'\n  overload: System.Reflection.Emit.EnumBuilder.IsDefined*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported in types that are not complete.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.IsEnum\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsEnum\n  id: IsEnum\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsEnum\n  nameWithType: EnumBuilder.IsEnum\n  fullName: EnumBuilder.IsEnum\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsEnum { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsEnum*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericParameter\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsGenericParameter\n  id: IsGenericParameter\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsGenericParameter\n  nameWithType: EnumBuilder.IsGenericParameter\n  fullName: EnumBuilder.IsGenericParameter\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsGenericParameter { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsGenericParameter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericType\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsGenericType\n  id: IsGenericType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsGenericType\n  nameWithType: EnumBuilder.IsGenericType\n  fullName: EnumBuilder.IsGenericType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsGenericType { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsGenericType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition\n  id: IsGenericTypeDefinition\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsGenericTypeDefinition\n  nameWithType: EnumBuilder.IsGenericTypeDefinition\n  fullName: EnumBuilder.IsGenericTypeDefinition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsGenericTypeDefinition { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsPointerImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsPointerImpl\n  id: IsPointerImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsPointerImpl()\n  nameWithType: EnumBuilder.IsPointerImpl()\n  fullName: EnumBuilder.IsPointerImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsPointerImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsPointerImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl\n  id: IsPrimitiveImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsPrimitiveImpl()\n  nameWithType: EnumBuilder.IsPrimitiveImpl()\n  fullName: EnumBuilder.IsPrimitiveImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsPrimitiveImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsSerializable\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsSerializable\n  id: IsSerializable\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsSerializable\n  nameWithType: EnumBuilder.IsSerializable\n  fullName: EnumBuilder.IsSerializable\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsSerializable { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsSerializable*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsSZArray\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsSZArray\n  id: IsSZArray\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsSZArray\n  nameWithType: EnumBuilder.IsSZArray\n  fullName: EnumBuilder.IsSZArray\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsSZArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsSZArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsTypeDefinition\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition\n  id: IsTypeDefinition\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsTypeDefinition\n  nameWithType: EnumBuilder.IsTypeDefinition\n  fullName: EnumBuilder.IsTypeDefinition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsTypeDefinition { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl\n  commentId: M:System.Reflection.Emit.EnumBuilder.IsValueTypeImpl\n  id: IsValueTypeImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsValueTypeImpl()\n  nameWithType: EnumBuilder.IsValueTypeImpl()\n  fullName: EnumBuilder.IsValueTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsValueTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsVariableBoundArray\n  commentId: P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray\n  id: IsVariableBoundArray\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: IsVariableBoundArray\n  nameWithType: EnumBuilder.IsVariableBoundArray\n  fullName: EnumBuilder.IsVariableBoundArray\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsVariableBoundArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.IsVariableBoundArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType\n  commentId: M:System.Reflection.Emit.EnumBuilder.MakeArrayType\n  id: MakeArrayType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: MakeArrayType()\n  nameWithType: EnumBuilder.MakeArrayType()\n  fullName: EnumBuilder.MakeArrayType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.\n  syntax:\n    content: public override Type MakeArrayType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.\n  overload: System.Reflection.Emit.EnumBuilder.MakeArrayType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)\n  commentId: M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)\n  id: MakeArrayType(System.Int32)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: MakeArrayType(Int32)\n  nameWithType: EnumBuilder.MakeArrayType(Int32)\n  fullName: EnumBuilder.MakeArrayType(Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object representing an array of the current type, with the specified number of dimensions.\n  syntax:\n    content: public override Type MakeArrayType (int rank);\n    parameters:\n    - id: rank\n      type: System.Int32\n      description: The number of dimensions for the array. This number must be less than or equal to 32.\n    return:\n      type: System.Type\n      description: An object representing an array of the current type, with the specified number of dimensions.\n  overload: System.Reflection.Emit.EnumBuilder.MakeArrayType*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: <code>rank</code> is less than 1.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.MakeByRefType\n  commentId: M:System.Reflection.Emit.EnumBuilder.MakeByRefType\n  id: MakeByRefType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: MakeByRefType()\n  nameWithType: EnumBuilder.MakeByRefType()\n  fullName: EnumBuilder.MakeByRefType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).\n  syntax:\n    content: public override Type MakeByRefType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the current type when passed as a **ref** parameter (**ByRef** parameter in Visual Basic).\n  overload: System.Reflection.Emit.EnumBuilder.MakeByRefType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])\n  commentId: M:System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])\n  id: MakeGenericType(System.Type[])\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: MakeGenericType(Type[])\n  nameWithType: EnumBuilder.MakeGenericType(Type[])\n  fullName: EnumBuilder.MakeGenericType(Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type MakeGenericType (Type[] typeArguments);\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n      description: ''\n    return:\n      type: System.Type\n      description: ''\n  overload: System.Reflection.Emit.EnumBuilder.MakeGenericType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.MakePointerType\n  commentId: M:System.Reflection.Emit.EnumBuilder.MakePointerType\n  id: MakePointerType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: MakePointerType()\n  nameWithType: EnumBuilder.MakePointerType()\n  fullName: EnumBuilder.MakePointerType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents a pointer to the current type.\n  syntax:\n    content: public override Type MakePointerType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents a pointer to the current type.\n  overload: System.Reflection.Emit.EnumBuilder.MakePointerType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.Module\n  commentId: P:System.Reflection.Emit.EnumBuilder.Module\n  id: Module\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: Module\n  nameWithType: EnumBuilder.Module\n  fullName: EnumBuilder.Module\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref> definition.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the use of the `Module` property to reference the parent module of the current `EnumBuilder`.  \\n  \\n [!code-cpp[EnumBuilder_Properties_5#3](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#3)]\\n [!code-csharp[EnumBuilder_Properties_5#3](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#3)]\\n [!code-vb[EnumBuilder_Properties_5#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#3)]\"\n  syntax:\n    content: public override System.Reflection.Module Module { get; }\n    return:\n      type: System.Reflection.Module\n      description: Read-only. The dynamic module that contains this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref> definition.\n  overload: System.Reflection.Emit.EnumBuilder.Module*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.Name\n  commentId: P:System.Reflection.Emit.EnumBuilder.Name\n  id: Name\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: Name\n  nameWithType: EnumBuilder.Name\n  fullName: EnumBuilder.Name\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the name of this enum.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the use of the `Name` property to reference the name of the current `EnumBuilder`.  \\n  \\n [!code-cpp[EnumBuilder_Properties_5#4](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#4)]\\n [!code-csharp[EnumBuilder_Properties_5#4](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#4)]\\n [!code-vb[EnumBuilder_Properties_5#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#4)]\"\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: Read-only. The name of this enum.\n  overload: System.Reflection.Emit.EnumBuilder.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.Namespace\n  commentId: P:System.Reflection.Emit.EnumBuilder.Namespace\n  id: Namespace\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: EnumBuilder.Namespace\n  fullName: EnumBuilder.Namespace\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the namespace of this enum.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the use of the `Namespace` property to reference the associated namespace of the current `EnumBuilder`.  \\n  \\n [!code-cpp[EnumBuilder_Properties_5#5](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_Properties_5/CPP/enumbuilder_properties_5.cpp#5)]\\n [!code-csharp[EnumBuilder_Properties_5#5](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_Properties_5/CS/enumbuilder_properties_5.cs#5)]\\n [!code-vb[EnumBuilder_Properties_5#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_Properties_5/VB/enumbuilder_properties_5.vb#5)]\"\n  syntax:\n    content: public override string Namespace { get; }\n    return:\n      type: System.String\n      description: Read-only. The namespace of this enum.\n  overload: System.Reflection.Emit.EnumBuilder.Namespace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.ReflectedType\n  commentId: P:System.Reflection.Emit.EnumBuilder.ReflectedType\n  id: ReflectedType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: ReflectedType\n  nameWithType: EnumBuilder.ReflectedType\n  fullName: EnumBuilder.ReflectedType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the type that was used to obtain this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.\n  syntax:\n    content: public override Type ReflectedType { get; }\n    return:\n      type: System.Type\n      description: Read-only. The type that was used to obtain this <xref href=\"System.Reflection.Emit.EnumBuilder\"></xref>.\n  overload: System.Reflection.Emit.EnumBuilder.ReflectedType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  commentId: M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets a custom attribute using a custom attribute builder.\n  remarks: ''\n  example:\n  - \"The following code sample illustrates the use of `SetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>, passing a <xref:System.Reflection.Emit.CustomAttributeBuilder>.  \\n  \\n [!code-cpp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#2)]\\n [!code-csharp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#2)]\\n [!code-vb[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#2)]\"\n  syntax:\n    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);\n    parameters:\n    - id: customBuilder\n      type: System.Reflection.Emit.CustomAttributeBuilder\n      description: An instance of a helper class to define the custom attribute.\n  overload: System.Reflection.Emit.EnumBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>con</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  commentId: M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: EnumBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: EnumBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets a custom attribute using a specified custom attribute blob.\n  remarks: See the metadata specification in the ECMA Partition II documentation for details on how to format `binaryAttribute`. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  example:\n  - \"The following code sample illustrates the use of `SetCustomAttribute` in the context of <xref:System.Reflection.Emit.EnumBuilder>, passing a byte blob.  \\n  \\n [!code-cpp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/cpp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CPP/enumbuilder_setcustomattribute2.cpp#2)]\\n [!code-csharp[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/csharp/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/CS/enumbuilder_setcustomattribute2.cs#2)]\\n [!code-vb[EnumBuilder_SetCustomAttribute2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EnumBuilder_SetCustomAttribute2/VB/enumbuilder_setcustomattribute2.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);\n    parameters:\n    - id: con\n      type: System.Reflection.ConstructorInfo\n      description: The constructor for the custom attribute.\n    - id: binaryAttribute\n      type: System.Byte[]\n      description: A byte blob representing the attributes.\n  overload: System.Reflection.Emit.EnumBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>con</code> or <code>binaryAttribute</code> is `null`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.TypeHandle\n  commentId: P:System.Reflection.Emit.EnumBuilder.TypeHandle\n  id: TypeHandle\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: TypeHandle\n  nameWithType: EnumBuilder.TypeHandle\n  fullName: EnumBuilder.TypeHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Retrieves the internal handle for this enum.\n  remarks: \"You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \\n  \\n Use this handle to access the underlying metadata handle.\"\n  syntax:\n    content: public override RuntimeTypeHandle TypeHandle { get; }\n    return:\n      type: System.RuntimeTypeHandle\n      description: Read-only. The internal handle for this enum.\n  overload: System.Reflection.Emit.EnumBuilder.TypeHandle*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This property is not currently supported.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.TypeToken\n  commentId: P:System.Reflection.Emit.EnumBuilder.TypeToken\n  id: TypeToken\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: TypeToken\n  nameWithType: EnumBuilder.TypeToken\n  fullName: EnumBuilder.TypeToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the internal metadata type token of this enum.\n  syntax:\n    content: public System.Reflection.Emit.TypeToken TypeToken { get; }\n    return:\n      type: System.Reflection.Emit.TypeToken\n      description: Read-only. The type token of this enum.\n  overload: System.Reflection.Emit.EnumBuilder.TypeToken*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.UnderlyingField\n  commentId: P:System.Reflection.Emit.EnumBuilder.UnderlyingField\n  id: UnderlyingField\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: UnderlyingField\n  nameWithType: EnumBuilder.UnderlyingField\n  fullName: EnumBuilder.UnderlyingField\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the underlying field for this enum.\n  syntax:\n    content: public System.Reflection.Emit.FieldBuilder UnderlyingField { get; }\n    return:\n      type: System.Reflection.Emit.FieldBuilder\n      description: Read-only. The underlying field for this enum.\n  overload: System.Reflection.Emit.EnumBuilder.UnderlyingField*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType\n  commentId: P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType\n  id: UnderlyingSystemType\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: UnderlyingSystemType\n  nameWithType: EnumBuilder.UnderlyingSystemType\n  fullName: EnumBuilder.UnderlyingSystemType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the underlying system type for this enum.\n  syntax:\n    content: public override Type UnderlyingSystemType { get; }\n    return:\n      type: System.Type\n      description: Read-only. Returns the underlying system type.\n  overload: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: _EnumBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: EnumBuilder._EnumBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: EnumBuilder._EnumBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _EnumBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: _EnumBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: EnumBuilder._EnumBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: EnumBuilder._EnumBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _EnumBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: _EnumBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: EnumBuilder._EnumBuilder.GetTypeInfoCount(UInt32)\n  fullName: EnumBuilder._EnumBuilder.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _EnumBuilder.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.EnumBuilder\n  langs:\n  - csharp\n  name: _EnumBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: EnumBuilder._EnumBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: EnumBuilder._EnumBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _EnumBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: The method is called late-bound using the COM <code>IDispatch</code> interface.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.TypeInfo\n  parent: System.Reflection\n  isExternal: false\n  name: TypeInfo\n  nameWithType: TypeInfo\n  fullName: System.Reflection.TypeInfo\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Emit.EnumBuilder.#ctor\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: EnumBuilder()\n  nameWithType: EnumBuilder.EnumBuilder()\n  fullName: EnumBuilder.EnumBuilder()\n- uid: System.Reflection.Emit.EnumBuilder.Assembly\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Assembly\n  nameWithType: EnumBuilder.Assembly\n  fullName: EnumBuilder.Assembly\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: EnumBuilder.AssemblyQualifiedName\n  fullName: EnumBuilder.AssemblyQualifiedName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.EnumBuilder.Attributes\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: EnumBuilder.Attributes\n  fullName: EnumBuilder.Attributes\n- uid: System.Reflection.TypeAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: TypeAttributes\n  nameWithType: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n- uid: System.Reflection.Emit.EnumBuilder.BaseType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: BaseType\n  nameWithType: EnumBuilder.BaseType\n  fullName: EnumBuilder.BaseType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.EnumBuilder.ContainsGenericParameters\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: EnumBuilder.ContainsGenericParameters\n  fullName: EnumBuilder.ContainsGenericParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.EnumBuilder.CreateType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: CreateType()\n  nameWithType: EnumBuilder.CreateType()\n  fullName: EnumBuilder.CreateType()\n- uid: System.Reflection.Emit.EnumBuilder.CreateTypeInfo\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: CreateTypeInfo()\n  nameWithType: EnumBuilder.CreateTypeInfo()\n  fullName: EnumBuilder.CreateTypeInfo()\n- uid: System.Reflection.Emit.EnumBuilder.DeclaringMethod\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: DeclaringMethod\n  nameWithType: EnumBuilder.DeclaringMethod\n  fullName: EnumBuilder.DeclaringMethod\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Reflection.Emit.EnumBuilder.DeclaringType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: EnumBuilder.DeclaringType\n  fullName: EnumBuilder.DeclaringType\n- uid: System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: DefineLiteral(String, Object)\n  nameWithType: EnumBuilder.DefineLiteral(String, Object)\n  fullName: EnumBuilder.DefineLiteral(String, Object)\n- uid: System.Reflection.Emit.FieldBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: FieldBuilder\n  nameWithType: FieldBuilder\n  fullName: System.Reflection.Emit.FieldBuilder\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Reflection.Emit.EnumBuilder.FullName\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: FullName\n  nameWithType: EnumBuilder.FullName\n  fullName: EnumBuilder.FullName\n- uid: System.Reflection.Emit.EnumBuilder.GenericParameterAttributes\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: EnumBuilder.GenericParameterAttributes\n  fullName: EnumBuilder.GenericParameterAttributes\n- uid: System.Reflection.GenericParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: GenericParameterAttributes\n  fullName: System.Reflection.GenericParameterAttributes\n- uid: System.Reflection.Emit.EnumBuilder.GenericParameterPosition\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GenericParameterPosition\n  nameWithType: EnumBuilder.GenericParameterPosition\n  fullName: EnumBuilder.GenericParameterPosition\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.EnumBuilder.GenericTypeArguments\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GenericTypeArguments\n  nameWithType: EnumBuilder.GenericTypeArguments\n  fullName: EnumBuilder.GenericTypeArguments\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetArrayRank\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetArrayRank()\n  nameWithType: EnumBuilder.GetArrayRank()\n  fullName: EnumBuilder.GetArrayRank()\n- uid: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetAttributeFlagsImpl()\n  nameWithType: EnumBuilder.GetAttributeFlagsImpl()\n  fullName: EnumBuilder.GetAttributeFlagsImpl()\n- uid: System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: EnumBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: EnumBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.ParameterModifier\n  name: ParameterModifier\n  nameWithType: ParameterModifier\n  fullName: System.Reflection.ParameterModifier\n- uid: System.Reflection.ParameterModifier[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterModifier[]\n  nameWithType: ParameterModifier[]\n  fullName: System.Reflection.ParameterModifier[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    nameWithType: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetConstructors(BindingFlags)\n  nameWithType: EnumBuilder.GetConstructors(BindingFlags)\n  fullName: EnumBuilder.GetConstructors(BindingFlags)\n- uid: System.Reflection.ConstructorInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo[]\n  nameWithType: ConstructorInfo[]\n  fullName: System.Reflection.ConstructorInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    nameWithType: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: EnumBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: EnumBuilder.GetCustomAttributes(Type, Boolean)\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: EnumBuilder.GetCustomAttributes(Boolean)\n  fullName: EnumBuilder.GetCustomAttributes(Boolean)\n- uid: System.Reflection.Emit.EnumBuilder.GetElementType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetElementType()\n  nameWithType: EnumBuilder.GetElementType()\n  fullName: EnumBuilder.GetElementType()\n- uid: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetEnumUnderlyingType()\n  nameWithType: EnumBuilder.GetEnumUnderlyingType()\n  fullName: EnumBuilder.GetEnumUnderlyingType()\n- uid: System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetEvent(String, BindingFlags)\n  nameWithType: EnumBuilder.GetEvent(String, BindingFlags)\n  fullName: EnumBuilder.GetEvent(String, BindingFlags)\n- uid: System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n- uid: System.Reflection.Emit.EnumBuilder.GetEvents\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetEvents()\n  nameWithType: EnumBuilder.GetEvents()\n  fullName: EnumBuilder.GetEvents()\n- uid: System.Reflection.EventInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo[]\n  nameWithType: EventInfo[]\n  fullName: System.Reflection.EventInfo[]\n  spec.csharp:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    nameWithType: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetEvents(BindingFlags)\n  nameWithType: EnumBuilder.GetEvents(BindingFlags)\n  fullName: EnumBuilder.GetEvents(BindingFlags)\n- uid: System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetField(String, BindingFlags)\n  nameWithType: EnumBuilder.GetField(String, BindingFlags)\n  fullName: EnumBuilder.GetField(String, BindingFlags)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetFields(BindingFlags)\n  nameWithType: EnumBuilder.GetFields(BindingFlags)\n  fullName: EnumBuilder.GetFields(BindingFlags)\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo[]\n  nameWithType: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetGenericParameterConstraints()\n  nameWithType: EnumBuilder.GetGenericParameterConstraints()\n  fullName: EnumBuilder.GetGenericParameterConstraints()\n- uid: System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetGenericTypeDefinition()\n  nameWithType: EnumBuilder.GetGenericTypeDefinition()\n  fullName: EnumBuilder.GetGenericTypeDefinition()\n- uid: System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetInterface(String, Boolean)\n  nameWithType: EnumBuilder.GetInterface(String, Boolean)\n  fullName: EnumBuilder.GetInterface(String, Boolean)\n- uid: System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetInterfaceMap(Type)\n  nameWithType: EnumBuilder.GetInterfaceMap(Type)\n  fullName: EnumBuilder.GetInterfaceMap(Type)\n- uid: System.Reflection.InterfaceMapping\n  parent: System.Reflection\n  isExternal: false\n  name: InterfaceMapping\n  nameWithType: InterfaceMapping\n  fullName: System.Reflection.InterfaceMapping\n- uid: System.Reflection.Emit.EnumBuilder.GetInterfaces\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetInterfaces()\n  nameWithType: EnumBuilder.GetInterfaces()\n  fullName: EnumBuilder.GetInterfaces()\n- uid: System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: EnumBuilder.GetMember(String, MemberTypes, BindingFlags)\n  fullName: EnumBuilder.GetMember(String, MemberTypes, BindingFlags)\n- uid: System.Reflection.MemberInfo\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Reflection.MemberInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo[]\n  nameWithType: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMembers(BindingFlags)\n  nameWithType: EnumBuilder.GetMembers(BindingFlags)\n  fullName: EnumBuilder.GetMembers(BindingFlags)\n- uid: System.Reflection.Emit.EnumBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: EnumBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: EnumBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMethods(BindingFlags)\n  nameWithType: EnumBuilder.GetMethods(BindingFlags)\n  fullName: EnumBuilder.GetMethods(BindingFlags)\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: EnumBuilder.GetNestedType(String, BindingFlags)\n  fullName: EnumBuilder.GetNestedType(String, BindingFlags)\n- uid: System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: EnumBuilder.GetNestedTypes(BindingFlags)\n  fullName: EnumBuilder.GetNestedTypes(BindingFlags)\n- uid: System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetProperties(BindingFlags)\n  nameWithType: EnumBuilder.GetProperties(BindingFlags)\n  fullName: EnumBuilder.GetProperties(BindingFlags)\n- uid: System.Reflection.PropertyInfo\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.PropertyInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo[]\n  nameWithType: PropertyInfo[]\n  fullName: System.Reflection.PropertyInfo[]\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: EnumBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: EnumBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.Emit.EnumBuilder.GUID\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GUID\n  nameWithType: EnumBuilder.GUID\n  fullName: EnumBuilder.GUID\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: HasElementTypeImpl()\n  nameWithType: EnumBuilder.HasElementTypeImpl()\n  fullName: EnumBuilder.HasElementTypeImpl()\n- uid: System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: EnumBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: EnumBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.IsArrayImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsArrayImpl()\n  nameWithType: EnumBuilder.IsArrayImpl()\n  fullName: EnumBuilder.IsArrayImpl()\n- uid: System.Reflection.Emit.EnumBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: EnumBuilder.IsAssignableFrom(TypeInfo)\n  fullName: EnumBuilder.IsAssignableFrom(TypeInfo)\n- uid: System.Reflection.Emit.EnumBuilder.IsByRefImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsByRefImpl()\n  nameWithType: EnumBuilder.IsByRefImpl()\n  fullName: EnumBuilder.IsByRefImpl()\n- uid: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsCOMObjectImpl()\n  nameWithType: EnumBuilder.IsCOMObjectImpl()\n  fullName: EnumBuilder.IsCOMObjectImpl()\n- uid: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: EnumBuilder.IsConstructedGenericType\n  fullName: EnumBuilder.IsConstructedGenericType\n- uid: System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: EnumBuilder.IsDefined(Type, Boolean)\n  fullName: EnumBuilder.IsDefined(Type, Boolean)\n- uid: System.Reflection.Emit.EnumBuilder.IsEnum\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsEnum\n  nameWithType: EnumBuilder.IsEnum\n  fullName: EnumBuilder.IsEnum\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericParameter\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsGenericParameter\n  nameWithType: EnumBuilder.IsGenericParameter\n  fullName: EnumBuilder.IsGenericParameter\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsGenericType\n  nameWithType: EnumBuilder.IsGenericType\n  fullName: EnumBuilder.IsGenericType\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsGenericTypeDefinition\n  nameWithType: EnumBuilder.IsGenericTypeDefinition\n  fullName: EnumBuilder.IsGenericTypeDefinition\n- uid: System.Reflection.Emit.EnumBuilder.IsPointerImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsPointerImpl()\n  nameWithType: EnumBuilder.IsPointerImpl()\n  fullName: EnumBuilder.IsPointerImpl()\n- uid: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsPrimitiveImpl()\n  nameWithType: EnumBuilder.IsPrimitiveImpl()\n  fullName: EnumBuilder.IsPrimitiveImpl()\n- uid: System.Reflection.Emit.EnumBuilder.IsSerializable\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsSerializable\n  nameWithType: EnumBuilder.IsSerializable\n  fullName: EnumBuilder.IsSerializable\n- uid: System.Reflection.Emit.EnumBuilder.IsSZArray\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsSZArray\n  nameWithType: EnumBuilder.IsSZArray\n  fullName: EnumBuilder.IsSZArray\n- uid: System.Reflection.Emit.EnumBuilder.IsTypeDefinition\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: EnumBuilder.IsTypeDefinition\n  fullName: EnumBuilder.IsTypeDefinition\n- uid: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsValueTypeImpl()\n  nameWithType: EnumBuilder.IsValueTypeImpl()\n  fullName: EnumBuilder.IsValueTypeImpl()\n- uid: System.Reflection.Emit.EnumBuilder.IsVariableBoundArray\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: EnumBuilder.IsVariableBoundArray\n  fullName: EnumBuilder.IsVariableBoundArray\n- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakeArrayType()\n  nameWithType: EnumBuilder.MakeArrayType()\n  fullName: EnumBuilder.MakeArrayType()\n- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakeArrayType(Int32)\n  nameWithType: EnumBuilder.MakeArrayType(Int32)\n  fullName: EnumBuilder.MakeArrayType(Int32)\n- uid: System.Reflection.Emit.EnumBuilder.MakeByRefType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakeByRefType()\n  nameWithType: EnumBuilder.MakeByRefType()\n  fullName: EnumBuilder.MakeByRefType()\n- uid: System.Reflection.Emit.EnumBuilder.MakeGenericType(System.Type[])\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakeGenericType(Type[])\n  nameWithType: EnumBuilder.MakeGenericType(Type[])\n  fullName: EnumBuilder.MakeGenericType(Type[])\n- uid: System.Reflection.Emit.EnumBuilder.MakePointerType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakePointerType()\n  nameWithType: EnumBuilder.MakePointerType()\n  fullName: EnumBuilder.MakePointerType()\n- uid: System.Reflection.Emit.EnumBuilder.Module\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Module\n  nameWithType: EnumBuilder.Module\n  fullName: EnumBuilder.Module\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Emit.EnumBuilder.Name\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Name\n  nameWithType: EnumBuilder.Name\n  fullName: EnumBuilder.Name\n- uid: System.Reflection.Emit.EnumBuilder.Namespace\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Namespace\n  nameWithType: EnumBuilder.Namespace\n  fullName: EnumBuilder.Namespace\n- uid: System.Reflection.Emit.EnumBuilder.ReflectedType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: EnumBuilder.ReflectedType\n  fullName: EnumBuilder.ReflectedType\n- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: EnumBuilder.SetCustomAttribute(CustomAttributeBuilder)\n- uid: System.Reflection.Emit.CustomAttributeBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: CustomAttributeBuilder\n  nameWithType: CustomAttributeBuilder\n  fullName: System.Reflection.Emit.CustomAttributeBuilder\n- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: EnumBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: EnumBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.EnumBuilder.TypeHandle\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: TypeHandle\n  nameWithType: EnumBuilder.TypeHandle\n  fullName: EnumBuilder.TypeHandle\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.EnumBuilder.TypeToken\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: TypeToken\n  nameWithType: EnumBuilder.TypeToken\n  fullName: EnumBuilder.TypeToken\n- uid: System.Reflection.Emit.TypeToken\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: TypeToken\n  nameWithType: TypeToken\n  fullName: System.Reflection.Emit.TypeToken\n- uid: System.Reflection.Emit.EnumBuilder.UnderlyingField\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: UnderlyingField\n  nameWithType: EnumBuilder.UnderlyingField\n  fullName: EnumBuilder.UnderlyingField\n- uid: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: EnumBuilder.UnderlyingSystemType\n  fullName: EnumBuilder.UnderlyingSystemType\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: _EnumBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: EnumBuilder._EnumBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: EnumBuilder._EnumBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: _EnumBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: EnumBuilder._EnumBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: EnumBuilder._EnumBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: _EnumBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: EnumBuilder._EnumBuilder.GetTypeInfoCount(UInt32)\n  fullName: EnumBuilder._EnumBuilder.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: _EnumBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: EnumBuilder._EnumBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: EnumBuilder._EnumBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.EnumBuilder.#ctor*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: EnumBuilder\n  nameWithType: EnumBuilder.EnumBuilder\n  fullName: EnumBuilder.EnumBuilder\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.Assembly*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Assembly\n  nameWithType: EnumBuilder.Assembly\n  fullName: EnumBuilder.Assembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: EnumBuilder.AssemblyQualifiedName\n  fullName: EnumBuilder.AssemblyQualifiedName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.Attributes*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: EnumBuilder.Attributes\n  fullName: EnumBuilder.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.BaseType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: BaseType\n  nameWithType: EnumBuilder.BaseType\n  fullName: EnumBuilder.BaseType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.ContainsGenericParameters*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: EnumBuilder.ContainsGenericParameters\n  fullName: EnumBuilder.ContainsGenericParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.CreateType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: CreateType\n  nameWithType: EnumBuilder.CreateType\n  fullName: EnumBuilder.CreateType\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.CreateTypeInfo*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: CreateTypeInfo\n  nameWithType: EnumBuilder.CreateTypeInfo\n  fullName: EnumBuilder.CreateTypeInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.DeclaringMethod*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: DeclaringMethod\n  nameWithType: EnumBuilder.DeclaringMethod\n  fullName: EnumBuilder.DeclaringMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.DeclaringType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: EnumBuilder.DeclaringType\n  fullName: EnumBuilder.DeclaringType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.DefineLiteral*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: DefineLiteral\n  nameWithType: EnumBuilder.DefineLiteral\n  fullName: EnumBuilder.DefineLiteral\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.FullName*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: FullName\n  nameWithType: EnumBuilder.FullName\n  fullName: EnumBuilder.FullName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GenericParameterAttributes*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: EnumBuilder.GenericParameterAttributes\n  fullName: EnumBuilder.GenericParameterAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GenericParameterPosition*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GenericParameterPosition\n  nameWithType: EnumBuilder.GenericParameterPosition\n  fullName: EnumBuilder.GenericParameterPosition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GenericTypeArguments*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GenericTypeArguments\n  nameWithType: EnumBuilder.GenericTypeArguments\n  fullName: EnumBuilder.GenericTypeArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetArrayRank*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetArrayRank\n  nameWithType: EnumBuilder.GetArrayRank\n  fullName: EnumBuilder.GetArrayRank\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetAttributeFlagsImpl\n  nameWithType: EnumBuilder.GetAttributeFlagsImpl\n  fullName: EnumBuilder.GetAttributeFlagsImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetConstructorImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetConstructorImpl\n  nameWithType: EnumBuilder.GetConstructorImpl\n  fullName: EnumBuilder.GetConstructorImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetConstructors*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetConstructors\n  nameWithType: EnumBuilder.GetConstructors\n  fullName: EnumBuilder.GetConstructors\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetCustomAttributes*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: EnumBuilder.GetCustomAttributes\n  fullName: EnumBuilder.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetElementType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetElementType\n  nameWithType: EnumBuilder.GetElementType\n  fullName: EnumBuilder.GetElementType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetEnumUnderlyingType\n  nameWithType: EnumBuilder.GetEnumUnderlyingType\n  fullName: EnumBuilder.GetEnumUnderlyingType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetEvent*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetEvent\n  nameWithType: EnumBuilder.GetEvent\n  fullName: EnumBuilder.GetEvent\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetEvents*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetEvents\n  nameWithType: EnumBuilder.GetEvents\n  fullName: EnumBuilder.GetEvents\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetField*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetField\n  nameWithType: EnumBuilder.GetField\n  fullName: EnumBuilder.GetField\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetFields*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetFields\n  nameWithType: EnumBuilder.GetFields\n  fullName: EnumBuilder.GetFields\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetGenericParameterConstraints*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetGenericParameterConstraints\n  nameWithType: EnumBuilder.GetGenericParameterConstraints\n  fullName: EnumBuilder.GetGenericParameterConstraints\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetGenericTypeDefinition*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetGenericTypeDefinition\n  nameWithType: EnumBuilder.GetGenericTypeDefinition\n  fullName: EnumBuilder.GetGenericTypeDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetInterface*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetInterface\n  nameWithType: EnumBuilder.GetInterface\n  fullName: EnumBuilder.GetInterface\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetInterfaceMap*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetInterfaceMap\n  nameWithType: EnumBuilder.GetInterfaceMap\n  fullName: EnumBuilder.GetInterfaceMap\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetInterfaces*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetInterfaces\n  nameWithType: EnumBuilder.GetInterfaces\n  fullName: EnumBuilder.GetInterfaces\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetMember*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMember\n  nameWithType: EnumBuilder.GetMember\n  fullName: EnumBuilder.GetMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetMembers*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMembers\n  nameWithType: EnumBuilder.GetMembers\n  fullName: EnumBuilder.GetMembers\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetMethodImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMethodImpl\n  nameWithType: EnumBuilder.GetMethodImpl\n  fullName: EnumBuilder.GetMethodImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetMethods*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetMethods\n  nameWithType: EnumBuilder.GetMethods\n  fullName: EnumBuilder.GetMethods\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetNestedType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetNestedType\n  nameWithType: EnumBuilder.GetNestedType\n  fullName: EnumBuilder.GetNestedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetNestedTypes*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetNestedTypes\n  nameWithType: EnumBuilder.GetNestedTypes\n  fullName: EnumBuilder.GetNestedTypes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetProperties*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetProperties\n  nameWithType: EnumBuilder.GetProperties\n  fullName: EnumBuilder.GetProperties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GetPropertyImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GetPropertyImpl\n  nameWithType: EnumBuilder.GetPropertyImpl\n  fullName: EnumBuilder.GetPropertyImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.GUID*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: GUID\n  nameWithType: EnumBuilder.GUID\n  fullName: EnumBuilder.GUID\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.HasElementTypeImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: HasElementTypeImpl\n  nameWithType: EnumBuilder.HasElementTypeImpl\n  fullName: EnumBuilder.HasElementTypeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.InvokeMember*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: InvokeMember\n  nameWithType: EnumBuilder.InvokeMember\n  fullName: EnumBuilder.InvokeMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsArrayImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsArrayImpl\n  nameWithType: EnumBuilder.IsArrayImpl\n  fullName: EnumBuilder.IsArrayImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsAssignableFrom*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsAssignableFrom\n  nameWithType: EnumBuilder.IsAssignableFrom\n  fullName: EnumBuilder.IsAssignableFrom\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsByRefImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsByRefImpl\n  nameWithType: EnumBuilder.IsByRefImpl\n  fullName: EnumBuilder.IsByRefImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsCOMObjectImpl\n  nameWithType: EnumBuilder.IsCOMObjectImpl\n  fullName: EnumBuilder.IsCOMObjectImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsConstructedGenericType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: EnumBuilder.IsConstructedGenericType\n  fullName: EnumBuilder.IsConstructedGenericType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsDefined*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsDefined\n  nameWithType: EnumBuilder.IsDefined\n  fullName: EnumBuilder.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsEnum*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsEnum\n  nameWithType: EnumBuilder.IsEnum\n  fullName: EnumBuilder.IsEnum\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericParameter*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsGenericParameter\n  nameWithType: EnumBuilder.IsGenericParameter\n  fullName: EnumBuilder.IsGenericParameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsGenericType\n  nameWithType: EnumBuilder.IsGenericType\n  fullName: EnumBuilder.IsGenericType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsGenericTypeDefinition*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsGenericTypeDefinition\n  nameWithType: EnumBuilder.IsGenericTypeDefinition\n  fullName: EnumBuilder.IsGenericTypeDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsPointerImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsPointerImpl\n  nameWithType: EnumBuilder.IsPointerImpl\n  fullName: EnumBuilder.IsPointerImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsPrimitiveImpl\n  nameWithType: EnumBuilder.IsPrimitiveImpl\n  fullName: EnumBuilder.IsPrimitiveImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsSerializable*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsSerializable\n  nameWithType: EnumBuilder.IsSerializable\n  fullName: EnumBuilder.IsSerializable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsSZArray*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsSZArray\n  nameWithType: EnumBuilder.IsSZArray\n  fullName: EnumBuilder.IsSZArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsTypeDefinition*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: EnumBuilder.IsTypeDefinition\n  fullName: EnumBuilder.IsTypeDefinition\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsValueTypeImpl*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsValueTypeImpl\n  nameWithType: EnumBuilder.IsValueTypeImpl\n  fullName: EnumBuilder.IsValueTypeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.IsVariableBoundArray*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: EnumBuilder.IsVariableBoundArray\n  fullName: EnumBuilder.IsVariableBoundArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.MakeArrayType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakeArrayType\n  nameWithType: EnumBuilder.MakeArrayType\n  fullName: EnumBuilder.MakeArrayType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.MakeByRefType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakeByRefType\n  nameWithType: EnumBuilder.MakeByRefType\n  fullName: EnumBuilder.MakeByRefType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.MakeGenericType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakeGenericType\n  nameWithType: EnumBuilder.MakeGenericType\n  fullName: EnumBuilder.MakeGenericType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.MakePointerType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: MakePointerType\n  nameWithType: EnumBuilder.MakePointerType\n  fullName: EnumBuilder.MakePointerType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.Module*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Module\n  nameWithType: EnumBuilder.Module\n  fullName: EnumBuilder.Module\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.Name*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Name\n  nameWithType: EnumBuilder.Name\n  fullName: EnumBuilder.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.Namespace*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: Namespace\n  nameWithType: EnumBuilder.Namespace\n  fullName: EnumBuilder.Namespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.ReflectedType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: EnumBuilder.ReflectedType\n  fullName: EnumBuilder.ReflectedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.SetCustomAttribute*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: SetCustomAttribute\n  nameWithType: EnumBuilder.SetCustomAttribute\n  fullName: EnumBuilder.SetCustomAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.TypeHandle*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: TypeHandle\n  nameWithType: EnumBuilder.TypeHandle\n  fullName: EnumBuilder.TypeHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.TypeToken*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: TypeToken\n  nameWithType: EnumBuilder.TypeToken\n  fullName: EnumBuilder.TypeToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.UnderlyingField*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: UnderlyingField\n  nameWithType: EnumBuilder.UnderlyingField\n  fullName: EnumBuilder.UnderlyingField\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.UnderlyingSystemType*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: EnumBuilder.UnderlyingSystemType\n  fullName: EnumBuilder.UnderlyingSystemType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetIDsOfNames*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames\n  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames\n  fullName: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfo*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._EnumBuilder.GetTypeInfo\n  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfo\n  fullName: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#GetTypeInfoCount*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount\n  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount\n  fullName: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.Emit.EnumBuilder.System#Runtime#InteropServices#_EnumBuilder#Invoke*\n  parent: System.Reflection.Emit.EnumBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._EnumBuilder.Invoke\n  nameWithType: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.Invoke\n  fullName: EnumBuilder.System.Runtime.InteropServices._EnumBuilder.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/EnumBuilder.xml\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: MemberInfo.Equals(Object)\n  fullName: MemberInfo.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: MemberInfo.GetHashCode()\n  fullName: MemberInfo.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.TypeInfo.MemberType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: TypeInfo.MemberType\n  fullName: TypeInfo.MemberType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.TypeInfo.AsType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: AsType()\n  nameWithType: TypeInfo.AsType()\n  fullName: TypeInfo.AsType()\n- uid: System.Reflection.TypeInfo.DeclaredConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredConstructors\n  nameWithType: TypeInfo.DeclaredConstructors\n  fullName: TypeInfo.DeclaredConstructors\n- uid: System.Reflection.TypeInfo.DeclaredEvents\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredEvents\n  nameWithType: TypeInfo.DeclaredEvents\n  fullName: TypeInfo.DeclaredEvents\n- uid: System.Reflection.TypeInfo.DeclaredFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredFields\n  nameWithType: TypeInfo.DeclaredFields\n  fullName: TypeInfo.DeclaredFields\n- uid: System.Reflection.TypeInfo.DeclaredMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMembers\n  nameWithType: TypeInfo.DeclaredMembers\n  fullName: TypeInfo.DeclaredMembers\n- uid: System.Reflection.TypeInfo.DeclaredMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMethods\n  nameWithType: TypeInfo.DeclaredMethods\n  fullName: TypeInfo.DeclaredMethods\n- uid: System.Reflection.TypeInfo.DeclaredNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredNestedTypes\n  nameWithType: TypeInfo.DeclaredNestedTypes\n  fullName: TypeInfo.DeclaredNestedTypes\n- uid: System.Reflection.TypeInfo.DeclaredProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredProperties\n  nameWithType: TypeInfo.DeclaredProperties\n  fullName: TypeInfo.DeclaredProperties\n- uid: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindInterfaces(TypeFilter, Object)\n  nameWithType: TypeInfo.FindInterfaces(TypeFilter, Object)\n  fullName: TypeInfo.FindInterfaces(TypeFilter, Object)\n- uid: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  nameWithType: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  fullName: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n- uid: System.Reflection.TypeInfo.GenericTypeParameters\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GenericTypeParameters\n  nameWithType: TypeInfo.GenericTypeParameters\n  fullName: TypeInfo.GenericTypeParameters\n- uid: System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructor(Type[])\n  nameWithType: TypeInfo.GetConstructor(Type[])\n  fullName: TypeInfo.GetConstructor(Type[])\n- uid: System.Reflection.TypeInfo.GetConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructors()\n  nameWithType: TypeInfo.GetConstructors()\n  fullName: TypeInfo.GetConstructors()\n- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredEvent(String)\n  nameWithType: TypeInfo.GetDeclaredEvent(String)\n  fullName: TypeInfo.GetDeclaredEvent(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredField(String)\n  nameWithType: TypeInfo.GetDeclaredField(String)\n  fullName: TypeInfo.GetDeclaredField(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethod(String)\n  nameWithType: TypeInfo.GetDeclaredMethod(String)\n  fullName: TypeInfo.GetDeclaredMethod(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethods(String)\n  nameWithType: TypeInfo.GetDeclaredMethods(String)\n  fullName: TypeInfo.GetDeclaredMethods(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredNestedType(String)\n  nameWithType: TypeInfo.GetDeclaredNestedType(String)\n  fullName: TypeInfo.GetDeclaredNestedType(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredProperty(String)\n  nameWithType: TypeInfo.GetDeclaredProperty(String)\n  fullName: TypeInfo.GetDeclaredProperty(String)\n- uid: System.Reflection.TypeInfo.GetDefaultMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDefaultMembers()\n  nameWithType: TypeInfo.GetDefaultMembers()\n  fullName: TypeInfo.GetDefaultMembers()\n- uid: System.Reflection.TypeInfo.GetEnumName(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumName(Object)\n  nameWithType: TypeInfo.GetEnumName(Object)\n  fullName: TypeInfo.GetEnumName(Object)\n- uid: System.Reflection.TypeInfo.GetEnumNames\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumNames()\n  nameWithType: TypeInfo.GetEnumNames()\n  fullName: TypeInfo.GetEnumNames()\n- uid: System.Reflection.TypeInfo.GetEnumValues\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumValues()\n  nameWithType: TypeInfo.GetEnumValues()\n  fullName: TypeInfo.GetEnumValues()\n- uid: System.Reflection.TypeInfo.GetEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEvent(String)\n  nameWithType: TypeInfo.GetEvent(String)\n  fullName: TypeInfo.GetEvent(String)\n- uid: System.Reflection.TypeInfo.GetField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetField(String)\n  nameWithType: TypeInfo.GetField(String)\n  fullName: TypeInfo.GetField(String)\n- uid: System.Reflection.TypeInfo.GetFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetFields()\n  nameWithType: TypeInfo.GetFields()\n  fullName: TypeInfo.GetFields()\n- uid: System.Reflection.TypeInfo.GetGenericArguments\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: TypeInfo.GetGenericArguments()\n  fullName: TypeInfo.GetGenericArguments()\n- uid: System.Reflection.TypeInfo.GetInterface(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetInterface(String)\n  nameWithType: TypeInfo.GetInterface(String)\n  fullName: TypeInfo.GetInterface(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String)\n  nameWithType: TypeInfo.GetMember(String)\n  fullName: TypeInfo.GetMember(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String, BindingFlags)\n  nameWithType: TypeInfo.GetMember(String, BindingFlags)\n  fullName: TypeInfo.GetMember(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMembers()\n  nameWithType: TypeInfo.GetMembers()\n  fullName: TypeInfo.GetMembers()\n- uid: System.Reflection.TypeInfo.GetMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String)\n  nameWithType: TypeInfo.GetMethod(String)\n  fullName: TypeInfo.GetMethod(String)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, BindingFlags)\n  nameWithType: TypeInfo.GetMethod(String, BindingFlags)\n  fullName: TypeInfo.GetMethod(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[])\n  nameWithType: TypeInfo.GetMethod(String, Type[])\n  fullName: TypeInfo.GetMethod(String, Type[])\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.GetMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethods()\n  nameWithType: TypeInfo.GetMethods()\n  fullName: TypeInfo.GetMethods()\n- uid: System.Reflection.TypeInfo.GetNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedType(String)\n  nameWithType: TypeInfo.GetNestedType(String)\n  fullName: TypeInfo.GetNestedType(String)\n- uid: System.Reflection.TypeInfo.GetNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedTypes()\n  nameWithType: TypeInfo.GetNestedTypes()\n  fullName: TypeInfo.GetNestedTypes()\n- uid: System.Reflection.TypeInfo.GetProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperties()\n  nameWithType: TypeInfo.GetProperties()\n  fullName: TypeInfo.GetProperties()\n- uid: System.Reflection.TypeInfo.GetProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String)\n  nameWithType: TypeInfo.GetProperty(String)\n  fullName: TypeInfo.GetProperty(String)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, BindingFlags)\n  nameWithType: TypeInfo.GetProperty(String, BindingFlags)\n  fullName: TypeInfo.GetProperty(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type)\n  nameWithType: TypeInfo.GetProperty(String, Type)\n  fullName: TypeInfo.GetProperty(String, Type)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type[])\n  fullName: TypeInfo.GetProperty(String, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.HasElementType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: HasElementType\n  nameWithType: TypeInfo.HasElementType\n  fullName: TypeInfo.HasElementType\n- uid: System.Reflection.TypeInfo.ImplementedInterfaces\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: ImplementedInterfaces\n  nameWithType: TypeInfo.ImplementedInterfaces\n  fullName: TypeInfo.ImplementedInterfaces\n- uid: System.Reflection.TypeInfo.IsAbstract\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAbstract\n  nameWithType: TypeInfo.IsAbstract\n  fullName: TypeInfo.IsAbstract\n- uid: System.Reflection.TypeInfo.IsAnsiClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAnsiClass\n  nameWithType: TypeInfo.IsAnsiClass\n  fullName: TypeInfo.IsAnsiClass\n- uid: System.Reflection.TypeInfo.IsArray\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsArray\n  nameWithType: TypeInfo.IsArray\n  fullName: TypeInfo.IsArray\n- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAssignableFrom(Type)\n  nameWithType: TypeInfo.IsAssignableFrom(Type)\n  fullName: TypeInfo.IsAssignableFrom(Type)\n- uid: System.Reflection.TypeInfo.IsAutoClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoClass\n  nameWithType: TypeInfo.IsAutoClass\n  fullName: TypeInfo.IsAutoClass\n- uid: System.Reflection.TypeInfo.IsAutoLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoLayout\n  nameWithType: TypeInfo.IsAutoLayout\n  fullName: TypeInfo.IsAutoLayout\n- uid: System.Reflection.TypeInfo.IsByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsByRef\n  nameWithType: TypeInfo.IsByRef\n  fullName: TypeInfo.IsByRef\n- uid: System.Reflection.TypeInfo.IsClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsClass\n  nameWithType: TypeInfo.IsClass\n  fullName: TypeInfo.IsClass\n- uid: System.Reflection.TypeInfo.IsCOMObject\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsCOMObject\n  nameWithType: TypeInfo.IsCOMObject\n  fullName: TypeInfo.IsCOMObject\n- uid: System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEnumDefined(Object)\n  nameWithType: TypeInfo.IsEnumDefined(Object)\n  fullName: TypeInfo.IsEnumDefined(Object)\n- uid: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEquivalentTo(Type)\n  nameWithType: TypeInfo.IsEquivalentTo(Type)\n  fullName: TypeInfo.IsEquivalentTo(Type)\n- uid: System.Reflection.TypeInfo.IsExplicitLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsExplicitLayout\n  nameWithType: TypeInfo.IsExplicitLayout\n  fullName: TypeInfo.IsExplicitLayout\n- uid: System.Reflection.TypeInfo.IsImport\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsImport\n  nameWithType: TypeInfo.IsImport\n  fullName: TypeInfo.IsImport\n- uid: System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsInstanceOfType(Object)\n  nameWithType: TypeInfo.IsInstanceOfType(Object)\n  fullName: TypeInfo.IsInstanceOfType(Object)\n- uid: System.Reflection.TypeInfo.IsInterface\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsInterface\n  nameWithType: TypeInfo.IsInterface\n  fullName: TypeInfo.IsInterface\n- uid: System.Reflection.TypeInfo.IsLayoutSequential\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsLayoutSequential\n  nameWithType: TypeInfo.IsLayoutSequential\n  fullName: TypeInfo.IsLayoutSequential\n- uid: System.Reflection.TypeInfo.IsMarshalByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsMarshalByRef\n  nameWithType: TypeInfo.IsMarshalByRef\n  fullName: TypeInfo.IsMarshalByRef\n- uid: System.Reflection.TypeInfo.IsNested\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNested\n  nameWithType: TypeInfo.IsNested\n  fullName: TypeInfo.IsNested\n- uid: System.Reflection.TypeInfo.IsNestedAssembly\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedAssembly\n  nameWithType: TypeInfo.IsNestedAssembly\n  fullName: TypeInfo.IsNestedAssembly\n- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamANDAssem\n  nameWithType: TypeInfo.IsNestedFamANDAssem\n  fullName: TypeInfo.IsNestedFamANDAssem\n- uid: System.Reflection.TypeInfo.IsNestedFamily\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamily\n  nameWithType: TypeInfo.IsNestedFamily\n  fullName: TypeInfo.IsNestedFamily\n- uid: System.Reflection.TypeInfo.IsNestedFamORAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamORAssem\n  nameWithType: TypeInfo.IsNestedFamORAssem\n  fullName: TypeInfo.IsNestedFamORAssem\n- uid: System.Reflection.TypeInfo.IsNestedPrivate\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPrivate\n  nameWithType: TypeInfo.IsNestedPrivate\n  fullName: TypeInfo.IsNestedPrivate\n- uid: System.Reflection.TypeInfo.IsNestedPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPublic\n  nameWithType: TypeInfo.IsNestedPublic\n  fullName: TypeInfo.IsNestedPublic\n- uid: System.Reflection.TypeInfo.IsNotPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNotPublic\n  nameWithType: TypeInfo.IsNotPublic\n  fullName: TypeInfo.IsNotPublic\n- uid: System.Reflection.TypeInfo.IsPointer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPointer\n  nameWithType: TypeInfo.IsPointer\n  fullName: TypeInfo.IsPointer\n- uid: System.Reflection.TypeInfo.IsPrimitive\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPrimitive\n  nameWithType: TypeInfo.IsPrimitive\n  fullName: TypeInfo.IsPrimitive\n- uid: System.Reflection.TypeInfo.IsPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPublic\n  nameWithType: TypeInfo.IsPublic\n  fullName: TypeInfo.IsPublic\n- uid: System.Reflection.TypeInfo.IsSealed\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSealed\n  nameWithType: TypeInfo.IsSealed\n  fullName: TypeInfo.IsSealed\n- uid: System.Reflection.TypeInfo.IsSpecialName\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: TypeInfo.IsSpecialName\n  fullName: TypeInfo.IsSpecialName\n- uid: System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSubclassOf(Type)\n  nameWithType: TypeInfo.IsSubclassOf(Type)\n  fullName: TypeInfo.IsSubclassOf(Type)\n- uid: System.Reflection.TypeInfo.IsUnicodeClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsUnicodeClass\n  nameWithType: TypeInfo.IsUnicodeClass\n  fullName: TypeInfo.IsUnicodeClass\n- uid: System.Reflection.TypeInfo.IsValueType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsValueType\n  nameWithType: TypeInfo.IsValueType\n  fullName: TypeInfo.IsValueType\n- uid: System.Reflection.TypeInfo.IsVisible\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsVisible\n  nameWithType: TypeInfo.IsVisible\n  fullName: TypeInfo.IsVisible\n- uid: System.Reflection.TypeInfo.StructLayoutAttribute\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: StructLayoutAttribute\n  nameWithType: TypeInfo.StructLayoutAttribute\n  fullName: TypeInfo.StructLayoutAttribute\n- uid: System.Reflection.TypeInfo.TypeInitializer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: TypeInitializer\n  nameWithType: TypeInfo.TypeInitializer\n  fullName: TypeInfo.TypeInitializer\n- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IReflectableType.GetTypeInfo()\n  nameWithType: TypeInfo.IReflectableType.GetTypeInfo()\n  fullName: TypeInfo.IReflectableType.GetTypeInfo()\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetRuntimeInterfaceMap(TypeInfo, Type)\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n  fullName: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n- uid: System.Runtime.InteropServices._EnumBuilder\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _EnumBuilder\n  nameWithType: _EnumBuilder\n  fullName: System.Runtime.InteropServices._EnumBuilder\n"}