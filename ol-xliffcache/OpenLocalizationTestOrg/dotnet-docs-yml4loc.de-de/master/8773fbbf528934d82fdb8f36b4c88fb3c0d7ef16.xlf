<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8773fbbf528934d82fdb8f36b4c88fb3c0d7ef16</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Threading.ManualResetEventSlim.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">39bad4f7a72f0419ea193966575d675df4d76e26</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">01206a043b9bcd3dd32437ae075a4c5dab1de5e8</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a slimmed down version of <ph id="ph1">&lt;xref href="System.Threading.ManualResetEvent"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use this class for better performance than <ph id="ph1">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> when wait times are expected to be very short, and when the event does not cross a process boundary.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> uses busy spinning for a short time while it waits for the event to become signaled.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>When wait times are short, spinning can be much less expensive than waiting by using wait handles.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, if the event does not become signaled within a certain period of time, <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> resorts to a regular event handle wait.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> class with an initial state of nonsignaled.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>true to set the initial state signaled; false to set the initial state to nonsignaled.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>true to set the initial state to signaled; false to set the initial state to nonsignaled.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;spinCount&lt;/code&gt;</ph> is less than 0 or greater than the maximum allowed value.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Releases all resources used by the current instance of the <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>Call <ph id="ph1">`Dispose`</ph> when you are finished using the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">`Dispose`</ph> method leaves the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> in an unusable state.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>After calling <ph id="ph1">`Dispose`</ph>, you must release all references to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> so the garbage collector can reclaim the memory that the <ph id="ph3">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> was occupying.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Cleaning Up Unmanaged Resources<ept id="p1">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id="p2">[</bpt>Implementing a Dispose Method<ept id="p2">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Always call <ph id="ph1">`Dispose`</ph> before you release your last reference to the <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> object's <ph id="ph2">`Finalize`</ph> method.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Releases the unmanaged resources used by the <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph>, and optionally releases the managed resources.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Unlike most of the members of <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.Dispose%2A&gt;</ph> is not thread-safe and may not be used concurrently with other members of this instance.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>true to release both managed and unmanaged resources; false to release only unmanaged resources.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Gets whether the event is set.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>true if the event has is set; otherwise, false.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Sets the state of the event to nonsignaled, which causes threads to block.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim.Reset%2A&gt;</ph> can be called concurrently with all members except <ph id="ph2">&lt;xref:System.Threading.ManualResetEventSlim.WaitHandle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> is set.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller will return immediately if the event is currently in a set state.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The maximum number of waiters has been exceeded.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the time interval.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The maximum number of waiters has been exceeded.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> receives a signal, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller of this method blocks indefinitely until the current instance is set.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller will return immediately if the event is currently in a set state.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>The maximum number of waiters has been exceeded.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The object has already been disposed or the <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has been disposed.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> is set, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> to measure the time interval.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The number of milliseconds in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>The maximum number of waiters has been exceeded.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The object has already been disposed.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> is set, using a 32-bit signed integer to measure the time interval, while observing a <ph id="ph2">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The number of milliseconds to wait, or <ph id="ph1">&lt;xref href="System.Threading.Timeout.Infinite"&gt;&lt;/xref&gt;</ph>(-1) to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The maximum number of waiters has been exceeded.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>The object has already been disposed or the <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has been disposed.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Blocks the current thread until the current <ph id="ph1">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> is set, using a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> to measure the time interval, while observing a <ph id="ph3">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a <ph id="ph2">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that represents -1 milliseconds to wait indefinitely.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Threading.CancellationToken"&gt;&lt;/xref&gt;</ph> to observe.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <ph id="ph2">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph> was set; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;cancellationToken&lt;/code&gt;</ph> was canceled.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>-or-</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The number of milliseconds in <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">timeout</ph><ept id="p1">&lt;/code&gt;</ept> is greater than <ph id="ph2">&lt;xref href="System.Int32.MaxValue"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>The maximum number of waiters has been exceeded.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The object has already been disposed or the <ph id="ph1">&lt;xref href="System.Threading.CancellationTokenSource"&gt;&lt;/xref&gt;</ph> that created <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">cancellationToken</ph><ept id="p1">&lt;/code&gt;</ept> has been disposed.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>Gets the underlying <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> object for this <ph id="ph2">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>Accessing this property forces initialization of an underlying event object if one hasn't already been created.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>To simply wait on this <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph>, the public Wait methods should be preferred.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is recommended to dispose the <ph id="ph1">&lt;xref:System.Threading.ManualResetEventSlim&gt;</ph> instance after accessing this property, in order to prevent a resource leak.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>The underlying <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> event object fore this <ph id="ph2">&lt;xref href="System.Threading.ManualResetEventSlim"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>