<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">88a7a18748a053dcfebb8cf9a7d88de9c2f5e7df</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.WeakEventManager.ListenerList.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">99661bece86539edf2795f64022e00721d2d55c0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b7b87b00ffdf7aed6ae9a1d10aadf98e6ac084fd</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides a built-in collection list for storing listeners for a <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although this list contains members that resemble those defined by <ph id="ph1">&lt;xref:System.Collections.IList&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>, and provide similar functionality, this class implements neither of those interfaces.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> derived classes do not need to use any members on <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> methods <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph>use a default <ph id="ph4">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> internally, one list for each <ph id="ph5">`source`</ph>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You only need to call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> methods if your <ph id="ph2">&lt;xref:System.Windows.WeakEventManager&gt;</ph> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you would not use <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ProtectedAddListener%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A&gt;</ph> and would instead implement <ph id="ph3">`AddListener`</ph> or <ph id="ph4">`RemoveListener`</ph> to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to <ph id="ph5">`AddListener`</ph> or <ph id="ph6">`RemoveListener`</ph>.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Also, the handler implementation that receives the raw event cannot simply call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.DeliverEvent%2A&gt;</ph>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.DeliverEventToList%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The various methods of <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList&gt;</ph> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>An example class that used this implementation technique is <ph id="ph1">&lt;xref:System.ComponentModel.PropertyChangedEventManager&gt;</ph>, which maintains separate listener lists for <ph id="ph2">`PropertyChanged`</ph> based on which property changed.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>XAML Text Usage</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot use this class in <ph id="ph1">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph> class with the specified initial capacity.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The number of items that should be allocated in the initial list.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Adds a <ph id="ph1">&lt;xref href="System.Windows.IWeakEventListener"&gt;&lt;/xref&gt;</ph> object to the <ph id="ph2">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object provided as listener should be a <ph id="ph1">&lt;xref:System.Windows.DependencyObject&gt;</ph> that implements the <ph id="ph2">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> interface and therefore has a working <ph id="ph3">&lt;xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A&gt;</ph> implementation.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Add%2A&gt;</ph> call can still work on the clone.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The listener element to add to the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>Adds an event handler to the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The event handler to add to the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Declares the list to be in use.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>This prevents direct changes to the list during iterations of the list items.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.WeakEventManager&gt;</ph> implementation should call <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> before iterating through the list to deliver an event to the listeners, and should call <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph> when it is done.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the list is modified during this time, then the list is cloned.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the list is cloned, then <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, which means that you have missed a recent listener change in the last delivery.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the list was already declared to be in use; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Creates a modifiable clone of this <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A modifiable clone of the current object.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Copies the current <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph> to the specified <ph id="ph2">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph></source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The object to copy to.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets the number of items contained in the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>The number of items contained in the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Delivers the event being managed to each listener in the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The object that raised the event.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>An object that contains the event data.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>The type of the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager"&gt;&lt;/xref&gt;</ph> that calls this method.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if any of the listeners in the <ph id="ph2">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph> refer to an object that has been garbage collected; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Gets a value that represents an empty list for purposes of comparisons.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The empty list representation.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Unlocks the locked state initiated by <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList.BeginUse"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value that declares whether this <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph> is empty.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is equivalent to checking whether the <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Count%2A&gt;</ph> is zero, and does not check whether any of the references in the list are now stale.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to assure that all references are still valid, call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.Purge%2A&gt;</ph> just prior to checking the empty status of the list.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the list is empty; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Gets or sets a specific listener item in the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph> .</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The zero-based index of the listener in the list.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>The item at that index, or a null reference if no item was at that index.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the given list is in use (which means an event is currently being delivered), calling this method will replace the input <ph id="ph1">`list`</ph> with a clone.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>The existing users will finish delivering the event to the original list, without interference from changes to the new list.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the method returns <ph id="ph1">`true`</ph>, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method calls <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A&gt;</ph> internally and then immediately calls <ph id="ph2">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> does not itself introduce a lock on the list.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>Even the clone copy is done as a secondary operation after calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The list to check for use state and potentially copy.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the provided list was in use at the time of call and therefore the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">list</ph><ept id="p1">&lt;/code&gt;</ept> parameter reference was reset to be a copy.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> if the provided list was not in use, in which case the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">list</ph><ept id="p1">&lt;/code&gt;</ept> parameter reference remains unaltered.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Removes all entries from the list where the underlying reference target is a null reference.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>Returns <ph id="ph1">`true`</ph> if any entries were purged; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Removes the first occurrence of a listener item from the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should always call <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> before changing the list contents.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the list may be in process of delivering events and therefore the original is locked.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> changes the input <ph id="ph2">`list`</ph> to be a clone so that your <ph id="ph3">&lt;xref:System.Windows.WeakEventManager.ListenerList.Remove%2A&gt;</ph> call can still work on the clone.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A&gt;</ph> returns <ph id="ph2">`true`</ph>, you might need to update any private references to the list that you maintain in other areas of your code.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>The item to remove.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Removes an event handler from the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The event handler to remove from the <ph id="ph1">&lt;xref href="System.Windows.WeakEventManager.ListenerList"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>