{"nodes":[{"content":"Defines methods to support the comparison of objects for structural equality.","nodes":[{"pos":[0,77],"content":"Defines methods to support the comparison of objects for structural equality.","nodes":[{"content":"Defines methods to support the comparison of objects for structural equality.","pos":[0,77]}]}],"pos":[651,729],"yaml":true},{"content":"Structural equality means that two objects are equal because they have equal values. It differs from reference equality, which indicates that two object references are equal because they reference the same physical object. The <xref:System.Collections.IStructuralEquatable> interface enables you to implement customized comparisons to check for the structural equality of collection objects. That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralEquatable> interface. The interface has two members: <xref:System.Collections.IStructuralEquatable.Equals%2A>, which tests for equality by using a specified <xref:System.Collections.IEqualityComparer> implementation, and <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, which returns identical hash codes for objects that are equal.  \n  \n> [!NOTE]\n>  The <xref:System.Collections.IStructuralEquatable> interface supports only custom comparisons for structural equality. The <xref:System.Collections.IStructuralComparable> interface supports custom structural comparisons for sorting and ordering.  \n  \n The .NET Framework also provides default equality comparers, which are returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> and <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> properties. For more information, see the example.  \n  \n The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralEquatable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralEquatable> interface value and providing your <xref:System.Collections.IEqualityComparer> implementation as an argument to the <xref:System.Collections.IStructuralEquatable.Equals%2A> method, you can define a custom equality comparison for the array or collection.","nodes":[{"pos":[0,922],"content":"Structural equality means that two objects are equal because they have equal values. It differs from reference equality, which indicates that two object references are equal because they reference the same physical object. The <xref:System.Collections.IStructuralEquatable> interface enables you to implement customized comparisons to check for the structural equality of collection objects. That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralEquatable> interface. The interface has two members: <xref:System.Collections.IStructuralEquatable.Equals%2A>, which tests for equality by using a specified <xref:System.Collections.IEqualityComparer> implementation, and <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, which returns identical hash codes for objects that are equal.","nodes":[{"content":"Structural equality means that two objects are equal because they have equal values. It differs from reference equality, which indicates that two object references are equal because they reference the same physical object. The <xref:System.Collections.IStructuralEquatable> interface enables you to implement customized comparisons to check for the structural equality of collection objects. That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralEquatable> interface. The interface has two members: <xref:System.Collections.IStructuralEquatable.Equals%2A>, which tests for equality by using a specified <xref:System.Collections.IEqualityComparer> implementation, and <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, which returns identical hash codes for objects that are equal.","pos":[0,922],"nodes":[{"content":"Structural equality means that two objects are equal because they have equal values.","pos":[0,84]},{"content":"It differs from reference equality, which indicates that two object references are equal because they reference the same physical object.","pos":[85,222]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface enables you to implement customized comparisons to check for the structural equality of collection objects.","pos":[223,391],"source":" The <xref:System.Collections.IStructuralEquatable> interface enables you to implement customized comparisons to check for the structural equality of collection objects."},{"content":"That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.","pos":[392,597],"source":" That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralEquatable> interface."},{"content":"The interface has two members: <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A&gt;</ph>, which tests for equality by using a specified <ph id=\"ph2\">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation, and <ph id=\"ph3\">&lt;xref:System.Collections.IStructuralEquatable.GetHashCode%2A&gt;</ph>, which returns identical hash codes for objects that are equal.","pos":[598,922],"source":" The interface has two members: <xref:System.Collections.IStructuralEquatable.Equals%2A>, which tests for equality by using a specified <xref:System.Collections.IEqualityComparer> implementation, and <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, which returns identical hash codes for objects that are equal."}]}]},{"pos":[930,1186],"content":"[!NOTE]\n The <xref:System.Collections.IStructuralEquatable> interface supports only custom comparisons for structural equality. The <xref:System.Collections.IStructuralComparable> interface supports custom structural comparisons for sorting and ordering.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Collections.IStructuralEquatable> interface supports only custom comparisons for structural equality. The <xref:System.Collections.IStructuralComparable> interface supports custom structural comparisons for sorting and ordering.","pos":[8,254],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface supports only custom comparisons for structural equality.","pos":[1,119],"source":" The <xref:System.Collections.IStructuralEquatable> interface supports only custom comparisons for structural equality."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralComparable&gt;</ph> interface supports custom structural comparisons for sorting and ordering.","pos":[120,246],"source":" The <xref:System.Collections.IStructuralComparable> interface supports custom structural comparisons for sorting and ordering."}]}]},{"pos":[1193,1528],"content":"The .NET Framework also provides default equality comparers, which are returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> and <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> properties. For more information, see the example.","nodes":[{"content":"The .NET Framework also provides default equality comparers, which are returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> and <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> properties. For more information, see the example.","pos":[0,335],"nodes":[{"content":"The .NET Framework also provides default equality comparers, which are returned by the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName&gt;</ph> properties.","pos":[0,296],"source":"The .NET Framework also provides default equality comparers, which are returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> and <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> properties."},{"content":"For more information, see the example.","pos":[297,335]}]}]},{"pos":[1535,2179],"content":"The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralEquatable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralEquatable> interface value and providing your <xref:System.Collections.IEqualityComparer> implementation as an argument to the <xref:System.Collections.IStructuralEquatable.Equals%2A> method, you can define a custom equality comparison for the array or collection.","nodes":[{"content":"The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralEquatable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralEquatable> interface value and providing your <xref:System.Collections.IEqualityComparer> implementation as an argument to the <xref:System.Collections.IStructuralEquatable.Equals%2A> method, you can define a custom equality comparison for the array or collection.","pos":[0,644],"nodes":[{"content":"The generic tuple classes (<ph id=\"ph1\">&lt;xref:System.Tuple%601&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Tuple%602&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Tuple%603&gt;</ph>, and so on) and the <ph id=\"ph4\">&lt;xref:System.Array&gt;</ph> class provide explicit implementations of the <ph id=\"ph5\">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface.","pos":[0,244],"source":"The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralEquatable> interface."},{"content":"By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable&gt;</ph> interface value and providing your <ph id=\"ph2\">&lt;xref:System.Collections.IEqualityComparer&gt;</ph> implementation as an argument to the <ph id=\"ph3\">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A&gt;</ph> method, you can define a custom equality comparison for the array or collection.","pos":[245,644],"source":" By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralEquatable> interface value and providing your <xref:System.Collections.IEqualityComparer> implementation as an argument to the <xref:System.Collections.IStructuralEquatable.Equals%2A> method, you can define a custom equality comparison for the array or collection."}]}]}],"pos":[740,2929],"yaml":true,"extradata":"MT"},{"content":"Determines whether an object is structurally equal to the current instance.","nodes":[{"pos":[0,75],"content":"Determines whether an object is structurally equal to the current instance.","nodes":[{"content":"Determines whether an object is structurally equal to the current instance.","pos":[0,75]}]}],"pos":[7894,7970],"yaml":true},{"content":"The <xref:System.Collections.IStructuralEquatable.Equals%2A> method supports custom structural comparison of array and tuple objects. This method in turn calls the `comparer` object's <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method returns a value either when a method call returns `false` or after all array elements or tuple components have been compared.","nodes":[{"pos":[0,703],"content":"The <xref:System.Collections.IStructuralEquatable.Equals%2A> method supports custom structural comparison of array and tuple objects. This method in turn calls the `comparer` object's <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method returns a value either when a method call returns `false` or after all array elements or tuple components have been compared.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A&gt;</ph> method supports custom structural comparison of array and tuple objects.","pos":[0,133],"source":"The <xref:System.Collections.IStructuralEquatable.Equals%2A> method supports custom structural comparison of array and tuple objects."},{"content":"This method in turn calls the <ph id=\"ph1\">`comparer`</ph> object's <ph id=\"ph2\">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName&gt;</ph> method to compare individual array elements or tuple components, starting with the first element or component.","pos":[134,373],"source":" This method in turn calls the `comparer` object's <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component."},{"content":"The individual calls to <ph id=\"ph1\">&lt;xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName&gt;</ph> end and the <ph id=\"ph2\">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName&gt;</ph> method returns a value either when a method call returns <ph id=\"ph3\">`false`</ph> or after all array elements or tuple components have been compared.","pos":[374,703],"source":" The individual calls to <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method returns a value either when a method call returns `false` or after all array elements or tuple components have been compared."}]}],"pos":[7981,8685],"yaml":true,"extradata":"MT"},{"content":"The object to compare with the current instance.","nodes":[{"pos":[0,48],"content":"The object to compare with the current instance.","nodes":[{"content":"The object to compare with the current instance.","pos":[0,48]}]}],"pos":[11136,11185],"yaml":true},{"content":"An object that determines whether the current instance and <code>other</code> are equal.","nodes":[{"pos":[0,88],"content":"An object that determines whether the current instance and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> are equal.","source":"An object that determines whether the current instance and <code>other</code> are equal."}],"pos":[11272,11361],"yaml":true},{"content":"`true` if the two objects are equal; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the two objects are equal; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the two objects are equal; otherwise, `false`."}],"pos":[11419,11478],"yaml":true},{"content":"Returns a hash code for the current instance.","nodes":[{"pos":[0,45],"content":"Returns a hash code for the current instance.","nodes":[{"content":"Returns a hash code for the current instance.","pos":[0,45]}]}],"pos":[13267,13313],"yaml":true},{"content":"Implement this method to return customized hash codes for collection objects that correspond to the customized comparison for structural equality provided by the <xref:System.Collections.IStructuralEquatable.Equals%2A> method.","nodes":[{"pos":[0,226],"content":"Implement this method to return customized hash codes for collection objects that correspond to the customized comparison for structural equality provided by the <xref:System.Collections.IStructuralEquatable.Equals%2A> method.","nodes":[{"content":"Implement this method to return customized hash codes for collection objects that correspond to the customized comparison for structural equality provided by the <ph id=\"ph1\">&lt;xref:System.Collections.IStructuralEquatable.Equals%2A&gt;</ph> method.","pos":[0,226],"source":"Implement this method to return customized hash codes for collection objects that correspond to the customized comparison for structural equality provided by the <xref:System.Collections.IStructuralEquatable.Equals%2A> method."}]}],"pos":[13324,13551],"yaml":true,"extradata":"MT"},{"content":"An object that computes the hash code of the current object.","nodes":[{"pos":[0,60],"content":"An object that computes the hash code of the current object.","nodes":[{"content":"An object that computes the hash code of the current object.","pos":[0,60]}]}],"pos":[13749,13810],"yaml":true},{"content":"The hash code for the current instance.","nodes":[{"pos":[0,39],"content":"The hash code for the current instance.","nodes":[{"content":"The hash code for the current instance.","pos":[0,39]}]}],"pos":[13866,13906],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.IStructuralEquatable\n  commentId: T:System.Collections.IStructuralEquatable\n  id: IStructuralEquatable\n  children:\n  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  langs:\n  - csharp\n  name: IStructuralEquatable\n  nameWithType: IStructuralEquatable\n  fullName: System.Collections.IStructuralEquatable\n  type: Interface\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  - FSharp.Core\n  namespace: System.Collections\n  summary: Defines methods to support the comparison of objects for structural equality.\n  remarks: \"Structural equality means that two objects are equal because they have equal values. It differs from reference equality, which indicates that two object references are equal because they reference the same physical object. The <xref:System.Collections.IStructuralEquatable> interface enables you to implement customized comparisons to check for the structural equality of collection objects. That is, you can create your own definition of structural equality and specify that this definition be used with a collection type that accepts the <xref:System.Collections.IStructuralEquatable> interface. The interface has two members: <xref:System.Collections.IStructuralEquatable.Equals%2A>, which tests for equality by using a specified <xref:System.Collections.IEqualityComparer> implementation, and <xref:System.Collections.IStructuralEquatable.GetHashCode%2A>, which returns identical hash codes for objects that are equal.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Collections.IStructuralEquatable> interface supports only custom comparisons for structural equality. The <xref:System.Collections.IStructuralComparable> interface supports custom structural comparisons for sorting and ordering.  \\n  \\n The .NET Framework also provides default equality comparers, which are returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> and <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> properties. For more information, see the example.  \\n  \\n The generic tuple classes (<xref:System.Tuple%601>, <xref:System.Tuple%602>, <xref:System.Tuple%603>, and so on) and the <xref:System.Array> class provide explicit implementations of the <xref:System.Collections.IStructuralEquatable> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref:System.Collections.IStructuralEquatable> interface value and providing your <xref:System.Collections.IEqualityComparer> implementation as an argument to the <xref:System.Collections.IStructuralEquatable.Equals%2A> method, you can define a custom equality comparison for the array or collection.\"\n  example:\n  - \"The default equality comparer, `EqualityComparer<Object>.Default.Equals`, considers two `NaN` values to be equal. However, in some cases, you may want the comparison of `NaN` values for equality to return `false`, which indicates that the values cannot be compared. The following example defines a `NanComparer` class that implements the <xref:System.Collections.IStructuralEquatable> interface. It compares two <xref:System.Double> or two <xref:System.Single> values by using the equality operator. It passes values of any other type to the default equality comparer.  \\n  \\n [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]\\n [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  \\n  \\n The following example creates two identical 3-tuple objects whose components consist of three <xref:System.Double> values. The value of the second component is <xref:System.Double.NaN?displayProperty=fullName>. The example then calls the <xref:System.Tuple%603.Equals%2A?displayProperty=fullName> method, and it calls the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method three times. The first time, it passes the default equality comparer that is returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> property. The second time, it passes the default equality comparer that is returned by the <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> property. The third time, it passes the custom `NanComparer` object. As the output from the example shows, the first three method calls return `true`, whereas the fourth call returns `false`.  \\n  \\n [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]\\n [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]\"\n  syntax:\n    content: public interface IStructuralEquatable\n  derivedClasses:\n  - Microsoft.FSharp.Collections.FSharpList`1\n  - Microsoft.FSharp.Core.FSharpChoice`2\n  - Microsoft.FSharp.Core.FSharpChoice`3\n  - Microsoft.FSharp.Core.FSharpChoice`4\n  - Microsoft.FSharp.Core.FSharpChoice`5\n  - Microsoft.FSharp.Core.FSharpChoice`6\n  - Microsoft.FSharp.Core.FSharpChoice`7\n  - Microsoft.FSharp.Core.FSharpOption`1\n  - Microsoft.FSharp.Core.FSharpRef`1\n  - Microsoft.FSharp.Core.MatchFailureException\n  - System.Array\n  - System.Tuple`1\n  - System.Tuple`2\n  - System.Tuple`3\n  - System.Tuple`4\n  - System.Tuple`5\n  - System.Tuple`6\n  - System.Tuple`7\n  - System.Tuple`8\n  - System.ValueTuple\n  - System.ValueTuple`1\n  - System.ValueTuple`2\n  - System.ValueTuple`3\n  - System.ValueTuple`4\n  - System.ValueTuple`5\n  - System.ValueTuple`6\n  - System.ValueTuple`7\n  - System.ValueTuple`8\n  - System.Collections.Immutable.ImmutableArray`1\n  implements: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  id: Equals(System.Object,System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  langs:\n  - csharp\n  name: Equals(Object, IEqualityComparer)\n  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  fullName: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  - FSharp.Core\n  namespace: System.Collections\n  summary: Determines whether an object is structurally equal to the current instance.\n  remarks: The <xref:System.Collections.IStructuralEquatable.Equals%2A> method supports custom structural comparison of array and tuple objects. This method in turn calls the `comparer` object's <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> end and the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method returns a value either when a method call returns `false` or after all array elements or tuple components have been compared.\n  example:\n  - \"The default equality comparer, `EqualityComparer<Object>.Default.Equals`, considers two `NaN` values to be equal. However, in some cases, you may want the comparison of `NaN` values for equality to return `false`, which indicates that the values cannot be compared. The following example defines a `NanComparer` class that implements the <xref:System.Collections.IStructuralEquatable> interface. It compares two <xref:System.Double> or two <xref:System.Single> values by using the equality operator. It passes values of any other type to the default equality comparer.  \\n  \\n [!code-csharp[System.Collections.IStructuralEquatable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#1)]\\n [!code-vb[System.Collections.IStructuralEquatable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#1)]  \\n  \\n The following example creates two identical 3-tuple objects whose components consist of three <xref:System.Double> values. The value of the second component is <xref:System.Double.NaN?displayProperty=fullName>. The example then calls the <xref:System.Tuple%603.Equals%2A?displayProperty=fullName> method, and it calls the <xref:System.Collections.IStructuralEquatable.Equals%2A?displayProperty=fullName> method three times. The first time, it passes the default equality comparer that is returned by the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> property. The second time, it passes the default equality comparer that is returned by the <xref:System.Collections.StructuralComparisons.StructuralEqualityComparer%2A?displayProperty=fullName> property. The third time, it passes the custom `NanComparer` object. As the output from the example shows, the first three method calls return `true`, whereas the fourth call returns `false`.  \\n  \\n [!code-csharp[System.Collections.IStructuralEquatable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.istructuralequatable/cs/nanexample1.cs#2)]\\n [!code-vb[System.Collections.IStructuralEquatable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.istructuralequatable/vb/nanexample1.vb#2)]\"\n  syntax:\n    content: public bool Equals (object other, System.Collections.IEqualityComparer comparer);\n    parameters:\n    - id: other\n      type: System.Object\n      description: The object to compare with the current instance.\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: An object that determines whether the current instance and <code>other</code> are equal.\n    return:\n      type: System.Boolean\n      description: '`true` if the two objects are equal; otherwise, `false`.'\n  overload: System.Collections.IStructuralEquatable.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  id: GetHashCode(System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  langs:\n  - csharp\n  name: GetHashCode(IEqualityComparer)\n  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  fullName: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  - FSharp.Core\n  namespace: System.Collections\n  summary: Returns a hash code for the current instance.\n  remarks: Implement this method to return customized hash codes for collection objects that correspond to the customized comparison for structural equality provided by the <xref:System.Collections.IStructuralEquatable.Equals%2A> method.\n  syntax:\n    content: public int GetHashCode (System.Collections.IEqualityComparer comparer);\n    parameters:\n    - id: comparer\n      type: System.Collections.IEqualityComparer\n      description: An object that computes the hash code of the current object.\n    return:\n      type: System.Int32\n      description: The hash code for the current instance.\n  overload: System.Collections.IStructuralEquatable.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: Equals(Object, IEqualityComparer)\n  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)\n  fullName: IStructuralEquatable.Equals(Object, IEqualityComparer)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  nameWithType: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: GetHashCode(IEqualityComparer)\n  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)\n  fullName: IStructuralEquatable.GetHashCode(IEqualityComparer)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Collections.IStructuralEquatable.Equals*\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: Equals\n  nameWithType: IStructuralEquatable.Equals\n  fullName: IStructuralEquatable.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml\n- uid: System.Collections.IStructuralEquatable.GetHashCode*\n  parent: System.Collections.IStructuralEquatable\n  isExternal: false\n  name: GetHashCode\n  nameWithType: IStructuralEquatable.GetHashCode\n  fullName: IStructuralEquatable.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections/IStructuralEquatable.xml\n"}