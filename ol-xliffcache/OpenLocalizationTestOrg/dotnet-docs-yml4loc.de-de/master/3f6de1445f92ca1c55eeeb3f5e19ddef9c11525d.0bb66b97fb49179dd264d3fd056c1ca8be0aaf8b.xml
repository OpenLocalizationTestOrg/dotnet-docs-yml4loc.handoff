{"nodes":[{"content":"Converts a <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> to base 64.","nodes":[{"pos":[0,85],"content":"Converts a <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.CryptoStream\"&gt;&lt;/xref&gt;</ph> to base 64.","source":"Converts a <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> to base 64."}],"pos":[1313,1399],"yaml":true},{"content":"Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.","nodes":[{"pos":[0,106],"content":"Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.","nodes":[{"content":"Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.","pos":[0,106]}]}],"pos":[1410,1517],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class.","nodes":[{"pos":[0,108],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class."}],"pos":[4087,4196],"yaml":true},{"content":"Gets a value indicating whether the current transform can be reused.","nodes":[{"pos":[0,68],"content":"Gets a value indicating whether the current transform can be reused.","nodes":[{"content":"Gets a value indicating whether the current transform can be reused.","pos":[0,68]}]}],"pos":[5624,5693],"yaml":true},{"content":"Always `true`.","nodes":[{"pos":[0,14],"content":"Always <ph id=\"ph1\">`true`</ph>.","source":"Always `true`."}],"pos":[6712,6727],"yaml":true},{"content":"Gets a value that indicates whether multiple blocks can be transformed.","nodes":[{"pos":[0,71],"content":"Gets a value that indicates whether multiple blocks can be transformed.","nodes":[{"content":"Gets a value that indicates whether multiple blocks can be transformed.","pos":[0,71]}]}],"pos":[8150,8222],"yaml":true},{"content":"In the current implementation, only one block can be transformed at a time, so this property is always `false`.","nodes":[{"pos":[0,111],"content":"In the current implementation, only one block can be transformed at a time, so this property is always <ph id=\"ph1\">`false`</ph>.","source":"In the current implementation, only one block can be transformed at a time, so this property is always `false`."}],"pos":[8233,8345],"yaml":true,"extradata":"MT"},{"content":"Always `false`.","nodes":[{"pos":[0,15],"content":"Always <ph id=\"ph1\">`false`</ph>.","source":"Always `false`."}],"pos":[9356,9372],"yaml":true},{"content":"Releases all resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>.","nodes":[{"pos":[0,103],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>."}],"pos":[10682,10786],"yaml":true},{"content":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.  \n  \n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"pos":[0,94],"content":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.","nodes":[{"content":"This method is a simple call to <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A?displayProperty=fullName&gt;</ph>.","pos":[0,94],"source":"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>."}]},{"pos":[101,369],"content":"Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"content":"Calling <ph id=\"ph1\">`Dispose`</ph> allows the resources used by the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> to be reallocated for other purposes.","pos":[0,142],"source":"Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">`Dispose`</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.","pos":[143,268],"source":" For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."}]}],"pos":[10797,11171],"yaml":true,"extradata":"MT"},{"content":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class.","nodes":[{"pos":[0,133],"content":"Releases all resources used by the current instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;&lt;/xref&gt;</ph> class.","source":"Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class."}],"pos":[13400,13534],"yaml":true},{"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method.","nodes":[{"pos":[0,453],"content":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying.","nodes":[{"content":"Call <ph id=\"ph1\">`Dispose`</ph> when you are finished using the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>.","pos":[0,101],"source":"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>."},{"content":"The <ph id=\"ph1\">`Dispose`</ph> method leaves the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> in an unusable state.","pos":[102,209],"source":" The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state."},{"content":"After calling <ph id=\"ph1\">`Dispose`</ph>, you must release all references to the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> so the garbage collector can reclaim the memory that the <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> was occupying.","pos":[210,453],"source":" After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying."}]},{"pos":[460,665],"content":"For more information, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept> and <bpt id=\"p2\">[</bpt>Implementing a Dispose Method<ept id=\"p2\">](~/docs/standard/garbage-collection/implementing-dispose.md)</ept>.","source":"For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md)."},{"pos":[673,981],"content":"[!NOTE]\n Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method.","leadings":["","> "],"nodes":[{"content":" Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method.","pos":[8,306],"nodes":[{"content":"Always call <ph id=\"ph1\">`Dispose`</ph> before you release your last reference to the <ph id=\"ph2\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph>.","pos":[1,123],"source":" Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>."},{"content":"Otherwise, the resources it is using will not be freed until the garbage collector calls the <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> object's <ph id=\"ph2\">`Finalize`</ph> method.","pos":[124,298],"source":" Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method."}]}]}],"pos":[13545,14534],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,159],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> and optionally releases the managed resources."}],"pos":[15972,16132],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,245],"content":"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">`Finalize`</ph> method.","pos":[0,81],"source":"This method is called by the public `Dispose()` method and the `Finalize` method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the disposing parameter set to <ph id=\"ph3\">`true`</ph>.","pos":[82,185],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`."},{"content":"<ph id=\"ph1\">`Finalize`</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with disposing set to <ph id=\"ph3\">`false`</ph>.","pos":[186,245],"source":"`Finalize` invokes `Dispose` with disposing set to `false`."}]},{"pos":[252,502],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> references.","pos":[0,180],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[181,250],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[16143,16650],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[16804,16907],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>.","nodes":[{"pos":[0,113],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;&lt;/xref&gt;</ph>.","source":"Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>."}],"pos":[18216,18330],"yaml":true},{"content":"Gets the input block size.","nodes":[{"pos":[0,26],"content":"Gets the input block size.","nodes":[{"content":"Gets the input block size.","pos":[0,26]}]}],"pos":[19737,19764],"yaml":true},{"content":"The input block size for this transformation is 3 bytes.","nodes":[{"pos":[0,56],"content":"The input block size for this transformation is 3 bytes.","nodes":[{"content":"The input block size for this transformation is 3 bytes.","pos":[0,56]}]}],"pos":[19775,19832],"yaml":true,"extradata":"MT"},{"content":"The size of the input data blocks in bytes.","nodes":[{"pos":[0,43],"content":"The size of the input data blocks in bytes.","nodes":[{"content":"The size of the input data blocks in bytes.","pos":[0,43]}]}],"pos":[20826,20870],"yaml":true},{"content":"Gets the output block size.","nodes":[{"pos":[0,27],"content":"Gets the output block size.","nodes":[{"content":"Gets the output block size.","pos":[0,27]}]}],"pos":[22224,22252],"yaml":true},{"content":"The output block size for this transformation is 4 bytes.","nodes":[{"pos":[0,57],"content":"The output block size for this transformation is 4 bytes.","nodes":[{"content":"The output block size for this transformation is 4 bytes.","pos":[0,57]}]}],"pos":[22263,22321],"yaml":true,"extradata":"MT"},{"content":"The size of the output data blocks in bytes.","nodes":[{"pos":[0,44],"content":"The size of the output data blocks in bytes.","nodes":[{"content":"The size of the output data blocks in bytes.","pos":[0,44]}]}],"pos":[23325,23370],"yaml":true},{"content":"Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.","nodes":[{"pos":[0,136],"content":"Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.","nodes":[{"content":"Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.","pos":[0,136]}]}],"pos":[25032,25169],"yaml":true},{"content":"The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The <xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A> method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.","nodes":[{"pos":[0,424],"content":"The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The <xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A> method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.","nodes":[{"content":"The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The <xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A> method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.","pos":[0,424],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform&gt;</ph> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.","pos":[0,161],"source":"The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A&gt;</ph> method transforms an input block of 24 bits into 32 bits of character data.","pos":[163,314],"source":"  The <xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A> method transforms an input block of 24 bits into 32 bits of character data."},{"content":"You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.","pos":[316,424]}]}]}],"pos":[25180,25605],"yaml":true,"extradata":"MT"},{"content":"The input to compute to base 64.","nodes":[{"pos":[0,32],"content":"The input to compute to base 64.","nodes":[{"content":"The input to compute to base 64.","pos":[0,32]}]}],"pos":[26711,26744],"yaml":true},{"content":"The offset into the input byte array from which to begin using data.","nodes":[{"pos":[0,68],"content":"The offset into the input byte array from which to begin using data.","nodes":[{"content":"The offset into the input byte array from which to begin using data.","pos":[0,68]}]}],"pos":[26810,26879],"yaml":true},{"content":"The number of bytes in the input byte array to use as data.","nodes":[{"pos":[0,59],"content":"The number of bytes in the input byte array to use as data.","nodes":[{"content":"The number of bytes in the input byte array to use as data.","pos":[0,59]}]}],"pos":[26944,27004],"yaml":true},{"content":"The output to which to write the result.","nodes":[{"pos":[0,40],"content":"The output to which to write the result.","nodes":[{"content":"The output to which to write the result.","pos":[0,40]}]}],"pos":[27072,27113],"yaml":true},{"content":"The offset into the output byte array from which to begin writing data.","nodes":[{"pos":[0,71],"content":"The offset into the output byte array from which to begin writing data.","nodes":[{"content":"The offset into the output byte array from which to begin writing data.","pos":[0,71]}]}],"pos":[27180,27252],"yaml":true},{"content":"The number of bytes written.","nodes":[{"pos":[0,28],"content":"The number of bytes written.","nodes":[{"content":"The number of bytes written.","pos":[0,28]}]}],"pos":[27308,27337],"yaml":true},{"content":"The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed.","nodes":[{"pos":[0,113],"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;&lt;/xref&gt;</ph> object has already been disposed.","source":"The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed."}],"pos":[27532,27646],"yaml":true},{"content":"The data size is not valid.","nodes":[{"pos":[0,27],"content":"The data size is not valid.","nodes":[{"content":"The data size is not valid.","pos":[0,27]}]}],"pos":[27794,27822],"yaml":true},{"content":"The <code>inputBuffer</code> parameter contains an invalid offset length.  \n  \n -or-  \n  \n The <code>inputCount</code> parameter contains an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid offset length.","source":"The <code>inputBuffer</code> parameter contains an invalid offset length."},{"pos":[80,84],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[91,155],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid value.","source":"The <code>inputCount</code> parameter contains an invalid value."}],"pos":[27916,28078],"yaml":true},{"content":"The <code>inputBuffer</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>inputBuffer</code> parameter is `null`."}],"pos":[28180,28230],"yaml":true},{"content":"The <code>inputBuffer</code> parameter requires a non-negative number.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter requires a non-negative number.","source":"The <code>inputBuffer</code> parameter requires a non-negative number."}],"pos":[28344,28415],"yaml":true},{"content":"Converts the specified region of the specified byte array to base 64.","nodes":[{"pos":[0,69],"content":"Converts the specified region of the specified byte array to base 64.","nodes":[{"content":"Converts the specified region of the specified byte array to base 64.","pos":[0,69]}]}],"pos":[29888,29958],"yaml":true},{"content":"The input to convert to base 64.","nodes":[{"pos":[0,32],"content":"The input to convert to base 64.","nodes":[{"content":"The input to convert to base 64.","pos":[0,32]}]}],"pos":[31029,31062],"yaml":true},{"content":"The offset into the byte array from which to begin using data.","nodes":[{"pos":[0,62],"content":"The offset into the byte array from which to begin using data.","nodes":[{"content":"The offset into the byte array from which to begin using data.","pos":[0,62]}]}],"pos":[31128,31191],"yaml":true},{"content":"The number of bytes in the byte array to use as data.","nodes":[{"pos":[0,53],"content":"The number of bytes in the byte array to use as data.","nodes":[{"content":"The number of bytes in the byte array to use as data.","pos":[0,53]}]}],"pos":[31256,31310],"yaml":true},{"content":"The computed base 64 conversion.","nodes":[{"pos":[0,32],"content":"The computed base 64 conversion.","nodes":[{"content":"The computed base 64 conversion.","pos":[0,32]}]}],"pos":[31367,31400],"yaml":true},{"content":"The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed.","nodes":[{"pos":[0,113],"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ToBase64Transform\"&gt;&lt;/xref&gt;</ph> object has already been disposed.","source":"The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed."}],"pos":[31600,31714],"yaml":true},{"content":"The <code>inputBuffer</code> parameter contains an invalid offset length.  \n  \n -or-  \n  \n The <code>inputCount</code> parameter contains an invalid value.","nodes":[{"pos":[0,73],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid offset length.","source":"The <code>inputBuffer</code> parameter contains an invalid offset length."},{"pos":[80,84],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[91,155],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains an invalid value.","source":"The <code>inputCount</code> parameter contains an invalid value."}],"pos":[31808,31970],"yaml":true},{"content":"The <code>inputBuffer</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>inputBuffer</code> parameter is `null`."}],"pos":[32072,32122],"yaml":true},{"content":"The <code>inputBuffer</code> parameter requires a non-negative number.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">inputBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter requires a non-negative number.","source":"The <code>inputBuffer</code> parameter requires a non-negative number."}],"pos":[32236,32307],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Cryptography.ToBase64Transform\n  commentId: T:System.Security.Cryptography.ToBase64Transform\n  id: ToBase64Transform\n  children:\n  - System.Security.Cryptography.ToBase64Transform.#ctor\n  - System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  - System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  - System.Security.Cryptography.ToBase64Transform.Clear\n  - System.Security.Cryptography.ToBase64Transform.Dispose\n  - System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)\n  - System.Security.Cryptography.ToBase64Transform.Finalize\n  - System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  - System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  - System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  name: ToBase64Transform\n  nameWithType: ToBase64Transform\n  fullName: System.Security.Cryptography.ToBase64Transform\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Converts a <xref href=\"System.Security.Cryptography.CryptoStream\"></xref> to base 64.\n  remarks: Base 64 Content-Transfer-Encoding represents arbitrary bit sequences in a form that is not human readable.\n  example:\n  - \"The following code example demonstrates how to use members of the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#1)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#1)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ToBase64Transform : System.Security.Cryptography.ICryptoTransform\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.#ctor\n  commentId: M:System.Security.Cryptography.ToBase64Transform.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: ToBase64Transform()\n  nameWithType: ToBase64Transform.ToBase64Transform()\n  fullName: ToBase64Transform.ToBase64Transform()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Initializes a new instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class.\n  syntax:\n    content: public ToBase64Transform ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  commentId: P:System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  id: CanReuseTransform\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: CanReuseTransform\n  nameWithType: ToBase64Transform.CanReuseTransform\n  fullName: ToBase64Transform.CanReuseTransform\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Gets a value indicating whether the current transform can be reused.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.ToBase64Transform.CanReuseTransform%2A> property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#3)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#3)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#3)]\"\n  syntax:\n    content: public virtual bool CanReuseTransform { get; }\n    return:\n      type: System.Boolean\n      description: Always `true`.\n  overload: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  commentId: P:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  id: CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: CanTransformMultipleBlocks\n  nameWithType: ToBase64Transform.CanTransformMultipleBlocks\n  fullName: ToBase64Transform.CanTransformMultipleBlocks\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Gets a value that indicates whether multiple blocks can be transformed.\n  remarks: In the current implementation, only one block can be transformed at a time, so this property is always `false`.\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks%2A> method to verify that multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#4)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#4)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#4)]\"\n  syntax:\n    content: public bool CanTransformMultipleBlocks { get; }\n    return:\n      type: System.Boolean\n      description: Always `false`.\n  overload: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.Clear\n  commentId: M:System.Security.Cryptography.ToBase64Transform.Clear\n  id: Clear\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ToBase64Transform.Clear()\n  fullName: ToBase64Transform.Clear()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>.\n  remarks: \"This method is a simple call to <xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.  \\n  \\n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.ToBase64Transform> to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).\"\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.ToBase64Transform.Clear%2A> method to free up unused resources by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#7)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#7)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#7)]\"\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose\n  commentId: M:System.Security.Cryptography.ToBase64Transform.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: ToBase64Transform.Dispose()\n  fullName: ToBase64Transform.Dispose()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> class.\n  remarks: \"Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.ToBase64Transform>. The `Dispose` method leaves the <xref:System.Security.Cryptography.ToBase64Transform> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.ToBase64Transform> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.ToBase64Transform> was occupying.  \\n  \\n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \\n  \\n> [!NOTE]\\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.ToBase64Transform>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.ToBase64Transform> object's `Finalize` method.\"\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: ToBase64Transform.Dispose(Boolean)\n  fullName: ToBase64Transform.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the disposing parameter set to `true`. `Finalize` invokes `Dispose` with disposing set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.ToBase64Transform> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Security.Cryptography.ToBase64Transform.Dispose*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.Finalize\n  commentId: M:System.Security.Cryptography.ToBase64Transform.Finalize\n  id: Finalize\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: ToBase64Transform.Finalize()\n  fullName: ToBase64Transform.Finalize()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref>.\n  syntax:\n    content: ~ToBase64Transform ();\n    parameters: []\n  overload: System.Security.Cryptography.ToBase64Transform.Finalize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  commentId: P:System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  id: InputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: InputBlockSize\n  nameWithType: ToBase64Transform.InputBlockSize\n  fullName: ToBase64Transform.InputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Gets the input block size.\n  remarks: The input block size for this transformation is 3 bytes.\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.ToBase64Transform.InputBlockSize%2A> property to retrieve the input block size of the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#5)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#5)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#5)]\"\n  syntax:\n    content: public int InputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the input data blocks in bytes.\n  overload: System.Security.Cryptography.ToBase64Transform.InputBlockSize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  commentId: P:System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  id: OutputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: OutputBlockSize\n  nameWithType: ToBase64Transform.OutputBlockSize\n  fullName: ToBase64Transform.OutputBlockSize\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Gets the output block size.\n  remarks: The output block size for this transformation is 4 bytes.\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.ToBase64Transform.OutputBlockSize%2A> property to create a new byte array with the size of the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#6)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#6)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#6)]\"\n  syntax:\n    content: public int OutputBlockSize { get; }\n    return:\n      type: System.Int32\n      description: The size of the output data blocks in bytes.\n  overload: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: ToBase64Transform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: ToBase64Transform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Converts the specified region of the input byte array to base 64 and copies the result to the specified region of the output byte array.\n  remarks: The <xref:System.Security.Cryptography.ToBase64Transform> class is a block algorithm that processes input blocks of 3 bytes and creates output blocks of 4 bytes.  The <xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A> method transforms an input block of 24 bits into 32 bits of character data.  You must maintain 3 byte input boundaries to 4 byte output boundaries in order to match the block transform.\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.ToBase64Transform.TransformBlock%2A> method to iterate through `inputBytes` transforming by `blockSize`. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#8](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#8)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#8)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#8)]\"\n  syntax:\n    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to compute to base 64.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the input byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the input byte array to use as data.\n    - id: outputBuffer\n      type: System.Byte[]\n      description: The output to which to write the result.\n    - id: outputOffset\n      type: System.Int32\n      description: The offset into the output byte array from which to begin writing data.\n    return:\n      type: System.Int32\n      description: The number of bytes written.\n  overload: System.Security.Cryptography.ToBase64Transform.TransformBlock*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed.\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: The data size is not valid.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>inputBuffer</code> parameter contains an invalid offset length.  \\n  \\n -or-  \\n  \\n The <code>inputCount</code> parameter contains an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>inputBuffer</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>inputBuffer</code> parameter requires a non-negative number.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  langs:\n  - csharp\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: ToBase64Transform.TransformFinalBlock(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Security.Cryptography.Encoding\n  namespace: System.Security.Cryptography\n  summary: Converts the specified region of the specified byte array to base 64.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to call the <xref:System.Security.Cryptography.ToBase64Transform.TransformFinalBlock%2A> method to transform the final block of data. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.ToBase64Transform> class.  \\n  \\n [!code-cpp[System.Security.Cryptography.ToBase64Transform#9](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CPP/members.cpp#9)]\\n [!code-csharp[System.Security.Cryptography.ToBase64Transform#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/CS/members.cs#9)]\\n [!code-vb[System.Security.Cryptography.ToBase64Transform#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Cryptography.ToBase64Transform/VB/members.vb#9)]\"\n  syntax:\n    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);\n    parameters:\n    - id: inputBuffer\n      type: System.Byte[]\n      description: The input to convert to base 64.\n    - id: inputOffset\n      type: System.Int32\n      description: The offset into the byte array from which to begin using data.\n    - id: inputCount\n      type: System.Int32\n      description: The number of bytes in the byte array to use as data.\n    return:\n      type: System.Byte[]\n      description: The computed base 64 conversion.\n  overload: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The current <xref href=\"System.Security.Cryptography.ToBase64Transform\"></xref> object has already been disposed.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>inputBuffer</code> parameter contains an invalid offset length.  \\n  \\n -or-  \\n  \\n The <code>inputCount</code> parameter contains an invalid value.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>inputBuffer</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>inputBuffer</code> parameter requires a non-negative number.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.Security.Cryptography.CryptographicException\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CryptographicException\n  nameWithType: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Security.Cryptography.ToBase64Transform.#ctor\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: ToBase64Transform()\n  nameWithType: ToBase64Transform.ToBase64Transform()\n  fullName: ToBase64Transform.ToBase64Transform()\n- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ToBase64Transform.CanReuseTransform\n  fullName: ToBase64Transform.CanReuseTransform\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ToBase64Transform.CanTransformMultipleBlocks\n  fullName: ToBase64Transform.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.ToBase64Transform.Clear\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Clear()\n  nameWithType: ToBase64Transform.Clear()\n  fullName: ToBase64Transform.Clear()\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Dispose()\n  nameWithType: ToBase64Transform.Dispose()\n  fullName: ToBase64Transform.Dispose()\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: ToBase64Transform.Dispose(Boolean)\n  fullName: ToBase64Transform.Dispose(Boolean)\n- uid: System.Security.Cryptography.ToBase64Transform.Finalize\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Finalize()\n  nameWithType: ToBase64Transform.Finalize()\n  fullName: ToBase64Transform.Finalize()\n- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ToBase64Transform.InputBlockSize\n  fullName: ToBase64Transform.InputBlockSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ToBase64Transform.OutputBlockSize\n  fullName: ToBase64Transform.OutputBlockSize\n- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType: ToBase64Transform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: ToBase64Transform.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType: ToBase64Transform.TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: ToBase64Transform.TransformFinalBlock(Byte[], Int32, Int32)\n- uid: System.Security.Cryptography.ToBase64Transform.#ctor*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: ToBase64Transform\n  nameWithType: ToBase64Transform.ToBase64Transform\n  fullName: ToBase64Transform.ToBase64Transform\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.CanReuseTransform*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanReuseTransform\n  nameWithType: ToBase64Transform.CanReuseTransform\n  fullName: ToBase64Transform.CanReuseTransform\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.CanTransformMultipleBlocks*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: CanTransformMultipleBlocks\n  nameWithType: ToBase64Transform.CanTransformMultipleBlocks\n  fullName: ToBase64Transform.CanTransformMultipleBlocks\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.Clear*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Clear\n  nameWithType: ToBase64Transform.Clear\n  fullName: ToBase64Transform.Clear\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.Dispose*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Dispose\n  nameWithType: ToBase64Transform.Dispose\n  fullName: ToBase64Transform.Dispose\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.Finalize*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: Finalize\n  nameWithType: ToBase64Transform.Finalize\n  fullName: ToBase64Transform.Finalize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.InputBlockSize*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: InputBlockSize\n  nameWithType: ToBase64Transform.InputBlockSize\n  fullName: ToBase64Transform.InputBlockSize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.OutputBlockSize*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: OutputBlockSize\n  nameWithType: ToBase64Transform.OutputBlockSize\n  fullName: ToBase64Transform.OutputBlockSize\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.TransformBlock*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformBlock\n  nameWithType: ToBase64Transform.TransformBlock\n  fullName: ToBase64Transform.TransformBlock\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Security.Cryptography.ToBase64Transform.TransformFinalBlock*\n  parent: System.Security.Cryptography.ToBase64Transform\n  isExternal: false\n  name: TransformFinalBlock\n  nameWithType: ToBase64Transform.TransformFinalBlock\n  fullName: ToBase64Transform.TransformFinalBlock\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/ToBase64Transform.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n"}