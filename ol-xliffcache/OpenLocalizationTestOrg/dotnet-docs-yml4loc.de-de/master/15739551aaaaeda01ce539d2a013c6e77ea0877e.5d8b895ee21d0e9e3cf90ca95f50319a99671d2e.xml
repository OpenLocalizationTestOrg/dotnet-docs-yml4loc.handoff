{"nodes":[{"content":"Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.","nodes":[{"pos":[0,166],"content":"Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.","nodes":[{"content":"Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.","pos":[0,166]}]}],"pos":[565,732],"yaml":true},{"content":"This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor. Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML. The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.  \n  \n In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \n  \n## WPF Usage Notes  \n This interface is implemented by the WPF class <xref:System.Windows.NameScope>. Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.  \n  \n Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>. These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.","nodes":[{"pos":[0,571],"content":"This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor. Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML. The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.","nodes":[{"content":"This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor. Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML. The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.","pos":[0,571],"nodes":[{"content":"This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor.","pos":[0,136]},{"content":"Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML.","pos":[137,271]},{"content":"The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.","pos":[272,571]}]}]},{"pos":[578,960],"content":"In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).","nodes":[{"content":"In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.","pos":[0,108]},{"content":"In <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> is in the System.Xaml assembly.","pos":[109,240],"source":" In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Types Migrated from WPF to System.Xaml<ept id=\"p1\">](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)</ept>.","pos":[241,382],"source":" For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)."}]},{"pos":[969,984],"content":"WPF Usage Notes","linkify":"WPF Usage Notes","nodes":[{"content":"WPF Usage Notes","pos":[0,15]}]},{"pos":[988,1350],"content":"This interface is implemented by the WPF class <xref:System.Windows.NameScope>. Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.","nodes":[{"content":"This interface is implemented by the WPF class <ph id=\"ph1\">&lt;xref:System.Windows.NameScope&gt;</ph>.","pos":[0,79],"source":"This interface is implemented by the WPF class <xref:System.Windows.NameScope>."},{"content":"Most XAML namescope operations in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> operate by using <ph id=\"ph2\">&lt;xref:System.Windows.NameScope&gt;</ph> instances, but information is occasionally communicated internally by using <ph id=\"ph3\">&lt;xref:System.Windows.Markup.INameScope&gt;</ph> references.","pos":[80,362],"source":" Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references."}]},{"pos":[1357,1671],"content":"Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>. These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.","nodes":[{"content":"Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>. These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.","pos":[0,314],"nodes":[{"content":"Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <ph id=\"ph1\">&lt;xref:System.Windows.Style&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkTemplate&gt;</ph>.","pos":[0,171],"source":"Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>."},{"content":"These implementations usually rely on the explicit versions of the interface methods available from the <ph id=\"ph1\">&lt;xref:System.Windows.NameScope&gt;</ph> class.","pos":[172,314],"source":" These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class."}]}]}],"pos":[743,2424],"yaml":true,"extradata":"MT"},{"content":"Returns an object that has the provided identifying name.","nodes":[{"pos":[0,57],"content":"Returns an object that has the provided identifying name.","nodes":[{"content":"Returns an object that has the provided identifying name.","pos":[0,57]}]}],"pos":[3591,3649],"yaml":true},{"content":"Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).","nodes":[{"pos":[0,147],"content":"Valid name strings in XAML markup must match the requirements documented in <bpt id=\"p1\">[</bpt>XamlName Grammar<ept id=\"p1\">](~/docs/framework/xaml-services/xamlname-grammar.md)</ept>.","source":"Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md)."}],"pos":[3660,3808],"yaml":true,"extradata":"MT"},{"content":"The name identifier for the object being requested.","nodes":[{"pos":[0,51],"content":"The name identifier for the object being requested.","nodes":[{"content":"The name identifier for the object being requested.","pos":[0,51]}]}],"pos":[3945,3997],"yaml":true},{"content":"The object, if found. Returns `null` if no object of that name was found.","nodes":[{"pos":[0,73],"content":"The object, if found. Returns `null` if no object of that name was found.","nodes":[{"content":"The object, if found.","pos":[0,21]},{"content":"Returns <ph id=\"ph1\">`null`</ph> if no object of that name was found.","pos":[22,73],"source":" Returns `null` if no object of that name was found."}]}],"pos":[4054,4128],"yaml":true},{"content":"Registers the provided name into the current XAML namescope.","nodes":[{"pos":[0,60],"content":"Registers the provided name into the current XAML namescope.","nodes":[{"content":"Registers the provided name into the current XAML namescope.","pos":[0,60]}]}],"pos":[5207,5268],"yaml":true},{"content":"Duplicate names in a XAML namescope are not permitted.","nodes":[{"pos":[0,54],"content":"Duplicate names in a XAML namescope are not permitted.","nodes":[{"content":"Duplicate names in a XAML namescope are not permitted.","pos":[0,54]}]}],"pos":[5279,5334],"yaml":true,"extradata":"MT"},{"content":"The name to register.","nodes":[{"pos":[0,21],"content":"The name to register.","nodes":[{"content":"The name to register.","pos":[0,21]}]}],"pos":[5495,5517],"yaml":true},{"content":"The specific element that the provided <code>name</code> refers to.","nodes":[{"pos":[0,67],"content":"The specific element that the provided <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> refers to.","source":"The specific element that the provided <code>name</code> refers to."}],"pos":[5586,5654],"yaml":true},{"content":"Unregisters the provided name from the current XAML namescope.","nodes":[{"pos":[0,62],"content":"Unregisters the provided name from the current XAML namescope.","nodes":[{"content":"Unregisters the provided name from the current XAML namescope.","pos":[0,62]}]}],"pos":[6683,6746],"yaml":true},{"content":"The name to unregister.","nodes":[{"pos":[0,23],"content":"The name to unregister.","nodes":[{"content":"The name to unregister.","pos":[0,23]}]}],"pos":[6887,6911],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Markup.INameScope\n  commentId: T:System.Windows.Markup.INameScope\n  id: INameScope\n  children:\n  - System.Windows.Markup.INameScope.FindName(System.String)\n  - System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)\n  - System.Windows.Markup.INameScope.UnregisterName(System.String)\n  langs:\n  - csharp\n  name: INameScope\n  nameWithType: INameScope\n  fullName: System.Windows.Markup.INameScope\n  type: Interface\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope.\n  remarks: \"This interface is implemented by classes that have child elements that are intended to be reused through the template or defer metaphor. Templates, factories and similar constructs must have unique XAML namescopes that are separate from a main object graph and root XAML. The principle here is that there should be no name collisions when objects created from those child elements are introduced to an application's object graph, and so that DOM operations and XAML reference techniques that rely on the name identifier can rely on name uniqueness in each XAML namescope.  \\n  \\n In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.INameScope> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md).  \\n  \\n## WPF Usage Notes  \\n This interface is implemented by the WPF class <xref:System.Windows.NameScope>. Most XAML namescope operations in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] operate by using <xref:System.Windows.NameScope> instances, but information is occasionally communicated internally by using <xref:System.Windows.Markup.INameScope> references.  \\n  \\n Examples of WPF classes that use a factory or defer metaphor combined with XAML representation are <xref:System.Windows.Style> and <xref:System.Windows.FrameworkTemplate>. These implementations usually rely on the explicit versions of the interface methods available from the <xref:System.Windows.NameScope> class.\"\n  syntax:\n    content: public interface INameScope\n  derivedClasses:\n  - System.Windows.FrameworkTemplate\n  - System.Windows.ResourceDictionary\n  - System.Windows.Style\n  - System.Windows.Markup.INameScopeDictionary\n  implements: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/INameScope.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.INameScope.FindName(System.String)\n  commentId: M:System.Windows.Markup.INameScope.FindName(System.String)\n  id: FindName(System.String)\n  parent: System.Windows.Markup.INameScope\n  langs:\n  - csharp\n  name: FindName(String)\n  nameWithType: INameScope.FindName(String)\n  fullName: INameScope.FindName(String)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Returns an object that has the provided identifying name.\n  remarks: Valid name strings in XAML markup must match the requirements documented in [XamlName Grammar](~/docs/framework/xaml-services/xamlname-grammar.md).\n  syntax:\n    content: public object FindName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name identifier for the object being requested.\n    return:\n      type: System.Object\n      description: The object, if found. Returns `null` if no object of that name was found.\n  overload: System.Windows.Markup.INameScope.FindName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/INameScope.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)\n  commentId: M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)\n  id: RegisterName(System.String,System.Object)\n  parent: System.Windows.Markup.INameScope\n  langs:\n  - csharp\n  name: RegisterName(String, Object)\n  nameWithType: INameScope.RegisterName(String, Object)\n  fullName: INameScope.RegisterName(String, Object)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Registers the provided name into the current XAML namescope.\n  remarks: Duplicate names in a XAML namescope are not permitted.\n  syntax:\n    content: public void RegisterName (string name, object scopedElement);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name to register.\n    - id: scopedElement\n      type: System.Object\n      description: The specific element that the provided <code>name</code> refers to.\n  overload: System.Windows.Markup.INameScope.RegisterName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/INameScope.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\n- uid: System.Windows.Markup.INameScope.UnregisterName(System.String)\n  commentId: M:System.Windows.Markup.INameScope.UnregisterName(System.String)\n  id: UnregisterName(System.String)\n  parent: System.Windows.Markup.INameScope\n  langs:\n  - csharp\n  name: UnregisterName(String)\n  nameWithType: INameScope.UnregisterName(String)\n  fullName: INameScope.UnregisterName(String)\n  type: Method\n  assemblies:\n  - System.Xaml\n  namespace: System.Windows.Markup\n  summary: Unregisters the provided name from the current XAML namescope.\n  syntax:\n    content: public void UnregisterName (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name to unregister.\n  overload: System.Windows.Markup.INameScope.UnregisterName*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/INameScope.xml\n  ms.technology:\n  - dotnet-wpf\n  manager: martinek\nreferences:\n- uid: System.Windows.Markup.INameScope.FindName(System.String)\n  parent: System.Windows.Markup.INameScope\n  isExternal: false\n  name: FindName(String)\n  nameWithType: INameScope.FindName(String)\n  fullName: INameScope.FindName(String)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)\n  parent: System.Windows.Markup.INameScope\n  isExternal: false\n  name: RegisterName(String, Object)\n  nameWithType: INameScope.RegisterName(String, Object)\n  fullName: INameScope.RegisterName(String, Object)\n- uid: System.Windows.Markup.INameScope.UnregisterName(System.String)\n  parent: System.Windows.Markup.INameScope\n  isExternal: false\n  name: UnregisterName(String)\n  nameWithType: INameScope.UnregisterName(String)\n  fullName: INameScope.UnregisterName(String)\n- uid: System.Windows.Markup.INameScope.FindName*\n  parent: System.Windows.Markup.INameScope\n  isExternal: false\n  name: FindName\n  nameWithType: INameScope.FindName\n  fullName: INameScope.FindName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/INameScope.xml\n- uid: System.Windows.Markup.INameScope.RegisterName*\n  parent: System.Windows.Markup.INameScope\n  isExternal: false\n  name: RegisterName\n  nameWithType: INameScope.RegisterName\n  fullName: INameScope.RegisterName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/INameScope.xml\n- uid: System.Windows.Markup.INameScope.UnregisterName*\n  parent: System.Windows.Markup.INameScope\n  isExternal: false\n  name: UnregisterName\n  nameWithType: INameScope.UnregisterName\n  fullName: INameScope.UnregisterName\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/INameScope.xml\n"}