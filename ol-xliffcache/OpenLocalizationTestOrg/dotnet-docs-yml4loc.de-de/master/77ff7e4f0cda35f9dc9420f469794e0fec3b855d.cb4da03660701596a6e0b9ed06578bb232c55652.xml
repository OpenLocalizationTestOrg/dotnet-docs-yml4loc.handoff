{"nodes":[{"content":"Used for digest authentication of HTTP clients.","nodes":[{"pos":[0,47],"content":"Used for digest authentication of HTTP clients.","nodes":[{"content":"Used for digest authentication of HTTP clients.","pos":[0,47]}]}],"pos":[649,697],"yaml":true},{"content":"Digest authentication verifies that both parties to a communication know a shared secret (a password). Authentication is done without sending the password in the clear. Digest authentication is based on a challenge-response paradigm. The Digest scheme challenges using a nonce (\"number used once\") value. The response must contain a checksum of the user name, the password, the nonce value, the HTTP method, and the requested URI.","nodes":[{"pos":[0,430],"content":"Digest authentication verifies that both parties to a communication know a shared secret (a password). Authentication is done without sending the password in the clear. Digest authentication is based on a challenge-response paradigm. The Digest scheme challenges using a nonce (\"number used once\") value. The response must contain a checksum of the user name, the password, the nonce value, the HTTP method, and the requested URI.","nodes":[{"content":"Digest authentication verifies that both parties to a communication know a shared secret (a password). Authentication is done without sending the password in the clear. Digest authentication is based on a challenge-response paradigm. The Digest scheme challenges using a nonce (\"number used once\") value. The response must contain a checksum of the user name, the password, the nonce value, the HTTP method, and the requested URI.","pos":[0,430],"nodes":[{"content":"Digest authentication verifies that both parties to a communication know a shared secret (a password).","pos":[0,102]},{"content":"Authentication is done without sending the password in the clear.","pos":[103,168]},{"content":"Digest authentication is based on a challenge-response paradigm.","pos":[169,233]},{"content":"The Digest scheme challenges using a nonce (\"number used once\") value.","pos":[234,304]},{"content":"The response must contain a checksum of the user name, the password, the nonce value, the HTTP method, and the requested URI.","pos":[305,430]}]}]}],"pos":[708,1139],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the level of impersonation that the client allows with the client credential provided.","nodes":[{"pos":[0,99],"content":"Gets or sets the level of impersonation that the client allows with the client credential provided.","nodes":[{"content":"Gets or sets the level of impersonation that the client allows with the client credential provided.","pos":[0,99]}]}],"pos":[2808,2908],"yaml":true},{"content":"Allowable values include:  \n  \n <xref:System.Security.Principal.TokenImpersonationLevel.Delegation>,  \n  \n <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and  \n  \n <xref:System.Security.Principal.TokenImpersonationLevel.Impersonation>.  \n  \n Due to the limitations of Digest authentication, when the client is using non-default credentials, only `Impersonation` and `Delegation` levels are allowed.","nodes":[{"pos":[0,25],"content":"Allowable values include:","nodes":[{"content":"Allowable values include:","pos":[0,25]}]},{"pos":[32,100],"content":"<xref:System.Security.Principal.TokenImpersonationLevel.Delegation>,","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Delegation&gt;</ph>,","pos":[0,68],"source":"<xref:System.Security.Principal.TokenImpersonationLevel.Delegation>,"}]},{"pos":[107,183],"content":"<xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Identification&gt;</ph>, and","pos":[0,76],"source":"<xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and"}]},{"pos":[190,261],"content":"<xref:System.Security.Principal.TokenImpersonationLevel.Impersonation>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Principal.TokenImpersonationLevel.Impersonation&gt;</ph>.","pos":[0,71],"source":"<xref:System.Security.Principal.TokenImpersonationLevel.Impersonation>."}]},{"pos":[268,424],"content":"Due to the limitations of Digest authentication, when the client is using non-default credentials, only <ph id=\"ph1\">`Impersonation`</ph> and <ph id=\"ph2\">`Delegation`</ph> levels are allowed.","source":"Due to the limitations of Digest authentication, when the client is using non-default credentials, only `Impersonation` and `Delegation` levels are allowed."}],"pos":[2919,3354],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> that the client grants the server as part of HTTP digest authentication.","nodes":[{"pos":[0,147],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph> that the client grants the server as part of HTTP digest authentication.","source":"The <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> that the client grants the server as part of HTTP digest authentication."}],"pos":[3929,4077],"yaml":true},{"content":"Gets or sets the network credential to be used for digest-based authentication.","nodes":[{"pos":[0,79],"content":"Gets or sets the network credential to be used for digest-based authentication.","nodes":[{"content":"Gets or sets the network credential to be used for digest-based authentication.","pos":[0,79]}]}],"pos":[5390,5470],"yaml":true},{"content":"If not specified, the default thread credential will be used.","nodes":[{"pos":[0,61],"content":"If not specified, the default thread credential will be used.","nodes":[{"content":"If not specified, the default thread credential will be used.","pos":[0,61]}]}],"pos":[5481,5543],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Net.NetworkCredential\"></xref> to be used for digest-based authentication.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Net.NetworkCredential\"&gt;&lt;/xref&gt;</ph> to be used for digest-based authentication.","source":"The <xref href=\"System.Net.NetworkCredential\"></xref> to be used for digest-based authentication."}],"pos":[6383,6481],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Security.HttpDigestClientCredential\n  commentId: T:System.ServiceModel.Security.HttpDigestClientCredential\n  id: HttpDigestClientCredential\n  children:\n  - System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel\n  - System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential\n  langs:\n  - csharp\n  name: HttpDigestClientCredential\n  nameWithType: HttpDigestClientCredential\n  fullName: System.ServiceModel.Security.HttpDigestClientCredential\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Used for digest authentication of HTTP clients.\n  remarks: Digest authentication verifies that both parties to a communication know a shared secret (a password). Authentication is done without sending the password in the clear. Digest authentication is based on a challenge-response paradigm. The Digest scheme challenges using a nonce (\"number used once\") value. The response must contain a checksum of the user name, the password, the nonce value, the HTTP method, and the requested URI.\n  syntax:\n    content: public sealed class HttpDigestClientCredential\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/HttpDigestClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel\n  commentId: P:System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel\n  id: AllowedImpersonationLevel\n  parent: System.ServiceModel.Security.HttpDigestClientCredential\n  langs:\n  - csharp\n  name: AllowedImpersonationLevel\n  nameWithType: HttpDigestClientCredential.AllowedImpersonationLevel\n  fullName: HttpDigestClientCredential.AllowedImpersonationLevel\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets the level of impersonation that the client allows with the client credential provided.\n  remarks: \"Allowable values include:  \\n  \\n <xref:System.Security.Principal.TokenImpersonationLevel.Delegation>,  \\n  \\n <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and  \\n  \\n <xref:System.Security.Principal.TokenImpersonationLevel.Impersonation>.  \\n  \\n Due to the limitations of Digest authentication, when the client is using non-default credentials, only `Impersonation` and `Delegation` levels are allowed.\"\n  example:\n  - \"The following example shows how to set this property.  \\n  \\n [!code-csharp[S_UE_HttpDigestClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpdigestclientcredential/cs/source.cs#1)]\\n [!code-vb[S_UE_HttpDigestClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ue_httpdigestclientcredential/vb/source.vb#1)]\"\n  syntax:\n    content: public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get; set; }\n    return:\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: The <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref> that the client grants the server as part of HTTP digest authentication.\n  overload: System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/HttpDigestClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential\n  commentId: P:System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential\n  id: ClientCredential\n  parent: System.ServiceModel.Security.HttpDigestClientCredential\n  langs:\n  - csharp\n  name: ClientCredential\n  nameWithType: HttpDigestClientCredential.ClientCredential\n  fullName: HttpDigestClientCredential.ClientCredential\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Security\n  summary: Gets or sets the network credential to be used for digest-based authentication.\n  remarks: If not specified, the default thread credential will be used.\n  example:\n  - \"The following code examples show how to authenticate the client as a different principal.  \\n  \\n This is how to change the properties of the instance of the <xref:System.Net.NetworkCredential> class that is returned by this property.  \\n  \\n [!code-csharp[S_UE_HttpDigestClientCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpdigestclientcredential/cs/source.cs#2)]  \\n  \\n And here is how to create a new instance of the <xref:System.Net.NetworkCredential> class and assign it to this property.  \\n  \\n [!code-csharp[S_UE_HttpDigestClientCredential#3](~/samples/snippets/csharp/VS_Snippets_CFX/s_ue_httpdigestclientcredential/cs/source.cs#3)]\"\n  syntax:\n    content: public System.Net.NetworkCredential ClientCredential { get; set; }\n    return:\n      type: System.Net.NetworkCredential\n      description: The <xref href=\"System.Net.NetworkCredential\"></xref> to be used for digest-based authentication.\n  overload: System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/HttpDigestClientCredential.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel\n  parent: System.ServiceModel.Security.HttpDigestClientCredential\n  isExternal: false\n  name: AllowedImpersonationLevel\n  nameWithType: HttpDigestClientCredential.AllowedImpersonationLevel\n  fullName: HttpDigestClientCredential.AllowedImpersonationLevel\n- uid: System.Security.Principal.TokenImpersonationLevel\n  parent: System.Security.Principal\n  isExternal: false\n  name: TokenImpersonationLevel\n  nameWithType: TokenImpersonationLevel\n  fullName: System.Security.Principal.TokenImpersonationLevel\n- uid: System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential\n  parent: System.ServiceModel.Security.HttpDigestClientCredential\n  isExternal: false\n  name: ClientCredential\n  nameWithType: HttpDigestClientCredential.ClientCredential\n  fullName: HttpDigestClientCredential.ClientCredential\n- uid: System.Net.NetworkCredential\n  parent: System.Net\n  isExternal: false\n  name: NetworkCredential\n  nameWithType: NetworkCredential\n  fullName: System.Net.NetworkCredential\n- uid: System.ServiceModel.Security.HttpDigestClientCredential.AllowedImpersonationLevel*\n  parent: System.ServiceModel.Security.HttpDigestClientCredential\n  isExternal: false\n  name: AllowedImpersonationLevel\n  nameWithType: HttpDigestClientCredential.AllowedImpersonationLevel\n  fullName: HttpDigestClientCredential.AllowedImpersonationLevel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/HttpDigestClientCredential.xml\n- uid: System.ServiceModel.Security.HttpDigestClientCredential.ClientCredential*\n  parent: System.ServiceModel.Security.HttpDigestClientCredential\n  isExternal: false\n  name: ClientCredential\n  nameWithType: HttpDigestClientCredential.ClientCredential\n  fullName: HttpDigestClientCredential.ClientCredential\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Security/HttpDigestClientCredential.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}