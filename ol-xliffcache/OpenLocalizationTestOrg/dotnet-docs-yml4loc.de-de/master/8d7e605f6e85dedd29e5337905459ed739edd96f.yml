### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.ValueSerializer
  commentId: T:System.Windows.Markup.ValueSerializer
  id: ValueSerializer
  children:
  - System.Windows.Markup.ValueSerializer.#ctor
  - System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  - System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  - System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  - System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  - System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)
  - System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)
  - System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)
  - System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)
  - System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)
  - System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)
  - System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: ValueSerializer
  fullName: System.Windows.Markup.ValueSerializer
  type: Class
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Abstract class that defines conversion behavior for serialization from an object representation.
  remarks: "The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.  If a type converter (derived from <xref:System.ComponentModel.TypeConverter>) does not meet these requirements in its `ConvertTo` implementations for string output, a custom <xref:System.Windows.Markup.ValueSerializer> must be declared. Either the <xref:System.Windows.Markup.ValueSerializer> should meet the requirements, or a null <xref:System.Windows.Markup.ValueSerializer> should be associated with the type. A <xref:System.Windows.Markup.ValueSerializer> is associated with a type by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute.  \n  \n A null <xref:System.Windows.Markup.ValueSerializer> indicates the type converter should be ignored for convert-to-string conversions from the object graph.  \n  \n> [!IMPORTANT]\n>  Implementation of <xref:System.Windows.Markup.ValueSerializer> should avoid throwing exceptions. Any exceptions thrown could terminate serialization.  \n  \n <xref:System.Windows.Markup.IValueSerializerContext> for a <xref:System.Windows.Markup.ValueSerializer> and its APIs is analogous to <xref:System.ComponentModel.ITypeDescriptorContext> for a <xref:System.ComponentModel.TypeConverter>. In fact, <xref:System.Windows.Markup.IValueSerializerContext> inherits <xref:System.ComponentModel.ITypeDescriptorContext>. When a <xref:System.Windows.Markup.ValueSerializer> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services. Because of the general guidance that a <xref:System.Windows.Markup.ValueSerializer> must not throw exceptions. Failure to return a particular service from the context must also not throw any exceptions.  \n  \n In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase. In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> is in the System.Xaml assembly. For more information, see [Types Migrated from WPF to System.Xaml](~/docs/framework/xaml-services/types-migrated-from-wpf-to-system-xaml.md)."
  syntax:
    content: public abstract class ValueSerializer
  inheritance:
  - System.Object
  derivedClasses:
  - Microsoft.VisualBasic.Activities.XamlIntegration.VisualBasicSettingsValueSerializer
  - System.Activities.XamlIntegration.ActivityWithResultValueSerializer
  - System.Activities.XamlIntegration.ArgumentValueSerializer
  - System.Windows.Converters.Int32RectValueSerializer
  - System.Windows.Converters.PointValueSerializer
  - System.Windows.Converters.RectValueSerializer
  - System.Windows.Converters.SizeValueSerializer
  - System.Windows.Converters.VectorValueSerializer
  - System.Windows.Input.KeyGestureValueSerializer
  - System.Windows.Input.KeyValueSerializer
  - System.Windows.Input.ModifierKeysValueSerializer
  - System.Windows.Input.MouseActionValueSerializer
  - System.Windows.Input.MouseGestureValueSerializer
  - System.Windows.Markup.DateTimeValueSerializer
  - System.Windows.Media.FontFamilyValueSerializer
  - System.Windows.Media.ImageSourceValueSerializer
  - System.Windows.Media.Converters.BrushValueSerializer
  - System.Windows.Media.Converters.CacheModeValueSerializer
  - System.Windows.Media.Converters.DoubleCollectionValueSerializer
  - System.Windows.Media.Converters.GeometryValueSerializer
  - System.Windows.Media.Converters.Int32CollectionValueSerializer
  - System.Windows.Media.Converters.MatrixValueSerializer
  - System.Windows.Media.Converters.PathFigureCollectionValueSerializer
  - System.Windows.Media.Converters.PointCollectionValueSerializer
  - System.Windows.Media.Converters.TransformValueSerializer
  - System.Windows.Media.Converters.VectorCollectionValueSerializer
  - System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer
  - System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer
  - System.Windows.Media.Media3D.Converters.Point3DValueSerializer
  - System.Windows.Media.Media3D.Converters.Point4DValueSerializer
  - System.Windows.Media.Media3D.Converters.QuaternionValueSerializer
  - System.Windows.Media.Media3D.Converters.Rect3DValueSerializer
  - System.Windows.Media.Media3D.Converters.Size3DValueSerializer
  - System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer
  - System.Windows.Media.Media3D.Converters.Vector3DValueSerializer
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.#ctor
  commentId: M:System.Windows.Markup.ValueSerializer.#ctor
  id: '#ctor'
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: ValueSerializer()
  nameWithType: ValueSerializer.ValueSerializer()
  fullName: ValueSerializer.ValueSerializer()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Initializes a new instance of the <xref href="System.Windows.Markup.ValueSerializer"></xref> class.
  remarks: The body of this constructor is empty; the <xref:System.Windows.Markup.ValueSerializer> class does not contain any values that require initialization.
  syntax:
    content: protected ValueSerializer ();
    parameters: []
  overload: System.Windows.Markup.ValueSerializer.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  commentId: M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  id: CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: CanConvertFromString(String, IValueSerializerContext)
  nameWithType: ValueSerializer.CanConvertFromString(String, IValueSerializerContext)
  fullName: ValueSerializer.CanConvertFromString(String, IValueSerializerContext)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: When overridden in a derived class, determines whether the specified <xref href="System.String"></xref> can be converted to an instance of the type that the implementation of <xref href="System.Windows.Markup.ValueSerializer"></xref> supports.
  remarks: The base implementation always returns `false`.
  syntax:
    content: public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);
    parameters:
    - id: value
      type: System.String
      description: The string to evaluate for conversion.
    - id: context
      type: System.Windows.Markup.IValueSerializerContext
      description: Context information that is used for conversion.
    return:
      type: System.Boolean
      description: '`true` if the value can be converted; otherwise, `false`.'
  overload: System.Windows.Markup.ValueSerializer.CanConvertFromString*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  commentId: M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  id: CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: CanConvertToString(Object, IValueSerializerContext)
  nameWithType: ValueSerializer.CanConvertToString(Object, IValueSerializerContext)
  fullName: ValueSerializer.CanConvertToString(Object, IValueSerializerContext)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: When overridden in a derived class, determines whether the specified object can be converted into a <xref href="System.String"></xref>.
  remarks: The base implementation always returns `false`.
  syntax:
    content: public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);
    parameters:
    - id: value
      type: System.Object
      description: The object to evaluate for conversion.
    - id: context
      type: System.Windows.Markup.IValueSerializerContext
      description: Context information that is used for conversion.
    return:
      type: System.Boolean
      description: '`true` if the <code>value</code> can be converted into a <xref href="System.String"></xref>; otherwise, `false.`'
  overload: System.Windows.Markup.ValueSerializer.CanConvertToString*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  commentId: M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  id: ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: ConvertFromString(String, IValueSerializerContext)
  nameWithType: ValueSerializer.ConvertFromString(String, IValueSerializerContext)
  fullName: ValueSerializer.ConvertFromString(String, IValueSerializerContext)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: When overridden in a derived class, converts a <xref href="System.String"></xref> to an instance of the type that the implementation of <xref href="System.Windows.Markup.ValueSerializer"></xref> supports.
  remarks: The base implementation always throws an exception.
  syntax:
    content: public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);
    parameters:
    - id: value
      type: System.String
      description: The string to convert.
    - id: context
      type: System.Windows.Markup.IValueSerializerContext
      description: Context information that is used for conversion.
    return:
      type: System.Object
      description: A new instance of the type that the implementation of <xref href="System.Windows.Markup.ValueSerializer"></xref> supports based on the supplied <code>value</code>.
  overload: System.Windows.Markup.ValueSerializer.ConvertFromString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>value</code> cannot be converted.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  commentId: M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  id: ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: ConvertToString(Object, IValueSerializerContext)
  nameWithType: ValueSerializer.ConvertToString(Object, IValueSerializerContext)
  fullName: ValueSerializer.ConvertToString(Object, IValueSerializerContext)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: When overridden in a derived class, converts the specified object to a <xref href="System.String"></xref>.
  remarks: The base implementation always throws an exception.
  syntax:
    content: public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);
    parameters:
    - id: value
      type: System.Object
      description: The object to convert into a string.
    - id: context
      type: System.Windows.Markup.IValueSerializerContext
      description: Context information that is used for conversion.
    return:
      type: System.String
      description: A string representation of the specified object.
  overload: System.Windows.Markup.ValueSerializer.ConvertToString*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>value</code> cannot be converted.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)
  commentId: M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)
  id: GetConvertFromException(System.Object)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: GetConvertFromException(Object)
  nameWithType: ValueSerializer.GetConvertFromException(Object)
  fullName: ValueSerializer.GetConvertFromException(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Returns an exception to throw when a conversion cannot be performed.
  remarks: "The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertFromException` (with parameters provided).  \n  \n The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message. The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>."
  syntax:
    content: protected Exception GetConvertFromException (object value);
    parameters:
    - id: value
      type: System.Object
      description: The object that could not be converted.
    return:
      type: System.Exception
      description: An <xref href="System.Exception"></xref> object for the exception to throw when a `ConvertFrom` conversion cannot be performed.
  overload: System.Windows.Markup.ValueSerializer.GetConvertFromException*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)
  commentId: M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)
  id: GetConvertToException(System.Object,System.Type)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: GetConvertToException(Object, Type)
  nameWithType: ValueSerializer.GetConvertToException(Object, Type)
  fullName: ValueSerializer.GetConvertToException(Object, Type)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Returns an exception to throw when a conversion cannot be performed.
  remarks: "The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertToException` (with `value` parameter provided).  \n  \n The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message. The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>."
  syntax:
    content: protected Exception GetConvertToException (object value, Type destinationType);
    parameters:
    - id: value
      type: System.Object
      description: The object that could not be converted.
    - id: destinationType
      type: System.Type
      description: A type that represents the type the conversion was trying to convert to.
    return:
      type: System.Exception
      description: An <xref href="System.Exception"></xref> object for the exception to throw when a `ConvertTo` conversion cannot be performed.
  overload: System.Windows.Markup.ValueSerializer.GetConvertToException*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)
  id: GetSerializerFor(System.ComponentModel.PropertyDescriptor)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: GetSerializerFor(PropertyDescriptor)
  nameWithType: ValueSerializer.GetSerializerFor(PropertyDescriptor)
  fullName: ValueSerializer.GetSerializerFor(PropertyDescriptor)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Gets the <xref href="System.Windows.Markup.ValueSerializer"></xref> declared for a property, by passing a CLR property descriptor for the property.
  remarks: "A <xref:System.Windows.Markup.ValueSerializer> for a property, or for a type that is used as the value for a property, is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the property or type declaration. The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the property, or then if found on the property's type. `null` might be returned if no such serializer exists. `null` might also be returned if a type or property is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.  \n  \n Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>. This is done only in cases where all of the following are true:  \n  \n-   A <xref:System.ComponentModel.TypeConverterAttribute> is found on the relevant property, or the relevant property's type.  \n  \n-   The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.  \n  \n-   The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName>, called referencing the <xref:System.String> type.  \n  \n-   The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=fullName>, called referencing the <xref:System.String> type.  \n  \n-   The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=fullName>, called referencing the <xref:System.String> type.  \n  \n> [!NOTE]\n>  The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`)."
  syntax:
    content: public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);
    parameters:
    - id: descriptor
      type: System.ComponentModel.PropertyDescriptor
      description: The CLR property descriptor for the property to be serialized.
    return:
      type: System.Windows.Markup.ValueSerializer
      description: The serializer associated with the specified property. May return `null`.
  overload: System.Windows.Markup.ValueSerializer.GetSerializerFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>descriptor</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)
  commentId: M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)
  id: GetSerializerFor(System.Type)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: GetSerializerFor(Type)
  nameWithType: ValueSerializer.GetSerializerFor(Type)
  fullName: ValueSerializer.GetSerializerFor(Type)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Gets the <xref href="System.Windows.Markup.ValueSerializer"></xref> declared for the specified type.
  remarks: "A <xref:System.Windows.Markup.ValueSerializer> for a type is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the type declaration. The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the specified `type`. `null` might be returned if no such serializer exists. `null` might also be returned if a type is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.  \n  \n Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>. This is done only in cases where all of the following are true:  \n  \n-   A <xref:System.ComponentModel.TypeConverterAttribute> is found on `type`.  \n  \n-   The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.  \n  \n-   The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=fullName>, called referencing the <xref:System.String> type.  \n  \n-   The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=fullName>, called referencing the <xref:System.String> type.  \n  \n-   The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=fullName>, called referencing the <xref:System.String> type.  \n  \n> [!NOTE]\n>  The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`)."
  syntax:
    content: public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type to get the <xref href="System.Windows.Markup.ValueSerializer"></xref> for.
    return:
      type: System.Windows.Markup.ValueSerializer
      description: The serializer associated with the specified type. May return `null`.
  overload: System.Windows.Markup.ValueSerializer.GetSerializerFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)
  commentId: M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)
  id: GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: GetSerializerFor(PropertyDescriptor, IValueSerializerContext)
  nameWithType: ValueSerializer.GetSerializerFor(PropertyDescriptor, IValueSerializerContext)
  fullName: ValueSerializer.GetSerializerFor(PropertyDescriptor, IValueSerializerContext)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Gets the <xref href="System.Windows.Markup.ValueSerializer"></xref> declared for the specified property, using the specified context.
  remarks: "Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName>. The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> implementation would typically also rely on the `descriptor`, but might implement special behavior for certain contexts.  \n  \n This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.  This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.  \n  \n If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> for your specified `descriptor`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> overload."
  syntax:
    content: public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);
    parameters:
    - id: descriptor
      type: System.ComponentModel.PropertyDescriptor
      description: Descriptor for the property to be serialized.
    - id: context
      type: System.Windows.Markup.IValueSerializerContext
      description: Context information that is used for conversion.
    return:
      type: System.Windows.Markup.ValueSerializer
      description: The serializer associated with the specified property.
  overload: System.Windows.Markup.ValueSerializer.GetSerializerFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>descriptor</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)
  commentId: M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)
  id: GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: GetSerializerFor(Type, IValueSerializerContext)
  nameWithType: ValueSerializer.GetSerializerFor(Type, IValueSerializerContext)
  fullName: ValueSerializer.GetSerializerFor(Type, IValueSerializerContext)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Gets the <xref href="System.Windows.Markup.ValueSerializer"></xref> declared for the specified type, using the specified context.
  remarks: "Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName>. The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> implementation would typically also rely on the `type`, but might implement special behavior for certain contexts.  \n  \n This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service. This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.  \n  \n If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=fullName> for your specified `type`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> overload."
  syntax:
    content: public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);
    parameters:
    - id: type
      type: System.Type
      description: The type to get the <xref href="System.Windows.Markup.ValueSerializer"></xref> for.
    - id: context
      type: System.Windows.Markup.IValueSerializerContext
      description: Context information that is used for conversion.
    return:
      type: System.Windows.Markup.ValueSerializer
      description: The serializer associated with the specified type.
  overload: System.Windows.Markup.ValueSerializer.GetSerializerFor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
- uid: System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)
  commentId: M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)
  id: TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  langs:
  - csharp
  name: TypeReferences(Object, IValueSerializerContext)
  nameWithType: ValueSerializer.TypeReferences(Object, IValueSerializerContext)
  fullName: ValueSerializer.TypeReferences(Object, IValueSerializerContext)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Windows.Markup
  summary: Gets an enumeration of the types referenced by the <xref href="System.Windows.Markup.ValueSerializer"></xref>.
  remarks: "Any types a <xref:System.Windows.Markup.ValueSerializer> converts should be included in the returned enumeration.  This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.  \n  \n Overriding this method is an advanced scenario. Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.  \n  \n## WPF Usage Notes  \n The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system implements an internal value serializer that overrides <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> because a dependency property has a concept that it can have added owners. [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] expressions also have special internal handling."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<Type> TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);
    parameters:
    - id: value
      type: System.Object
      description: The value being serialized.
    - id: context
      type: System.Windows.Markup.IValueSerializerContext
      description: Context information that is used for conversion.
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: The types converted by this serializer.
  overload: System.Windows.Markup.ValueSerializer.TypeReferences*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
  ms.technology:
  - dotnet-wpf
  manager: martinek
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Windows.Markup.ValueSerializer.#ctor
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: ValueSerializer()
  nameWithType: ValueSerializer.ValueSerializer()
  fullName: ValueSerializer.ValueSerializer()
- uid: System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: CanConvertFromString(String, IValueSerializerContext)
  nameWithType: ValueSerializer.CanConvertFromString(String, IValueSerializerContext)
  fullName: ValueSerializer.CanConvertFromString(String, IValueSerializerContext)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Markup.IValueSerializerContext
  parent: System.Windows.Markup
  isExternal: false
  name: IValueSerializerContext
  nameWithType: IValueSerializerContext
  fullName: System.Windows.Markup.IValueSerializerContext
- uid: System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: CanConvertToString(Object, IValueSerializerContext)
  nameWithType: ValueSerializer.CanConvertToString(Object, IValueSerializerContext)
  fullName: ValueSerializer.CanConvertToString(Object, IValueSerializerContext)
- uid: System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: ConvertFromString(String, IValueSerializerContext)
  nameWithType: ValueSerializer.ConvertFromString(String, IValueSerializerContext)
  fullName: ValueSerializer.ConvertFromString(String, IValueSerializerContext)
- uid: System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: ConvertToString(Object, IValueSerializerContext)
  nameWithType: ValueSerializer.ConvertToString(Object, IValueSerializerContext)
  fullName: ValueSerializer.ConvertToString(Object, IValueSerializerContext)
- uid: System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetConvertFromException(Object)
  nameWithType: ValueSerializer.GetConvertFromException(Object)
  fullName: ValueSerializer.GetConvertFromException(Object)
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetConvertToException(Object, Type)
  nameWithType: ValueSerializer.GetConvertToException(Object, Type)
  fullName: ValueSerializer.GetConvertToException(Object, Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetSerializerFor(PropertyDescriptor)
  nameWithType: ValueSerializer.GetSerializerFor(PropertyDescriptor)
  fullName: ValueSerializer.GetSerializerFor(PropertyDescriptor)
- uid: System.Windows.Markup.ValueSerializer
  parent: System.Windows.Markup
  isExternal: false
  name: ValueSerializer
  nameWithType: ValueSerializer
  fullName: System.Windows.Markup.ValueSerializer
- uid: System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetSerializerFor(Type)
  nameWithType: ValueSerializer.GetSerializerFor(Type)
  fullName: ValueSerializer.GetSerializerFor(Type)
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetSerializerFor(PropertyDescriptor, IValueSerializerContext)
  nameWithType: ValueSerializer.GetSerializerFor(PropertyDescriptor, IValueSerializerContext)
  fullName: ValueSerializer.GetSerializerFor(PropertyDescriptor, IValueSerializerContext)
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetSerializerFor(Type, IValueSerializerContext)
  nameWithType: ValueSerializer.GetSerializerFor(Type, IValueSerializerContext)
  fullName: ValueSerializer.GetSerializerFor(Type, IValueSerializerContext)
- uid: System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: TypeReferences(Object, IValueSerializerContext)
  nameWithType: ValueSerializer.TypeReferences(Object, IValueSerializerContext)
  fullName: ValueSerializer.TypeReferences(Object, IValueSerializerContext)
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Markup.ValueSerializer.#ctor*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: ValueSerializer
  nameWithType: ValueSerializer.ValueSerializer
  fullName: ValueSerializer.ValueSerializer
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.CanConvertFromString*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: CanConvertFromString
  nameWithType: ValueSerializer.CanConvertFromString
  fullName: ValueSerializer.CanConvertFromString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.CanConvertToString*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: CanConvertToString
  nameWithType: ValueSerializer.CanConvertToString
  fullName: ValueSerializer.CanConvertToString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.ConvertFromString*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: ConvertFromString
  nameWithType: ValueSerializer.ConvertFromString
  fullName: ValueSerializer.ConvertFromString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.ConvertToString*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: ConvertToString
  nameWithType: ValueSerializer.ConvertToString
  fullName: ValueSerializer.ConvertToString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.GetConvertFromException*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetConvertFromException
  nameWithType: ValueSerializer.GetConvertFromException
  fullName: ValueSerializer.GetConvertFromException
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.GetConvertToException*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetConvertToException
  nameWithType: ValueSerializer.GetConvertToException
  fullName: ValueSerializer.GetConvertToException
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.GetSerializerFor*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: GetSerializerFor
  nameWithType: ValueSerializer.GetSerializerFor
  fullName: ValueSerializer.GetSerializerFor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Windows.Markup.ValueSerializer.TypeReferences*
  parent: System.Windows.Markup.ValueSerializer
  isExternal: false
  name: TypeReferences
  nameWithType: ValueSerializer.TypeReferences
  fullName: ValueSerializer.TypeReferences
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Markup/ValueSerializer.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
