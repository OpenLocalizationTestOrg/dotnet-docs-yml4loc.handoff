### YamlMime:ManagedReference
items:
- uid: System.Threading.Barrier
  commentId: T:System.Threading.Barrier
  id: Barrier
  children:
  - System.Threading.Barrier.#ctor(System.Int32)
  - System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  - System.Threading.Barrier.AddParticipant
  - System.Threading.Barrier.AddParticipants(System.Int32)
  - System.Threading.Barrier.CurrentPhaseNumber
  - System.Threading.Barrier.Dispose
  - System.Threading.Barrier.Dispose(System.Boolean)
  - System.Threading.Barrier.ParticipantCount
  - System.Threading.Barrier.ParticipantsRemaining
  - System.Threading.Barrier.RemoveParticipant
  - System.Threading.Barrier.RemoveParticipants(System.Int32)
  - System.Threading.Barrier.SignalAndWait
  - System.Threading.Barrier.SignalAndWait(System.Int32)
  - System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  - System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  - System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  name: Barrier
  nameWithType: Barrier
  fullName: System.Threading.Barrier
  type: Class
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.
  remarks: A group of tasks cooperate by moving through a series of phases, where each in the group signals it has arrived at the <xref:System.Threading.Barrier> in a given phase and implicitly waits for all others to arrive. The same <xref:System.Threading.Barrier> can be used for multiple phases.
  example:
  - "The following example shows how to use a barrier:  \n  \n [!code-csharp[System.Threading.Barrier#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.barrier/cs/barrier.cs#01)]\n [!code-vb[System.Threading.Barrier#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.barrier/vb/barrier.vb#01)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public class Barrier : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.#ctor(System.Int32)
  commentId: M:System.Threading.Barrier.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: Barrier(Int32)
  nameWithType: Barrier.Barrier(Int32)
  fullName: Barrier.Barrier(Int32)
  type: Constructor
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Barrier"></xref> class.
  syntax:
    content: public Barrier (int participantCount);
    parameters:
    - id: participantCount
      type: System.Int32
      description: The number of participating threads.
  overload: System.Threading.Barrier.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>participantCount</code> is less than 0 or greater than 32,767.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  commentId: M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  id: '#ctor(System.Int32,System.Action{System.Threading.Barrier})'
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: Barrier(Int32, Action<Barrier>)
  nameWithType: Barrier.Barrier(Int32, Action<Barrier>)
  fullName: Barrier.Barrier(Int32, Action<Barrier>)
  type: Constructor
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Barrier"></xref> class.
  remarks: The `postPhaseAction` delegate will be executed after all participants have arrived at the barrier in one phase. The participants will not be released to the next phase until the postPhaseAction delegate has completed execution.
  syntax:
    content: public Barrier (int participantCount, Action<System.Threading.Barrier> postPhaseAction);
    parameters:
    - id: participantCount
      type: System.Int32
      description: The number of participating threads.
    - id: postPhaseAction
      type: System.Action{System.Threading.Barrier}
      description: The <xref href="System.Action`1"></xref> to be executed after each phase. null (Nothing in Visual Basic) may be passed to indicate no action is taken.
  overload: System.Threading.Barrier.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>participantCount</code> is less than 0 or greater than 32,767.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.AddParticipant
  commentId: M:System.Threading.Barrier.AddParticipant
  id: AddParticipant
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: AddParticipant()
  nameWithType: Barrier.AddParticipant()
  fullName: Barrier.AddParticipant()
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Notifies the <xref href="System.Threading.Barrier"></xref> that there will be an additional participant.
  remarks: If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.
  syntax:
    content: public long AddParticipant ();
    parameters: []
    return:
      type: System.Int64
      description: The phase number of the barrier in which the new participants will first participate.
  overload: System.Threading.Barrier.AddParticipant*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Adding a participant would cause the barrier's participant count to exceed 32,767.  \n  \n -or-  \n  \n The method was invoked from within a post-phase action."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.AddParticipants(System.Int32)
  commentId: M:System.Threading.Barrier.AddParticipants(System.Int32)
  id: AddParticipants(System.Int32)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: AddParticipants(Int32)
  nameWithType: Barrier.AddParticipants(Int32)
  fullName: Barrier.AddParticipants(Int32)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Notifies the <xref href="System.Threading.Barrier"></xref> that there will be additional participants.
  remarks: If the barrier is currently executing a post phase action, this call is blocked until the post phase action completes and the barrier has moved on to the next phase.
  syntax:
    content: public long AddParticipants (int participantCount);
    parameters:
    - id: participantCount
      type: System.Int32
      description: The number of additional participants to add to the barrier.
    return:
      type: System.Int64
      description: The phase number of the barrier in which the new participants will first participate.
  overload: System.Threading.Barrier.AddParticipants*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>participantCount</code> is less than 0.  \n  \n -or-  \n  \n Adding <code>participantCount</code> participants would cause the barrier's participant count to exceed 32,767."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.CurrentPhaseNumber
  commentId: P:System.Threading.Barrier.CurrentPhaseNumber
  id: CurrentPhaseNumber
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: CurrentPhaseNumber
  nameWithType: Barrier.CurrentPhaseNumber
  fullName: Barrier.CurrentPhaseNumber
  type: Property
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Gets the number of the barrier's current phase.
  syntax:
    content: public long CurrentPhaseNumber { get; }
    return:
      type: System.Int64
      description: Returns the number of the barrier's current phase.
  overload: System.Threading.Barrier.CurrentPhaseNumber*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.Dispose
  commentId: M:System.Threading.Barrier.Dispose
  id: Dispose
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: Dispose()
  nameWithType: Barrier.Dispose()
  fullName: Barrier.Dispose()
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the <xref href="System.Threading.Barrier"></xref> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Threading.Barrier>. The `Dispose` method leaves the <xref:System.Threading.Barrier> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Threading.Barrier> so the garbage collector can reclaim the memory that the <xref:System.Threading.Barrier> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Threading.Barrier>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Threading.Barrier> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.Barrier.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.Dispose(System.Boolean)
  commentId: M:System.Threading.Barrier.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Barrier.Dispose(Boolean)
  fullName: Barrier.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Releases the unmanaged resources used by the <xref href="System.Threading.Barrier"></xref>, and optionally releases the managed resources.
  remarks: Unlike most of the members of <xref:System.Threading.Barrier>, Dispose is not thread-safe and may not be used concurrently with other members of this instance.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
  overload: System.Threading.Barrier.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.ParticipantCount
  commentId: P:System.Threading.Barrier.ParticipantCount
  id: ParticipantCount
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: ParticipantCount
  nameWithType: Barrier.ParticipantCount
  fullName: Barrier.ParticipantCount
  type: Property
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Gets the total number of participants in the barrier.
  syntax:
    content: public int ParticipantCount { get; }
    return:
      type: System.Int32
      description: Returns the total number of participants in the barrier.
  overload: System.Threading.Barrier.ParticipantCount*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.ParticipantsRemaining
  commentId: P:System.Threading.Barrier.ParticipantsRemaining
  id: ParticipantsRemaining
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: ParticipantsRemaining
  nameWithType: Barrier.ParticipantsRemaining
  fullName: Barrier.ParticipantsRemaining
  type: Property
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Gets the number of participants in the barrier that haven’t yet signaled in the current phase.
  remarks: This could be 0 during a post-phase action delegate execution or if the ParticipantCount is 0.
  syntax:
    content: public int ParticipantsRemaining { get; }
    return:
      type: System.Int32
      description: Returns the number of participants in the barrier that haven’t yet signaled in the current phase.
  overload: System.Threading.Barrier.ParticipantsRemaining*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.RemoveParticipant
  commentId: M:System.Threading.Barrier.RemoveParticipant
  id: RemoveParticipant
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: RemoveParticipant()
  nameWithType: Barrier.RemoveParticipant()
  fullName: Barrier.RemoveParticipant()
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Notifies the <xref href="System.Threading.Barrier"></xref> that there will be one less participant.
  syntax:
    content: public void RemoveParticipant ();
    parameters: []
  overload: System.Threading.Barrier.RemoveParticipant*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The barrier already has 0 participants.  \n  \n -or-  \n  \n The method was invoked from within a post-phase action."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.RemoveParticipants(System.Int32)
  commentId: M:System.Threading.Barrier.RemoveParticipants(System.Int32)
  id: RemoveParticipants(System.Int32)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: RemoveParticipants(Int32)
  nameWithType: Barrier.RemoveParticipants(Int32)
  fullName: Barrier.RemoveParticipants(Int32)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Notifies the <xref href="System.Threading.Barrier"></xref> that there will be fewer participants.
  remarks: If `participantCount` participants are already waiting on the barrier, this removal fulfills the barrier, the post phase action is executed and all of the participants are woken as if this participant being removed had successfully reached the barrier.
  syntax:
    content: public void RemoveParticipants (int participantCount);
    parameters:
    - id: participantCount
      type: System.Int32
      description: The number of additional participants to remove from the barrier.
  overload: System.Threading.Barrier.RemoveParticipants*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The total participant count is less than the specified <code>participantCount</code>
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The barrier already has 0 participants.  \n  \n -or-  \n  \n The method was invoked from within a post-phase action.  \n  \n -or-  \n  \n current participant count is less than the specified participantCount"
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.SignalAndWait
  commentId: M:System.Threading.Barrier.SignalAndWait
  id: SignalAndWait
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: SignalAndWait()
  nameWithType: Barrier.SignalAndWait()
  fullName: Barrier.SignalAndWait()
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.
  syntax:
    content: public void SignalAndWait ();
    parameters: []
  overload: System.Threading.Barrier.SignalAndWait*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.
  - type: System.Threading.BarrierPostPhaseException
    commentId: T:System.Threading.BarrierPostPhaseException
    description: If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.SignalAndWait(System.Int32)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.Int32)
  id: SignalAndWait(System.Int32)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: SignalAndWait(Int32)
  nameWithType: Barrier.SignalAndWait(Int32)
  fullName: Barrier.SignalAndWait(Int32)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.
  syntax:
    content: public bool SignalAndWait (int millisecondsTimeout);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref>(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: if all participants reached the barrier within the specified time; otherwise false.
  overload: System.Threading.Barrier.SignalAndWait*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.
  - type: System.Threading.BarrierPostPhaseException
    commentId: T:System.Threading.BarrierPostPhaseException
    description: If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  id: SignalAndWait(System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: SignalAndWait(CancellationToken)
  nameWithType: Barrier.SignalAndWait(CancellationToken)
  fullName: Barrier.SignalAndWait(CancellationToken)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.
  syntax:
    content: public void SignalAndWait (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> to observe.
  overload: System.Threading.Barrier.SignalAndWait*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: <code>cancellationToken</code> has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  id: SignalAndWait(System.TimeSpan)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: SignalAndWait(TimeSpan)
  nameWithType: Barrier.SignalAndWait(TimeSpan)
  fullName: Barrier.SignalAndWait(TimeSpan)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <xref href="System.TimeSpan"></xref> object to measure the time interval.
  syntax:
    content: public bool SignalAndWait (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if all other participants reached the barrier; otherwise, false.
  overload: System.Threading.Barrier.SignalAndWait*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  id: SignalAndWait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: SignalAndWait(Int32, CancellationToken)
  nameWithType: Barrier.SignalAndWait(Int32, CancellationToken)
  fullName: Barrier.SignalAndWait(Int32, CancellationToken)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.
  remarks: If the `cancellationToken` was canceled before the signal took effect, then an <xref:System.OperationCanceledException> is thrown and the <xref:System.Threading.Barrier.ParticipantsRemaining%2A> value is not decreased. If the `cancellationToken` is not canceled or is canceled after the signal takes effect then <xref:System.Threading.Barrier.ParticipantsRemaining%2A> is decreased and no <xref:System.OperationCanceledException> is thrown.
  syntax:
    content: public bool SignalAndWait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref>(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> to observe.
    return:
      type: System.Boolean
      description: if all participants reached the barrier within the specified time; otherwise false
  overload: System.Threading.Barrier.SignalAndWait*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: <code>cancellationToken</code> has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  id: SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  langs:
  - csharp
  name: SignalAndWait(TimeSpan, CancellationToken)
  nameWithType: Barrier.SignalAndWait(TimeSpan, CancellationToken)
  fullName: Barrier.SignalAndWait(TimeSpan, CancellationToken)
  type: Method
  assemblies:
  - System.Threading
  - System
  - netstandard
  namespace: System.Threading
  summary: Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <xref href="System.TimeSpan"></xref> object to measure the time interval, while observing a cancellation token.
  syntax:
    content: public bool SignalAndWait (TimeSpan timeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan"></xref> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken"></xref> to observe.
    return:
      type: System.Boolean
      description: true if all other participants reached the barrier; otherwise, false.
  overload: System.Threading.Barrier.SignalAndWait*
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: <code>cancellationToken</code> has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Threading.BarrierPostPhaseException
  parent: System.Threading
  isExternal: false
  name: BarrierPostPhaseException
  nameWithType: BarrierPostPhaseException
  fullName: System.Threading.BarrierPostPhaseException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: System.Threading.Barrier.#ctor(System.Int32)
  parent: System.Threading.Barrier
  isExternal: false
  name: Barrier(Int32)
  nameWithType: Barrier.Barrier(Int32)
  fullName: Barrier.Barrier(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  parent: System.Threading.Barrier
  isExternal: false
  name: Barrier(Int32, Action<Barrier>)
  nameWithType: Barrier.Barrier(Int32, Action<Barrier>)
  fullName: Barrier.Barrier(Int32, Action<Barrier>)
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Threading.Barrier
  name: Barrier
  nameWithType: Barrier
  fullName: System.Threading.Barrier
- uid: System.Action{System.Threading.Barrier}
  parent: System
  isExternal: false
  name: Action<Barrier>
  nameWithType: Action<Barrier>
  fullName: System.Action<System.Threading.Barrier>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Barrier
    name: Barrier
    nameWithType: Barrier
    fullName: System.Threading.Barrier
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Barrier.AddParticipant
  parent: System.Threading.Barrier
  isExternal: false
  name: AddParticipant()
  nameWithType: Barrier.AddParticipant()
  fullName: Barrier.AddParticipant()
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Threading.Barrier.AddParticipants(System.Int32)
  parent: System.Threading.Barrier
  isExternal: false
  name: AddParticipants(Int32)
  nameWithType: Barrier.AddParticipants(Int32)
  fullName: Barrier.AddParticipants(Int32)
- uid: System.Threading.Barrier.CurrentPhaseNumber
  parent: System.Threading.Barrier
  isExternal: false
  name: CurrentPhaseNumber
  nameWithType: Barrier.CurrentPhaseNumber
  fullName: Barrier.CurrentPhaseNumber
- uid: System.Threading.Barrier.Dispose
  parent: System.Threading.Barrier
  isExternal: false
  name: Dispose()
  nameWithType: Barrier.Dispose()
  fullName: Barrier.Dispose()
- uid: System.Threading.Barrier.Dispose(System.Boolean)
  parent: System.Threading.Barrier
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Barrier.Dispose(Boolean)
  fullName: Barrier.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Barrier.ParticipantCount
  parent: System.Threading.Barrier
  isExternal: false
  name: ParticipantCount
  nameWithType: Barrier.ParticipantCount
  fullName: Barrier.ParticipantCount
- uid: System.Threading.Barrier.ParticipantsRemaining
  parent: System.Threading.Barrier
  isExternal: false
  name: ParticipantsRemaining
  nameWithType: Barrier.ParticipantsRemaining
  fullName: Barrier.ParticipantsRemaining
- uid: System.Threading.Barrier.RemoveParticipant
  parent: System.Threading.Barrier
  isExternal: false
  name: RemoveParticipant()
  nameWithType: Barrier.RemoveParticipant()
  fullName: Barrier.RemoveParticipant()
- uid: System.Threading.Barrier.RemoveParticipants(System.Int32)
  parent: System.Threading.Barrier
  isExternal: false
  name: RemoveParticipants(Int32)
  nameWithType: Barrier.RemoveParticipants(Int32)
  fullName: Barrier.RemoveParticipants(Int32)
- uid: System.Threading.Barrier.SignalAndWait
  parent: System.Threading.Barrier
  isExternal: false
  name: SignalAndWait()
  nameWithType: Barrier.SignalAndWait()
  fullName: Barrier.SignalAndWait()
- uid: System.Threading.Barrier.SignalAndWait(System.Int32)
  parent: System.Threading.Barrier
  isExternal: false
  name: SignalAndWait(Int32)
  nameWithType: Barrier.SignalAndWait(Int32)
  fullName: Barrier.SignalAndWait(Int32)
- uid: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  isExternal: false
  name: SignalAndWait(CancellationToken)
  nameWithType: Barrier.SignalAndWait(CancellationToken)
  fullName: Barrier.SignalAndWait(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  parent: System.Threading.Barrier
  isExternal: false
  name: SignalAndWait(TimeSpan)
  nameWithType: Barrier.SignalAndWait(TimeSpan)
  fullName: Barrier.SignalAndWait(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  isExternal: false
  name: SignalAndWait(Int32, CancellationToken)
  nameWithType: Barrier.SignalAndWait(Int32, CancellationToken)
  fullName: Barrier.SignalAndWait(Int32, CancellationToken)
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  isExternal: false
  name: SignalAndWait(TimeSpan, CancellationToken)
  nameWithType: Barrier.SignalAndWait(TimeSpan, CancellationToken)
  fullName: Barrier.SignalAndWait(TimeSpan, CancellationToken)
- uid: System.Threading.Barrier.#ctor*
  parent: System.Threading.Barrier
  isExternal: false
  name: Barrier
  nameWithType: Barrier.Barrier
  fullName: Barrier.Barrier
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.AddParticipant*
  parent: System.Threading.Barrier
  isExternal: false
  name: AddParticipant
  nameWithType: Barrier.AddParticipant
  fullName: Barrier.AddParticipant
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.AddParticipants*
  parent: System.Threading.Barrier
  isExternal: false
  name: AddParticipants
  nameWithType: Barrier.AddParticipants
  fullName: Barrier.AddParticipants
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.CurrentPhaseNumber*
  parent: System.Threading.Barrier
  isExternal: false
  name: CurrentPhaseNumber
  nameWithType: Barrier.CurrentPhaseNumber
  fullName: Barrier.CurrentPhaseNumber
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.Dispose*
  parent: System.Threading.Barrier
  isExternal: false
  name: Dispose
  nameWithType: Barrier.Dispose
  fullName: Barrier.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.ParticipantCount*
  parent: System.Threading.Barrier
  isExternal: false
  name: ParticipantCount
  nameWithType: Barrier.ParticipantCount
  fullName: Barrier.ParticipantCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.ParticipantsRemaining*
  parent: System.Threading.Barrier
  isExternal: false
  name: ParticipantsRemaining
  nameWithType: Barrier.ParticipantsRemaining
  fullName: Barrier.ParticipantsRemaining
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.RemoveParticipant*
  parent: System.Threading.Barrier
  isExternal: false
  name: RemoveParticipant
  nameWithType: Barrier.RemoveParticipant
  fullName: Barrier.RemoveParticipant
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.RemoveParticipants*
  parent: System.Threading.Barrier
  isExternal: false
  name: RemoveParticipants
  nameWithType: Barrier.RemoveParticipants
  fullName: Barrier.RemoveParticipants
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Threading.Barrier.SignalAndWait*
  parent: System.Threading.Barrier
  isExternal: false
  name: SignalAndWait
  nameWithType: Barrier.SignalAndWait
  fullName: Barrier.SignalAndWait
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/Barrier.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
