{"nodes":[{"content":"A base type for HTTP message handlers.","nodes":[{"pos":[0,38],"content":"A base type for HTTP message handlers.","nodes":[{"content":"A base type for HTTP message handlers.","pos":[0,38]}]}],"pos":[673,712],"yaml":true},{"content":"There are various HTTP message handles that can be used. These include the following.  \n  \n1.  <xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain.  \n  \n2.  <xref:System.Net.Http.HttpMessageHandler> - A simple to class to derive from that supports the most common requirements for most applications.  \n  \n3.  <xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.  \n  \n4.  <xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object.  \n  \n If developers derive classes from <xref:System.Net.Http.HttpMessageHandler> and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads.  \n  \n This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety. So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe.","nodes":[{"pos":[0,85],"content":"There are various HTTP message handles that can be used. These include the following.","nodes":[{"content":"There are various HTTP message handles that can be used. These include the following.","pos":[0,85],"nodes":[{"content":"There are various HTTP message handles that can be used.","pos":[0,56]},{"content":"These include the following.","pos":[57,85]}]}]},{"pos":[95,190],"content":"<xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Http.DelegatingHandler&gt;</ph> - A class used to plug a handler into a handler chain.","pos":[0,95],"source":"<xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain."}]},{"pos":[200,342],"content":"<xref:System.Net.Http.HttpMessageHandler> - A simple to class to derive from that supports the most common requirements for most applications.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> - A simple to class to derive from that supports the most common requirements for most applications.","pos":[0,142],"source":"<xref:System.Net.Http.HttpMessageHandler> - A simple to class to derive from that supports the most common requirements for most applications."}]},{"pos":[352,504],"content":"<xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClientHandler&gt;</ph> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.","pos":[0,152],"source":"<xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations."}]},{"pos":[514,772],"content":"<xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Net.Http.WebRequestHandler&gt;</ph> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <ph id=\"ph2\">&lt;xref:System.Net.HttpWebRequest?displayProperty=fullName&gt;</ph> object.","pos":[0,258],"source":"<xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object."}]},{"pos":[779,1064],"content":"If developers derive classes from <xref:System.Net.Http.HttpMessageHandler> and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads.","nodes":[{"content":"If developers derive classes from <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> and override the <ph id=\"ph2\">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> method, they must make sure that <ph id=\"ph3\">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> can get called concurrently by different threads.","pos":[0,285],"source":"If developers derive classes from <xref:System.Net.Http.HttpMessageHandler> and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads."}]},{"pos":[1071,1471],"content":"This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety. So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe.","nodes":[{"content":"This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety. So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe.","pos":[0,400],"nodes":[{"content":"This is necessary since methods on <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> can be called concurrently and need a guarantee of thread safety.","pos":[0,134],"source":"This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety."},{"content":"So if a handler is assigned to an <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance, the <ph id=\"ph2\">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> method of the handler may get called concurrently by the <ph id=\"ph3\">&lt;xref:System.Net.Http.HttpClient&gt;</ph> instance and needs to be thread safe.","pos":[135,400],"source":" So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe."}]}]}],"pos":[723,2209],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> class.","nodes":[{"pos":[0,96],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpMessageHandler\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> class."}],"pos":[4224,4321],"yaml":true},{"content":"Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref>.","nodes":[{"pos":[0,139],"content":"Releases the unmanaged resources and disposes of the managed resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpMessageHandler\"&gt;&lt;/xref&gt;</ph>.","source":"Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref>."}],"pos":[5798,5938],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> and optionally disposes of the managed resources.","nodes":[{"pos":[0,150],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.HttpMessageHandler\"&gt;&lt;/xref&gt;</ph> and optionally disposes of the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> and optionally disposes of the managed resources."}],"pos":[7477,7628],"yaml":true},{"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpMessageHandler> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,531],"content":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpMessageHandler> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">`Dispose()`</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,103],"source":"This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[104,209],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.When the <ph id=\"ph5\">`disposing`</ph> parameter is <ph id=\"ph6\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph7\">&lt;xref:System.Net.Http.HttpMessageHandler&gt;</ph> references.","pos":[210,461],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpMessageHandler> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[462,531],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[7639,8171],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to releases only unmanaged resources.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to releases only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to releases only unmanaged resources."}],"pos":[8325,8429],"yaml":true},{"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"pos":[0,50],"content":"Send an HTTP request as an asynchronous operation.","nodes":[{"content":"Send an HTTP request as an asynchronous operation.","pos":[0,50]}]}],"pos":[10169,10220],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.  \n  \n The <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method is used primarily by the system. This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called. Most apps will never call this method.","nodes":[{"pos":[0,155],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","nodes":[{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.","pos":[0,155],"nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete once the entire response including content is read.","pos":[31,155],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read."}]}]},{"pos":[162,438],"content":"The <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method is used primarily by the system. This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called. Most apps will never call this method.","nodes":[{"content":"The <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method is used primarily by the system. This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called. Most apps will never call this method.","pos":[0,276],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpMessageHandler.SendAsync%2A&gt;</ph> method is used primarily by the system.","pos":[0,98],"source":"The <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method is used primarily by the system."},{"content":"This method is called by the system one of the  <ph id=\"ph1\">&lt;xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName&gt;</ph> methods is called.","pos":[99,237],"source":" This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called."},{"content":"Most apps will never call this method.","pos":[238,276]}]}]}],"pos":[10231,10674],"yaml":true,"extradata":"MT"},{"content":"The HTTP request message to send.","nodes":[{"pos":[0,33],"content":"The HTTP request message to send.","nodes":[{"content":"The HTTP request message to send.","pos":[0,33]}]}],"pos":[10991,11025],"yaml":true},{"content":"The cancellation token to cancel operation.","nodes":[{"pos":[0,43],"content":"The cancellation token to cancel operation.","nodes":[{"content":"The cancellation token to cancel operation.","pos":[0,43]}]}],"pos":[11119,11163],"yaml":true},{"content":"The task object representing the asynchronous operation.","nodes":[{"pos":[0,56],"content":"The task object representing the asynchronous operation.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]}]}],"pos":[11271,11328],"yaml":true},{"content":"The <code>request</code> was `null`.","nodes":[{"pos":[0,36],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">request</ph><ept id=\"p1\">&lt;/code&gt;</ept> was <ph id=\"ph2\">`null`</ph>.","source":"The <code>request</code> was `null`."}],"pos":[11502,11539],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Http.HttpMessageHandler\n  commentId: T:System.Net.Http.HttpMessageHandler\n  id: HttpMessageHandler\n  children:\n  - System.Net.Http.HttpMessageHandler.#ctor\n  - System.Net.Http.HttpMessageHandler.Dispose\n  - System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  - System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  langs:\n  - csharp\n  name: HttpMessageHandler\n  nameWithType: HttpMessageHandler\n  fullName: System.Net.Http.HttpMessageHandler\n  type: Class\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: A base type for HTTP message handlers.\n  remarks: \"There are various HTTP message handles that can be used. These include the following.  \\n  \\n1.  <xref:System.Net.Http.DelegatingHandler> - A class used to plug a handler into a handler chain.  \\n  \\n2.  <xref:System.Net.Http.HttpMessageHandler> - A simple to class to derive from that supports the most common requirements for most applications.  \\n  \\n3.  <xref:System.Net.Http.HttpClientHandler> - A class that operates at the bottom of the handler chain that actually handles the HTTP transport operations.  \\n  \\n4.  <xref:System.Net.Http.WebRequestHandler> - A specialty class that operates at the bottom of the handler chain class that handles HTTP transport operations with options that are specific to the <xref:System.Net.HttpWebRequest?displayProperty=fullName> object.  \\n  \\n If developers derive classes from <xref:System.Net.Http.HttpMessageHandler> and override the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method, they must make sure that <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> can get called concurrently by different threads.  \\n  \\n This is necessary since methods on <xref:System.Net.Http.HttpClient> can be called concurrently and need a guarantee of thread safety. So if a handler is assigned to an <xref:System.Net.Http.HttpClient> instance, the <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method of the handler may get called concurrently by the <xref:System.Net.Http.HttpClient> instance and needs to be thread safe.\"\n  syntax:\n    content: 'public abstract class HttpMessageHandler : IDisposable'\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Net.Http.CFNetworkHandler\n  - System.Net.Http.DelegatingHandler\n  - System.Net.Http.HttpClientHandler\n  - System.Net.Http.NSUrlSessionHandler\n  - System.Net.Http.WinHttpHandler\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpMessageHandler.#ctor\n  commentId: M:System.Net.Http.HttpMessageHandler.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: HttpMessageHandler()\n  nameWithType: HttpMessageHandler.HttpMessageHandler()\n  fullName: HttpMessageHandler.HttpMessageHandler()\n  type: Constructor\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> class.\n  syntax:\n    content: protected HttpMessageHandler ();\n    parameters: []\n  overload: System.Net.Http.HttpMessageHandler.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpMessageHandler.Dispose\n  commentId: M:System.Net.Http.HttpMessageHandler.Dispose\n  id: Dispose\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: HttpMessageHandler.Dispose()\n  fullName: HttpMessageHandler.Dispose()\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources and disposes of the managed resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref>.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Net.Http.HttpMessageHandler.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  commentId: M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: HttpMessageHandler.Dispose(Boolean)\n  fullName: HttpMessageHandler.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpMessageHandler\"></xref> and optionally disposes of the managed resources.\n  remarks: This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Net.Http.HttpMessageHandler> references. This method invokes the `Dispose()` method of each referenced object.\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to releases only unmanaged resources.'\n  overload: System.Net.Http.HttpMessageHandler.Dispose*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpMessageHandler\n  langs:\n  - csharp\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: HttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)\n  type: Method\n  assemblies:\n  - System.Net.Http\n  - netstandard\n  namespace: System.Net.Http\n  summary: Send an HTTP request as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete once the entire response including content is read.  \\n  \\n The <xref:System.Net.Http.HttpMessageHandler.SendAsync%2A> method is used primarily by the system. This method is called by the system one of the  <xref:System.Net.Http.HttpClient.SendAsync%2A?displayProperty=fullName> methods is called. Most apps will never call this method.\"\n  syntax:\n    content: protected abstract System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: The HTTP request message to send.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The cancellation token to cancel operation.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: The task object representing the asynchronous operation.\n  overload: System.Net.Http.HttpMessageHandler.SendAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>request</code> was `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Net.Http.HttpMessageHandler.#ctor\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: HttpMessageHandler()\n  nameWithType: HttpMessageHandler.HttpMessageHandler()\n  fullName: HttpMessageHandler.HttpMessageHandler()\n- uid: System.Net.Http.HttpMessageHandler.Dispose\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose()\n  nameWithType: HttpMessageHandler.Dispose()\n  fullName: HttpMessageHandler.Dispose()\n- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HttpMessageHandler.Dispose(Boolean)\n  fullName: HttpMessageHandler.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: HttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Net.Http.HttpResponseMessage\n  name: HttpResponseMessage\n  nameWithType: HttpResponseMessage\n  fullName: System.Net.Http.HttpResponseMessage\n- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<HttpResponseMessage>\n  nameWithType: Task<HttpResponseMessage>\n  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    nameWithType: HttpResponseMessage\n    fullName: System.Net.Http.HttpResponseMessage\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Http.HttpRequestMessage\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpRequestMessage\n  nameWithType: HttpRequestMessage\n  fullName: System.Net.Http.HttpRequestMessage\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.Net.Http.HttpMessageHandler.#ctor*\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: HttpMessageHandler\n  nameWithType: HttpMessageHandler.HttpMessageHandler\n  fullName: HttpMessageHandler.HttpMessageHandler\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n- uid: System.Net.Http.HttpMessageHandler.Dispose*\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose\n  nameWithType: HttpMessageHandler.Dispose\n  fullName: HttpMessageHandler.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n- uid: System.Net.Http.HttpMessageHandler.SendAsync*\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: SendAsync\n  nameWithType: HttpMessageHandler.SendAsync\n  fullName: HttpMessageHandler.SendAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/HttpMessageHandler.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}