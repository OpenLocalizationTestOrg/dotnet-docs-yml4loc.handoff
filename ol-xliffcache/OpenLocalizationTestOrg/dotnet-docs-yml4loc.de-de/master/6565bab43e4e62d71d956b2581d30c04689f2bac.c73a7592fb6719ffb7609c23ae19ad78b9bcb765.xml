{"nodes":[{"content":"Provides methods for sending keystrokes to an application.","nodes":[{"pos":[0,58],"content":"Provides methods for sending keystrokes to an application.","nodes":[{"content":"Provides methods for sending keystrokes to an application.","pos":[0,58]}]}],"pos":[499,558],"yaml":true},{"content":"Use <xref:System.Windows.Forms.SendKeys> to send keystrokes and keystroke combinations to the active application. This class cannot be instantiated. To send a keystroke to a class and immediately continue with the flow of your program, use <xref:System.Windows.Forms.SendKeys.Send%2A>. To wait for any processes started by the keystroke, use <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  \n  \n Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \"A\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \"ABC\".  \n  \n The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.  \n  \n> [!CAUTION]\n>  If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided.  \n  \n To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.  \n  \n|Key|Code|  \n|---------|----------|  \n|BACKSPACE|{BACKSPACE}, {BS}, or {BKSP}|  \n|BREAK|{BREAK}|  \n|CAPS LOCK|{CAPSLOCK}|  \n|DEL or DELETE|{DELETE} or {DEL}|  \n|DOWN ARROW|{DOWN}|  \n|END|{END}|  \n|ENTER|{ENTER}or ~|  \n|ESC|{ESC}|  \n|HELP|{HELP}|  \n|HOME|{HOME}|  \n|INS or INSERT|{INSERT} or {INS}|  \n|LEFT ARROW|{LEFT}|  \n|NUM LOCK|{NUMLOCK}|  \n|PAGE DOWN|{PGDN}|  \n|PAGE UP|{PGUP}|  \n|PRINT SCREEN|{PRTSC} (reserved for future use)|  \n|RIGHT ARROW|{RIGHT}|  \n|SCROLL LOCK|{SCROLLLOCK}|  \n|TAB|{TAB}|  \n|UP ARROW|{UP}|  \n|F1|{F1}|  \n|F2|{F2}|  \n|F3|{F3}|  \n|F4|{F4}|  \n|F5|{F5}|  \n|F6|{F6}|  \n|F7|{F7}|  \n|F8|{F8}|  \n|F9|{F9}|  \n|F10|{F10}|  \n|F11|{F11}|  \n|F12|{F12}|  \n|F13|{F13}|  \n|F14|{F14}|  \n|F15|{F15}|  \n|F16|{F16}|  \n|Keypad add|{ADD}|  \n|Keypad subtract|{SUBTRACT}|  \n|Keypad multiply|{MULTIPLY}|  \n|Keypad divide|{DIVIDE}|  \n  \n To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.  \n  \n|Key|Code|  \n|---------|----------|  \n|SHIFT|+|  \n|CTRL|^|  \n|ALT|%|  \n  \n To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".  \n  \n To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.  \n  \n> [!NOTE]\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.  \n>   \n>  The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.  \n>   \n>  If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.  \n>   \n>  `<appSettings>`  \n>   \n>  `<add key=\"SendKeys\" value=\"SendInput\"/>`  \n>   \n>  `</appSettings>`  \n>   \n>  To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\"JournalHook\"` instead.","nodes":[{"pos":[0,391],"content":"Use <xref:System.Windows.Forms.SendKeys> to send keystrokes and keystroke combinations to the active application. This class cannot be instantiated. To send a keystroke to a class and immediately continue with the flow of your program, use <xref:System.Windows.Forms.SendKeys.Send%2A>. To wait for any processes started by the keystroke, use <xref:System.Windows.Forms.SendKeys.SendWait%2A>.","nodes":[{"content":"Use <xref:System.Windows.Forms.SendKeys> to send keystrokes and keystroke combinations to the active application. This class cannot be instantiated. To send a keystroke to a class and immediately continue with the flow of your program, use <xref:System.Windows.Forms.SendKeys.Send%2A>. To wait for any processes started by the keystroke, use <xref:System.Windows.Forms.SendKeys.SendWait%2A>.","pos":[0,391],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> to send keystrokes and keystroke combinations to the active application.","pos":[0,113],"source":"Use <xref:System.Windows.Forms.SendKeys> to send keystrokes and keystroke combinations to the active application."},{"content":"This class cannot be instantiated.","pos":[114,148]},{"content":"To send a keystroke to a class and immediately continue with the flow of your program, use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt;</ph>.","pos":[149,285],"source":" To send a keystroke to a class and immediately continue with the flow of your program, use <xref:System.Windows.Forms.SendKeys.Send%2A>."},{"content":"To wait for any processes started by the keystroke, use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph>.","pos":[286,391],"source":" To wait for any processes started by the keystroke, use <xref:System.Windows.Forms.SendKeys.SendWait%2A>."}]}]},{"pos":[398,758],"content":"Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \"A\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \"ABC\".","nodes":[{"content":"Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \"A\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \"ABC\".","pos":[0,360],"nodes":[{"content":"Each key is represented by one or more characters.","pos":[0,50]},{"content":"To specify a single keyboard character, use the character itself.","pos":[51,116]},{"content":"For example, to represent the letter A, pass in the string \"A\" to the method.","pos":[117,194]},{"content":"To represent more than one character, append each additional character to the one preceding it.","pos":[195,290]},{"content":"To represent the letters A, B, and C, specify the parameter as \"ABC\".","pos":[291,360]}]}]},{"pos":[765,1314],"content":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.","nodes":[{"content":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.","pos":[0,549],"nodes":[{"content":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph>.","pos":[0,140],"source":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>."},{"content":"To specify one of these characters, enclose it within braces ({}).","pos":[141,207]},{"content":"For example, to specify the plus sign, use \"{+}\".","pos":[208,257]},{"content":"To specify brace characters, use \"{{}\" and \"{}}\".","pos":[258,307]},{"content":"Brackets ([ ]) have no special meaning to <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph>, but you must enclose them in braces.","pos":[308,424],"source":" Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces."},{"content":"In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.","pos":[425,549]}]}]},{"pos":[1322,1531],"content":"[!CAUTION]\n If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided.","leadings":["","> "],"nodes":[{"content":"If your application is intended for international use with a variety of keyboards, the use of <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt;</ph> could yield unpredictable results and should be avoided.","pos":[12,207],"source":" If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided."}]},{"pos":[1538,1719],"content":"To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.","nodes":[{"content":"To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.","pos":[0,181]}]},{"pos":[1726,1729],"content":"Key","nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[1730,1734],"content":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[1764,1773],"content":"BACKSPACE","nodes":[{"content":"BACKSPACE","pos":[0,9]}]},{"pos":[1774,1802],"content":"{BACKSPACE}, {BS}, or {BKSP}","nodes":[{"content":"{BACKSPACE}, {BS}, or {BKSP}","pos":[0,28]}]},{"pos":[1807,1812],"content":"BREAK","nodes":[{"content":"BREAK","pos":[0,5]}]},{"pos":[1813,1820],"content":"{BREAK}","nodes":[{"content":"{BREAK}","pos":[0,7]}]},{"pos":[1825,1834],"content":"CAPS LOCK","nodes":[{"content":"CAPS LOCK","pos":[0,9]}]},{"pos":[1835,1845],"content":"{CAPSLOCK}","nodes":[{"content":"{CAPSLOCK}","pos":[0,10]}]},{"pos":[1850,1863],"content":"DEL or DELETE","nodes":[{"content":"DEL or DELETE","pos":[0,13]}]},{"pos":[1864,1881],"content":"{DELETE} or {DEL}","nodes":[{"content":"{DELETE} or {DEL}","pos":[0,17]}]},{"pos":[1886,1896],"content":"DOWN ARROW","nodes":[{"content":"DOWN ARROW","pos":[0,10]}]},{"pos":[1897,1903],"content":"{DOWN}","nodes":[{"content":"{DOWN}","pos":[0,6]}]},{"pos":[1908,1911],"content":"END","nodes":[{"content":"END","pos":[0,3]}]},{"pos":[1912,1917],"content":"{END}","nodes":[{"content":"{END}","pos":[0,5]}]},{"pos":[1922,1927],"content":"ENTER","nodes":[{"content":"ENTER","pos":[0,5]}]},{"pos":[1928,1939],"content":"{ENTER}or ~","nodes":[{"content":"{ENTER}or ~","pos":[0,11]}]},{"pos":[1944,1947],"content":"ESC","nodes":[{"content":"ESC","pos":[0,3]}]},{"pos":[1948,1953],"content":"{ESC}","nodes":[{"content":"{ESC}","pos":[0,5]}]},{"pos":[1958,1962],"content":"HELP","nodes":[{"content":"HELP","pos":[0,4]}]},{"pos":[1963,1969],"content":"{HELP}","nodes":[{"content":"{HELP}","pos":[0,6]}]},{"pos":[1974,1978],"content":"HOME","nodes":[{"content":"HOME","pos":[0,4]}]},{"pos":[1979,1985],"content":"{HOME}","nodes":[{"content":"{HOME}","pos":[0,6]}]},{"pos":[1990,2003],"content":"INS or INSERT","nodes":[{"content":"INS or INSERT","pos":[0,13]}]},{"pos":[2004,2021],"content":"{INSERT} or {INS}","nodes":[{"content":"{INSERT} or {INS}","pos":[0,17]}]},{"pos":[2026,2036],"content":"LEFT ARROW","nodes":[{"content":"LEFT ARROW","pos":[0,10]}]},{"pos":[2037,2043],"content":"{LEFT}","nodes":[{"content":"{LEFT}","pos":[0,6]}]},{"pos":[2048,2056],"content":"NUM LOCK","nodes":[{"content":"NUM LOCK","pos":[0,8]}]},{"pos":[2057,2066],"content":"{NUMLOCK}","nodes":[{"content":"{NUMLOCK}","pos":[0,9]}]},{"pos":[2071,2080],"content":"PAGE DOWN","nodes":[{"content":"PAGE DOWN","pos":[0,9]}]},{"pos":[2081,2087],"content":"{PGDN}","nodes":[{"content":"{PGDN}","pos":[0,6]}]},{"pos":[2092,2099],"content":"PAGE UP","nodes":[{"content":"PAGE UP","pos":[0,7]}]},{"pos":[2100,2106],"content":"{PGUP}","nodes":[{"content":"{PGUP}","pos":[0,6]}]},{"pos":[2111,2123],"content":"PRINT SCREEN","nodes":[{"content":"PRINT SCREEN","pos":[0,12]}]},{"pos":[2124,2157],"content":"{PRTSC} (reserved for future use)","nodes":[{"content":"{PRTSC} (reserved for future use)","pos":[0,33]}]},{"pos":[2162,2173],"content":"RIGHT ARROW","nodes":[{"content":"RIGHT ARROW","pos":[0,11]}]},{"pos":[2174,2181],"content":"{RIGHT}","nodes":[{"content":"{RIGHT}","pos":[0,7]}]},{"pos":[2186,2197],"content":"SCROLL LOCK","nodes":[{"content":"SCROLL LOCK","pos":[0,11]}]},{"pos":[2198,2210],"content":"{SCROLLLOCK}","nodes":[{"content":"{SCROLLLOCK}","pos":[0,12]}]},{"pos":[2215,2218],"content":"TAB","nodes":[{"content":"TAB","pos":[0,3]}]},{"pos":[2219,2224],"content":"{TAB}","nodes":[{"content":"{TAB}","pos":[0,5]}]},{"pos":[2229,2237],"content":"UP ARROW","nodes":[{"content":"UP ARROW","pos":[0,8]}]},{"pos":[2238,2242],"content":"{UP}","nodes":[{"content":"{UP}","pos":[0,4]}]},{"pos":[2247,2249],"content":"F1","nodes":[{"content":"F1","pos":[0,2]}]},{"pos":[2250,2254],"content":"{F1}","nodes":[{"content":"{F1}","pos":[0,4]}]},{"pos":[2259,2261],"content":"F2","nodes":[{"content":"F2","pos":[0,2]}]},{"pos":[2262,2266],"content":"{F2}","nodes":[{"content":"{F2}","pos":[0,4]}]},{"pos":[2271,2273],"content":"F3","nodes":[{"content":"F3","pos":[0,2]}]},{"pos":[2274,2278],"content":"{F3}","nodes":[{"content":"{F3}","pos":[0,4]}]},{"pos":[2283,2285],"content":"F4","nodes":[{"content":"F4","pos":[0,2]}]},{"pos":[2286,2290],"content":"{F4}","nodes":[{"content":"{F4}","pos":[0,4]}]},{"pos":[2295,2297],"content":"F5","nodes":[{"content":"F5","pos":[0,2]}]},{"pos":[2298,2302],"content":"{F5}","nodes":[{"content":"{F5}","pos":[0,4]}]},{"pos":[2307,2309],"content":"F6","nodes":[{"content":"F6","pos":[0,2]}]},{"pos":[2310,2314],"content":"{F6}","nodes":[{"content":"{F6}","pos":[0,4]}]},{"pos":[2319,2321],"content":"F7","nodes":[{"content":"F7","pos":[0,2]}]},{"pos":[2322,2326],"content":"{F7}","nodes":[{"content":"{F7}","pos":[0,4]}]},{"pos":[2331,2333],"content":"F8","nodes":[{"content":"F8","pos":[0,2]}]},{"pos":[2334,2338],"content":"{F8}","nodes":[{"content":"{F8}","pos":[0,4]}]},{"pos":[2343,2345],"content":"F9","nodes":[{"content":"F9","pos":[0,2]}]},{"pos":[2346,2350],"content":"{F9}","nodes":[{"content":"{F9}","pos":[0,4]}]},{"pos":[2355,2358],"content":"F10","nodes":[{"content":"F10","pos":[0,3]}]},{"pos":[2359,2364],"content":"{F10}","nodes":[{"content":"{F10}","pos":[0,5]}]},{"pos":[2369,2372],"content":"F11","nodes":[{"content":"F11","pos":[0,3]}]},{"pos":[2373,2378],"content":"{F11}","nodes":[{"content":"{F11}","pos":[0,5]}]},{"pos":[2383,2386],"content":"F12","nodes":[{"content":"F12","pos":[0,3]}]},{"pos":[2387,2392],"content":"{F12}","nodes":[{"content":"{F12}","pos":[0,5]}]},{"pos":[2397,2400],"content":"F13","nodes":[{"content":"F13","pos":[0,3]}]},{"pos":[2401,2406],"content":"{F13}","nodes":[{"content":"{F13}","pos":[0,5]}]},{"pos":[2411,2414],"content":"F14","nodes":[{"content":"F14","pos":[0,3]}]},{"pos":[2415,2420],"content":"{F14}","nodes":[{"content":"{F14}","pos":[0,5]}]},{"pos":[2425,2428],"content":"F15","nodes":[{"content":"F15","pos":[0,3]}]},{"pos":[2429,2434],"content":"{F15}","nodes":[{"content":"{F15}","pos":[0,5]}]},{"pos":[2439,2442],"content":"F16","nodes":[{"content":"F16","pos":[0,3]}]},{"pos":[2443,2448],"content":"{F16}","nodes":[{"content":"{F16}","pos":[0,5]}]},{"pos":[2453,2463],"content":"Keypad add","nodes":[{"content":"Keypad add","pos":[0,10]}]},{"pos":[2464,2469],"content":"{ADD}","nodes":[{"content":"{ADD}","pos":[0,5]}]},{"pos":[2474,2489],"content":"Keypad subtract","nodes":[{"content":"Keypad subtract","pos":[0,15]}]},{"pos":[2490,2500],"content":"{SUBTRACT}","nodes":[{"content":"{SUBTRACT}","pos":[0,10]}]},{"pos":[2505,2520],"content":"Keypad multiply","nodes":[{"content":"Keypad multiply","pos":[0,15]}]},{"pos":[2521,2531],"content":"{MULTIPLY}","nodes":[{"content":"{MULTIPLY}","pos":[0,10]}]},{"pos":[2536,2549],"content":"Keypad divide","nodes":[{"content":"Keypad divide","pos":[0,13]}]},{"pos":[2550,2558],"content":"{DIVIDE}","nodes":[{"content":"{DIVIDE}","pos":[0,8]}]},{"pos":[2566,2707],"content":"To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.","nodes":[{"content":"To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.","pos":[0,141]}]},{"pos":[2714,2717],"content":"Key","nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[2718,2722],"content":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[2752,2757],"content":"SHIFT","nodes":[{"content":"SHIFT","pos":[0,5]}]},{"pos":[2758,2759],"content":"+","nodes":[]},{"pos":[2764,2768],"content":"CTRL","nodes":[{"content":"CTRL","pos":[0,4]}]},{"pos":[2769,2770],"content":"^","nodes":[]},{"pos":[2775,2778],"content":"ALT","nodes":[{"content":"ALT","pos":[0,3]}]},{"pos":[2779,2780],"content":"%","nodes":[]},{"pos":[2788,3122],"content":"To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".","nodes":[{"content":"To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".","pos":[0,334],"nodes":[{"content":"To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses.","pos":[0,161]},{"content":"For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\".","pos":[162,244]},{"content":"To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".","pos":[245,334]}]}]},{"pos":[3129,3322],"content":"To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.","nodes":[{"content":"To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.","pos":[0,193],"nodes":[{"content":"To specify repeating keys, use the form {key number}.","pos":[0,53]},{"content":"You must put a space between key and number.","pos":[54,98]},{"content":"For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.","pos":[99,193]}]}]},{"pos":[3330,3586],"content":"[!NOTE]\n Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.","leadings":["","> "],"nodes":[{"content":"Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id=\"ph1\">`FindWindow`</ph> and <ph id=\"ph2\">`SetForegroundWindow`</ph>, to force focus on other applications.","pos":[9,254],"source":" Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications."}]},{"pos":[3594,3897],"content":"[!NOTE]\n The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","pos":[8,301],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista.","pos":[1,152],"source":" The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista."},{"content":"The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","pos":[153,293]}]}]},{"pos":[3908,4662],"content":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.","nodes":[{"content":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.","pos":[0,754],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class is susceptible to timing issues, which some developers have had to work around.","pos":[0,126],"source":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around."},{"content":"The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds.","pos":[127,259]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class tries to use the previous implementation first, and if that fails, uses the new implementation.","pos":[260,402],"source":" The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation."},{"content":"As a result, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class may behave differently on different operating systems.","pos":[403,517],"source":" As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems."},{"content":"Additionally, when the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class uses the new implementation, the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> method will not wait for messages to be processed when they are sent to another process.","pos":[518,754],"source":" Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process."}]}]},{"pos":[4673,4918],"content":"If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.","nodes":[{"content":"If your application relies on consistent behavior regardless of the operating system, you can force the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the new implementation by adding the following application setting to your app.config file.","pos":[0,245],"source":"If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file."}]},{"pos":[5034,5164],"content":"To force the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the previous implementation, use the value <ph id=\"ph2\">`\"JournalHook\"`</ph> instead.","source":"To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\"JournalHook\"` instead."}],"pos":[569,5838],"yaml":true,"extradata":"MT"},{"content":"Processes all the Windows messages currently in the message queue.","nodes":[{"pos":[0,66],"content":"Processes all the Windows messages currently in the message queue.","nodes":[{"content":"Processes all the Windows messages currently in the message queue.","pos":[0,66]}]}],"pos":[8033,8100],"yaml":true},{"content":"Use <xref:System.Windows.Forms.SendKeys.Flush%2A> to wait for the application to process keystrokes and other operating system messages that are in the message queue. This is equivalent to calling <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> until there are no more keys to process.  \n  \n> [!NOTE]\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.","nodes":[{"pos":[0,314],"content":"Use <xref:System.Windows.Forms.SendKeys.Flush%2A> to wait for the application to process keystrokes and other operating system messages that are in the message queue. This is equivalent to calling <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> until there are no more keys to process.","nodes":[{"content":"Use <xref:System.Windows.Forms.SendKeys.Flush%2A> to wait for the application to process keystrokes and other operating system messages that are in the message queue. This is equivalent to calling <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> until there are no more keys to process.","pos":[0,314],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys.Flush%2A&gt;</ph> to wait for the application to process keystrokes and other operating system messages that are in the message queue.","pos":[0,166],"source":"Use <xref:System.Windows.Forms.SendKeys.Flush%2A> to wait for the application to process keystrokes and other operating system messages that are in the message queue."},{"content":"This is equivalent to calling <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName&gt;</ph> until there are no more keys to process.","pos":[167,314],"source":" This is equivalent to calling <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> until there are no more keys to process."}]}]},{"pos":[322,578],"content":"[!NOTE]\n Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.","leadings":["","> "],"nodes":[{"content":"Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id=\"ph1\">`FindWindow`</ph> and <ph id=\"ph2\">`SetForegroundWindow`</ph>, to force focus on other applications.","pos":[9,254],"source":" Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications."}]}],"pos":[8111,8695],"yaml":true,"extradata":"MT"},{"content":"Sends keystrokes to the active application.","nodes":[{"pos":[0,43],"content":"Sends keystrokes to the active application.","nodes":[{"content":"Sends keystrokes to the active application.","pos":[0,43]}]}],"pos":[9739,9783],"yaml":true},{"content":"Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \"A\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \"ABC\".  \n  \n The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.  \n  \n> [!CAUTION]\n>  If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided.  \n  \n To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.  \n  \n|Key|Code|  \n|---------|----------|  \n|BACKSPACE|{BACKSPACE}, {BS}, or {BKSP}|  \n|BREAK|{BREAK}|  \n|CAPS LOCK|{CAPSLOCK}|  \n|DEL or DELETE|{DELETE} or {DEL}|  \n|DOWN ARROW|{DOWN}|  \n|END|{END}|  \n|ENTER|{ENTER}or ~|  \n|ESC|{ESC}|  \n|HELP|{HELP}|  \n|HOME|{HOME}|  \n|INS or INSERT|{INSERT} or {INS}|  \n|LEFT ARROW|{LEFT}|  \n|NUM LOCK|{NUMLOCK}|  \n|PAGE DOWN|{PGDN}|  \n|PAGE UP|{PGUP}|  \n|PRINT SCREEN|{PRTSC} (reserved for future use)|  \n|RIGHT ARROW|{RIGHT}|  \n|SCROLL LOCK|{SCROLLLOCK}|  \n|TAB|{TAB}|  \n|UP ARROW|{UP}|  \n|F1|{F1}|  \n|F2|{F2}|  \n|F3|{F3}|  \n|F4|{F4}|  \n|F5|{F5}|  \n|F6|{F6}|  \n|F7|{F7}|  \n|F8|{F8}|  \n|F9|{F9}|  \n|F10|{F10}|  \n|F11|{F11}|  \n|F12|{F12}|  \n|F13|{F13}|  \n|F14|{F14}|  \n|F15|{F15}|  \n|F16|{F16}|  \n|Keypad add|{ADD}|  \n|Keypad subtract|{SUBTRACT}|  \n|Keypad multiply|{MULTIPLY}|  \n|Keypad divide|{DIVIDE}|  \n  \n To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.  \n  \n|Key|Code|  \n|---------|----------|  \n|SHIFT|+|  \n|CTRL|^|  \n|ALT|%|  \n  \n To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".  \n  \n To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.  \n  \n> [!NOTE]\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.  \n>   \n>  The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.  \n>   \n>  If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.  \n>   \n>  `<appSettings>`  \n>   \n>  `<add key=\"SendKeys\" value=\"SendInput\"/>`  \n>   \n>  `</appSettings>`  \n>   \n>  To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\"JournalHook\"` instead.","nodes":[{"pos":[0,360],"content":"Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \"A\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \"ABC\".","nodes":[{"content":"Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \"A\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \"ABC\".","pos":[0,360],"nodes":[{"content":"Each key is represented by one or more characters.","pos":[0,50]},{"content":"To specify a single keyboard character, use the character itself.","pos":[51,116]},{"content":"For example, to represent the letter A, pass in the string \"A\" to the method.","pos":[117,194]},{"content":"To represent more than one character, append each additional character to the one preceding it.","pos":[195,290]},{"content":"To represent the letters A, B, and C, specify the parameter as \"ABC\".","pos":[291,360]}]}]},{"pos":[367,916],"content":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.","nodes":[{"content":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \"{+}\". To specify brace characters, use \"{{}\" and \"{}}\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.","pos":[0,549],"nodes":[{"content":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph>.","pos":[0,140],"source":"The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>."},{"content":"To specify one of these characters, enclose it within braces ({}).","pos":[141,207]},{"content":"For example, to specify the plus sign, use \"{+}\".","pos":[208,257]},{"content":"To specify brace characters, use \"{{}\" and \"{}}\".","pos":[258,307]},{"content":"Brackets ([ ]) have no special meaning to <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph>, but you must enclose them in braces.","pos":[308,424],"source":" Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces."},{"content":"In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.","pos":[425,549]}]}]},{"pos":[924,1133],"content":"[!CAUTION]\n If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided.","leadings":["","> "],"nodes":[{"content":"If your application is intended for international use with a variety of keyboards, the use of <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys.Send%2A&gt;</ph> could yield unpredictable results and should be avoided.","pos":[12,207],"source":" If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided."}]},{"pos":[1140,1321],"content":"To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.","nodes":[{"content":"To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.","pos":[0,181]}]},{"pos":[1328,1331],"content":"Key","nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[1332,1336],"content":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[1366,1375],"content":"BACKSPACE","nodes":[{"content":"BACKSPACE","pos":[0,9]}]},{"pos":[1376,1404],"content":"{BACKSPACE}, {BS}, or {BKSP}","nodes":[{"content":"{BACKSPACE}, {BS}, or {BKSP}","pos":[0,28]}]},{"pos":[1409,1414],"content":"BREAK","nodes":[{"content":"BREAK","pos":[0,5]}]},{"pos":[1415,1422],"content":"{BREAK}","nodes":[{"content":"{BREAK}","pos":[0,7]}]},{"pos":[1427,1436],"content":"CAPS LOCK","nodes":[{"content":"CAPS LOCK","pos":[0,9]}]},{"pos":[1437,1447],"content":"{CAPSLOCK}","nodes":[{"content":"{CAPSLOCK}","pos":[0,10]}]},{"pos":[1452,1465],"content":"DEL or DELETE","nodes":[{"content":"DEL or DELETE","pos":[0,13]}]},{"pos":[1466,1483],"content":"{DELETE} or {DEL}","nodes":[{"content":"{DELETE} or {DEL}","pos":[0,17]}]},{"pos":[1488,1498],"content":"DOWN ARROW","nodes":[{"content":"DOWN ARROW","pos":[0,10]}]},{"pos":[1499,1505],"content":"{DOWN}","nodes":[{"content":"{DOWN}","pos":[0,6]}]},{"pos":[1510,1513],"content":"END","nodes":[{"content":"END","pos":[0,3]}]},{"pos":[1514,1519],"content":"{END}","nodes":[{"content":"{END}","pos":[0,5]}]},{"pos":[1524,1529],"content":"ENTER","nodes":[{"content":"ENTER","pos":[0,5]}]},{"pos":[1530,1541],"content":"{ENTER}or ~","nodes":[{"content":"{ENTER}or ~","pos":[0,11]}]},{"pos":[1546,1549],"content":"ESC","nodes":[{"content":"ESC","pos":[0,3]}]},{"pos":[1550,1555],"content":"{ESC}","nodes":[{"content":"{ESC}","pos":[0,5]}]},{"pos":[1560,1564],"content":"HELP","nodes":[{"content":"HELP","pos":[0,4]}]},{"pos":[1565,1571],"content":"{HELP}","nodes":[{"content":"{HELP}","pos":[0,6]}]},{"pos":[1576,1580],"content":"HOME","nodes":[{"content":"HOME","pos":[0,4]}]},{"pos":[1581,1587],"content":"{HOME}","nodes":[{"content":"{HOME}","pos":[0,6]}]},{"pos":[1592,1605],"content":"INS or INSERT","nodes":[{"content":"INS or INSERT","pos":[0,13]}]},{"pos":[1606,1623],"content":"{INSERT} or {INS}","nodes":[{"content":"{INSERT} or {INS}","pos":[0,17]}]},{"pos":[1628,1638],"content":"LEFT ARROW","nodes":[{"content":"LEFT ARROW","pos":[0,10]}]},{"pos":[1639,1645],"content":"{LEFT}","nodes":[{"content":"{LEFT}","pos":[0,6]}]},{"pos":[1650,1658],"content":"NUM LOCK","nodes":[{"content":"NUM LOCK","pos":[0,8]}]},{"pos":[1659,1668],"content":"{NUMLOCK}","nodes":[{"content":"{NUMLOCK}","pos":[0,9]}]},{"pos":[1673,1682],"content":"PAGE DOWN","nodes":[{"content":"PAGE DOWN","pos":[0,9]}]},{"pos":[1683,1689],"content":"{PGDN}","nodes":[{"content":"{PGDN}","pos":[0,6]}]},{"pos":[1694,1701],"content":"PAGE UP","nodes":[{"content":"PAGE UP","pos":[0,7]}]},{"pos":[1702,1708],"content":"{PGUP}","nodes":[{"content":"{PGUP}","pos":[0,6]}]},{"pos":[1713,1725],"content":"PRINT SCREEN","nodes":[{"content":"PRINT SCREEN","pos":[0,12]}]},{"pos":[1726,1759],"content":"{PRTSC} (reserved for future use)","nodes":[{"content":"{PRTSC} (reserved for future use)","pos":[0,33]}]},{"pos":[1764,1775],"content":"RIGHT ARROW","nodes":[{"content":"RIGHT ARROW","pos":[0,11]}]},{"pos":[1776,1783],"content":"{RIGHT}","nodes":[{"content":"{RIGHT}","pos":[0,7]}]},{"pos":[1788,1799],"content":"SCROLL LOCK","nodes":[{"content":"SCROLL LOCK","pos":[0,11]}]},{"pos":[1800,1812],"content":"{SCROLLLOCK}","nodes":[{"content":"{SCROLLLOCK}","pos":[0,12]}]},{"pos":[1817,1820],"content":"TAB","nodes":[{"content":"TAB","pos":[0,3]}]},{"pos":[1821,1826],"content":"{TAB}","nodes":[{"content":"{TAB}","pos":[0,5]}]},{"pos":[1831,1839],"content":"UP ARROW","nodes":[{"content":"UP ARROW","pos":[0,8]}]},{"pos":[1840,1844],"content":"{UP}","nodes":[{"content":"{UP}","pos":[0,4]}]},{"pos":[1849,1851],"content":"F1","nodes":[{"content":"F1","pos":[0,2]}]},{"pos":[1852,1856],"content":"{F1}","nodes":[{"content":"{F1}","pos":[0,4]}]},{"pos":[1861,1863],"content":"F2","nodes":[{"content":"F2","pos":[0,2]}]},{"pos":[1864,1868],"content":"{F2}","nodes":[{"content":"{F2}","pos":[0,4]}]},{"pos":[1873,1875],"content":"F3","nodes":[{"content":"F3","pos":[0,2]}]},{"pos":[1876,1880],"content":"{F3}","nodes":[{"content":"{F3}","pos":[0,4]}]},{"pos":[1885,1887],"content":"F4","nodes":[{"content":"F4","pos":[0,2]}]},{"pos":[1888,1892],"content":"{F4}","nodes":[{"content":"{F4}","pos":[0,4]}]},{"pos":[1897,1899],"content":"F5","nodes":[{"content":"F5","pos":[0,2]}]},{"pos":[1900,1904],"content":"{F5}","nodes":[{"content":"{F5}","pos":[0,4]}]},{"pos":[1909,1911],"content":"F6","nodes":[{"content":"F6","pos":[0,2]}]},{"pos":[1912,1916],"content":"{F6}","nodes":[{"content":"{F6}","pos":[0,4]}]},{"pos":[1921,1923],"content":"F7","nodes":[{"content":"F7","pos":[0,2]}]},{"pos":[1924,1928],"content":"{F7}","nodes":[{"content":"{F7}","pos":[0,4]}]},{"pos":[1933,1935],"content":"F8","nodes":[{"content":"F8","pos":[0,2]}]},{"pos":[1936,1940],"content":"{F8}","nodes":[{"content":"{F8}","pos":[0,4]}]},{"pos":[1945,1947],"content":"F9","nodes":[{"content":"F9","pos":[0,2]}]},{"pos":[1948,1952],"content":"{F9}","nodes":[{"content":"{F9}","pos":[0,4]}]},{"pos":[1957,1960],"content":"F10","nodes":[{"content":"F10","pos":[0,3]}]},{"pos":[1961,1966],"content":"{F10}","nodes":[{"content":"{F10}","pos":[0,5]}]},{"pos":[1971,1974],"content":"F11","nodes":[{"content":"F11","pos":[0,3]}]},{"pos":[1975,1980],"content":"{F11}","nodes":[{"content":"{F11}","pos":[0,5]}]},{"pos":[1985,1988],"content":"F12","nodes":[{"content":"F12","pos":[0,3]}]},{"pos":[1989,1994],"content":"{F12}","nodes":[{"content":"{F12}","pos":[0,5]}]},{"pos":[1999,2002],"content":"F13","nodes":[{"content":"F13","pos":[0,3]}]},{"pos":[2003,2008],"content":"{F13}","nodes":[{"content":"{F13}","pos":[0,5]}]},{"pos":[2013,2016],"content":"F14","nodes":[{"content":"F14","pos":[0,3]}]},{"pos":[2017,2022],"content":"{F14}","nodes":[{"content":"{F14}","pos":[0,5]}]},{"pos":[2027,2030],"content":"F15","nodes":[{"content":"F15","pos":[0,3]}]},{"pos":[2031,2036],"content":"{F15}","nodes":[{"content":"{F15}","pos":[0,5]}]},{"pos":[2041,2044],"content":"F16","nodes":[{"content":"F16","pos":[0,3]}]},{"pos":[2045,2050],"content":"{F16}","nodes":[{"content":"{F16}","pos":[0,5]}]},{"pos":[2055,2065],"content":"Keypad add","nodes":[{"content":"Keypad add","pos":[0,10]}]},{"pos":[2066,2071],"content":"{ADD}","nodes":[{"content":"{ADD}","pos":[0,5]}]},{"pos":[2076,2091],"content":"Keypad subtract","nodes":[{"content":"Keypad subtract","pos":[0,15]}]},{"pos":[2092,2102],"content":"{SUBTRACT}","nodes":[{"content":"{SUBTRACT}","pos":[0,10]}]},{"pos":[2107,2122],"content":"Keypad multiply","nodes":[{"content":"Keypad multiply","pos":[0,15]}]},{"pos":[2123,2133],"content":"{MULTIPLY}","nodes":[{"content":"{MULTIPLY}","pos":[0,10]}]},{"pos":[2138,2151],"content":"Keypad divide","nodes":[{"content":"Keypad divide","pos":[0,13]}]},{"pos":[2152,2160],"content":"{DIVIDE}","nodes":[{"content":"{DIVIDE}","pos":[0,8]}]},{"pos":[2168,2309],"content":"To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.","nodes":[{"content":"To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.","pos":[0,141]}]},{"pos":[2316,2319],"content":"Key","nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[2320,2324],"content":"Code","nodes":[{"content":"Code","pos":[0,4]}]},{"pos":[2354,2359],"content":"SHIFT","nodes":[{"content":"SHIFT","pos":[0,5]}]},{"pos":[2360,2361],"content":"+","nodes":[]},{"pos":[2366,2370],"content":"CTRL","nodes":[{"content":"CTRL","pos":[0,4]}]},{"pos":[2371,2372],"content":"^","nodes":[]},{"pos":[2377,2380],"content":"ALT","nodes":[{"content":"ALT","pos":[0,3]}]},{"pos":[2381,2382],"content":"%","nodes":[]},{"pos":[2390,2724],"content":"To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".","nodes":[{"content":"To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".","pos":[0,334],"nodes":[{"content":"To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses.","pos":[0,161]},{"content":"For example, to specify to hold down SHIFT while E and C are pressed, use \"+(EC)\".","pos":[162,244]},{"content":"To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \"+EC\".","pos":[245,334]}]}]},{"pos":[2731,2924],"content":"To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.","nodes":[{"content":"To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.","pos":[0,193],"nodes":[{"content":"To specify repeating keys, use the form {key number}.","pos":[0,53]},{"content":"You must put a space between key and number.","pos":[54,98]},{"content":"For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.","pos":[99,193]}]}]},{"pos":[2932,3188],"content":"[!NOTE]\n Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.","leadings":["","> "],"nodes":[{"content":"Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id=\"ph1\">`FindWindow`</ph> and <ph id=\"ph2\">`SetForegroundWindow`</ph>, to force focus on other applications.","pos":[9,254],"source":" Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications."}]},{"pos":[3196,3499],"content":"[!NOTE]\n The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","pos":[8,301],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista.","pos":[1,152],"source":" The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista."},{"content":"The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","pos":[153,293]}]}]},{"pos":[3510,4264],"content":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.","nodes":[{"content":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.","pos":[0,754],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class is susceptible to timing issues, which some developers have had to work around.","pos":[0,126],"source":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around."},{"content":"The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds.","pos":[127,259]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class tries to use the previous implementation first, and if that fails, uses the new implementation.","pos":[260,402],"source":" The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation."},{"content":"As a result, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class may behave differently on different operating systems.","pos":[403,517],"source":" As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems."},{"content":"Additionally, when the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class uses the new implementation, the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> method will not wait for messages to be processed when they are sent to another process.","pos":[518,754],"source":" Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process."}]}]},{"pos":[4275,4520],"content":"If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.","nodes":[{"content":"If your application relies on consistent behavior regardless of the operating system, you can force the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the new implementation by adding the following application setting to your app.config file.","pos":[0,245],"source":"If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file."}]},{"pos":[4636,4766],"content":"To force the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the previous implementation, use the value <ph id=\"ph2\">`\"JournalHook\"`</ph> instead.","source":"To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\"JournalHook\"` instead."}],"pos":[9794,14663],"yaml":true,"extradata":"MT"},{"content":"The string of keystrokes to send.","nodes":[{"pos":[0,33],"content":"The string of keystrokes to send.","nodes":[{"content":"The string of keystrokes to send.","pos":[0,33]}]}],"pos":[15734,15768],"yaml":true},{"content":"There is not an active application to send keystrokes to.","nodes":[{"pos":[0,57],"content":"There is not an active application to send keystrokes to.","nodes":[{"content":"There is not an active application to send keystrokes to.","pos":[0,57]}]}],"pos":[15940,15998],"yaml":true},{"content":"<code>keys</code> does not represent valid keystrokes","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">&lt;code&gt;keys&lt;/code&gt;</ph> does not represent valid keystrokes","source":"<code>keys</code> does not represent valid keystrokes"}],"pos":[16092,16146],"yaml":true},{"content":"Sends the given keys to the active application, and then waits for the messages to be processed.","nodes":[{"pos":[0,96],"content":"Sends the given keys to the active application, and then waits for the messages to be processed.","nodes":[{"content":"Sends the given keys to the active application, and then waits for the messages to be processed.","pos":[0,96]}]}],"pos":[17077,17174],"yaml":true},{"content":"Use <xref:System.Windows.Forms.SendKeys.SendWait%2A> to send keystrokes or combinations of keystrokes to the active application and wait for the keystroke messages to be processed. You can use this method to send keystrokes to an application and wait for any processes that are started by the keystrokes to be completed. This can be important if the other application must finish before your application can continue.  \n  \n> [!NOTE]\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.  \n>   \n>  The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.  \n>   \n>  If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.  \n>   \n>  `<appSettings>`  \n>   \n>  `<add key=\"SendKeys\" value=\"SendInput\"/>`  \n>   \n>  `</appSettings>`  \n>   \n>  To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\"JournalHook\"` instead.","nodes":[{"pos":[0,417],"content":"Use <xref:System.Windows.Forms.SendKeys.SendWait%2A> to send keystrokes or combinations of keystrokes to the active application and wait for the keystroke messages to be processed. You can use this method to send keystrokes to an application and wait for any processes that are started by the keystrokes to be completed. This can be important if the other application must finish before your application can continue.","nodes":[{"content":"Use <xref:System.Windows.Forms.SendKeys.SendWait%2A> to send keystrokes or combinations of keystrokes to the active application and wait for the keystroke messages to be processed. You can use this method to send keystrokes to an application and wait for any processes that are started by the keystrokes to be completed. This can be important if the other application must finish before your application can continue.","pos":[0,417],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> to send keystrokes or combinations of keystrokes to the active application and wait for the keystroke messages to be processed.","pos":[0,180],"source":"Use <xref:System.Windows.Forms.SendKeys.SendWait%2A> to send keystrokes or combinations of keystrokes to the active application and wait for the keystroke messages to be processed."},{"content":"You can use this method to send keystrokes to an application and wait for any processes that are started by the keystrokes to be completed.","pos":[181,320]},{"content":"This can be important if the other application must finish before your application can continue.","pos":[321,417]}]}]},{"pos":[425,681],"content":"[!NOTE]\n Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.","leadings":["","> "],"nodes":[{"content":"Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as <ph id=\"ph1\">`FindWindow`</ph> and <ph id=\"ph2\">`SetForegroundWindow`</ph>, to force focus on other applications.","pos":[9,254],"source":" Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications."}]},{"pos":[689,992],"content":"[!NOTE]\n The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","pos":[8,301],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista.","pos":[1,152],"source":" The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista."},{"content":"The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.","pos":[153,293]}]}]},{"pos":[1003,1757],"content":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.","nodes":[{"content":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.","pos":[0,754],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class is susceptible to timing issues, which some developers have had to work around.","pos":[0,126],"source":"The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around."},{"content":"The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds.","pos":[127,259]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class tries to use the previous implementation first, and if that fails, uses the new implementation.","pos":[260,402],"source":" The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation."},{"content":"As a result, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class may behave differently on different operating systems.","pos":[403,517],"source":" As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems."},{"content":"Additionally, when the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class uses the new implementation, the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.SendKeys.SendWait%2A&gt;</ph> method will not wait for messages to be processed when they are sent to another process.","pos":[518,754],"source":" Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process."}]}]},{"pos":[1768,2013],"content":"If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.","nodes":[{"content":"If your application relies on consistent behavior regardless of the operating system, you can force the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the new implementation by adding the following application setting to your app.config file.","pos":[0,245],"source":"If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file."}]},{"pos":[2129,2259],"content":"To force the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.SendKeys&gt;</ph> class to use the previous implementation, use the value <ph id=\"ph2\">`\"JournalHook\"`</ph> instead.","source":"To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\"JournalHook\"` instead."}],"pos":[17185,19471],"yaml":true,"extradata":"MT"},{"content":"The string of keystrokes to send.","nodes":[{"pos":[0,33],"content":"The string of keystrokes to send.","nodes":[{"content":"The string of keystrokes to send.","pos":[0,33]}]}],"pos":[19613,19647],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.SendKeys\n  commentId: T:System.Windows.Forms.SendKeys\n  id: SendKeys\n  children:\n  - System.Windows.Forms.SendKeys.Flush\n  - System.Windows.Forms.SendKeys.Send(System.String)\n  - System.Windows.Forms.SendKeys.SendWait(System.String)\n  langs:\n  - csharp\n  name: SendKeys\n  nameWithType: SendKeys\n  fullName: System.Windows.Forms.SendKeys\n  type: Class\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Provides methods for sending keystrokes to an application.\n  remarks: \"Use <xref:System.Windows.Forms.SendKeys> to send keystrokes and keystroke combinations to the active application. This class cannot be instantiated. To send a keystroke to a class and immediately continue with the flow of your program, use <xref:System.Windows.Forms.SendKeys.Send%2A>. To wait for any processes started by the keystroke, use <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  \\n  \\n Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \\\"A\\\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \\\"ABC\\\".  \\n  \\n The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \\\"{+}\\\". To specify brace characters, use \\\"{{}\\\" and \\\"{}}\\\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.  \\n  \\n> [!CAUTION]\\n>  If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided.  \\n  \\n To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.  \\n  \\n|Key|Code|  \\n|---------|----------|  \\n|BACKSPACE|{BACKSPACE}, {BS}, or {BKSP}|  \\n|BREAK|{BREAK}|  \\n|CAPS LOCK|{CAPSLOCK}|  \\n|DEL or DELETE|{DELETE} or {DEL}|  \\n|DOWN ARROW|{DOWN}|  \\n|END|{END}|  \\n|ENTER|{ENTER}or ~|  \\n|ESC|{ESC}|  \\n|HELP|{HELP}|  \\n|HOME|{HOME}|  \\n|INS or INSERT|{INSERT} or {INS}|  \\n|LEFT ARROW|{LEFT}|  \\n|NUM LOCK|{NUMLOCK}|  \\n|PAGE DOWN|{PGDN}|  \\n|PAGE UP|{PGUP}|  \\n|PRINT SCREEN|{PRTSC} (reserved for future use)|  \\n|RIGHT ARROW|{RIGHT}|  \\n|SCROLL LOCK|{SCROLLLOCK}|  \\n|TAB|{TAB}|  \\n|UP ARROW|{UP}|  \\n|F1|{F1}|  \\n|F2|{F2}|  \\n|F3|{F3}|  \\n|F4|{F4}|  \\n|F5|{F5}|  \\n|F6|{F6}|  \\n|F7|{F7}|  \\n|F8|{F8}|  \\n|F9|{F9}|  \\n|F10|{F10}|  \\n|F11|{F11}|  \\n|F12|{F12}|  \\n|F13|{F13}|  \\n|F14|{F14}|  \\n|F15|{F15}|  \\n|F16|{F16}|  \\n|Keypad add|{ADD}|  \\n|Keypad subtract|{SUBTRACT}|  \\n|Keypad multiply|{MULTIPLY}|  \\n|Keypad divide|{DIVIDE}|  \\n  \\n To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.  \\n  \\n|Key|Code|  \\n|---------|----------|  \\n|SHIFT|+|  \\n|CTRL|^|  \\n|ALT|%|  \\n  \\n To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \\\"+(EC)\\\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \\\"+EC\\\".  \\n  \\n To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.  \\n  \\n> [!NOTE]\\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.  \\n>   \\n>  The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.  \\n>   \\n>  If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.  \\n>   \\n>  `<appSettings>`  \\n>   \\n>  `<add key=\\\"SendKeys\\\" value=\\\"SendInput\\\"/>`  \\n>   \\n>  `</appSettings>`  \\n>   \\n>  To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\\\"JournalHook\\\"` instead.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \\n  \\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]\\n [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]\\n [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]\"\n  syntax:\n    content: public class SendKeys\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/SendKeys.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.SendKeys.Flush\n  commentId: M:System.Windows.Forms.SendKeys.Flush\n  id: Flush\n  parent: System.Windows.Forms.SendKeys\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: SendKeys.Flush()\n  fullName: SendKeys.Flush()\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Processes all the Windows messages currently in the message queue.\n  remarks: \"Use <xref:System.Windows.Forms.SendKeys.Flush%2A> to wait for the application to process keystrokes and other operating system messages that are in the message queue. This is equivalent to calling <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName> until there are no more keys to process.  \\n  \\n> [!NOTE]\\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.\"\n  syntax:\n    content: public static void Flush ();\n    parameters: []\n  overload: System.Windows.Forms.SendKeys.Flush*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/SendKeys.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Forms.SendKeys.Send(System.String)\n  commentId: M:System.Windows.Forms.SendKeys.Send(System.String)\n  id: Send(System.String)\n  parent: System.Windows.Forms.SendKeys\n  langs:\n  - csharp\n  name: Send(String)\n  nameWithType: SendKeys.Send(String)\n  fullName: SendKeys.Send(String)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Sends keystrokes to the active application.\n  remarks: \"Each key is represented by one or more characters. To specify a single keyboard character, use the character itself. For example, to represent the letter A, pass in the string \\\"A\\\" to the method. To represent more than one character, append each additional character to the one preceding it. To represent the letters A, B, and C, specify the parameter as \\\"ABC\\\".  \\n  \\n The plus sign (+), caret (^), percent sign (%), tilde (~), and parentheses () have special meanings to <xref:System.Windows.Forms.SendKeys>. To specify one of these characters, enclose it within braces ({}). For example, to specify the plus sign, use \\\"{+}\\\". To specify brace characters, use \\\"{{}\\\" and \\\"{}}\\\". Brackets ([ ]) have no special meaning to <xref:System.Windows.Forms.SendKeys>, but you must enclose them in braces. In other applications, brackets do have a special meaning that might be significant when dynamic data exchange (DDE) occurs.  \\n  \\n> [!CAUTION]\\n>  If your application is intended for international use with a variety of keyboards, the use of <xref:System.Windows.Forms.SendKeys.Send%2A> could yield unpredictable results and should be avoided.  \\n  \\n To specify characters that aren't displayed when you press a key, such as ENTER or TAB, and keys that represent actions rather than characters, use the codes in the following table.  \\n  \\n|Key|Code|  \\n|---------|----------|  \\n|BACKSPACE|{BACKSPACE}, {BS}, or {BKSP}|  \\n|BREAK|{BREAK}|  \\n|CAPS LOCK|{CAPSLOCK}|  \\n|DEL or DELETE|{DELETE} or {DEL}|  \\n|DOWN ARROW|{DOWN}|  \\n|END|{END}|  \\n|ENTER|{ENTER}or ~|  \\n|ESC|{ESC}|  \\n|HELP|{HELP}|  \\n|HOME|{HOME}|  \\n|INS or INSERT|{INSERT} or {INS}|  \\n|LEFT ARROW|{LEFT}|  \\n|NUM LOCK|{NUMLOCK}|  \\n|PAGE DOWN|{PGDN}|  \\n|PAGE UP|{PGUP}|  \\n|PRINT SCREEN|{PRTSC} (reserved for future use)|  \\n|RIGHT ARROW|{RIGHT}|  \\n|SCROLL LOCK|{SCROLLLOCK}|  \\n|TAB|{TAB}|  \\n|UP ARROW|{UP}|  \\n|F1|{F1}|  \\n|F2|{F2}|  \\n|F3|{F3}|  \\n|F4|{F4}|  \\n|F5|{F5}|  \\n|F6|{F6}|  \\n|F7|{F7}|  \\n|F8|{F8}|  \\n|F9|{F9}|  \\n|F10|{F10}|  \\n|F11|{F11}|  \\n|F12|{F12}|  \\n|F13|{F13}|  \\n|F14|{F14}|  \\n|F15|{F15}|  \\n|F16|{F16}|  \\n|Keypad add|{ADD}|  \\n|Keypad subtract|{SUBTRACT}|  \\n|Keypad multiply|{MULTIPLY}|  \\n|Keypad divide|{DIVIDE}|  \\n  \\n To specify keys combined with any combination of the SHIFT, CTRL, and ALT keys, precede the key code with one or more of the following codes.  \\n  \\n|Key|Code|  \\n|---------|----------|  \\n|SHIFT|+|  \\n|CTRL|^|  \\n|ALT|%|  \\n  \\n To specify that any combination of SHIFT, CTRL, and ALT should be held down while several other keys are pressed, enclose the code for those keys in parentheses. For example, to specify to hold down SHIFT while E and C are pressed, use \\\"+(EC)\\\". To specify to hold down SHIFT while E is pressed, followed by C without SHIFT, use \\\"+EC\\\".  \\n  \\n To specify repeating keys, use the form {key number}. You must put a space between key and number. For example, {LEFT 42} means press the LEFT ARROW key 42 times; {h 10} means press H 10 times.  \\n  \\n> [!NOTE]\\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.  \\n>   \\n>  The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.  \\n>   \\n>  If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.  \\n>   \\n>  `<appSettings>`  \\n>   \\n>  `<add key=\\\"SendKeys\\\" value=\\\"SendInput\\\"/>`  \\n>   \\n>  `</appSettings>`  \\n>   \\n>  To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\\\"JournalHook\\\"` instead.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \\n  \\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]\\n [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]\\n [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]\"\n  syntax:\n    content: public static void Send (string keys);\n    parameters:\n    - id: keys\n      type: System.String\n      description: The string of keystrokes to send.\n  overload: System.Windows.Forms.SendKeys.Send*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is not an active application to send keystrokes to.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>keys</code> does not represent valid keystrokes\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/SendKeys.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Forms.SendKeys.SendWait(System.String)\n  commentId: M:System.Windows.Forms.SendKeys.SendWait(System.String)\n  id: SendWait(System.String)\n  parent: System.Windows.Forms.SendKeys\n  langs:\n  - csharp\n  name: SendWait(String)\n  nameWithType: SendKeys.SendWait(String)\n  fullName: SendKeys.SendWait(String)\n  type: Method\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Sends the given keys to the active application, and then waits for the messages to be processed.\n  remarks: \"Use <xref:System.Windows.Forms.SendKeys.SendWait%2A> to send keystrokes or combinations of keystrokes to the active application and wait for the keystroke messages to be processed. You can use this method to send keystrokes to an application and wait for any processes that are started by the keystrokes to be completed. This can be important if the other application must finish before your application can continue.  \\n  \\n> [!NOTE]\\n>  Because there is no managed method to activate another application, you can either use this class within the current application or use native Windows methods, such as `FindWindow` and `SetForegroundWindow`, to force focus on other applications.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.Forms.SendKeys> class has been updated for the .NET Framework 3.0 to enable its use in applications that run on Windows Vista. The enhanced security of Windows Vista (known as User Account Control or UAC) prevents the previous implementation from working as expected.  \\n>   \\n>  The <xref:System.Windows.Forms.SendKeys> class is susceptible to timing issues, which some developers have had to work around. The updated implementation is still susceptible to timing issues, but is slightly faster and may require changes to the workarounds. The <xref:System.Windows.Forms.SendKeys> class tries to use the previous implementation first, and if that fails, uses the new implementation. As a result, the <xref:System.Windows.Forms.SendKeys> class may behave differently on different operating systems. Additionally, when the <xref:System.Windows.Forms.SendKeys> class uses the new implementation, the <xref:System.Windows.Forms.SendKeys.SendWait%2A> method will not wait for messages to be processed when they are sent to another process.  \\n>   \\n>  If your application relies on consistent behavior regardless of the operating system, you can force the <xref:System.Windows.Forms.SendKeys> class to use the new implementation by adding the following application setting to your app.config file.  \\n>   \\n>  `<appSettings>`  \\n>   \\n>  `<add key=\\\"SendKeys\\\" value=\\\"SendInput\\\"/>`  \\n>   \\n>  `</appSettings>`  \\n>   \\n>  To force the <xref:System.Windows.Forms.SendKeys> class to use the previous implementation, use the value `\\\"JournalHook\\\"` instead.\"\n  syntax:\n    content: public static void SendWait (string keys);\n    parameters:\n    - id: keys\n      type: System.String\n      description: The string of keystrokes to send.\n  overload: System.Windows.Forms.SendKeys.SendWait*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/SendKeys.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Windows.Forms.SendKeys.Flush\n  parent: System.Windows.Forms.SendKeys\n  isExternal: false\n  name: Flush()\n  nameWithType: SendKeys.Flush()\n  fullName: SendKeys.Flush()\n- uid: System.Windows.Forms.SendKeys.Send(System.String)\n  parent: System.Windows.Forms.SendKeys\n  isExternal: false\n  name: Send(String)\n  nameWithType: SendKeys.Send(String)\n  fullName: SendKeys.Send(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Forms.SendKeys.SendWait(System.String)\n  parent: System.Windows.Forms.SendKeys\n  isExternal: false\n  name: SendWait(String)\n  nameWithType: SendKeys.SendWait(String)\n  fullName: SendKeys.SendWait(String)\n- uid: System.Windows.Forms.SendKeys.Flush*\n  parent: System.Windows.Forms.SendKeys\n  isExternal: false\n  name: Flush\n  nameWithType: SendKeys.Flush\n  fullName: SendKeys.Flush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/SendKeys.xml\n- uid: System.Windows.Forms.SendKeys.Send*\n  parent: System.Windows.Forms.SendKeys\n  isExternal: false\n  name: Send\n  nameWithType: SendKeys.Send\n  fullName: SendKeys.Send\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/SendKeys.xml\n- uid: System.Windows.Forms.SendKeys.SendWait*\n  parent: System.Windows.Forms.SendKeys\n  isExternal: false\n  name: SendWait\n  nameWithType: SendKeys.SendWait\n  fullName: SendKeys.SendWait\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/SendKeys.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}