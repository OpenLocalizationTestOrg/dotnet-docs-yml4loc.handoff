<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9aa510758eeca6e81841441b5ffaba9bf029e781</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Forms.HtmlElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">fa3c4cfef238d696565e110d0dbb31522f3cba7f</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">07380e85d8e1585d29ab8048d6049be73e7b3480</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Represents an HTML element inside of a Web page.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> represents any possible type of element in an HTML document, such as <ph id="ph2">`BODY`</ph>, <ph id="ph3">`TABLE`</ph>, and <ph id="ph4">`FORM`</ph>, among others.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The class exposes the most common properties you can expect to find on all elements.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most elements can have <bpt id="p1">*</bpt>child elements<ept id="p1">*</ept>: other HTML elements that are placed underneath them.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A&gt;</ph> property to test whether a given element has children, and the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.Children%2A&gt;</ph> collection to iterate through them.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Parent%2A&gt;</ph> property returns the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> in which the current element is nested.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You often need access to attributes, properties, and methods on the underlying element that are not directly exposed by <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph>, such as the <ph id="ph2">`SRC`</ph> attribute on an <ph id="ph3">`IMG`</ph> element or the <ph id="ph4">`Submit`</ph> method on a <ph id="ph5">`FORM`</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.GetAttribute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.SetAttribute%2A&gt;</ph> methods enable you to retrieve and alter any attribute or property on a specific element, while <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.InvokeMember%2A&gt;</ph> provides access to any methods not exposed in the managed Document Object Model (DOM).</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>If your application has unmanaged code permission, you can also access unexposed properties and methods with the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.DomElement%2A&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.TagName%2A&gt;</ph> property to test whether an element is of a specific type.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any HTML document can be modified at run time.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can create new <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> objects with the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument.CreateElement%2A&gt;</ph> method of <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph>, and add them to another element using the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElement.AppendChild%2A&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also create the elements as HTML tags and assign them to an existing element's <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Gets an <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElementCollection"&gt;&lt;/xref&gt;</ph> of all elements underneath the current element.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>To access only those elements which have the current element as their direct parent, use the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Children%2A&gt;</ph> collection instead.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in this collection will not necessarily be returned in source order.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>A collection of all elements that are direct or indirect children of the current element.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>If the current element is a <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">TABLE</ph><ept id="p1">&lt;/code&gt;</ept>, for example, <ph id="ph2">&lt;xref href="System.Windows.Forms.HtmlElement.All"&gt;&lt;/xref&gt;</ph> will return every <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">TH</ph><ept id="p2">&lt;/code&gt;</ept>, <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">TR</ph><ept id="p3">&lt;/code&gt;</ept>, and <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">TD</ph><ept id="p4">&lt;/code&gt;</ept> element within the table, as well as any other elements, such as <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">DIV</ph><ept id="p5">&lt;/code&gt;</ept> and <bpt id="p6">&lt;code&gt;</bpt><ph id="ph7">SPAN</ph><ept id="p6">&lt;/code&gt;</ept> elements, contained within the cells.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Adds an element to another element's subtree.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>The HTML Document Object Model (DOM) enables you to alter the run-time contents of an HTML file in a number of ways.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.AppendChild%2A&gt;</ph> to add new elements to an existing document, or to move an element on the page.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>If an element has already been parented, appending an element to another element will automatically remove that element from its previous parent.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any additions made to a document at run-time using <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.AppendChild%2A&gt;</ph> will not be persisted when you call the <ph id="ph2">&lt;xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Windows.Forms.WebBrowser&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph> to append to this location in the tree.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The element after it has been added to the tree.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>Adds an event handler for a named event on the HTML Document Object Model (DOM).</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The Managed Document Object Model (DOM) exposes only a select number of events.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Most of the unexposed events are only defined for specific types of elements; such as the <ph id="ph1">`submit`</ph> event, which is valid only on <ph id="ph2">`FORM`</ph> elements.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A&gt;</ph> to add an event handler to these unexposed events.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should not attach an event to the document or one of its objects until the document has completed loading.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>The earliest you should call this method is in the <ph id="ph1">&lt;xref:System.Windows.Forms.WebBrowser.DocumentCompleted&gt;</ph> event of the <ph id="ph2">&lt;xref:System.Windows.Forms.WebBrowser&gt;</ph> control.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the available unmanaged events, see <bpt id="p1">[</bpt>Accessing Unexposed Members on the Managed HTML Document Object Model<ept id="p1">](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md)</ept> and the IHTMLElement interfaces: <bpt id="p2">[</bpt>IHTMLElement<ept id="p2">](http://go.microsoft.com/fwlink/?LinkId=104876)</ept>, <bpt id="p3">[</bpt>IHTMLElement2<ept id="p3">](http://go.microsoft.com/fwlink/?LinkId=104877)</ept>, <bpt id="p4">[</bpt>IHTMLElement3<ept id="p4">](http://go.microsoft.com/fwlink/?LinkId=104878)</ept>, <bpt id="p5">[</bpt>IHTMLElement4<ept id="p5">](http://go.microsoft.com/fwlink/?LinkId=104879)</ept>.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>The name of the event you want to handle.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The managed code that handles the event.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether this element can have child elements.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some elements, such as <ph id="ph1">`IMG`</ph> and <ph id="ph2">`SCRIPT`</ph>, cannot have any children.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this property before you call <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.AppendChild%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A&gt;</ph> on an arbitrary element.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if element can have child elements; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets an <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElementCollection"&gt;&lt;/xref&gt;</ph> of all children of the current element.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many of the elements inside of an HTML file can have other HTML elements underneath them.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Children%2A&gt;</ph> collection provides a simple mechanism for exploring the tree structure of a document.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Children%2A&gt;</ph> only exposes elements whose direct parent is the current element.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you have an <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> for a <ph id="ph2">`TABLE`</ph> element, <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.Children%2A&gt;</ph> will give you all of the <ph id="ph4">`TR`</ph> (row) elements inside of the <ph id="ph5">`TABLE`</ph>.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>To retrieve the <ph id="ph1">`TD`</ph> (cell) elements contained inside of the <ph id="ph2">`TR`</ph> elements, you will need to use either the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.Children%2A&gt;</ph> collection on each individual <ph id="ph4">`TR`</ph> element, or use the <ph id="ph5">&lt;xref:System.Windows.Forms.HtmlElement.All%2A&gt;</ph> collection on <ph id="ph6">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements in this collection are not guaranteed to be in source order.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A&gt;</ph> is <ph id="ph2">`false`</ph>, <ph id="ph3">`Children`</ph> will always be empty.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>A collection of all <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph> objects that have the current element as a parent.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Occurs when the user clicks on the element with the left mouse button.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Click&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Click&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the user clicks on an element that does not currently have input focus, the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Click&gt;</ph> event will occur after the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.Focusing&gt;</ph> event, but before the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.LostFocus&gt;</ph> event for that element.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>Gets the bounds of the client area of the element in the HTML document.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.ClientRectangle%2A&gt;</ph> will return position data only for elements that have been assigned an explicit height and width, or elements that use absolute positioning.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>A document is absolutely positioned if its position style is set to <ph id="ph1">`absolute`</ph>, after which it can be positioned at any coordinate on the HTML page.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>The client area occupied by the element, minus any area taken by borders and scroll bars.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>To obtain the position and dimensions of the element inclusive of its adornments, use <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement.OffsetRectangle"&gt;&lt;/xref&gt;</ph> instead.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Removes an event handler from a named event on the HTML Document Object Model (DOM).</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The name of the event you want to handle.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The managed code that handles the event.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Gets the <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlDocument"&gt;&lt;/xref&gt;</ph> to which this element belongs.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some HTML pages can host frames using the <ph id="ph1">`FRAMESET`</ph> tags.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, each individual <ph id="ph1">`FRAME`</ph> element will contain its own instance of <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is most useful when you have received a reference to an element in an event handler from the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph>, and need to perform some action on the document in which the element resides.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The parent document of this element.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>Gets an unmanaged interface pointer for this element.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> is a wrapper for the Internet Explorer Document Object Model (DOM), which is written using the Component Object Model (COM).</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need to access unexposed properties or methods on the underlying COM interfaces, such as <ph id="ph1">`IHTMLElement`</ph>, you can use this object to query for them.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>In order to use the unmanaged interfaces, you will need to import the MSHTML library (mshtml.dll) into your application.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can also execute unexposed properties and methods using the <ph id="ph1">`Invoke`</ph> method.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The COM <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IUnknown</ph><ept id="p1">&lt;/code&gt;</ept> pointer for the element, which you can cast to one of the HTML element interfaces, such as <bpt id="p2">&lt;code&gt;</bpt><ph id="ph2">IHTMLElement</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Occurs when the user clicks the left mouse button over an element twice, in rapid succession.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>A double-click is determined by the mouse settings of the user's operating system.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT">
          <source>The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.DoubleClick&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.DoubleClick&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Occurs when the user drags text to various locations.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>This event occurs when text is dragged to the following locations:</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>Within or between HTML pages hosted in the <ph id="ph1">&lt;xref:System.Windows.Forms.WebBrowser&gt;</ph> control or Internet Explorer</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT">
          <source>To another application</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT">
          <source>To the Windows desktop</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Drag&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Drag&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Occurs when a user finishes a drag operation.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.DragEnd&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.DragEnd&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Occurs when the user is no longer dragging an item over this element.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Occurs when the user drags text over the element.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.DragOver&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.DragOver&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Gets or sets whether the user can input data into this element.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>For <ph id="ph1">`FORM`</ph> elements such as text boxes and radio buttons, setting <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.Enabled%2A&gt;</ph> to <ph id="ph3">`false`</ph> will prevent the user from using these form fields.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>For other elements, such as <ph id="ph1">`DIV`</ph> or <ph id="ph2">`SPAN`</ph>, setting <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.Enabled%2A&gt;</ph> to <ph id="ph4">`false`</ph> will cause all text within the element to appear shaded; however, the text will still be selectable.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>To cancel selection, add an event handler for the unexposed <ph id="ph1">`onselectstart`</ph> event using the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A&gt;</ph> method.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the element allows user input; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Tests if the supplied object is equal to the current element.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>The object to test for equality.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> is an <ph id="ph3">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Gets the next element below this element in the document tree.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.FirstChild%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.NextSibling%2A&gt;</ph> to walk the document tree for an HTML document.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph> representing the first element contained underneath the current element, in source order.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Puts user input focus on the current element.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the focus on an element both gives that element focus and makes it the active element; for example, the element that has focus will be returned by the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A&gt;</ph> property of <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Any key strokes entered by a user after <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Focus%2A&gt;</ph> has been called will be sent to that element.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>Occurs when the element first receives user input focus.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>An element that had focus before the user switched to another application using the taskbar or the ALT+TAB keys will receive the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Focusing&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.GotFocus&gt;</ph> events again when the user switches back to your application.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot cancel the default behavior of this event.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT">
          <source>To remove focus from an element, call <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Focus%2A&gt;</ph> on a different element from within the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.GotFocus&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Focusing&gt;</ph> event on an element will also occur on that element's parents and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Retrieves the value of the named attribute on the element.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attribute in HTML is any valid name/value pair for that element.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> exposes only those attributes that are common to all elements, leaving out those that only apply to certain types of elements; <ph id="ph2">`SRC`</ph> is a predefined attribute for the <ph id="ph3">`IMG`</ph> tag, for example, but not for the <ph id="ph4">`DIV`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.GetAttribute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.SetAttribute%2A&gt;</ph> to manipulate attributes not exposed on the managed Document Object Model (DOM).</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.GetAttribute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.SetAttribute%2A&gt;</ph> are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The name of the attribute.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>This argument is case-insensitive.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>The value of this attribute on the element, as a <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>If the specified attribute does not exist on this element, returns an empty string.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Retrieves a collection of elements represented in HTML by the specified <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">HTML</ph><ept id="p1">&lt;/code&gt;</ept> tag.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>The name of the tag whose <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph> objects you wish to retrieve.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElementCollection"&gt;&lt;/xref&gt;</ph> containing all elements whose <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">HTML</ph><ept id="p1">&lt;/code&gt;</ept> tag name is equal to <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">tagName</ph><ept id="p2">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Serves as a hash function for a particular type.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>A hash code for the current <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>Occurs when the element has received user input focus.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can neither cancel this event's default behavior, nor prevent it from bubbling.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>To remove focus from an element, call <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Focus%2A&gt;</ph> on a different element from within the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.GotFocus&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>Gets or sets a label by which to identify the element.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Id%2A&gt;</ph> must be unique; you cannot have two elements with the same <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.Id%2A&gt;</ph> inside of the same document.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Name%2A&gt;</ph> property to give the same identifier to a group of logically related elements.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>The unique identifier for the element.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>Gets or sets the HTML markup underneath this element.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are several ways to add new elements to an existing HTML page, such as the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.AppendChild%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A&gt;</ph> methods.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>Using <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> is often the fastest way to add new content when you have to set many attributes or styles on your new elements.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> differs from <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.OuterHtml%2A&gt;</ph> in that <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> will not include the HTML that represents the object you are calling.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.OuterHtml%2A&gt;</ph> for more information about the difference between these two properties.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> destroys any children previously appended to the element.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you retrieve an element from the DOM and then assign new HTML to its parents' <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> property, your reference to that element will be useless, and its behavior when it calls its properties and methods is undefined.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>For some elements, setting <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> is not a valid operation.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some HTML tags have no closing tag, such as the <ph id="ph1">`IMG`</ph> tag, and therefore cannot contain nested elements.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>Some tags, such as the <ph id="ph1">`SCRIPT`</ph> tag, can only contain text content; setting <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> will result in an error.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>For both types of tags, the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A&gt;</ph> property will return <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you also cannot set <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> on <ph id="ph2">`TABLE`</ph> and <ph id="ph3">`TR`</ph> elements, as assigning malformed HTML to these elements could corrupt the rendering of the document.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.AppendChild%2A&gt;</ph> or the <ph id="ph2">`insertRow`</ph> and <ph id="ph3">`insertCell`</ph> methods on the unmanaged <ph id="ph4">`IHTMLTable`</ph> interface to add rows and cells to a <ph id="ph5">`TABLE`</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you need only to assign text to an element and not HTML markup, use the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerText%2A&gt;</ph> property instead.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assigning a value to <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> will destroy any text values previously assigned using <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.InnerText%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The HTML markup that defines the child elements of the current element.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Creating child elements on this element is not allowed.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Gets or sets the text assigned to the element.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to assign HTML to an element with <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerText%2A&gt;</ph>, the HTML code will display as literals in the document, just as if you were viewing HTML within a text file.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you assign HTML to an element using the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> property, <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.InnerText%2A&gt;</ph> will return all of the text in that HTML with the markup removed.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assigning a value to <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerText%2A&gt;</ph> will destroy any child elements that belong to the element.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The element's text, absent any HTML markup.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>If the element contains child elements, only the text in those child elements will be preserved.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The specified element cannot contain text (for example, an <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">IMG</ph><ept id="p1">&lt;/code&gt;</ept> element).</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Insert a new element into the Document Object Model (DOM).</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not call this method until after the <ph id="ph1">&lt;xref:System.Windows.Forms.WebBrowser.DocumentCompleted&gt;</ph> event on the <ph id="ph2">&lt;xref:System.Windows.Forms.WebBrowser&gt;</ph> control has occurred.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method before then can result in an exception, as the document will not have finished loading.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whether a value of <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElementInsertionOrientation&gt;</ph> is valid will depend on the type of the element.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElementInsertionOrientation.AfterBegin&gt;</ph> is valid if the element is a <ph id="ph2">`DIV`</ph>, but not if it is a <ph id="ph3">`SCRIPT`</ph> or <ph id="ph4">`IMG`</ph> element, neither of which can contain child elements.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Where to insert this element in relation to the current element.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>The new element to insert.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph> that was just inserted.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>If insertion failed, this will return <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>Executes a function defined in the current HTML page by a scripting language.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to call methods from the Document Object Model (DOM) that do not have equivalents in managed code.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>All arguments supplied to <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InvokeMember%2A&gt;</ph> will be converted to Win32 <ph id="ph2">`VARIANT`</ph> data types before they are passed to the named scripting function.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The name of the property or method to invoke.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>A list of parameters to pass.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>The element returned by the function, represented as an <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>If this <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>Executes an unexposed method on the underlying DOM element of this element.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be used to call methods from the Document Object Model (DOM) that do not have equivalents in managed code.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this version of <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InvokeMember%2A&gt;</ph> to execute unexposed methods that take no arguments.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>For an example, see <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InvokeMember%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>The name of the property or method to invoke.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The element returned by this method, represented as an <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>If this <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> is another HTML element, and you have a reference to the unmanaged MSHTML library added to your project, you can cast it to its appropriate unmanaged interface.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>Occurs when the user presses a key on the keyboard.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyDown&gt;</ph> occurs before <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.KeyPress&gt;</ph>, which in turns occurs before <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.KeyUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyDown&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyDown&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>Occurs when the user presses and releases a key on the keyboard.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyPress&gt;</ph> occurs after <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.KeyDown&gt;</ph> and before <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.KeyUp&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyPress&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyPress&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>Occurs when the user releases a key on the keyboard.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyUp&gt;</ph> occurs after <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.KeyPress&gt;</ph>, which occurs after <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.KeyDown&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot cancel this event.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.KeyUp&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>Occurs when the element is losing user input focus.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>Occurs when the element has lost user input focus.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>An element will no longer receive key stroke events after <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.LostFocus&gt;</ph> occurs until it is given focus again, either by the user selecting it on the page or by the application calling the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.Focus%2A&gt;</ph> method on that element.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot cancel this event.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.LostFocus&gt;</ph> event on an element will also occur on that element's parents and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>Occurs when the user presses a mouse button.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.MouseDown&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.MouseDown&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Occurs when the user first moves the mouse cursor over the current element.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>Occurs when the user moves the mouse cursor off of the current element.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Occurs when the user moves the mouse cursor across the element.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot cancel this event.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.MouseMove&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>Occurs when the mouse cursor enters the bounds of the element.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.MouseOver&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.MouseOver&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>Occurs when the user releases a mouse button.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can cancel the default action for a <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.MouseUp&gt;</ph> event on an element by setting the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.MouseUp&gt;</ph> event on an element will also occur on that element's parent elements and on the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph> class itself, unless you set the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A&gt;</ph> property of the <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElementEventArgs&gt;</ph> class to <ph id="ph5">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the difference between canceling event bubbling and canceling the default action on an event, see <bpt id="p1">[</bpt>About the DHTML Object Model<ept id="p1">](http://msdn.microsoft.com/library/ms533022.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the element.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Name%2A&gt;</ph> property to retrieve elements from a document using the <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A&gt;</ph> method on the <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.All%2A&gt;</ph> property of <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlDocument&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>When applied to <ph id="ph1">`INPUT`</ph> elements, <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.Name%2A&gt;</ph> defines the variable name for that element's data when its form is submitted to the server.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.String"&gt;&lt;/xref&gt;</ph> representing the element's name.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>Gets the next element at the same level as this element in the document tree.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.NextSibling%2A&gt;</ph> in conjunction with <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.FirstChild%2A&gt;</ph> to walk the document tree for an HTML element.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph> representing the element to the right of the current element.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>Gets the element from which <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement.OffsetRectangle"&gt;&lt;/xref&gt;</ph> is calculated.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements can be positioned on an HTML page in one of three ways: default flow positioning; relative positioning, in which the element is offset by a fixed amount relative to its parent; and absolute positioning, in which the element is given a fixed coordinate position relative to the upper-left corner of the document.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a document's elements use relative or absolute positioning, you can use <ph id="ph1">`OffsetParent`</ph> to calculate an element's coordinate position in the client area.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about element positioning in HTML, see <bpt id="p1">[</bpt>About Element Positioning<ept id="p1">](http://msdn.microsoft.com/library/ms533005.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The element from which the offsets are calculated.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>If an element's parent or another element in the element's hierarchy uses relative or absolute positioning, <ph id="ph1">`OffsetParent`</ph> will be the first relatively or absolutely positioned element in which the current element is nested.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>If none of the elements above the current element are absolutely or relatively positioned, <ph id="ph1">`OffsetParent`</ph> will be the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">BODY</ph><ept id="p1">&lt;/code&gt;</ept> tag of the document.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>Gets the location of an element relative to its parent.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>Elements can be positioned on an HTML page in one of three ways:</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default flow positioning.</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>Relative positioning, in which the element is offset by a fixed amount relative to its parent.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>Absolute positioning, in which the element is given a fixed coordinate position relative to the upper-left corner of the document.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about element positioning in HTML, see <bpt id="p1">[</bpt>About Element Positioning<ept id="p1">](http://msdn.microsoft.com/library/ms533005.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The x- and y-coordinate positions of the element, and its width and its height, in relation to its parent.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>If an element's parent is relatively or absolutely positioned, <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement.OffsetRectangle"&gt;&lt;/xref&gt;</ph> will return the offset of the parent element.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>If the element itself is relatively positioned with respect to its parent, <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement.OffsetRectangle"&gt;&lt;/xref&gt;</ph> will return the offset from its parent.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>Compares two elements for equality.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equality operator tests the <ph id="ph1">`IUnknown`</ph> pointers of the underlying COM objects wrapped by the supplied <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> classes.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if both parameters are <ph id="ph2">`null`</ph>, or if both elements have the same underlying COM interface; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Compares two <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph> objects for inequality.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT">
          <source>The equivalent method for this operator is the negation of <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Equals%2A?displayProperty=fullName&gt;</ph></source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The first <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The second <ph id="ph1">&lt;xref href="System.Windows.Forms.HtmlElement"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> is only one element is <ph id="ph2">`null`</ph>, or the two objects are not equal; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>Gets or sets the current element's HTML code.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>Whereas <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> will return all HTML contained in the current element excluding the current element's surrounding tags, <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.OuterHtml%2A&gt;</ph> includes the current element's tag as well as the HTML that tag contains, for example:</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this example, calling <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.OuterHtml%2A&gt;</ph> on <ph id="ph2">`div2`</ph> will return:</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> will return:</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you assign a new value to <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.OuterHtml%2A&gt;</ph>, the current element reference will become invalid; it will not reflect the name, properties and child content of the HTML you have just assigned.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>The HTML code for the current element and its children.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>Gets or sets the current element's text.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you attempt to assign HTML to an element with <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.OuterText%2A&gt;</ph>, the HTML code will display as literals in the document, just as if you were viewing HTML within a text file.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you assign HTML to an element using the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.InnerHtml%2A&gt;</ph> property, <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.OuterText%2A&gt;</ph> will return all of the text in that HTML with the markup removed.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Assigning a value to <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.OuterText%2A&gt;</ph> will destroy any child elements that belong to the element.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>The text inside the current element, and in the element's children.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>You cannot set text outside of this element.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>Gets the current element's parent element.</source>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Parent%2A&gt;</ph> property enables discovery of an element's context.</source>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is most useful inside of event handlers such as <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Click&gt;</ph>, which can fire for any element anywhere in the document's object hierarchy.</source>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Parent%2A&gt;</ph> property of the HTML element (the top of an HTML document) points back to itself.</source>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you call <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Parent%2A&gt;</ph> inside a loop, verify that the loop's break condition compares the type of the current element and the type of the <ph id="ph2">`Parent`</ph> property, or else your code may execute an infinite loop.</source>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>The element above the current element in the HTML document's hierarchy.</source>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>Causes the named event to call all registered event handlers.</source>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is used to access HTML Document Object Model (DOM) events.</source>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT">
          <source>It directly calls the <bpt id="p1">[</bpt>IHTMLElement3::fireEvent<ept id="p1">](http://go.microsoft.com/fwlink/?LinkId=103189)</ept> method.</source>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use the DOM through the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> class, see <bpt id="p1">[</bpt>Accessing Unexposed Members on the Managed HTML Document Object Model<ept id="p1">](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>The name of the event to raise.</source>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Removes focus from the current element, if that element has focus.</source>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT">
          <source>Calling this method raises the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.LostFocus&gt;</ph> event for the element.</source>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT">
          <source>When focus is cleared from an element using this method, it is given to the document containing the element, not to the next element in the tab order.</source>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>Scrolls through the document containing this element until the top or bottom edge of this element is aligned with the document's window.</source>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`true`</ph>, the top of the object will be displayed at the top of the window.</source>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">`false`</ph>, the bottom of the object will be displayed at the bottom of the window.</source>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>Gets or sets the distance between the edge of the element and the left edge of its content.</source>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT">
          <source>The full dimensions of the scroll area are available using <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A&gt;</ph>; <ph id="ph2">`ScrollLeft`</ph> and <ph id="ph3">&lt;xref:System.Windows.Forms.HtmlElement.ScrollTop%2A&gt;</ph> are exposed independently because these are the only two properties of the scroll area that developers can set.</source>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>The distance, in pixels, between the left edge of the element and the left edge of its content.</source>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Gets the dimensions of an element's scrollable region.</source>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT">
          <source>An element will have a scrollable region if its content exceeds the size of its dimensions, unless the overflow style on the element forbids rendering scrollbars.</source>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT">
          <source>You cannot modify the size of the scroll area directly, but you can modify the distance between the edges of the scroll area and the edges of the element.</source>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.ScrollTop%2A&gt;</ph> properties to achieve this.</source>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>The size and coordinate location of the scrollable area of an element.</source>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>Gets or sets the distance between the edge of the element and the top edge of its content.</source>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT">
          <source>The full dimensions of the scroll area are available using <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A&gt;</ph>; <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A&gt;</ph> and <ph id="ph3">`ScrollTop`</ph> are exposed independently because these are the only two properties of the scroll area that developers can set.</source>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>The distance, in pixels, between the top edge of the element and the top edge of its content.</source>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>Sets the value of the named attribute on the element.</source>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT">
          <source>An attribute in HTML is any valid name-value pair for that element.</source>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> exposes only those attributes that are common to all elements, leaving out those that only apply to certain types of elements; <ph id="ph2">`SRC`</ph> is a predefined attribute for the <ph id="ph3">`IMG`</ph> tag, for example, but not for the <ph id="ph4">`DIV`</ph> tag.</source>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.GetAttribute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.SetAttribute%2A&gt;</ph> to manipulate attributes not exposed on the managed Document Object Model (DOM).</source>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`attributeName`</ph> is not a defined attribute on an element, <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.SetAttribute%2A&gt;</ph> will define it on the element as a new attribute.</source>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.GetAttribute%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.SetAttribute%2A&gt;</ph> are case-insensitive.</source>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the <ph id="ph1">`class`</ph> attribute on an <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement&gt;</ph> , you must refer to the attribute as <ph id="ph3">`className`</ph> when specifying the first argument to <ph id="ph4">&lt;xref:System.Windows.Forms.HtmlElement.SetAttribute%2A&gt;</ph></source>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>The name of the attribute to set.</source>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>The new value of this attribute.</source>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>Gets or sets a semicolon-delimited list of styles for the current element.</source>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT">
          <source>The HTML Document Object Model (DOM) uses styles as defined in the World Wide Web Consortiums Cascading Style Sheets specification to control the display of an element.</source>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT">
          <source>Styles in the <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.Style%2A&gt;</ph> property take the form of colon-delimited name-value pairs, with each pair separated by a semicolon, as follows:</source>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT">
          <source>To set the font for a <ph id="ph1">`DIV`</ph> element to 14-point Times New Roman bold, for example, you would assign the following string:</source>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT">
          <source>For a full list of all available styles in the HTML DOM, see <bpt id="p1">[</bpt>STYLE Attribute<ept id="p1">](http://msdn.microsoft.com/library/ms534651.aspx)</ept>.</source>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>A string consisting of all of the element's styles</source>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>Gets or sets the location of this element in the tab order.</source>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.TabIndex%2A&gt;</ph> determines which element in an HTML document will next receive focus when the user presses the TAB key.</source>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the only elements included in the tab order are <ph id="ph1">`INPUT`</ph> elements, the <ph id="ph2">`SELECT`</ph> control, and any element whose <ph id="ph3">`contentEditable`</ph> property is set to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can include any HTML element in the tab order, such as a <ph id="ph1">`DIV`</ph>, by assigning it an explicit <ph id="ph2">&lt;xref:System.Windows.Forms.HtmlElement.TabIndex%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT">
          <source>Valid values for <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.TabIndex%2A&gt;</ph> range from -32767 to 32767.</source>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>The numeric index of the element in the tab order.</source>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>Gets the name of the HTML tag.</source>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many elements in the HTML Document Object Model have attributes, properties, and methods that are unique to those elements; such as the <ph id="ph1">`HREF`</ph> attribute on the <ph id="ph2">`A`</ph> element, or the <ph id="ph3">`Submit`</ph> method on <ph id="ph4">`FORM`</ph>.</source>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.HtmlElement.TagName%2A&gt;</ph> when you have an element of a potentially arbitrary type, and need to perform a type-specific operation.</source>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>The name used to create this element using HTML markup.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>