### YamlMime:ManagedReference
items:
- uid: System.Type
  commentId: T:System.Type
  id: Type
  children:
  - System.Type.#ctor
  - System.Type.Assembly
  - System.Type.AssemblyQualifiedName
  - System.Type.Attributes
  - System.Type.BaseType
  - System.Type.ContainsGenericParameters
  - System.Type.DeclaringMethod
  - System.Type.DeclaringType
  - System.Type.DefaultBinder
  - System.Type.Delimiter
  - System.Type.EmptyTypes
  - System.Type.Equals(System.Object)
  - System.Type.Equals(System.Type)
  - System.Type.FilterAttribute
  - System.Type.FilterName
  - System.Type.FilterNameIgnoreCase
  - System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  - System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  - System.Type.FullName
  - System.Type.GenericParameterAttributes
  - System.Type.GenericParameterPosition
  - System.Type.GenericTypeArguments
  - System.Type.GetArrayRank
  - System.Type.GetAttributeFlagsImpl
  - System.Type.GetConstructor(System.Type[])
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetConstructors
  - System.Type.GetConstructors(System.Reflection.BindingFlags)
  - System.Type.GetDefaultMembers
  - System.Type.GetElementType
  - System.Type.GetEnumName(System.Object)
  - System.Type.GetEnumNames
  - System.Type.GetEnumUnderlyingType
  - System.Type.GetEnumValues
  - System.Type.GetEvent(System.String)
  - System.Type.GetEvent(System.String,System.Reflection.BindingFlags)
  - System.Type.GetEvents
  - System.Type.GetEvents(System.Reflection.BindingFlags)
  - System.Type.GetField(System.String)
  - System.Type.GetField(System.String,System.Reflection.BindingFlags)
  - System.Type.GetFields
  - System.Type.GetFields(System.Reflection.BindingFlags)
  - System.Type.GetGenericArguments
  - System.Type.GetGenericParameterConstraints
  - System.Type.GetGenericTypeDefinition
  - System.Type.GetHashCode
  - System.Type.GetInterface(System.String)
  - System.Type.GetInterface(System.String,System.Boolean)
  - System.Type.GetInterfaceMap(System.Type)
  - System.Type.GetInterfaces
  - System.Type.GetMember(System.String)
  - System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  - System.Type.GetMembers
  - System.Type.GetMembers(System.Reflection.BindingFlags)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethod(System.String)
  - System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Type.GetMethod(System.String,System.Type[])
  - System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetMethods
  - System.Type.GetMethods(System.Reflection.BindingFlags)
  - System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)
  - System.Type.GetNestedType(System.String)
  - System.Type.GetNestedTypes(System.Reflection.BindingFlags)
  - System.Type.GetNestedTypes
  - System.Type.GetProperties
  - System.Type.GetProperties(System.Reflection.BindingFlags)
  - System.Type.GetProperty(System.String)
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Type.GetProperty(System.String,System.Type)
  - System.Type.GetProperty(System.String,System.Type[])
  - System.Type.GetProperty(System.String,System.Type,System.Type[])
  - System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)
  - System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})
  - System.Type.GetType
  - System.Type.GetType(System.String,System.Boolean)
  - System.Type.GetType(System.String)
  - System.Type.GetType(System.String,System.Boolean,System.Boolean)
  - System.Type.GetTypeArray(System.Object[])
  - System.Type.GetTypeCode(System.Type)
  - System.Type.GetTypeCodeImpl
  - System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  - System.Type.GetTypeFromCLSID(System.Guid,System.String)
  - System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  - System.Type.GetTypeFromCLSID(System.Guid)
  - System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  - System.Type.GetTypeFromProgID(System.String)
  - System.Type.GetTypeFromProgID(System.String,System.Boolean)
  - System.Type.GetTypeFromProgID(System.String,System.String)
  - System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  - System.Type.GetTypeHandle(System.Object)
  - System.Type.GUID
  - System.Type.HasElementType
  - System.Type.HasElementTypeImpl
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  - System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  - System.Type.IsAbstract
  - System.Type.IsAnsiClass
  - System.Type.IsArray
  - System.Type.IsArrayImpl
  - System.Type.IsAssignableFrom(System.Type)
  - System.Type.IsAutoClass
  - System.Type.IsAutoLayout
  - System.Type.IsByRef
  - System.Type.IsByRefImpl
  - System.Type.IsClass
  - System.Type.IsCOMObject
  - System.Type.IsCOMObjectImpl
  - System.Type.IsConstructedGenericType
  - System.Type.IsContextful
  - System.Type.IsContextfulImpl
  - System.Type.IsEnum
  - System.Type.IsEnumDefined(System.Object)
  - System.Type.IsEquivalentTo(System.Type)
  - System.Type.IsExplicitLayout
  - System.Type.IsGenericParameter
  - System.Type.IsGenericType
  - System.Type.IsGenericTypeDefinition
  - System.Type.IsImport
  - System.Type.IsInstanceOfType(System.Object)
  - System.Type.IsInterface
  - System.Type.IsLayoutSequential
  - System.Type.IsMarshalByRef
  - System.Type.IsMarshalByRefImpl
  - System.Type.IsNested
  - System.Type.IsNestedAssembly
  - System.Type.IsNestedFamANDAssem
  - System.Type.IsNestedFamily
  - System.Type.IsNestedFamORAssem
  - System.Type.IsNestedPrivate
  - System.Type.IsNestedPublic
  - System.Type.IsNotPublic
  - System.Type.IsPointer
  - System.Type.IsPointerImpl
  - System.Type.IsPrimitive
  - System.Type.IsPrimitiveImpl
  - System.Type.IsPublic
  - System.Type.IsSealed
  - System.Type.IsSecurityCritical
  - System.Type.IsSecuritySafeCritical
  - System.Type.IsSecurityTransparent
  - System.Type.IsSerializable
  - System.Type.IsSpecialName
  - System.Type.IsSubclassOf(System.Type)
  - System.Type.IsSZArray
  - System.Type.IsTypeDefinition
  - System.Type.IsUnicodeClass
  - System.Type.IsValueType
  - System.Type.IsValueTypeImpl
  - System.Type.IsVariableBoundArray
  - System.Type.IsVisible
  - System.Type.MakeArrayType(System.Int32)
  - System.Type.MakeArrayType
  - System.Type.MakeByRefType
  - System.Type.MakeGenericType(System.Type[])
  - System.Type.MakePointerType
  - System.Type.MemberType
  - System.Type.Missing
  - System.Type.Module
  - System.Type.Name
  - System.Type.Namespace
  - System.Type.op_Equality(System.Type,System.Type)
  - System.Type.op_Inequality(System.Type,System.Type)
  - System.Type.ReflectedType
  - System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  - System.Type.StructLayoutAttribute
  - System.Type.ToString
  - System.Type.TypeHandle
  - System.Type.TypeInitializer
  - System.Type.UnderlyingSystemType
  - System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)
  - System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  langs:
  - csharp
  name: Type
  nameWithType: Type
  fullName: System.Type
  type: Class
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: 'Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.'
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/type.cs#3d00eeab9feb80f3). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n `Type` is the root of the <xref:System.Reflection> functionality and is the primary way to access metadata. Use the members of <xref:System.Type> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.  \n  \n No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels. No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation. However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref:System.Security.Permissions.ReflectionPermission>. See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).  \n  \n `Type` is an abstract base class that allows multiple implementations. The system will always provide the derived class `RuntimeType`. In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.  \n  \n> [!NOTE]\n>  In multithreading scenarios, do not lock <xref:System.Type> objects in order to synchronize access to `static` data. Other code, over which you have no control, might also lock your class type. This might result in a deadlock. Instead, synchronize access to static data by locking a private `static` object.  \n  \n> [!NOTE]\n>  A derived class can access protected members of the calling code's base classes. Also, access is allowed to assembly members of the calling code's assembly. As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.  \n  \n> [!NOTE]\n>  Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.  \n  \n In this section:  \n  \n [What types does a Type object represent?](#WhatTypes)   \n [Retrieving a Type object](#Retrieve)   \n [Comparing type objects for equality](#Equality)  \n  \n<a name=\"WhatTypes\"></a>   \n## What types does a Type object represent?  \n This class is thread safe; multiple threads can concurrently read from an instance of this type. An instance of the <xref:System.Type> class can represent any of the following types:  \n  \n-   Classes  \n  \n-   Value types  \n  \n-   Arrays  \n  \n-   Interfaces  \n  \n-   Enumerations  \n  \n-   Delegates  \n  \n-   Constructed generic types and generic type definitions  \n  \n-   Type arguments and type parameters of constructed generic types, generic type definitions, and generic method definitions  \n  \n<a name=\"Retrieve\"></a>   \n## Retrieving a Type object  \n The <xref:System.Type> object associated with a particular type can be obtained in the following ways:  \n  \n-   The instance <xref:System.Object.GetType%2A?displayProperty=fullName> method returns a <xref:System.Type> object that represents the type of an instance. Because all managed types derive from <xref:System.Object>, the <xref:System.Object.GetType%2A> method can be called on an instance of any type.  \n  \n     The following example calls the <xref:System.Object.GetType%2A?displayProperty=fullName> method to determine the runtime type of each object in an object array.  \n  \n     [!code-cpp[System.Type#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/GetType1.cpp#2)]\n     [!code-csharp[System.Type#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/GetType1.cs#2)]\n     [!code-vb[System.Type#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/GetType1.vb#2)]  \n  \n-   The static <xref:System.Type.GetType%2A?displayProperty=fullName> methods return a <xref:System.Type> object that represents a type specified by its fully qualified name.  \n  \n-   The <xref:System.Reflection.Module.GetTypes%2A?displayProperty=fullName>, <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>, and <xref:System.Reflection.Module.FindTypes%2A?displayProperty=fullName> methods return `Type` objects that represent the types defined in a module. The first method can be used to obtain an array of <xref:System.Type> objects for all the public and private types defined in a module. (You can obtain an instance of `Module` through the <xref:System.Reflection.Assembly.GetModule%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetModules%2A?displayProperty=fullName> method, or through the <xref:System.Type.Module%2A?displayProperty=fullName> property.)  \n  \n-   The <xref:System.Reflection.Assembly?displayProperty=fullName> object contains a number of methods to retrieve the classes defined in an assembly, including <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>, <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName>, and <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=fullName>.  \n  \n-   The <xref:System.Type.FindInterfaces%2A> method returns a filtered list of interface types supported by a type.  \n  \n-   The <xref:System.Type.GetElementType%2A> method returns a `Type` object that represents the element.  \n  \n-   The <xref:System.Type.GetInterfaces%2A> and <xref:System.Type.GetInterface%2A> methods return <xref:System.Type> objects representing the interface types supported by a type.  \n  \n-   The <xref:System.Type.GetTypeArray%2A> method returns an array of <xref:System.Type> objects representing the types specified by an arbitrary set of objects. The objects are specified with an array of type <xref:System.Object>.  \n  \n-   The <xref:System.Type.GetTypeFromProgID%2A> and <xref:System.Type.GetTypeFromCLSID%2A> methods are provided for COM interoperability. They return a <xref:System.Type> object that represents the type specified by a `ProgID` or `CLSID`.  \n  \n-   The <xref:System.Type.GetTypeFromHandle%2A> method is provided for interoperability. It returns a `Type` object that represents the type specified by a class handle.  \n  \n-   The C# `typeof` operator, the C++ `typeid` operator, and the Visual Basic `GetType` operator obtain the `Type` object for a type.  \n  \n-   The <xref:System.Type.MakeGenericType%2A> method returns a <xref:System.Type> object representing a constructed generic type, which is an open constructed type if its <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, and a closed constructed type otherwise. A generic type can be instantiated only if it is closed.  \n  \n-   The <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakePointerType%2A>, and <xref:System.Type.MakeByRefType%2A> methods return <xref:System.Type> objects that represent, respectively, an array of a specified type, a pointer to a specified type, and the type of a reference parameter (`ref` in C#, `ByRef` in Visual Basic).  \n  \n<a name=\"Equality\"></a>   \n## Comparing type objects for equality  \n A <xref:System.Type> object that represents a type is unique; that is, two <xref:System.Type> object references refer to the same object if and only if they represent the same type. This allows for comparison of <xref:System.Type> objects using reference equality. The following example compares the <xref:System.Type> objects that represent a number of integer values to determine whether they are of the same type.  \n  \n [!code-cpp[System.Type#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/Equals1.cpp#3)]\n [!code-csharp[System.Type#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/Equals1.cs#3)]\n [!code-vb[System.Type#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/Equals1.vb#3)]"
  example:
  - "The following  example shows a few representative features of <xref:System.Type>. The C# `typeof` operator (`GetType` operator in Visual Basic, `typeid` operator in Visual C++) is used to get a <xref:System.Type> object representing <xref:System.String>. From this <xref:System.Type> object, the <xref:System.Type.GetMethod%2A> method is used to get a <xref:System.Reflection.MethodInfo> representing the <xref:System.String.Substring%2A> overload that takes a starting location and a length.  \n  \n To identify the overload signature, the code example creates a temporary array containing two <xref:System.Type> objects representing `int` (`Integer` in Visual Basic).  \n  \n> [!NOTE]\n>  To be precise, the array contains two references to the instance of <xref:System.Type> that represents `int` in the current application domain. For any type, there is only one instance of <xref:System.Type> per application domain.  \n  \n The code example uses the <xref:System.Reflection.MethodInfo> to invoke the <xref:System.String.Substring%2A> method on the string \"Hello, World!\", and displays the result.  \n  \n [!code-cpp[System.Type#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type/cpp/source.cpp#1)]\n [!code-csharp[System.Type#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type/cs/source.cs#1)]\n [!code-vb[System.Type#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type/vb/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Type : System.Reflection.MemberInfo, System.Reflection.IReflect, System.Runtime.InteropServices._Type
  inheritance:
  - System.Object
  implements:
  - System.Reflection.IReflect
  - System.Runtime.InteropServices._Type
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  - System.Reflection.TypeExtensions.GetConstructors(System.Type)
  - System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetEvents(System.Type)
  - System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetFields(System.Type)
  - System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  - System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMembers(System.Type)
  - System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  - System.Reflection.TypeExtensions.GetMethods(System.Type)
  - System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperties(System.Type)
  - System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  - System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  - System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.#ctor
  commentId: M:System.Type.#ctor
  id: '#ctor'
  parent: System.Type
  langs:
  - csharp
  name: Type()
  nameWithType: Type.Type()
  fullName: Type.Type()
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Type"></xref> class.
  remarks: This constructor is invoked by derived classes during the construction of type objects.
  syntax:
    content: protected Type ();
    parameters: []
  overload: System.Type.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Assembly
  commentId: P:System.Type.Assembly
  id: Assembly
  parent: System.Type
  langs:
  - csharp
  name: Assembly
  nameWithType: Type.Assembly
  fullName: Type.Assembly
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the <xref href="System.Reflection.Assembly"></xref> in which the type is declared. For generic types, gets the <xref href="System.Reflection.Assembly"></xref> in which the generic type is defined.
  remarks: "If the current <xref:System.Type> object represents a constructed generic type, this property returns the assembly that contains the generic type definition. For example, suppose you create an assembly named MyGenerics.dll that contains the generic type definition `MyGenericStack<T>` (`MyGenericStack(Of T)` in Visual Basic, `generic<T> ref class MyGenericStack` in C++). If you create an instance of `MyGenericStack<int>` (`MyGenericStack(Of Integer)` in Visual Basic) in another assembly, the <xref:System.Type.Assembly%2A> property for the constructed type returns an <xref:System.Reflection.Assembly> object that represents MyGenerics.dll.  \n  \n Similarly, if the current <xref:System.Type> object represents an unassigned generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`.  \n  \n If the <xref:System.Type.Assembly%2A?displayProperty=fullName> property is not available on a particular .NET platform, such as .NET Core or the Universal Windows Platform, use the  `System.Reflection.TypeInfo.Assembly` property instead. ?qualifyHint=False&autoUpgrade=True  \n  \n This property is read-only."
  example:
  - "The following example displays the assembly name associated with the class and the fully qualified name of the type.  \n  \n [!code-cpp[Type_Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]\n [!code-csharp[Type_Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]\n [!code-vb[Type_Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]"
  syntax:
    content: public abstract System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: An <xref href="System.Reflection.Assembly"></xref> instance that describes the assembly containing the current type. For generic types, the instance describes the assembly that contains the generic type definition, not the assembly that creates and uses a particular constructed type.
  overload: System.Type.Assembly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.AssemblyQualifiedName
  commentId: P:System.Type.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Type
  langs:
  - csharp
  name: AssemblyQualifiedName
  nameWithType: Type.AssemblyQualifiedName
  fullName: Type.AssemblyQualifiedName
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <xref href="System.Type"></xref> object was loaded.
  remarks: "The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly. The display name of an assembly is obtained using the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  \n  \n All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  \n  \n|Delimiter|Meaning|  \n|---------------|-------------|  \n|Backslash (\\\\)|Escape character.|  \n|Comma (,)|Precedes the Assembly name.|  \n|Plus sign (+)|Precedes a nested class.|  \n|Period (.)|Denotes namespace identifiers.|  \n|Brackets ([])|After a type name, denotes an array of that type.<br /><br /> -or-<br /><br /> For a generic type, encloses the generic type argument list.<br /><br /> -or-<br /><br /> Within a type argument list, encloses an assembly-qualified type.|  \n  \n For example, the assembly-qualified name for a class might look like this:  \n  \n```  \nTopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089  \n```  \n  \n If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\\\) to prevent it from being interpreted as a nesting separator. Reflection would emit this string as follows:  \n  \n```  \nTopNamespace.Sub\\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089   \n```  \n  \n A \"++\" becomes \"\\\\+\\\\+\", and a \"\\\\\" becomes \"\\\\\\\\\".  \n  \n This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  \n  \n Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.  \n  \n Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  \n  \n Generic arguments of generic types are themselves qualified by assembly name. For example, in the assembly-qualified type name for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic), `int` is expanded to the assembly-qualified type name for <xref:System.Int32>.  \n  \n If the current <xref:System.Type> object represents a generic parameter, this property returns `null`."
  example:
  - "The following example displays the assembly name associated with the class and the fully qualified name of the type.  \n  \n [!code-cpp[type_assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Assembly/CPP/type_assembly.cpp#1)]\n [!code-csharp[type_assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Assembly/CS/type_assembly.cs#1)]\n [!code-vb[type_assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Assembly/VB/type_assembly.vb#1)]  \n  \n The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.  \n  \n [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]\n [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]"
  syntax:
    content: public abstract string AssemblyQualifiedName { get; }
    return:
      type: System.String
      description: The assembly-qualified name of the <xref href="System.Type"></xref>, which includes the name of the assembly from which the <xref href="System.Type"></xref> was loaded, or `null` if the current instance represents a generic type parameter.
  overload: System.Type.AssemblyQualifiedName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Attributes
  commentId: P:System.Type.Attributes
  id: Attributes
  parent: System.Type
  langs:
  - csharp
  name: Attributes
  nameWithType: Type.Attributes
  fullName: Type.Attributes
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the attributes associated with the <xref href="System.Type"></xref>.
  remarks: "Some members of the <xref:System.Reflection.TypeAttributes> enumeration are masks that represent a group of values. Each group includes one member whose underlying value is zero. For example, the underlying value of the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> member in the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> group is zero, as is the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> member in the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> group. Because of this, you must use the mask before testing for those values. The example provides an illustration.  \n  \n> [!TIP]\n>  For most purposes, properties like<xref:System.Type.IsClass%2A>,<xref:System.Type.IsAutoLayout%2A>, and<xref:System.Type.IsSpecialName%2A> are easier to use than type attributes.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property returns the attributes of the generic type definition. For example, the attributes returned for `MyGenericClass<int>` (`MyGenericClass(Of Integer)` in Visual Basic) are the attributes of `MyGenericClass<T>` (`MyGenericClass(Of T)` in Visual Basic).  \n  \n If the current <xref:System.Type> represents a generic type parameter — that is, if the <xref:System.Type.IsGenericParameter%2A> property returns `true` — the <xref:System.Reflection.TypeAttributes> value returned by this property is unspecified."
  example:
  - "The following example usesthe <xref:System.Type.Attributes%2A> property.  \n  \n [!code-csharp[System.Type.Attributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.attributes/cs/attributes1.cs#1)]\n [!code-vb[System.Type.Attributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.attributes/vb/attributes1.vb#1)]"
  syntax:
    content: public System.Reflection.TypeAttributes Attributes { get; }
    return:
      type: System.Reflection.TypeAttributes
      description: A <xref href="System.Reflection.TypeAttributes"></xref> object representing the attribute set of the <xref href="System.Type"></xref>, unless the <xref href="System.Type"></xref> represents a generic type parameter, in which case the value is unspecified.
  overload: System.Type.Attributes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.BaseType
  commentId: P:System.Type.BaseType
  id: BaseType
  parent: System.Type
  langs:
  - csharp
  name: BaseType
  nameWithType: Type.BaseType
  fullName: Type.BaseType
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type from which the current <xref href="System.Type"></xref> directly inherits.
  remarks: "The base type is the type from which the current type directly inherits. <xref:System.Object> is the only type that does not have a base type, therefore `null` is returned as the base type of <xref:System.Object>.  \n  \n Interfaces inherit from zero or more base interfaces; therefore, this property returns `null` if the `Type` object represents an interface. The base interfaces can be determined with <xref:System.Type.GetInterfaces%2A> or <xref:System.Type.FindInterfaces%2A>.  \n  \n If the current <xref:System.Type> represents a constructed generic type, the base type reflects the generic arguments. For example, consider the following declarations:  \n  \n [!code-cpp[System.Type.BaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.basetype/cpp/remarks.cpp#1)]\n [!code-csharp[System.Type.BaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/remarks.cs#1)]\n [!code-vb[System.Type.BaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/remarks.vb#1)]  \n  \n For the constructed type `C<int>` (`C(Of Integer)` in Visual Basic), the <xref:System.Type.BaseType%2A> property returns `B<int>`.  \n  \n If the current <xref:System.Type> represents a type parameter of a generic type definition, <xref:System.Type.BaseType%2A> returns the class constraint, that is, the class the type parameter must inherit. If there is no class constraint, <xref:System.Type.BaseType%2A> returns <xref:System.Object?displayProperty=fullName>.  \n  \n This property is read-only."
  example:
  - "The following example demonstrates using the <xref:System.Type.BaseType%2A> property.  \n  \n [!code-cpp[TestBaseType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestBaseType/CPP/testbasetype.cpp#1)]\n [!code-csharp[TestBaseType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestBaseType/CS/testbasetype.cs#1)]\n [!code-vb[TestBaseType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestBaseType/VB/testbasetype.vb#1)]  \n  \n The following example uses recursion to list the complete inheritance hierarchy of each class found in an assembly. The example defines a class named `C` that derives from a class named `B`, which, in turn, derives from a class named `A`.  \n  \n [!code-csharp[System.Type.BaseType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.basetype/cs/basetype3.cs#2)]\n [!code-vb[System.Type.BaseType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.basetype/vb/basetype3.vb#2)]"
  syntax:
    content: public abstract Type BaseType { get; }
    return:
      type: System.Type
      description: The <xref href="System.Type"></xref> from which the current <xref href="System.Type"></xref> directly inherits, or `null` if the current `Type` represents the <xref href="System.Object"></xref> class or an interface.
  overload: System.Type.BaseType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.ContainsGenericParameters
  commentId: P:System.Type.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Type
  langs:
  - csharp
  name: ContainsGenericParameters
  nameWithType: Type.ContainsGenericParameters
  fullName: Type.ContainsGenericParameters
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type"></xref> object has type parameters that have not been replaced by specific types.
  remarks: "In order to create an instance of a type, there must be no generic type definitions or open constructed types in the type arguments of the type itself, in any enclosing generic types, or in any elements of the type. Another way of saying this is that when examined recursively, the type must contain no generic type parameters.  \n  \n Since types can be arbitrarily complex, making this determination is difficult. For convenience and to reduce the chance of error, the <xref:System.Type.ContainsGenericParameters%2A> property provides a standard way to distinguish between closed constructed types, which can be instantiated, and open constructed types, which cannot. If the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`, the type cannot be instantiated.  \n  \n The <xref:System.Type.ContainsGenericParameters%2A> property searches recursively for type parameters. For example, it returns `true` for an array whose elements are type `A<T>` (`A(Of T)` in Visual Basic), even though the array is not itself generic. Contrast this with the behavior of the <xref:System.Type.IsGenericType%2A> property, which returns `false` for arrays.  \n  \n For a set of example classes and a table showing the values of the <xref:System.Type.ContainsGenericParameters%2A> property, see <xref:System.Type.IsGenericType%2A>."
  example:
  - "The following example defines a generic class with two type parameters and then defines a second generic class that derives from the first class. The derived class's base class has two type arguments: the first is <xref:System.Int32> and the second is a type parameter of the derived type. The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.  \n  \n [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]\n [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]\n [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]"
  syntax:
    content: public virtual bool ContainsGenericParameters { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> object is itself a generic type parameter or has type parameters for which specific types have not been supplied; otherwise, `false`.'
  overload: System.Type.ContainsGenericParameters*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.DeclaringMethod
  commentId: P:System.Type.DeclaringMethod
  id: DeclaringMethod
  parent: System.Type
  langs:
  - csharp
  name: DeclaringMethod
  nameWithType: Type.DeclaringMethod
  fullName: Type.DeclaringMethod
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a <xref href="System.Reflection.MethodBase"></xref> that represents the declaring method, if the current <xref href="System.Type"></xref> represents a type parameter of a generic method.
  remarks: "The declaring method is a generic method definition. That is, if <xref:System.Type.DeclaringMethod%2A> does not return `null`, then `DeclaringMethod.IsGenericMethodDefinition` returns `true`.  \n  \n The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition in which the generic type parameter was originally defined:  \n  \n-   If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.  \n  \n-   If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.  \n  \n-   Getting the <xref:System.Type.DeclaringMethod%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>.  \n  \n The <xref:System.Reflection.MethodBase> that is returned by the <xref:System.Type.DeclaringMethod%2A> property is either a <xref:System.Reflection.MethodInfo> in the case of a generic method, or a <xref:System.Reflection.ConstructorInfo> in the case of a generic constructor.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, generic constructors are not supported.  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks."
  example:
  - "The following code example defines a class that has a generic method, assigns a type argument to the method, and invokes the resulting constructed generic method. It also displays information about the generic method definition and the constructed method. When displaying information about the type parameters of the generic method definition, in the `DisplayGenericMethodInfo` method, the example code shows the value of the <xref:System.Type.DeclaringMethod%2A> property for the method's generic type parameter.  \n  \n [!code-cpp[MethodInfo.Generics#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodInfo.Generics/cpp/source.cpp#1)]\n [!code-csharp[MethodInfo.Generics#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodInfo.Generics/CS/source.cs#1)]\n [!code-vb[MethodInfo.Generics#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodInfo.Generics/VB/source.vb#1)]"
  syntax:
    content: public virtual System.Reflection.MethodBase DeclaringMethod { get; }
    return:
      type: System.Reflection.MethodBase
      description: If the current <xref href="System.Type"></xref> represents a type parameter of a generic method, a <xref href="System.Reflection.MethodBase"></xref> that represents declaring method; otherwise, `null`.
  overload: System.Type.DeclaringMethod*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.DeclaringType
  commentId: P:System.Type.DeclaringType
  id: DeclaringType
  parent: System.Type
  langs:
  - csharp
  name: DeclaringType
  nameWithType: Type.DeclaringType
  fullName: Type.DeclaringType
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the type that declares the current nested type or generic type parameter.
  remarks: "If the current <xref:System.Type> object represents a type parameter of a generic type, this property returns the generic type definition.  \n  \n If the current <xref:System.Type> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition. If the type is generic, the generic type definition is returned. That is, the following code returns the generic type definition of the <xref:System.Collections.Generic.List%601> generic class, which contains the <xref:System.Collections.Generic.List%601.ConvertAll%2A> generic method:  \n  \n [!code-cpp[System.Type.DeclaringType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.declaringtype/cpp/remarks.cpp#1)]\n [!code-csharp[System.Type.DeclaringType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.declaringtype/cs/remarks.cs#1)]\n [!code-vb[System.Type.DeclaringType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.declaringtype/vb/remarks.vb#1)]  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, the <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:  \n  \n-   If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.  \n  \n-   If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.  \n  \n-   Getting the <xref:System.Type.DeclaringType%2A> property on a type whose <xref:System.Type.IsGenericParameter%2A> property is `false` throws an <xref:System.InvalidOperationException>."
  example:
  - "This example displays the declaring type of a method in a derived class.  \n  \n [!code-cpp[Classic Type.DeclaringType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Type.DeclaringType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/CS/source.cs#1)]\n [!code-vb[Classic Type.DeclaringType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.DeclaringType Example/VB/source.vb#1)]"
  syntax:
    content: public override Type DeclaringType { get; }
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, `null`.
  overload: System.Type.DeclaringType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.DefaultBinder
  commentId: P:System.Type.DefaultBinder
  id: DefaultBinder
  parent: System.Type
  langs:
  - csharp
  name: DefaultBinder
  nameWithType: Type.DefaultBinder
  fullName: Type.DefaultBinder
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a reference to the default binder, which implements internal rules for selecting the appropriate members to be called by <xref href="System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])"></xref>.
  remarks: "The default binder provided with the common language runtime is applicable in all but the most specialized circumstances. If you need a binder that follows rules that differ from those of the supplied default binder, define a type derived from the <xref:System.Reflection.Binder> class and pass an instance of that type using the `binder` parameter of one of the <xref:System.Type.InvokeMember%2A> overloads.  \n  \n Reflection models the accessibility rules of the common type system. For example, if the caller is in the same assembly, the caller does not need special permissions for internal members. Otherwise, the caller needs <xref:System.Security.Permissions.ReflectionPermission>. This is consistent with lookup of members that are protected, private, and so on.  \n  \n The general principle is that <xref:System.Reflection.Binder.ChangeType%2A> should perform only widening conversions, which never lose data. An example of a widening conversion is converting a value that is a 32-bit signed integer to a value that is a 64-bit signed integer. This is distinguished from a narrowing conversion, which may lose data. An example of a narrowing conversion is converting a 64-bit signed integer to a 32-bit signed integer.  \n  \n The following table lists the conversions supported by the default binder.  \n  \n|Source Type|Target Type|  \n|-----------------|-----------------|  \n|Any type|Its base type.|  \n|Any type|The interface it implements.|  \n|Char|Unt16, UInt32, Int32, UInt64, Int64, Single, Double|  \n|Byte|Char, Unt16, Int16, UInt32, Int32, UInt64, Int64, Single, Double|  \n|SByte|Int16, Int32, Int64, Single, Double|  \n|UInt16|UInt32, Int32, UInt64, Int64, Single, Double|  \n|Int16|Int32, Int64, Single, Double|  \n|UInt32|UInt64, Int64, Single, Double|  \n|Int32|Int64, Single, Double|  \n|UInt64|Single, Double|  \n|Int64|Single, Double|  \n|Single|Double|  \n|Non-reference|By-reference.|"
  example:
  - "The following example gets the default binder from the `DefaultBinder` property, and invokes a member of MyClass by passing the `DefaultBinder` value as a parameter to <xref:System.Type.InvokeMember%2A>.  \n  \n [!code-cpp[Type_DefaultBinder#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_DefaultBinder/CPP/type_defaultbinder.cpp#1)]\n [!code-csharp[Type_DefaultBinder#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_DefaultBinder/CS/type_defaultbinder.cs#1)]\n [!code-vb[Type_DefaultBinder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_DefaultBinder/VB/type_defaultbinder.vb#1)]"
  syntax:
    content: public static System.Reflection.Binder DefaultBinder { get; }
    return:
      type: System.Reflection.Binder
      description: A reference to the default binder used by the system.
  overload: System.Type.DefaultBinder*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Delimiter
  commentId: F:System.Type.Delimiter
  id: Delimiter
  parent: System.Type
  langs:
  - csharp
  name: Delimiter
  nameWithType: Type.Delimiter
  fullName: Type.Delimiter
  type: Field
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Separates names in the namespace of the <xref href="System.Type"></xref>. This field is read-only.
  syntax:
    content: public static readonly char Delimiter;
    return:
      type: System.Char
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.EmptyTypes
  commentId: F:System.Type.EmptyTypes
  id: EmptyTypes
  parent: System.Type
  langs:
  - csharp
  name: EmptyTypes
  nameWithType: Type.EmptyTypes
  fullName: Type.EmptyTypes
  type: Field
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Represents an empty array of type <xref href="System.Type"></xref>. This field is read-only.
  remarks: ''
  example:
  - "The following code example shows the `EmptyTypes` field used in one of the `GetConstructor` methods to get a constructor that takes no parameters.  \n  \n [!code-cpp[Classic Type.EmptyTypes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Type.EmptyTypes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/CS/source.cs#1)]\n [!code-vb[Classic Type.EmptyTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.EmptyTypes Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly Type[] EmptyTypes;
    return:
      type: System.Type[]
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Equals(System.Object)
  commentId: M:System.Type.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Type
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Type.Equals(Object)
  fullName: Type.Equals(Object)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines if the underlying system type of the current <xref href="System.Type"></xref> object is the same as the underlying system type of the specified <xref href="System.Object"></xref>.
  remarks: This method overrides <xref:System.Object.Equals%2A?displayProperty=fullName>. It casts `o` to an object of type <xref:System.Type> and calls the <xref:System.Type.Equals%28System.Type%29?displayProperty=fullName> method.
  example:
  - "The following example uses <xref:System.Type.Equals%28System.Object%29> to compare various <xref:System.Type> object instances with various <xref:System.Object> instances.  \n  \n [!code-csharp[System.Type.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.Equals/cs/EqualsEx1.cs#1)]\n [!code-vb[System.Type.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.Equals/vb/EqualsEx1.vb#1)]  \n  \n Two things are particularly worth noting about the example:  \n  \n-   The comparison of a <xref:System.Type> object that represents an integer with a <xref:System.Reflection.TypeInfo> object that represents an integer return `true` because <xref:System.Reflection.TypeInfo> is derived from <xref:System.Type>.  \n  \n-   The comparison of a  <xref:System.Type> object that represents a <xref:System.Collections.Generic.IList%601> object (an open generic type) with a `List(Of String)` object (a closed generic type) returns `false`."
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object whose underlying system type is to be compared with the underlying system type of the current <xref href="System.Type"></xref>. For the comparison to succeed, <code>o</code> must be able to be cast or converted to an object of type   <xref href="System.Type"></xref>.
    return:
      type: System.Boolean
      description: "`true` if the underlying system type of <code>o</code> is the same as the underlying system type of the current <xref href=\"System.Type\"></xref>; otherwise, `false`. This method also returns `false` if: .  \n  \n-   <code>o</code> is `null`.  \n  \n-   <code>o</code> cannot be cast or converted to a <xref href=\"System.Type\"></xref> object."
  overload: System.Type.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Equals(System.Type)
  commentId: M:System.Type.Equals(System.Type)
  id: Equals(System.Type)
  parent: System.Type
  langs:
  - csharp
  name: Equals(Type)
  nameWithType: Type.Equals(Type)
  fullName: Type.Equals(Type)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Determines if the underlying system type of the current <xref href="System.Type"></xref> is the same as the underlying system type of the specified <xref href="System.Type"></xref>.
  remarks: ''
  example:
  - "The following example uses `Equals` to compare two types.  \n  \n [!code-csharp[Classic Type.Equals1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/CS/source.cs#1)]\n [!code-vb[Classic Type.Equals1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Equals1 Example/VB/source.vb#1)]"
  syntax:
    content: public virtual bool Equals (Type o);
    parameters:
    - id: o
      type: System.Type
      description: The object whose underlying system type is to be compared with the underlying system type of the current <xref href="System.Type"></xref>.
    return:
      type: System.Boolean
      description: '`true` if the underlying system type of <code>o</code> is the same as the underlying system type of the current <xref href="System.Type"></xref>; otherwise, `false`.'
  overload: System.Type.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.FilterAttribute
  commentId: F:System.Type.FilterAttribute
  id: FilterAttribute
  parent: System.Type
  langs:
  - csharp
  name: FilterAttribute
  nameWithType: Type.FilterAttribute
  fullName: Type.FilterAttribute
  type: Field
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Represents the member filter used on attributes. This field is read-only.
  remarks: "This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method. The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`. The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`. The `Object` may be assigned the value of any one of the fields on the classes <xref:System.Reflection.FieldAttributes>, <xref:System.Reflection.MethodAttributes>, or <xref:System.Reflection.MethodImplAttributes>.  \n  \n For example, the `Object` can be assigned the value of a field from `FieldAttributes` such as Public. In that case, when the `FilterAttribute` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object is decorated with the public field attribute in metadata."
  example:
  - "The following example gets the `FilterAttribute` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the specified members and their attributes.  \n  \n [!code-cpp[Type_FilterAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterAttribute/CPP/type_filterattribute.cpp#1)]\n [!code-csharp[Type_FilterAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterAttribute/CS/type_filterattribute.cs#1)]\n [!code-vb[Type_FilterAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterAttribute/VB/type_filterattribute.vb#1)]"
  syntax:
    content: public static readonly System.Reflection.MemberFilter FilterAttribute;
    return:
      type: System.Reflection.MemberFilter
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.FilterName
  commentId: F:System.Type.FilterName
  id: FilterName
  parent: System.Type
  langs:
  - csharp
  name: FilterName
  nameWithType: Type.FilterName
  fullName: Type.FilterName
  type: Field
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Represents the case-sensitive member filter used on names. This field is read-only.
  remarks: "This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method. The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`. The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`. The `Object` is assigned a string value, which may include a trailing \"*\" wildcard character. Only wildcard end string matching is supported.  \n  \n For example, the `Object` may be assigned the value \"Byte*\". In that case, when the `FilterName` delegate is invoked, it will return `true` only if the method represented by the `MemberInfo` object has a name that begins with \"Byte\"."
  example:
  - "The following code example gets the methods associated with the user-defined `Application` type.  \n  \n [!code-cpp[Classic Type.FilterName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Type.FilterName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.FilterName Example/CS/source.cs#1)]\n [!code-vb[Classic Type.FilterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.FilterName Example/VB/source.vb#1)]"
  syntax:
    content: public static readonly System.Reflection.MemberFilter FilterName;
    return:
      type: System.Reflection.MemberFilter
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.FilterNameIgnoreCase
  commentId: F:System.Type.FilterNameIgnoreCase
  id: FilterNameIgnoreCase
  parent: System.Type
  langs:
  - csharp
  name: FilterNameIgnoreCase
  nameWithType: Type.FilterNameIgnoreCase
  fullName: Type.FilterNameIgnoreCase
  type: Field
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Represents the case-insensitive member filter used on names. This field is read-only.
  remarks: "This field holds a reference to the delegate used by the <xref:System.Type.FindMembers%2A> method. The method encapsulated by this delegate takes two parameters: the first is a <xref:System.Reflection.MemberInfo> object and the second is an `Object`. The method determines whether the `MemberInfo` object matches the criteria specified by the `Object`. The `Object` is assigned a string value, which may include a trailing \"*\" wildcard character. Only wildcard end string matching is supported.  \n  \n For example, the `Object` may be assigned the value \"ByTe*\". In that case, when the `FilterName` delegate is invoked, it will return true only if the method represented by the `MemberInfo` object has a name that begins with \"byte\", ignoring case."
  example:
  - "The following example gets the `MemberFilter` delegate, passes it as a parameter to the <xref:System.Type.FindMembers%2A> method, and displays the methods and their attributes of the `String` class that begin with the letter \"c\", disregarding the case.  \n  \n [!code-cpp[Type_FilterNameIgnoreCase#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CPP/type_filternameignorecase.cpp#1)]\n [!code-csharp[Type_FilterNameIgnoreCase#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FilterNameIgnoreCase/CS/type_filternameignorecase.cs#1)]\n [!code-vb[Type_FilterNameIgnoreCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FilterNameIgnoreCase/VB/type_filternameignorecase.vb#1)]"
  syntax:
    content: public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;
    return:
      type: System.Reflection.MemberFilter
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  commentId: M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  id: FindInterfaces(System.Reflection.TypeFilter,System.Object)
  parent: System.Type
  langs:
  - csharp
  name: FindInterfaces(TypeFilter, Object)
  nameWithType: Type.FindInterfaces(TypeFilter, Object)
  fullName: Type.FindInterfaces(TypeFilter, Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns an array of <xref href="System.Type"></xref> objects representing a filtered list of interfaces implemented or inherited by the current <xref href="System.Type"></xref>.
  remarks: "This method can be overridden by a derived class.  \n  \n The <xref:System.Reflection.Module.FilterTypeName?displayProperty=fullName> and <xref:System.Reflection.Module.FilterTypeNameIgnoreCase?displayProperty=fullName> delegates supplied by the <xref:System.Reflection.Module?displayProperty=fullName> class may also be used, in lieu of the <xref:System.Reflection.TypeFilter?displayProperty=fullName> delegate.  \n  \n All of the interfaces implemented by this class are considered during the search, whether declared by a base class or this class itself.  \n  \n This method searches the base class hierarchy, returning each of the matching interfaces each class implements as well as all the matching interfaces each of those interfaces implements (that is, the transitive closure of the matching interfaces is returned). No duplicate interfaces are returned.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, <xref:System.Type.FindInterfaces%2A> searches all the interfaces declared in the constraints on the type parameter, and all interfaces inherited through the interfaces declared in the constraints. If the current <xref:System.Type> represents a type argument of a generic type, <xref:System.Type.FindInterfaces%2A> searches all the interfaces implemented by the type, whether or not they match constraints.  \n  \n> [!NOTE]\n>  <xref:System.Type.FindInterfaces%2A> can return generic interfaces, even on types that are not generic. For example, a nongeneric type might implement `IEnumerable<int>` (`IEnumerable(Of Integer)` in Visual Basic)."
  example:
  - "The following example finds the specified interface implemented or inherited by the specified type, and then displays the interface names.  \n  \n [!code-cpp[Type_FindInterfaces#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindInterfaces/CPP/type_findinterfaces.cpp#1)]\n [!code-csharp[Type_FindInterfaces#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindInterfaces/CS/type_findinterfaces.cs#1)]\n [!code-vb[Type_FindInterfaces#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindInterfaces/VB/type_findinterfaces.vb#1)]"
  syntax:
    content: public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);
    parameters:
    - id: filter
      type: System.Reflection.TypeFilter
      description: The delegate that compares the interfaces against <code>filterCriteria</code>.
    - id: filterCriteria
      type: System.Object
      description: The search criteria that determines whether an interface should be included in the returned array.
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing a filtered list of the interfaces implemented or inherited by the current <xref href="System.Type"></xref>, or an empty array of type <xref href="System.Type"></xref> if no interfaces matching the filter are implemented or inherited by the current <xref href="System.Type"></xref>.
  overload: System.Type.FindInterfaces*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>filter</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A static initializer is invoked and throws an exception.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  commentId: M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  id: FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  parent: System.Type
  langs:
  - csharp
  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  nameWithType: Type.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  fullName: Type.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns a filtered array of <xref href="System.Reflection.MemberInfo"></xref> objects of the specified member type.
  remarks: "This method can be overridden by a derived class.  \n  \n Members include properties, methods, fields, events, and so on.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Instance` to include instance members in the search.  \n  \n-   Specify `BindingFlags.Static` to include static members in the search.  \n  \n-   Specify `BindingFlags.Public` to include public members in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n Valid values for <xref:System.Type.MemberType%2A> are defined in <xref:System.Reflection.MemberInfo>. If no such members are found, an empty array is returned.  \n  \n To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n If the current <xref:System.Type> represents a type parameter of a generic type or generic method, <xref:System.Type.FindMembers%2A> processes any members declared by the class constraint and the interface constraints of the type parameter."
  example:
  - "The following example finds all the members in a class that match the specified search criteria, and then displays the matched members.  \n  \n [!code-cpp[Type_FindMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_FindMembers/CPP/type_findmembers.cpp#1)]\n [!code-csharp[Type_FindMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_FindMembers/CS/type_findmembers.cs#1)]\n [!code-vb[Type_FindMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_FindMembers/VB/type_findmembers.vb#1)]"
  syntax:
    content: public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);
    parameters:
    - id: memberType
      type: System.Reflection.MemberTypes
      description: An object that indicates the type of member to search for.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: filter
      type: System.Reflection.MemberFilter
      description: The delegate that does the comparisons, returning `true` if the member currently being inspected matches the <code>filterCriteria</code> and `false` otherwise. You can use the `FilterAttribute`, `FilterName`, and `FilterNameIgnoreCase` delegates supplied by this class. The first uses the fields of `FieldAttributes`, `MethodAttributes`, and `MethodImplAttributes` as search criteria, and the other two delegates use `String` objects as the search criteria.
    - id: filterCriteria
      type: System.Object
      description: "The search criteria that determines whether a member is returned in the array of `MemberInfo` objects.  \n  \n The fields of `FieldAttributes`, `MethodAttributes`, and `MethodImplAttributes` can be used in conjunction with the `FilterAttribute` delegate supplied by this class."
    return:
      type: System.Reflection.MemberInfo[]
      description: "A filtered array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects of the specified member type.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.MemberInfo\"></xref>, if the current <xref href=\"System.Type\"></xref> does not have members of type <code>memberType</code> that match the filter criteria."
  overload: System.Type.FindMembers*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>filter</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.FullName
  commentId: P:System.Type.FullName
  id: FullName
  parent: System.Type
  langs:
  - csharp
  name: FullName
  nameWithType: Type.FullName
  fullName: Type.FullName
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the fully qualified name of the type, including its namespace but not its assembly.
  remarks: "For example, the fully qualified name of the <xref:System.String> type is `System.String`. Contrast this with the assembly-qualified name returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, which consists of the full name plus the full assembly name.  \n  \n If the current type represents a closed generic type, the type arguments in the string returned by the <xref:System.Type.FullName%2A>property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name. The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type.  \n  \n [!code-csharp[System.Type.FullName#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/fullnameex1.cs#2)]\n [!code-vb[System.Type.FullName#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/fullnameex1.vb#2)]  \n  \n This property returns `null` if:  \n  \n-   The current <xref:System.Type> object represents a type parameter of a generic type.  \n  \n     The following example retrieves the type parameter of the <xref:System.Nullable%601> type and attempts to display its <xref:System.Type.FullName%2A> property.  \n  \n     [!code-csharp[System.Type.FullName#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname3.cs#3)]\n     [!code-vb[System.Type.FullName#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/Fullname3.vb#3)]  \n  \n-   The current <xref:System.Type> object represents an array type, a pointer  type, or a `byref` type that is based on a generic type parameter.  \n  \n     The following example defines a generic type, `Generictype1<T>`, with three methods: `Display(T[])`, which is passed an array of type T; `HandleT(T)`, which is passed a T object; and `ChangeValue(ref T)`, which is passed a T object by reference. Because C# and Visual Basic do not allow us to define T as a pointer in the `HandleT` method, we have to call the <xref:System.Type.MakePointerType%2A> method on the <xref:System.Type> object that represents the method's parameter type to create a pointer to a generic type. The output from the example shows that in all three cases, the <xref:System.Type.FullName%2A> property is `null`.  \n  \n     [!code-csharp[System.Type.FullName#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname4.cs#4)]\n     [!code-vb[System.Type.FullName#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName4.vb#4)]  \n  \n-   The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`), but the type is not a generic type definition (that is, the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `false`  \n  \n     In the following example, `Derived<T>` inherits from `Base<T>`. The <xref:System.Type.BaseType%2A> property obtains the  <xref:System.Type> object that represents the base type of `Derived<T>`, and its <xref:System.Type.FullName%2A> property returns `null`.  \n  \n     [!code-csharp[System.Type.FullName#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.fullname/cs/Fullname5.cs#5)]\n     [!code-vb[System.Type.FullName#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.fullname/vb/FullName5.vb#5)]  \n  \n     To get a <xref:System.Type.FullName%2A> that is not `null`, you can use the <xref:System.Type.GetGenericTypeDefinition%2A> method to get the generic type definition, as the example illustrates.  \n  \n This property is read-only."
  example:
  - "The following example displays the full name of the specified type.  \n  \n [!code-cpp[TestFullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestFullName/CPP/TestFullName.cpp#1)]\n [!code-csharp[TestFullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestFullName/CS/testfullname.cs#1)]\n [!code-vb[TestFullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestFullName/VB/testfullname.vb#1)]  \n  \n The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.  \n  \n [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]\n [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]"
  syntax:
    content: public abstract string FullName { get; }
    return:
      type: System.String
      description: The fully qualified name of the type, including its namespace but not its assembly; or `null` if the current instance represents a generic type parameter, an array type, pointer type, or `byref` type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.
  overload: System.Type.FullName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GenericParameterAttributes
  commentId: P:System.Type.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Type
  langs:
  - csharp
  name: GenericParameterAttributes
  nameWithType: Type.GenericParameterAttributes
  fullName: Type.GenericParameterAttributes
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a combination of <xref href="System.Reflection.GenericParameterAttributes"></xref> flags that describe the covariance and special constraints of the current generic type parameter.
  remarks: "The value of this property contains flags that describe whether the current generic type parameter is covariant, and flags that describe any special constraints. Use the <xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName> value to select the covariance flags, and use the <xref:System.Reflection.GenericParameterAttributes?displayProperty=fullName> value to select the constraint flags.  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks."
  example:
  - "The following code example defines a generic type `Test` with two type parameters that have different constraints. When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.  \n  \n [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]\n [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]\n [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]"
  syntax:
    content: public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }
    return:
      type: System.Reflection.GenericParameterAttributes
      description: A bitwise combination of <xref href="System.Reflection.GenericParameterAttributes"></xref> values that describes the covariance and special constraints of the current generic type parameter.
  overload: System.Type.GenericParameterAttributes*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current <xref href="System.Type"></xref> object is not a generic type parameter. That is, the <xref href="System.Type.IsGenericParameter"></xref> property returns `false`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GenericParameterPosition
  commentId: P:System.Type.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Type
  langs:
  - csharp
  name: GenericParameterPosition
  nameWithType: Type.GenericParameterPosition
  fullName: Type.GenericParameterPosition
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <xref href="System.Type"></xref> object represents a type parameter of a generic type or a generic method.
  remarks: "The <xref:System.Type.GenericParameterPosition%2A> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined. The <xref:System.Type.DeclaringType%2A> and <xref:System.Type.DeclaringMethod%2A> properties identify the generic type or method definition:  \n  \n-   If the <xref:System.Type.DeclaringMethod%2A> property returns a <xref:System.Reflection.MethodInfo>, that <xref:System.Reflection.MethodInfo> represents a generic method definition, and the current <xref:System.Type> object represents a type parameter of that generic method definition.  \n  \n-   If the <xref:System.Type.DeclaringMethod%2A> property returns `null`, then the <xref:System.Type.DeclaringType%2A> property always returns a <xref:System.Type> object representing a generic type definition, and the current <xref:System.Type> object represents a type parameter of that generic type definition.  \n  \n To provide the correct context for the value of the <xref:System.Type.GenericParameterPosition%2A> property, it is necessary to identify the generic type or method a type parameter belongs to. For example, consider the return value of the generic method `GetSomething` in the following code:  \n  \n [!code-cpp[System.Type.GenericParameterPosition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.genericparameterposition/cpp/remarks.cpp#1)]\n [!code-csharp[System.Type.GenericParameterPosition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.genericparameterposition/cs/remarks.cs#1)]\n [!code-vb[System.Type.GenericParameterPosition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.genericparameterposition/vb/remarks.vb#1)]  \n  \n The type returned by `GetSomething` depends on the type arguments supplied to class `A` and to `GetSomething` itself. You can obtain a <xref:System.Reflection.MethodInfo> for `GetSomething`, and from that you can obtain the return type. When you examine the type parameters of the return type, <xref:System.Type.GenericParameterPosition%2A> returns 0 for both. The position of `V` is 0 because `V` is the first type parameter in the type parameter list for class `A`. The position of `X` is 0 because `X` is the first type parameter in the type parameter list for `GetSomething`.  \n  \n> [!NOTE]\n>  Calling the <xref:System.Type.GenericParameterPosition%2A> property causes an exception if the current <xref:System.Type> does not represent a type parameter. When you examine the type arguments of an open constructed type, use the <xref:System.Type.IsGenericParameter%2A> property to tell which are type parameters and which are types. The <xref:System.Type.IsGenericParameter%2A> property returns `true` for a type parameter; you can then use the <xref:System.Type.GenericParameterPosition%2A> method to obtain its position and use the <xref:System.Type.DeclaringMethod%2A> and <xref:System.Type.DeclaringType%2A> properties to determine the generic method or type definition that defines it."
  example:
  - "The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class. The derived class's base class has two type arguments: the first is <xref:System.Int32>, and the second is a type parameter of the derived type. The example displays information about these generic classes, including the positions reported by the <xref:System.Type.GenericParameterPosition%2A> property.  \n  \n [!code-cpp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CPP/source.cpp#1)]\n [!code-csharp[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/CS/source.cs#1)]\n [!code-vb[System.Type.HasUnboundGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.HasUnboundGenericParameters/VB/source.vb#1)]"
  syntax:
    content: public virtual int GenericParameterPosition { get; }
    return:
      type: System.Int32
      description: The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.
  overload: System.Type.GenericParameterPosition*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current type does not represent a type parameter. That is, <xref href="System.Type.IsGenericParameter"></xref> returns `false`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GenericTypeArguments
  commentId: P:System.Type.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Type
  langs:
  - csharp
  name: GenericTypeArguments
  nameWithType: Type.GenericTypeArguments
  fullName: Type.GenericTypeArguments
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets an array of the generic type arguments for this type.
  remarks: "This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type. If the current type is a generic type definition, this property returns an empty array.  \n  \n> [!NOTE]\n>  If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type.  \n  \n To get the generic type parameters of a type that represents a generic type definition, use the <xref:System.Reflection.TypeInfo.GenericTypeParameters%2A?displayProperty=fullName> property. To get a <xref:System.Reflection.TypeInfo> object for the current <xref:System.Type> object, use the <xref:System.Reflection.IntrospectionExtensions.GetTypeInfo%2A?displayProperty=fullName> extension method."
  syntax:
    content: public virtual Type[] GenericTypeArguments { get; }
    return:
      type: System.Type[]
      description: An array of the generic type arguments for this type.
  overload: System.Type.GenericTypeArguments*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetArrayRank
  commentId: M:System.Type.GetArrayRank
  id: GetArrayRank
  parent: System.Type
  langs:
  - csharp
  name: GetArrayRank()
  nameWithType: Type.GetArrayRank()
  fullName: Type.GetArrayRank()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the number of dimensions in an array.
  remarks: ''
  example:
  - "The following example displays the number of dimensions in an array.  \n  \n [!code-cpp[Type_GetArrayRank#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetArrayRank/CPP/type_getarrayrank.cpp#1)]\n [!code-csharp[Type_GetArrayRank#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetArrayRank/CS/type_getarrayrank.cs#1)]\n [!code-vb[Type_GetArrayRank#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetArrayRank/VB/type_getarrayrank.vb#1)]"
  syntax:
    content: public virtual int GetArrayRank ();
    parameters: []
    return:
      type: System.Int32
      description: An integer that contains the number of dimensions in the current type.
  overload: System.Type.GetArrayRank*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current type is not an array.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetAttributeFlagsImpl
  commentId: M:System.Type.GetAttributeFlagsImpl
  id: GetAttributeFlagsImpl
  parent: System.Type
  langs:
  - csharp
  name: GetAttributeFlagsImpl()
  nameWithType: Type.GetAttributeFlagsImpl()
  fullName: Type.GetAttributeFlagsImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, implements the <xref href="System.Type.Attributes"></xref> property and gets a bitmask indicating the attributes associated with the <xref href="System.Type"></xref>.
  syntax:
    content: protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
      description: A <xref href="System.Reflection.TypeAttributes"></xref> object representing the attribute set of the <xref href="System.Type"></xref>.
  overload: System.Type.GetAttributeFlagsImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetConstructor(System.Type[])
  commentId: M:System.Type.GetConstructor(System.Type[])
  id: GetConstructor(System.Type[])
  parent: System.Type
  langs:
  - csharp
  name: GetConstructor(Type[])
  nameWithType: Type.GetConstructor(Type[])
  fullName: Type.GetConstructor(Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for a public instance constructor whose parameters match the types in the specified array.
  remarks: "This method overload looks for public instance constructors and cannot be used to obtain a class initializer (.cctor). To get a class initializer, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n If the requested constructor is non-public, this method returns `null`.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`."
  example:
  - "The following example obtains the type of `MyClass`, gets the <xref:System.Reflection.ConstructorInfo> object, and displays the constructor signature.  \n  \n [!code-cpp[Type_GetConstructor#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor/CPP/type_getconstructor.cpp#1)]\n [!code-csharp[Type_GetConstructor#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor/CS/type_getconstructor.cs#1)]\n [!code-vb[Type_GetConstructor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor/VB/type_getconstructor.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public System.Reflection.ConstructorInfo GetConstructor (Type[] types);
    parameters:
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the desired constructor.  \n  \n -or-  \n  \n An empty array of <xref href=\"System.Type\"></xref> objects, to get a constructor that takes no parameters. Such an empty array is provided by the `static` field <xref href=\"System.Type.EmptyTypes\"></xref>."
    return:
      type: System.Reflection.ConstructorInfo
      description: An object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, `null`.
  overload: System.Type.GetConstructor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>types</code> is multidimensional.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])
  nameWithType: Type.GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])
  fullName: Type.GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  remarks: "If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match. If the `binder` is unable to select a match, then `null` is returned.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public constructors in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`."
  example:
  - "The following program obtains the type of `MyClass1` class, gets the <xref:System.Reflection.ConstructorInfo> object matching the specified binding flags, and displays the signature of the constructor.  \n  \n [!code-cpp[Type_GetConstructor2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor2/CPP/type_getconstructor2.cpp#1)]\n [!code-csharp[Type_GetConstructor2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor2/CS/type_getconstructor2.cs#1)]\n [!code-vb[Type_GetConstructor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor2/VB/type_getconstructor2.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the constructor to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.  \n  \n -or-  \n  \n <xref href=\"System.Type.EmptyTypes\"></xref>."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the parameter type array. The default binder does not process this parameter.
    return:
      type: System.Reflection.ConstructorInfo
      description: A <xref href="System.Reflection.ConstructorInfo"></xref> object representing the constructor that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetConstructor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional.  \n  \n -or-  \n  \n <code>types</code> and <code>modifiers</code> do not have the same length."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  remarks: "Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match. If the `binder` is unable to select a match, then `null` is returned.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public constructors in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n To get the class initializer (.cctor) using this method, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> with the type parameters replaced by the appropriate type arguments. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method always returns `null`."
  example:
  - "The following example obtains the type of `MyClass1`, gets the <xref:System.Reflection.ConstructorInfo> object that matches the specified binding flags, and displays the constructor signature.  \n  \n [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]\n [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]\n [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the constructor to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. The default binder does not process this parameter.
    return:
      type: System.Reflection.ConstructorInfo
      description: An object representing the constructor that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetConstructor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional.  \n  \n -or-  \n  \n <code>types</code> and <code>modifiers</code> do not have the same length."
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  remarks: "Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match. If the `binder` is unable to select a match, then `null` is returned.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public constructors in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n This method implements <xref:System.Type.GetConstructor%2A>."
  syntax:
    content: protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the constructor to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. The default binder does not process this parameter.
    return:
      type: System.Reflection.ConstructorInfo
      description: A <xref href="System.Reflection.ConstructorInfo"></xref> object representing the constructor that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetConstructorImpl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional.  \n  \n -or-  \n  \n <code>types</code> and <code>modifiers</code> do not have the same length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current type is a <xref href="System.Reflection.Emit.TypeBuilder"></xref> or <xref href="System.Reflection.Emit.GenericTypeParameterBuilder"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetConstructors
  commentId: M:System.Type.GetConstructors
  id: GetConstructors
  parent: System.Type
  langs:
  - csharp
  name: GetConstructors()
  nameWithType: Type.GetConstructors()
  fullName: Type.GetConstructors()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns all the public constructors defined for the current <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order. Your code must not depend on the order in which constructors are returned, because that order varies.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n This method overload calls the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). It will not find class initializers (.cctor). To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments. For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).  \n  \n If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array."
  example:
  - "This example shows the output of the <xref:System.Type.GetConstructors%2A> overload from a class that has two instance constructors and one static constructor.  \n  \n [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]\n [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]\n [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  \n  \n The output of this code is:  \n  \n 2  \n  \n False  \n  \n False  \n  \n Because the <xref:System.Type.GetConstructors> overload uses only <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.  \n  \n To find static constructors, use the <xref:System.Type.GetConstructors%28System.Reflection.BindingFlags%29> overload, and pass the combination (logical `OR`) of <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, as shown in the following code example:  \n  \n [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]\n [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  \n  \n Now the output is:  \n  \n 3  \n  \n False  \n  \n True  \n  \n False"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public System.Reflection.ConstructorInfo[] GetConstructors ();
    parameters: []
    return:
      type: System.Reflection.ConstructorInfo[]
      description: An array of <xref href="System.Reflection.ConstructorInfo"></xref> objects representing all the public instance constructors defined for the current <xref href="System.Type"></xref>, but not including the type initializer (static constructor). If no public instance constructors are defined for the current <xref href="System.Type"></xref>, or if the current <xref href="System.Type"></xref> represents a type parameter in the definition of a generic type or generic method, an empty array of type <xref href="System.Reflection.ConstructorInfo"></xref> is returned.
  overload: System.Type.GetConstructors*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetConstructors(System.Reflection.BindingFlags)
  commentId: M:System.Type.GetConstructors(System.Reflection.BindingFlags)
  id: GetConstructors(System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetConstructors(BindingFlags)
  nameWithType: Type.GetConstructors(BindingFlags)
  fullName: Type.GetConstructors(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the constructors defined for the current <xref href="System.Type"></xref>, using the specified `BindingFlags`.
  remarks: "The <xref:System.Type.GetConstructors%2A> method does not return constructors in a particular order, such as declaration order. Your code must not depend on the order in which constructors are returned, because that order varies.  \n  \n `bindingAttr` can be used to specify whether to return only public constructors or both public and non-public constructors.  \n  \n If an exact match does not exist, the `binder` will attempt to coerce the parameter types specified in the `types` array in order to select a match. If the `binder` is unable to select a match, then `null` is returned.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which constructors to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public constructors in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public constructors (that is, private, internal, and protected constructors) in the search. Constructors of base classes are not returned.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.ConstructorInfo> objects with the type parameters replaced by the appropriate type arguments. For example, if class `C<T>` has a constructor `C(T t1)` (`Sub New(ByVal t1 As T)` in Visual Basic), calling <xref:System.Type.GetConstructors%2A> on `C<int>` returns a <xref:System.Reflection.ConstructorInfo> that represents `C(int t1)` in C# (`Sub New(ByVal t1 As Integer)` in Visual Basic).  \n  \n If the current <xref:System.Type> represents a generic type parameter, the <xref:System.Type.GetConstructors%2A> method returns an empty array."
  example:
  - "This example shows the output of the <xref:System.Type.GetConstructors> overload from a class that has two instance constructors and one static constructor.  \n  \n [!code-cpp[Classic Type.GetConstructors Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source1.cpp#1)]\n [!code-csharp[Classic Type.GetConstructors Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source1.cs#1)]\n [!code-vb[Classic Type.GetConstructors Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source1.vb#1)]  \n  \n The output of this code is:  \n  \n 2  \n  \n False  \n  \n False  \n  \n Because the <xref:System.Type.GetConstructors%2A> overload uses only <xref:System.Reflection.BindingFlags.Public> and <xref:System.Reflection.BindingFlags.Instance>, the static constructor is neither counted by the `for` expression nor evaluated by `IsStatic`.  \n  \n To find static constructors, use the <xref:System.Type.GetConstructors%2A> overload, and pass it the combination (logical OR) of <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, <xref:System.Reflection.BindingFlags?displayProperty=fullName>, as shown in the following code example:  \n  \n [!code-cpp[Classic Type.GetConstructors Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CPP/source2.cpp#2)]\n [!code-csharp[Classic Type.GetConstructors Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/CS/source2.cs#2)]\n [!code-vb[Classic Type.GetConstructors Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.GetConstructors Example/VB/source2.vb#2)]  \n  \n Now the output is:  \n  \n 3  \n  \n False  \n  \n True  \n  \n False"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.ConstructorInfo[]
      description: An array of <xref href="System.Reflection.ConstructorInfo"></xref> objects representing all constructors defined for the current <xref href="System.Type"></xref> that match the specified binding constraints, including the type initializer if it is defined. Returns an empty array of type <xref href="System.Reflection.ConstructorInfo"></xref> if no constructors are defined for the current <xref href="System.Type"></xref>, if none of the defined constructors match the binding constraints, or if the current <xref href="System.Type"></xref> represents a type parameter in the definition of a generic type or generic method.
  overload: System.Type.GetConstructors*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetDefaultMembers
  commentId: M:System.Type.GetDefaultMembers
  id: GetDefaultMembers
  parent: System.Type
  langs:
  - csharp
  name: GetDefaultMembers()
  nameWithType: Type.GetDefaultMembers()
  fullName: Type.GetDefaultMembers()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the members defined for the current <xref href="System.Type"></xref> whose <xref href="System.Reflection.DefaultMemberAttribute"></xref> is set.
  remarks: "The <xref:System.Type.GetDefaultMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  \n  \n This method can be overridden by a derived class.  \n  \n Members include properties, methods, fields, events, and so on.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments. For example, if class `C<T>` has a property `P` that returns `T`, calling <xref:System.Type.GetDefaultMembers%2A> on `C<int>` returns `int P` in C# (`Property P As Integer` in Visual Basic).  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint."
  example:
  - "The following example obtains the default member information of `MyClass` and displays the default members.  \n  \n [!code-cpp[Type_GetDefaultMembers#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetDefaultMembers/CPP/type_getdefaultmembers.cpp#1)]\n [!code-csharp[Type_GetDefaultMembers#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetDefaultMembers/CS/type_getdefaultmembers.cs#1)]\n [!code-vb[Type_GetDefaultMembers#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetDefaultMembers/VB/type_getdefaultmembers.vb#1)]"
  syntax:
    content: public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo[]
      description: "An array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing all default members of the current <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.MemberInfo\"></xref>, if the current <xref href=\"System.Type\"></xref> does not have default members."
  overload: System.Type.GetDefaultMembers*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetElementType
  commentId: M:System.Type.GetElementType
  id: GetElementType
  parent: System.Type
  langs:
  - csharp
  name: GetElementType()
  nameWithType: Type.GetElementType()
  fullName: Type.GetElementType()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: When overridden in a derived class, returns the <xref href="System.Type"></xref> of the object encompassed or referred to by the current array, pointer or reference type.
  remarks: This method returns `null` for the <xref:System.Array> class.
  example:
  - "The following example demonstrates using the `GetElementType` method.  \n  \n [!code-cpp[TestGetElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestGetElementType/CPP/TestGetElementType.cpp#1)]\n [!code-csharp[TestGetElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestGetElementType/CS/testgetelementtype.cs#1)]\n [!code-vb[TestGetElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestGetElementType/VB/testgetelementtype.vb#1)]"
  syntax:
    content: public abstract Type GetElementType ();
    parameters: []
    return:
      type: System.Type
      description: The <xref href="System.Type"></xref> of the object encompassed or referred to by the current array, pointer, or reference type, or `null` if the current <xref href="System.Type"></xref> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.
  overload: System.Type.GetElementType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEnumName(System.Object)
  commentId: M:System.Type.GetEnumName(System.Object)
  id: GetEnumName(System.Object)
  parent: System.Type
  langs:
  - csharp
  name: GetEnumName(Object)
  nameWithType: Type.GetEnumName(Object)
  fullName: Type.GetEnumName(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns the name of the constant that has the specified value, for the current enumeration type.
  syntax:
    content: public virtual string GetEnumName (object value);
    parameters:
    - id: value
      type: System.Object
      description: The value whose name is to be retrieved.
    return:
      type: System.String
      description: The name of the member of the current enumeration type that has the specified value, or `null` if no such constant is found.
  overload: System.Type.GetEnumName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The current type is not an enumeration.  \n  \n -or-  \n  \n <code>value</code> is neither of the current type nor does it have the same underlying type as the current type."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEnumNames
  commentId: M:System.Type.GetEnumNames
  id: GetEnumNames
  parent: System.Type
  langs:
  - csharp
  name: GetEnumNames()
  nameWithType: Type.GetEnumNames()
  fullName: Type.GetEnumNames()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns the names of the members of the current enumeration type.
  remarks: The elements of the return value array are sorted by the binary values (that is, the unsigned values) of the enumerated constants. If the array contains enumerated constants with the same value, the order of their corresponding names is unspecified.
  syntax:
    content: public virtual string[] GetEnumNames ();
    parameters: []
    return:
      type: System.String[]
      description: An array that contains the names of the members of the enumeration.
  overload: System.Type.GetEnumNames*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current type is not an enumeration.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEnumUnderlyingType
  commentId: M:System.Type.GetEnumUnderlyingType
  id: GetEnumUnderlyingType
  parent: System.Type
  langs:
  - csharp
  name: GetEnumUnderlyingType()
  nameWithType: Type.GetEnumUnderlyingType()
  fullName: Type.GetEnumUnderlyingType()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns the underlying type of the current enumeration type.
  remarks: By default, the underlying type of an enumeration in C# and Visual Basic is <xref:System.Int32>. Other integer types can be specified.
  syntax:
    content: public virtual Type GetEnumUnderlyingType ();
    parameters: []
    return:
      type: System.Type
      description: The underlying type of the current enumeration.
  overload: System.Type.GetEnumUnderlyingType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The current type is not an enumeration.  \n  \n -or-  \n  \n The enumeration type is not valid, because it contains more than one instance field."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEnumValues
  commentId: M:System.Type.GetEnumValues
  id: GetEnumValues
  parent: System.Type
  langs:
  - csharp
  name: GetEnumValues()
  nameWithType: Type.GetEnumValues()
  fullName: Type.GetEnumValues()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns an array of the values of the constants in the current enumeration type.
  syntax:
    content: public virtual Array GetEnumValues ();
    parameters: []
    return:
      type: System.Array
      description: An array that contains the values. The elements of the array are sorted by the binary values (that is, the unsigned values) of the enumeration constants.
  overload: System.Type.GetEnumValues*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current type is not an enumeration.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEvent(System.String)
  commentId: M:System.Type.GetEvent(System.String)
  id: GetEvent(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetEvent(String)
  nameWithType: Type.GetEvent(String)
  fullName: Type.GetEvent(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns the <xref href="System.Reflection.EventInfo"></xref> object representing the specified public event.
  remarks: "An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The search for `name` is case-sensitive. The search includes public static and public instance events.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint."
  example:
  - "The following example creates an <xref:System.Reflection.EventInfo> object and gets the event for a button class for the specified event.  \n  \n [!code-cpp[Type_GetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetEvent/CPP/type_getevent.cpp#1)]\n [!code-csharp[Type_GetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetEvent/CS/type_getevent.cs#1)]\n [!code-vb[Type_GetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetEvent/VB/type_getevent.vb#1)]"
  syntax:
    content: public System.Reflection.EventInfo GetEvent (string name);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of an event that is declared or inherited by the current <xref href="System.Type"></xref>.
    return:
      type: System.Reflection.EventInfo
      description: The object representing the specified public event that is declared or inherited by the current <xref href="System.Type"></xref>, if found; otherwise, `null`.
  overload: System.Type.GetEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEvent(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetEvent(String, BindingFlags)
  nameWithType: Type.GetEvent(String, BindingFlags)
  fullName: Type.GetEvent(String, BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, returns the <xref href="System.Reflection.EventInfo"></xref> object representing the specified event, using the specified binding constraints.
  remarks: "The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public events in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint."
  example:
  - "The following code example uses the <xref:System.Type.GetEvent%28System.String%2CSystem.Reflection.BindingFlags%29> method to search a type for a public or non-public event named \"Click\" that is not `static` (`Shared` in Visual Basic).  \n  \n [!code-cpp[Type_GetEvent1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevent1/CPP/type_getevent1.cpp#1)]\n [!code-csharp[Type_GetEvent1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevent1/CS/type_getevent1.cs#1)]\n [!code-vb[Type_GetEvent1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevent1/VB/type_getevent1.vb#1)]"
  syntax:
    content: public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of an event which is declared or inherited by the current <xref href="System.Type"></xref>.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.EventInfo
      description: The object representing the specified event that is declared or inherited by the current <xref href="System.Type"></xref>, if found; otherwise, `null`.
  overload: System.Type.GetEvent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEvents
  commentId: M:System.Type.GetEvents
  id: GetEvents
  parent: System.Type
  langs:
  - csharp
  name: GetEvents()
  nameWithType: Type.GetEvents()
  fullName: Type.GetEvents()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns all the public events that are declared or inherited by the current <xref href="System.Type"></xref>.
  remarks: "An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which events are returned, because that order varies.  \n  \n This method can be overridden by a derived class.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint."
  example:
  - "The following example obtains an array of <xref:System.Reflection.EventInfo> objects, gets all the events for a `Button` class, and displays the event names. To compile the Visual Basic example, use the following command line:  \n  \n `vbc type_getevents1.vb /r:System.Windows.Forms.dll /r:System.dll`  \n  \n [!code-cpp[Type_GetEvents1#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents1/CPP/type_getevents1.cpp#1)]\n [!code-csharp[Type_GetEvents1#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents1/CS/type_getevents1.cs#1)]\n [!code-vb[Type_GetEvents1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents1/VB/type_getevents1.vb#1)]"
  syntax:
    content: public virtual System.Reflection.EventInfo[] GetEvents ();
    parameters: []
    return:
      type: System.Reflection.EventInfo[]
      description: "An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing all the public events which are declared or inherited by the current <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.EventInfo\"></xref>, if the current <xref href=\"System.Type\"></xref> does not have public events."
  overload: System.Type.GetEvents*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetEvents(System.Reflection.BindingFlags)
  commentId: M:System.Type.GetEvents(System.Reflection.BindingFlags)
  id: GetEvents(System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetEvents(BindingFlags)
  nameWithType: Type.GetEvents(BindingFlags)
  fullName: Type.GetEvents(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for events that are declared or inherited by the current <xref href="System.Type"></xref>, using the specified binding constraints.
  remarks: "The <xref:System.Type.GetEvents%2A> method does not return events in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which events are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which events to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public events in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public events (that is, private, internal, and protected events) in the search. Only protected and internal events on base classes are returned; private events on base classes are not returned.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.DeclaredOnly` to search only the events declared on the <xref:System.Type>, not events that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n An event is considered public to reflection if it has at least one method or accessor that is public. Otherwise the event is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.EventInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the events of the class constraint."
  example:
  - "The following example obtains an array of <xref:System.Reflection.EventInfo> objects that match the specified binding flags, gets all the events for a `Button` class, and displays the event names. To compile the Visual Basic example, use the following command line:  \n  \n `vbc type_getevents2.vb /r:System.Windows.Forms.dll /r:System.dll`  \n  \n [!code-cpp[Type_GetEvents2#1](~/samples/snippets/cpp/VS_Snippets_CLR/type_getevents2/CPP/type_getevents2.cpp#1)]\n [!code-csharp[Type_GetEvents2#1](~/samples/snippets/csharp/VS_Snippets_CLR/type_getevents2/CS/type_getevents2.cs#1)]\n [!code-vb[Type_GetEvents2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/type_getevents2/VB/type_getevents2.vb#1)]"
  syntax:
    content: public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.EventInfo[]
      description: "An array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing all events that are declared or inherited by the current <xref href=\"System.Type\"></xref> that match the specified binding constraints.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.EventInfo\"></xref>, if the current <xref href=\"System.Type\"></xref> does not have events, or if none of the events match the binding constraints."
  overload: System.Type.GetEvents*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetField(System.String)
  commentId: M:System.Type.GetField(System.String)
  id: GetField(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetField(String)
  nameWithType: Type.GetField(String)
  fullName: Type.GetField(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the public field with the specified name.
  remarks: "The search for `name` is case-sensitive. The search includes public static and public instance fields.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint."
  example:
  - "The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field, and displays the value of the field.  \n  \n [!code-cpp[Type_GetField#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#1)]\n [!code-csharp[Type_GetField#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#1)]\n [!code-vb[Type_GetField#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#1)]"
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the data field to get.
    return:
      type: System.Reflection.FieldInfo
      description: An object representing the public field with the specified name, if found; otherwise, `null`.
  overload: System.Type.GetField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This <xref href="System.Type"></xref> object is a <xref href="System.Reflection.Emit.TypeBuilder"></xref> whose <xref href="System.Reflection.Emit.TypeBuilder.CreateType"></xref> method has not yet been called.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetField(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Type.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetField(String, BindingFlags)
  nameWithType: Type.GetField(String, BindingFlags)
  fullName: Type.GetField(String, BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified field, using the specified binding constraints.
  remarks: "The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public fields in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the fields of the class constraint."
  example:
  - "The following example gets the `Type` object for the specified class, obtains the <xref:System.Reflection.FieldInfo> object for the field that matches the specified binding flags, and displays the value of the field.  \n  \n [!code-cpp[Type_GetField#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetField/CPP/type_getfield.cpp#2)]\n [!code-csharp[Type_GetField#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetField/CS/type_getfield.cs#2)]\n [!code-vb[Type_GetField#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetField/VB/type_getfield.vb#2)]"
  syntax:
    content: public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the data field to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.FieldInfo
      description: An object representing the field that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetField*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetFields
  commentId: M:System.Type.GetFields
  id: GetFields
  parent: System.Type
  langs:
  - csharp
  name: GetFields()
  nameWithType: Type.GetFields()
  fullName: Type.GetFields()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns all the public fields of the current <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order varies.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint."
  example:
  - "The following example shows a use of the `GetFields()` method.  \n  \n [!code-cpp[FieldInfo_IsSpecialName#1](~/samples/snippets/cpp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CPP/fieldinfo_isspecialname.cpp#1)]\n [!code-csharp[FieldInfo_IsSpecialName#1](~/samples/snippets/csharp/VS_Snippets_CLR/FieldInfo_IsSpecialName/CS/fieldinfo_isspecialname.cs#1)]\n [!code-vb[FieldInfo_IsSpecialName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/FieldInfo_IsSpecialName/VB/fieldinfo_isspecialname.vb#1)]"
  syntax:
    content: public System.Reflection.FieldInfo[] GetFields ();
    parameters: []
    return:
      type: System.Reflection.FieldInfo[]
      description: "An array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing all the public fields defined for the current <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.FieldInfo\"></xref>, if no public fields are defined for the current <xref href=\"System.Type\"></xref>."
  overload: System.Type.GetFields*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetFields(System.Reflection.BindingFlags)
  commentId: M:System.Type.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: Type.GetFields(BindingFlags)
  fullName: Type.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the fields defined for the current <xref href="System.Type"></xref>, using the specified binding constraints.
  remarks: "The <xref:System.Type.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which fields to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public fields in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public fields (that is, private, internal, and protected fields) in the search. Only protected and internal fields on base classes are returned; private fields on base classes are not returned.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.DeclaredOnly` to search only the fields declared on the <xref:System.Type>, not fields that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.FieldInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the public fields of the class constraint."
  example:
  - "The following example shows a use of the `GetFields(BindingFlags)` method.  \n  \n [!code-cpp[Classic MethodBase.Attributes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CPP/source.cpp#1)]\n [!code-csharp[Classic MethodBase.Attributes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/CS/source.cs#1)]\n [!code-vb[Classic MethodBase.Attributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MethodBase.Attributes Example/VB/source.vb#1)]"
  syntax:
    content: public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.FieldInfo[]
      description: "An array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing all fields defined for the current <xref href=\"System.Type\"></xref> that match the specified binding constraints.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.FieldInfo\"></xref>, if no fields are defined for the current <xref href=\"System.Type\"></xref>, or if none of the defined fields match the binding constraints."
  overload: System.Type.GetFields*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetGenericArguments
  commentId: M:System.Type.GetGenericArguments
  id: GetGenericArguments
  parent: System.Type
  langs:
  - csharp
  name: GetGenericArguments()
  nameWithType: Type.GetGenericArguments()
  fullName: Type.GetGenericArguments()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns an array of <xref href="System.Type"></xref> objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.
  remarks: "The array elements are returned in the order in which they appear in the list of type arguments for the generic type.  \n  \n-   If the current type is a closed constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `false`), the array returned by the <xref:System.Type.GetGenericArguments%2A> method contains the types that have been assigned to the generic type parameters of the generic type definition.  \n  \n-   If the current type is a generic type definition, the array contains the type parameters.  \n  \n-   If the current type is an open constructed type (that is, the <xref:System.Type.ContainsGenericParameters%2A> property returns `true`) in which specific types have not been assigned to all of the type parameters and type parameters of enclosing generic types or methods, the array contains both types and type parameters. Use the <xref:System.Type.IsGenericParameter%2A> property to tell them apart. For a demonstration of this scenario, see the code example for the <xref:System.Type.ContainsGenericParameters%2A> property.  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks."
  example:
  - "The following code example uses the <xref:System.Type.GetGenericArguments%2A> method to display the type arguments of a constructed type and the type parameters of its generic type definition.  \n  \n This code example is part of a larger example provided for the <xref:System.Type.IsGenericTypeDefinition%2A> property. See the larger example for sample output.  \n  \n [!code-cpp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#2)]\n [!code-csharp[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#2)]\n [!code-vb[System.Type.IsGenericTypeDefinition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#2)]"
  syntax:
    content: public virtual Type[] GetGenericArguments ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects that represent the type arguments of a generic type. Returns an empty array if the current type is not a generic type.
  overload: System.Type.GetGenericArguments*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetGenericParameterConstraints
  commentId: M:System.Type.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Type
  langs:
  - csharp
  name: GetGenericParameterConstraints()
  nameWithType: Type.GetGenericParameterConstraints()
  fullName: Type.GetGenericParameterConstraints()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns an array of <xref href="System.Type"></xref> objects that represent the constraints on the current generic type parameter.
  remarks: "Each constraint on a generic type parameter is expressed as a <xref:System.Type> object. Use the <xref:System.Type.IsClass%2A> property to determine whether a constraint is the base class constraint; if the property returns `false`, the constraint is an interface constraint. If a type parameter has no class constraint and no interface constraints, an empty array is returned.  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks."
  example:
  - "The following code example defines a generic type `Test` with two type parameters that have different constraints. When the program executes, the constraints are examined using the <xref:System.Type.GenericParameterAttributes%2A> property and the <xref:System.Type.GetGenericParameterConstraints%2A> method.  \n  \n [!code-cpp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CPP/source.cpp#1)]\n [!code-csharp[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/CS/source.cs#1)]\n [!code-vb[System.Type.GetGenericParameterConstraints#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericParameterConstraints/VB/source.vb#1)]"
  syntax:
    content: public virtual Type[] GetGenericParameterConstraints ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects that represent the constraints on the current generic type parameter.
  overload: System.Type.GetGenericParameterConstraints*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current <xref href="System.Type"></xref> object is not a generic type parameter. That is, the <xref href="System.Type.IsGenericParameter"></xref> property returns `false`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetGenericTypeDefinition
  commentId: M:System.Type.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Type
  langs:
  - csharp
  name: GetGenericTypeDefinition()
  nameWithType: Type.GetGenericTypeDefinition()
  fullName: Type.GetGenericTypeDefinition()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a <xref href="System.Type"></xref> object that represents a generic type definition from which the current generic type can be constructed.
  remarks: "A generic type definition is a template from which other types can be constructed. For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic). Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the generic type definition.  \n  \n If two constructed types are created from the same generic type definition, using the same type arguments, the <xref:System.Type.GetGenericTypeDefinition%2A> method returns the same <xref:System.Type> object for both types.  \n  \n If you call the <xref:System.Type.GetGenericTypeDefinition%2A> method on a <xref:System.Type> object that already represents a generic type definition, it returns the current <xref:System.Type>.  \n  \n> [!IMPORTANT]\n>  An array of generic types is not itself generic. In the C# code `A<int>[] v;` or the Visual Basic code `Dim v() As A(Of Integer)`, the type of variable `v` is not generic. Use <xref:System.Type.IsGenericType%2A> to determine whether a type is generic before calling <xref:System.Type.GetGenericTypeDefinition%2A>.  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks."
  example:
  - "The following code example creates an instance of a constructed type by using ordinary instance creation and then uses the <xref:System.Type.GetType%2A> and <xref:System.Type.GetGenericTypeDefinition%2A> methods to retrieve the constructed type and the generic type definition. This example uses the generic <xref:System.Collections.Generic.Dictionary%602> type; the constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.  \n  \n [!code-cpp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CPP/source.cpp#1)]\n [!code-csharp[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/CS/source.cs#1)]\n [!code-vb[System.Type.GetGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.GetGenericTypeDefinition/VB/source.vb#1)]"
  syntax:
    content: public virtual Type GetGenericTypeDefinition ();
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing a generic type from which the current type can be constructed.
  overload: System.Type.GetGenericTypeDefinition*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current type is not a generic type.  That is, <xref href="System.Type.IsGenericType"></xref> returns `false`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetHashCode
  commentId: M:System.Type.GetHashCode
  id: GetHashCode
  parent: System.Type
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Type.GetHashCode()
  fullName: Type.GetHashCode()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns the hash code for this instance.
  remarks: This method overrides <xref:System.Object.GetHashCode%2A?displayProperty=fullName>.
  example:
  - "The following example displays the hash code of the `System.Windows.Forms.Button` class.  \n  \n [!code-cpp[Type_GetHashCode_GetFields#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CPP/type_gethashcode_getfields.cpp#1)]\n [!code-csharp[Type_GetHashCode_GetFields#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetHashCode_GetFields/CS/type_gethashcode_getfields.cs#1)]\n [!code-vb[Type_GetHashCode_GetFields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetHashCode_GetFields/VB/type_gethashcode_getfields.vb#1)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The hash code for this instance.
  overload: System.Type.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetInterface(System.String)
  commentId: M:System.Type.GetInterface(System.String)
  id: GetInterface(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetInterface(String)
  nameWithType: Type.GetInterface(String)
  fullName: Type.GetInterface(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the interface with the specified name.
  remarks: "The search for `name` is case-sensitive.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.  \n  \n> [!NOTE]\n>  For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\\`) and the number of type parameters. This is true for both generic interface definitions and constructed generic interfaces. For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for ``\"IExample`1\"``."
  example:
  - "The following code example uses the <xref:System.Type.GetInterface%28System.String%29> method to search the <xref:System.Collections.Hashtable> class for the <xref:System.Runtime.Serialization.IDeserializationCallback> interface, and lists the methods of the interface.  \n  \n The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.  \n  \n [!code-cpp[Type_GetInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#1)]\n [!code-csharp[Type_GetInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#1)]\n [!code-vb[Type_GetInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#1)]"
  syntax:
    content: public Type GetInterface (string name);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the interface to get. For generic interfaces, this is the mangled name.
    return:
      type: System.Type
      description: An object representing the interface with the specified name, implemented or inherited by the current <xref href="System.Type"></xref>, if found; otherwise, `null`.
  overload: System.Type.GetInterface*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: The current <xref href="System.Type"></xref> represents a type that implements the same generic interface with different type arguments.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetInterface(System.String,System.Boolean)
  commentId: M:System.Type.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetInterface(String, Boolean)
  nameWithType: Type.GetInterface(String, Boolean)
  fullName: Type.GetInterface(String, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.
  remarks: "The `ignoreCase` parameter applies only to the simple interface name, not to the namespace. The portion of `name` that specifies the namespace must have the correct case, or the interface will not be found. For example, the string \"System.icomparable\" finds the <xref:System.IComparable> interface, but the string \"system.icomparable\" does not.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints.  \n  \n> [!NOTE]\n>  For generic interfaces, the `name` parameter is the mangled name, ending with a grave accent (\\`) and the number of type parameters. This is true for both generic interface definitions and constructed generic interfaces. For example, to find `IExample<T>` (`IExample(Of T)` in Visual Basic) or `IExample<string>` (`IExample(Of String)` in Visual Basic), search for `\"IExample`1\"`."
  example:
  - "The following code example uses the <xref:System.Type.GetInterface%28System.String%2CSystem.Boolean%29> method to perform a case-insensitive search of the <xref:System.Collections.Hashtable> class for the <xref:System.Collections.IEnumerable> interface.  \n  \n The code example also demonstrates the <xref:System.Type.GetInterface%28System.String%29> method overload and the <xref:System.Type.GetInterfaceMap%2A> method.  \n  \n [!code-cpp[Type_GetInterface#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterface/CPP/type_getinterface.cpp#2)]\n [!code-csharp[Type_GetInterface#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterface/CS/type_getinterface.cs#2)]\n [!code-vb[Type_GetInterface#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterface/VB/type_getinterface.vb#2)]"
  syntax:
    content: public abstract Type GetInterface (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the interface to get. For generic interfaces, this is the mangled name.
    - id: ignoreCase
      type: System.Boolean
      description: "`true` to ignore the case of that part of <code>name</code> that specifies the simple interface name (the part that specifies the namespace must be correctly cased).  \n  \n -or-  \n  \n `false` to perform a case-sensitive search for all parts of <code>name</code>."
    return:
      type: System.Type
      description: An object representing the interface with the specified name, implemented or inherited by the current <xref href="System.Type"></xref>, if found; otherwise, `null`.
  overload: System.Type.GetInterface*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: The current <xref href="System.Type"></xref> represents a type that implements the same generic interface with different type arguments.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetInterfaceMap(System.Type)
  commentId: M:System.Type.GetInterfaceMap(System.Type)
  id: GetInterfaceMap(System.Type)
  parent: System.Type
  langs:
  - csharp
  name: GetInterfaceMap(Type)
  nameWithType: Type.GetInterfaceMap(Type)
  fullName: Type.GetInterfaceMap(Type)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns an interface mapping for the specified interface type.
  remarks: "The interface map denotes how an interface is mapped into the actual members on a class that implements that interface.  \n  \n If the current <xref:System.Type> represents a constructed generic type, type parameters are replaced by the appropriate type arguments in the elements of the <xref:System.Reflection.InterfaceMapping> returned by this method."
  example:
  - "The following example calls the <xref:System.Type.GetInterfaceMap%2A> method to determine how the <xref:System.IFormatProvider> interface maps to <xref:System.Globalization.CultureInfo> methods, and how the <xref:System.IAppDomainSetup> interface maps to <xref:System.AppDomainSetup> properties. Note that, because the <xref:System.IAppDomainSetup> interface defines a set of properties, the returned <xref:System.Reflection.InterfaceMapping> object includes separate <xref:System.Reflection.MethodInfo> objects for a property's get and set accessors.  \n  \n [!code-csharp[System.Type.GetInterfaceMap#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.getinterfacemap/cs/interfacemapping1.cs#1)]\n [!code-vb[System.Type.GetInterfaceMap#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.getinterfacemap/vb/interfacemapping1.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);
    parameters:
    - id: interfaceType
      type: System.Type
      description: The interface type to retrieve a mapping for.
    return:
      type: System.Reflection.InterfaceMapping
      description: An object that represents the interface mapping for <code>interfaceType</code>.
  overload: System.Type.GetInterfaceMap*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>interfaceType</code> is not implemented by the current type.  \n  \n -or-  \n  \n The <code>interfaceType</code> parameter does not refer to an interface.  \n  \n -or-  \n  \n <code>interfaceType</code> is a generic interface, and the current type is an array type."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>interfaceType</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current <xref href="System.Type"></xref> represents a generic type parameter; that is, <xref href="System.Type.IsGenericParameter"></xref> is `true`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetInterfaces
  commentId: M:System.Type.GetInterfaces
  id: GetInterfaces
  parent: System.Type
  langs:
  - csharp
  name: GetInterfaces()
  nameWithType: Type.GetInterfaces()
  fullName: Type.GetInterfaces()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, gets all the interfaces implemented or inherited by the current <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Type.GetInterfaces%2A> method does not return interfaces in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which interfaces are returned, because that order varies.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Type> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the interface constraints and any interfaces inherited from class or interface constraints."
  example:
  - "The following example gets the type of the specified class and displays all the interfaces that the type implements or inherits. To compile the Visual Basic example, use the following compiler commands:  \n  \n `vbc type_getinterfaces1.vb /r:System.Web.dll /r:System.dll`  \n  \n [!code-cpp[Type_GetInterfaces1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetInterfaces1/CPP/type_getinterfaces1.cpp#1)]\n [!code-csharp[Type_GetInterfaces1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetInterfaces1/CS/type_getinterfaces1.cs#1)]\n [!code-vb[Type_GetInterfaces1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetInterfaces1/VB/type_getinterfaces1.vb#1)]"
  syntax:
    content: public abstract Type[] GetInterfaces ();
    parameters: []
    return:
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing all the interfaces implemented or inherited by the current <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Type\"></xref>, if no interfaces are implemented or inherited by the current <xref href=\"System.Type\"></xref>."
  overload: System.Type.GetInterfaces*
  exceptions:
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A static initializer is invoked and throws an exception.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMember(System.String)
  commentId: M:System.Type.GetMember(System.String)
  id: GetMember(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetMember(String)
  nameWithType: Type.GetMember(String)
  fullName: Type.GetMember(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the public members with the specified name.
  remarks: "The search for `name` is case-sensitive. The search includes public static and public instance members.  \n  \n Members include properties, methods, fields, events, and so on.  \n  \n The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  \n  \n This method overload will not find class initializers (.cctor). To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMember(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`."
  example:
  - "The following example displays all the members of the `String` class that start with the letter C.  \n  \n [!code-cpp[Type_GetMember#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#1)]\n [!code-csharp[Type_GetMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#1)]\n [!code-vb[Type_GetMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#1)]"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMember (string name);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public members to get.
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of <xref href="System.Reflection.MemberInfo"></xref> objects representing the public members with the specified name, if found; otherwise, an empty array.
  overload: System.Type.GetMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetMember(String, BindingFlags)
  nameWithType: Type.GetMember(String, BindingFlags)
  fullName: Type.GetMember(String, BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified members, using the specified binding constraints.
  remarks: "This method can be overridden by a derived class.  \n  \n Members include properties, methods, fields, events, and so on.  \n  \n The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public members in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n To get the class initializer (.cctor) using this method overload, you must specify \".cctor\" for `name`, and <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic) for `bindingAttr`. You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMember(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`."
  example:
  - "The following example displays all the public static members of the `myString` class that start with the letter C.  \n  \n [!code-cpp[Type_GetMember#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#2)]\n [!code-csharp[Type_GetMember#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#2)]\n [!code-vb[Type_GetMember#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#2)]"
  syntax:
    content: public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the members to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return an empty array."
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of <xref href="System.Reflection.MemberInfo"></xref> objects representing the public members with the specified name, if found; otherwise, an empty array.
  overload: System.Type.GetMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  commentId: M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetMember(String, MemberTypes, BindingFlags)
  nameWithType: Type.GetMember(String, MemberTypes, BindingFlags)
  fullName: Type.GetMember(String, MemberTypes, BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified members of the specified member type, using the specified binding constraints.
  remarks: "Members include properties, methods, fields, events, and so on.  \n  \n The <xref:System.Type.GetMember%2A> method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public members in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n To get the class initializer (.cctor) using this method overload, you must specify \".cctor\" for `name`, <xref:System.Reflection.MemberTypes?displayProperty=fullName> for `type`, and  <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic) for `bindingAttr`. You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMember(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`."
  example:
  - "The following example displays all the methods of the `myString` class that start with the letter C.  \n  \n [!code-cpp[Type_GetMember#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMember/CPP/type_getmember.cpp#3)]\n [!code-csharp[Type_GetMember#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMember/CS/type_getmember.cs#3)]\n [!code-vb[Type_GetMember#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMember/VB/type_getmember.vb#3)]"
  syntax:
    content: public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the members to get.
    - id: type
      type: System.Reflection.MemberTypes
      description: The value to search for.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return an empty array."
    return:
      type: System.Reflection.MemberInfo[]
      description: An array of <xref href="System.Reflection.MemberInfo"></xref> objects representing the public members with the specified name, if found; otherwise, an empty array.
  overload: System.Type.GetMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: A derived class must provide an implementation.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMembers
  commentId: M:System.Type.GetMembers
  id: GetMembers
  parent: System.Type
  langs:
  - csharp
  name: GetMembers()
  nameWithType: Type.GetMembers()
  fullName: Type.GetMembers()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns all the public members of the current <xref href="System.Type"></xref>.
  remarks: "Members include properties, methods, fields, events, and so on.  \n  \n The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  \n  \n This method overload calls the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload, with <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). It will not find class initializers (.cctor). To find class initializers, use an overload that takes <xref:System.Reflection.BindingFlags>, and specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint."
  example:
  - "The following code example demonstrates how to use the <xref:System.Type.GetMembers> method overload to collect information about all public members of a specified class.  \n  \n [!code-cpp[Type_GetMembers1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers1/CPP/type_getmembers1.cpp#1)]\n [!code-csharp[Type_GetMembers1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers1/CS/type_getmembers1.cs#1)]\n [!code-vb[Type_GetMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers1/VB/type_getmembers1.vb#1)]"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMembers ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo[]
      description: "An array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing all the public members of the current <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.MemberInfo\"></xref>, if the current <xref href=\"System.Type\"></xref> does not have public members."
  overload: System.Type.GetMembers*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMembers(System.Reflection.BindingFlags)
  commentId: M:System.Type.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: Type.GetMembers(BindingFlags)
  fullName: Type.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the members defined for the current <xref href="System.Type"></xref>, using the specified binding constraints.
  remarks: "Members include properties, methods, fields, events, and so on.  \n  \n The <xref:System.Type.GetMembers%2A> method does not return members in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which members are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public members in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search. Only protected and internal members on base classes are returned; private members on base classes are not returned.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  \n  \n Calling this method with only the `Public` flag or only the `NonPublic` flag will return the specified members and does not require any other flags.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n To get the class initializer (.cctor) using this method overload, you must specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (<xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName> in Visual Basic). You can also get the class initializer using the <xref:System.Type.TypeInitializer%2A> property.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MemberInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the members of the class constraint, or the members of <xref:System.Object> if there is no class constraint."
  example:
  - "The following code example demonstrates how to use the <xref:System.Type.GetMembers%28System.Reflection.BindingFlags%29> method overload to collect information about all public instance members of a specified class.  \n  \n [!code-cpp[Type_GetMembers2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMembers2/CPP/type_getmembers2.cpp#1)]\n [!code-csharp[Type_GetMembers2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMembers2/CS/type_getmembers2.cs#1)]\n [!code-vb[Type_GetMembers2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMembers2/VB/type_getmembers2.vb#1)]"
  syntax:
    content: public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero (<xref href=\"System.Reflection.BindingFlags.Default\"></xref>), to return an empty array."
    return:
      type: System.Reflection.MemberInfo[]
      description: "An array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing all members defined for the current <xref href=\"System.Type\"></xref> that match the specified binding constraints.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.MemberInfo\"></xref>, if no members are defined for the current <xref href=\"System.Type\"></xref>, or if none of the defined members match the binding constraints."
  overload: System.Type.GetMembers*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  remarks: "Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n The following table shows what members of a base class are returned by the `GetXXX` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public methods in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMember(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`."
  example:
  - "The following example finds specific overloads of `MethodA`, specifying binding constraints, calling conventions, and a variety of argument types.  \n  \n> [!NOTE]\n>  The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.  \n  \n [!code-cpp[Type_GetMethod3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod3/CPP/type_getmethod3.cpp#1)]\n [!code-csharp[Type_GetMethod3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod3/CS/type_getmethod3.cs#1)]\n [!code-vb[Type_GetMethod3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod3/VB/type_getmethod3.vb#1)]"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the method to get.  \n  \n -or-  \n  \n An empty array of <xref href=\"System.Type\"></xref> objects (as provided by the <xref href=\"System.Type.EmptyTypes\"></xref> field) to get a method that takes no parameters."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])
  nameWithType: Type.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])
  fullName: Type.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  remarks: "Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public methods in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include nonpublic methods (that is, private, internal, and protected methods) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMember(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`."
  example:
  - "The following example finds specific overloads of `MethodA`, specifying binding constraints and a variety of argument types.  \n  \n> [!NOTE]\n>  The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.  \n  \n [!code-cpp[Type_GetMethod5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod5/CPP/type_getmethod5.cpp#1)]\n [!code-csharp[Type_GetMethod5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod5/CS/type_getmethod5.cs#1)]\n [!code-vb[Type_GetMethod5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod5/VB/type_getmethod5.vb#1)]"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the method to get.  \n  \n -or-  \n  \n An empty array of <xref href=\"System.Type\"></xref> objects (as provided by the <xref href=\"System.Type.EmptyTypes\"></xref> field) to get a method that takes no parameters."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetMethod(String, Type[], ParameterModifier[])
  nameWithType: Type.GetMethod(String, Type[], ParameterModifier[])
  fullName: Type.GetMethod(String, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified public method whose parameters match the specified argument types and modifiers.
  remarks: "Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n The search for `name` is case-sensitive. The search includes public static and public instance methods.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMethod(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`. Instead, use `GetMethod(\"MyMethod\")` with the appropriate parameter in the `types` array."
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public method to get.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the method to get.  \n  \n -or-  \n  \n An empty array of <xref href=\"System.Type\"></xref> objects (as provided by the <xref href=\"System.Type.EmptyTypes\"></xref> field) to get a method that takes no parameters."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. To be only used when calling through COM interop, and only parameters that are passed by reference are handled. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the public method that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and specified parameters.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethod(System.String)
  commentId: M:System.Type.GetMethod(System.String)
  id: GetMethod(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetMethod(String)
  nameWithType: Type.GetMethod(String)
  fullName: Type.GetMethod(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the public method with the specified name.
  remarks: "The search for `name` is case-sensitive. The search includes public static and public instance methods.  \n  \n If a method is overloaded and has more than one public method, the <xref:System.Type.GetMethod%28System.String%29> method throws an <xref:System.Reflection.AmbiguousMatchException> exception. In the following example, an exception is thrown because there is more than one public overload of the <xref:System.Int32.ToString%2A?displayProperty=fullName> method.  On the other hand, because the `Person.ToString` method overrides  <xref:System.Object.ToString%2A?displayProperty=fullName> and therefore is not overloaded, the <xref:System.Type.GetMethod%28System.String%29> method is able to retrieve the <xref:System.Reflection.MethodInfo> object.  \n  \n [!code-csharp[System.Type.GetMethod#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads2.cs#3)]\n [!code-vb[System.Type.GetMethod#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads2.vb#3)]  \n  \n You can do one of the following to retrieve a specific method:  \n  \n-   Call the <xref:System.Type.GetMethod%28System.String%2CSystem.Reflection.BindingFlags%29> method and specify a `bindingAttr` argument that uniquely identifies the method. For example, if the exception is thrown because a type has a static and an instance overload, you can specify a  `bindingAttr` argument  of <xref:System.Reflection.BindingFlags?displayProperty=fullName>`Or`<xref:System.Reflection.BindingFlags?displayProperty=fullName>.  \n  \n-   Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.  \n  \n-   Call the <xref:System.Type.GetMethods> method to retrieve an array containing all of the public methods belonging to a type. You can then iterate it to identify the duplicate methods named `name`.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMember(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`."
  example:
  - "The following example gets a method named `MethodA`.  \n  \n [!code-cpp[Type_GetMethod1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod1/CPP/type_getmethod1.cpp#1)]\n [!code-csharp[Type_GetMethod1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod1/CS/type_getmethod1.cs#1)]\n [!code-vb[Type_GetMethod1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod1/VB/type_getmethod1.vb#1)]"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public method to get.
    return:
      type: System.Reflection.MethodInfo
      description: An object that represents the public method with the specified name, if found; otherwise, `null`.
  overload: System.Type.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetMethod(String, BindingFlags)
  nameWithType: Type.GetMethod(String, BindingFlags)
  fullName: Type.GetMethod(String, BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified method, using the specified binding constraints.
  remarks: "The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  \n  \n-   You must specify either <xref:System.Reflection.BindingFlags?displayProperty=fullName> or <xref:System.Reflection.BindingFlags?displayProperty=fullName> in order to get a return.  \n  \n-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include public methods in the search.  \n  \n-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include non-public methods (that is, private, internal, and protected methods) in the search.  \n  \n-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   <xref:System.Reflection.BindingFlags?displayProperty=fullName> to ignore the case of `name`.  \n  \n-   <xref:System.Reflection.BindingFlags?displayProperty=fullName> to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n If a method is overloaded and more than one overload meets the constraints specified by the `bindingAttr` argument, the method throws an <xref:System.Reflection.AmbiguousMatchException> exception. In the following example, an exception is thrown because:  \n  \n-   The `TestClass` type has two public instance overloads of the `DisplayValue` method, `DisplayValue(String)` and `DisplayValue(String, Object[])`.  \n  \n-   The `TestClass` type has two public instance overloads of the `Equals` method,  one of which is inherited from <xref:System.Object>: `Equals(TestClass)` and `Equals(Object)`.  \n  \n [!code-csharp[System.Type.GetMethod#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethodWithOverloads1.cs#2)]\n [!code-vb[System.Type.GetMethod#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethodWithOverloads1.vb#2)]  \n  \n You can do one of the following to retrieve a specific method:  \n  \n-   Change the binding constraints. In the previous example, attempting to retrieve a public instance `Equals` method that is declared by the type and not inherited successfully retrieves `Equals(TestClass)`.  \n  \n-   Call an overload of the <xref:System.Type.GetMethod%2A> method that includes a `types` parameter which defines the types of the method's parameters.  \n  \n-   Call the <xref:System.Type.GetMethods%28System.Reflection.BindingFlags%29> method to retrieve an array containing all of the methods belonging to a type that have the specified binding attributes. You can then iterate it to identify the duplicate methods named `name`. This approach is illustrated in the previous example's handler for the <xref:System.Reflection.AmbiguousMatchException> exception.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  For generic methods, do not include the type arguments in `name`. For example, the C# code `GetMember(\"MyMethod<int>\")` searches for a member with the text name \"`MyMethod<int>`\", rather than for a method named `MyMethod` that has one generic argument of type `int`."
  example:
  - "The following example gets the method that matches the specified binding flags.  \n  \n [!code-cpp[Type_GetMethod2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod2/CPP/type_getmethod2.cpp#1)]\n [!code-csharp[Type_GetMethod2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod2/CS/type_getmethod2.cs#1)]\n [!code-vb[Type_GetMethod2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod2/VB/type_getmethod2.vb#1)]"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethod(System.String,System.Type[])
  commentId: M:System.Type.GetMethod(System.String,System.Type[])
  id: GetMethod(System.String,System.Type[])
  parent: System.Type
  langs:
  - csharp
  name: GetMethod(String, Type[])
  nameWithType: Type.GetMethod(String, Type[])
  fullName: Type.GetMethod(String, Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified public method whose parameters match the specified argument types.
  remarks: "The search for `name` is case-sensitive. The search includes public static and public instance methods.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint.  \n  \n> [!NOTE]\n>  The `name` parameter cannot include type arguments. For example, the C# code `GetMethod(\"MyGenericMethod<int>\")` searches for a method with the text name \"`MyGenericMethod<int>`\", rather than for a method named `MyGenericMethod` that has one generic argument of type `int`. Instead, use `GetMethod(\"MyGenericMethod\")` with the appropriate parameter in the `types` array."
  example:
  - "The following example finds specific overloads of `MethodA`, specifying a variety of argument types.  \n  \n> [!NOTE]\n>  The [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] example requires the `/unsafe` compiler option.  \n  \n [!code-cpp[Type_GetMethod4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethod4/CPP/type_getmethod4.cpp#1)]\n [!code-csharp[Type_GetMethod4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethod4/CS/type_getmethod4.cs#1)]\n [!code-vb[Type_GetMethod4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethod4/VB/type_getmethod4.vb#1)]  \n  \n The following example retrieves <xref:System.Reflection.MethodInfo> objects that represent the `Add` methods  of a non-generic type (the <xref:System.Collections.ArrayList> class), an open generic type (the <xref:System.Collections.Generic.List%601> class), and a closed generic type (the `List(Of String)` type.  \n  \n [!code-csharp[System.Type.GetMethod#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Type.GetMethod/cs/GetMethod1.cs#1)]\n [!code-vb[System.Type.GetMethod#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Type.GetMethod/vb/GetMethod1.vb#1)]  \n  \n The example defines a `GetAddMethod` method that retrieves the appropriate <xref:System.Reflection.MethodInfo> object. To provide the `types` argument for an open generic type, it calls the <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method. To provide the `types` argument for a closed generic type, it retrieves the value of the <xref:System.Type.GenericTypeArguments%2A?displayProperty=fullName> property."
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, Type[] types);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public method to get.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the method to get.  \n  \n -or-  \n  \n An empty array of <xref href=\"System.Type\"></xref> objects (as provided by the <xref href=\"System.Type.EmptyTypes\"></xref> field) to get a method that takes no parameters."
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the public method whose parameters match the specified argument types, if found; otherwise, `null`.
  overload: System.Type.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and specified parameters.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>types</code> is multidimensional.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.
  remarks: "Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n If `types` is `null`, arguments are not matched.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public methods in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information."
  syntax:
    content: protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the method to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: callConvention
      type: System.Reflection.CallingConventions
      description: The object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and what process cleans up the stack.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the method to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.  \n  \n -or-  \n  \n `null`. If <code>types</code> is `null`, arguments are not matched."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. The default binder does not process this parameter.
    return:
      type: System.Reflection.MethodInfo
      description: An object representing the method that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetMethodImpl*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional.  \n  \n -or-  \n  \n <code>types</code> and <code>modifiers</code> do not have the same length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current type is a <xref href="System.Reflection.Emit.TypeBuilder"></xref> or <xref href="System.Reflection.Emit.GenericTypeParameterBuilder"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethods
  commentId: M:System.Type.GetMethods
  id: GetMethods
  parent: System.Type
  langs:
  - csharp
  name: GetMethods()
  nameWithType: Type.GetMethods()
  fullName: Type.GetMethods()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns all the public methods of the current <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which methods are returned, because that order varies.  \n  \n Constructors are not included in the array of methods returned by this call. Make a separate call to `GetConstructors()` to get the constructor methods.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint."
  syntax:
    content: public System.Reflection.MethodInfo[] GetMethods ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo[]
      description: "An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing all the public methods defined for the current <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.MethodInfo\"></xref>, if no public methods are defined for the current <xref href=\"System.Type\"></xref>."
  overload: System.Type.GetMethods*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetMethods(System.Reflection.BindingFlags)
  commentId: M:System.Type.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: Type.GetMethods(BindingFlags)
  fullName: Type.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the methods defined for the current <xref href="System.Type"></xref>, using the specified binding constraints.
  remarks: "The <xref:System.Type.GetMethods%2A> method does not return methods in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which methods are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which methods to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public methods in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public methods (that is, private, internal, and protected methods) in the search. Only protected and internal methods on base classes are returned; private methods on base classes are not returned.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.DeclaredOnly` to search only the methods declared on the <xref:System.Type>, not methods that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n> [!NOTE]\n>  You cannot omit parameters when looking up constructors and methods. You can only omit parameters when invoking.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.MethodInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the methods of the class constraint, or the methods of <xref:System.Object> if there is no class constraint."
  example:
  - "The following example creates a class with two public methods and one protected method, creates a `Type` object corresponding to `MyTypeClass`, gets all public and non-public methods, and displays their names.  \n  \n [!code-cpp[Type_GetMethods2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetMethods2/CPP/type_getmethods2.cpp#1)]\n [!code-csharp[Type_GetMethods2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetMethods2/CS/type_getmethods2.cs#1)]\n [!code-vb[Type_GetMethods2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetMethods2/VB/type_getmethods2.vb#1)]"
  syntax:
    content: public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.MethodInfo[]
      description: "An array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing all methods defined for the current <xref href=\"System.Type\"></xref> that match the specified binding constraints.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.MethodInfo\"></xref>, if no methods are defined for the current <xref href=\"System.Type\"></xref>, or if none of the defined methods match the binding constraints."
  overload: System.Type.GetMethods*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetNestedType(String, BindingFlags)
  nameWithType: Type.GetNestedType(String, BindingFlags)
  fullName: Type.GetNestedType(String, BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.
  remarks: "Use the simple name of the nested class for `name`. Do not qualify it with the name of the outer class. For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic parameters. For example, use the string \"Inner\\`1\" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic). Do not include language-specific syntax for type parameters.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:  \n  \n-   You must specify either <xref:System.Reflection.BindingFlags?displayProperty=fullName> or <xref:System.Reflection.BindingFlags?displayProperty=fullName> to get a return.  \n  \n-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include public nested types in the search.  \n  \n-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include non-public nested types (that is, private, internal, and protected nested types) in the search.  \n  \n This method returns only the nested types of the current type. It does not search the base classes of the current type. To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedType%2A> at each level.  \n  \n <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> are ignored.  \n  \n Calling this method with only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag or only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag will return the specified nested types and does not require any other flags.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  \n  \n If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  \n  \n> [!NOTE]\n>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  \n  \n For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>."
  syntax:
    content: public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the nested type to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Type
      description: An object representing the nested type that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetNestedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetNestedType(System.String)
  commentId: M:System.Type.GetNestedType(System.String)
  id: GetNestedType(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetNestedType(String)
  nameWithType: Type.GetNestedType(String)
  fullName: Type.GetNestedType(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the public nested type with the specified name.
  remarks: "The search for `name` is case-sensitive.  \n  \n Use the simple name of the nested class for `name`. Do not qualify it with the name of the outer class. For a generic nested class, use the mangled name — that is, append a grave accent and the number of generic arguments. For example, use the string \"Inner\\`1\" to get the generic nested class `Inner<T>` (`Inner(Of T)` in Visual Basic). Do not include language-specific syntax for type parameters.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  \n  \n If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  \n  \n> [!NOTE]\n>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  \n  \n For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>."
  syntax:
    content: public Type GetNestedType (string name);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the nested type to get.
    return:
      type: System.Type
      description: An object representing the public nested type with the specified name, if found; otherwise, `null`.
  overload: System.Type.GetNestedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetNestedTypes(System.Reflection.BindingFlags)
  commentId: M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetNestedTypes(BindingFlags)
  nameWithType: Type.GetNestedTypes(BindingFlags)
  fullName: Type.GetNestedTypes(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the types nested in the current <xref href="System.Type"></xref>, using the specified binding constraints.
  remarks: "The search for nested types is not recursive.  \n  \n The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which types are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:  \n  \n-   You must specify either <xref:System.Reflection.BindingFlags?displayProperty=fullName> or <xref:System.Reflection.BindingFlags?displayProperty=fullName> to get a return.  \n  \n-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include public nested types in the search.  \n  \n-   Specify <xref:System.Reflection.BindingFlags?displayProperty=fullName> to include non-public nested types (that is, private, internal, and protected nested types) in the search.  \n  \n This method returns only the nested types of the current type. It does not search the base classes of the current type. To find types that are nested in base classes, you must walk the inheritance hierarchy, calling <xref:System.Type.GetNestedTypes%2A> at each level.  \n  \n <xref:System.Reflection.BindingFlags?displayProperty=fullName> and <xref:System.Reflection.BindingFlags?displayProperty=fullName> are ignored.  \n  \n Calling this method with only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag or only the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag will return the specified nested types and does not require any other flags.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  \n  \n If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  \n  \n> [!NOTE]\n>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  \n  \n For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>."
  example:
  - "The following example creates two nested public classes and two nested protected classes, and displays information for classes that match the specified binding constraints.  \n  \n [!code-cpp[Type_GetNestedClassesAbs#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CPP/type_getnestedclassesabs.cpp#1)]\n [!code-csharp[Type_GetNestedClassesAbs#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedClassesAbs/CS/type_getnestedclassesabs.cs#1)]\n [!code-vb[Type_GetNestedClassesAbs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedClassesAbs/VB/type_getnestedclassesabs.vb#1)]"
  syntax:
    content: public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing all the types nested in the current <xref href="System.Type"></xref> that match the specified binding constraints (the search is not recursive), or an empty array of type <xref href="System.Type"></xref>, if no nested types are found that match the binding constraints.
  overload: System.Type.GetNestedTypes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetNestedTypes
  commentId: M:System.Type.GetNestedTypes
  id: GetNestedTypes
  parent: System.Type
  langs:
  - csharp
  name: GetNestedTypes()
  nameWithType: Type.GetNestedTypes()
  fullName: Type.GetNestedTypes()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns the public types nested in the current <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Type.GetNestedTypes%2A> method does not return types in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which types are returned, because that order varies.  \n  \n Only the public types immediately nested in the current type are returned; the search is not recursive.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the nested types of the class constraint.  \n  \n If a nested type is generic, this method returns its generic type definition. This is true even if the enclosing generic type is a closed constructed type.  \n  \n> [!NOTE]\n>  If the current <xref:System.Type> represents a generic type defined in C#, Visual Basic, or C++, its nested types are all generic even if they have no generic parameters of their own. This is not necessarily true of nested types defined in dynamic assemblies or compiled with the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md).  \n  \n For information on nested generic types, and on constructing nested generic types from their generic type definitions, see <xref:System.Type.MakeGenericType%2A>."
  example:
  - "The following example defines a nested class and a `struct` in `MyClass`, and then obtains objects of the nested types using the type of `MyClass`.  \n  \n [!code-cpp[Type_GetNestedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetNestedTypes/CPP/type_getnestedtypes.cpp#1)]\n [!code-csharp[Type_GetNestedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetNestedTypes/CS/type_getnestedtypes.cs#1)]\n [!code-vb[Type_GetNestedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetNestedTypes/VB/type_getnestedtypes.vb#1)]"
  syntax:
    content: public Type[] GetNestedTypes ();
    parameters: []
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the public types nested in the current <xref href="System.Type"></xref> (the search is not recursive), or an empty array of type <xref href="System.Type"></xref> if no public types are nested in the current <xref href="System.Type"></xref>.
  overload: System.Type.GetNestedTypes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperties
  commentId: M:System.Type.GetProperties
  id: GetProperties
  parent: System.Type
  langs:
  - csharp
  name: GetProperties()
  nameWithType: Type.GetProperties()
  fullName: Type.GetProperties()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns all the public properties of the current <xref href="System.Type"></xref>.
  remarks: "Calling this overload is equivalent to calling the <xref:System.Type.GetProperties%28System.Reflection.BindingFlags%29> overload with a `bindingAttr` argument equal to `BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public` in C# and  `BindingFlags.Instance Or BindingFlags.Static Or BindingFlags.Public` in Visual Basic. It returns all public instance and static properties, both those defined by the type represented by the current <xref:System.Type> object as well as those inherited from its base types.  \n  \n A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which properties are returned, because that order varies.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint."
  example:
  - "The following example demonstrates the use of the `GetProperties` method.  \n  \n [!code-cpp[Type_GetTypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#2)]\n [!code-csharp[Type_GetTypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#2)]\n [!code-vb[Type_GetTypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#2)]"
  syntax:
    content: public System.Reflection.PropertyInfo[] GetProperties ();
    parameters: []
    return:
      type: System.Reflection.PropertyInfo[]
      description: "An array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing all public properties of the current <xref href=\"System.Type\"></xref>.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.PropertyInfo\"></xref>, if the current <xref href=\"System.Type\"></xref> does not have public properties."
  overload: System.Type.GetProperties*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperties(System.Reflection.BindingFlags)
  commentId: M:System.Type.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: Type.GetProperties(BindingFlags)
  fullName: Type.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the properties of the current <xref href="System.Type"></xref>, using the specified binding constraints.
  remarks: "A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The <xref:System.Type.GetProperties%2A> method does not return properties in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which properties are returned, because that order varies.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which nested types to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public properties in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search. Only protected and internal properties on base classes are returned; private properties on base classes are not returned.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n If the current T:System.Type represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> objects with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint."
  example:
  - "The following example defines a class named `PropertyClass` that includes six properties: two are public, one is private, one is protected, one is internal (`Friend` in Visual Basic), and one is protected internal (`Protected Friend` in Visual Basic). It then displays some basic property information (the property name and type, whether it is read/write, and the visibility of its `get` and `set` accessors) for the properties that match the specified binding constraints.  \n  \n [!code-cpp[Type_GetProperties2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperties2/CPP/type_getproperties2.cpp#1)]\n [!code-csharp[Type_GetProperties2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperties2/CS/type_getproperties2.cs#1)]\n [!code-vb[Type_GetProperties2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperties2/VB/type_getproperties2.vb#1)]"
  syntax:
    content: public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.PropertyInfo[]
      description: "An array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing all properties of the current <xref href=\"System.Type\"></xref> that match the specified binding constraints.  \n  \n -or-  \n  \n An empty array of type <xref href=\"System.Reflection.PropertyInfo\"></xref>, if the current <xref href=\"System.Type\"></xref> does not have properties, or if none of the properties match the binding constraints."
  overload: System.Type.GetProperties*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperty(System.String)
  commentId: M:System.Type.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetProperty(String)
  nameWithType: Type.GetProperty(String)
  fullName: Type.GetProperty(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the public property with the specified name.
  remarks: "The search for `name` is case-sensitive. The search includes public static and public instance properties.  \n  \n A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  \n  \n Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:  \n  \n-   A type contains two indexed properties that have the same name but different numbers of parameters. To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.  \n  \n-   A derived type declares a property that hides an inherited property with the same name, by using the `new` modifier (`Shadows` in Visual Basic). To resolve the ambiguity, use the <xref:System.Type.GetProperty%28System.String%2CSystem.Reflection.BindingFlags%29> method overload and add the <xref:System.Reflection.BindingFlags?displayProperty=fullName> flag to restrict the search to members that are not inherited.  \n  \n## Indexers and Default Properties  \n [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  \n  \n In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named \"Item\". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  \n  \n To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property."
  example:
  - "The following example retrieves the `Type` object of a user-defined class, retrieves a property of that class, and displays the property name.  \n  \n [!code-cpp[Type_GetProperty1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty1/CPP/type_getproperty1.cpp#1)]\n [!code-csharp[Type_GetProperty1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty1/CS/type_getproperty1.cs#1)]\n [!code-vb[Type_GetProperty1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty1/VB/type_getproperty1.vb#1)]  \n  \n Internally, this property is referred to in the metadata by the name \"Item.\" Any attempt to get `PropertyInfo` using reflection must specify this internal name in order to correctly return the `PropertyInfo` property."
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property with the specified name, if found; otherwise, `null`.
  overload: System.Type.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  langs:
  - csharp
  name: GetProperty(String, BindingFlags)
  nameWithType: Type.GetProperty(String, BindingFlags)
  fullName: Type.GetProperty(String, BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified property, using the specified binding constraints.
  remarks: "A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public properties in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  \n  \n Situations in which <xref:System.Reflection.AmbiguousMatchException> occurs include the following:  \n  \n-   A type contains two indexed properties that have the same name but different numbers of parameters. To resolve the ambiguity, use an overload of the <xref:System.Type.GetProperty%2A> method that specifies parameter types.  \n  \n-   A derived type declares a property that hides an inherited property with the same name, using the `new` modifier (`Shadows` in Visual Basic). To resolve the ambiguity, include <xref:System.Reflection.BindingFlags?displayProperty=fullName> to restrict the search to members that are not inherited.  \n  \n## Indexers and Default Properties  \n [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  \n  \n In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named \"Item\". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  \n  \n To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property."
  example:
  - "The following example retrieves the type of a user-defined class, retrieves a property of that class and displays the property name in accordance with the specified binding constraints.  \n  \n [!code-cpp[Type_GetProperty2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty2/CPP/type_getproperty2.cpp#1)]\n [!code-csharp[Type_GetProperty2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty2/CS/type_getproperty2.cs#1)]\n [!code-vb[Type_GetProperty2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty2/VB/type_getproperty2.vb#1)]"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the property to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the property that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperty(System.String,System.Type)
  commentId: M:System.Type.GetProperty(System.String,System.Type)
  id: GetProperty(System.String,System.Type)
  parent: System.Type
  langs:
  - csharp
  name: GetProperty(String, Type)
  nameWithType: Type.GetProperty(String, Type)
  fullName: Type.GetProperty(String, Type)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the public property with the specified name and return type.
  remarks: "A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The search for `name` is case-sensitive. The search includes public static and public instance properties.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  \n  \n## Indexers and Default Properties  \n [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  \n  \n In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named \"Item\". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  \n  \n To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property."
  example:
  - "The following example defines a class with one property and retrieves the name and type of the property.  \n  \n [!code-cpp[Type_GetProperty_Types#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty_Types/CPP/type_getproperty_types.cpp#1)]\n [!code-csharp[Type_GetProperty_Types#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty_Types/CS/type_getproperty_types.cs#1)]\n [!code-vb[Type_GetProperty_Types#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty_Types/VB/type_getproperty_types.vb#1)]"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property with the specified name, if found; otherwise, `null`.
  overload: System.Type.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`, or <code>returnType</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperty(System.String,System.Type[])
  commentId: M:System.Type.GetProperty(System.String,System.Type[])
  id: GetProperty(System.String,System.Type[])
  parent: System.Type
  langs:
  - csharp
  name: GetProperty(String, Type[])
  nameWithType: Type.GetProperty(String, Type[])
  fullName: Type.GetProperty(String, Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified public property whose parameters match the specified argument types.
  remarks: "A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The search for `name` is case-sensitive. The search includes public static and public instance properties.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  \n  \n## Indexers and Default Properties  \n [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  \n  \n In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named \"Item\". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  \n  \n To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property."
  example:
  - "The following example retrieves the `Type` object of a user-defined class, retrieves the property of that class, and displays the property name and type of the property as specified by the arguments passed to `GetProperty`.  \n  \n [!code-cpp[Type_GetProperty3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty3/CPP/type_getproperty3.cpp#1)]\n [!code-csharp[Type_GetProperty3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty3/CS/type_getproperty3.cs#1)]\n [!code-vb[Type_GetProperty3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty3/VB/type_getproperty3.vb#1)]"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the indexed property to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a property that is not indexed."
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property whose parameters match the specified argument types, if found; otherwise, `null`.
  overload: System.Type.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified argument types.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>types</code> is multidimensional.
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: An element of <code>types</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperty(System.String,System.Type,System.Type[])
  commentId: M:System.Type.GetProperty(System.String,System.Type,System.Type[])
  id: GetProperty(System.String,System.Type,System.Type[])
  parent: System.Type
  langs:
  - csharp
  name: GetProperty(String, Type, Type[])
  nameWithType: Type.GetProperty(String, Type, Type[])
  fullName: Type.GetProperty(String, Type, Type[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified public property whose parameters match the specified argument types.
  remarks: "A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n The search for `name` is case-sensitive. The search includes public static and public instance properties.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  \n  \n## Indexers and Default Properties  \n [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  \n  \n In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named \"Item\". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  \n  \n To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property."
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the indexed property to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a property that is not indexed."
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property whose parameters match the specified argument types, if found; otherwise, `null`.
  overload: System.Type.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified argument types.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>types</code> is multidimensional.
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: An element of <code>types</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetProperty(String, Type, Type[], ParameterModifier[])
  nameWithType: Type.GetProperty(String, Type, Type[], ParameterModifier[])
  fullName: Type.GetProperty(String, Type, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified public property whose parameters match the specified argument types and modifiers.
  remarks: "A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n The search for `name` is case-sensitive. The search includes public static and public instance properties.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  \n  \n## Indexers and Default Properties  \n [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  \n  \n In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named \"Item\". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  \n  \n To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property."
  example:
  - "The following example obtains a `Type` object corresponding to `MyPropertyClass`, and the indexed property of this class is retrieved using the arguments passed to the `GetProperty` method.  \n  \n [!code-cpp[Type_GetProperty5#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetProperty5/CPP/type_getproperty2.cpp#1)]\n [!code-csharp[Type_GetProperty5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetProperty5/CS/type_getproperty2.cs#1)]\n [!code-vb[Type_GetProperty5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetProperty5/VB/type_getproperty2.vb#1)]"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the public property to get.
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the indexed property to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a property that is not indexed."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. The default binder does not process this parameter.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the public property that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified argument types and modifiers.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional.  \n  \n -or-  \n  \n <code>types</code> and <code>modifiers</code> do not have the same length."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: An element of <code>types</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  nameWithType: Type.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  fullName: Type.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  remarks: "A property is considered public to reflection if it has at least one accessor that is public. Otherwise the property is considered private, and you must use <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> &#124; <xref:System.Reflection.BindingFlags?displayProperty=fullName> (in Visual Basic, combine the values using `Or`) to get it.  \n  \n Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public properties in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this method returns the <xref:System.Reflection.PropertyInfo> with the type parameters replaced by the appropriate type arguments.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method searches the properties of the class constraint.  \n  \n## Indexers and Default Properties  \n [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)], [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)], and [!INCLUDE[vcprvclong](~/includes/vcprvclong-md.md)] have simplified syntax for accessing indexed properties and allow one indexed property to be a default for its type. For example, if the variable `myList` refers to an <xref:System.Collections.ArrayList>, the syntax `myList[3]` (`myList(3)` in Visual Basic) retrieves the element with the index of 3. You can overload the property.  \n  \n In C#, this feature is called an indexer and cannot be refered to by name. By default, a C# indexer appears in metadata as an indexed property named \"Item\". However, a class library developer can use the <xref:System.Runtime.CompilerServices.IndexerNameAttribute> attribute to change the name of the indexer in the metadata. For example, the <xref:System.String> class has an indexer named <xref:System.String.Chars%2A>. Indexed properties created using languages other than C# can have names other than Item, as well.  \n  \n To determine whether a type has a default property, use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%28System.Type%2CSystem.Boolean%29> method to test for the <xref:System.Reflection.DefaultMemberAttribute> attribute. If the type has <xref:System.Reflection.DefaultMemberAttribute>, the <xref:System.Reflection.DefaultMemberAttribute.MemberName%2A> property returns the name of the default property."
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the property to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the indexed property to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a property that is not indexed."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. The default binder does not process this parameter.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the property that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional.  \n  \n -or-  \n  \n <code>types</code> and <code>modifiers</code> do not have the same length."
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: An element of <code>types</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  langs:
  - csharp
  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  nameWithType: Type.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  fullName: Type.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.
  remarks: "Although the default binder does not process <xref:System.Reflection.ParameterModifier> (the `modifiers` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which properties to include in the search:  \n  \n-   You must specify either `BindingFlags.Instance` or `BindingFlags.Static` in order to get a return.  \n  \n-   Specify `BindingFlags.Public` to include public properties in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public properties (that is, private, internal, and protected properties) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include `public` and `protected` static members up the hierarchy; `private` static members in inherited classes are not included.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the properties declared on the <xref:System.Type>, not properties that were simply inherited.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information."
  syntax:
    content: protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: The string containing the name of the property to get.
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to return `null`."
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded member, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>."
    - id: returnType
      type: System.Type
      description: The return type of the property.
    - id: types
      type: System.Type[]
      description: "An array of <xref href=\"System.Type\"></xref> objects representing the number, order, and type of the parameters for the indexed property to get.  \n  \n -or-  \n  \n An empty array of the type <xref href=\"System.Type\"></xref> (that is, Type[] types = new Type[0]) to get a property that is not indexed."
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: An array of <xref href="System.Reflection.ParameterModifier"></xref> objects representing the attributes associated with the corresponding element in the <code>types</code> array. The default binder does not process this parameter.
    return:
      type: System.Reflection.PropertyInfo
      description: An object representing the property that matches the specified requirements, if found; otherwise, `null`.
  overload: System.Type.GetPropertyImpl*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one property is found with the specified name and matching the specified binding constraints.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>types</code> is `null`.  \n  \n -or-  \n  \n One of the elements in <code>types</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>types</code> is multidimensional.  \n  \n -or-  \n  \n <code>modifiers</code> is multidimensional.  \n  \n -or-  \n  \n <code>types</code> and <code>modifiers</code> do not have the same length."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current type is a <xref href="System.Reflection.Emit.TypeBuilder"></xref>, <xref href="System.Reflection.Emit.EnumBuilder"></xref>, or <xref href="System.Reflection.Emit.GenericTypeParameterBuilder"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)
  id: GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean, Boolean)
  nameWithType: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean, Boolean)
  fullName: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.
  remarks: "Use this method overload and its associated overloads (<xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> and <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%29>) to replace the default implementation of the <xref:System.Type.GetType%2A> method with more flexible implementations. By providing your own methods that resolve type names and the names of the assemblies that contain them, you can do the following:  \n  \n-   Control which version of an assembly a type is loaded from.  \n  \n-   Provide another place to look for a type name that does not include an assembly name.  \n  \n-   Load assemblies using partial assembly names.  \n  \n-   Return subclasses of <xref:System.Type?displayProperty=fullName> that are not created by the common language runtime (CLR).  \n  \n For example, in version-tolerant serialization this method enables you to search for a \"best fit\" assembly by using a partial name. Other overloads of the <xref:System.Type.GetType%2A> method require an assembly-qualified type name, which includes the version number.  \n  \n Alternate implementations of the type system may need to return subclasses of <xref:System.Type?displayProperty=fullName> that are not created by the CLR; all types that are returned by other overloads of the <xref:System.Type.GetType%2A> method are runtime types.  \n  \n<a name=\"usage_notes\"></a>   \n## Usage Notes  \n This method overload and its associated overloads parse `typeName` into the name of a type and the name of an assembly, and then resolve the names. Resolution of the assembly name occurs before resolution of the type name, because a type name must be resolved in the context of an assembly.  \n  \n> [!NOTE]\n>  If you are unfamiliar with the concept of assembly-qualified type names, see the <xref:System.Type.AssemblyQualifiedName%2A> property.  \n  \n If `typeName` is not an assembly-qualified name, assembly resolution is skipped. Unqualified type names can be resolved in the context of Mscorlib.dll or the currently executing assembly, or you can optionally provide an assembly in the `typeResolver` parameter. The effects of including or omitting the assembly name for different kinds of name resolution are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section.  \n  \n General usage notes:  \n  \n-   Do not pass methods to `assemblyResolver` or `typeResolver` if they come from unknown or untrusted callers. Use only methods that you provide or that you are familiar with.  \n  \n    > [!CAUTION]\n    >  Using methods from unknown or untrusted callers could result in elevation of privilege for malicious code.  \n  \n-   If you omit the `assemblyResolver` and/or `typeResolver` parameters, the value of the `throwOnError` parameter is passed to the methods that perform the default resolution.  \n  \n-   If `throwOnError` is `true`, this method throws a <xref:System.TypeLoadException> when `typeResolver` returns `null`, and a <xref:System.IO.FileNotFoundException> when `assemblyResolver` returns `null`.  \n  \n-   This method does not catch exceptions thrown by `assemblyResolver` and `typeResolver`. You are responsible for any exceptions that are thrown by the resolver methods.  \n  \n<a name=\"resolving_assemblies\"></a>   \n### Resolving Assemblies  \n The `assemblyResolver` method receives an <xref:System.Reflection.AssemblyName> object, which is produced by parsing the string assembly name that is included in `typeName`. If `typeName` does not contain an assembly name, `assemblyResolver` is not called and `null` is passed to `typeResolver`.  \n  \n If `assemblyResolver` is not supplied, standard assembly probing is used to locate the assembly. If `assemblyResolver` is provided, the <xref:System.Type.GetType%2A> method does not do standard probing; in that case you must ensure that your `assemblyResolver` can handle all the assemblies you pass to it.  \n  \n The `assemblyResolver` method should return `null` if the assembly cannot be resolved. If `assemblyResolver` returns `null`, `typeResolver` is not called and no further processing occurs; additionally, if `throwOnError` is `true`, a <xref:System.IO.FileNotFoundException> is thrown.  \n  \n If the <xref:System.Reflection.AssemblyName> that is passed to `assemblyResolver` is a partial name, one or more of its parts are `null`. For example, if it has no version, the <xref:System.Reflection.AssemblyName.Version%2A> property is `null`. If the <xref:System.Reflection.AssemblyName.Version%2A> property, the <xref:System.Reflection.AssemblyName.CultureInfo%2A> property, and the <xref:System.Reflection.AssemblyName.GetPublicKeyToken%2A> method all return `null`, then only the simple name of the assembly was supplied. The `assemblyResolver` method can use or ignore all parts of the assembly name.  \n  \n The effects of different assembly resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.  \n  \n<a name=\"resolving_types\"></a>   \n### Resolving Types  \n If `typeName` does not specify an assembly name, `typeResolver` is always called. If `typeName` specifies an assembly name, `typeResolver` is called only when the assembly name is successfully resolved. If `assemblyResolver` or standard assembly probing returns `null`, `typeResolver` is not called.  \n  \n The `typeResolver` method receives three arguments:  \n  \n-   The assembly to search or `null` if `typeName` does not contain an assembly name.  \n  \n-   The simple name of the type. In the case of a nested type, this is the outermost containing type. In the case of a generic type, this is the simple name of the generic type.  \n  \n-   A Boolean value that is `true` if the case of type names is to be ignored.  \n  \n The implementation determines the way these arguments are used. The `typeResolver` method should return `null` if it cannot resolve the type. If `typeResolver` returns `null` and `throwOnError` is `true`, this overload of <xref:System.Type.GetType%2A> throws a <xref:System.TypeLoadException>.  \n  \n The effects of different type resolution options are displayed as a table in the [Mixed Name Resolution](#mixed_name_resolution) section, for simple and assembly-qualified type names.  \n  \n#### Resolving Nested Types  \n If `typeName` is a nested type, only the name of the outermost containing type is passed to `typeResolver`. When `typeResolver` returns this type, the <xref:System.Type.GetNestedType%2A> method is called recursively until the innermost nested type has been resolved.  \n  \n#### Resolving Generic Types  \n The <xref:System.Type.GetType%2A> is called recursively to resolve generic types: First to resolve the generic type itself, and then to resolve its type arguments. If a type argument is generic, <xref:System.Type.GetType%2A> is called recursively to resolve its type arguments, and so on.  \n  \n The combination of `assemblyResolver` and `typeResolver` that you provide must be capable of resolving all levels of this recursion. For example, suppose you supply an `assemblyResolver` that controls the loading of `MyAssembly`. Suppose you want to resolve the generic type `Dictionary<string, MyType>` (`Dictionary(Of String, MyType)` in Visual Basic). You might pass the following generic type name:  \n  \n```  \n\"System.Collections.Generic.Dictionary`2[System.String,[MyNamespace.MyType, MyAssembly]]\"  \n```  \n  \n Notice that `MyType` is the only assembly-qualified type argument. The names of the <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String> classes are not assembly-qualified. Your `typeResolver` must be able handle either an assembly or `null`, because it will receive `null` for <xref:System.Collections.Generic.Dictionary%602> and <xref:System.String>. It can handle that case by calling an overload of the <xref:System.Type.GetType%2A> method that takes a string, because both of the unqualified type names are in Mscorlib.dll:  \n  \n [!code-csharp[GetTypeOnSteroids#1](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#1)]  \n  \n The `assemblyResolver` method is not called for the dictionary type and the string type, because those type names are not assembly-qualified.  \n  \n Now suppose that instead of `System.String`, the first generic argument type is `YourType`, from `YourAssembly`:  \n  \n```  \n\"System.Collections.Generic.Dictionary`2[[YourNamespace.YourType, YourAssembly, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null], [MyNamespace.MyType, MyAssembly]]\"  \n```  \n  \n Because this assembly is neither Mscorlib.dll nor the currently executing assembly, you cannot resolve `YourType` without an assembly-qualified name. Because your `assemblyResolve` will be called recursively, it must be able to handle this case. Instead of returning `null` for assemblies other than `MyAssembly`, it now performs an assembly load using the supplied <xref:System.Reflection.AssemblyName> object.  \n  \n [!code-csharp[GetTypeOnSteroids#2](~/samples/snippets/csharp/VS_Snippets_CLR/gettypeonsteroids/cs/source.cs#2)]  \n  \n Back to [Usage Notes](#usage_notes).  \n  \n#### Resolving Type Names with Special Characters  \n Certain characters have special meanings in assembly-qualified names. If a simple type name contains these characters, the characters cause parsing errors when the simple name is part of an assembly-qualified name. To avoid the parsing errors, you must escape the special characters with a backslash before you can pass the assembly-qualified name to the <xref:System.Type.GetType%2A> method. For example, if a type is named `Strange]Type`, the escape character must be added ahead of the square bracket as follows: `Strange\\]Type`.  \n  \n> [!NOTE]\n>  Names with such special characters cannot be created in Visual Basic or C#, but can be created by using Microsoft intermediate language (MSIL) or by emitting dynamic assemblies.  \n  \n The following table shows the special characters for type names.  \n  \n|Character|Meaning|  \n|---------------|-------------|  \n|, (comma)|Delimiter for assembly-qualified names.|  \n|[] (square brackets)|As a suffix pair, indicates an array type; as a delimiter pair, encloses generic argument lists and assembly-qualified names.|  \n|& (ampersand)|As a suffix, indicates that a type is a reference type.|  \n|* (asterisk)|As a suffix, indicates that a type is a pointer type.|  \n|+ (plus)|Delimiter for nested types.|  \n|\\ (backslash)|Escape character.|  \n  \n Properties such as <xref:System.Type.AssemblyQualifiedName%2A> return correctly escaped strings. You must pass correctly escaped strings to the <xref:System.Type.GetType%2A> method. In turn, the <xref:System.Type.GetType%2A> method passes correctly escaped names to `typeResolver` and to the default type resolution methods. If you need to compare a name to an unescaped name in `typeResolver`, you must remove the escape characters.  \n  \n Back to [Usage Notes](#usage_notes).  \n  \n<a name=\"mixed_name_resolution\"></a>   \n## Mixed Name Resolution  \n The following table summarizes the interactions between `assemblyResolver`, `typeResolver`, and default name resolution, for all combinations of type name and assembly name in `typeName`:  \n  \n|Contents of type name|Assembly resolver method|Type resolver method|Result|  \n|---------------------------|------------------------------|--------------------------|------------|  \n|type, assembly|null|null|Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> method overload.|  \n|type, assembly|provided|null|`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly. If the assembly is resolved, the <xref:System.Reflection.Assembly.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> method overload is used to load the type from the assembly; otherwise, there is no attempt to resolve the type.|  \n|type, assembly|null|provided|Equivalent to converting the assembly name to an <xref:System.Reflection.AssemblyName> object and calling the <xref:System.Reflection.Assembly.Load%28System.Reflection.AssemblyName%29?displayProperty=fullName> method overload to get the assembly. If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.|  \n|type, assembly|provided|provided|`assemblyResolver` returns the assembly or returns `null` if it cannot resolve the assembly. If the assembly is resolved, it is passed to `typeResolver`; otherwise, `typeResolver` is not called and there is no further attempt to resolve the type.|  \n|type|null, provided|null|Equivalent to calling the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName> method overload. Because the assembly name is not provided, only Mscorlib.dll and the currently executing assembly are searched. If `assemblyResolver` is provided, it is ignored.|  \n|type|null, provided|provided|`typeResolver` is called, and `null` is passed for the assembly. `typeResolver` can provide a type from any assembly, including assemblies it loads for the purpose. If `assemblyResolver` is provided, it is ignored.|  \n|assembly|null, provided|null, provided|A <xref:System.IO.FileLoadException> is thrown, because the assembly name is parsed as if it were an assembly-qualified type name. This results in an invalid assembly name.|  \n  \n Back to: [Usage Notes](#usage_notes), [Resolving Assemblies](#resolving_assemblies), [Resolving Types](#resolving_types)."
  syntax:
    content: public static Type GetType (string typeName, Func<System.Reflection.AssemblyName,System.Reflection.Assembly> assemblyResolver, Func<System.Reflection.Assembly,string,bool,Type> typeResolver, bool throwOnError, bool ignoreCase);
    parameters:
    - id: typeName
      type: System.String
      description: The name of the type to get. If the <code>typeResolver</code> parameter is provided, the type name can be any string that <code>typeResolver</code> is capable of resolving. If the <code>assemblyResolver</code> parameter is provided or if standard type resolution is used, <code>typeName</code> must be an assembly-qualified name (see <xref href="System.Type.AssemblyQualifiedName"></xref>), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.
    - id: assemblyResolver
      type: System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly}
      description: "A method that locates and returns the assembly that is specified in <code>typeName</code>. The assembly name is passed to <code>assemblyResolver</code> as an <xref href=\"System.Reflection.AssemblyName\"></xref> object. If <code>typeName</code> does not contain the name of an assembly, <code>assemblyResolver</code> is not called. If <code>assemblyResolver</code> is not supplied, standard assembly resolution is performed.  \n  \n Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with."
    - id: typeResolver
      type: System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type}
      description: "A method that locates and returns the type that is specified by <code>typeName</code> from the assembly that is returned by <code>assemblyResolver</code> or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; the value of <code>ignoreCase</code> is passed to that parameter.  \n  \n Caution   Do not pass methods from unknown or untrusted callers."
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type cannot be found; `false` to return `null`. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.'
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to perform a case-insensitive search for <code>typeName</code>, `false` to perform a case-sensitive search for <code>typeName</code>.'
    return:
      type: System.Type
      description: The type with the specified name. If the type is not found, the <code>throwOnError</code> parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <code>throwOnError</code>. See the Exceptions section.
  overload: System.Type.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "<code>throwOnError</code> is `true` and the type is not found.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> contains invalid characters, such as an embedded tab.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> is an empty string.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> represents an array type with an invalid size.  \n  \n -or-  \n  \n <code>typeName</code> represents an array of <xref href=\"System.TypedReference\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An error occurs when <code>typeName</code> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> contains invalid syntax (for example, \"MyType[,*,]\").  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has a pointer type, a `ByRef` type, or <xref href=\"System.Void\"></xref> as one of its type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has an incorrect number of type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>throwOnError</code> is `true` and the assembly or one of its dependencies was not found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "The assembly or one of its dependencies was found, but could not be loaded.  \n  \n -or-  \n  \n <code>typeName</code> contains an invalid assembly name.  \n  \n -or-  \n  \n <code>typeName</code> is a valid assembly name without a type name."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "The assembly or one of its dependencies is not valid.  \n  \n -or-  \n  \n The assembly was compiled with a later version of the common language runtime than the version that is currently loaded."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)
  id: GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean)
  nameWithType: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean)
  fullName: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.
  remarks: "Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.  \n  \n Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `ignoreCase` parameter."
  syntax:
    content: public static Type GetType (string typeName, Func<System.Reflection.AssemblyName,System.Reflection.Assembly> assemblyResolver, Func<System.Reflection.Assembly,string,bool,Type> typeResolver, bool throwOnError);
    parameters:
    - id: typeName
      type: System.String
      description: The name of the type to get. If the <code>typeResolver</code> parameter is provided, the type name can be any string that <code>typeResolver</code> is capable of resolving. If the <code>assemblyResolver</code> parameter is provided or if standard type resolution is used, <code>typeName</code> must be an assembly-qualified name (see <xref href="System.Type.AssemblyQualifiedName"></xref>), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.
    - id: assemblyResolver
      type: System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly}
      description: "A method that locates and returns the assembly that is specified in <code>typeName</code>. The assembly name is passed to <code>assemblyResolver</code> as an <xref href=\"System.Reflection.AssemblyName\"></xref> object. If <code>typeName</code> does not contain the name of an assembly, <code>assemblyResolver</code> is not called. If <code>assemblyResolver</code> is not supplied, standard assembly resolution is performed.  \n  \n Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with."
    - id: typeResolver
      type: System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type}
      description: "A method that locates and returns the type that is specified by <code>typeName</code> from the assembly that is returned by <code>assemblyResolver</code> or by standard assembly resolution. If no assembly is provided, the method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; `false` is passed to that parameter.  \n  \n Caution   Do not pass methods from unknown or untrusted callers."
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type cannot be found; `false` to return `null`. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.'
    return:
      type: System.Type
      description: The type with the specified name. If the type is not found, the <code>throwOnError</code> parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <code>throwOnError</code>. See the Exceptions section.
  overload: System.Type.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "<code>throwOnError</code> is `true` and the type is not found.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> contains invalid characters, such as an embedded tab.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> is an empty string.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> represents an array type with an invalid size.  \n  \n -or-  \n  \n <code>typeName</code> represents an array of <xref href=\"System.TypedReference\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An error occurs when <code>typeName</code> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> contains invalid syntax (for example, \"MyType[,*,]\").  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has a pointer type, a `ByRef` type, or <xref href=\"System.Void\"></xref> as one of its type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has an incorrect number of type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<code>throwOnError</code> is `true` and the assembly or one of its dependencies was not found.  \n  \n -or-  \n  \n <code>typeName</code> contains an invalid assembly name.  \n  \n -or-  \n  \n <code>typeName</code> is a valid assembly name without a type name."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: The assembly or one of its dependencies was found, but could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "The assembly or one of its dependencies is not valid.  \n  \n -or-  \n  \n The assembly was compiled with a later version of the common language runtime than the version that is currently loaded."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})
  commentId: M:System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})
  id: GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})
  parent: System.Type
  langs:
  - csharp
  name: GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>)
  nameWithType: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>)
  fullName: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.
  remarks: "Usage scenarios for this method and details about the `assemblyResolver` and `typeResolver` parameters can be found in the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload.  \n  \n> [!NOTE]\n>  If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%29> method returns `null`. It does not throw an exception. To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.  \n  \n Calling this method overload is the same as calling the <xref:System.Type.GetType%28System.String%2CSystem.Func%7BSystem.Reflection.AssemblyName%2CSystem.Reflection.Assembly%7D%2CSystem.Func%7BSystem.Reflection.Assembly%2CSystem.String%2CSystem.Boolean%2CSystem.Type%7D%2CSystem.Boolean%2CSystem.Boolean%29> method overload and specifying `false` for the `throwOnError` and `ignoreCase` parameters."
  syntax:
    content: public static Type GetType (string typeName, Func<System.Reflection.AssemblyName,System.Reflection.Assembly> assemblyResolver, Func<System.Reflection.Assembly,string,bool,Type> typeResolver);
    parameters:
    - id: typeName
      type: System.String
      description: The name of the type to get. If the <code>typeResolver</code> parameter is provided, the type name can be any string that <code>typeResolver</code> is capable of resolving. If the <code>assemblyResolver</code> parameter is provided or if standard type resolution is used, <code>typeName</code> must be an assembly-qualified name (see <xref href="System.Type.AssemblyQualifiedName"></xref>), unless the type is in the currently executing assembly or in Mscorlib.dll, in which case it is sufficient to supply the type name qualified by its namespace.
    - id: assemblyResolver
      type: System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly}
      description: "A method that locates and returns the assembly that is specified in <code>typeName</code>. The assembly name is passed to <code>assemblyResolver</code> as an <xref href=\"System.Reflection.AssemblyName\"></xref> object. If <code>typeName</code> does not contain the name of an assembly, <code>assemblyResolver</code> is not called. If <code>assemblyResolver</code> is not supplied, standard assembly resolution is performed.  \n  \n Caution   Do not pass methods from unknown or untrusted callers. Doing so could result in elevation of privilege for malicious code. Use only methods that you provide or that you are familiar with."
    - id: typeResolver
      type: System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type}
      description: "A method that locates and returns the type that is specified by <code>typeName</code> from the assembly that is returned by <code>assemblyResolver</code> or by standard assembly resolution. If no assembly is provided, the <code>typeResolver</code> method can provide one. The method also takes a parameter that specifies whether to perform a case-insensitive search; `false` is passed to that parameter.  \n  \n Caution   Do not pass methods from unknown or untrusted callers."
    return:
      type: System.Type
      description: The type with the specified name, or `null` if the type is not found.
  overload: System.Type.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "An error occurs when <code>typeName</code> is parsed into a type name and an assembly name (for example, when the simple type name includes an unescaped special character).  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has a pointer type, a `ByRef` type, or <xref href=\"System.Void\"></xref> as one of its type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has an incorrect number of type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typeName</code> represents an array of <xref href="System.TypedReference"></xref>.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "The assembly or one of its dependencies was found, but could not be loaded.  \n  \n -or-  \n  \n <code>typeName</code> contains an invalid assembly name.  \n  \n -or-  \n  \n <code>typeName</code> is a valid assembly name without a type name."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "The assembly or one of its dependencies is not valid.  \n  \n -or-  \n  \n The assembly was compiled with a later version of the common language runtime than the version that is currently loaded."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetType
  commentId: M:System.Type.GetType
  id: GetType
  parent: System.Type
  langs:
  - csharp
  name: GetType()
  nameWithType: Type.GetType()
  fullName: Type.GetType()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the current <xref href="System.Type"></xref>.
  syntax:
    content: public Type GetType ();
    parameters: []
    return:
      type: System.Type
      description: The current <xref href="System.Type"></xref>.
  overload: System.Type.GetType*
  exceptions:
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetType(System.String,System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Boolean)
  id: GetType(System.String,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetType(String, Boolean)
  nameWithType: Type.GetType(String, Boolean)
  fullName: Type.GetType(String, Boolean)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the <xref href="System.Type"></xref> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.
  remarks: "You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name. <xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`. You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects. If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.  \n  \n `GetType` only works on assemblies loaded from disk. If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior. The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName> enumeration. If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly. If the assembly has not been saved to disk when `GetType` is called, the method returns `null`. `GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.  \n  \n To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event and call `GetType` before saving. Otherwise, you will get two copies of the assembly in memory.  \n  \n The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section. Some exceptions are thrown regardless of the value of `throwOnError`. For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.  \n  \n `typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification. See <xref:System.Type.AssemblyQualifiedName%2A>.  \n  \n If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order. If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly. If the assembly has a strong name, a complete assembly name is required.  \n  \n The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic arguments. All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons. You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method to load types from the assembly. See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  \n  \n|Delimiter|Meaning|  \n|---------------|-------------|  \n|Backslash (\\\\)|Escape character.|  \n|Backtick (`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.|  \n|Brackets ([])|Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.|  \n|Comma (,)|Precedes the Assembly name.|  \n|Period (.)|Denotes namespace identifiers.|  \n|Plus sign (+)|Precedes a nested class.|  \n  \n For example, the fully qualified name for a class might look like this:  \n  \n```  \nTopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  \n```  \n  \n If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\\\) to prevent it from being interpreted as a nesting separator. Reflection emits this string as follows:  \n  \n```  \nTopNamespace.Sub\\+Namespace.ContainingClass+NestedClass,MyAssembly  \n```  \n  \n A \"++\" becomes \"\\\\+\\\\+\", and a \"\\\\\" becomes \"\\\\\\\\\".  \n  \n This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  \n  \n Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.  \n  \n Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  \n  \n The name of a generic type ends with a backtick (\\`) followed by digits representing the number of generic type arguments. The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope. For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\\<T0, T1>` in Visual C#.  \n  \n For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas. For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters. A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:  \n  \n```  \nSystem.Collections.Generic.Dictionary`2[System.String,MyType]  \n```  \n  \n To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets. Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments. For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:  \n  \n```  \nType.GetType(\"System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]\")  \n```  \n  \n> [!NOTE]\n>  An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list. The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.  \n  \n Nullable types are a special case of generic types. For example, a nullable <xref:System.Int32> is represented by the string \"System.Nullable`1[System.Int32]\".  \n  \n> [!NOTE]\n>  In C#, C++, and Visual Basic you can also get nullable types using type operators. For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.  \n  \n The following table shows the syntax you use with `GetType` for various types.  \n  \n|To Get|Use|  \n|------------|---------|  \n|A nullable <xref:System.Int32>|`Type.GetType(\"System.Nullable`1[System.Int32]\")`|  \n|An unmanaged pointer to `MyType`|`Type.GetType(\"MyType*\")`|  \n|An unmanaged pointer to a pointer to `MyType`|`Type.GetType(\"MyType**\")`|  \n|A managed pointer or reference to `MyType`|`Type.GetType(\"MyType&\")`. Note that unlike pointers, references are limited to one level.|  \n|A parent class and a nested class|`Type.GetType(\"MyParentClass+MyNestedClass\")`|  \n|A one-dimensional array with a lower bound of 0|`Type.GetType(\"MyArray[]\")`|  \n|A one-dimensional array with an unknown lower bound|`Type.GetType(\"MyArray[*]\")`|  \n|An n-dimensional array|A comma (,) inside the brackets a total of n-1 times. For example, `System.Object[,,]` represents a three-dimensional `Object` array.|  \n|A two-dimensional array's array|`Type.GetType(\"MyArray[][]\")`|  \n|A rectangular two-dimensional array with unknown lower bounds|`Type.GetType(\"MyArray[,]\")`|  \n|A generic type with one type argument|`Type.GetType(\"MyGenericType`1[MyType]\")`|  \n|A generic type with two type arguments|`Type.GetType(\"MyGenericType`2[MyType,AnotherType]\")`|  \n|A generic type with two assembly-qualified type arguments|`Type.GetType(\"MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]\")`|  \n|An assembly-qualified generic type with an assembly-qualified type argument|`Type.GetType(\"MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly\")`|  \n|A generic type whose type argument is a generic type with two type arguments|`Type.GetType(\"MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]\")`|"
  example:
  - "The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`. If a type object refers to an assembly that does not exist, this example throws an exception.  \n  \n [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]\n [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]\n [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]"
  syntax:
    content: public static Type GetType (string typeName, bool throwOnError);
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See <xref href="System.Type.AssemblyQualifiedName"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type cannot be found; `false` to return `null`. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.'
    return:
      type: System.Type
      description: The type with the specified name. If the type is not found, the <code>throwOnError</code> parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <code>throwOnError</code>. See the Exceptions section.
  overload: System.Type.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "<code>throwOnError</code> is `true` and the type is not found.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> contains invalid characters, such as an embedded tab.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> is an empty string.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> represents an array type with an invalid size.  \n  \n -or-  \n  \n <code>typeName</code> represents an array of <xref href=\"System.TypedReference\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>throwOnError</code> is `true` and <code>typeName</code> contains invalid syntax. For example, \"MyType[,*,]\".  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has a pointer type, a `ByRef` type, or <xref href=\"System.Void\"></xref> as one of its type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has an incorrect number of type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>throwOnError</code> is `true` and the assembly or one of its dependencies was not found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The assembly or one of its dependencies was found, but could not be loaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "The assembly or one of its dependencies is not valid.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetType(System.String)
  commentId: M:System.Type.GetType(System.String)
  id: GetType(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetType(String)
  nameWithType: Type.GetType(String)
  fullName: Type.GetType(String)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the <xref href="System.Type"></xref> with the specified name, performing a case-sensitive search.
  remarks: "You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if you know its namespace-qualified name. <xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`. You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A> method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects. If a type is in an assembly known to your program at compile time, it is more efficient to use  in C#, <xref:System.Type.GetType%2A> in Visual Basic, or  in C++.  \n  \n> [!NOTE]\n>  If `typeName` cannot be found, the call to the <xref:System.Type.GetType%28System.String%29> method returns `null`. It does not throw an exception. To control whether an exception is thrown, call an overload of the <xref:System.Type.GetType%2A> method that has a `throwOnError` parameter.  \n  \n <xref:System.Type.GetType%2A>GetType only works on assemblies loaded from disk. If you call <xref:System.Type.GetType%2A> to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior. The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName> enumeration. If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly. If the assembly has not been saved to disk when `GetType` is called, the method returns `null`. `GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.  \n  \n To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event and call `GetType` before saving. Otherwise, you will get two copies of the assembly in memory.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.  \n  \n `typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification. See <xref:System.Type.AssemblyQualifiedName%2A>.  \n  \n If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order. If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly. If the assembly has a strong name, a complete assembly name is required.  \n  \n The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and generic type arguments. All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons. You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method to load types from the assembly. See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  \n  \n|Delimiter|Meaning|  \n|---------------|-------------|  \n|Backslash (\\\\)|Escape character.|  \n|Backtick (`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.|  \n|Brackets ([])|Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.|  \n|Comma (,)|Precedes the Assembly name.|  \n|Period (.)|Denotes namespace identifiers.|  \n|Plus sign (+)|Precedes a nested class.|  \n  \n For example, the fully qualified name for a class might look like this:  \n  \n```  \nTopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  \n```  \n  \n If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\\\) to prevent it from being interpreted as a nesting separator. Reflection emits this string as follows:  \n  \n```  \nTopNamespace.Sub\\+Namespace.ContainingClass+NestedClass,MyAssembly  \n```  \n  \n A \"++\" becomes \"\\\\+\\\\+\", and a \"\\\\\" becomes \"\\\\\\\\\".  \n  \n This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  \n  \n Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.  \n  \n Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  \n  \n The name of a generic type ends with a backtick (\\`) followed by digits representing the number of generic type arguments. The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope. For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\\<T0, T1>` in Visual C#.  \n  \n For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas. For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters. A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:  \n  \n```  \nSystem.Collections.Generic.Dictionary`2[System.String,MyType]  \n```  \n  \n To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets. Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments. For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` fromMyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:  \n  \n```  \nType.GetType(\"System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]\")  \n```  \n  \n> [!NOTE]\n>  An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list. The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.  \n  \n Nullable types are a special case of generic types. For example, a nullable <xref:System.Int32> is represented by the string \"System.Nullable`1[System.Int32]\".  \n  \n> [!NOTE]\n>  In C#, C++, and Visual Basic you can also get nullable types using type operators. For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.  \n  \n The following table shows the syntax you use with `GetType` for various types.  \n  \n|To Get|Use|  \n|------------|---------|  \n|A nullable <xref:System.Int32>|`Type.GetType(\"System.Nullable`1[System.Int32]\")`|  \n|An unmanaged pointer to `MyType`|`Type.GetType(\"MyType*\")`|  \n|An unmanaged pointer to a pointer to `MyType`|`Type.GetType(\"MyType**\")`|  \n|A managed pointer or reference to `MyType`|`Type.GetType(\"MyType&\")`. Note that unlike pointers, references are limited to one level.|  \n|A parent class and a nested class|`Type.GetType(\"MyParentClass+MyNestedClass\")`|  \n|A one-dimensional array with a lower bound of 0|`Type.GetType(\"MyType[]\")`|  \n|A one-dimensional array with an unknown lower bound|`Type.GetType(\"MyType[*]\")`|  \n|An n-dimensional array|A comma (,) inside the brackets a total of n-1 times. For example, `System.Object[,,]` represents a three-dimensional `Object` array.|  \n|An array of one-dimensional arrays|`Type.GetType(\"MyType[][]\")`|  \n|A rectangular two-dimensional array with unknown lower bounds|`Type.GetType(\"MyType[,]\")`|  \n|A generic type with one type argument|`Type.GetType(\"MyGenericType`1[MyType]\")`|  \n|A generic type with two type arguments|`Type.GetType(\"MyGenericType`2[MyType,AnotherType]\")`|  \n|A generic type with two assembly-qualified type arguments|`Type.GetType(\"MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]\")`|  \n|An assembly-qualified generic type with an assembly-qualified type argument|`Type.GetType(\"MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly\")`|  \n|A generic type whose type argument is a generic type with two type arguments|`Type.GetType(\"MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]\")`|"
  example:
  - "The following example retrieves the type of `System.Int32` and uses that type object to display the <xref:System.Type.FullName%2A> property of `System.Int32`.  \n  \n [!code-cpp[Type_GetType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetType/CPP/type_gettype.cpp#1)]\n [!code-csharp[Type_GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetType/CS/type_gettype.cs#1)]\n [!code-vb[Type_GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetType/VB/type_gettype.vb#1)]"
  syntax:
    content: public static Type GetType (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See <xref href="System.Type.AssemblyQualifiedName"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    return:
      type: System.Type
      description: The type with the specified name, if found; otherwise, `null`.
  overload: System.Type.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>typeName</code> represents a generic type that has a pointer type, a `ByRef` type, or <xref href=\"System.Void\"></xref> as one of its type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has an incorrect number of type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>typeName</code> represents an array of <xref href="System.TypedReference"></xref>.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The assembly or one of its dependencies was found, but could not be loaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "The assembly or one of its dependencies is not valid.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetType(String, Boolean, Boolean)
  nameWithType: Type.GetType(String, Boolean, Boolean)
  fullName: Type.GetType(String, Boolean, Boolean)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the <xref href="System.Type"></xref> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.
  remarks: "You can use the <xref:System.Type.GetType%2A> method to obtain a <xref:System.Type> object for a type in another assembly, if the you know its namespace-qualified name. <xref:System.Type.GetType%2A> causes loading of the assembly specified in `typeName`. You can also load an assembly using the <xref:System.Reflection.Assembly.Load%2A>method, and then use the <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetTypes%2A> methods of the <xref:System.Reflection.Assembly> class to get <xref:System.Type> objects. If a type is in an assembly known to your program at compile time, it is more efficient to use `typeof` in C#, <xref:System.Type.GetType%2A> in Visual Basic, or `typeid` in C++.  \n  \n `GetType` only works on assemblies loaded from disk. If you call `GetType` to look up a type defined in a dynamic assembly defined using the <xref:System.Reflection.Emit> services, you might get inconsistent behavior. The behavior depends on whether the dynamic assembly is persistent, that is, created using the `RunAndSave` or `Save` access modes of the <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName> enumeration. If the dynamic assembly is persistent and has been written to disk before `GetType` is called, the loader finds the saved assembly on disk, loads that assembly, and retrieves the type from that assembly. If the assembly has not been saved to disk when `GetType` is called, the method returns `null`. `GetType` does not understand transient dynamic assemblies; therefore, calling `GetType` to retrieve a type in a transient dynamic assembly returns `null`.  \n  \n To use `GetType` on a dynamic module, subscribe to the <xref:System.AppDomain.AssemblyResolve?displayProperty=fullName> event and call `GetType` before saving. Otherwise, you will get two copies of the assembly in memory.  \n  \n The `throwOnError` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section. Some exceptions are thrown regardless of the value of `throwOnError`. For example, if the type is found but cannot be loaded, a <xref:System.TypeLoadException> is thrown even if `throwOnError` is `false`.  \n  \n The following table shows what members of a base class are returned by the `Get` methods when reflecting on a type.  \n  \n|Member Type|Static|Non-Static|  \n|-----------------|------------|-----------------|  \n|Constructor|No|No|  \n|Field|No|Yes. A field is always hide-by-name-and-signature.|  \n|Event|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n|Method|No|Yes. A method (both virtual and non-virtual) can be hide-by-name or hide-by-name-and-signature.|  \n|Nested Type|No|No|  \n|Property|Not applicable|The common type system rule is that the inheritance is the same as that of the methods that implement the property. Reflection treats properties as hide-by-name-and-signature. See note 2 below.|  \n  \n1.  Hide-by-name-and-signature considers all of the parts of the signature, including custom modifiers, return types, parameter types, sentinels, and unmanaged calling conventions. This is a binary comparison.  \n  \n2.  For reflection, properties and events are hide-by-name-and-signature. If you have a property with both a get and a set accessor in the base class, but the derived class has only a get accessor, the derived class property hides the base class property, and you will not be able to access the setter on the base class.  \n  \n3.  Custom attributes are not part of the common type system.  \n  \n Arrays or COM types are not searched for unless they have already been loaded into the table of available classes.  \n  \n `typeName` can be the type name qualified by its namespace or an assembly-qualified name that includes an assembly name specification. See <xref:System.Type.AssemblyQualifiedName%2A>.  \n  \n If `typeName` includes the namespace but not the assembly name, this method searches only the calling object's assembly and Mscorlib.dll, in that order. If typeName is fully qualified with the partial or complete assembly name, this method searches in the specified assembly. If the assembly has a strong name, a complete assembly name is required.  \n  \n The <xref:System.Type.AssemblyQualifiedName%2A> property returns a fully qualified type name including nested types, the assembly name, and type arguments. All compilers that support the common language runtime will emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.  \n  \n> [!NOTE]\n>  In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, it is not included in the string returned by the <xref:System.Type.AssemblyQualifiedName%2A> property, for compatibility reasons. You can also load types by creating an <xref:System.Reflection.AssemblyName> object and passing it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. You can then use the <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method to load types from the assembly. See also <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>.  \n  \n|Delimiter|Meaning|  \n|---------------|-------------|  \n|Backslash (\\\\)|Escape character.|  \n|Backtick (`)|Precedes one or more digits representing the number of type parameters, located at the end of the name of a generic type.|  \n|Brackets ([])|Enclose a generic type argument list, for a constructed generic type; within a type argument list, enclose an assembly-qualified type.|  \n|Comma (,)|Precedes the Assembly name.|  \n|Period (.)|Denotes namespace identifiers.|  \n|Plus sign (+)|Precedes a nested class.|  \n  \n For example, the fully qualified name for a class might look like this:  \n  \n```  \nTopNamespace.SubNameSpace.ContainingClass+NestedClass,MyAssembly  \n```  \n  \n If the namespace were TopNamespace.Sub+Namespace, then the string would have to precede the plus sign (+) with an escape character (\\\\) to prevent it from being interpreted as a nesting separator. Reflection emits this string as follows:  \n  \n```  \nTopNamespace.Sub\\+Namespace.ContainingClass+NestedClass,MyAssembly  \n```  \n  \n A \"++\" becomes \"\\\\+\\\\+\", and a \"\\\\\" becomes \"\\\\\\\\\".  \n  \n This qualified name can be persisted and later used to load the <xref:System.Type>. To search for and load a <xref:System.Type>, use <xref:System.Type.GetType%2A> either with the type name only or with the assembly qualified type name. <xref:System.Type.GetType%2A> with the type name only will look for the <xref:System.Type> in the caller's assembly and then in the System assembly. <xref:System.Type.GetType%2A> with the assembly qualified type name will look for the <xref:System.Type> in any assembly.  \n  \n Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use `t.GetElementType().ToString()`, where `t` is the type.  \n  \n Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.  \n  \n The name of a generic type ends with a backtick (\\`) followed by digits representing the number of generic type arguments. The purpose of this name mangling is to allow compilers to support generic types with the same name but with different numbers of type parameters, occurring in the same scope. For example, reflection returns the mangled names `Tuple`1` and `Tuple`2` from the generic methods `Tuple(Of T)` and `Tuple(Of T0, T1)` in Visual Basic, or `Tuple<T>` and Tuple`\\<T0, T1>` in Visual C#.  \n  \n For generic types, the type argument list is enclosed in brackets, and the type arguments are separated by commas. For example, a generic <xref:System.Collections.Generic.Dictionary%602> has two type parameters. A <xref:System.Collections.Generic.Dictionary%602> of `MyType` with keys of type <xref:System.String> might be represented as follows:  \n  \n```  \nSystem.Collections.Generic.Dictionary`2[System.String,MyType]  \n```  \n  \n To specify an assembly-qualified type within a type argument list, enclose the assembly-qualified type within brackets. Otherwise, the commas that separate the parts of the assembly-qualified name are interpreted as delimiting additional type arguments. For example, a <xref:System.Collections.Generic.Dictionary%602> of `MyType` from MyAssembly.dll, with keys of type <xref:System.String>, might be specified as follows:  \n  \n```  \nType.GetType(\"System.Collections.Generic.Dictionary`2[System.String,[MyType,MyAssembly]]\")  \n```  \n  \n> [!NOTE]\n>  An assembly-qualified type can be enclosed in brackets only when it appears within a type parameter list. The rules for searching assemblies for qualified and unqualified types in type parameter lists are the same as the rules for qualified and unqualified nongeneric types.  \n  \n Nullable types are a special case of generic types. For example, a nullable <xref:System.Int32> is represented by the string \"System.Nullable`1[System.Int32]\".  \n  \n> [!NOTE]\n>  In C#, C++, and Visual Basic you can also get nullable types using type operators. For example, the nullable <xref:System.Boolean> type is returned by `typeof(Nullable<bool>)` in C#, by `Nullable<Boolean>::typeid` in C++, and by `GetType(Nullable(Of Boolean))` in Visual Basic.  \n  \n The following table shows the syntax you use with `GetType` for various types.  \n  \n|To Get|Use|  \n|------------|---------|  \n|A nullable <xref:System.Int32>|`Type.GetType(\"System.Nullable`1[System.Int32]\")`|  \n|An unmanaged pointer to `MyType`|`Type.GetType(\"MyType*\")`|  \n|An unmanaged pointer to a pointer to `MyType`|`Type.GetType(\"MyType**\")`|  \n|A managed pointer or reference to `MyType`|`Type.GetType(\"MyType&\")`. Note that unlike pointers, references are limited to one level.|  \n|A parent class and a nested class|`Type.GetType(\"MyParentClass+MyNestedClass\")`|  \n|A one-dimensional array with a lower bound of 0|`Type.GetType(\"MyArray[]\")`|  \n|A one-dimensional array with an unknown lower bound|`Type.GetType(\"MyArray[*]\")`|  \n|An n-dimensional array|A comma (,) inside the brackets a total of n-1 times. For example, `System.Object[,,]` represents a three-dimensional `Object` array.|  \n|A two-dimensional array's array|`Type.GetType(\"MyArray[][]\")`|  \n|A rectangular two-dimensional array with unknown lower bounds|`Type.GetType(\"MyArray[,]\")`|  \n|A generic type with one type argument|`Type.GetType(\"MyGenericType`1[MyType]\")`|  \n|A generic type with two type arguments|`Type.GetType(\"MyGenericType`2[MyType,AnotherType]\")`|  \n|A generic type with two assembly-qualified type arguments|`Type.GetType(\"MyGenericType`2[[MyType,MyAssembly],[AnotherType,AnotherAssembly]]\")`|  \n|An assembly-qualified generic type with an assembly-qualified type argument|`Type.GetType(\"MyGenericType`1[[MyType,MyAssembly]],MyGenericTypeAssembly\")`|  \n|A generic type whose type argument is a generic type with two type arguments|`Type.GetType(\"MyGenericType`1[AnotherGenericType`2[MyType,AnotherType]]\")`|"
  syntax:
    content: public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See <xref href="System.Type.AssemblyQualifiedName"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type cannot be found; `false` to return `null`.Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.'
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to perform a case-insensitive search for <code>typeName</code>, `false` to perform a case-sensitive search for <code>typeName</code>.'
    return:
      type: System.Type
      description: The type with the specified name. If the type is not found, the <code>throwOnError</code> parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <code>throwOnError</code>. See the Exceptions section.
  overload: System.Type.GetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "<code>throwOnError</code> is `true` and the type is not found.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> contains invalid characters, such as an embedded tab.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> is an empty string.  \n  \n -or-  \n  \n <code>throwOnError</code> is `true` and <code>typeName</code> represents an array type with an invalid size.  \n  \n -or-  \n  \n <code>typeName</code> represents an array of <xref href=\"System.TypedReference\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>throwOnError</code> is `true` and <code>typeName</code> contains invalid syntax. For example, \"MyType[,*,]\".  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has a pointer type, a `ByRef` type, or <xref href=\"System.Void\"></xref> as one of its type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has an incorrect number of type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>throwOnError</code> is `true` and the assembly or one of its dependencies was not found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: The assembly or one of its dependencies was found, but could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "The assembly or one of its dependencies is not valid.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeArray(System.Object[])
  commentId: M:System.Type.GetTypeArray(System.Object[])
  id: GetTypeArray(System.Object[])
  parent: System.Type
  langs:
  - csharp
  name: GetTypeArray(Object[])
  nameWithType: Type.GetTypeArray(Object[])
  fullName: Type.GetTypeArray(Object[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the types of the objects in the specified array.
  remarks: ''
  example:
  - "The following code example demonstrates how to use the <xref:System.Type.GetTypeArray%2A> method to list the types of the elements of an array.  \n  \n [!code-cpp[Type_GetTypeCode#3](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeCode/CPP/type_gettypecode.cpp#3)]\n [!code-csharp[Type_GetTypeCode#3](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeCode/CS/type_gettypecode.cs#3)]\n [!code-vb[Type_GetTypeCode#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeCode/VB/type_gettypecode.vb#3)]"
  syntax:
    content: public static Type[] GetTypeArray (object[] args);
    parameters:
    - id: args
      type: System.Object[]
      description: An array of objects whose types to determine.
    return:
      type: System.Type[]
      description: An array of <xref href="System.Type"></xref> objects representing the types of the corresponding elements in <code>args</code>.
  overload: System.Type.GetTypeArray*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>args</code> is `null`.  \n  \n -or-  \n  \n One or more of the elements in <code>args</code> is `null`."
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: The class initializers are invoked and at least one throws an exception.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeCode(System.Type)
  commentId: M:System.Type.GetTypeCode(System.Type)
  id: GetTypeCode(System.Type)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeCode(Type)
  nameWithType: Type.GetTypeCode(Type)
  fullName: Type.GetTypeCode(Type)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the underlying type code of the specified <xref href="System.Type"></xref>.
  remarks: When you inherit from <xref:System.Type>, you can change the behavior of this method by overriding the <xref:System.Type.GetTypeCodeImpl%2A> method.
  example:
  - "The following code example demonstrates how the <xref:System.TypeCode> enumeration can be used. In a decision block inside the `WriteObjectInfo` method, the <xref:System.TypeCode> of an <xref:System.Object> parameter is examined, and an appropriate message is written to the console.  \n  \n [!code-cpp[System.TypeCode#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TypeCode/CPP/iconvertible.cpp#2)]\n [!code-csharp[System.TypeCode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TypeCode/CS/iconvertible.cs#2)]\n [!code-vb[System.TypeCode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TypeCode/VB/iconvertible.vb#2)]"
  syntax:
    content: public static TypeCode GetTypeCode (Type type);
    parameters:
    - id: type
      type: System.Type
      description: The type whose underlying type code to get.
    return:
      type: System.TypeCode
      description: The code of the underlying type, or <xref href="System.TypeCode.Empty"></xref> if <code>type</code> is `null`.
  overload: System.Type.GetTypeCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeCodeImpl
  commentId: M:System.Type.GetTypeCodeImpl
  id: GetTypeCodeImpl
  parent: System.Type
  langs:
  - csharp
  name: GetTypeCodeImpl()
  nameWithType: Type.GetTypeCodeImpl()
  fullName: Type.GetTypeCodeImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns the underlying type code of this <xref href="System.Type"></xref> instance.
  remarks: This method provides the implementation for the `static` (in C#) or `Shared` (in Visual Basic) <xref:System.Type.GetTypeCode%28System.Type%29> method. When you inherit from <xref:System.Type>, you can override this method to provide your own implementation of <xref:System.Type.GetTypeCode%2A>.
  syntax:
    content: protected virtual TypeCode GetTypeCodeImpl ();
    parameters: []
    return:
      type: System.TypeCode
      description: The type code of the underlying type.
  overload: System.Type.GetTypeCodeImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  commentId: M:System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  id: GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromCLSID(Guid, String, Boolean)
  nameWithType: Type.GetTypeFromCLSID(Guid, String, Boolean)
  fullName: Type.GetTypeFromCLSID(Guid, String, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.
  remarks: "The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  \n  \n> [!TIP]\n>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  \n  \n Instantiating an unmanaged COM object from its CLSID is a two-step process:  \n  \n1.  Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.  \n  \n2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object.  \n  \n Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs."
  example:
  - "The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method. An exception is thrown if an error occurs while loading the type.  \n  \n [!code-csharp[System.Type.GetTypeFromCLSID#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex4.cs#4)]\n [!code-vb[System.Type.GetTypeFromCLSID#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex4.vb#4)]"
  syntax:
    content: public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.
    - id: throwOnError
      type: System.Boolean
      description: "`true` to throw any exception that occurs.  \n  \n -or-  \n  \n `false` to ignore any exception that occurs."
    return:
      type: System.Type
      description: '`System.__ComObject` regardless of whether the CLSID is valid.'
  overload: System.Type.GetTypeFromCLSID*
  exceptions: []
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.String)
  commentId: M:System.Type.GetTypeFromCLSID(System.Guid,System.String)
  id: GetTypeFromCLSID(System.Guid,System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromCLSID(Guid, String)
  nameWithType: Type.GetTypeFromCLSID(Guid, String)
  fullName: Type.GetTypeFromCLSID(Guid, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID) from the specified server.
  remarks: "The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  \n  \n> [!TIP]\n>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  \n  \n Instantiating an unmanaged COM object from its CLSID is a two-step process:  \n  \n1.  Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.  \n  \n2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object."
  example:
  - "The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application from a server named computer17.central.contoso.com. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.  \n  \n [!code-csharp[System.Type.GetTypeFromCLSID#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex3.cs#3)]\n [!code-vb[System.Type.GetTypeFromCLSID#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex3.vb#3)]"
  syntax:
    content: public static Type GetTypeFromCLSID (Guid clsid, string server);
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.
    return:
      type: System.Type
      description: '`System.__ComObject` regardless of whether the CLSID is valid.'
  overload: System.Type.GetTypeFromCLSID*
  exceptions: []
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  commentId: M:System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  id: GetTypeFromCLSID(System.Guid,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromCLSID(Guid, Boolean)
  nameWithType: Type.GetTypeFromCLSID(Guid, Boolean)
  fullName: Type.GetTypeFromCLSID(Guid, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.
  remarks: "The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  \n  \n> [!TIP]\n>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  \n  \n Instantiating an unmanaged COM object from its CLSID is a two-step process:  \n  \n1.  Get a <xref:System.Type> object that represents the `__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.  \n  \n2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object.  \n  \n See the example for an illustration.  \n  \n Exceptions such as <xref:System.OutOfMemoryException> will be thrown when specifying `true` for `throwOnError`, but it will not fail for unregistered CLSIDs."
  example:
  - "The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method. An exception is thrown if an error occurs while loading the type.  \n  \n [!code-csharp[System.Type.GetTypeFromCLSID#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid_ex2.cs#2)]\n [!code-vb[System.Type.GetTypeFromCLSID#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid_ex2.vb#2)]"
  syntax:
    content: public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    - id: throwOnError
      type: System.Boolean
      description: "`true` to throw any exception that occurs.  \n  \n -or-  \n  \n `false` to ignore any exception that occurs."
    return:
      type: System.Type
      description: '`System.__ComObject` regardless of whether the CLSID is valid.'
  overload: System.Type.GetTypeFromCLSID*
  exceptions: []
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromCLSID(System.Guid)
  commentId: M:System.Type.GetTypeFromCLSID(System.Guid)
  id: GetTypeFromCLSID(System.Guid)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromCLSID(Guid)
  nameWithType: Type.GetTypeFromCLSID(Guid)
  fullName: Type.GetTypeFromCLSID(Guid)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified class identifier (CLSID).
  remarks: "The <xref:System.Type.GetTypeFromCLSID%2A> method supports late-bound access to unmanaged COM objects from .NET Framework apps when you know the COM object's class identifier (CLSID).  The class identifier for COM classes is defined in the HKEY_CLASSES_ROOT\\CLSID key of the registry. You can retrieve the value of the <xref:System.Type.IsCOMObject%2A> property to determine whether the type returned by this method is a COM object.  \n  \n> [!TIP]\n>  You can call the <xref:System.Type.GetTypeFromProgID%2A> method for late-bound access to COM objects whose programmatic identifier (ProgID) you know.  \n  \n Instantiating an unmanaged COM object from its CLSID is a two-step process:  \n  \n1.  Get a <xref:System.Type> object that represents the`__ComObject` that corresponds to the CLSID by calling the <xref:System.Type.GetTypeFromCLSID%2A> method.  \n  \n2.  Call the <xref:System.Activator.CreateInstance%28System.Type%29?displayProperty=fullName> method to instantiate the COM object.  \n  \n See the example for an illustration.  \n  \n The <xref:System.Type.GetTypeFromCLSID%28System.Guid%29> overload ignores any exception that may occur when instantiating a <xref:System.Type> object based on the `clsid` argument. Note that no exception is thrown if `clsid` is not found in the registry."
  example:
  - "The following example uses the CLSID of the Microsoft Word [Application object](http://msdn.microsoft.com/library/office/ff838565.aspx) to retrieve a COM type that represents the Microsoft Word application. It then instantiates the type by calling the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and closes it by calling the [Application.Quit](http://msdn.microsoft.com/library/office/ff844895.aspx) method.  \n  \n [!code-csharp[System.Type.GetTypeFromCLSID#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.gettypefromclsid/cs/gettypefromclsid1.cs#1)]\n [!code-vb[System.Type.GetTypeFromCLSID#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.gettypefromclsid/vb/gettypefromclsid1.vb#1)]"
  syntax:
    content: public static Type GetTypeFromCLSID (Guid clsid);
    parameters:
    - id: clsid
      type: System.Guid
      description: The CLSID of the type to get.
    return:
      type: System.Type
      description: '`System.__ComObject` regardless of whether the CLSID is valid.'
  overload: System.Type.GetTypeFromCLSID*
  exceptions: []
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  commentId: M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  id: GetTypeFromHandle(System.RuntimeTypeHandle)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromHandle(RuntimeTypeHandle)
  nameWithType: Type.GetTypeFromHandle(RuntimeTypeHandle)
  fullName: Type.GetTypeFromHandle(RuntimeTypeHandle)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the type referenced by the specified type handle.
  remarks: The handles are valid only in the application domain in which they were obtained.
  example:
  - "The following example uses the <xref:System.Type.GetTypeFromHandle%2A> method to get a <xref:System.Type> object from a <xref:System.RuntimeTypeHandle> provided by the <xref:System.Type.GetTypeHandle%2A> method.  \n  \n [!code-cpp[Type_GetTypeFromHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromHandle/CPP/type_gettypefromhandle.cpp#1)]\n [!code-csharp[Type_GetTypeFromHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromHandle/CS/type_gettypefromhandle.cs#1)]\n [!code-vb[Type_GetTypeFromHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromHandle/VB/type_gettypefromhandle.vb#1)]"
  syntax:
    content: public static Type GetTypeFromHandle (RuntimeTypeHandle handle);
    parameters:
    - id: handle
      type: System.RuntimeTypeHandle
      description: The object that refers to the type.
    return:
      type: System.Type
      description: The type referenced by the specified <xref href="System.RuntimeTypeHandle"></xref>, or `null` if the <xref href="System.RuntimeTypeHandle.Value"></xref> property of <code>handle</code> is `null`.
  overload: System.Type.GetTypeFromHandle*
  exceptions:
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromProgID(System.String)
  commentId: M:System.Type.GetTypeFromProgID(System.String)
  id: GetTypeFromProgID(System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromProgID(String)
  nameWithType: Type.GetTypeFromProgID(String)
  fullName: Type.GetTypeFromProgID(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the <xref href="System.Type"></xref>.
  remarks: This method is provided for COM support. ProgIDs are not used in the Microsoft .NET Framework because they have been superseded by the concept of namespace.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static Type GetTypeFromProgID (string progID);
    parameters:
    - id: progID
      type: System.String
      description: The ProgID of the type to get.
    return:
      type: System.Type
      description: The type associated with the specified ProgID, if <code>progID</code> is a valid entry in the registry and a type is associated with it; otherwise, `null`.
  overload: System.Type.GetTypeFromProgID*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>progID</code> is `null`.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromProgID(System.String,System.Boolean)
  commentId: M:System.Type.GetTypeFromProgID(System.String,System.Boolean)
  id: GetTypeFromProgID(System.String,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromProgID(String, Boolean)
  nameWithType: Type.GetTypeFromProgID(String, Boolean)
  fullName: Type.GetTypeFromProgID(String, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.
  remarks: This method is provided for COM support. Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.
  example:
  - "The following example retrieves a type by passing a ProgID, specifying whether to throw an exception if the ProgID is invalid. The example then displays the ClassID related to the ProgID, along with any applicable exception message.  \n  \n [!code-cpp[Type_GetTypeFromProgID2#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CPP/type_gettypefromprogid2.cpp#1)]\n [!code-csharp[Type_GetTypeFromProgID2#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID2/CS/type_gettypefromprogid2.cs#1)]\n [!code-vb[Type_GetTypeFromProgID2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID2/VB/type_gettypefromprogid2.vb#1)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static Type GetTypeFromProgID (string progID, bool throwOnError);
    parameters:
    - id: progID
      type: System.String
      description: The ProgID of the type to get.
    - id: throwOnError
      type: System.Boolean
      description: "`true` to throw any exception that occurs.  \n  \n -or-  \n  \n `false` to ignore any exception that occurs."
    return:
      type: System.Type
      description: The type associated with the specified program identifier (ProgID), if <code>progID</code> is a valid entry in the registry and a type is associated with it; otherwise, `null`.
  overload: System.Type.GetTypeFromProgID*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>progID</code> is `null`.
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: The specified ProgID is not registered.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromProgID(System.String,System.String)
  commentId: M:System.Type.GetTypeFromProgID(System.String,System.String)
  id: GetTypeFromProgID(System.String,System.String)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromProgID(String, String)
  nameWithType: Type.GetTypeFromProgID(String, String)
  fullName: Type.GetTypeFromProgID(String, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.
  remarks: This method is provided for COM support. Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.
  example:
  - "The following example retrieves a type by passing a ProgID and server name. The example then displays the ClassID related to the ProgID, or throws an exception if the ProgID or the server name is invalid.  \n  \n [!code-cpp[Type_GetTypeFromProgID3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CPP/Type_GetTypeFromProgID3.cpp#1)]\n [!code-csharp[Type_GetTypeFromProgID3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID3/CS/type_gettypefromprogid3.cs#1)]\n [!code-vb[Type_GetTypeFromProgID3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID3/VB/type_gettypefromprogid3.vb#1)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static Type GetTypeFromProgID (string progID, string server);
    parameters:
    - id: progID
      type: System.String
      description: The progID of the type to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.
    return:
      type: System.Type
      description: The type associated with the specified program identifier (progID), if <code>progID</code> is a valid entry in the registry and a type is associated with it; otherwise, `null`.
  overload: System.Type.GetTypeFromProgID*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>prodID</code> is `null`.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  commentId: M:System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  id: GetTypeFromProgID(System.String,System.String,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeFromProgID(String, String, Boolean)
  nameWithType: Type.GetTypeFromProgID(String, String, Boolean)
  fullName: Type.GetTypeFromProgID(String, String, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.
  remarks: This method is provided for COM support. Program IDs are not used in Microsoft .NET Framework because they have been superseded by the concept of namespace.
  example:
  - "The following example retrieves a type by passing a ProgID and server name. The example then displays the ClassID related to the ProgID, specifying whether to throw an exception if the ProgID or the server name is invalid.  \n  \n [!code-cpp[Type_GetTypeFromProgID4#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CPP/Type_GetTypeFromProgID4.cpp#1)]\n [!code-csharp[Type_GetTypeFromProgID4#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeFromProgID4/CS/type_gettypefromprogid4.cs#1)]\n [!code-vb[Type_GetTypeFromProgID4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeFromProgID4/VB/type_gettypefromprogid4.vb#1)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);
    parameters:
    - id: progID
      type: System.String
      description: The progID of the <xref href="System.Type"></xref> to get.
    - id: server
      type: System.String
      description: The server from which to load the type. If the server name is `null`, this method automatically reverts to the local machine.
    - id: throwOnError
      type: System.Boolean
      description: "`true` to throw any exception that occurs.  \n  \n -or-  \n  \n `false` to ignore any exception that occurs."
    return:
      type: System.Type
      description: The type associated with the specified program identifier (progID), if <code>progID</code> is a valid entry in the registry and a type is associated with it; otherwise, `null`.
  overload: System.Type.GetTypeFromProgID*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>progID</code> is `null`.
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: The specified progID is not registered.
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GetTypeHandle(System.Object)
  commentId: M:System.Type.GetTypeHandle(System.Object)
  id: GetTypeHandle(System.Object)
  parent: System.Type
  langs:
  - csharp
  name: GetTypeHandle(Object)
  nameWithType: Type.GetTypeHandle(Object)
  fullName: Type.GetTypeHandle(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the handle for the <xref href="System.Type"></xref> of a specified object.
  remarks: The handles are valid only in the application domain in which they were obtained.
  example:
  - "The following example defines the class `MyClass1`, gets an instance of it, and retrieves the runtime handle of the object.  \n  \n [!code-cpp[Type_GetTypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetTypeHandle/CPP/Type_GetTypeHandle.cpp#1)]\n [!code-csharp[Type_GetTypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetTypeHandle/CS/type_gettypehandle.cs#1)]\n [!code-vb[Type_GetTypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetTypeHandle/VB/type_gettypehandle.vb#1)]"
  syntax:
    content: public static RuntimeTypeHandle GetTypeHandle (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object for which to get the type handle.
    return:
      type: System.RuntimeTypeHandle
      description: The handle for the <xref href="System.Type"></xref> of the specified <xref href="System.Object"></xref>.
  overload: System.Type.GetTypeHandle*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>o</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.GUID
  commentId: P:System.Type.GUID
  id: GUID
  parent: System.Type
  langs:
  - csharp
  name: GUID
  nameWithType: Type.GUID
  fullName: Type.GUID
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the GUID associated with the <xref href="System.Type"></xref>.
  remarks: A GUID is associated with a type using the <xref:System.Runtime.InteropServices.GuidAttribute> attribute.
  example:
  - "The following example creates the class `MyClass1` with a public method, creates a `Type` object corresponding to `MyClass1`, and gets the <xref:System.Guid> structure using the `GUID` property of the `Type` class.  \n  \n [!code-cpp[Type_Guid#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_Guid/CPP/type_guid.cpp#1)]\n [!code-csharp[Type_Guid#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_Guid/CS/type_guid.cs#1)]\n [!code-vb[Type_Guid#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_Guid/VB/type_guid.vb#1)]"
  syntax:
    content: public abstract Guid GUID { get; }
    return:
      type: System.Guid
      description: The GUID associated with the <xref href="System.Type"></xref>.
  overload: System.Type.GUID*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.HasElementType
  commentId: P:System.Type.HasElementType
  id: HasElementType
  parent: System.Type
  langs:
  - csharp
  name: HasElementType
  nameWithType: Type.HasElementType
  fullName: Type.HasElementType
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type"></xref> encompasses or refers to another type; that is, whether the current <xref href="System.Type"></xref> is an array, a pointer, or is passed by reference.
  remarks: "For example, Type.GetType(\"Int32[]\").HasElementType returns `true`, but Type.GetType(\"Int32\").HasElementType returns `false`. HasElementType also returns `true` for \"Int32*\" and \"Int32&\".  \n  \n If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example returns `true` or `false` depending on whether or not the object is an array, a reference type, or a pointer.  \n  \n [!code-cpp[Type_HasElementType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementType/CPP/type_haselementtype.cpp#1)]\n [!code-csharp[Type_HasElementType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementType/CS/type_haselementtype.cs#1)]\n [!code-vb[Type_HasElementType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementType/VB/type_haselementtype.vb#1)]"
  syntax:
    content: public bool HasElementType { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is an array, a pointer, or is passed by reference; otherwise, `false`.'
  overload: System.Type.HasElementType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.HasElementTypeImpl
  commentId: M:System.Type.HasElementTypeImpl
  id: HasElementTypeImpl
  parent: System.Type
  langs:
  - csharp
  name: HasElementTypeImpl()
  nameWithType: Type.HasElementTypeImpl()
  fullName: Type.HasElementTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, implements the <xref href="System.Type.HasElementType"></xref> property and determines whether the current <xref href="System.Type"></xref> encompasses or refers to another type; that is, whether the current <xref href="System.Type"></xref> is an array, a pointer, or is passed by reference.
  remarks: For example, Type.GetType("Int32[]").HasElementTypeImpl returns `true`, but Type.GetType("Int32").HasElementTypeImpl returns `false`. HasElementTypeImpl also returns `true` for "Int32*" and "Int32&".
  example:
  - "The following example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method. The main class checks for the `HasElementType` property and displays the element type.  \n  \n [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]\n [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]\n [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]"
  syntax:
    content: protected abstract bool HasElementTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is an array, a pointer, or is passed by reference; otherwise, `false`.'
  overload: System.Type.HasElementTypeImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  commentId: M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Type
  langs:
  - csharp
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  nameWithType: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  fullName: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.
  remarks: "`InvokeMember` calls a constructor member or a method member, gets or sets a property member, gets or sets a data field member, or gets or sets an element of an array member.  \n  \n> [!NOTE]\n>  You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.  \n  \n When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format \"[DispID=##]\". For example, if the DispID of MyComMethod is 3, you can specify the string \"[DispID=3]\" instead of \"MyComMethod\". Invoking a member by DispID is faster than looking up the member by name. In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.  \n  \n Although the default binder does not process <xref:System.Reflection.ParameterModifier> or <xref:System.Globalization.CultureInfo> (the `modifiers` and `culture` parameters), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `modifiers` and `culture`. `ParameterModifier` is only used when calling through COM interop, and only parameters that are passed by reference are handled.  \n  \n Each parameter in the `namedParameters` array gets the value in the corresponding element in the `args` array. If the length of `args` is greater than the length of `namedParameters`, the remaining argument values are passed in order.  \n  \n The `namedParameters` array can be used to change the order of arguments in an input array. For example, given the method `M(string a, int b)` (`M(ByVal a As String, ByVal b As Integer)` in Visual Basic) and the input array `{ 42, \"x\" }`, the input array can be passed unchanged to `args` if the array `{ \"b\", \"a\" }` is supplied for `namedParameters`.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  \n  \n-   Specify `BindingFlags.Public` to include public members in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  \n  \n The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:  \n  \n-   `CreateInstance` to invoke a constructor. `name` is ignored. Not valid with other invocation flags.  \n  \n-   `InvokeMethod` to invoke a method, but not a constructor or a type initializer. Not valid with `SetField` or `SetProperty`. If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.  \n  \n-   `GetField` to get the value of a field. Not valid with `SetField`.  \n  \n-   `SetField` to set the value of a field. Not valid with `GetField`.  \n  \n-   `GetProperty` to get a property. Not valid with `SetProperty`.  \n  \n-   `SetProperty` to set a property. Not valid with `GetProperty`.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n A method will be invoked if both of the following conditions are true:  \n  \n-   The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).  \n  \n-   The type of each argument can be converted by the binder to the type of the parameter.  \n  \n The binder will find all of the matching methods. These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  \n  \n After the method is selected, it is invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked. The default binder selects the most specific match.  \n  \n `InvokeMember` can be used to invoke methods with parameters that have default values. To bind to these methods, Reflection requires <xref:System.Reflection.BindingFlags?displayProperty=fullName> to be specified. For a parameter that has a default value, you can either supply a different value, or supply <xref:System.Reflection.Missing.Value?displayProperty=fullName> to use the default value.  \n  \n For example, consider a method such as MyMethod(int x, float y = 2.0). To invoke this method with only the first argument as MyMethod(4), pass one of the above binding flags and pass two arguments, namely, 4 for the first argument and `Missing.Value` for the second argument. Unless you use `Missing.Value`, you may not omit optional parameters with the `Invoke` method. If you must do so, use `InvokeMember` instead.  \n  \n Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.  \n  \n You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName>. For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {\"strings new value\"}, null, null, null);`  \n  \n If F is a `String[]`, you can use code such as:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {new String[]{\"a\",\"z\",\"c\",\"d\"}}, null, null, null);`  \n  \n which will initialize the field F to this new array. You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {1, \"b\"}, null, null, null);`  \n  \n This will change string \"z\" in the array that F holds to string \"b\".  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "The string containing the name of the constructor, method, property, or field member to invoke.  \n  \n -or-  \n  \n An empty string (\"\") to invoke the default member.  \n  \n -or-  \n  \n For `IDispatch` members, a string representing the DispID, for example \"[DispID=3]\"."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more <xref href="System.Reflection.BindingFlags"></xref> that specify how the search is conducted. The access can be one of the `BindingFlags` such as `Public`, `NonPublic`, `Private`, `InvokeMethod`, `GetField`, and so on. The type of lookup need not be specified. If the type of lookup is omitted, `BindingFlags.Public` | `BindingFlags.Instance` | `BindingFlags.Static` are used.
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (Nothing in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>. Note that explicitly defining a <xref href=\"System.Reflection.Binder\"></xref> object may be required for successfully invoking method overloads with variable arguments."
    - id: target
      type: System.Object
      description: The object on which to invoke the specified member.
    - id: args
      type: System.Object[]
      description: An array containing the arguments to pass to the member to invoke.
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "An array of <xref href=\"System.Reflection.ParameterModifier\"></xref> objects representing the attributes associated with the corresponding element in the <code>args</code> array. A parameter's associated attributes are stored in the member's signature.  \n  \n The default binder processes this parameter only when calling a COM component."
    - id: culture
      type: System.Globalization.CultureInfo
      description: "The <xref href=\"System.Globalization.CultureInfo\"></xref> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic) to use the current thread's <xref href=\"System.Globalization.CultureInfo\"></xref>."
    - id: namedParameters
      type: System.String[]
      description: An array containing the names of the parameters to which the values in the <code>args</code> array are passed.
    return:
      type: System.Object
      description: An object representing the return value of the invoked member.
  overload: System.Type.InvokeMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>invokeAttr</code> does not contain `CreateInstance` and <code>name</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>args</code> and <code>modifiers</code> do not have the same length.  \n  \n -or-  \n  \n <code>invokeAttr</code> is not a valid <xref href=\"System.Reflection.BindingFlags\"></xref> attribute.  \n  \n -or-  \n  \n <code>invokeAttr</code> does not contain one of the following binding flags: `InvokeMethod`, `CreateInstance`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `CreateInstance` combined with `InvokeMethod`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains both `GetField` and `SetField`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains both `GetProperty` and `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `InvokeMethod` combined with `SetField` or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `SetField` and <code>args</code> has more than one element.  \n  \n -or-  \n  \n The named parameter array is larger than the argument array.  \n  \n -or-  \n  \n This method is called on a COM object and one of the following binding flags was not passed in: `BindingFlags.InvokeMethod`, `BindingFlags.GetProperty`, `BindingFlags.SetProperty`, `BindingFlags.PutDispProperty`, or `BindingFlags.PutRefDispProperty`.  \n  \n -or-  \n  \n One of the named parameter arrays contains a string that is `null`."
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The specified member is a class initializer.
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: The field or property cannot be found.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "No method can be found that matches the arguments in <code>args</code>.  \n  \n -or-  \n  \n No member can be found that has the argument names supplied in <code>namedParameters</code>.  \n  \n -or-  \n  \n The current <xref href=\"System.Type\"></xref> object represents a type that contains open type parameters, that is, <xref href=\"System.Type.ContainsGenericParameters\"></xref> returns `true`."
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: The specified member cannot be invoked on <code>target</code>.
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method matches the binding criteria.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method represented by <code>name</code> has one or more unspecified generic type parameters. That is, the method's <xref href="System.Reflection.MethodInfo.ContainsGenericParameters"></xref> property returns `true`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  commentId: M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  parent: System.Type
  langs:
  - csharp
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[])
  nameWithType: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[])
  fullName: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Invokes the specified member, using the specified binding constraints and matching the specified argument list.
  remarks: "> [!NOTE]\n>  You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  \n  \n-   Specify `BindingFlags.Public` to include public members in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private and protected members) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  \n  \n The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:  \n  \n-   `CreateInstance` to invoke a constructor. `name` is ignored. Not valid with other invocation flags.  \n  \n-   `InvokeMethod` to invoke a method, but not a constructor or a type initializer. Not valid with `SetField` or `SetProperty`. If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.  \n  \n-   `GetField` to get the value of a field. Not valid with `SetField`.  \n  \n-   `SetField` to set the value of a field. Not valid with `GetField`.  \n  \n-   `GetProperty` to get a property. Not valid with `SetProperty`.  \n  \n-   `SetProperty` to set a property. Not valid with `GetProperty`.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n A method will be invoked if both of the following conditions are true:  \n  \n-   The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).  \n  \n-   The type of each argument can be converted by the binder to the type of the parameter.  \n  \n The binder will find all of the matching methods. These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  \n  \n After the method is selected, it is invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked. The default binder selects the most specific match.  \n  \n Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through <xref:System.Reflection> whenever the code is fully trusted.  \n  \n You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName>. For example, if you want to set a public instance field named F on class C, and F is a `String`, you can use code such as:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {\"strings new value\"});`  \n  \n If F is a `String[]`, you can use code such as:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {new String[]{\"a\",\"z\",\"c\",\"d\"}});`  \n  \n which will initialize the field F to this new array. You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {1, \"b\"});`  \n  \n This will change string \"z\" in the array that F holds to string \"b\".  \n  \n When you invoke an `IDispatch` member, you can specify the DispID instead of the member name, using the string format \"[DispID=##]\". For example, if the DispID of MyComMethod is 3, you can specify the string \"[DispID=3]\" instead of \"MyComMethod\". Invoking a member by DispID is faster than looking up the member by name. In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  example:
  - "The following example uses `InvokeMember` to access members of a type.  \n  \n [!code-cpp[InvokeMem#1](~/samples/snippets/cpp/VS_Snippets_CLR/InvokeMem/CPP/invokemem.cpp#1)]\n [!code-csharp[InvokeMem#1](~/samples/snippets/csharp/VS_Snippets_CLR/InvokeMem/CS/invokemem.cs#1)]\n [!code-vb[InvokeMem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/InvokeMem/VB/invokemem.vb#1)]"
  syntax:
    content: public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);
    parameters:
    - id: name
      type: System.String
      description: "The string containing the name of the constructor, method, property, or field member to invoke.  \n  \n -or-  \n  \n An empty string (\"\") to invoke the default member.  \n  \n -or-  \n  \n For `IDispatch` members, a string representing the DispID, for example \"[DispID=3]\"."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more <xref href="System.Reflection.BindingFlags"></xref> that specify how the search is conducted. The access can be one of the `BindingFlags` such as `Public`, `NonPublic`, `Private`, `InvokeMethod`, `GetField`, and so on. The type of lookup need not be specified. If the type of lookup is omitted, `BindingFlags.Public` | `BindingFlags.Instance` | `BindingFlags.Static` are used.
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>. Note that explicitly defining a <xref href=\"System.Reflection.Binder\"></xref> object may be required for successfully invoking method overloads with variable arguments."
    - id: target
      type: System.Object
      description: The object on which to invoke the specified member.
    - id: args
      type: System.Object[]
      description: An array containing the arguments to pass to the member to invoke.
    return:
      type: System.Object
      description: An object representing the return value of the invoked member.
  overload: System.Type.InvokeMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>invokeAttr</code> does not contain `CreateInstance` and <code>name</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>invokeAttr</code> is not a valid <xref href=\"System.Reflection.BindingFlags\"></xref> attribute.  \n  \n -or-  \n  \n <code>invokeAttr</code> does not contain one of the following binding flags: `InvokeMethod`, `CreateInstance`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `CreateInstance` combined with `InvokeMethod`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains both `GetField` and `SetField`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains both `GetProperty` and `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `InvokeMethod` combined with `SetField` or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `SetField` and <code>args</code> has more than one element.  \n  \n -or-  \n  \n This method is called on a COM object and one of the following binding flags was not passed in: `BindingFlags.InvokeMethod`, `BindingFlags.GetProperty`, `BindingFlags.SetProperty`, `BindingFlags.PutDispProperty`, or `BindingFlags.PutRefDispProperty`.  \n  \n -or-  \n  \n One of the named parameter arrays contains a string that is `null`."
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The specified member is a class initializer.
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: The field or property cannot be found.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "No method can be found that matches the arguments in <code>args</code>.  \n  \n -or-  \n  \n The current <xref href=\"System.Type\"></xref> object represents a type that contains open type parameters, that is, <xref href=\"System.Type.ContainsGenericParameters\"></xref> returns `true`."
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: The specified member cannot be invoked on <code>target</code>.
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method matches the binding criteria.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The .NET Compact Framework does not currently support this method.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method represented by <code>name</code> has one or more unspecified generic type parameters. That is, the method's <xref href="System.Reflection.MethodInfo.ContainsGenericParameters"></xref> property returns `true`.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  commentId: M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  parent: System.Type
  langs:
  - csharp
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)
  nameWithType: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)
  fullName: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.
  remarks: "Although the default binder does not process <xref:System.Globalization.CultureInfo> (the `culture` parameter), you can use the abstract <xref:System.Reflection.Binder?displayProperty=fullName> class to write a custom binder that does process `culture`.  \n  \n> [!NOTE]\n>  You cannot use <xref:System.Type.InvokeMember%2A> to invoke a generic method.  \n  \n The following <xref:System.Reflection.BindingFlags> filter flags can be used to define which members to include in the search:  \n  \n-   Specify `BindingFlags.Public` to include public members in the search.  \n  \n-   Specify `BindingFlags.NonPublic` to include non-public members (that is, private, internal, and protected members) in the search.  \n  \n-   Specify `BindingFlags.FlattenHierarchy` to include static members up the hierarchy.  \n  \n The following <xref:System.Reflection.BindingFlags> modifier flags can be used to change how the search works:  \n  \n-   `BindingFlags.IgnoreCase` to ignore the case of `name`.  \n  \n-   `BindingFlags.DeclaredOnly` to search only the members declared on the <xref:System.Type>, not members that were simply inherited.  \n  \n The following <xref:System.Reflection.BindingFlags> invocation flags can be used to denote what action to take with the member:  \n  \n-   `CreateInstance` to invoke a constructor. `name` is ignored. Not valid with other invocation flags.  \n  \n-   `InvokeMethod` to invoke a method, but not a constructor or a type initializer. Not valid with `SetField` or `SetProperty`. If `InvokeMethod` is specified by itself, `BindingFlags.Public`, `BindingFlags.Instance`, and `BindingFlags.Static` are automatically included.  \n  \n-   `GetField` to get the value of a field. Not valid with `SetField`.  \n  \n-   `SetField` to set the value of a field. Not valid with `GetField`.  \n  \n-   `GetProperty` to get a property. Not valid with `SetProperty`.  \n  \n-   `SetProperty` to set a property. Not valid with `GetProperty`.  \n  \n See <xref:System.Reflection.BindingFlags?displayProperty=fullName> for more information.  \n  \n A method will be invoked if both of the following conditions are true:  \n  \n-   The number of parameters in the method declaration equals the number of arguments in the `args` array (unless default arguments are defined on the member and `BindingFlags.OptionalParamBinding` is specified).  \n  \n-   The type of each argument can be converted by the binder to the type of the parameter.  \n  \n The binder will find all of the matching methods. These methods are found based upon the type of binding requested (<xref:System.Reflection.BindingFlags> values `InvokeMethod`, `GetProperty`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  \n  \n After the method is selected, it is invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method of the <xref:System.Reflection.Binder> class is responsible for selecting the method to be invoked. The default binder selects the most specific match.  \n  \n Access restrictions are ignored for fully trusted code; that is, private constructors, methods, fields, and properties can be accessed and invoked through Reflection whenever the code is fully trusted.  \n  \n You can use `Type.InvokeMember` to set a field to a particular value by specifying <xref:System.Reflection.BindingFlags?displayProperty=fullName>. For example, if you want to set a public instance field named F on class C, and F is a `String` you can use code such as:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {\"strings new value\"}, null);`  \n  \n If F is a `String[]`, you can use code such as:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {new String[]{\"a\",\"z\",\"c\",\"d\"}}, null);`  \n  \n which will initialize the field F to this new array. You can also use `Type.InvokeMember` to set a position in an array by supplying the index of the value and then the next value by using code such as the following:  \n  \n `typeof(C).InvokeMember(\"F\", BindingFlags.SetField, null, c, new Object[] {1, \"b\"}, null);`  \n  \n This will change string \"z\" in the array that F holds to string \"b\".  \n  \n When you invoke an `IDispatch` member you can specify the DispID instead of the member name, using the string format \"[DispID=##]\". For example, if the DispID of MyComMethod is 3, you can specify the string \"[DispID=3]\" instead of \"MyComMethod\". Invoking a member by DispID is faster than looking up the member by name. In complex aggregation scenarios, the DispID is sometimes the only way to invoke the desired member.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this method can be used to access non-public members if the caller has been granted <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md).)  \n>   \n>  To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."
  syntax:
    content: public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);
    parameters:
    - id: name
      type: System.String
      description: "The string containing the name of the constructor, method, property, or field member to invoke.  \n  \n -or-  \n  \n An empty string (\"\") to invoke the default member.  \n  \n -or-  \n  \n For `IDispatch` members, a string representing the DispID, for example \"[DispID=3]\"."
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: A bitmask comprised of one or more <xref href="System.Reflection.BindingFlags"></xref> that specify how the search is conducted. The access can be one of the `BindingFlags` such as `Public`, `NonPublic`, `Private`, `InvokeMethod`, `GetField`, and so on. The type of lookup need not be specified. If the type of lookup is omitted, `BindingFlags.Public` | `BindingFlags.Instance` | `BindingFlags.Static` are used.
    - id: binder
      type: System.Reflection.Binder
      description: "An object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic), to use the <xref href=\"System.Type.DefaultBinder\"></xref>. Note that explicitly defining a <xref href=\"System.Reflection.Binder\"></xref> object may be required for successfully invoking method overloads with variable arguments."
    - id: target
      type: System.Object
      description: The object on which to invoke the specified member.
    - id: args
      type: System.Object[]
      description: An array containing the arguments to pass to the member to invoke.
    - id: culture
      type: System.Globalization.CultureInfo
      description: "The object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric <xref href=\"System.String\"></xref> to a <xref href=\"System.Double\"></xref>.  \n  \n -or-  \n  \n A null reference (`Nothing` in Visual Basic) to use the current thread's <xref href=\"System.Globalization.CultureInfo\"></xref>."
    return:
      type: System.Object
      description: An object representing the return value of the invoked member.
  overload: System.Type.InvokeMember*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>invokeAttr</code> does not contain `CreateInstance` and <code>name</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>invokeAttr</code> is not a valid <xref href=\"System.Reflection.BindingFlags\"></xref> attribute.  \n  \n -or-  \n  \n <code>invokeAttr</code> does not contain one of the following binding flags: `InvokeMethod`, `CreateInstance`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `CreateInstance` combined with `InvokeMethod`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains both `GetField` and `SetField`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains both `GetProperty` and `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `InvokeMethod` combined with `SetField` or `SetProperty`.  \n  \n -or-  \n  \n <code>invokeAttr</code> contains `SetField` and <code>args</code> has more than one element.  \n  \n -or-  \n  \n This method is called on a COM object and one of the following binding flags was not passed in: `BindingFlags.InvokeMethod`, `BindingFlags.GetProperty`, `BindingFlags.SetProperty`, `BindingFlags.PutDispProperty`, or `BindingFlags.PutRefDispProperty`.  \n  \n -or-  \n  \n One of the named parameter arrays contains a string that is `null`."
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: The specified member is a class initializer.
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: The field or property cannot be found.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "No method can be found that matches the arguments in <code>args</code>.  \n  \n -or-  \n  \n The current <xref href=\"System.Type\"></xref> object represents a type that contains open type parameters, that is, <xref href=\"System.Type.ContainsGenericParameters\"></xref> returns `true`."
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: The specified member cannot be invoked on <code>target</code>.
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: More than one method matches the binding criteria.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The method represented by <code>name</code> has one or more unspecified generic type parameters. That is, the method's <xref href="System.Reflection.MethodInfo.ContainsGenericParameters"></xref> property returns `true`.
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsAbstract
  commentId: P:System.Type.IsAbstract
  id: IsAbstract
  parent: System.Type
  langs:
  - csharp
  name: IsAbstract
  nameWithType: Type.IsAbstract
  fullName: Type.IsAbstract
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is abstract and must be overridden.
  remarks: "The <xref:System.Type.IsAbstract%2A> property returns `true` in the following cases:  \n  \n-   The current type is abstract; that is, it cannot be instantiated, but can only serve as the base class for derived classes. In C#, abstract classes are marked with the [abstract](~/docs/csharp/language-reference/keywords/abstract.md) keyword; in Visual Basic, they are marked with the [MustInherit](~/docs/visual-basic/language-reference/modifiers/mustinherit.md) keyword.  \n  \n-   The current type is an interface.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example creates an array of <xref:System.Type> objects that represent the following types:contains type returns `true` if the specified object is `abstract`; otherwise, it returns `false`.  \n  \n-   `AbstractClass`, an abstract class (a class marked as `abstract` in C# and `MustInherit` in Visual Basic).  \n  \n-   `DerivedClass`, a class that inherits from `AbstractClass`.  \n  \n-   `SingleClass`, a non-inheritable class. It is defined as `sealed` in C# and `NotInheritable` in Visual Basic.  \n  \n-   `ITypeInfo`, an interface.  \n  \n-   `ImplementingClass`, a class that implements the `ITypeInfo` interface.  \n  \n The method returns `true` only for `AbstractClass`, the abstract class, and `ITypeInfo`, the interface.  \n  \n [!code-csharp[System.Type.IsAbstract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isabstract/cs/isabstract1.cs#1)]\n [!code-vb[System.Type.IsAbstract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isabstract/vb/isabstract1.vb#1)]"
  syntax:
    content: public bool IsAbstract { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is abstract; otherwise, `false`.'
  overload: System.Type.IsAbstract*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsAnsiClass
  commentId: P:System.Type.IsAnsiClass
  id: IsAnsiClass
  parent: System.Type
  langs:
  - csharp
  name: IsAnsiClass
  nameWithType: Type.IsAnsiClass
  fullName: Type.IsAnsiClass
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the string format attribute `AnsiClass` is selected for the <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes. The string format attributes enhance interoperability by defining how strings should be interpreted.  \n  \n If the current <xref:System.Type> represents a generic type, this property pertains to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`."
  example:
  - "The following example gets the field information and checks for the `AnsiClass` attribute.  \n  \n [!code-cpp[Type_IsAnsiClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAnsiClass/CPP/Type_IsAnsiClass.cpp#1)]\n [!code-csharp[Type_IsAnsiClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAnsiClass/CS/type_isansiclass.cs#1)]\n [!code-vb[Type_IsAnsiClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAnsiClass/VB/type_isansiclass.vb#1)]"
  syntax:
    content: public bool IsAnsiClass { get; }
    return:
      type: System.Boolean
      description: '`true` if the string format attribute `AnsiClass` is selected for the <xref href="System.Type"></xref>; otherwise, `false`.'
  overload: System.Type.IsAnsiClass*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsArray
  commentId: P:System.Type.IsArray
  id: IsArray
  parent: System.Type
  langs:
  - csharp
  name: IsArray
  nameWithType: Type.IsArray
  fullName: Type.IsArray
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value that indicates whether the type is an array.
  remarks: "The <xref:System.Type.IsArray%2A> property returns `false` for the <xref:System.Array> class. It also returns `false` if the current instance is a <xref:System.Type> object that represents a collection type or an interface designed to work with collections, such as <xref:System.Collections.IEnumerable> or <xref:System.Collections.Generic.IEnumerable%601>.  \n  \n To check for an array, use code such as:  \n  \n```csharp  \ntypeof(Array).IsAssignableFrom(type)  \n```  \n  \n```vb  \nGetType(Array).IsAssignableFrom(type)  \n```  \n  \n If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.  \n  \n This property is read-only."
  example:
  - "The following example demonstrates using the<xref:System.Type.IsArray%2A> property.  \n  \n [!code-csharp[System.Type.IsArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isarray/cs/isarray2.cs#1)]\n [!code-vb[System.Type.IsArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isarray/vb/isarray2.vb#1)]"
  syntax:
    content: public bool IsArray { get; }
    return:
      type: System.Boolean
      description: '`true` if the current type is an array; otherwise, `false`.'
  overload: System.Type.IsArray*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsArrayImpl
  commentId: M:System.Type.IsArrayImpl
  id: IsArrayImpl
  parent: System.Type
  langs:
  - csharp
  name: IsArrayImpl()
  nameWithType: Type.IsArrayImpl()
  fullName: Type.IsArrayImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, implements the <xref href="System.Type.IsArray"></xref> property and determines whether the <xref href="System.Type"></xref> is an array.
  remarks: An instance of the <xref:System.Array> class must return `false` because it is an object, not an array.
  example:
  - "The following example overrides the `IsArrayImpl` method in the `MyTypeDelegator` class, checks if a variable is an array, and displays the result.  \n  \n [!code-cpp[Type_IsArrayImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsArrayImpl/CPP/type_isarrayimpl.cpp#1)]\n [!code-csharp[Type_IsArrayImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsArrayImpl/CS/type_isarrayimpl.cs#1)]\n [!code-vb[Type_IsArrayImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsArrayImpl/VB/type_isarrayimpl.vb#1)]"
  syntax:
    content: protected abstract bool IsArrayImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is an array; otherwise, `false`.'
  overload: System.Type.IsArrayImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsAssignableFrom(System.Type)
  commentId: M:System.Type.IsAssignableFrom(System.Type)
  id: IsAssignableFrom(System.Type)
  parent: System.Type
  langs:
  - csharp
  name: IsAssignableFrom(Type)
  nameWithType: Type.IsAssignableFrom(Type)
  fullName: Type.IsAssignableFrom(Type)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Determines whether an instance of a specified type can be assigned to an instance of the current type.
  remarks: "The <xref:System.Type.IsAssignableFrom%2A> method can be used to determine whether an instance of `c` can be assigned to an instance of the current type, The method is most useful when you are handling objects whose types are not known at design time and allows for conditional assignment, as the following example shows.  \n  \n [!code-csharp[System.Type.IsAssignableFrom#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#3)]\n [!code-vb[System.Type.IsAssignableFrom#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#3)]  \n  \n This method thus ensures that a line of code like the following will execute at runtime without throwing an <xref:System.InvalidCastException> exception or a similar exception:  \n  \n [!code-csharp[System.Type.IsAssignableFrom#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom3.cs#4)]\n [!code-vb[System.Type.IsAssignableFrom#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom3.vb#4)]  \n  \n This method can be overridden by a derived class.  \n  \n> [!NOTE]\n>  A generic type definition is not assignable from a closed constructed type. That is, you cannot assign the closed constructed type `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) to a variable of type `MyGenericList<T>`.  \n  \n If the `c` parameter is of type <xref:System.Reflection.Emit.TypeBuilder>, the result is based on the type that is to be built. The following code example demonstrates this using a built type named `B`.  \n  \n [!code-csharp[System.Type.IsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/isassignablefrom_ex1.cs#1)]\n [!code-vb[System.Type.IsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/isassignablefrom_ex1.vb#1)]"
  example:
  - "The following example demonstrates the `IsAssignableFrom` method using defined classes, integer arrays, and generics.  \n  \n [!code-cpp[TestIsAssignableFrom#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsAssignableFrom/cpp/testisassignablefrom.cpp#1)]\n [!code-csharp[TestIsAssignableFrom#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsAssignableFrom/CS/testisassignablefrom.cs#1)]\n [!code-vb[TestIsAssignableFrom#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsAssignableFrom/VB/testisassignablefrom.vb#1)]"
  syntax:
    content: public virtual bool IsAssignableFrom (Type c);
    parameters:
    - id: c
      type: System.Type
      description: The type to compare with the current type.
    return:
      type: System.Boolean
      description: "`true` if any of the following conditions is true:  \n  \n-   <code>c</code> and the current instance represent the same type.  \n  \n-   <code>c</code> is derived either directly or indirectly from the current instance. <code>c</code> is derived directly from the current instance if it inherits from the current instance; <code>c</code> is derived indirectly from the current instance if it inherits from a succession of one or more classes that inherit from the current instance.  \n  \n-   The current instance is an interface that <code>c</code> implements.  \n  \n-   <code>c</code> is a generic type parameter, and the current instance represents one of the constraints of <code>c</code>.  \n  \n     In the following example, the current instance is a <xref href=\"System.Type\"></xref> object that represents the <xref href=\"System.IO.Stream\"></xref> class. <code>GenericWithConstraint</code> is a generic type whose generic type parameter must be of type    <xref href=\"System.IO.Stream\"></xref>. Passing its generic type parameter to the <xref href=\"System.Type.IsAssignableFrom(System.Type)\"></xref> indicates that  an instance of the generic type parameter can be assigned to an <xref href=\"System.IO.Stream\"></xref> object.  \n  \n     [!code-csharp[System.Type.IsAssignableFrom#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isassignablefrom/cs/IsAssignableFrom2.cs#2)]\n     [!code-vb[System.Type.IsAssignableFrom#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isassignablefrom/vb/IsAssignableFrom2.vb#2)]  \n  \n-   <code>c</code> represents a value type, and the current instance represents <code>Nullable<c></code> (<code>Nullable(Of c)</code> in Visual Basic).  \n  \n `false` if none of these conditions are true, or if <code>c</code> is `null`."
  overload: System.Type.IsAssignableFrom*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsAutoClass
  commentId: P:System.Type.IsAutoClass
  id: IsAutoClass
  parent: System.Type
  langs:
  - csharp
  name: IsAutoClass
  nameWithType: Type.IsAutoClass
  fullName: Type.IsAutoClass
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the string format attribute `AutoClass` is selected for the <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Reflection.TypeAttributes.StringFormatMask> selects the string format attributes. The string format attributes enhance interoperability by defining how strings should be interpreted.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`."
  syntax:
    content: public bool IsAutoClass { get; }
    return:
      type: System.Boolean
      description: '`true` if the string format attribute `AutoClass` is selected for the <xref href="System.Type"></xref>; otherwise, `false`.'
  overload: System.Type.IsAutoClass*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsAutoLayout
  commentId: P:System.Type.IsAutoLayout
  id: IsAutoLayout
  parent: System.Type
  langs:
  - csharp
  name: IsAutoLayout
  nameWithType: Type.IsAutoLayout
  fullName: Type.IsAutoLayout
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the fields of the current type are laid out automatically by the common language runtime.
  remarks: "This property is provided as a convenience. Alternatively, you can use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is set. The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>,<xref:System.Reflection.TypeAttributes?displayProperty=fullName>, and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> enumeration values indicate the way the fields of the type are laid out in memory.  \n  \n For dynamic types, you can specify <xref:System.Reflection.TypeAttributes?displayProperty=fullName> when you create the type. In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration value to the type, to let the runtime determine the appropriate way to lay out the class.  \n  \n> [!NOTE]\n>  You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example creates an instance of the type and displays the <xref:System.Type.IsAutoLayout%2A> property.  \n  \n [!code-cpp[Type_IsAutoLayout#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsAutoLayout/CPP/type_isautolayout.cpp#1)]\n [!code-csharp[Type_IsAutoLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsAutoLayout/CS/type_isautolayout.cs#1)]\n [!code-vb[Type_IsAutoLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsAutoLayout/VB/type_isautolayout.vb#1)]"
  syntax:
    content: public bool IsAutoLayout { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type.Attributes"></xref> property of the current type includes <xref href="System.Reflection.TypeAttributes.AutoLayout"></xref>; otherwise, `false`.'
  overload: System.Type.IsAutoLayout*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsByRef
  commentId: P:System.Type.IsByRef
  id: IsByRef
  parent: System.Type
  langs:
  - csharp
  name: IsByRef
  nameWithType: Type.IsByRef
  fullName: Type.IsByRef
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is passed by reference.
  remarks: To get to the actual type, dereference the type that was passed by reference, and then call <xref:System.Type.GetElementType%2A> on that type.
  example:
  - "The following example demonstrates a use of the `IsByRef` property to check whether a specified type is passed by reference. The example defines the class `MyTypeDelegator`, which overrides the `HasElementTypeImpl` method. The main class checks for the `HasElementType` property and displays the element type.  \n  \n [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]\n [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]\n [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]"
  syntax:
    content: public bool IsByRef { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is passed by reference; otherwise, `false`.'
  overload: System.Type.IsByRef*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsByRefImpl
  commentId: M:System.Type.IsByRefImpl
  id: IsByRefImpl
  parent: System.Type
  langs:
  - csharp
  name: IsByRefImpl()
  nameWithType: Type.IsByRefImpl()
  fullName: Type.IsByRefImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, implements the <xref href="System.Type.IsByRef"></xref> property and determines whether the <xref href="System.Type"></xref> is passed by reference.
  syntax:
    content: protected abstract bool IsByRefImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is passed by reference; otherwise, `false`.'
  overload: System.Type.IsByRefImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsClass
  commentId: P:System.Type.IsClass
  id: IsClass
  parent: System.Type
  langs:
  - csharp
  name: IsClass
  nameWithType: Type.IsClass
  fullName: Type.IsClass
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is a class or a delegate; that is, not a value type or interface.
  remarks: "This property returns `true` for classes as well as delegates. It returns `false` for value types (for structures and enumerations) even if they are boxed.  \n  \n If the current<xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `true`.If the current <xref:System.Type> represents a constructed generic type, this property returns `true` if the generic type definition is a class definition; that is, it does not define an interface or a value type.  \n  \n> [!NOTE]\n>  This property returns `true` for `Type` instances that represent the <xref:System.Enum> and <xref:System.ValueType> classes. These two classes are the base types for enumerations and value types, respectively, but they are not enumerations or value types themselves. For more information, see the <xref:System.Type.IsValueType%2A>and <xref:System.Type.IsEnum%2A> properties.  \n  \n The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value  distinguishes a type declaration as class or interface.However, both classes and value types are marked with the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attribute. If you retrieve the value of a type's Attributes property and use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> value to determine whether a type is a class instead of a value type, you must also call the <xref:System.Type.IsValueType%2A> property. The example for the <xref:System.Reflection.TypeAttributes> enumeration contains additional information as well as anexample.  \n  \n This property is read-only."
  example:
  - "The following example creates an instance of a type and indicates whether the type is a class.  \n  \n [!code-cpp[Type_IsClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsClass/CPP/type_isclass.cpp#1)]\n [!code-csharp[Type_IsClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsClass/CS/type_isclass.cs#1)]\n [!code-vb[Type_IsClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsClass/VB/type_isclass.vb#1)]"
  syntax:
    content: public bool IsClass { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is a class; otherwise, `false`.'
  overload: System.Type.IsClass*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsCOMObject
  commentId: P:System.Type.IsCOMObject
  id: IsCOMObject
  parent: System.Type
  langs:
  - csharp
  name: IsCOMObject
  nameWithType: Type.IsCOMObject
  fullName: Type.IsCOMObject
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is a COM object.
  remarks: "This method returns `false` for COM interfaces because they are not objects. COM interfaces can be implemented by Microsoft .NET Framework objects.  \n  \n You can also load a COM class and get a `Type` object for that COM class by using the [Tlbimp.exe (Type Library Importer)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) tool.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int`> (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  syntax:
    content: public bool IsCOMObject { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is a COM object; otherwise, `false`.'
  overload: System.Type.IsCOMObject*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsCOMObjectImpl
  commentId: M:System.Type.IsCOMObjectImpl
  id: IsCOMObjectImpl
  parent: System.Type
  langs:
  - csharp
  name: IsCOMObjectImpl()
  nameWithType: Type.IsCOMObjectImpl()
  fullName: Type.IsCOMObjectImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, implements the <xref href="System.Type.IsCOMObject"></xref> property and determines whether the <xref href="System.Type"></xref> is a COM object.
  remarks: This method returns `false` for COM interfaces because they are not objects. COM interfaces can be implemented by Microsoft .NET Framework objects.
  syntax:
    content: protected abstract bool IsCOMObjectImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is a COM object; otherwise, `false`.'
  overload: System.Type.IsCOMObjectImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsConstructedGenericType
  commentId: P:System.Type.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Type
  langs:
  - csharp
  name: IsConstructedGenericType
  nameWithType: Type.IsConstructedGenericType
  fullName: Type.IsConstructedGenericType
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type.
  remarks: "A constructed generic type has had explicit types supplied for all of its generic type parameters. It is also referred to as a closed generic type.  \n  \n When this property is `true`, you can create instances of the current type; when it is `false`, you can't."
  syntax:
    content: public virtual bool IsConstructedGenericType { get; }
    return:
      type: System.Boolean
      description: '`true` if this object represents a constructed generic type; otherwise, `false`.'
  overload: System.Type.IsConstructedGenericType*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsContextful
  commentId: P:System.Type.IsContextful
  id: IsContextful
  parent: System.Type
  langs:
  - csharp
  name: IsContextful
  nameWithType: Type.IsContextful
  fullName: Type.IsContextful
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> can be hosted in a context.
  remarks: "A context intercepts calls to the class members and enforces policies that are applied to the class, such as synchronization. For more detailed information on remoting contexts, see <xref:System.Runtime.Remoting.Contexts.Context>.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class. It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.  \n  \n [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]\n [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]\n [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]"
  syntax:
    content: public bool IsContextful { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> can be hosted in a context; otherwise, `false`.'
  overload: System.Type.IsContextful*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsContextfulImpl
  commentId: M:System.Type.IsContextfulImpl
  id: IsContextfulImpl
  parent: System.Type
  langs:
  - csharp
  name: IsContextfulImpl()
  nameWithType: Type.IsContextfulImpl()
  fullName: Type.IsContextfulImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Implements the <xref href="System.Type.IsContextful"></xref> property and determines whether the <xref href="System.Type"></xref> can be hosted in a context.
  remarks: "This method can be overridden by a derived class.  \n  \n A context intercepts calls to the class members and enforce policies that are applied to the class, such as synchronization."
  example:
  - "The following example demonstrates a use of the `IsContextfulImpl` method.  \n  \n [!code-cpp[Type_IsContextfulImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextfulImpl/CPP/type_iscontextfulimpl.cpp#1)]\n [!code-csharp[Type_IsContextfulImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextfulImpl/CS/type_iscontextfulimpl.cs#1)]\n [!code-vb[Type_IsContextfulImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextfulImpl/VB/type_iscontextfulimpl.vb#1)]"
  syntax:
    content: protected virtual bool IsContextfulImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> can be hosted in a context; otherwise, `false`.'
  overload: System.Type.IsContextfulImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsEnum
  commentId: P:System.Type.IsEnum
  id: IsEnum
  parent: System.Type
  langs:
  - csharp
  name: IsEnum
  nameWithType: Type.IsEnum
  fullName: Type.IsEnum
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type"></xref> represents an enumeration.
  remarks: "This property returns `true` for an enumeration, but not for the <xref:System.Enum> type itself.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  \n  \n This property is read-only."
  example:
  - "The following example demonstrates how to use the `IsEnum` property.  \n  \n [!code-cpp[TestIsEnum#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsEnum/CPP/TestIsEnum.cpp#1)]\n [!code-csharp[TestIsEnum#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsEnum/CS/testisenum.cs#1)]\n [!code-vb[TestIsEnum#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsEnum/VB/testisenum.vb#1)]"
  syntax:
    content: public virtual bool IsEnum { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Type"></xref> represents an enumeration; otherwise, `false`.'
  overload: System.Type.IsEnum*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsEnumDefined(System.Object)
  commentId: M:System.Type.IsEnumDefined(System.Object)
  id: IsEnumDefined(System.Object)
  parent: System.Type
  langs:
  - csharp
  name: IsEnumDefined(Object)
  nameWithType: Type.IsEnumDefined(Object)
  fullName: Type.IsEnumDefined(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Returns a value that indicates whether the specified value exists in the current enumeration type.
  syntax:
    content: public virtual bool IsEnumDefined (object value);
    parameters:
    - id: value
      type: System.Object
      description: The value to be tested.
    return:
      type: System.Boolean
      description: '`true` if the specified value is a member of the current enumeration type; otherwise, `false`.'
  overload: System.Type.IsEnumDefined*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current type is not an enumeration.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>value</code> is of a type that cannot be the underlying type of an enumeration.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsEquivalentTo(System.Type)
  commentId: M:System.Type.IsEquivalentTo(System.Type)
  id: IsEquivalentTo(System.Type)
  parent: System.Type
  langs:
  - csharp
  name: IsEquivalentTo(Type)
  nameWithType: Type.IsEquivalentTo(Type)
  fullName: Type.IsEquivalentTo(Type)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Determines whether two COM types have the same identity and are eligible for type equivalence.
  remarks: "Beginning with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the common language runtime supports the embedding of type information for COM types directly into managed assemblies, instead of requiring the managed assemblies to obtain type information for COM types from interop assemblies. Because the embedded type information includes only the types and members that are actually used by a managed assembly, two managed assemblies might have very different views of the same COM type. Each managed assembly has a different <xref:System.Type> object to represent its view of the COM type. The common language runtime supports type equivalence between these different views for interfaces, structures, enumerations, and delegates.  \n  \n Type equivalence means that a COM object that is passed from one managed assembly to another can be cast to the appropriate managed type in the receiving assembly. The <xref:System.Type.IsEquivalentTo%2A> method enables an assembly to determine that a COM object obtained from another assembly has the same COM identity as one of the first assembly's own embedded interop types, and thus can be cast to that type.  \n  \n For more information, see [Type Equivalence and Embedded Interop Types](~/docs/framework/interop/type-equivalence-and-embedded-interop-types.md)."
  syntax:
    content: public virtual bool IsEquivalentTo (Type other);
    parameters:
    - id: other
      type: System.Type
      description: The COM type that is tested for equivalence with the current type.
    return:
      type: System.Boolean
      description: '`true` if the COM types are equivalent; otherwise, `false`. This method also returns `false` if one type is in an assembly that is loaded for execution, and the other is in an assembly that is loaded into the reflection-only context.'
  overload: System.Type.IsEquivalentTo*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsExplicitLayout
  commentId: P:System.Type.IsExplicitLayout
  id: IsExplicitLayout
  parent: System.Type
  langs:
  - csharp
  name: IsExplicitLayout
  nameWithType: Type.IsExplicitLayout
  fullName: Type.IsExplicitLayout
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the fields of the current type are laid out at explicitly specified offsets.
  remarks: "This property is provided as a convenience. Alternatively, you can use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is set. The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> enumeration values indicate the way the fields of the type are laid out in memory.  \n  \n For dynamic types, you can specify <xref:System.Reflection.TypeAttributes?displayProperty=fullName> when you create the type. In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration value to the type, to specify that the offsets at which the fields start are specified explicitly.  \n  \n> [!NOTE]\n>  You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example creates an instance of a type and displays the value of its <xref:System.Type.IsExplicitLayout%2A> property. It uses the `MySystemTime` class, which is also in the code example for <xref:System.Runtime.InteropServices.StructLayoutAttribute>.  \n  \n [!code-csharp[Type_IsExplicitLayout#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsExplicitLayout/CS/type_isexplicitlayout.cs#1)]\n [!code-vb[Type_IsExplicitLayout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsExplicitLayout/VB/type_isexplicitlayout.vb#1)]"
  syntax:
    content: public bool IsExplicitLayout { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type.Attributes"></xref> property of the current type includes <xref href="System.Reflection.TypeAttributes.ExplicitLayout"></xref>; otherwise, `false`.'
  overload: System.Type.IsExplicitLayout*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsGenericParameter
  commentId: P:System.Type.IsGenericParameter
  id: IsGenericParameter
  parent: System.Type
  langs:
  - csharp
  name: IsGenericParameter
  nameWithType: Type.IsGenericParameter
  fullName: Type.IsGenericParameter
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type"></xref> represents a type parameter in the definition of a generic type or method.
  remarks: "<xref:System.Type> objects that represent generic type parameters can be obtained by calling the <xref:System.Type.GetGenericArguments%2A> method of a <xref:System.Type> object that represents a generic type definition, or the <xref:System.Reflection.MethodInfo.GetGenericArguments%2A> method of a <xref:System.Reflection.MethodInfo> object that represents a generic method definition.  \n  \n-   For a generic type or method definition, the <xref:System.Type.IsGenericParameter%2A> property returns `true` for every element of the resulting array.  \n  \n-   For a closed constructed type or method, the <xref:System.Type.IsGenericParameter%2A> property returns `false` for every element of the array returned by the <xref:System.Type.GetGenericArguments%2A> method.  \n  \n-   For an open constructed type or method, some elements of the array might be specific types and others might be type parameters. <xref:System.Type.IsGenericParameter%2A> returns `false` for the types and `true` for the type parameters. The code example for the <xref:System.Type.ContainsGenericParameters%2A> property demonstrates a generic class with a mixture of types and type parameters.  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks."
  example:
  - "The following example uses the <xref:System.Type.IsGenericParameter%2A> property to test for generic type parameters in a generic type.  \n  \n [!code-cpp[System.Type.IsGenericParameter#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CPP/source.cpp#2)]\n [!code-csharp[System.Type.IsGenericParameter#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericParameter/CS/source.cs#2)]\n [!code-vb[System.Type.IsGenericParameter#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericParameter/VB/source.vb#2)]"
  syntax:
    content: public virtual bool IsGenericParameter { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> object represents a type parameter of a generic type definition or generic method definition; otherwise, `false`.'
  overload: System.Type.IsGenericParameter*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsGenericType
  commentId: P:System.Type.IsGenericType
  id: IsGenericType
  parent: System.Type
  langs:
  - csharp
  name: IsGenericType
  nameWithType: Type.IsGenericType
  fullName: Type.IsGenericType
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the current type is a generic type.
  remarks: "Use the <xref:System.Type.IsGenericType%2A> property to determine whether a <xref:System.Type> object represents a generic type. Use the <xref:System.Type.ContainsGenericParameters%2A> property to determine whether a <xref:System.Type> object represents an open constructed type or a closed constructed type.  \n  \n> [!NOTE]\n>  The <xref:System.Type.IsGenericType%2A> property returns `false` if the immediate type is not generic. For example, an array whose elements are of type `A<int>` (`A(Of Integer)` in Visual Basic) is not itself a generic type.  \n  \n The following table summarizes the invariant conditions for common terms used in generic reflection.  \n  \n|Term|Invariant|  \n|----------|---------------|  \n|generic type definition|The <xref:System.Type.IsGenericTypeDefinition%2A> property is `true`.<br /><br /> Defines a generic type. A constructed type is created by calling the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object that represents a generic type definition and specifying an array of type arguments.<br /><br /> <xref:System.Type.MakeGenericType%2A> can be called only on generic type definitions.<br /><br /> Any generic type definition is a generic type (the <xref:System.Type.IsGenericType%2A> property is `true`), but the converse is not true.|  \n|generic type|The <xref:System.Type.IsGenericType%2A> property is `true`.<br /><br /> Can be a generic type definition, an open constructed type, or a closed constructed type.<br /><br /> Note that an array type whose element type is generic is not itself a generic type. The same is true of a <xref:System.Type> object representing a pointer to a generic type.|  \n|open constructed type|The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.<br /><br /> Examples are a generic type that has unassigned type parameters, a type that is nested in a generic type definition or in an open constructed type, or a generic type that has a type argument for which the <xref:System.Type.ContainsGenericParameters%2A> property is `true`.<br /><br /> It is not possible to create an instance of an open constructed type.<br /><br /> Note that not all open constructed types are generic. For example, an array whose element type is a generic type definition is not generic, and a pointer to an open constructed type is not generic.|  \n|closed constructed type|The <xref:System.Type.ContainsGenericParameters%2A> property is `false`.<br /><br /> When examined recursively, the type has no unassigned generic parameters.|  \n|generic type parameter|The <xref:System.Type.IsGenericParameter%2A> property is `true`.<br /><br /> The <xref:System.Type.ContainsGenericParameters%2A> property is `true`.<br /><br /> In a generic type definition, a placeholder for a type that will be assigned later.|  \n|generic type argument|Can be any type, including a generic type parameter.<br /><br /> Type arguments are specified as an array of <xref:System.Type> objects passed to the <xref:System.Type.MakeGenericType%2A> method when creating a constructed generic type. If instances of the resulting type are to be created, the <xref:System.Type.ContainsGenericParameters%2A> property must be `false` for all the type arguments.|  \n  \n The following code example and table illustrate some of these terms and invariants. The `Derived` class is of particular interest because its base type is a constructed type that has a mixture of types and type parameters in its type argument list.  \n  \n [!code-cpp[System.Type.IsGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/remarks.cpp#2)]\n [!code-csharp[System.Type.IsGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/remarks.cs#2)]\n [!code-vb[System.Type.IsGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/remarks.vb#2)]  \n  \n The following table shows examples that use and build on the classes `Base`, `Derived`, and `G`. When the C++ and C# code is the same, only one entry is shown.  \n  \n|Example|Invariants|  \n|-------------|----------------|  \n|`Derived(Of V)`<br /><br /> `Derived<V>`|For this type:<br /><br /> <xref:System.Type.IsGenericType%2A> is `true`.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `true`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true`.|  \n|`Base(Of String, V)`<br /><br /> `Base<String,V>`<br /><br /> `Base<String^,V>`|For this type:<br /><br /> <xref:System.Type.IsGenericType%2A> is `true`.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true`.|  \n|`Dim d() As Derived(Of Integer)`<br /><br /> `Derived<int>[] d;`<br /><br /> `array<Derived<int>^>^ d;`|For the type of variable `d`:<br /><br /> <xref:System.Type.IsGenericType%2A> is `false` because `d` is an array.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `false`.|  \n|`T`, `U`, and `V` (everywhere they appear)|<xref:System.Type.IsGenericParameter%2A> is `true`.<br /><br /> <xref:System.Type.IsGenericType%2A> is `false` because there is no way to constrain a type parameter to generic types.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true` because `T`, `U`, and `V` are themselves generic type parameters. This does not imply anything about type arguments that are assigned to them later.|  \n|The type of field `F`|<xref:System.Type.IsGenericType%2A> is `true`.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `false` because a type has been assigned to to the type parameter of `G`. Note that this is equivalent to having called the <xref:System.Type.MakeGenericType%2A> method.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true` because the type of field `F` has a type argument that is an open constructed type. The constructed type is open because its type argument (that is, `Base`) is a generic type definition. This illustrates the recursive nature of the <xref:System.Type.IsGenericType%2A> property.|  \n|The nested class `Nested`|<xref:System.Type.IsGenericType%2A> is `true`, even though the `Nested` class has no generic type parameters of its own, because it is nested in a generic type.<br /><br /> <xref:System.Type.IsGenericTypeDefinition%2A> is `true`. That is, you can call the <xref:System.Type.MakeGenericType%2A> method and supply the type parameter of the enclosing type, `Derived`.<br /><br /> <xref:System.Type.ContainsGenericParameters%2A> is `true` because the enclosing type, `Derived`, has generic type parameters. This illustrates the recursive nature of the <xref:System.Type.ContainsGenericParameters%2A> property.|"
  example:
  - "The following code example displays the value of the <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, and <xref:System.Type.ContainsGenericParameters%2A> properties for the types described in the Remarks section. For explanations of the property values, see the accompanying table in Remarks.  \n  \n [!code-cpp[System.Type.IsGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericType/cpp/source.cpp#1)]\n [!code-csharp[System.Type.IsGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericType/cs/source.cs#1)]\n [!code-vb[System.Type.IsGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericType/vb/source.vb#1)]"
  syntax:
    content: public virtual bool IsGenericType { get; }
    return:
      type: System.Boolean
      description: '`true` if the current type is a generic type; otherwise, `false`.'
  overload: System.Type.IsGenericType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsGenericTypeDefinition
  commentId: P:System.Type.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Type
  langs:
  - csharp
  name: IsGenericTypeDefinition
  nameWithType: Type.IsGenericTypeDefinition
  fullName: Type.IsGenericTypeDefinition
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type"></xref> represents a generic type definition, from which other generic types can be constructed.
  remarks: "A generic type definition is a template from which other types can be constructed. For example, from the generic type definition `G<T>` (expressed in C# syntax; `G(Of T)` in Visual Basic or `generic <typename T> ref class G` in C++) you can construct and instantiate the type `G<int>` (`G(Of Integer)` in Visual Basic), by calling the <xref:System.Type.MakeGenericType%2A> method with a generic argument list containing the <xref:System.Int32> type. Given a <xref:System.Type> object representing this constructed type, the <xref:System.Type.GetGenericTypeDefinition%2A> method gets the generic type definition back again.  \n  \n Use the <xref:System.Type.IsGenericTypeDefinition%2A> property to determine whether you can create new types from the current type. If the <xref:System.Type.IsGenericTypeDefinition%2A> property returns `true`, you can call the <xref:System.Type.MakeGenericType%2A> method to create new generic types.  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks."
  example:
  - "The following example displays information about a type, including whether or not it is a generic type definition. Information is displayed for a constructed type, for its generic type definition, and for an ordinary type.  \n  \n [!code-cpp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CPP/source.cpp#1)]\n [!code-csharp[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/CS/source.cs#1)]\n [!code-vb[System.Type.IsGenericTypeDefinition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsGenericTypeDefinition/VB/source.vb#1)]"
  syntax:
    content: public virtual bool IsGenericTypeDefinition { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> object represents a generic type definition; otherwise, `false`.'
  overload: System.Type.IsGenericTypeDefinition*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsImport
  commentId: P:System.Type.IsImport
  id: IsImport
  parent: System.Type
  langs:
  - csharp
  name: IsImport
  nameWithType: Type.IsImport
  fullName: Type.IsImport
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> has a <xref href="System.Runtime.InteropServices.ComImportAttribute"></xref> attribute applied, indicating that it was imported from a COM type library.
  remarks: "If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>.`  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  syntax:
    content: public bool IsImport { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> has a <xref href="System.Runtime.InteropServices.ComImportAttribute"></xref>; otherwise, `false`.'
  overload: System.Type.IsImport*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsInstanceOfType(System.Object)
  commentId: M:System.Type.IsInstanceOfType(System.Object)
  id: IsInstanceOfType(System.Object)
  parent: System.Type
  langs:
  - csharp
  name: IsInstanceOfType(Object)
  nameWithType: Type.IsInstanceOfType(Object)
  fullName: Type.IsInstanceOfType(Object)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Determines whether the specified object is an instance of the current <xref href="System.Type"></xref>.
  remarks: "This method can be overridden by a derived class.  \n  \n> [!NOTE]\n>  A constructed type is not an instance of its generic type definition. That is, `MyGenericList<int>` (`MyGenericList(Of Integer)` in Visual Basic) is not an instance of `MyGenericList<T>` (`MyGenericList(Of T)` in Visual Basic)."
  example:
  - "The following example demonstrates the use of the `IsInstanceOfType` method.  \n  \n [!code-cpp[TestIsInstanceOfType#1](~/samples/snippets/cpp/VS_Snippets_CLR/TestIsInstanceOfType/CPP/testisinstanceoftype.cpp#1)]\n [!code-csharp[TestIsInstanceOfType#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsInstanceOfType/CS/testisinstanceoftype.cs#1)]\n [!code-vb[TestIsInstanceOfType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsInstanceOfType/VB/testisinstanceoftype.vb#1)]"
  syntax:
    content: public virtual bool IsInstanceOfType (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object to compare with the current type.
    return:
      type: System.Boolean
      description: '`true` if the current `Type` is in the inheritance hierarchy of the object represented by <code>o</code>, or if the current `Type` is an interface that <code>o</code> implements. `false` if neither of these conditions is the case, if <code>o</code> is `null`, or if the current `Type` is an open generic type (that is, <xref href="System.Type.ContainsGenericParameters"></xref> returns `true`).'
  overload: System.Type.IsInstanceOfType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsInterface
  commentId: P:System.Type.IsInterface
  id: IsInterface
  parent: System.Type
  langs:
  - csharp
  name: IsInterface
  nameWithType: Type.IsInterface
  fullName: Type.IsInterface
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is an interface; that is, not a class or a value type.
  remarks: "The <xref:System.Reflection.TypeAttributes.ClassSemanticsMask> distinguishes a type declaration as class, interface or value type.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`.  \n  \n This property is read-only."
  example:
  - "The following example creates an interface, checks for the interface type, and indicates whether a class has the `IsInterface` property set.  \n  \n [!code-cpp[Type_IsInterface#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsInterface/CPP/type_isinterface.cpp#1)]\n [!code-csharp[Type_IsInterface#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsInterface/CS/type_isinterface.cs#1)]\n [!code-vb[Type_IsInterface#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsInterface/VB/type_isinterface.vb#1)]"
  syntax:
    content: >-
      [get: System.Security.SecuritySafeCritical]

      public bool IsInterface { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is an interface; otherwise, `false`.'
  overload: System.Type.IsInterface*
  exceptions: []
  attributes:
  - type: 'get: System.Security.SecuritySafeCritical'
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsLayoutSequential
  commentId: P:System.Type.IsLayoutSequential
  id: IsLayoutSequential
  parent: System.Type
  langs:
  - csharp
  name: IsLayoutSequential
  nameWithType: Type.IsLayoutSequential
  fullName: Type.IsLayoutSequential
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the fields of the current type are laid out sequentially, in the order that they were defined or emitted to the metadata.
  remarks: "This property is provided as a convenience. Alternatively, you can use the <xref:System.Reflection.TypeAttributes?displayProperty=fullName>enumeration value to select the type layout attributes, and then test whether <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is set. The <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, <xref:System.Reflection.TypeAttributes?displayProperty=fullName>, and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> enumeration values indicate the way the fields of the type are laid out in memory.  \n  \n For dynamic types, you can specify <xref:System.Reflection.TypeAttributes?displayProperty=fullName> when you create the type. In code, apply the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute with the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName> enumeration value to the type, to specify that layout is sequential.  \n  \n> [!NOTE]\n>  You cannot use the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method to determine whether the <xref:System.Runtime.InteropServices.StructLayoutAttribute> has been applied to a type.  \n  \n For more information, see section 9.1.2 of the specification for the Common Language Infrastructure (CLI) documentation, \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example creates an instance of a class for which the <xref:System.Runtime.InteropServices.LayoutKind?displayProperty=fullName>enumeration value in the <xref:System.Runtime.InteropServices.StructLayoutAttribute> class has been set, checks for the <xref:System.Type.IsLayoutSequential%2A> property, and displays the result.  \n  \n [!code-cpp[Type_IsLayoutSequential#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsLayoutSequential/CPP/type_islayoutsequential.cpp#1)]\n [!code-csharp[Type_IsLayoutSequential#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsLayoutSequential/CS/type_islayoutsequential.cs#1)]\n [!code-vb[Type_IsLayoutSequential#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsLayoutSequential/VB/type_islayoutsequential.vb#1)]"
  syntax:
    content: public bool IsLayoutSequential { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type.Attributes"></xref> property of the current type includes <xref href="System.Reflection.TypeAttributes.SequentialLayout"></xref>; otherwise, `false`.'
  overload: System.Type.IsLayoutSequential*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsMarshalByRef
  commentId: P:System.Type.IsMarshalByRef
  id: IsMarshalByRef
  parent: System.Type
  langs:
  - csharp
  name: IsMarshalByRef
  nameWithType: Type.IsMarshalByRef
  fullName: Type.IsMarshalByRef
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is marshaled by reference.
  remarks: ''
  example:
  - "The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class. It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.  \n  \n [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]\n [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]\n [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]"
  syntax:
    content: public bool IsMarshalByRef { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is marshaled by reference; otherwise, `false`.'
  overload: System.Type.IsMarshalByRef*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsMarshalByRefImpl
  commentId: M:System.Type.IsMarshalByRefImpl
  id: IsMarshalByRefImpl
  parent: System.Type
  langs:
  - csharp
  name: IsMarshalByRefImpl()
  nameWithType: Type.IsMarshalByRefImpl()
  fullName: Type.IsMarshalByRefImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Implements the <xref href="System.Type.IsMarshalByRef"></xref> property and determines whether the <xref href="System.Type"></xref> is marshaled by reference.
  remarks: This method can be overridden by a derived class.
  example:
  - "The following example determines whether the given type is marshaled by reference and displays the result.  \n  \n [!code-cpp[Type_IsMarshalByRefImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CPP/type_ismarshalbyrefimpl.cpp#1)]\n [!code-csharp[Type_IsMarshalByRefImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsMarshalByRefImpl/CS/type_ismarshalbyrefimpl.cs#1)]\n [!code-vb[Type_IsMarshalByRefImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsMarshalByRefImpl/VB/type_ismarshalbyrefimpl.vb#1)]"
  syntax:
    content: protected virtual bool IsMarshalByRefImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is marshaled by reference; otherwise, `false`.'
  overload: System.Type.IsMarshalByRefImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNested
  commentId: P:System.Type.IsNested
  id: IsNested
  parent: System.Type
  langs:
  - csharp
  name: IsNested
  nameWithType: Type.IsNested
  fullName: Type.IsNested
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type"></xref> object represents a type whose definition is nested inside the definition of another type.
  remarks: "The <xref:System.Type.IsNested%2A> property returns `true` for all nested types, regardless of visibility. To test for nesting and visibility at the same time, use the related properties <xref:System.Type.IsNestedAssembly%2A>, <xref:System.Type.IsNestedFamily%2A>, <xref:System.Type.IsNestedFamANDAssem%2A>, <xref:System.Type.IsNestedFamORAssem%2A>, <xref:System.Type.IsNestedPrivate%2A>, or <xref:System.Type.IsNestedPublic%2A>.  \n  \n> [!NOTE]\n>  The <xref:System.Reflection.TypeAttributes.VisibilityMask> enumeration member selects the visibility attributes for a type."
  example:
  - "The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  \n  \n [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]\n [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]"
  syntax:
    content: public bool IsNested { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is nested inside another type; otherwise, `false`.'
  overload: System.Type.IsNested*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNestedAssembly
  commentId: P:System.Type.IsNestedAssembly
  id: IsNestedAssembly
  parent: System.Type
  langs:
  - csharp
  name: IsNestedAssembly
  nameWithType: Type.IsNestedAssembly
  fullName: Type.IsNestedAssembly
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is nested and visible only within its own assembly.
  remarks: "If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  \n  \n <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes."
  example:
  - "The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  \n  \n [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]\n [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]"
  syntax:
    content: public bool IsNestedAssembly { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is nested and visible only within its own assembly; otherwise, `false`.'
  overload: System.Type.IsNestedAssembly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNestedFamANDAssem
  commentId: P:System.Type.IsNestedFamANDAssem
  id: IsNestedFamANDAssem
  parent: System.Type
  langs:
  - csharp
  name: IsNestedFamANDAssem
  nameWithType: Type.IsNestedFamANDAssem
  fullName: Type.IsNestedFamANDAssem
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is nested and visible only to classes that belong to both its own family and its own assembly.
  remarks: "If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  \n  \n <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  \n  \n> [!NOTE]\n>  The C# and Visual Basic languages do not include semantics that allow you to define a nested type that is visible only to protected types in its own assembly. `protected internal` visibility in C# and `Protected Friend` visibility in Visual Basic define a nested type that is visible both to protected types and to types in the same assembly.  \n  \n A <xref:System.Type> object's family is defined as all objects of the same <xref:System.Type> and of its subtypes."
  example:
  - "The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  \n  \n [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]\n [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]"
  syntax:
    content: public bool IsNestedFamANDAssem { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, `false`.'
  overload: System.Type.IsNestedFamANDAssem*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNestedFamily
  commentId: P:System.Type.IsNestedFamily
  id: IsNestedFamily
  parent: System.Type
  langs:
  - csharp
  name: IsNestedFamily
  nameWithType: Type.IsNestedFamily
  fullName: Type.IsNestedFamily
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is nested and visible only within its own family.
  remarks: "If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  \n  \n <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  \n  \n A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes."
  example:
  - "The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  \n  \n [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]\n [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]"
  syntax:
    content: public bool IsNestedFamily { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is nested and visible only within its own family; otherwise, `false`.'
  overload: System.Type.IsNestedFamily*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNestedFamORAssem
  commentId: P:System.Type.IsNestedFamORAssem
  id: IsNestedFamORAssem
  parent: System.Type
  langs:
  - csharp
  name: IsNestedFamORAssem
  nameWithType: Type.IsNestedFamORAssem
  fullName: Type.IsNestedFamORAssem
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is nested and visible only to classes that belong to either its own family or to its own assembly.
  remarks: "If the visibility of a type is `protected internal` in C# or `Protected Friend` in Visual Basic, the <xref:System.Type.IsNestedFamORAssem%2A> property returns `true`.  \n  \n If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  \n  \n <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes.  \n  \n A <xref:System.Type> object's family is defined as all objects of the exact same <xref:System.Type> and of its subtypes."
  example:
  - "The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  \n  \n [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]\n [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]"
  syntax:
    content: public bool IsNestedFamORAssem { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, `false`.'
  overload: System.Type.IsNestedFamORAssem*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNestedPrivate
  commentId: P:System.Type.IsNestedPrivate
  id: IsNestedPrivate
  parent: System.Type
  langs:
  - csharp
  name: IsNestedPrivate
  nameWithType: Type.IsNestedPrivate
  fullName: Type.IsNestedPrivate
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is nested and declared private.
  remarks: "If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  \n  \n <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes."
  example:
  - "The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  \n  \n [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]\n [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]"
  syntax:
    content: public bool IsNestedPrivate { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is nested and declared private; otherwise, `false`.'
  overload: System.Type.IsNestedPrivate*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNestedPublic
  commentId: P:System.Type.IsNestedPublic
  id: IsNestedPublic
  parent: System.Type
  langs:
  - csharp
  name: IsNestedPublic
  nameWithType: Type.IsNestedPublic
  fullName: Type.IsNestedPublic
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether a class is nested and declared public.
  remarks: "If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `false`.  \n  \n <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes."
  example:
  - "The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref:System.Type> properties for the parent type and each of its nested types.  \n  \n [!code-csharp[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.isnestedfamandassem/cs/isnestedfamilyandassembly1.cs#1)]\n [!code-vb[System.Type.IsNestedFamAndAssem#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.isnestedfamandassem/vb/isnestedfamilyandassembly1.vb#1)]"
  syntax:
    content: public bool IsNestedPublic { get; }
    return:
      type: System.Boolean
      description: '`true` if the class is nested and declared public; otherwise, `false`.'
  overload: System.Type.IsNestedPublic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsNotPublic
  commentId: P:System.Type.IsNotPublic
  id: IsNotPublic
  parent: System.Type
  langs:
  - csharp
  name: IsNotPublic
  nameWithType: Type.IsNotPublic
  fullName: Type.IsNotPublic
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is not declared public.
  remarks: "Do not use this property with nested types; use the <xref:System.Type.IsNestedPublic%2A> property instead.  \n  \n If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `false`."
  example:
  - "This example usesthe `IsNotPublic` property to get the visibility of the type.  \n  \n [!code-cpp[Classic Type.IsNotPublic Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Type.IsNotPublic Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#1)]\n [!code-vb[Classic Type.IsNotPublic Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#1)]  \n  \n The following code example demonstrates why you cannot use `IsPublic` and `IsNotPublic` for nested classes.  \n  \n [!code-cpp[Classic Type.IsNotPublic Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CPP/source.cpp#2)]\n [!code-csharp[Classic Type.IsNotPublic Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/CS/source.cs#2)]\n [!code-vb[Classic Type.IsNotPublic Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.IsNotPublic Example/VB/source.vb#2)]  \n  \n For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of `IsNestedPublic` and `IsNestedPrivate`. The reflection output for this code fragment would be as follows:  \n  \n|Class|IsNotPublic|IsPublic|IsNestedPublic|IsNestedPrivate|  \n|-----------|-----------------|--------------|--------------------|---------------------|  \n|A|FALSE|TRUE|FALSE|FALSE|  \n|B|FALSE|FALSE|TRUE|FALSE|  \n|C|FALSE|FALSE|FALSE|TRUE|"
  syntax:
    content: public bool IsNotPublic { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is not declared public and is not a nested type; otherwise, `false`.'
  overload: System.Type.IsNotPublic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsPointer
  commentId: P:System.Type.IsPointer
  id: IsPointer
  parent: System.Type
  langs:
  - csharp
  name: IsPointer
  nameWithType: Type.IsPointer
  fullName: Type.IsPointer
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is a pointer.
  remarks: "If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`.  \n  \n This property is read-only."
  example:
  - "The following example shows a use of the `IsPointer` property.  \n  \n [!code-cpp[Type_HasElementTypeImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_HasElementTypeImpl/CPP/type_haselementtypeimpl.cpp#1)]\n [!code-csharp[Type_HasElementTypeImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_HasElementTypeImpl/CS/type_haselementtypeimpl.cs#1)]\n [!code-vb[Type_HasElementTypeImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_HasElementTypeImpl/VB/type_haselementtypeimpl.vb#1)]"
  syntax:
    content: public bool IsPointer { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is a pointer; otherwise, `false`.'
  overload: System.Type.IsPointer*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsPointerImpl
  commentId: M:System.Type.IsPointerImpl
  id: IsPointerImpl
  parent: System.Type
  langs:
  - csharp
  name: IsPointerImpl()
  nameWithType: Type.IsPointerImpl()
  fullName: Type.IsPointerImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, implements the <xref href="System.Type.IsPointer"></xref> property and determines whether the <xref href="System.Type"></xref> is a pointer.
  syntax:
    content: protected abstract bool IsPointerImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is a pointer; otherwise, `false`.'
  overload: System.Type.IsPointerImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsPrimitive
  commentId: P:System.Type.IsPrimitive
  id: IsPrimitive
  parent: System.Type
  langs:
  - csharp
  name: IsPrimitive
  nameWithType: Type.IsPrimitive
  fullName: Type.IsPrimitive
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is one of the primitive types.
  remarks: "The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.IntPtr>, <xref:System.UIntPtr>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.  \n  \n If the current <xref:System.Type> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example demonstrates the `IsContextful`, <xref:System.Type.IsMarshalByRef%2A>, and <xref:System.Type.IsPrimitive%2A> properties of the <xref:System.Type> class. It checks whether the given type can be hosted in the context, whether it can be marshaled by reference, and whether the type is a primitive data type.  \n  \n [!code-cpp[Type_IsContextful#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsContextful/CPP/type_iscontextful.cpp#1)]\n [!code-csharp[Type_IsContextful#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsContextful/CS/type_iscontextful.cs#1)]\n [!code-vb[Type_IsContextful#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsContextful/VB/type_iscontextful.vb#1)]"
  syntax:
    content: public bool IsPrimitive { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is one of the primitive types; otherwise, `false`.'
  overload: System.Type.IsPrimitive*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsPrimitiveImpl
  commentId: M:System.Type.IsPrimitiveImpl
  id: IsPrimitiveImpl
  parent: System.Type
  langs:
  - csharp
  name: IsPrimitiveImpl()
  nameWithType: Type.IsPrimitiveImpl()
  fullName: Type.IsPrimitiveImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, implements the <xref href="System.Type.IsPrimitive"></xref> property and determines whether the <xref href="System.Type"></xref> is one of the primitive types.
  remarks: The primitive types are <xref:System.Boolean>, <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, <xref:System.Char>, <xref:System.Double>, and <xref:System.Single>.
  example:
  - "The following example determines whether the given type is a primitive type and displays the result.  \n  \n [!code-cpp[Type_IsPrimitiveImpl#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CPP/type_isprimitiveimpl.cpp#1)]\n [!code-csharp[Type_IsPrimitiveImpl#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsPrimitiveImpl/CS/type_isprimitiveimpl.cs#1)]\n [!code-vb[Type_IsPrimitiveImpl#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsPrimitiveImpl/VB/type_isprimitiveimpl.vb#1)]"
  syntax:
    content: protected abstract bool IsPrimitiveImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is one of the primitive types; otherwise, `false`.'
  overload: System.Type.IsPrimitiveImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsPublic
  commentId: P:System.Type.IsPublic
  id: IsPublic
  parent: System.Type
  langs:
  - csharp
  name: IsPublic
  nameWithType: Type.IsPublic
  fullName: Type.IsPublic
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is declared public.
  remarks: "Do not use with nested types; use <xref:System.Type.IsNestedPublic%2A> instead.  \n  \n If the current <xref:System.Type> represents a type parameter of a generic type, this property returns `true`.  \n  \n <xref:System.Reflection.TypeAttributes?displayProperty=fullName> selects the visibility attributes."
  example:
  - "The following example creates an instance of `MyTestClass`, checks for the `IsPublic` property, and displays the result.  \n  \n [!code-cpp[Type.IsPublic#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.IsPublic/CPP/type_ispublic.cpp#1)]\n [!code-csharp[Type.IsPublic#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.IsPublic/CS/type_ispublic.cs#1)]\n [!code-vb[Type.IsPublic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.IsPublic/VB/type_ispublic.vb#1)]  \n  \n For nested classes, ignore the results of `IsPublic` and `IsNotPublic` and pay attention only to the results of <xref:System.Type.IsNestedPublic%2A> and <xref:System.Type.IsNestedPrivate%2A>."
  syntax:
    content: public bool IsPublic { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is declared public and is not a nested type; otherwise, `false`.'
  overload: System.Type.IsPublic*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSealed
  commentId: P:System.Type.IsSealed
  id: IsSealed
  parent: System.Type
  langs:
  - csharp
  name: IsSealed
  nameWithType: Type.IsSealed
  fullName: Type.IsSealed
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is declared sealed.
  remarks: If the current <xref:System.Type> represents a type parameter of a generic type, this property always returns `true`.
  example:
  - "The following example creates an instance of a `sealed` class, checks for the `IsSealed` property, and displays the result.  \n  \n [!code-cpp[Type_IsSealed#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSealed/CPP/type_issealed.cpp#1)]\n [!code-csharp[Type_IsSealed#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSealed/CS/type_issealed.cs#1)]\n [!code-vb[Type_IsSealed#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSealed/VB/type_issealed.vb#1)]"
  syntax:
    content: public bool IsSealed { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is declared sealed; otherwise, `false`.'
  overload: System.Type.IsSealed*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSecurityCritical
  commentId: P:System.Type.IsSecurityCritical
  id: IsSecurityCritical
  parent: System.Type
  langs:
  - csharp
  name: IsSecurityCritical
  nameWithType: Type.IsSecurityCritical
  fullName: Type.IsSecurityCritical
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value that indicates whether the current type is security-critical or security-safe-critical at the current trust level, and therefore can perform critical operations.
  remarks: "The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."
  syntax:
    content: public virtual bool IsSecurityCritical { get; }
    return:
      type: System.Boolean
      description: '`true` if the current type is security-critical or security-safe-critical at the current trust level; `false` if it is transparent.'
  overload: System.Type.IsSecurityCritical*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSecuritySafeCritical
  commentId: P:System.Type.IsSecuritySafeCritical
  id: IsSecuritySafeCritical
  parent: System.Type
  langs:
  - csharp
  name: IsSecuritySafeCritical
  nameWithType: Type.IsSecuritySafeCritical
  fullName: Type.IsSecuritySafeCritical
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value that indicates whether the current type is security-safe-critical at the current trust level; that is, whether it can perform critical operations and can be accessed by transparent code.
  remarks: "The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."
  syntax:
    content: public virtual bool IsSecuritySafeCritical { get; }
    return:
      type: System.Boolean
      description: '`true` if the current type is security-safe-critical at the current trust level; `false` if it is security-critical or transparent.'
  overload: System.Type.IsSecuritySafeCritical*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSecurityTransparent
  commentId: P:System.Type.IsSecurityTransparent
  id: IsSecurityTransparent
  parent: System.Type
  langs:
  - csharp
  name: IsSecurityTransparent
  nameWithType: Type.IsSecurityTransparent
  fullName: Type.IsSecurityTransparent
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value that indicates whether the current type is transparent at the current trust level, and therefore cannot perform critical operations.
  remarks: "If this property returns `true`, the <xref:System.Type.IsSecurityCritical%2A> and <xref:System.Type.IsSecuritySafeCritical%2A> properties return `false`.  \n  \n The <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, and <xref:System.Type.IsSecurityTransparent%2A> properties report the transparency level of the type at its current trust level, as determined by the common language runtime (CLR). Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n> [!IMPORTANT]\n>  For partial-trust assemblies, the value of this property depends on the current trust level of the assembly. If the assembly is loaded into a partially trusted application domain (for example, into a sandboxed application domain), then the runtime ignores the security annotations of the assembly. The assembly and all its types are treated as transparent. The runtime pays attention to the security annotations of a partial-trust assembly only when that assembly is loaded into a fully trusted application domain (for example, into the default application domain of a desktop application). By contrast, a trusted assembly (that is, a strong-named assembly that is installed in the global assembly cache) is always loaded with full trust regardless of the trust level of the application domain, so its current trust level is always fully trusted. You can determine the current trust levels of assemblies and application domains by using the <xref:System.Reflection.Assembly.IsFullyTrusted%2A?displayProperty=fullName> and <xref:System.AppDomain.IsFullyTrusted%2A?displayProperty=fullName> properties.  \n  \n For more information about reflection and transparency, see [Security Considerations for Reflection](~/docs/framework/reflection-and-codedom/security-considerations-for-reflection.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."
  syntax:
    content: public virtual bool IsSecurityTransparent { get; }
    return:
      type: System.Boolean
      description: '`true` if the type is security-transparent at the current trust level; otherwise, `false`.'
  overload: System.Type.IsSecurityTransparent*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSerializable
  commentId: P:System.Type.IsSerializable
  id: IsSerializable
  parent: System.Type
  langs:
  - csharp
  name: IsSerializable
  nameWithType: Type.IsSerializable
  fullName: Type.IsSerializable
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is serializable.
  remarks: "If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  example:
  - "The following example creates an instance of `MyTestClass` class, sets the [Serializable] attribute, and checks the `IsSerializable` property for `true` or `false`.  \n  \n [!code-cpp[Type_IsSerializable#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsSerializable/CPP/type_isserializable.cpp#1)]\n [!code-csharp[Type_IsSerializable#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsSerializable/CS/type_isserializable.cs#1)]\n [!code-vb[Type_IsSerializable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsSerializable/VB/type_isserializable.vb#1)]"
  syntax:
    content: public virtual bool IsSerializable { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is serializable; otherwise, `false`.'
  overload: System.Type.IsSerializable*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSpecialName
  commentId: P:System.Type.IsSpecialName
  id: IsSpecialName
  parent: System.Type
  langs:
  - csharp
  name: IsSpecialName
  nameWithType: Type.IsSpecialName
  fullName: Type.IsSpecialName
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the type has a name that requires special handling.
  remarks: "Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of types that might require special treatment by some compilers.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  syntax:
    content: public bool IsSpecialName { get; }
    return:
      type: System.Boolean
      description: '`true` if the type has a name that requires special handling; otherwise, `false`.'
  overload: System.Type.IsSpecialName*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSubclassOf(System.Type)
  commentId: M:System.Type.IsSubclassOf(System.Type)
  id: IsSubclassOf(System.Type)
  parent: System.Type
  langs:
  - csharp
  name: IsSubclassOf(Type)
  nameWithType: Type.IsSubclassOf(Type)
  fullName: Type.IsSubclassOf(Type)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Determines whether the current <xref href="System.Type"></xref> derives from the specified <xref href="System.Type"></xref>.
  remarks: "You can call the <xref:System.Type.IsSubclassOf%2A> method to determine any of the following:  \n  \n-   Whether one class derives from another.  \n  \n-   Whether a type derives from <xref:System.ValueType>. However, the <xref:System.Type.IsValueType%2A> is a more efficient way to determine whether a type is a value type.  \n  \n-   Whether a type derives from <xref:System.Enum>. However, the <xref:System.Type.IsEnum%2A> method is a more efficient way to determine whether a type is an enumeration.  \n  \n-   Whether a type is a delegate, that is, whether it derives from either <xref:System.Delegate> or <xref:System.MulticastDelegate>.  \n  \n The <xref:System.Type.IsSubclassOf%2A> method cannot be used to determine whether an interface derives from another interface, or whether a class implements an interface. Use the<xref:System.Type.IsAssignableFrom%2A> method for that purpose, as the following example shows.  \n  \n [!code-csharp[System.Type.IsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.issubclassof/cs/issubclassof_interface1.cs#1)]\n [!code-vb[System.Type.IsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.issubclassof/vb/issubclassof_interface1.vb#1)]  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, it derives from its class constraint or from <xref:System.Object?displayProperty=fullName> if it has no class constraint.  \n  \n> [!NOTE]\n>  Except when used with interfaces, <xref:System.Type.IsSubclassOf%2A> is the converse of <xref:System.Type.IsAssignableFrom%2A>. That is, if `t1.IsSubclassOf(t2)` is `true`, then `t2.IsAssignableFrom(t1)` is also `true`.  \n  \n This method can be overridden by a derived class."
  example:
  - "The following example creates a class named `Class1` and a derived class named `DerivedC1`. It calls the <xref:System.Type.IsSubclassOf%2A> method to show that `DerivedC1` is a subclass of `Class1`.  \n  \n [!code-csharp[TestIsSubclassOf#1](~/samples/snippets/csharp/VS_Snippets_CLR/TestIsSubclassOf/CS/testissubclassof.cs#1)]\n [!code-vb[TestIsSubclassOf#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TestIsSubclassOf/VB/testissubclassof.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public virtual bool IsSubclassOf (Type c);
    parameters:
    - id: c
      type: System.Type
      description: The type to compare with the current type.
    return:
      type: System.Boolean
      description: '`true` if the current `Type` derives from <code>c</code>; otherwise, `false`. This method also returns `false` if <code>c</code> and the current `Type` are equal.'
  overload: System.Type.IsSubclassOf*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>c</code> is `null`.
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsSZArray
  commentId: P:System.Type.IsSZArray
  id: IsSZArray
  parent: System.Type
  langs:
  - csharp
  name: IsSZArray
  nameWithType: Type.IsSZArray
  fullName: Type.IsSZArray
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual bool IsSZArray { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Type.IsSZArray*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsTypeDefinition
  commentId: P:System.Type.IsTypeDefinition
  id: IsTypeDefinition
  parent: System.Type
  langs:
  - csharp
  name: IsTypeDefinition
  nameWithType: Type.IsTypeDefinition
  fullName: Type.IsTypeDefinition
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual bool IsTypeDefinition { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Type.IsTypeDefinition*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsUnicodeClass
  commentId: P:System.Type.IsUnicodeClass
  id: IsUnicodeClass
  parent: System.Type
  langs:
  - csharp
  name: IsUnicodeClass
  nameWithType: Type.IsUnicodeClass
  fullName: Type.IsUnicodeClass
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the string format attribute `UnicodeClass` is selected for the <xref href="System.Type"></xref>.
  remarks: "The <xref:System.Reflection.TypeAttributes.StringFormatMask> is used to select the string format attributes. The string format attributes enhance interoperability by defining how strings should be interpreted.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns `false`."
  syntax:
    content: public bool IsUnicodeClass { get; }
    return:
      type: System.Boolean
      description: '`true` if the string format attribute `UnicodeClass` is selected for the <xref href="System.Type"></xref>; otherwise, `false`.'
  overload: System.Type.IsUnicodeClass*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsValueType
  commentId: P:System.Type.IsValueType
  id: IsValueType
  parent: System.Type
  langs:
  - csharp
  name: IsValueType
  nameWithType: Type.IsValueType
  fullName: Type.IsValueType
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> is a value type.
  remarks: "Value types are types that are represented as sequences of bits; value types are not classes or interfaces. Value types are referred to as \"structs\" in some programming languages. Enums are a special case of value types.  \n  \n This property returns `false` for the <xref:System.ValueType> class, because <xref:System.ValueType> is not a value type itself. It is the base class for all value types, and therefore any value type can be assigned to it. This would not be possible if <xref:System.ValueType> itself was a value type. Value types are boxed when they are assigned to a field of type <xref:System.ValueType>.  \n  \n This property returns `true` for enumerations, but not for the <xref:System.Enum> type itself. For an example that demonstrates this behavior, see <xref:System.Type.IsEnum%2A>.  \n  \n This property is read-only."
  example:
  - "The following example creates a variable of type `MyEnum`, checks for the `IsValueType` property, and displays the result.  \n  \n [!code-cpp[Type_IsValueType#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_IsValueType/CPP/type_isvaluetype.cpp#1)]\n [!code-csharp[Type_IsValueType#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_IsValueType/CS/type_isvaluetype.cs#1)]\n [!code-vb[Type_IsValueType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_IsValueType/VB/type_isvaluetype.vb#1)]"
  syntax:
    content: public bool IsValueType { get; }
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is a value type; otherwise, `false`.'
  overload: System.Type.IsValueType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsValueTypeImpl
  commentId: M:System.Type.IsValueTypeImpl
  id: IsValueTypeImpl
  parent: System.Type
  langs:
  - csharp
  name: IsValueTypeImpl()
  nameWithType: Type.IsValueTypeImpl()
  fullName: Type.IsValueTypeImpl()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Implements the <xref href="System.Type.IsValueType"></xref> property and determines whether the <xref href="System.Type"></xref> is a value type; that is, not a class or an interface.
  remarks: This method is provided to enable the implementation of alternate type systems. It is not generally used in application code.
  syntax:
    content: protected virtual bool IsValueTypeImpl ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if the <xref href="System.Type"></xref> is a value type; otherwise, `false`.'
  overload: System.Type.IsValueTypeImpl*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.IsVariableBoundArray
  commentId: P:System.Type.IsVariableBoundArray
  id: IsVariableBoundArray
  parent: System.Type
  langs:
  - csharp
  name: IsVariableBoundArray
  nameWithType: Type.IsVariableBoundArray
  fullName: Type.IsVariableBoundArray
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual bool IsVariableBoundArray { get; }
    return:
      type: System.Boolean
      description: ''
  overload: System.Type.IsVariableBoundArray*
  exceptions: []
  version:
  - netcore-2.0
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsVisible
  commentId: P:System.Type.IsVisible
  id: IsVisible
  parent: System.Type
  langs:
  - csharp
  name: IsVisible
  nameWithType: Type.IsVisible
  fullName: Type.IsVisible
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type"></xref> can be accessed by code outside the assembly.
  remarks: Use this property to determine whether a type is part of the public interface of a component assembly.
  example:
  - "The following code example tests two classes, only one of which is visible outside the assembly.  \n  \n [!code-cpp[System.Type.IsVisible#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.IsVisible/CPP/source.cpp#1)]\n [!code-csharp[System.Type.IsVisible#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.IsVisible/CS/source.cs#1)]\n [!code-vb[System.Type.IsVisible#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.IsVisible/VB/source.vb#1)]"
  syntax:
    content: public bool IsVisible { get; }
    return:
      type: System.Boolean
      description: '`true` if the current <xref href="System.Type"></xref> is a public type or a public nested type such that all the enclosing types are public; otherwise, `false`.'
  overload: System.Type.IsVisible*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.MakeArrayType(System.Int32)
  commentId: M:System.Type.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Type
  langs:
  - csharp
  name: MakeArrayType(Int32)
  nameWithType: Type.MakeArrayType(Int32)
  fullName: Type.MakeArrayType(Int32)
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a <xref href="System.Type"></xref> object representing an array of the current type, with the specified number of dimensions.
  remarks: "The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.  \n  \n> [!NOTE]\n>  The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays. A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension. You cannot use this method overload to create a vector type; if `rank` is 1, this method overload returns a multidimensional array type that happens to have one dimension. Use the <xref:System.Type.MakeArrayType> method overload to create vector types."
  example:
  - "The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  \n  \n [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]\n [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]\n [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]"
  syntax:
    content: public virtual Type MakeArrayType (int rank);
    parameters:
    - id: rank
      type: System.Int32
      description: The number of dimensions for the array. This number must be less than or equal to 32.
    return:
      type: System.Type
      description: An object representing an array of the current type, with the specified number of dimensions.
  overload: System.Type.MakeArrayType*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: <code>rank</code> is invalid. For example, 0 or negative.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "The current type is <xref href=\"System.TypedReference\"></xref>.  \n  \n -or-  \n  \n The current type is a `ByRef` type. That is, <xref href=\"System.Type.IsByRef\"></xref> returns `true`.  \n  \n -or-  \n  \n <code>rank</code> is greater than 32."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.MakeArrayType
  commentId: M:System.Type.MakeArrayType
  id: MakeArrayType
  parent: System.Type
  langs:
  - csharp
  name: MakeArrayType()
  nameWithType: Type.MakeArrayType()
  fullName: Type.MakeArrayType()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a <xref href="System.Type"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.
  remarks: "The <xref:System.Type.MakeArrayType%2A> method provides a way to generate array types whose element types are computed at run time.  \n  \n **Note** The common language runtime makes a distinction between vectors (that is, one-dimensional arrays that are always zero-based) and multidimensional arrays. A vector, which always has only one dimension, is not the same as a multidimensional array that happens to have only one dimension. This method overload can only be used to create vector types, and it is the only way to create a vector type. Use the <xref:System.Type.MakeArrayType%28System.Int32%29> method overload to create multidimensional array types."
  example:
  - "The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  \n  \n [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]\n [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]\n [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]"
  syntax:
    content: public virtual Type MakeArrayType ();
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.
  overload: System.Type.MakeArrayType*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "The current type is <xref href=\"System.TypedReference\"></xref>.  \n  \n -or-  \n  \n The current type is a `ByRef` type. That is, <xref href=\"System.Type.IsByRef\"></xref> returns `true`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.MakeByRefType
  commentId: M:System.Type.MakeByRefType
  id: MakeByRefType
  parent: System.Type
  langs:
  - csharp
  name: MakeByRefType()
  nameWithType: Type.MakeByRefType()
  fullName: Type.MakeByRefType()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a <xref href="System.Type"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` parameter in Visual Basic).
  remarks: "The <xref:System.Type.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.  \n  \n Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32&`."
  example:
  - "The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  \n  \n [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]\n [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]\n [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]"
  syntax:
    content: public virtual Type MakeByRefType ();
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` parameter in Visual Basic).
  overload: System.Type.MakeByRefType*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "The current type is <xref href=\"System.TypedReference\"></xref>.  \n  \n -or-  \n  \n The current type is a `ByRef` type. That is, <xref href=\"System.Type.IsByRef\"></xref> returns `true`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.MakeGenericType(System.Type[])
  commentId: M:System.Type.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Type
  langs:
  - csharp
  name: MakeGenericType(Type[])
  nameWithType: Type.MakeGenericType(Type[])
  fullName: Type.MakeGenericType(Type[])
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <xref href="System.Type"></xref> object representing the resulting constructed type.
  remarks: "The <xref:System.Type.MakeGenericType%2A> method allows you to write code that assigns specific types to the type parameters of a generic type definition, thus creating a <xref:System.Type> object that represents a particular constructed type. You can use this <xref:System.Type> object to create run-time instances of the constructed type.  \n  \n Types constructed with <xref:System.Type.MakeGenericType%2A> can be open, that is, some of their type arguments can be type parameters of enclosing generic methods or types. You might use such open constructed types when you emit dynamic assemblies. For example, consider the classes `Base` and `Derived` in the following code.  \n  \n [!code-cpp[System.Type.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#1)]\n [!code-csharp[System.Type.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#1)]\n [!code-vb[System.Type.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#1)]  \n  \n To generate `Derived` in a dynamic assembly, it is necessary to construct its base type. To do this, call the <xref:System.Type.MakeGenericType%2A> method on a <xref:System.Type> object representing the class `Base`, using the generic type arguments <xref:System.Int32> and the type parameter `V` from `Derived`. Because types and generic type parameters are both represented by <xref:System.Type> objects, an array containing both can be passed to the <xref:System.Type.MakeGenericType%2A> method.  \n  \n> [!NOTE]\n>  A constructed type such as `Base<int, V>` is useful when emitting code, but you cannot call the <xref:System.Type.MakeGenericType%2A> method on this type because it is not a generic type definition. To create a closed constructed type that can be instantiated, first call the <xref:System.Type.GetGenericTypeDefinition%2A> method to get a <xref:System.Type> object representing the generic type definition and then call <xref:System.Type.MakeGenericType%2A> with the desired type arguments.  \n  \n The <xref:System.Type> object returned by <xref:System.Type.MakeGenericType%2A> is the same as the <xref:System.Type> obtained by calling the <xref:System.Object.GetType%2A> method of the resulting constructed type, or the <xref:System.Object.GetType%2A>method of any constructed type that was created from the same generic type definition using the same type arguments.  \n  \n> [!NOTE]\n>  An array of generic types is not itself a generic type. You cannot call <xref:System.Type.MakeGenericType%2A> on an array type such as `C<T>[]` (`Dim ac() As C(Of T)` in Visual Basic). To construct a closed generic type from `C<T>[]`, call <xref:System.Type.GetElementType%2A> to obtain the generic type definition `C<T>`; call <xref:System.Type.MakeGenericType%2A> on the generic type definition to create the constructed type; and finally call the <xref:System.Type.MakeArrayType%2A> method on the constructed type to create the array type. The same is true of pointer types and `ref` types (`ByRef` in Visual Basic).  \n  \n For a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A> property remarks.  \n  \n## Nested Types  \n If a generic type is defined using C#, C++, or Visual Basic, then its nested types are all generic. This is true even if the nested types have no type parameters of their own, because all three languages include the type parameters of enclosing types in the type parameter lists of nested types. Consider the following classes:  \n  \n [!code-cpp[System.Type.MakeGenericType#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.type.makegenerictype/cpp/remarks.cpp#2)]\n [!code-csharp[System.Type.MakeGenericType#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.makegenerictype/cs/remarks.cs#2)]\n [!code-vb[System.Type.MakeGenericType#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.makegenerictype/vb/remarks.vb#2)]  \n  \n The type parameter list of the nested class `Inner` has two type parameters, `T` and `U`, the first of which is the type parameter of its enclosing class. Similarly, the type parameter list of the nested class `Innermost1` has three type parameters, `T`, `U`, and `V`, with `T` and `U` coming from its enclosing classes. The nested class `Innermost2` has two type parameters, `T` and `U`, which come from its enclosing classes.  \n  \n If the parameter list of the enclosing type has more than one type parameter, all the type parameters in order are included in the type parameter list of the nested type.  \n  \n To construct a generic type from the generic type definition for a nested type, call the <xref:System.Type.MakeGenericType%2A> method with the array formed by concatenating the type argument arrays of all the enclosing types, beginning with the outermost generic type, and ending with the type argument array of the nested type itself, if it has type parameters of its own. To create an instance of `Innermost1`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing three types, to be assigned to T, U, and V. To create an instance of `Innermost2`, call the <xref:System.Type.MakeGenericType%2A> method with an array containing two types, to be assigned to T and U.  \n  \n The languages propagate the type parameters of enclosing types in this fashion so you can use the type parameters of an enclosing type to define fields of nested types. Otherwise, the type parameters would not be in scope within the bodies of the nested types. It is possible to define nested types without propagating the type parameters of enclosing types, by emitting code in dynamic assemblies or by using the [Ilasm.exe (IL Assembler)](~/docs/framework/tools/ilasm-exe-il-assembler.md). Consider the following code for the MSIL assembler:  \n  \n```  \n.class public Outer<T> {  \n    .class nested public Inner<U> {  \n        .class nested public Innermost {  \n        }  \n    }  \n}  \n```  \n  \n In this example, it is not possible to define a field of type `T` or `U` in class `Innermost`, because those type parameters are not in scope. The following assembler code defines nested classes that behave the way they would if defined in C++, Visual Basic, and C#:  \n  \n```  \n.class public Outer<T> {  \n    .class nested public Inner<T, U> {  \n        .class nested public Innermost<T, U, V> {  \n        }  \n    }  \n}  \n```  \n  \n You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine nested classes defined in the high-level languages and observe this naming scheme."
  example:
  - "The following example uses the <xref:System.Type.MakeGenericType%2A> method to create a constructed type from the generic type definition for the <xref:System.Collections.Generic.Dictionary%602> type. The constructed type represents a <xref:System.Collections.Generic.Dictionary%602> of `Test` objects with string keys.  \n  \n [!code-cpp[System.Type.BindGenericParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CPP/source.cpp#1)]\n [!code-csharp[System.Type.BindGenericParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.BindGenericParameters/CS/source.cs#1)]\n [!code-vb[System.Type.BindGenericParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.BindGenericParameters/VB/source.vb#1)]"
  syntax:
    content: public virtual Type MakeGenericType (Type[] typeArguments);
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of types to be substituted for the type parameters of the current generic type.
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> representing the constructed type formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic type.
  overload: System.Type.MakeGenericType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current type does not represent a generic type definition. That is, <xref href="System.Type.IsGenericTypeDefinition"></xref> returns `false`.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>typeArguments</code> is `null`.  \n  \n -or-  \n  \n Any element of <code>typeArguments</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The number of elements in <code>typeArguments</code> is not the same as the number of type parameters in the current generic type definition.  \n  \n -or-  \n  \n Any element of <code>typeArguments</code> does not satisfy the constraints specified for the corresponding type parameter of the current generic type.  \n  \n -or-  \n  \n <code>typeArguments</code> contains an element that is a pointer type (<xref href=\"System.Type.IsPointer\"></xref> returns `true`), a by-ref type (<xref href=\"System.Type.IsByRef\"></xref> returns `true`), or <xref href=\"System.Void\"></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.MakePointerType
  commentId: M:System.Type.MakePointerType
  id: MakePointerType
  parent: System.Type
  langs:
  - csharp
  name: MakePointerType()
  nameWithType: Type.MakePointerType()
  fullName: Type.MakePointerType()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a <xref href="System.Type"></xref> object that represents a pointer to the current type.
  remarks: "The <xref:System.Type.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.  \n  \n Using the syntax of Microsoft intermediate language (MSIL), if the current <xref:System.Type> object represents <xref:System.Int32>, this method returns a <xref:System.Type> object representing `Int32*`."
  example:
  - "The following code example creates array, `ref` (`ByRef` in Visual Basic), and pointer types for the `Test` class.  \n  \n [!code-cpp[System.Type.MakeXxxType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CPP/source.cpp#1)]\n [!code-csharp[System.Type.MakeXxxType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Type.MakeXxxType/CS/source.cs#1)]\n [!code-vb[System.Type.MakeXxxType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Type.MakeXxxType/VB/source.vb#1)]"
  syntax:
    content: public virtual Type MakePointerType ();
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type"></xref> object that represents a pointer to the current type.
  overload: System.Type.MakePointerType*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "The current type is <xref href=\"System.TypedReference\"></xref>.  \n  \n -or-  \n  \n The current type is a `ByRef` type. That is, <xref href=\"System.Type.IsByRef\"></xref> returns `true`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.MemberType
  commentId: P:System.Type.MemberType
  id: MemberType
  parent: System.Type
  langs:
  - csharp
  name: MemberType
  nameWithType: Type.MemberType
  fullName: Type.MemberType
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a <xref href="System.Reflection.MemberTypes"></xref> value indicating that this member is a type or a nested type.
  remarks: "This property overrides <xref:System.Reflection.MemberInfo.MemberType%2A?displayProperty=fullName>. Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects—for example, the array returned by <xref:System.Type.GetMembers%2A>—the <xref:System.Reflection.MemberInfo.MemberType%2A> property returns <xref:System.Reflection.MemberTypes?displayProperty=fullName> when a given member is a nested type.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property applies to the generic type definition from which the type was constructed. For example, if the current <xref:System.Type> represents `MyGenericType<int>` (`MyGenericType(Of Integer)` in Visual Basic), the value of this property is determined by `MyGenericType<T>`.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property always returns<xref:System.Reflection.MemberTypes?displayProperty=fullName>."
  example:
  - "The following code example shows the `MemberType` field as a parameter to the `GetMember` method:  \n  \n [!code-cpp[Classic Type.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Type.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.MemberType Example/CS/source.cs#1)]\n [!code-vb[Classic Type.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.MemberType Example/VB/source.vb#1)]"
  syntax:
    content: public override System.Reflection.MemberTypes MemberType { get; }
    return:
      type: System.Reflection.MemberTypes
      description: A <xref href="System.Reflection.MemberTypes"></xref> value indicating that this member is a type or a nested type.
  overload: System.Type.MemberType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Missing
  commentId: F:System.Type.Missing
  id: Missing
  parent: System.Type
  langs:
  - csharp
  name: Missing
  nameWithType: Type.Missing
  fullName: Type.Missing
  type: Field
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Represents a missing value in the <xref href="System.Type"></xref> information. This field is read-only.
  remarks: Use the `Missing` field for invocation through reflection to obtain the default value of a parameter. If the `Missing` field is passed in for a parameter value and there is no default value for that parameter, an <xref:System.ArgumentException> is thrown.
  example:
  - "The following code example shows the use of the `Missing` field to invoke a method with its default arguments.  \n  \n [!code-cpp[Classic Type.Missing Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cpp/source.cpp#1)]\n [!code-csharp[Classic Type.Missing Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.Missing Example/cs/source.cs#1)]\n [!code-vb[Classic Type.Missing Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.Missing Example/VB/source.vb#1)]  \n  \n This code produces the following output:  \n  \n a = 10 b = 55.3 c = 12  \n  \n a = 10 b = 1.3 c = 1  \n  \n a = 10 b = 1.2 c = 1"
  syntax:
    content: public static readonly object Missing;
    return:
      type: System.Object
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Module
  commentId: P:System.Type.Module
  id: Module
  parent: System.Type
  langs:
  - csharp
  name: Module
  nameWithType: Type.Module
  fullName: Type.Module
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the module (the DLL) in which the current <xref href="System.Type"></xref> is defined.
  remarks: "If the current <xref:System.Type> represents a constructed generic type, this property returns the module in which the generic type definition was defined. For example, if you create an instance of `MyGenericStack<int>`, the <xref:System.Type.Module%2A> property for the constructed type returns the module in which `MyGenericStack<T>` is defined.  \n  \n Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the assembly that contains the generic type that defines `T`."
  example:
  - "This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and `Module` properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.  \n  \n [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]\n [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]\n [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]"
  syntax:
    content: public abstract System.Reflection.Module Module { get; }
    return:
      type: System.Reflection.Module
      description: The module in which the current <xref href="System.Type"></xref> is defined.
  overload: System.Type.Module*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.Name
  commentId: P:System.Type.Name
  id: Name
  parent: System.Type
  langs:
  - csharp
  name: Name
  nameWithType: Type.Name
  fullName: Type.Name
  type: Property
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public abstract string Name { get; }
    return:
      type: System.String
      description: ''
  overload: System.Type.Name*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.Namespace
  commentId: P:System.Type.Namespace
  id: Namespace
  parent: System.Type
  langs:
  - csharp
  name: Namespace
  nameWithType: Type.Namespace
  fullName: Type.Namespace
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the namespace of the <xref href="System.Type"></xref>.
  remarks: "A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure. From the viewpoint of the runtime, there are no namespaces.  \n  \n If the current <xref:System.Type> represents a constructed generic type, this property returns the namespace that contains the generic type definition. Similarly, if the current <xref:System.Type> represents a generic parameter `T`, this property returns the namespace that contains the generic type definition that defines `T`.  \n  \n If the current <xref:System.Type> object represents a generic parameter, this property returns `null`."
  example:
  - "This following example demonstrates a use of the `Namespace` and <xref:System.Type.Module%2A> properties and the <xref:System.Type.ToString%2A> method of <xref:System.Type>.  \n  \n [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]\n [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]\n [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]"
  syntax:
    content: public abstract string Namespace { get; }
    return:
      type: System.String
      description: The namespace of the <xref href="System.Type"></xref>; `null` if the current instance has no namespace or represents a generic parameter.
  overload: System.Type.Namespace*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.op_Equality(System.Type,System.Type)
  commentId: M:System.Type.op_Equality(System.Type,System.Type)
  id: op_Equality(System.Type,System.Type)
  parent: System.Type
  langs:
  - csharp
  name: op_Equality(Type, Type)
  nameWithType: Type.op_Equality(Type, Type)
  fullName: Type.op_Equality(Type, Type)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Indicates whether two <xref href="System.Type"></xref> objects are equal.
  syntax:
    content: public static bool op_Equality (Type left, Type right);
    parameters:
    - id: left
      type: System.Type
      description: The first object to compare.
    - id: right
      type: System.Type
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'
  overload: System.Type.op_Equality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.op_Inequality(System.Type,System.Type)
  commentId: M:System.Type.op_Inequality(System.Type,System.Type)
  id: op_Inequality(System.Type,System.Type)
  parent: System.Type
  langs:
  - csharp
  name: op_Inequality(Type, Type)
  nameWithType: Type.op_Inequality(Type, Type)
  fullName: Type.op_Inequality(Type, Type)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Indicates whether two <xref href="System.Type"></xref> objects are not equal.
  syntax:
    content: public static bool op_Inequality (Type left, Type right);
    parameters:
    - id: left
      type: System.Type
      description: The first object to compare.
    - id: right
      type: System.Type
      description: The second object to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'
  overload: System.Type.op_Inequality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.ReflectedType
  commentId: P:System.Type.ReflectedType
  id: ReflectedType
  parent: System.Type
  langs:
  - csharp
  name: ReflectedType
  nameWithType: Type.ReflectedType
  fullName: Type.ReflectedType
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the class object that was used to obtain this member.
  remarks: For <xref:System.Type> objects, the value of this property is always the same as the value of the <xref:System.Type.DeclaringType%2A> property.
  example:
  - "This example displays the reflected type of a nested class.  \n  \n [!code-cpp[Classic Type.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Type.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/CS/source.cs#1)]\n [!code-vb[Classic Type.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Type.ReflectedType Example/VB/source.vb#1)]"
  syntax:
    content: public override Type ReflectedType { get; }
    return:
      type: System.Type
      description: The `Type` object through which this <xref href="System.Type"></xref> object was obtained.
  overload: System.Type.ReflectedType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  id: ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  name: ReflectionOnlyGetType(String, Boolean, Boolean)
  nameWithType: Type.ReflectionOnlyGetType(String, Boolean, Boolean)
  fullName: Type.ReflectionOnlyGetType(String, Boolean, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the <xref href="System.Type"></xref> with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found. The type is loaded for reflection only, not for execution.
  remarks: "If the assembly containing the type is not already loaded into the reflection-only context, using the <xref:System.Type.ReflectionOnlyGetType%2A> method is equivalent to first loading the assembly for reflection only, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, and then loading the type by calling the assembly's <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> method. For information about assembly-qualified names, see the <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName> property. For additional details on specifying type names, see the <xref:System.Type.GetType%28System.String%2CSystem.Boolean%2CSystem.Boolean%29> method overload.  \n  \n If the assembly is already loaded for execution, another copy is loaded into the reflection-only context.  \n  \n The `throwIfNotFound` parameter specifies what happens when the type is not found, and also suppresses certain other exception conditions, as described in the Exceptions section. Some exceptions are thrown regardless of the value of `throwIfNotFound`. For example, if the assembly is not valid, a <xref:System.BadImageFormatException> is thrown even if `throwIfNotFound` is `false`.  \n  \n For more information about using the reflection-only context, see [How to: Load Assemblies into the Reflection-Only Context](~/docs/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context.md)."
  syntax:
    content: public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the <xref href="System.Type"></xref> to get.
    - id: throwIfNotFound
      type: System.Boolean
      description: '`true` to throw a <xref href="System.TypeLoadException"></xref> if the type cannot be found; `false` to return `null` if the type cannot be found. Specifying `false` also suppresses some other exception conditions, but not all of them. See the Exceptions section.'
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to perform a case-insensitive search for <code>typeName</code>; `false` to perform a case-sensitive search for <code>typeName</code>.'
    return:
      type: System.Type
      description: The type with the specified name, if found; otherwise, `null`. If the type is not found, the <code>throwIfNotFound</code> parameter specifies whether `null` is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <code>throwIfNotFound</code>. See the Exceptions section.
  overload: System.Type.ReflectionOnlyGetType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: A class initializer is invoked and throws an exception.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "<code>throwIfNotFound</code> is `true` and the type is not found.  \n  \n -or-  \n  \n <code>throwIfNotFound</code> is `true` and <code>typeName</code> contains invalid characters, such as an embedded tab.  \n  \n -or-  \n  \n <code>throwIfNotFound</code> is `true` and <code>typeName</code> is an empty string.  \n  \n -or-  \n  \n <code>throwIfNotFound</code> is `true` and <code>typeName</code> represents an array type with an invalid size.  \n  \n -or-  \n  \n <code>typeName</code> represents an array of <xref href=\"System.TypedReference\"></xref> objects."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>typeName</code> does not include the assembly name.  \n  \n -or-  \n  \n <code>throwIfNotFound</code> is `true` and <code>typeName</code> contains invalid syntax; for example, \"MyType[,*,]\".  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has a pointer type, a `ByRef` type, or <xref href=\"System.Void\"></xref> as one of its type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type that has an incorrect number of type arguments.  \n  \n -or-  \n  \n <code>typeName</code> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>throwIfNotFound</code> is `true` and the assembly or one of its dependencies was not found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: The assembly or one of its dependencies was found, but could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "The assembly or one of its dependencies is not valid.  \n  \n -or-  \n  \n The assembly was compiled with a later version of the common language runtime than the version that is currently loaded."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.StructLayoutAttribute
  commentId: P:System.Type.StructLayoutAttribute
  id: StructLayoutAttribute
  parent: System.Type
  langs:
  - csharp
  name: StructLayoutAttribute
  nameWithType: Type.StructLayoutAttribute
  fullName: Type.StructLayoutAttribute
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets a <xref href="System.Runtime.InteropServices.StructLayoutAttribute"></xref> that describes the layout of the current type.
  remarks: <xref:System.Runtime.InteropServices.StructLayoutAttribute> is not returned by the <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A> method. Instead, use this property to get it.
  example:
  - "The following code example first defines a class, a structure, and a structure with special layout attributes (the structures are nested within the class). The example then uses the <xref:System.Type.StructLayoutAttribute%2A> property to obtain a <xref:System.Runtime.InteropServices.StructLayoutAttribute> for each type, and displays the properties of the attributes.  \n  \n [!code-cpp[Type.StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type.StructLayoutAttribute/CPP/Type.StructLayoutAttribute.cpp#1)]\n [!code-csharp[Type.StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type.StructLayoutAttribute/CS/source.cs#1)]\n [!code-vb[Type.StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type.StructLayoutAttribute/VB/source.vb#1)]"
  syntax:
    content: public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }
    return:
      type: System.Runtime.InteropServices.StructLayoutAttribute
      description: Gets a <xref href="System.Runtime.InteropServices.StructLayoutAttribute"></xref> that describes the gross layout features of the current type.
  overload: System.Type.StructLayoutAttribute*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.ToString
  commentId: M:System.Type.ToString
  id: ToString
  parent: System.Type
  langs:
  - csharp
  name: ToString()
  nameWithType: Type.ToString()
  fullName: Type.ToString()
  type: Method
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Returns a `String` representing the name of the current `Type`.
  remarks: "This method returns the fully qualified common language runtime namespace and name for all primitive types. For example, the C# instruction, `(long)0.Type().ToString()` returns \"System.Int64\" instead of merely \"Int64\".  \n  \n If the current <xref:System.Type> represents a generic type, the type and its type arguments are qualified by namespace and by nested type, but not by assembly. If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this method returns the unqualified name of the type parameter."
  example:
  - "This following example demonstrates a use of the <xref:System.Type.Namespace%2A> and <xref:System.Type.Module%2A> properties and the `ToString` method of <xref:System.Type>.  \n  \n [!code-cpp[Type_ToString#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_ToString/CPP/type_tostring.cpp#1)]\n [!code-csharp[Type_ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_ToString/CS/type_tostring.cs#1)]\n [!code-vb[Type_ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_ToString/VB/type_tostring.vb#1)]  \n  \n The following example compares the strings returned by the <xref:System.Type.ToString%2A> method and the `Name`, <xref:System.Type.FullName%2A>, and <xref:System.Type.AssemblyQualifiedName%2A> properties.  \n  \n [!code-csharp[System.Type.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.type.tostring/cs/fullname1.cs#1)]\n [!code-vb[System.Type.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.type.tostring/vb/fullname1.vb#1)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A <xref href="System.String"></xref> representing the name of the current <xref href="System.Type"></xref>.
  overload: System.Type.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.TypeHandle
  commentId: P:System.Type.TypeHandle
  id: TypeHandle
  parent: System.Type
  langs:
  - csharp
  name: TypeHandle
  nameWithType: Type.TypeHandle
  fullName: Type.TypeHandle
  type: Property
  assemblies:
  - System.Runtime
  - mscorlib
  - netstandard
  namespace: System
  summary: Gets the handle for the current <xref href="System.Type"></xref>.
  remarks: '`TypeHandle` encapsulates a pointer to an internal data structure that represents the type. This handle is unique during the process lifetime. The handle is valid only in the application domain in which it was obtained.'
  example:
  - "The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.  \n  \n [!code-cpp[Type_TypeHandle#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_TypeHandle/CPP/type_typehandle.cpp#1)]\n [!code-csharp[Type_TypeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_TypeHandle/CS/type_typehandle.cs#1)]\n [!code-vb[Type_TypeHandle#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_TypeHandle/VB/type_typehandle.vb#1)]"
  syntax:
    content: public virtual RuntimeTypeHandle TypeHandle { get; }
    return:
      type: System.RuntimeTypeHandle
      description: The handle for the current <xref href="System.Type"></xref>.
  overload: System.Type.TypeHandle*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The .NET Compact Framework does not currently support this property.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.TypeInitializer
  commentId: P:System.Type.TypeInitializer
  id: TypeInitializer
  parent: System.Type
  langs:
  - csharp
  name: TypeInitializer
  nameWithType: Type.TypeInitializer
  fullName: Type.TypeInitializer
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Gets the initializer for the type.
  remarks: "Class initializers are also available through the <xref:System.Type.FindMembers%2A> method, or through overloads of the <xref:System.Type.GetMember%2A>, <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetConstructor%2A>, and <xref:System.Type.GetConstructors%2A> methods that take <xref:System.Reflection.BindingFlags> as a parameter.  \n  \n If the current <xref:System.Type> represents a type parameter in the definition of a generic type or generic method, this property returns `null`."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public System.Reflection.ConstructorInfo TypeInitializer { get; }
    return:
      type: System.Reflection.ConstructorInfo
      description: An object that contains the name of the class constructor for the <xref href="System.Type"></xref>.
  overload: System.Type.TypeInitializer*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.UnderlyingSystemType
  commentId: P:System.Type.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Type
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: Type.UnderlyingSystemType
  fullName: Type.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System
  summary: Indicates the type provided by the common language runtime that represents this type.
  syntax:
    content: public abstract Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: The underlying system type for the <xref href="System.Type"></xref>.
  overload: System.Type.UnderlyingSystemType*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Type
  langs:
  - csharp
  name: _Type.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: Type._Type.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: Type._Type.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Maps a set of names to a corresponding set of dispatch identifiers.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.
  syntax:
    content: void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: rgszNames
      type: System.IntPtr
      description: Passed-in array of names to be mapped.
    - id: cNames
      type: System.UInt32
      description: Count of the names to be mapped.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret the names.
    - id: rgDispId
      type: System.IntPtr
      description: Caller-allocated array which receives the IDs corresponding to the names.
  overload: System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Type
  langs:
  - csharp
  name: _Type.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: Type._Type.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: Type._Type.GetTypeInfo(UInt32, UInt32, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.
  syntax:
    content: void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: The type information to return.
    - id: lcid
      type: System.UInt32
      description: The locale identifier for the type information.
    - id: ppTInfo
      type: System.IntPtr
      description: A pointer to the requested type information object.
  overload: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)
  commentId: M:System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Type
  langs:
  - csharp
  name: _Type.GetTypeInfoCount(UInt32)
  nameWithType: Type._Type.GetTypeInfoCount(UInt32)
  fullName: Type._Type.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.
  syntax:
    content: void _Type.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: Points to a location that receives the number of type information interfaces provided by the object.
  overload: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Type
  langs:
  - csharp
  name: _Type.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: Type._Type.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: Type._Type.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: Provides access to properties and methods exposed by an object.
  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.
  syntax:
    content: void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: Identifies the member.
    - id: riid
      type: System.Guid
      description: Reserved for future use. Must be IID_NULL.
    - id: lcid
      type: System.UInt32
      description: The locale context in which to interpret arguments.
    - id: wFlags
      type: System.Int16
      description: Flags describing the context of the call.
    - id: pDispParams
      type: System.IntPtr
      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.
    - id: pVarResult
      type: System.IntPtr
      description: Pointer to the location where the result is to be stored.
    - id: pExcepInfo
      type: System.IntPtr
      description: Pointer to a structure that contains exception information.
    - id: puArgErr
      type: System.IntPtr
      description: The index of the first argument that has an error.
  overload: System.Type.System#Runtime#InteropServices#_Type#Invoke*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Reflection.TargetInvocationException
  parent: System.Reflection
  isExternal: false
  name: TargetInvocationException
  nameWithType: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.AmbiguousMatchException
  parent: System.Reflection
  isExternal: false
  name: AmbiguousMatchException
  nameWithType: AmbiguousMatchException
  fullName: System.Reflection.AmbiguousMatchException
- uid: System.NullReferenceException
  parent: System
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.IO.FileNotFoundException
  parent: System.IO
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.FileLoadException
  parent: System.IO
  isExternal: false
  name: FileLoadException
  nameWithType: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.BadImageFormatException
  parent: System
  isExternal: false
  name: BadImageFormatException
  nameWithType: BadImageFormatException
  fullName: System.BadImageFormatException
- uid: System.Runtime.InteropServices.COMException
  parent: System.Runtime.InteropServices
  isExternal: false
  name: COMException
  nameWithType: COMException
  fullName: System.Runtime.InteropServices.COMException
- uid: System.MethodAccessException
  parent: System
  isExternal: false
  name: MethodAccessException
  nameWithType: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.MissingFieldException
  parent: System
  isExternal: false
  name: MissingFieldException
  nameWithType: MissingFieldException
  fullName: System.MissingFieldException
- uid: System.MissingMethodException
  parent: System
  isExternal: false
  name: MissingMethodException
  nameWithType: MissingMethodException
  fullName: System.MissingMethodException
- uid: System.Reflection.TargetException
  parent: System.Reflection
  isExternal: false
  name: TargetException
  nameWithType: TargetException
  fullName: System.Reflection.TargetException
- uid: System.IndexOutOfRangeException
  parent: System
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.Type.#ctor
  parent: System.Type
  isExternal: false
  name: Type()
  nameWithType: Type.Type()
  fullName: Type.Type()
- uid: System.Type.Assembly
  parent: System.Type
  isExternal: false
  name: Assembly
  nameWithType: Type.Assembly
  fullName: Type.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Type.AssemblyQualifiedName
  parent: System.Type
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: Type.AssemblyQualifiedName
  fullName: Type.AssemblyQualifiedName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type.Attributes
  parent: System.Type
  isExternal: false
  name: Attributes
  nameWithType: Type.Attributes
  fullName: Type.Attributes
- uid: System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type.BaseType
  parent: System.Type
  isExternal: false
  name: BaseType
  nameWithType: Type.BaseType
  fullName: Type.BaseType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type.ContainsGenericParameters
  parent: System.Type
  isExternal: false
  name: ContainsGenericParameters
  nameWithType: Type.ContainsGenericParameters
  fullName: Type.ContainsGenericParameters
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type.DeclaringMethod
  parent: System.Type
  isExternal: false
  name: DeclaringMethod
  nameWithType: Type.DeclaringMethod
  fullName: Type.DeclaringMethod
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Type.DeclaringType
  parent: System.Type
  isExternal: false
  name: DeclaringType
  nameWithType: Type.DeclaringType
  fullName: Type.DeclaringType
- uid: System.Type.DefaultBinder
  parent: System.Type
  isExternal: false
  name: DefaultBinder
  nameWithType: Type.DefaultBinder
  fullName: Type.DefaultBinder
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type.Delimiter
  parent: System.Type
  isExternal: false
  name: Delimiter
  nameWithType: Type.Delimiter
  fullName: Type.Delimiter
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Type.EmptyTypes
  parent: System.Type
  isExternal: false
  name: EmptyTypes
  nameWithType: Type.EmptyTypes
  fullName: Type.EmptyTypes
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.Equals(System.Object)
  parent: System.Type
  isExternal: false
  name: Equals(Object)
  nameWithType: Type.Equals(Object)
  fullName: Type.Equals(Object)
- uid: System.Type.Equals(System.Type)
  parent: System.Type
  isExternal: false
  name: Equals(Type)
  nameWithType: Type.Equals(Type)
  fullName: Type.Equals(Type)
- uid: System.Type.FilterAttribute
  parent: System.Type
  isExternal: false
  name: FilterAttribute
  nameWithType: Type.FilterAttribute
  fullName: Type.FilterAttribute
- uid: System.Reflection.MemberFilter
  parent: System.Reflection
  isExternal: false
  name: MemberFilter
  nameWithType: MemberFilter
  fullName: System.Reflection.MemberFilter
- uid: System.Type.FilterName
  parent: System.Type
  isExternal: false
  name: FilterName
  nameWithType: Type.FilterName
  fullName: Type.FilterName
- uid: System.Type.FilterNameIgnoreCase
  parent: System.Type
  isExternal: false
  name: FilterNameIgnoreCase
  nameWithType: Type.FilterNameIgnoreCase
  fullName: Type.FilterNameIgnoreCase
- uid: System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  parent: System.Type
  isExternal: false
  name: FindInterfaces(TypeFilter, Object)
  nameWithType: Type.FindInterfaces(TypeFilter, Object)
  fullName: Type.FindInterfaces(TypeFilter, Object)
- uid: System.Reflection.TypeFilter
  parent: System.Reflection
  isExternal: false
  name: TypeFilter
  nameWithType: TypeFilter
  fullName: System.Reflection.TypeFilter
- uid: System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  parent: System.Type
  isExternal: false
  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  nameWithType: Type.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  fullName: Type.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
- uid: System.Reflection.MemberInfo
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: false
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Type.FullName
  parent: System.Type
  isExternal: false
  name: FullName
  nameWithType: Type.FullName
  fullName: Type.FullName
- uid: System.Type.GenericParameterAttributes
  parent: System.Type
  isExternal: false
  name: GenericParameterAttributes
  nameWithType: Type.GenericParameterAttributes
  fullName: Type.GenericParameterAttributes
- uid: System.Reflection.GenericParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: GenericParameterAttributes
  nameWithType: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
- uid: System.Type.GenericParameterPosition
  parent: System.Type
  isExternal: false
  name: GenericParameterPosition
  nameWithType: Type.GenericParameterPosition
  fullName: Type.GenericParameterPosition
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type.GenericTypeArguments
  parent: System.Type
  isExternal: false
  name: GenericTypeArguments
  nameWithType: Type.GenericTypeArguments
  fullName: Type.GenericTypeArguments
- uid: System.Type.GetArrayRank
  parent: System.Type
  isExternal: false
  name: GetArrayRank()
  nameWithType: Type.GetArrayRank()
  fullName: Type.GetArrayRank()
- uid: System.Type.GetAttributeFlagsImpl
  parent: System.Type
  isExternal: false
  name: GetAttributeFlagsImpl()
  nameWithType: Type.GetAttributeFlagsImpl()
  fullName: Type.GetAttributeFlagsImpl()
- uid: System.Type.GetConstructor(System.Type[])
  parent: System.Type
  isExternal: false
  name: GetConstructor(Type[])
  nameWithType: Type.GetConstructor(Type[])
  fullName: Type.GetConstructor(Type[])
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])
  nameWithType: Type.GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])
  fullName: Type.GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])
- uid: System.Reflection.ParameterModifier
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier[]
  nameWithType: ParameterModifier[]
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
- uid: System.Type.GetConstructors
  parent: System.Type
  isExternal: false
  name: GetConstructors()
  nameWithType: Type.GetConstructors()
  fullName: Type.GetConstructors()
- uid: System.Reflection.ConstructorInfo[]
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo[]
  nameWithType: ConstructorInfo[]
  fullName: System.Reflection.ConstructorInfo[]
  spec.csharp:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetConstructors(System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetConstructors(BindingFlags)
  nameWithType: Type.GetConstructors(BindingFlags)
  fullName: Type.GetConstructors(BindingFlags)
- uid: System.Type.GetDefaultMembers
  parent: System.Type
  isExternal: false
  name: GetDefaultMembers()
  nameWithType: Type.GetDefaultMembers()
  fullName: Type.GetDefaultMembers()
- uid: System.Type.GetElementType
  parent: System.Type
  isExternal: false
  name: GetElementType()
  nameWithType: Type.GetElementType()
  fullName: Type.GetElementType()
- uid: System.Type.GetEnumName(System.Object)
  parent: System.Type
  isExternal: false
  name: GetEnumName(Object)
  nameWithType: Type.GetEnumName(Object)
  fullName: Type.GetEnumName(Object)
- uid: System.Type.GetEnumNames
  parent: System.Type
  isExternal: false
  name: GetEnumNames()
  nameWithType: Type.GetEnumNames()
  fullName: Type.GetEnumNames()
- uid: System.String[]
  parent: System
  isExternal: false
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetEnumUnderlyingType
  parent: System.Type
  isExternal: false
  name: GetEnumUnderlyingType()
  nameWithType: Type.GetEnumUnderlyingType()
  fullName: Type.GetEnumUnderlyingType()
- uid: System.Type.GetEnumValues
  parent: System.Type
  isExternal: false
  name: GetEnumValues()
  nameWithType: Type.GetEnumValues()
  fullName: Type.GetEnumValues()
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Type.GetEvent(System.String)
  parent: System.Type
  isExternal: false
  name: GetEvent(String)
  nameWithType: Type.GetEvent(String)
  fullName: Type.GetEvent(String)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Type.GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetEvent(String, BindingFlags)
  nameWithType: Type.GetEvent(String, BindingFlags)
  fullName: Type.GetEvent(String, BindingFlags)
- uid: System.Type.GetEvents
  parent: System.Type
  isExternal: false
  name: GetEvents()
  nameWithType: Type.GetEvents()
  fullName: Type.GetEvents()
- uid: System.Reflection.EventInfo[]
  parent: System.Reflection
  isExternal: false
  name: EventInfo[]
  nameWithType: EventInfo[]
  fullName: System.Reflection.EventInfo[]
  spec.csharp:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetEvents(System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetEvents(BindingFlags)
  nameWithType: Type.GetEvents(BindingFlags)
  fullName: Type.GetEvents(BindingFlags)
- uid: System.Type.GetField(System.String)
  parent: System.Type
  isExternal: false
  name: GetField(String)
  nameWithType: Type.GetField(String)
  fullName: Type.GetField(String)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Type.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetField(String, BindingFlags)
  nameWithType: Type.GetField(String, BindingFlags)
  fullName: Type.GetField(String, BindingFlags)
- uid: System.Type.GetFields
  parent: System.Type
  isExternal: false
  name: GetFields()
  nameWithType: Type.GetFields()
  fullName: Type.GetFields()
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: false
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetFields(System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: Type.GetFields(BindingFlags)
  fullName: Type.GetFields(BindingFlags)
- uid: System.Type.GetGenericArguments
  parent: System.Type
  isExternal: false
  name: GetGenericArguments()
  nameWithType: Type.GetGenericArguments()
  fullName: Type.GetGenericArguments()
- uid: System.Type.GetGenericParameterConstraints
  parent: System.Type
  isExternal: false
  name: GetGenericParameterConstraints()
  nameWithType: Type.GetGenericParameterConstraints()
  fullName: Type.GetGenericParameterConstraints()
- uid: System.Type.GetGenericTypeDefinition
  parent: System.Type
  isExternal: false
  name: GetGenericTypeDefinition()
  nameWithType: Type.GetGenericTypeDefinition()
  fullName: Type.GetGenericTypeDefinition()
- uid: System.Type.GetHashCode
  parent: System.Type
  isExternal: false
  name: GetHashCode()
  nameWithType: Type.GetHashCode()
  fullName: Type.GetHashCode()
- uid: System.Type.GetInterface(System.String)
  parent: System.Type
  isExternal: false
  name: GetInterface(String)
  nameWithType: Type.GetInterface(String)
  fullName: Type.GetInterface(String)
- uid: System.Type.GetInterface(System.String,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetInterface(String, Boolean)
  nameWithType: Type.GetInterface(String, Boolean)
  fullName: Type.GetInterface(String, Boolean)
- uid: System.Type.GetInterfaceMap(System.Type)
  parent: System.Type
  isExternal: false
  name: GetInterfaceMap(Type)
  nameWithType: Type.GetInterfaceMap(Type)
  fullName: Type.GetInterfaceMap(Type)
- uid: System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: false
  name: InterfaceMapping
  nameWithType: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
- uid: System.Type.GetInterfaces
  parent: System.Type
  isExternal: false
  name: GetInterfaces()
  nameWithType: Type.GetInterfaces()
  fullName: Type.GetInterfaces()
- uid: System.Type.GetMember(System.String)
  parent: System.Type
  isExternal: false
  name: GetMember(String)
  nameWithType: Type.GetMember(String)
  fullName: Type.GetMember(String)
- uid: System.Type.GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetMember(String, BindingFlags)
  nameWithType: Type.GetMember(String, BindingFlags)
  fullName: Type.GetMember(String, BindingFlags)
- uid: System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetMember(String, MemberTypes, BindingFlags)
  nameWithType: Type.GetMember(String, MemberTypes, BindingFlags)
  fullName: Type.GetMember(String, MemberTypes, BindingFlags)
- uid: System.Type.GetMembers
  parent: System.Type
  isExternal: false
  name: GetMembers()
  nameWithType: Type.GetMembers()
  fullName: Type.GetMembers()
- uid: System.Type.GetMembers(System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: Type.GetMembers(BindingFlags)
  fullName: Type.GetMembers(BindingFlags)
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])
  nameWithType: Type.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])
  fullName: Type.GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])
- uid: System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetMethod(String, Type[], ParameterModifier[])
  nameWithType: Type.GetMethod(String, Type[], ParameterModifier[])
  fullName: Type.GetMethod(String, Type[], ParameterModifier[])
- uid: System.Type.GetMethod(System.String)
  parent: System.Type
  isExternal: false
  name: GetMethod(String)
  nameWithType: Type.GetMethod(String)
  fullName: Type.GetMethod(String)
- uid: System.Type.GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetMethod(String, BindingFlags)
  nameWithType: Type.GetMethod(String, BindingFlags)
  fullName: Type.GetMethod(String, BindingFlags)
- uid: System.Type.GetMethod(System.String,System.Type[])
  parent: System.Type
  isExternal: false
  name: GetMethod(String, Type[])
  nameWithType: Type.GetMethod(String, Type[])
  fullName: Type.GetMethod(String, Type[])
- uid: System.Type.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Type.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: Type.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
- uid: System.Type.GetMethods
  parent: System.Type
  isExternal: false
  name: GetMethods()
  nameWithType: Type.GetMethods()
  fullName: Type.GetMethods()
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: false
  name: MethodInfo[]
  nameWithType: MethodInfo[]
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetMethods(System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: Type.GetMethods(BindingFlags)
  fullName: Type.GetMethods(BindingFlags)
- uid: System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetNestedType(String, BindingFlags)
  nameWithType: Type.GetNestedType(String, BindingFlags)
  fullName: Type.GetNestedType(String, BindingFlags)
- uid: System.Type.GetNestedType(System.String)
  parent: System.Type
  isExternal: false
  name: GetNestedType(String)
  nameWithType: Type.GetNestedType(String)
  fullName: Type.GetNestedType(String)
- uid: System.Type.GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetNestedTypes(BindingFlags)
  nameWithType: Type.GetNestedTypes(BindingFlags)
  fullName: Type.GetNestedTypes(BindingFlags)
- uid: System.Type.GetNestedTypes
  parent: System.Type
  isExternal: false
  name: GetNestedTypes()
  nameWithType: Type.GetNestedTypes()
  fullName: Type.GetNestedTypes()
- uid: System.Type.GetProperties
  parent: System.Type
  isExternal: false
  name: GetProperties()
  nameWithType: Type.GetProperties()
  fullName: Type.GetProperties()
- uid: System.Reflection.PropertyInfo
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetProperties(System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: Type.GetProperties(BindingFlags)
  fullName: Type.GetProperties(BindingFlags)
- uid: System.Type.GetProperty(System.String)
  parent: System.Type
  isExternal: false
  name: GetProperty(String)
  nameWithType: Type.GetProperty(String)
  fullName: Type.GetProperty(String)
- uid: System.Type.GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Type
  isExternal: false
  name: GetProperty(String, BindingFlags)
  nameWithType: Type.GetProperty(String, BindingFlags)
  fullName: Type.GetProperty(String, BindingFlags)
- uid: System.Type.GetProperty(System.String,System.Type)
  parent: System.Type
  isExternal: false
  name: GetProperty(String, Type)
  nameWithType: Type.GetProperty(String, Type)
  fullName: Type.GetProperty(String, Type)
- uid: System.Type.GetProperty(System.String,System.Type[])
  parent: System.Type
  isExternal: false
  name: GetProperty(String, Type[])
  nameWithType: Type.GetProperty(String, Type[])
  fullName: Type.GetProperty(String, Type[])
- uid: System.Type.GetProperty(System.String,System.Type,System.Type[])
  parent: System.Type
  isExternal: false
  name: GetProperty(String, Type, Type[])
  nameWithType: Type.GetProperty(String, Type, Type[])
  fullName: Type.GetProperty(String, Type, Type[])
- uid: System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetProperty(String, Type, Type[], ParameterModifier[])
  nameWithType: Type.GetProperty(String, Type, Type[], ParameterModifier[])
  fullName: Type.GetProperty(String, Type, Type[], ParameterModifier[])
- uid: System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  nameWithType: Type.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  fullName: Type.GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
- uid: System.Type.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Type
  isExternal: false
  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  nameWithType: Type.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
  fullName: Type.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])
- uid: System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean, Boolean)
  nameWithType: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean, Boolean)
  fullName: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean, Boolean)
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: System.Reflection.AssemblyName
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly}
  parent: System
  isExternal: false
  name: Func<AssemblyName,Assembly>
  nameWithType: Func<AssemblyName,Assembly>
  fullName: System.Func<System.Reflection.AssemblyName,System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func`4
  name: Func<T1,T2,T3,TResult>
  nameWithType: Func<T1,T2,T3,TResult>
  fullName: System.Func<T1,T2,T3,TResult>
- uid: System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type}
  parent: System
  isExternal: false
  name: Func<Assembly,String,Boolean,Type>
  nameWithType: Func<Assembly,String,Boolean,Type>
  fullName: System.Func<System.Reflection.Assembly,System.String,System.Boolean,System.Type>
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type},System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean)
  nameWithType: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean)
  fullName: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>, Boolean)
- uid: System.Type.GetType(System.String,System.Func{System.Reflection.AssemblyName,System.Reflection.Assembly},System.Func{System.Reflection.Assembly,System.String,System.Boolean,System.Type})
  parent: System.Type
  isExternal: false
  name: GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>)
  nameWithType: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>)
  fullName: Type.GetType(String, Func<AssemblyName,Assembly>, Func<Assembly,String,Boolean,Type>)
- uid: System.Type.GetType
  parent: System.Type
  isExternal: false
  name: GetType()
  nameWithType: Type.GetType()
  fullName: Type.GetType()
- uid: System.Type.GetType(System.String,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetType(String, Boolean)
  nameWithType: Type.GetType(String, Boolean)
  fullName: Type.GetType(String, Boolean)
- uid: System.Type.GetType(System.String)
  parent: System.Type
  isExternal: false
  name: GetType(String)
  nameWithType: Type.GetType(String)
  fullName: Type.GetType(String)
- uid: System.Type.GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetType(String, Boolean, Boolean)
  nameWithType: Type.GetType(String, Boolean, Boolean)
  fullName: Type.GetType(String, Boolean, Boolean)
- uid: System.Type.GetTypeArray(System.Object[])
  parent: System.Type
  isExternal: false
  name: GetTypeArray(Object[])
  nameWithType: Type.GetTypeArray(Object[])
  fullName: Type.GetTypeArray(Object[])
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type.GetTypeCode(System.Type)
  parent: System.Type
  isExternal: false
  name: GetTypeCode(Type)
  nameWithType: Type.GetTypeCode(Type)
  fullName: Type.GetTypeCode(Type)
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  nameWithType: TypeCode
  fullName: System.TypeCode
- uid: System.Type.GetTypeCodeImpl
  parent: System.Type
  isExternal: false
  name: GetTypeCodeImpl()
  nameWithType: Type.GetTypeCodeImpl()
  fullName: Type.GetTypeCodeImpl()
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.String,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetTypeFromCLSID(Guid, String, Boolean)
  nameWithType: Type.GetTypeFromCLSID(Guid, String, Boolean)
  fullName: Type.GetTypeFromCLSID(Guid, String, Boolean)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.String)
  parent: System.Type
  isExternal: false
  name: GetTypeFromCLSID(Guid, String)
  nameWithType: Type.GetTypeFromCLSID(Guid, String)
  fullName: Type.GetTypeFromCLSID(Guid, String)
- uid: System.Type.GetTypeFromCLSID(System.Guid,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetTypeFromCLSID(Guid, Boolean)
  nameWithType: Type.GetTypeFromCLSID(Guid, Boolean)
  fullName: Type.GetTypeFromCLSID(Guid, Boolean)
- uid: System.Type.GetTypeFromCLSID(System.Guid)
  parent: System.Type
  isExternal: false
  name: GetTypeFromCLSID(Guid)
  nameWithType: Type.GetTypeFromCLSID(Guid)
  fullName: Type.GetTypeFromCLSID(Guid)
- uid: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  parent: System.Type
  isExternal: false
  name: GetTypeFromHandle(RuntimeTypeHandle)
  nameWithType: Type.GetTypeFromHandle(RuntimeTypeHandle)
  fullName: Type.GetTypeFromHandle(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Type.GetTypeFromProgID(System.String)
  parent: System.Type
  isExternal: false
  name: GetTypeFromProgID(String)
  nameWithType: Type.GetTypeFromProgID(String)
  fullName: Type.GetTypeFromProgID(String)
- uid: System.Type.GetTypeFromProgID(System.String,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetTypeFromProgID(String, Boolean)
  nameWithType: Type.GetTypeFromProgID(String, Boolean)
  fullName: Type.GetTypeFromProgID(String, Boolean)
- uid: System.Type.GetTypeFromProgID(System.String,System.String)
  parent: System.Type
  isExternal: false
  name: GetTypeFromProgID(String, String)
  nameWithType: Type.GetTypeFromProgID(String, String)
  fullName: Type.GetTypeFromProgID(String, String)
- uid: System.Type.GetTypeFromProgID(System.String,System.String,System.Boolean)
  parent: System.Type
  isExternal: false
  name: GetTypeFromProgID(String, String, Boolean)
  nameWithType: Type.GetTypeFromProgID(String, String, Boolean)
  fullName: Type.GetTypeFromProgID(String, String, Boolean)
- uid: System.Type.GetTypeHandle(System.Object)
  parent: System.Type
  isExternal: false
  name: GetTypeHandle(Object)
  nameWithType: Type.GetTypeHandle(Object)
  fullName: Type.GetTypeHandle(Object)
- uid: System.Type.GUID
  parent: System.Type
  isExternal: false
  name: GUID
  nameWithType: Type.GUID
  fullName: Type.GUID
- uid: System.Type.HasElementType
  parent: System.Type
  isExternal: false
  name: HasElementType
  nameWithType: Type.HasElementType
  fullName: Type.HasElementType
- uid: System.Type.HasElementTypeImpl
  parent: System.Type
  isExternal: false
  name: HasElementTypeImpl()
  nameWithType: Type.HasElementTypeImpl()
  fullName: Type.HasElementTypeImpl()
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Type
  isExternal: false
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  nameWithType: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
  fullName: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])
  parent: System.Type
  isExternal: false
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[])
  nameWithType: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[])
  fullName: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[])
- uid: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)
  parent: System.Type
  isExternal: false
  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)
  nameWithType: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)
  fullName: Type.InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)
- uid: System.Type.IsAbstract
  parent: System.Type
  isExternal: false
  name: IsAbstract
  nameWithType: Type.IsAbstract
  fullName: Type.IsAbstract
- uid: System.Type.IsAnsiClass
  parent: System.Type
  isExternal: false
  name: IsAnsiClass
  nameWithType: Type.IsAnsiClass
  fullName: Type.IsAnsiClass
- uid: System.Type.IsArray
  parent: System.Type
  isExternal: false
  name: IsArray
  nameWithType: Type.IsArray
  fullName: Type.IsArray
- uid: System.Type.IsArrayImpl
  parent: System.Type
  isExternal: false
  name: IsArrayImpl()
  nameWithType: Type.IsArrayImpl()
  fullName: Type.IsArrayImpl()
- uid: System.Type.IsAssignableFrom(System.Type)
  parent: System.Type
  isExternal: false
  name: IsAssignableFrom(Type)
  nameWithType: Type.IsAssignableFrom(Type)
  fullName: Type.IsAssignableFrom(Type)
- uid: System.Type.IsAutoClass
  parent: System.Type
  isExternal: false
  name: IsAutoClass
  nameWithType: Type.IsAutoClass
  fullName: Type.IsAutoClass
- uid: System.Type.IsAutoLayout
  parent: System.Type
  isExternal: false
  name: IsAutoLayout
  nameWithType: Type.IsAutoLayout
  fullName: Type.IsAutoLayout
- uid: System.Type.IsByRef
  parent: System.Type
  isExternal: false
  name: IsByRef
  nameWithType: Type.IsByRef
  fullName: Type.IsByRef
- uid: System.Type.IsByRefImpl
  parent: System.Type
  isExternal: false
  name: IsByRefImpl()
  nameWithType: Type.IsByRefImpl()
  fullName: Type.IsByRefImpl()
- uid: System.Type.IsClass
  parent: System.Type
  isExternal: false
  name: IsClass
  nameWithType: Type.IsClass
  fullName: Type.IsClass
- uid: System.Type.IsCOMObject
  parent: System.Type
  isExternal: false
  name: IsCOMObject
  nameWithType: Type.IsCOMObject
  fullName: Type.IsCOMObject
- uid: System.Type.IsCOMObjectImpl
  parent: System.Type
  isExternal: false
  name: IsCOMObjectImpl()
  nameWithType: Type.IsCOMObjectImpl()
  fullName: Type.IsCOMObjectImpl()
- uid: System.Type.IsConstructedGenericType
  parent: System.Type
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: Type.IsConstructedGenericType
  fullName: Type.IsConstructedGenericType
- uid: System.Type.IsContextful
  parent: System.Type
  isExternal: false
  name: IsContextful
  nameWithType: Type.IsContextful
  fullName: Type.IsContextful
- uid: System.Type.IsContextfulImpl
  parent: System.Type
  isExternal: false
  name: IsContextfulImpl()
  nameWithType: Type.IsContextfulImpl()
  fullName: Type.IsContextfulImpl()
- uid: System.Type.IsEnum
  parent: System.Type
  isExternal: false
  name: IsEnum
  nameWithType: Type.IsEnum
  fullName: Type.IsEnum
- uid: System.Type.IsEnumDefined(System.Object)
  parent: System.Type
  isExternal: false
  name: IsEnumDefined(Object)
  nameWithType: Type.IsEnumDefined(Object)
  fullName: Type.IsEnumDefined(Object)
- uid: System.Type.IsEquivalentTo(System.Type)
  parent: System.Type
  isExternal: false
  name: IsEquivalentTo(Type)
  nameWithType: Type.IsEquivalentTo(Type)
  fullName: Type.IsEquivalentTo(Type)
- uid: System.Type.IsExplicitLayout
  parent: System.Type
  isExternal: false
  name: IsExplicitLayout
  nameWithType: Type.IsExplicitLayout
  fullName: Type.IsExplicitLayout
- uid: System.Type.IsGenericParameter
  parent: System.Type
  isExternal: false
  name: IsGenericParameter
  nameWithType: Type.IsGenericParameter
  fullName: Type.IsGenericParameter
- uid: System.Type.IsGenericType
  parent: System.Type
  isExternal: false
  name: IsGenericType
  nameWithType: Type.IsGenericType
  fullName: Type.IsGenericType
- uid: System.Type.IsGenericTypeDefinition
  parent: System.Type
  isExternal: false
  name: IsGenericTypeDefinition
  nameWithType: Type.IsGenericTypeDefinition
  fullName: Type.IsGenericTypeDefinition
- uid: System.Type.IsImport
  parent: System.Type
  isExternal: false
  name: IsImport
  nameWithType: Type.IsImport
  fullName: Type.IsImport
- uid: System.Type.IsInstanceOfType(System.Object)
  parent: System.Type
  isExternal: false
  name: IsInstanceOfType(Object)
  nameWithType: Type.IsInstanceOfType(Object)
  fullName: Type.IsInstanceOfType(Object)
- uid: System.Type.IsInterface
  parent: System.Type
  isExternal: false
  name: IsInterface
  nameWithType: Type.IsInterface
  fullName: Type.IsInterface
- uid: System.Type.IsLayoutSequential
  parent: System.Type
  isExternal: false
  name: IsLayoutSequential
  nameWithType: Type.IsLayoutSequential
  fullName: Type.IsLayoutSequential
- uid: System.Type.IsMarshalByRef
  parent: System.Type
  isExternal: false
  name: IsMarshalByRef
  nameWithType: Type.IsMarshalByRef
  fullName: Type.IsMarshalByRef
- uid: System.Type.IsMarshalByRefImpl
  parent: System.Type
  isExternal: false
  name: IsMarshalByRefImpl()
  nameWithType: Type.IsMarshalByRefImpl()
  fullName: Type.IsMarshalByRefImpl()
- uid: System.Type.IsNested
  parent: System.Type
  isExternal: false
  name: IsNested
  nameWithType: Type.IsNested
  fullName: Type.IsNested
- uid: System.Type.IsNestedAssembly
  parent: System.Type
  isExternal: false
  name: IsNestedAssembly
  nameWithType: Type.IsNestedAssembly
  fullName: Type.IsNestedAssembly
- uid: System.Type.IsNestedFamANDAssem
  parent: System.Type
  isExternal: false
  name: IsNestedFamANDAssem
  nameWithType: Type.IsNestedFamANDAssem
  fullName: Type.IsNestedFamANDAssem
- uid: System.Type.IsNestedFamily
  parent: System.Type
  isExternal: false
  name: IsNestedFamily
  nameWithType: Type.IsNestedFamily
  fullName: Type.IsNestedFamily
- uid: System.Type.IsNestedFamORAssem
  parent: System.Type
  isExternal: false
  name: IsNestedFamORAssem
  nameWithType: Type.IsNestedFamORAssem
  fullName: Type.IsNestedFamORAssem
- uid: System.Type.IsNestedPrivate
  parent: System.Type
  isExternal: false
  name: IsNestedPrivate
  nameWithType: Type.IsNestedPrivate
  fullName: Type.IsNestedPrivate
- uid: System.Type.IsNestedPublic
  parent: System.Type
  isExternal: false
  name: IsNestedPublic
  nameWithType: Type.IsNestedPublic
  fullName: Type.IsNestedPublic
- uid: System.Type.IsNotPublic
  parent: System.Type
  isExternal: false
  name: IsNotPublic
  nameWithType: Type.IsNotPublic
  fullName: Type.IsNotPublic
- uid: System.Type.IsPointer
  parent: System.Type
  isExternal: false
  name: IsPointer
  nameWithType: Type.IsPointer
  fullName: Type.IsPointer
- uid: System.Type.IsPointerImpl
  parent: System.Type
  isExternal: false
  name: IsPointerImpl()
  nameWithType: Type.IsPointerImpl()
  fullName: Type.IsPointerImpl()
- uid: System.Type.IsPrimitive
  parent: System.Type
  isExternal: false
  name: IsPrimitive
  nameWithType: Type.IsPrimitive
  fullName: Type.IsPrimitive
- uid: System.Type.IsPrimitiveImpl
  parent: System.Type
  isExternal: false
  name: IsPrimitiveImpl()
  nameWithType: Type.IsPrimitiveImpl()
  fullName: Type.IsPrimitiveImpl()
- uid: System.Type.IsPublic
  parent: System.Type
  isExternal: false
  name: IsPublic
  nameWithType: Type.IsPublic
  fullName: Type.IsPublic
- uid: System.Type.IsSealed
  parent: System.Type
  isExternal: false
  name: IsSealed
  nameWithType: Type.IsSealed
  fullName: Type.IsSealed
- uid: System.Type.IsSecurityCritical
  parent: System.Type
  isExternal: false
  name: IsSecurityCritical
  nameWithType: Type.IsSecurityCritical
  fullName: Type.IsSecurityCritical
- uid: System.Type.IsSecuritySafeCritical
  parent: System.Type
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: Type.IsSecuritySafeCritical
  fullName: Type.IsSecuritySafeCritical
- uid: System.Type.IsSecurityTransparent
  parent: System.Type
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: Type.IsSecurityTransparent
  fullName: Type.IsSecurityTransparent
- uid: System.Type.IsSerializable
  parent: System.Type
  isExternal: false
  name: IsSerializable
  nameWithType: Type.IsSerializable
  fullName: Type.IsSerializable
- uid: System.Type.IsSpecialName
  parent: System.Type
  isExternal: false
  name: IsSpecialName
  nameWithType: Type.IsSpecialName
  fullName: Type.IsSpecialName
- uid: System.Type.IsSubclassOf(System.Type)
  parent: System.Type
  isExternal: false
  name: IsSubclassOf(Type)
  nameWithType: Type.IsSubclassOf(Type)
  fullName: Type.IsSubclassOf(Type)
- uid: System.Type.IsSZArray
  parent: System.Type
  isExternal: false
  name: IsSZArray
  nameWithType: Type.IsSZArray
  fullName: Type.IsSZArray
- uid: System.Type.IsTypeDefinition
  parent: System.Type
  isExternal: false
  name: IsTypeDefinition
  nameWithType: Type.IsTypeDefinition
  fullName: Type.IsTypeDefinition
- uid: System.Type.IsUnicodeClass
  parent: System.Type
  isExternal: false
  name: IsUnicodeClass
  nameWithType: Type.IsUnicodeClass
  fullName: Type.IsUnicodeClass
- uid: System.Type.IsValueType
  parent: System.Type
  isExternal: false
  name: IsValueType
  nameWithType: Type.IsValueType
  fullName: Type.IsValueType
- uid: System.Type.IsValueTypeImpl
  parent: System.Type
  isExternal: false
  name: IsValueTypeImpl()
  nameWithType: Type.IsValueTypeImpl()
  fullName: Type.IsValueTypeImpl()
- uid: System.Type.IsVariableBoundArray
  parent: System.Type
  isExternal: false
  name: IsVariableBoundArray
  nameWithType: Type.IsVariableBoundArray
  fullName: Type.IsVariableBoundArray
- uid: System.Type.IsVisible
  parent: System.Type
  isExternal: false
  name: IsVisible
  nameWithType: Type.IsVisible
  fullName: Type.IsVisible
- uid: System.Type.MakeArrayType(System.Int32)
  parent: System.Type
  isExternal: false
  name: MakeArrayType(Int32)
  nameWithType: Type.MakeArrayType(Int32)
  fullName: Type.MakeArrayType(Int32)
- uid: System.Type.MakeArrayType
  parent: System.Type
  isExternal: false
  name: MakeArrayType()
  nameWithType: Type.MakeArrayType()
  fullName: Type.MakeArrayType()
- uid: System.Type.MakeByRefType
  parent: System.Type
  isExternal: false
  name: MakeByRefType()
  nameWithType: Type.MakeByRefType()
  fullName: Type.MakeByRefType()
- uid: System.Type.MakeGenericType(System.Type[])
  parent: System.Type
  isExternal: false
  name: MakeGenericType(Type[])
  nameWithType: Type.MakeGenericType(Type[])
  fullName: Type.MakeGenericType(Type[])
- uid: System.Type.MakePointerType
  parent: System.Type
  isExternal: false
  name: MakePointerType()
  nameWithType: Type.MakePointerType()
  fullName: Type.MakePointerType()
- uid: System.Type.MemberType
  parent: System.Type
  isExternal: false
  name: MemberType
  nameWithType: Type.MemberType
  fullName: Type.MemberType
- uid: System.Type.Missing
  parent: System.Type
  isExternal: false
  name: Missing
  nameWithType: Type.Missing
  fullName: Type.Missing
- uid: System.Type.Module
  parent: System.Type
  isExternal: false
  name: Module
  nameWithType: Type.Module
  fullName: Type.Module
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Type.Name
  parent: System.Type
  isExternal: false
  name: Name
  nameWithType: Type.Name
  fullName: Type.Name
- uid: System.Type.Namespace
  parent: System.Type
  isExternal: false
  name: Namespace
  nameWithType: Type.Namespace
  fullName: Type.Namespace
- uid: System.Type.op_Equality(System.Type,System.Type)
  parent: System.Type
  isExternal: false
  name: op_Equality(Type, Type)
  nameWithType: Type.op_Equality(Type, Type)
  fullName: Type.op_Equality(Type, Type)
- uid: System.Type.op_Inequality(System.Type,System.Type)
  parent: System.Type
  isExternal: false
  name: op_Inequality(Type, Type)
  nameWithType: Type.op_Inequality(Type, Type)
  fullName: Type.op_Inequality(Type, Type)
- uid: System.Type.ReflectedType
  parent: System.Type
  isExternal: false
  name: ReflectedType
  nameWithType: Type.ReflectedType
  fullName: Type.ReflectedType
- uid: System.Type.ReflectionOnlyGetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  isExternal: false
  name: ReflectionOnlyGetType(String, Boolean, Boolean)
  nameWithType: Type.ReflectionOnlyGetType(String, Boolean, Boolean)
  fullName: Type.ReflectionOnlyGetType(String, Boolean, Boolean)
- uid: System.Type.StructLayoutAttribute
  parent: System.Type
  isExternal: false
  name: StructLayoutAttribute
  nameWithType: Type.StructLayoutAttribute
  fullName: Type.StructLayoutAttribute
- uid: System.Runtime.InteropServices.StructLayoutAttribute
  parent: System.Runtime.InteropServices
  isExternal: false
  name: StructLayoutAttribute
  nameWithType: StructLayoutAttribute
  fullName: System.Runtime.InteropServices.StructLayoutAttribute
- uid: System.Type.ToString
  parent: System.Type
  isExternal: false
  name: ToString()
  nameWithType: Type.ToString()
  fullName: Type.ToString()
- uid: System.Type.TypeHandle
  parent: System.Type
  isExternal: false
  name: TypeHandle
  nameWithType: Type.TypeHandle
  fullName: Type.TypeHandle
- uid: System.Type.TypeInitializer
  parent: System.Type
  isExternal: false
  name: TypeInitializer
  nameWithType: Type.TypeInitializer
  fullName: Type.TypeInitializer
- uid: System.Type.UnderlyingSystemType
  parent: System.Type
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: Type.UnderlyingSystemType
  fullName: Type.UnderlyingSystemType
- uid: System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Type
  isExternal: false
  name: _Type.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: Type._Type.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: Type._Type.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Type
  isExternal: false
  name: _Type.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: Type._Type.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: Type._Type.GetTypeInfo(UInt32, UInt32, IntPtr)
- uid: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount(System.UInt32@)
  parent: System.Type
  isExternal: false
  name: _Type.GetTypeInfoCount(UInt32)
  nameWithType: Type._Type.GetTypeInfoCount(UInt32)
  fullName: Type._Type.GetTypeInfoCount(UInt32)
- uid: System.Type.System#Runtime#InteropServices#_Type#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Type
  isExternal: false
  name: _Type.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: Type._Type.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: Type._Type.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Type.#ctor*
  parent: System.Type
  isExternal: false
  name: Type
  nameWithType: Type.Type
  fullName: Type.Type
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.Assembly*
  parent: System.Type
  isExternal: false
  name: Assembly
  nameWithType: Type.Assembly
  fullName: Type.Assembly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.AssemblyQualifiedName*
  parent: System.Type
  isExternal: false
  name: AssemblyQualifiedName
  nameWithType: Type.AssemblyQualifiedName
  fullName: Type.AssemblyQualifiedName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.Attributes*
  parent: System.Type
  isExternal: false
  name: Attributes
  nameWithType: Type.Attributes
  fullName: Type.Attributes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.BaseType*
  parent: System.Type
  isExternal: false
  name: BaseType
  nameWithType: Type.BaseType
  fullName: Type.BaseType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.ContainsGenericParameters*
  parent: System.Type
  isExternal: false
  name: ContainsGenericParameters
  nameWithType: Type.ContainsGenericParameters
  fullName: Type.ContainsGenericParameters
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.DeclaringMethod*
  parent: System.Type
  isExternal: false
  name: DeclaringMethod
  nameWithType: Type.DeclaringMethod
  fullName: Type.DeclaringMethod
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.DeclaringType*
  parent: System.Type
  isExternal: false
  name: DeclaringType
  nameWithType: Type.DeclaringType
  fullName: Type.DeclaringType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.DefaultBinder*
  parent: System.Type
  isExternal: false
  name: DefaultBinder
  nameWithType: Type.DefaultBinder
  fullName: Type.DefaultBinder
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.Equals*
  parent: System.Type
  isExternal: false
  name: Equals
  nameWithType: Type.Equals
  fullName: Type.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.FindInterfaces*
  parent: System.Type
  isExternal: false
  name: FindInterfaces
  nameWithType: Type.FindInterfaces
  fullName: Type.FindInterfaces
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.FindMembers*
  parent: System.Type
  isExternal: false
  name: FindMembers
  nameWithType: Type.FindMembers
  fullName: Type.FindMembers
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.FullName*
  parent: System.Type
  isExternal: false
  name: FullName
  nameWithType: Type.FullName
  fullName: Type.FullName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GenericParameterAttributes*
  parent: System.Type
  isExternal: false
  name: GenericParameterAttributes
  nameWithType: Type.GenericParameterAttributes
  fullName: Type.GenericParameterAttributes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GenericParameterPosition*
  parent: System.Type
  isExternal: false
  name: GenericParameterPosition
  nameWithType: Type.GenericParameterPosition
  fullName: Type.GenericParameterPosition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GenericTypeArguments*
  parent: System.Type
  isExternal: false
  name: GenericTypeArguments
  nameWithType: Type.GenericTypeArguments
  fullName: Type.GenericTypeArguments
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetArrayRank*
  parent: System.Type
  isExternal: false
  name: GetArrayRank
  nameWithType: Type.GetArrayRank
  fullName: Type.GetArrayRank
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetAttributeFlagsImpl*
  parent: System.Type
  isExternal: false
  name: GetAttributeFlagsImpl
  nameWithType: Type.GetAttributeFlagsImpl
  fullName: Type.GetAttributeFlagsImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetConstructor*
  parent: System.Type
  isExternal: false
  name: GetConstructor
  nameWithType: Type.GetConstructor
  fullName: Type.GetConstructor
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetConstructorImpl*
  parent: System.Type
  isExternal: false
  name: GetConstructorImpl
  nameWithType: Type.GetConstructorImpl
  fullName: Type.GetConstructorImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetConstructors*
  parent: System.Type
  isExternal: false
  name: GetConstructors
  nameWithType: Type.GetConstructors
  fullName: Type.GetConstructors
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetDefaultMembers*
  parent: System.Type
  isExternal: false
  name: GetDefaultMembers
  nameWithType: Type.GetDefaultMembers
  fullName: Type.GetDefaultMembers
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetElementType*
  parent: System.Type
  isExternal: false
  name: GetElementType
  nameWithType: Type.GetElementType
  fullName: Type.GetElementType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetEnumName*
  parent: System.Type
  isExternal: false
  name: GetEnumName
  nameWithType: Type.GetEnumName
  fullName: Type.GetEnumName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetEnumNames*
  parent: System.Type
  isExternal: false
  name: GetEnumNames
  nameWithType: Type.GetEnumNames
  fullName: Type.GetEnumNames
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetEnumUnderlyingType*
  parent: System.Type
  isExternal: false
  name: GetEnumUnderlyingType
  nameWithType: Type.GetEnumUnderlyingType
  fullName: Type.GetEnumUnderlyingType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetEnumValues*
  parent: System.Type
  isExternal: false
  name: GetEnumValues
  nameWithType: Type.GetEnumValues
  fullName: Type.GetEnumValues
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetEvent*
  parent: System.Type
  isExternal: false
  name: GetEvent
  nameWithType: Type.GetEvent
  fullName: Type.GetEvent
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetEvents*
  parent: System.Type
  isExternal: false
  name: GetEvents
  nameWithType: Type.GetEvents
  fullName: Type.GetEvents
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetField*
  parent: System.Type
  isExternal: false
  name: GetField
  nameWithType: Type.GetField
  fullName: Type.GetField
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetFields*
  parent: System.Type
  isExternal: false
  name: GetFields
  nameWithType: Type.GetFields
  fullName: Type.GetFields
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetGenericArguments*
  parent: System.Type
  isExternal: false
  name: GetGenericArguments
  nameWithType: Type.GetGenericArguments
  fullName: Type.GetGenericArguments
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetGenericParameterConstraints*
  parent: System.Type
  isExternal: false
  name: GetGenericParameterConstraints
  nameWithType: Type.GetGenericParameterConstraints
  fullName: Type.GetGenericParameterConstraints
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetGenericTypeDefinition*
  parent: System.Type
  isExternal: false
  name: GetGenericTypeDefinition
  nameWithType: Type.GetGenericTypeDefinition
  fullName: Type.GetGenericTypeDefinition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetHashCode*
  parent: System.Type
  isExternal: false
  name: GetHashCode
  nameWithType: Type.GetHashCode
  fullName: Type.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetInterface*
  parent: System.Type
  isExternal: false
  name: GetInterface
  nameWithType: Type.GetInterface
  fullName: Type.GetInterface
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetInterfaceMap*
  parent: System.Type
  isExternal: false
  name: GetInterfaceMap
  nameWithType: Type.GetInterfaceMap
  fullName: Type.GetInterfaceMap
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetInterfaces*
  parent: System.Type
  isExternal: false
  name: GetInterfaces
  nameWithType: Type.GetInterfaces
  fullName: Type.GetInterfaces
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetMember*
  parent: System.Type
  isExternal: false
  name: GetMember
  nameWithType: Type.GetMember
  fullName: Type.GetMember
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetMembers*
  parent: System.Type
  isExternal: false
  name: GetMembers
  nameWithType: Type.GetMembers
  fullName: Type.GetMembers
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetMethod*
  parent: System.Type
  isExternal: false
  name: GetMethod
  nameWithType: Type.GetMethod
  fullName: Type.GetMethod
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetMethodImpl*
  parent: System.Type
  isExternal: false
  name: GetMethodImpl
  nameWithType: Type.GetMethodImpl
  fullName: Type.GetMethodImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetMethods*
  parent: System.Type
  isExternal: false
  name: GetMethods
  nameWithType: Type.GetMethods
  fullName: Type.GetMethods
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetNestedType*
  parent: System.Type
  isExternal: false
  name: GetNestedType
  nameWithType: Type.GetNestedType
  fullName: Type.GetNestedType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetNestedTypes*
  parent: System.Type
  isExternal: false
  name: GetNestedTypes
  nameWithType: Type.GetNestedTypes
  fullName: Type.GetNestedTypes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetProperties*
  parent: System.Type
  isExternal: false
  name: GetProperties
  nameWithType: Type.GetProperties
  fullName: Type.GetProperties
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetProperty*
  parent: System.Type
  isExternal: false
  name: GetProperty
  nameWithType: Type.GetProperty
  fullName: Type.GetProperty
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetPropertyImpl*
  parent: System.Type
  isExternal: false
  name: GetPropertyImpl
  nameWithType: Type.GetPropertyImpl
  fullName: Type.GetPropertyImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetType*
  parent: System.Type
  isExternal: false
  name: GetType
  nameWithType: Type.GetType
  fullName: Type.GetType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetTypeArray*
  parent: System.Type
  isExternal: false
  name: GetTypeArray
  nameWithType: Type.GetTypeArray
  fullName: Type.GetTypeArray
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetTypeCode*
  parent: System.Type
  isExternal: false
  name: GetTypeCode
  nameWithType: Type.GetTypeCode
  fullName: Type.GetTypeCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetTypeCodeImpl*
  parent: System.Type
  isExternal: false
  name: GetTypeCodeImpl
  nameWithType: Type.GetTypeCodeImpl
  fullName: Type.GetTypeCodeImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetTypeFromCLSID*
  parent: System.Type
  isExternal: false
  name: GetTypeFromCLSID
  nameWithType: Type.GetTypeFromCLSID
  fullName: Type.GetTypeFromCLSID
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetTypeFromHandle*
  parent: System.Type
  isExternal: false
  name: GetTypeFromHandle
  nameWithType: Type.GetTypeFromHandle
  fullName: Type.GetTypeFromHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetTypeFromProgID*
  parent: System.Type
  isExternal: false
  name: GetTypeFromProgID
  nameWithType: Type.GetTypeFromProgID
  fullName: Type.GetTypeFromProgID
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GetTypeHandle*
  parent: System.Type
  isExternal: false
  name: GetTypeHandle
  nameWithType: Type.GetTypeHandle
  fullName: Type.GetTypeHandle
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.GUID*
  parent: System.Type
  isExternal: false
  name: GUID
  nameWithType: Type.GUID
  fullName: Type.GUID
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.HasElementType*
  parent: System.Type
  isExternal: false
  name: HasElementType
  nameWithType: Type.HasElementType
  fullName: Type.HasElementType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.HasElementTypeImpl*
  parent: System.Type
  isExternal: false
  name: HasElementTypeImpl
  nameWithType: Type.HasElementTypeImpl
  fullName: Type.HasElementTypeImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.InvokeMember*
  parent: System.Type
  isExternal: false
  name: InvokeMember
  nameWithType: Type.InvokeMember
  fullName: Type.InvokeMember
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsAbstract*
  parent: System.Type
  isExternal: false
  name: IsAbstract
  nameWithType: Type.IsAbstract
  fullName: Type.IsAbstract
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsAnsiClass*
  parent: System.Type
  isExternal: false
  name: IsAnsiClass
  nameWithType: Type.IsAnsiClass
  fullName: Type.IsAnsiClass
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsArray*
  parent: System.Type
  isExternal: false
  name: IsArray
  nameWithType: Type.IsArray
  fullName: Type.IsArray
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsArrayImpl*
  parent: System.Type
  isExternal: false
  name: IsArrayImpl
  nameWithType: Type.IsArrayImpl
  fullName: Type.IsArrayImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsAssignableFrom*
  parent: System.Type
  isExternal: false
  name: IsAssignableFrom
  nameWithType: Type.IsAssignableFrom
  fullName: Type.IsAssignableFrom
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsAutoClass*
  parent: System.Type
  isExternal: false
  name: IsAutoClass
  nameWithType: Type.IsAutoClass
  fullName: Type.IsAutoClass
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsAutoLayout*
  parent: System.Type
  isExternal: false
  name: IsAutoLayout
  nameWithType: Type.IsAutoLayout
  fullName: Type.IsAutoLayout
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsByRef*
  parent: System.Type
  isExternal: false
  name: IsByRef
  nameWithType: Type.IsByRef
  fullName: Type.IsByRef
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsByRefImpl*
  parent: System.Type
  isExternal: false
  name: IsByRefImpl
  nameWithType: Type.IsByRefImpl
  fullName: Type.IsByRefImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsClass*
  parent: System.Type
  isExternal: false
  name: IsClass
  nameWithType: Type.IsClass
  fullName: Type.IsClass
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsCOMObject*
  parent: System.Type
  isExternal: false
  name: IsCOMObject
  nameWithType: Type.IsCOMObject
  fullName: Type.IsCOMObject
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsCOMObjectImpl*
  parent: System.Type
  isExternal: false
  name: IsCOMObjectImpl
  nameWithType: Type.IsCOMObjectImpl
  fullName: Type.IsCOMObjectImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsConstructedGenericType*
  parent: System.Type
  isExternal: false
  name: IsConstructedGenericType
  nameWithType: Type.IsConstructedGenericType
  fullName: Type.IsConstructedGenericType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsContextful*
  parent: System.Type
  isExternal: false
  name: IsContextful
  nameWithType: Type.IsContextful
  fullName: Type.IsContextful
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsContextfulImpl*
  parent: System.Type
  isExternal: false
  name: IsContextfulImpl
  nameWithType: Type.IsContextfulImpl
  fullName: Type.IsContextfulImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsEnum*
  parent: System.Type
  isExternal: false
  name: IsEnum
  nameWithType: Type.IsEnum
  fullName: Type.IsEnum
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsEnumDefined*
  parent: System.Type
  isExternal: false
  name: IsEnumDefined
  nameWithType: Type.IsEnumDefined
  fullName: Type.IsEnumDefined
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsEquivalentTo*
  parent: System.Type
  isExternal: false
  name: IsEquivalentTo
  nameWithType: Type.IsEquivalentTo
  fullName: Type.IsEquivalentTo
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsExplicitLayout*
  parent: System.Type
  isExternal: false
  name: IsExplicitLayout
  nameWithType: Type.IsExplicitLayout
  fullName: Type.IsExplicitLayout
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsGenericParameter*
  parent: System.Type
  isExternal: false
  name: IsGenericParameter
  nameWithType: Type.IsGenericParameter
  fullName: Type.IsGenericParameter
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsGenericType*
  parent: System.Type
  isExternal: false
  name: IsGenericType
  nameWithType: Type.IsGenericType
  fullName: Type.IsGenericType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsGenericTypeDefinition*
  parent: System.Type
  isExternal: false
  name: IsGenericTypeDefinition
  nameWithType: Type.IsGenericTypeDefinition
  fullName: Type.IsGenericTypeDefinition
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsImport*
  parent: System.Type
  isExternal: false
  name: IsImport
  nameWithType: Type.IsImport
  fullName: Type.IsImport
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsInstanceOfType*
  parent: System.Type
  isExternal: false
  name: IsInstanceOfType
  nameWithType: Type.IsInstanceOfType
  fullName: Type.IsInstanceOfType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsInterface*
  parent: System.Type
  isExternal: false
  name: IsInterface
  nameWithType: Type.IsInterface
  fullName: Type.IsInterface
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsLayoutSequential*
  parent: System.Type
  isExternal: false
  name: IsLayoutSequential
  nameWithType: Type.IsLayoutSequential
  fullName: Type.IsLayoutSequential
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsMarshalByRef*
  parent: System.Type
  isExternal: false
  name: IsMarshalByRef
  nameWithType: Type.IsMarshalByRef
  fullName: Type.IsMarshalByRef
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsMarshalByRefImpl*
  parent: System.Type
  isExternal: false
  name: IsMarshalByRefImpl
  nameWithType: Type.IsMarshalByRefImpl
  fullName: Type.IsMarshalByRefImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNested*
  parent: System.Type
  isExternal: false
  name: IsNested
  nameWithType: Type.IsNested
  fullName: Type.IsNested
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNestedAssembly*
  parent: System.Type
  isExternal: false
  name: IsNestedAssembly
  nameWithType: Type.IsNestedAssembly
  fullName: Type.IsNestedAssembly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNestedFamANDAssem*
  parent: System.Type
  isExternal: false
  name: IsNestedFamANDAssem
  nameWithType: Type.IsNestedFamANDAssem
  fullName: Type.IsNestedFamANDAssem
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNestedFamily*
  parent: System.Type
  isExternal: false
  name: IsNestedFamily
  nameWithType: Type.IsNestedFamily
  fullName: Type.IsNestedFamily
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNestedFamORAssem*
  parent: System.Type
  isExternal: false
  name: IsNestedFamORAssem
  nameWithType: Type.IsNestedFamORAssem
  fullName: Type.IsNestedFamORAssem
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNestedPrivate*
  parent: System.Type
  isExternal: false
  name: IsNestedPrivate
  nameWithType: Type.IsNestedPrivate
  fullName: Type.IsNestedPrivate
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNestedPublic*
  parent: System.Type
  isExternal: false
  name: IsNestedPublic
  nameWithType: Type.IsNestedPublic
  fullName: Type.IsNestedPublic
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsNotPublic*
  parent: System.Type
  isExternal: false
  name: IsNotPublic
  nameWithType: Type.IsNotPublic
  fullName: Type.IsNotPublic
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsPointer*
  parent: System.Type
  isExternal: false
  name: IsPointer
  nameWithType: Type.IsPointer
  fullName: Type.IsPointer
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsPointerImpl*
  parent: System.Type
  isExternal: false
  name: IsPointerImpl
  nameWithType: Type.IsPointerImpl
  fullName: Type.IsPointerImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsPrimitive*
  parent: System.Type
  isExternal: false
  name: IsPrimitive
  nameWithType: Type.IsPrimitive
  fullName: Type.IsPrimitive
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsPrimitiveImpl*
  parent: System.Type
  isExternal: false
  name: IsPrimitiveImpl
  nameWithType: Type.IsPrimitiveImpl
  fullName: Type.IsPrimitiveImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsPublic*
  parent: System.Type
  isExternal: false
  name: IsPublic
  nameWithType: Type.IsPublic
  fullName: Type.IsPublic
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSealed*
  parent: System.Type
  isExternal: false
  name: IsSealed
  nameWithType: Type.IsSealed
  fullName: Type.IsSealed
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSecurityCritical*
  parent: System.Type
  isExternal: false
  name: IsSecurityCritical
  nameWithType: Type.IsSecurityCritical
  fullName: Type.IsSecurityCritical
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSecuritySafeCritical*
  parent: System.Type
  isExternal: false
  name: IsSecuritySafeCritical
  nameWithType: Type.IsSecuritySafeCritical
  fullName: Type.IsSecuritySafeCritical
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSecurityTransparent*
  parent: System.Type
  isExternal: false
  name: IsSecurityTransparent
  nameWithType: Type.IsSecurityTransparent
  fullName: Type.IsSecurityTransparent
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSerializable*
  parent: System.Type
  isExternal: false
  name: IsSerializable
  nameWithType: Type.IsSerializable
  fullName: Type.IsSerializable
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSpecialName*
  parent: System.Type
  isExternal: false
  name: IsSpecialName
  nameWithType: Type.IsSpecialName
  fullName: Type.IsSpecialName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSubclassOf*
  parent: System.Type
  isExternal: false
  name: IsSubclassOf
  nameWithType: Type.IsSubclassOf
  fullName: Type.IsSubclassOf
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsSZArray*
  parent: System.Type
  isExternal: false
  name: IsSZArray
  nameWithType: Type.IsSZArray
  fullName: Type.IsSZArray
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsTypeDefinition*
  parent: System.Type
  isExternal: false
  name: IsTypeDefinition
  nameWithType: Type.IsTypeDefinition
  fullName: Type.IsTypeDefinition
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsUnicodeClass*
  parent: System.Type
  isExternal: false
  name: IsUnicodeClass
  nameWithType: Type.IsUnicodeClass
  fullName: Type.IsUnicodeClass
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsValueType*
  parent: System.Type
  isExternal: false
  name: IsValueType
  nameWithType: Type.IsValueType
  fullName: Type.IsValueType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsValueTypeImpl*
  parent: System.Type
  isExternal: false
  name: IsValueTypeImpl
  nameWithType: Type.IsValueTypeImpl
  fullName: Type.IsValueTypeImpl
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsVariableBoundArray*
  parent: System.Type
  isExternal: false
  name: IsVariableBoundArray
  nameWithType: Type.IsVariableBoundArray
  fullName: Type.IsVariableBoundArray
  monikers:
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.IsVisible*
  parent: System.Type
  isExternal: false
  name: IsVisible
  nameWithType: Type.IsVisible
  fullName: Type.IsVisible
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.MakeArrayType*
  parent: System.Type
  isExternal: false
  name: MakeArrayType
  nameWithType: Type.MakeArrayType
  fullName: Type.MakeArrayType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.MakeByRefType*
  parent: System.Type
  isExternal: false
  name: MakeByRefType
  nameWithType: Type.MakeByRefType
  fullName: Type.MakeByRefType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.MakeGenericType*
  parent: System.Type
  isExternal: false
  name: MakeGenericType
  nameWithType: Type.MakeGenericType
  fullName: Type.MakeGenericType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.MakePointerType*
  parent: System.Type
  isExternal: false
  name: MakePointerType
  nameWithType: Type.MakePointerType
  fullName: Type.MakePointerType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.MemberType*
  parent: System.Type
  isExternal: false
  name: MemberType
  nameWithType: Type.MemberType
  fullName: Type.MemberType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.Module*
  parent: System.Type
  isExternal: false
  name: Module
  nameWithType: Type.Module
  fullName: Type.Module
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.Name*
  parent: System.Type
  isExternal: false
  name: Name
  nameWithType: Type.Name
  fullName: Type.Name
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.Namespace*
  parent: System.Type
  isExternal: false
  name: Namespace
  nameWithType: Type.Namespace
  fullName: Type.Namespace
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.op_Equality*
  parent: System.Type
  isExternal: false
  name: op_Equality
  nameWithType: Type.op_Equality
  fullName: Type.op_Equality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.op_Inequality*
  parent: System.Type
  isExternal: false
  name: op_Inequality
  nameWithType: Type.op_Inequality
  fullName: Type.op_Inequality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.ReflectedType*
  parent: System.Type
  isExternal: false
  name: ReflectedType
  nameWithType: Type.ReflectedType
  fullName: Type.ReflectedType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.ReflectionOnlyGetType*
  parent: System.Type
  isExternal: false
  name: ReflectionOnlyGetType
  nameWithType: Type.ReflectionOnlyGetType
  fullName: Type.ReflectionOnlyGetType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.StructLayoutAttribute*
  parent: System.Type
  isExternal: false
  name: StructLayoutAttribute
  nameWithType: Type.StructLayoutAttribute
  fullName: Type.StructLayoutAttribute
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.ToString*
  parent: System.Type
  isExternal: false
  name: ToString
  nameWithType: Type.ToString
  fullName: Type.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.TypeHandle*
  parent: System.Type
  isExternal: false
  name: TypeHandle
  nameWithType: Type.TypeHandle
  fullName: Type.TypeHandle
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.TypeInitializer*
  parent: System.Type
  isExternal: false
  name: TypeInitializer
  nameWithType: Type.TypeInitializer
  fullName: Type.TypeInitializer
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.UnderlyingSystemType*
  parent: System.Type
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: Type.UnderlyingSystemType
  fullName: Type.UnderlyingSystemType
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.System#Runtime#InteropServices#_Type#GetIDsOfNames*
  parent: System.Type
  isExternal: false
  name: System.Runtime.InteropServices._Type.GetIDsOfNames
  nameWithType: Type.System.Runtime.InteropServices._Type.GetIDsOfNames
  fullName: Type.System.Runtime.InteropServices._Type.GetIDsOfNames
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfo*
  parent: System.Type
  isExternal: false
  name: System.Runtime.InteropServices._Type.GetTypeInfo
  nameWithType: Type.System.Runtime.InteropServices._Type.GetTypeInfo
  fullName: Type.System.Runtime.InteropServices._Type.GetTypeInfo
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.System#Runtime#InteropServices#_Type#GetTypeInfoCount*
  parent: System.Type
  isExternal: false
  name: System.Runtime.InteropServices._Type.GetTypeInfoCount
  nameWithType: Type.System.Runtime.InteropServices._Type.GetTypeInfoCount
  fullName: Type.System.Runtime.InteropServices._Type.GetTypeInfoCount
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Type.System#Runtime#InteropServices#_Type#Invoke*
  parent: System.Type
  isExternal: false
  name: System.Runtime.InteropServices._Type.Invoke
  nameWithType: Type.System.Runtime.InteropServices._Type.Invoke
  fullName: Type.System.Runtime.InteropServices._Type.Invoke
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Type.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)
  parent: System.Reflection.IntrospectionExtensions
  isExternal: false
  name: GetTypeInfo(Type)
  nameWithType: IntrospectionExtensions.GetTypeInfo(Type)
  fullName: IntrospectionExtensions.GetTypeInfo(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeEvent(Type, String)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvent(Type, String)
  fullName: RuntimeReflectionExtensions.GetRuntimeEvent(Type, String)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeEvents(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvents(Type)
  fullName: RuntimeReflectionExtensions.GetRuntimeEvents(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeField(Type, String)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeField(Type, String)
  fullName: RuntimeReflectionExtensions.GetRuntimeField(Type, String)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeFields(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeFields(Type)
  fullName: RuntimeReflectionExtensions.GetRuntimeFields(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeMethod(Type, String, Type[])
  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type[])
  fullName: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type[])
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeMethods(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethods(Type)
  fullName: RuntimeReflectionExtensions.GetRuntimeMethods(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeProperties(Type)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperties(Type)
  fullName: RuntimeReflectionExtensions.GetRuntimeProperties(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  parent: System.Reflection.RuntimeReflectionExtensions
  isExternal: false
  name: GetRuntimeProperty(Type, String)
  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperty(Type, String)
  fullName: RuntimeReflectionExtensions.GetRuntimeProperty(Type, String)
- uid: System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructor(Type, Type[])
  nameWithType: TypeExtensions.GetConstructor(Type, Type[])
  fullName: TypeExtensions.GetConstructor(Type, Type[])
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructors(Type)
  nameWithType: TypeExtensions.GetConstructors(Type)
  fullName: TypeExtensions.GetConstructors(Type)
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetConstructors(Type, BindingFlags)
  nameWithType: TypeExtensions.GetConstructors(Type, BindingFlags)
  fullName: TypeExtensions.GetConstructors(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetDefaultMembers(Type)
  nameWithType: TypeExtensions.GetDefaultMembers(Type)
  fullName: TypeExtensions.GetDefaultMembers(Type)
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvent(Type, String)
  nameWithType: TypeExtensions.GetEvent(Type, String)
  fullName: TypeExtensions.GetEvent(Type, String)
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvent(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetEvent(Type, String, BindingFlags)
  fullName: TypeExtensions.GetEvent(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvents(Type)
  nameWithType: TypeExtensions.GetEvents(Type)
  fullName: TypeExtensions.GetEvents(Type)
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetEvents(Type, BindingFlags)
  nameWithType: TypeExtensions.GetEvents(Type, BindingFlags)
  fullName: TypeExtensions.GetEvents(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetField(Type, String)
  nameWithType: TypeExtensions.GetField(Type, String)
  fullName: TypeExtensions.GetField(Type, String)
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetField(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetField(Type, String, BindingFlags)
  fullName: TypeExtensions.GetField(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetFields(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetFields(Type)
  nameWithType: TypeExtensions.GetFields(Type)
  fullName: TypeExtensions.GetFields(Type)
- uid: System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetFields(Type, BindingFlags)
  nameWithType: TypeExtensions.GetFields(Type, BindingFlags)
  fullName: TypeExtensions.GetFields(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetGenericArguments(Type)
  nameWithType: TypeExtensions.GetGenericArguments(Type)
  fullName: TypeExtensions.GetGenericArguments(Type)
- uid: System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetInterfaces(Type)
  nameWithType: TypeExtensions.GetInterfaces(Type)
  fullName: TypeExtensions.GetInterfaces(Type)
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMember(Type, String)
  nameWithType: TypeExtensions.GetMember(Type, String)
  fullName: TypeExtensions.GetMember(Type, String)
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMember(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMember(Type, String, BindingFlags)
  fullName: TypeExtensions.GetMember(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMembers(Type)
  nameWithType: TypeExtensions.GetMembers(Type)
  fullName: TypeExtensions.GetMembers(Type)
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMembers(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMembers(Type, BindingFlags)
  fullName: TypeExtensions.GetMembers(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethod(Type, String)
  nameWithType: TypeExtensions.GetMethod(Type, String)
  fullName: TypeExtensions.GetMethod(Type, String)
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethod(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMethod(Type, String, BindingFlags)
  fullName: TypeExtensions.GetMethod(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethod(Type, String, Type[])
  nameWithType: TypeExtensions.GetMethod(Type, String, Type[])
  fullName: TypeExtensions.GetMethod(Type, String, Type[])
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethods(Type)
  nameWithType: TypeExtensions.GetMethods(Type)
  fullName: TypeExtensions.GetMethods(Type)
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetMethods(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMethods(Type, BindingFlags)
  fullName: TypeExtensions.GetMethods(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetNestedType(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetNestedType(Type, String, BindingFlags)
  fullName: TypeExtensions.GetNestedType(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetNestedTypes(Type, BindingFlags)
  nameWithType: TypeExtensions.GetNestedTypes(Type, BindingFlags)
  fullName: TypeExtensions.GetNestedTypes(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperties(Type)
  nameWithType: TypeExtensions.GetProperties(Type)
  fullName: TypeExtensions.GetProperties(Type)
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperties(Type, BindingFlags)
  nameWithType: TypeExtensions.GetProperties(Type, BindingFlags)
  fullName: TypeExtensions.GetProperties(Type, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String)
  nameWithType: TypeExtensions.GetProperty(Type, String)
  fullName: TypeExtensions.GetProperty(Type, String)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetProperty(Type, String, BindingFlags)
  fullName: TypeExtensions.GetProperty(Type, String, BindingFlags)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String, Type)
  nameWithType: TypeExtensions.GetProperty(Type, String, Type)
  fullName: TypeExtensions.GetProperty(Type, String, Type)
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: GetProperty(Type, String, Type, Type[])
  nameWithType: TypeExtensions.GetProperty(Type, String, Type, Type[])
  fullName: TypeExtensions.GetProperty(Type, String, Type, Type[])
- uid: System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: IsAssignableFrom(Type, Type)
  nameWithType: TypeExtensions.IsAssignableFrom(Type, Type)
  fullName: TypeExtensions.IsAssignableFrom(Type, Type)
- uid: System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  parent: System.Reflection.TypeExtensions
  isExternal: false
  name: IsInstanceOfType(Type, Object)
  nameWithType: TypeExtensions.IsInstanceOfType(Type, Object)
  fullName: TypeExtensions.IsInstanceOfType(Type, Object)
- uid: System.Reflection.IReflect
  parent: System.Reflection
  isExternal: false
  name: IReflect
  nameWithType: IReflect
  fullName: System.Reflection.IReflect
- uid: System.Runtime.InteropServices._Type
  parent: System.Runtime.InteropServices
  isExternal: false
  name: _Type
  nameWithType: _Type
  fullName: System.Runtime.InteropServices._Type
