{"nodes":[{"content":"Defines the valid calling conventions for a method.","nodes":[{"pos":[0,51],"content":"Defines the valid calling conventions for a method.","nodes":[{"content":"Defines the valid calling conventions for a method.","pos":[0,51]}]}],"pos":[697,749],"yaml":true},{"content":"The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods. It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.","nodes":[{"pos":[0,283],"content":"The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods. It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.","nodes":[{"content":"The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods. It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.","pos":[0,283],"nodes":[{"content":"The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods.","pos":[0,121]},{"content":"It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.","pos":[122,283]}]}]}],"pos":[760,1044],"yaml":true,"extradata":"MT"},{"content":"Specifies that either the `Standard` or the `VarArgs` calling convention may be used.","nodes":[{"pos":[0,85],"content":"Specifies that either the <ph id=\"ph1\">`Standard`</ph> or the <ph id=\"ph2\">`VarArgs`</ph> calling convention may be used.","source":"Specifies that either the `Standard` or the `VarArgs` calling convention may be used."}],"pos":[3243,3329],"yaml":true},{"content":"Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If `ExplicitThis` is set, `HasThis` must also be set. The first argument passed to the called method is still a `this` pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the `this` pointer is explicitly stored into its metadata signature.","nodes":[{"pos":[0,442],"content":"Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If `ExplicitThis` is set, `HasThis` must also be set. The first argument passed to the called method is still a `this` pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the `this` pointer is explicitly stored into its metadata signature.","nodes":[{"content":"Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method).","pos":[0,137]},{"content":"If <ph id=\"ph1\">`ExplicitThis`</ph> is set, <ph id=\"ph2\">`HasThis`</ph> must also be set.","pos":[138,191],"source":" If `ExplicitThis` is set, `HasThis` must also be set."},{"content":"The first argument passed to the called method is still a <ph id=\"ph1\">`this`</ph> pointer, but the type of the first argument is now unknown.","pos":[192,316],"source":" The first argument passed to the called method is still a `this` pointer, but the type of the first argument is now unknown."},{"content":"Therefore, a token that describes the type (or class) of the <ph id=\"ph1\">`this`</ph> pointer is explicitly stored into its metadata signature.","pos":[317,442],"source":" Therefore, a token that describes the type (or class) of the `this` pointer is explicitly stored into its metadata signature."}]}],"pos":[4868,5311],"yaml":true},{"content":"Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the `this` pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.","nodes":[{"pos":[0,342],"content":"Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the `this` pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.","nodes":[{"content":"Specifies an instance or virtual method (not a static method).","pos":[0,62]},{"content":"At run-time, the called method is passed a pointer to the target object as its first argument (the <ph id=\"ph1\">`this`</ph> pointer).","pos":[63,178],"source":" At run-time, the called method is passed a pointer to the target object as its first argument (the `this` pointer)."},{"content":"The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.","pos":[179,342]}]}],"pos":[6829,7172],"yaml":true},{"content":"Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use `HasThis`.","nodes":[{"pos":[0,181],"content":"Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use `HasThis`.","nodes":[{"content":"Specifies the default calling convention as determined by the common language runtime.","pos":[0,86]},{"content":"Use this calling convention for static methods.","pos":[87,134]},{"content":"For instance or virtual methods use <ph id=\"ph1\">`HasThis`</ph>.","pos":[135,181],"source":" For instance or virtual methods use `HasThis`."}]}],"pos":[8691,8873],"yaml":true},{"content":"Specifies the calling convention for methods with variable arguments.","nodes":[{"pos":[0,69],"content":"Specifies the calling convention for methods with variable arguments.","nodes":[{"content":"Specifies the calling convention for methods with variable arguments.","pos":[0,69]}]}],"pos":[10387,10457],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.CallingConventions\n  commentId: T:System.Reflection.CallingConventions\n  id: CallingConventions\n  children:\n  - System.Reflection.CallingConventions.Any\n  - System.Reflection.CallingConventions.ExplicitThis\n  - System.Reflection.CallingConventions.HasThis\n  - System.Reflection.CallingConventions.Standard\n  - System.Reflection.CallingConventions.VarArgs\n  langs:\n  - csharp\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n  type: Enum\n  assemblies:\n  - System.Reflection.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Defines the valid calling conventions for a method.\n  remarks: The native calling convention is the set of rules governing the order and layout of arguments passed to compiled methods. It also governs how to pass the return value, what registers to use for arguments, and whether the called or the calling method removes arguments from the stack.\n  example:\n  - >-\n    [!code-cpp[Type_GetConstructor3#1](~/samples/snippets/cpp/VS_Snippets_CLR/Type_GetConstructor3/CPP/type_getconstructor3.cpp#1)]\n     [!code-csharp[Type_GetConstructor3#1](~/samples/snippets/csharp/VS_Snippets_CLR/Type_GetConstructor3/CS/type_getconstructor3.cs#1)]\n     [!code-vb[Type_GetConstructor3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Type_GetConstructor3/VB/type_getconstructor3.vb#1)]\n  syntax:\n    content: >-\n      [System.Flags]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum CallingConventions\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.FlagsAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CallingConventions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.CallingConventions.Any\n  commentId: F:System.Reflection.CallingConventions.Any\n  id: Any\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  name: Any\n  nameWithType: CallingConventions.Any\n  fullName: CallingConventions.Any\n  type: Field\n  assemblies:\n  - System.Reflection.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Specifies that either the `Standard` or the `VarArgs` calling convention may be used.\n  syntax:\n    content: Any\n    return:\n      type: System.Reflection.CallingConventions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CallingConventions.xml\n- uid: System.Reflection.CallingConventions.ExplicitThis\n  commentId: F:System.Reflection.CallingConventions.ExplicitThis\n  id: ExplicitThis\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  name: ExplicitThis\n  nameWithType: CallingConventions.ExplicitThis\n  fullName: CallingConventions.ExplicitThis\n  type: Field\n  assemblies:\n  - System.Reflection.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Specifies that the signature is a function-pointer signature, representing a call to an instance or virtual method (not a static method). If `ExplicitThis` is set, `HasThis` must also be set. The first argument passed to the called method is still a `this` pointer, but the type of the first argument is now unknown. Therefore, a token that describes the type (or class) of the `this` pointer is explicitly stored into its metadata signature.\n  syntax:\n    content: ExplicitThis\n    return:\n      type: System.Reflection.CallingConventions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CallingConventions.xml\n- uid: System.Reflection.CallingConventions.HasThis\n  commentId: F:System.Reflection.CallingConventions.HasThis\n  id: HasThis\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  name: HasThis\n  nameWithType: CallingConventions.HasThis\n  fullName: CallingConventions.HasThis\n  type: Field\n  assemblies:\n  - System.Reflection.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Specifies an instance or virtual method (not a static method). At run-time, the called method is passed a pointer to the target object as its first argument (the `this` pointer). The signature stored in metadata does not include the type of this first argument, because the method is known and its owner class can be discovered from metadata.\n  syntax:\n    content: HasThis\n    return:\n      type: System.Reflection.CallingConventions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CallingConventions.xml\n- uid: System.Reflection.CallingConventions.Standard\n  commentId: F:System.Reflection.CallingConventions.Standard\n  id: Standard\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  name: Standard\n  nameWithType: CallingConventions.Standard\n  fullName: CallingConventions.Standard\n  type: Field\n  assemblies:\n  - System.Reflection.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Specifies the default calling convention as determined by the common language runtime. Use this calling convention for static methods. For instance or virtual methods use `HasThis`.\n  syntax:\n    content: Standard\n    return:\n      type: System.Reflection.CallingConventions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CallingConventions.xml\n- uid: System.Reflection.CallingConventions.VarArgs\n  commentId: F:System.Reflection.CallingConventions.VarArgs\n  id: VarArgs\n  parent: System.Reflection.CallingConventions\n  langs:\n  - csharp\n  name: VarArgs\n  nameWithType: CallingConventions.VarArgs\n  fullName: CallingConventions.VarArgs\n  type: Field\n  assemblies:\n  - System.Reflection.Primitives\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Specifies the calling convention for methods with variable arguments.\n  syntax:\n    content: VarArgs\n    return:\n      type: System.Reflection.CallingConventions\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/CallingConventions.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Reflection.CallingConventions.Any\n  parent: System.Reflection.CallingConventions\n  isExternal: false\n  name: Any\n  nameWithType: CallingConventions.Any\n  fullName: CallingConventions.Any\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Reflection.CallingConventions.ExplicitThis\n  parent: System.Reflection.CallingConventions\n  isExternal: false\n  name: ExplicitThis\n  nameWithType: CallingConventions.ExplicitThis\n  fullName: CallingConventions.ExplicitThis\n- uid: System.Reflection.CallingConventions.HasThis\n  parent: System.Reflection.CallingConventions\n  isExternal: false\n  name: HasThis\n  nameWithType: CallingConventions.HasThis\n  fullName: CallingConventions.HasThis\n- uid: System.Reflection.CallingConventions.Standard\n  parent: System.Reflection.CallingConventions\n  isExternal: false\n  name: Standard\n  nameWithType: CallingConventions.Standard\n  fullName: CallingConventions.Standard\n- uid: System.Reflection.CallingConventions.VarArgs\n  parent: System.Reflection.CallingConventions\n  isExternal: false\n  name: VarArgs\n  nameWithType: CallingConventions.VarArgs\n  fullName: CallingConventions.VarArgs\n"}