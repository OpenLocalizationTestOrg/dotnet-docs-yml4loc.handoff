{"nodes":[{"content":"Provides an interface that can manage design-time serialization.","nodes":[{"pos":[0,64],"content":"Provides an interface that can manage design-time serialization.","nodes":[{"content":"Provides an interface that can manage design-time serialization.","pos":[0,64]}]}],"pos":[2128,2193],"yaml":true},{"content":"A designer can utilize <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> to access services useful to managing design-time serialization processes. For example, a class that implements the designer serialization manager can use this interface to create objects, look up types, identify objects, and customize the serialization of particular types.","nodes":[{"pos":[0,377],"content":"A designer can utilize <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> to access services useful to managing design-time serialization processes. For example, a class that implements the designer serialization manager can use this interface to create objects, look up types, identify objects, and customize the serialization of particular types.","nodes":[{"content":"A designer can utilize <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> to access services useful to managing design-time serialization processes. For example, a class that implements the designer serialization manager can use this interface to create objects, look up types, identify objects, and customize the serialization of particular types.","pos":[0,377],"nodes":[{"content":"A designer can utilize <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;</ph> to access services useful to managing design-time serialization processes.","pos":[0,177],"source":"A designer can utilize <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> to access services useful to managing design-time serialization processes."},{"content":"For example, a class that implements the designer serialization manager can use this interface to create objects, look up types, identify objects, and customize the serialization of particular types.","pos":[178,377]}]}]}],"pos":[2204,2582],"yaml":true,"extradata":"MT"},{"content":"Adds the specified serialization provider to the serialization manager.","nodes":[{"pos":[0,71],"content":"Adds the specified serialization provider to the serialization manager.","nodes":[{"content":"Adds the specified serialization provider to the serialization manager.","pos":[0,71]}]}],"pos":[5500,5572],"yaml":true},{"content":"This method adds a custom serialization provider to the serialization manager. Serialization providers can provide custom serializers for a particular type of object or set of types of objects. During serialization, each custom serialization provider is queried to return a serializer for a specific data type, if it can provide one. The serialization manager uses the custom serializer provided by this method before using the default serializer for a particular type.","nodes":[{"pos":[0,469],"content":"This method adds a custom serialization provider to the serialization manager. Serialization providers can provide custom serializers for a particular type of object or set of types of objects. During serialization, each custom serialization provider is queried to return a serializer for a specific data type, if it can provide one. The serialization manager uses the custom serializer provided by this method before using the default serializer for a particular type.","nodes":[{"content":"This method adds a custom serialization provider to the serialization manager. Serialization providers can provide custom serializers for a particular type of object or set of types of objects. During serialization, each custom serialization provider is queried to return a serializer for a specific data type, if it can provide one. The serialization manager uses the custom serializer provided by this method before using the default serializer for a particular type.","pos":[0,469],"nodes":[{"content":"This method adds a custom serialization provider to the serialization manager.","pos":[0,78]},{"content":"Serialization providers can provide custom serializers for a particular type of object or set of types of objects.","pos":[79,193]},{"content":"During serialization, each custom serialization provider is queried to return a serializer for a specific data type, if it can provide one.","pos":[194,333]},{"content":"The serialization manager uses the custom serializer provided by this method before using the default serializer for a particular type.","pos":[334,469]}]}]}],"pos":[5583,6053],"yaml":true,"extradata":"MT"},{"content":"The serialization provider to add.","nodes":[{"pos":[0,34],"content":"The serialization provider to add.","nodes":[{"content":"The serialization provider to add.","pos":[0,34]}]}],"pos":[6339,6374],"yaml":true},{"content":"Gets a stack-based, user-defined storage area that is useful for communication between serializers.","nodes":[{"pos":[0,99],"content":"Gets a stack-based, user-defined storage area that is useful for communication between serializers.","nodes":[{"content":"Gets a stack-based, user-defined storage area that is useful for communication between serializers.","pos":[0,99]}]}],"pos":[7856,7956],"yaml":true},{"content":"This storage area provides communication of object context information to serializers. Context information about objects that are being serialized can be stored and accessed through this <xref:System.ComponentModel.Design.Serialization.ContextStack>.","nodes":[{"pos":[0,250],"content":"This storage area provides communication of object context information to serializers. Context information about objects that are being serialized can be stored and accessed through this <xref:System.ComponentModel.Design.Serialization.ContextStack>.","nodes":[{"content":"This storage area provides communication of object context information to serializers. Context information about objects that are being serialized can be stored and accessed through this <xref:System.ComponentModel.Design.Serialization.ContextStack>.","pos":[0,250],"nodes":[{"content":"This storage area provides communication of object context information to serializers.","pos":[0,86]},{"content":"Context information about objects that are being serialized can be stored and accessed through this <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.ContextStack&gt;</ph>.","pos":[87,250],"source":" Context information about objects that are being serialized can be stored and accessed through this <xref:System.ComponentModel.Design.Serialization.ContextStack>."}]}]}],"pos":[7967,8218],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ComponentModel.Design.Serialization.ContextStack\"></xref> that stores data.","nodes":[{"pos":[0,96],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.ContextStack\"&gt;&lt;/xref&gt;</ph> that stores data.","source":"A <xref href=\"System.ComponentModel.Design.Serialization.ContextStack\"></xref> that stores data."}],"pos":[8420,8517],"yaml":true},{"content":"Creates an instance of the specified type and adds it to a collection of named instances.","nodes":[{"pos":[0,89],"content":"Creates an instance of the specified type and adds it to a collection of named instances.","nodes":[{"content":"Creates an instance of the specified type and adds it to a collection of named instances.","pos":[0,89]}]}],"pos":[10349,10439],"yaml":true},{"content":"Objects that implement <xref:System.ComponentModel.IComponent> are added to the design-time container if the `addToContainer` parameter is `true`.","nodes":[{"pos":[0,146],"content":"Objects that implement <ph id=\"ph1\">&lt;xref:System.ComponentModel.IComponent&gt;</ph> are added to the design-time container if the <ph id=\"ph2\">`addToContainer`</ph> parameter is <ph id=\"ph3\">`true`</ph>.","source":"Objects that implement <xref:System.ComponentModel.IComponent> are added to the design-time container if the `addToContainer` parameter is `true`."}],"pos":[10450,10597],"yaml":true,"extradata":"MT"},{"content":"The data type to create.","nodes":[{"pos":[0,24],"content":"The data type to create.","nodes":[{"content":"The data type to create.","pos":[0,24]}]}],"pos":[10812,10837],"yaml":true},{"content":"The arguments to pass to the constructor for this type.","nodes":[{"pos":[0,55],"content":"The arguments to pass to the constructor for this type.","nodes":[{"content":"The arguments to pass to the constructor for this type.","pos":[0,55]}]}],"pos":[10919,10975],"yaml":true},{"content":"The name of the object. This name can be used to access the object later through <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\"></xref>. If `null` is passed, the object is still created but cannot be accessed by name.","nodes":[{"pos":[0,283],"content":"The name of the object. This name can be used to access the object later through <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\"></xref>. If `null` is passed, the object is still created but cannot be accessed by name.","nodes":[{"content":"The name of the object.","pos":[0,23]},{"content":"This name can be used to access the object later through <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\"&gt;&lt;/xref&gt;</ph>.","pos":[24,202],"source":" This name can be used to access the object later through <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\"></xref>."},{"content":"If <ph id=\"ph1\">`null`</ph> is passed, the object is still created but cannot be accessed by name.","pos":[203,283],"source":" If `null` is passed, the object is still created but cannot be accessed by name."}]}],"pos":[11035,11319],"yaml":true},{"content":"If `true`, this object is added to the design container. The object must implement <xref href=\"System.ComponentModel.IComponent\"></xref> for this to have any effect.","nodes":[{"pos":[0,165],"content":"If `true`, this object is added to the design container. The object must implement <xref href=\"System.ComponentModel.IComponent\"></xref> for this to have any effect.","nodes":[{"content":"If <ph id=\"ph1\">`true`</ph>, this object is added to the design container.","pos":[0,56],"source":"If `true`, this object is added to the design container."},{"content":"The object must implement <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.IComponent\"&gt;&lt;/xref&gt;</ph> for this to have any effect.","pos":[57,165],"source":" The object must implement <xref href=\"System.ComponentModel.IComponent\"></xref> for this to have any effect."}]}],"pos":[11390,11556],"yaml":true},{"content":"The newly created object instance.","nodes":[{"pos":[0,34],"content":"The newly created object instance.","nodes":[{"content":"The newly created object instance.","pos":[0,34]}]}],"pos":[11613,11648],"yaml":true},{"content":"Gets an instance of a created object of the specified name, or `null` if that object does not exist.","nodes":[{"pos":[0,100],"content":"Gets an instance of a created object of the specified name, or <ph id=\"ph1\">`null`</ph> if that object does not exist.","source":"Gets an instance of a created object of the specified name, or `null` if that object does not exist."}],"pos":[13211,13312],"yaml":true},{"content":"The name of the object to retrieve must have been set through a prior call to <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>.","nodes":[{"pos":[0,176],"content":"The name of the object to retrieve must have been set through a prior call to <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>.","nodes":[{"content":"The name of the object to retrieve must have been set through a prior call to <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;</ph>.","pos":[0,176],"source":"The name of the object to retrieve must have been set through a prior call to <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>."}]}],"pos":[13323,13500],"yaml":true,"extradata":"MT"},{"content":"The name of the object to retrieve.","nodes":[{"pos":[0,35],"content":"The name of the object to retrieve.","nodes":[{"content":"The name of the object to retrieve.","pos":[0,35]}]}],"pos":[13640,13676],"yaml":true},{"content":"An instance of the object with the given name, or `null` if no object by that name can be found.","nodes":[{"pos":[0,96],"content":"An instance of the object with the given name, or <ph id=\"ph1\">`null`</ph> if no object by that name can be found.","source":"An instance of the object with the given name, or `null` if no object by that name can be found."}],"pos":[13733,13830],"yaml":true},{"content":"Gets the name of the specified object, or `null` if the object has no name.","nodes":[{"pos":[0,75],"content":"Gets the name of the specified object, or <ph id=\"ph1\">`null`</ph> if the object has no name.","source":"Gets the name of the specified object, or `null` if the object has no name."}],"pos":[15366,15442],"yaml":true},{"content":"The object to retrieve the name for.","nodes":[{"pos":[0,36],"content":"The object to retrieve the name for.","nodes":[{"content":"The object to retrieve the name for.","pos":[0,36]}]}],"pos":[15580,15617],"yaml":true},{"content":"The name of the object, or `null` if the object is unnamed.","nodes":[{"pos":[0,59],"content":"The name of the object, or <ph id=\"ph1\">`null`</ph> if the object is unnamed.","source":"The name of the object, or `null` if the object is unnamed."}],"pos":[15674,15734],"yaml":true},{"content":"Gets a serializer of the requested type for the specified object type.","nodes":[{"pos":[0,70],"content":"Gets a serializer of the requested type for the specified object type.","nodes":[{"content":"Gets a serializer of the requested type for the specified object type.","pos":[0,70]}]}],"pos":[17344,17415],"yaml":true},{"content":"The type of the object to get the serializer for.","nodes":[{"pos":[0,49],"content":"The type of the object to get the serializer for.","nodes":[{"content":"The type of the object to get the serializer for.","pos":[0,49]}]}],"pos":[17586,17636],"yaml":true},{"content":"The type of the serializer to retrieve.","nodes":[{"pos":[0,39],"content":"The type of the serializer to retrieve.","nodes":[{"content":"The type of the serializer to retrieve.","pos":[0,39]}]}],"pos":[17704,17744],"yaml":true},{"content":"An instance of the requested serializer, or `null` if no appropriate serializer can be located.","nodes":[{"pos":[0,95],"content":"An instance of the requested serializer, or <ph id=\"ph1\">`null`</ph> if no appropriate serializer can be located.","source":"An instance of the requested serializer, or `null` if no appropriate serializer can be located."}],"pos":[17801,17897],"yaml":true},{"content":"Gets a type of the specified name.","nodes":[{"pos":[0,34],"content":"Gets a type of the specified name.","nodes":[{"content":"Gets a type of the specified name.","pos":[0,34]}]}],"pos":[19435,19470],"yaml":true},{"content":"The fully qualified name of the type to load.","nodes":[{"pos":[0,45],"content":"The fully qualified name of the type to load.","nodes":[{"content":"The fully qualified name of the type to load.","pos":[0,45]}]}],"pos":[19612,19658],"yaml":true},{"content":"An instance of the type, or `null` if the type cannot be loaded.","nodes":[{"pos":[0,64],"content":"An instance of the type, or <ph id=\"ph1\">`null`</ph> if the type cannot be loaded.","source":"An instance of the type, or `null` if the type cannot be loaded."}],"pos":[19713,19778],"yaml":true},{"content":"Indicates custom properties that can be serializable with available serializers.","nodes":[{"pos":[0,80],"content":"Indicates custom properties that can be serializable with available serializers.","nodes":[{"content":"Indicates custom properties that can be serializable with available serializers.","pos":[0,80]}]}],"pos":[21261,21342],"yaml":true},{"content":"This property can contain an empty collection. A serializer should never assume that such properties exist. A derived class or implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> defines the set of properties that are exposed here.","nodes":[{"pos":[0,277],"content":"This property can contain an empty collection. A serializer should never assume that such properties exist. A derived class or implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> defines the set of properties that are exposed here.","nodes":[{"content":"This property can contain an empty collection. A serializer should never assume that such properties exist. A derived class or implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> defines the set of properties that are exposed here.","pos":[0,277],"nodes":[{"content":"This property can contain an empty collection.","pos":[0,46]},{"content":"A serializer should never assume that such properties exist.","pos":[47,107]},{"content":"A derived class or implementation of <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager&gt;</ph> defines the set of properties that are exposed here.","pos":[108,277],"source":" A derived class or implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> defines the set of properties that are exposed here."}]}]}],"pos":[21353,21631],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> containing the properties to be serialized.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.PropertyDescriptorCollection\"&gt;&lt;/xref&gt;</ph> containing the properties to be serialized.","source":"A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> containing the properties to be serialized."}],"pos":[21826,21944],"yaml":true},{"content":"Removes a custom serialization provider from the serialization manager.","nodes":[{"pos":[0,71],"content":"Removes a custom serialization provider from the serialization manager.","nodes":[{"content":"Removes a custom serialization provider from the serialization manager.","pos":[0,71]}]}],"pos":[23851,23923],"yaml":true},{"content":"The provider to remove. This object must have been added using <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\"></xref>.","nodes":[{"pos":[0,257],"content":"The provider to remove. This object must have been added using <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\"></xref>.","nodes":[{"content":"The provider to remove.","pos":[0,23]},{"content":"This object must have been added using <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\"&gt;&lt;/xref&gt;</ph>.","pos":[24,257],"source":" This object must have been added using <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\"></xref>."}]}],"pos":[24212,24470],"yaml":true},{"content":"Reports an error in serialization.","nodes":[{"pos":[0,34],"content":"Reports an error in serialization.","nodes":[{"content":"Reports an error in serialization.","pos":[0,34]}]}],"pos":[26046,26081],"yaml":true},{"content":"If the serialization manager supports logging multiple errors in its implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError%2A>, it can store the error information object for a future report where all the errors encountered can be displayed at once. If this method stores multiple errors, serialization can continue after a call to this method. If this method does not support logging multiple errors, this method should throw an exception, which aborts serialization.  \n  \n> [!NOTE]\n>  The serialization manager should never throw an exception for errors encountered during serialization. It should only throw an exception during deserialization. Otherwise, users become confused because saving the document should never fail.","nodes":[{"pos":[0,522],"content":"If the serialization manager supports logging multiple errors in its implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError%2A>, it can store the error information object for a future report where all the errors encountered can be displayed at once. If this method stores multiple errors, serialization can continue after a call to this method. If this method does not support logging multiple errors, this method should throw an exception, which aborts serialization.","nodes":[{"content":"If the serialization manager supports logging multiple errors in its implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError%2A>, it can store the error information object for a future report where all the errors encountered can be displayed at once. If this method stores multiple errors, serialization can continue after a call to this method. If this method does not support logging multiple errors, this method should throw an exception, which aborts serialization.","pos":[0,522],"nodes":[{"content":"If the serialization manager supports logging multiple errors in its implementation of <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError%2A&gt;</ph>, it can store the error information object for a future report where all the errors encountered can be displayed at once.","pos":[0,303],"source":"If the serialization manager supports logging multiple errors in its implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError%2A>, it can store the error information object for a future report where all the errors encountered can be displayed at once."},{"content":"If this method stores multiple errors, serialization can continue after a call to this method.","pos":[304,398]},{"content":"If this method does not support logging multiple errors, this method should throw an exception, which aborts serialization.","pos":[399,522]}]}]},{"pos":[530,781],"content":"[!NOTE]\n The serialization manager should never throw an exception for errors encountered during serialization. It should only throw an exception during deserialization. Otherwise, users become confused because saving the document should never fail.","leadings":["","> "],"nodes":[{"content":" The serialization manager should never throw an exception for errors encountered during serialization. It should only throw an exception during deserialization. Otherwise, users become confused because saving the document should never fail.","pos":[8,249],"nodes":[{"content":"The serialization manager should never throw an exception for errors encountered during serialization.","pos":[1,103]},{"content":"It should only throw an exception during deserialization.","pos":[104,161]},{"content":"Otherwise, users become confused because saving the document should never fail.","pos":[162,241]}]}]}],"pos":[26092,26879],"yaml":true,"extradata":"MT"},{"content":"The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, <xref href=\"System.Object.ToString\"></xref> is called to display the information to the user.","nodes":[{"pos":[0,281],"content":"The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, <xref href=\"System.Object.ToString\"></xref> is called to display the information to the user.","nodes":[{"content":"The error to report.","pos":[0,20]},{"content":"This information object can be of any object type.","pos":[21,71]},{"content":"If it is an exception, the message of the exception is extracted and reported to the user.","pos":[72,162]},{"content":"If it is any other type, <ph id=\"ph1\">&lt;xref href=\"System.Object.ToString\"&gt;&lt;/xref&gt;</ph> is called to display the information to the user.","pos":[163,281],"source":" If it is any other type, <xref href=\"System.Object.ToString\"></xref> is called to display the information to the user."}]}],"pos":[27041,27323],"yaml":true},{"content":"Occurs when <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\"></xref> cannot locate the specified name in the serialization manager's name table.","nodes":[{"pos":[0,204],"content":"Occurs when <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\"&gt;&lt;/xref&gt;</ph> cannot locate the specified name in the serialization manager's name table.","source":"Occurs when <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\"></xref> cannot locate the specified name in the serialization manager's name table."}],"pos":[28813,29018],"yaml":true},{"content":"This event provides a way for a serializer to create an object on demand, so that the serializer does not have to order object creation by dependency. The delegate for this event is cleared immediately after serialization or deserialization is complete.","nodes":[{"pos":[0,253],"content":"This event provides a way for a serializer to create an object on demand, so that the serializer does not have to order object creation by dependency. The delegate for this event is cleared immediately after serialization or deserialization is complete.","nodes":[{"content":"This event provides a way for a serializer to create an object on demand, so that the serializer does not have to order object creation by dependency. The delegate for this event is cleared immediately after serialization or deserialization is complete.","pos":[0,253],"nodes":[{"content":"This event provides a way for a serializer to create an object on demand, so that the serializer does not have to order object creation by dependency.","pos":[0,150]},{"content":"The delegate for this event is cleared immediately after serialization or deserialization is complete.","pos":[151,253]}]}]}],"pos":[29029,29283],"yaml":true,"extradata":"MT"},{"content":"Occurs when serialization is complete.","nodes":[{"pos":[0,38],"content":"Occurs when serialization is complete.","nodes":[{"content":"Occurs when serialization is complete.","pos":[0,38]}]}],"pos":[30964,31003],"yaml":true},{"content":"This event is raised when serialization or deserialization is complete.  \n  \n Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing. If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event, and clear the data after serialization. Restoring the proper state after serialization can be important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.  \n  \n For example, if a serializer needs to write to another file, such as a resource file, it is inefficient to design the serializer to close the file when finished. Serializing an object graph usually requires several serializers. The resource file would be opened and closed many times. Instead, the resource file can be closed at the end of serialization by an object that listened to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event.","nodes":[{"pos":[0,71],"content":"This event is raised when serialization or deserialization is complete.","nodes":[{"content":"This event is raised when serialization or deserialization is complete.","pos":[0,71]}]},{"pos":[78,684],"content":"Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing. If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event, and clear the data after serialization. Restoring the proper state after serialization can be important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.","nodes":[{"content":"Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing. If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event, and clear the data after serialization. Restoring the proper state after serialization can be important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.","pos":[0,606],"nodes":[{"content":"Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing.","pos":[0,137]},{"content":"If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete&gt;</ph> event, and clear the data after serialization.","pos":[138,424],"source":" If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event, and clear the data after serialization."},{"content":"Restoring the proper state after serialization can be important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.","pos":[425,606]}]}]},{"pos":[691,1187],"content":"For example, if a serializer needs to write to another file, such as a resource file, it is inefficient to design the serializer to close the file when finished. Serializing an object graph usually requires several serializers. The resource file would be opened and closed many times. Instead, the resource file can be closed at the end of serialization by an object that listened to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event.","nodes":[{"content":"For example, if a serializer needs to write to another file, such as a resource file, it is inefficient to design the serializer to close the file when finished. Serializing an object graph usually requires several serializers. The resource file would be opened and closed many times. Instead, the resource file can be closed at the end of serialization by an object that listened to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event.","pos":[0,496],"nodes":[{"content":"For example, if a serializer needs to write to another file, such as a resource file, it is inefficient to design the serializer to close the file when finished.","pos":[0,161]},{"content":"Serializing an object graph usually requires several serializers.","pos":[162,227]},{"content":"The resource file would be opened and closed many times.","pos":[228,284]},{"content":"Instead, the resource file can be closed at the end of serialization by an object that listened to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete&gt;</ph> event.","pos":[285,496],"source":" Instead, the resource file can be closed at the end of serialization by an object that listened to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event."}]}]}],"pos":[31014,32208],"yaml":true,"extradata":"MT"},{"content":"Sets the name of the specified existing object.","nodes":[{"pos":[0,47],"content":"Sets the name of the specified existing object.","nodes":[{"content":"Sets the name of the specified existing object.","pos":[0,47]}]}],"pos":[33850,33898],"yaml":true},{"content":"This method is useful when it is necessary to create and then name an instance of an object without using <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>. An exception is thrown if you try to rename an existing object or if you try to give a new object a name that is already taken.","nodes":[{"pos":[0,332],"content":"This method is useful when it is necessary to create and then name an instance of an object without using <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>. An exception is thrown if you try to rename an existing object or if you try to give a new object a name that is already taken.","nodes":[{"content":"This method is useful when it is necessary to create and then name an instance of an object without using <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>. An exception is thrown if you try to rename an existing object or if you try to give a new object a name that is already taken.","pos":[0,332],"nodes":[{"content":"This method is useful when it is necessary to create and then name an instance of an object without using <ph id=\"ph1\">&lt;xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A&gt;</ph>.","pos":[0,204],"source":"This method is useful when it is necessary to create and then name an instance of an object without using <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>."},{"content":"An exception is thrown if you try to rename an existing object or if you try to give a new object a name that is already taken.","pos":[205,332]}]}]}],"pos":[33909,34242],"yaml":true,"extradata":"MT"},{"content":"The object instance to name.","nodes":[{"pos":[0,28],"content":"The object instance to name.","nodes":[{"content":"The object instance to name.","pos":[0,28]}]}],"pos":[34397,34426],"yaml":true},{"content":"The name to give the instance.","nodes":[{"pos":[0,30],"content":"The name to give the instance.","nodes":[{"content":"The name to give the instance.","pos":[0,30]}]}],"pos":[34486,34517],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  commentId: T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  id: IDesignerSerializationManager\n  children:\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete\n  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)\n  langs:\n  - csharp\n  name: IDesignerSerializationManager\n  nameWithType: IDesignerSerializationManager\n  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  type: Interface\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Provides an interface that can manage design-time serialization.\n  remarks: A designer can utilize <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> to access services useful to managing design-time serialization processes. For example, a class that implements the designer serialization manager can use this interface to create objects, look up types, identify objects, and customize the serialization of particular types.\n  example:\n  - \"The following example illustrates how to use <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> to serialize and deserialize Code DOM statements.  \\n  \\n [!code-cpp[IDesignerSerializationManagerSample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IDesignerSerializationManagerSample/CPP/idesignerserializationmanagersample.cpp#1)]\\n [!code-csharp[IDesignerSerializationManagerSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IDesignerSerializationManagerSample/CS/idesignerserializationmanagersample.cs#1)]\\n [!code-vb[IDesignerSerializationManagerSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IDesignerSerializationManagerSample/VB/idesignerserializationmanagersample.vb#1)]\"\n  syntax:\n    content: 'public interface IDesignerSerializationManager : IServiceProvider'\n  derivedClasses:\n  - System.ComponentModel.Design.Serialization.DesignerSerializationManager\n  - System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager\n  - System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager\n  implements:\n  - System.IServiceProvider\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  id: AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: AddSerializationProvider(IDesignerSerializationProvider)\n  nameWithType: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)\n  fullName: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Adds the specified serialization provider to the serialization manager.\n  remarks: This method adds a custom serialization provider to the serialization manager. Serialization providers can provide custom serializers for a particular type of object or set of types of objects. During serialization, each custom serialization provider is queried to return a serializer for a specific data type, if it can provide one. The serialization manager uses the custom serializer provided by this method before using the default serializer for a particular type.\n  syntax:\n    content: public void AddSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);\n    parameters:\n    - id: provider\n      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider\n      description: The serialization provider to add.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context\n  commentId: P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context\n  id: Context\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: Context\n  nameWithType: IDesignerSerializationManager.Context\n  fullName: IDesignerSerializationManager.Context\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets a stack-based, user-defined storage area that is useful for communication between serializers.\n  remarks: This storage area provides communication of object context information to serializers. Context information about objects that are being serialized can be stored and accessed through this <xref:System.ComponentModel.Design.Serialization.ContextStack>.\n  syntax:\n    content: public System.ComponentModel.Design.Serialization.ContextStack Context { get; }\n    return:\n      type: System.ComponentModel.Design.Serialization.ContextStack\n      description: A <xref href=\"System.ComponentModel.Design.Serialization.ContextStack\"></xref> that stores data.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)\n  id: CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: CreateInstance(Type, ICollection, String, Boolean)\n  nameWithType: IDesignerSerializationManager.CreateInstance(Type, ICollection, String, Boolean)\n  fullName: IDesignerSerializationManager.CreateInstance(Type, ICollection, String, Boolean)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Creates an instance of the specified type and adds it to a collection of named instances.\n  remarks: Objects that implement <xref:System.ComponentModel.IComponent> are added to the design-time container if the `addToContainer` parameter is `true`.\n  syntax:\n    content: public object CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The data type to create.\n    - id: arguments\n      type: System.Collections.ICollection\n      description: The arguments to pass to the constructor for this type.\n    - id: name\n      type: System.String\n      description: The name of the object. This name can be used to access the object later through <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\"></xref>. If `null` is passed, the object is still created but cannot be accessed by name.\n    - id: addToContainer\n      type: System.Boolean\n      description: If `true`, this object is added to the design container. The object must implement <xref href=\"System.ComponentModel.IComponent\"></xref> for this to have any effect.\n    return:\n      type: System.Object\n      description: The newly created object instance.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\n  id: GetInstance(System.String)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: GetInstance(String)\n  nameWithType: IDesignerSerializationManager.GetInstance(String)\n  fullName: IDesignerSerializationManager.GetInstance(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets an instance of a created object of the specified name, or `null` if that object does not exist.\n  remarks: The name of the object to retrieve must have been set through a prior call to <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>.\n  syntax:\n    content: public object GetInstance (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the object to retrieve.\n    return:\n      type: System.Object\n      description: An instance of the object with the given name, or `null` if no object by that name can be found.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\n  id: GetName(System.Object)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: GetName(Object)\n  nameWithType: IDesignerSerializationManager.GetName(Object)\n  fullName: IDesignerSerializationManager.GetName(Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets the name of the specified object, or `null` if the object has no name.\n  syntax:\n    content: public string GetName (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: The object to retrieve the name for.\n    return:\n      type: System.String\n      description: The name of the object, or `null` if the object is unnamed.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)\n  id: GetSerializer(System.Type,System.Type)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: GetSerializer(Type, Type)\n  nameWithType: IDesignerSerializationManager.GetSerializer(Type, Type)\n  fullName: IDesignerSerializationManager.GetSerializer(Type, Type)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets a serializer of the requested type for the specified object type.\n  syntax:\n    content: public object GetSerializer (Type objectType, Type serializerType);\n    parameters:\n    - id: objectType\n      type: System.Type\n      description: The type of the object to get the serializer for.\n    - id: serializerType\n      type: System.Type\n      description: The type of the serializer to retrieve.\n    return:\n      type: System.Object\n      description: An instance of the requested serializer, or `null` if no appropriate serializer can be located.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)\n  id: GetType(System.String)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: GetType(String)\n  nameWithType: IDesignerSerializationManager.GetType(String)\n  fullName: IDesignerSerializationManager.GetType(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Gets a type of the specified name.\n  syntax:\n    content: public Type GetType (string typeName);\n    parameters:\n    - id: typeName\n      type: System.String\n      description: The fully qualified name of the type to load.\n    return:\n      type: System.Type\n      description: An instance of the type, or `null` if the type cannot be loaded.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties\n  commentId: P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties\n  id: Properties\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: IDesignerSerializationManager.Properties\n  fullName: IDesignerSerializationManager.Properties\n  type: Property\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Indicates custom properties that can be serializable with available serializers.\n  remarks: This property can contain an empty collection. A serializer should never assume that such properties exist. A derived class or implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> defines the set of properties that are exposed here.\n  syntax:\n    content: public System.ComponentModel.PropertyDescriptorCollection Properties { get; }\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: A <xref href=\"System.ComponentModel.PropertyDescriptorCollection\"></xref> containing the properties to be serialized.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  id: RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: RemoveSerializationProvider(IDesignerSerializationProvider)\n  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)\n  fullName: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Removes a custom serialization provider from the serialization manager.\n  syntax:\n    content: public void RemoveSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);\n    parameters:\n    - id: provider\n      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider\n      description: The provider to remove. This object must have been added using <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\"></xref>.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)\n  id: ReportError(System.Object)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: ReportError(Object)\n  nameWithType: IDesignerSerializationManager.ReportError(Object)\n  fullName: IDesignerSerializationManager.ReportError(Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Reports an error in serialization.\n  remarks: \"If the serialization manager supports logging multiple errors in its implementation of <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError%2A>, it can store the error information object for a future report where all the errors encountered can be displayed at once. If this method stores multiple errors, serialization can continue after a call to this method. If this method does not support logging multiple errors, this method should throw an exception, which aborts serialization.  \\n  \\n> [!NOTE]\\n>  The serialization manager should never throw an exception for errors encountered during serialization. It should only throw an exception during deserialization. Otherwise, users become confused because saving the document should never fail.\"\n  syntax:\n    content: public void ReportError (object errorInformation);\n    parameters:\n    - id: errorInformation\n      type: System.Object\n      description: The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, <xref href=\"System.Object.ToString\"></xref> is called to display the information to the user.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName\n  commentId: E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName\n  id: ResolveName\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: ResolveName\n  nameWithType: IDesignerSerializationManager.ResolveName\n  fullName: IDesignerSerializationManager.ResolveName\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Occurs when <xref href=\"System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\"></xref> cannot locate the specified name in the serialization manager's name table.\n  remarks: This event provides a way for a serializer to create an object on demand, so that the serializer does not have to order object creation by dependency. The delegate for this event is cleared immediately after serialization or deserialization is complete.\n  syntax:\n    content: public event System.ComponentModel.Design.Serialization.ResolveNameEventHandler ResolveName;\n    return:\n      type: System.ComponentModel.Design.Serialization.ResolveNameEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete\n  commentId: E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete\n  id: SerializationComplete\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: SerializationComplete\n  nameWithType: IDesignerSerializationManager.SerializationComplete\n  fullName: IDesignerSerializationManager.SerializationComplete\n  type: Event\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Occurs when serialization is complete.\n  remarks: \"This event is raised when serialization or deserialization is complete.  \\n  \\n Generally, serialization code is written to emit serialization data and does not typically require state-related checking and processing. If it is necessary to maintain state data throughout serialization, data can be set and accessed by a serializer, which can listen to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event, and clear the data after serialization. Restoring the proper state after serialization can be important because serializers can be reused during serialization, and leftover state data or open streams might not be correct.  \\n  \\n For example, if a serializer needs to write to another file, such as a resource file, it is inefficient to design the serializer to close the file when finished. Serializing an object graph usually requires several serializers. The resource file would be opened and closed many times. Instead, the resource file can be closed at the end of serialization by an object that listened to the <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> event.\"\n  syntax:\n    content: public event EventHandler SerializationComplete;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)\n  commentId: M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)\n  id: SetName(System.Object,System.String)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  langs:\n  - csharp\n  name: SetName(Object, String)\n  nameWithType: IDesignerSerializationManager.SetName(Object, String)\n  fullName: IDesignerSerializationManager.SetName(Object, String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel.Design.Serialization\n  summary: Sets the name of the specified existing object.\n  remarks: This method is useful when it is necessary to create and then name an instance of an object without using <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>. An exception is thrown if you try to rename an existing object or if you try to give a new object a name that is already taken.\n  syntax:\n    content: public void SetName (object instance, string name);\n    parameters:\n    - id: instance\n      type: System.Object\n      description: The object instance to name.\n    - id: name\n      type: System.String\n      description: The name to give the instance.\n  overload: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: AddSerializationProvider(IDesignerSerializationProvider)\n  nameWithType: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)\n  fullName: IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider\n  parent: System.ComponentModel.Design.Serialization\n  isExternal: false\n  name: IDesignerSerializationProvider\n  nameWithType: IDesignerSerializationProvider\n  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: Context\n  nameWithType: IDesignerSerializationManager.Context\n  fullName: IDesignerSerializationManager.Context\n- uid: System.ComponentModel.Design.Serialization.ContextStack\n  parent: System.ComponentModel.Design.Serialization\n  isExternal: false\n  name: ContextStack\n  nameWithType: ContextStack\n  fullName: System.ComponentModel.Design.Serialization.ContextStack\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: CreateInstance(Type, ICollection, String, Boolean)\n  nameWithType: IDesignerSerializationManager.CreateInstance(Type, ICollection, String, Boolean)\n  fullName: IDesignerSerializationManager.CreateInstance(Type, ICollection, String, Boolean)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetInstance(String)\n  nameWithType: IDesignerSerializationManager.GetInstance(String)\n  fullName: IDesignerSerializationManager.GetInstance(String)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetName(Object)\n  nameWithType: IDesignerSerializationManager.GetName(Object)\n  fullName: IDesignerSerializationManager.GetName(Object)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetSerializer(Type, Type)\n  nameWithType: IDesignerSerializationManager.GetSerializer(Type, Type)\n  fullName: IDesignerSerializationManager.GetSerializer(Type, Type)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetType(String)\n  nameWithType: IDesignerSerializationManager.GetType(String)\n  fullName: IDesignerSerializationManager.GetType(String)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: Properties\n  nameWithType: IDesignerSerializationManager.Properties\n  fullName: IDesignerSerializationManager.Properties\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: RemoveSerializationProvider(IDesignerSerializationProvider)\n  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)\n  fullName: IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: ReportError(Object)\n  nameWithType: IDesignerSerializationManager.ReportError(Object)\n  fullName: IDesignerSerializationManager.ReportError(Object)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: ResolveName\n  nameWithType: IDesignerSerializationManager.ResolveName\n  fullName: IDesignerSerializationManager.ResolveName\n- uid: System.ComponentModel.Design.Serialization.ResolveNameEventHandler\n  parent: System.ComponentModel.Design.Serialization\n  isExternal: false\n  name: ResolveNameEventHandler\n  nameWithType: ResolveNameEventHandler\n  fullName: System.ComponentModel.Design.Serialization.ResolveNameEventHandler\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: SerializationComplete\n  nameWithType: IDesignerSerializationManager.SerializationComplete\n  fullName: IDesignerSerializationManager.SerializationComplete\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: SetName(Object, String)\n  nameWithType: IDesignerSerializationManager.SetName(Object, String)\n  fullName: IDesignerSerializationManager.SetName(Object, String)\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: AddSerializationProvider\n  nameWithType: IDesignerSerializationManager.AddSerializationProvider\n  fullName: IDesignerSerializationManager.AddSerializationProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: Context\n  nameWithType: IDesignerSerializationManager.Context\n  fullName: IDesignerSerializationManager.Context\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: CreateInstance\n  nameWithType: IDesignerSerializationManager.CreateInstance\n  fullName: IDesignerSerializationManager.CreateInstance\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetInstance\n  nameWithType: IDesignerSerializationManager.GetInstance\n  fullName: IDesignerSerializationManager.GetInstance\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetName\n  nameWithType: IDesignerSerializationManager.GetName\n  fullName: IDesignerSerializationManager.GetName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetSerializer\n  nameWithType: IDesignerSerializationManager.GetSerializer\n  fullName: IDesignerSerializationManager.GetSerializer\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: GetType\n  nameWithType: IDesignerSerializationManager.GetType\n  fullName: IDesignerSerializationManager.GetType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: Properties\n  nameWithType: IDesignerSerializationManager.Properties\n  fullName: IDesignerSerializationManager.Properties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: RemoveSerializationProvider\n  nameWithType: IDesignerSerializationManager.RemoveSerializationProvider\n  fullName: IDesignerSerializationManager.RemoveSerializationProvider\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: ReportError\n  nameWithType: IDesignerSerializationManager.ReportError\n  fullName: IDesignerSerializationManager.ReportError\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName*\n  parent: System.ComponentModel.Design.Serialization.IDesignerSerializationManager\n  isExternal: false\n  name: SetName\n  nameWithType: IDesignerSerializationManager.SetName\n  fullName: IDesignerSerializationManager.SetName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel.Design.Serialization/IDesignerSerializationManager.xml\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  nameWithType: IServiceProvider\n  fullName: System.IServiceProvider\n"}