{"nodes":[{"content":"Specifies the execution states of a <xref href=\"System.Threading.Thread\"></xref>.","nodes":[{"pos":[0,81],"content":"Specifies the execution states of a <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread\"&gt;&lt;/xref&gt;</ph>.","source":"Specifies the execution states of a <xref href=\"System.Threading.Thread\"></xref>."}],"pos":[825,907],"yaml":true},{"content":"The <xref:System.Threading.ThreadState> enumeration is of interest only in a few debugging scenarios. Your code should never use the thread state to synchronize the activities of threads.  \n  \n <xref:System.Threading.ThreadState> defines a set of all possible execution states for threads. Once a thread is created, it is in at least one of the states until it terminates. Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state. An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>. Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states.  \n  \n> [!IMPORTANT]\n>  There are two thread state enumerations,<xref:System.Threading.ThreadState?displayProperty=fullName> and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>.  \n  \n The following table shows the actions that cause a change of state.  \n  \n|Action|ThreadState|  \n|------------|-----------------|  \n|A thread is created within the common language runtime.|Unstarted|  \n|Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns.<br /><br /> The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running. There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.|Running|  \n|The thread calls <xref:System.Threading.Thread.Sleep%2A>|WaitSleepJoin|  \n|The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object.|WaitSleepJoin|  \n|The thread calls <xref:System.Threading.Thread.Join%2A> on another thread.|WaitSleepJoin|  \n|Another thread calls <xref:System.Threading.Thread.Interrupt%2A>|Running|  \n|Another thread calls <xref:System.Threading.Thread.Suspend%2A>|SuspendRequested|  \n|The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request.|Suspended|  \n|Another thread calls <xref:System.Threading.Thread.Resume%2A>|Running|  \n|Another thread calls <xref:System.Threading.Thread.Abort%2A>|AbortRequested|  \n|The thread responds to a <xref:System.Threading.Thread.Abort%2A> request.|Stopped|  \n|A thread is terminated.|Stopped|  \n  \n In addition to the states noted above, there is also the `Background` state, which indicates whether the thread is running in the background or foreground.  \n  \n A thread can be in more than one state at a given time. For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time. In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting.  \n  \n The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread. Applications must use a bitmask to determine whether a thread is running. Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`.","nodes":[{"pos":[0,187],"content":"The <xref:System.Threading.ThreadState> enumeration is of interest only in a few debugging scenarios. Your code should never use the thread state to synchronize the activities of threads.","nodes":[{"content":"The <xref:System.Threading.ThreadState> enumeration is of interest only in a few debugging scenarios. Your code should never use the thread state to synchronize the activities of threads.","pos":[0,187],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> enumeration is of interest only in a few debugging scenarios.","pos":[0,101],"source":"The <xref:System.Threading.ThreadState> enumeration is of interest only in a few debugging scenarios."},{"content":"Your code should never use the thread state to synchronize the activities of threads.","pos":[102,187]}]}]},{"pos":[194,798],"content":"<xref:System.Threading.ThreadState> defines a set of all possible execution states for threads. Once a thread is created, it is in at least one of the states until it terminates. Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state. An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>. Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ThreadState&gt;</ph> defines a set of all possible execution states for threads.","pos":[0,95],"source":"<xref:System.Threading.ThreadState> defines a set of all possible execution states for threads."},{"content":"Once a thread is created, it is in at least one of the states until it terminates.","pos":[96,178]},{"content":"Threads created within the common language runtime are initially in the <ph id=\"ph1\">`Unstarted`</ph> state, while external threads that come into the runtime are already in the <ph id=\"ph2\">`Running`</ph> state.","pos":[179,355],"source":" Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state."},{"content":"An <ph id=\"ph1\">`Unstarted`</ph> thread is transitioned into the <ph id=\"ph2\">`Running`</ph> state by calling <ph id=\"ph3\">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.","pos":[356,470],"source":" An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>."},{"content":"Not all combinations of <ph id=\"ph1\">`ThreadState`</ph> values are valid; for example, a thread cannot be in both the <ph id=\"ph2\">`Aborted`</ph> and <ph id=\"ph3\">`Unstarted`</ph> states.","pos":[471,604],"source":" Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states."}]},{"pos":[806,990],"content":"[!IMPORTANT]\n There are two thread state enumerations,<xref:System.Threading.ThreadState?displayProperty=fullName> and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":"There are two thread state enumerations,<ph id=\"ph1\">&lt;xref:System.Threading.ThreadState?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Diagnostics.ThreadState?displayProperty=fullName&gt;</ph>.","pos":[14,182],"source":" There are two thread state enumerations,<xref:System.Threading.ThreadState?displayProperty=fullName> and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>."}]},{"pos":[997,1064],"content":"The following table shows the actions that cause a change of state.","nodes":[{"content":"The following table shows the actions that cause a change of state.","pos":[0,67]}]},{"pos":[1071,1077],"content":"Action","nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[1078,1089],"content":"ThreadState","nodes":[{"content":"ThreadState","pos":[0,11]}]},{"pos":[1129,1184],"content":"A thread is created within the common language runtime.","nodes":[{"content":"A thread is created within the common language runtime.","pos":[0,55]}]},{"pos":[1185,1194],"content":"Unstarted","nodes":[{"content":"Unstarted","pos":[0,9]}]},{"pos":[1199,1590],"content":"Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns.<br /><br /> The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running. There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.","nodes":[{"content":"Another thread calls the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;</ph> method on the new thread, and the call returns.","pos":[0,137],"source":"Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns."},{"content":"The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running. There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.","pos":[150,391],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph> method does not return until the new thread has started running.","pos":[0,108],"source":"The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running."},{"content":"There is no way to know at what point the new thread will start running, during the call to <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Start%2A&gt;</ph>.","pos":[109,241],"source":" There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>."}]}]},{"pos":[1591,1598],"content":"Running","nodes":[{"content":"Running","pos":[0,7]}]},{"pos":[1603,1659],"content":"The thread calls <xref:System.Threading.Thread.Sleep%2A>","nodes":[{"content":"The thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Sleep%2A&gt;</ph>","pos":[0,56],"source":"The thread calls <xref:System.Threading.Thread.Sleep%2A>"}]},{"pos":[1660,1673],"content":"WaitSleepJoin","nodes":[{"content":"WaitSleepJoin","pos":[0,13]}]},{"pos":[1678,1753],"content":"The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object.","nodes":[{"content":"The thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> on another object.","pos":[0,75],"source":"The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object."}]},{"pos":[1754,1767],"content":"WaitSleepJoin","nodes":[{"content":"WaitSleepJoin","pos":[0,13]}]},{"pos":[1772,1846],"content":"The thread calls <xref:System.Threading.Thread.Join%2A> on another thread.","nodes":[{"content":"The thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Join%2A&gt;</ph> on another thread.","pos":[0,74],"source":"The thread calls <xref:System.Threading.Thread.Join%2A> on another thread."}]},{"pos":[1847,1860],"content":"WaitSleepJoin","nodes":[{"content":"WaitSleepJoin","pos":[0,13]}]},{"pos":[1865,1929],"content":"Another thread calls <xref:System.Threading.Thread.Interrupt%2A>","nodes":[{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Interrupt%2A&gt;</ph>","pos":[0,64],"source":"Another thread calls <xref:System.Threading.Thread.Interrupt%2A>"}]},{"pos":[1930,1937],"content":"Running","nodes":[{"content":"Running","pos":[0,7]}]},{"pos":[1942,2004],"content":"Another thread calls <xref:System.Threading.Thread.Suspend%2A>","nodes":[{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph>","pos":[0,62],"source":"Another thread calls <xref:System.Threading.Thread.Suspend%2A>"}]},{"pos":[2005,2021],"content":"SuspendRequested","nodes":[{"content":"SuspendRequested","pos":[0,16]}]},{"pos":[2026,2101],"content":"The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request.","nodes":[{"content":"The thread responds to a <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Suspend%2A&gt;</ph> request.","pos":[0,75],"source":"The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request."}]},{"pos":[2102,2111],"content":"Suspended","nodes":[{"content":"Suspended","pos":[0,9]}]},{"pos":[2116,2177],"content":"Another thread calls <xref:System.Threading.Thread.Resume%2A>","nodes":[{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Resume%2A&gt;</ph>","pos":[0,61],"source":"Another thread calls <xref:System.Threading.Thread.Resume%2A>"}]},{"pos":[2178,2185],"content":"Running","nodes":[{"content":"Running","pos":[0,7]}]},{"pos":[2190,2250],"content":"Another thread calls <xref:System.Threading.Thread.Abort%2A>","nodes":[{"content":"Another thread calls <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph>","pos":[0,60],"source":"Another thread calls <xref:System.Threading.Thread.Abort%2A>"}]},{"pos":[2251,2265],"content":"AbortRequested","nodes":[{"content":"AbortRequested","pos":[0,14]}]},{"pos":[2270,2343],"content":"The thread responds to a <xref:System.Threading.Thread.Abort%2A> request.","nodes":[{"content":"The thread responds to a <ph id=\"ph1\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> request.","pos":[0,73],"source":"The thread responds to a <xref:System.Threading.Thread.Abort%2A> request."}]},{"pos":[2344,2351],"content":"Stopped","nodes":[{"content":"Stopped","pos":[0,7]}]},{"pos":[2356,2379],"content":"A thread is terminated.","nodes":[{"content":"A thread is terminated.","pos":[0,23]}]},{"pos":[2380,2387],"content":"Stopped","nodes":[{"content":"Stopped","pos":[0,7]}]},{"pos":[2395,2550],"content":"In addition to the states noted above, there is also the <ph id=\"ph1\">`Background`</ph> state, which indicates whether the thread is running in the background or foreground.","source":"In addition to the states noted above, there is also the `Background` state, which indicates whether the thread is running in the background or foreground."},{"pos":[2557,3099],"content":"A thread can be in more than one state at a given time. For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time. In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting.","nodes":[{"content":"A thread can be in more than one state at a given time.","pos":[0,55]},{"content":"For example, if a thread is blocked on a call to <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph>, and another thread calls <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Abort%2A&gt;</ph> on the blocked thread, the blocked thread will be in both the <ph id=\"ph3\">`WaitSleepJoin`</ph> and the <ph id=\"ph4\">`AbortRequested`</ph> states at the same time.","pos":[56,338],"source":" For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time."},{"content":"In this case, as soon as the thread returns from the call to <ph id=\"ph1\">&lt;xref:System.Threading.Monitor.Wait%2A&gt;</ph> or is interrupted, it will receive the <ph id=\"ph2\">&lt;xref:System.Threading.ThreadAbortException&gt;</ph> to begin aborting.","pos":[339,542],"source":" In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting."}]},{"pos":[3106,3604],"content":"The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread. Applications must use a bitmask to determine whether a thread is running. Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName&gt;</ph> property of a thread provides the current state of a thread.","pos":[0,135],"source":"The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread."},{"content":"Applications must use a bitmask to determine whether a thread is running.","pos":[136,209]},{"content":"Since the value for <ph id=\"ph1\">`Running`</ph> is zero (0), test whether a thread is running by using C# code such as <ph id=\"ph2\">`(myThread.ThreadState &amp; (ThreadState.Stopped | ThreadState.Unstarted)) == 0`</ph> or Visual Basic code such as <ph id=\"ph3\">`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`</ph>.","pos":[210,498],"source":" Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`."}]}],"pos":[918,4553],"yaml":true,"extradata":"MT"},{"content":"The thread state includes <xref href=\"System.Threading.ThreadState.AbortRequested\"></xref> and the thread is now dead, but its state has not yet changed to <xref href=\"System.Threading.ThreadState.Stopped\"></xref>.","nodes":[{"pos":[0,214],"content":"The thread state includes <ph id=\"ph1\">&lt;xref href=\"System.Threading.ThreadState.AbortRequested\"&gt;&lt;/xref&gt;</ph> and the thread is now dead, but its state has not yet changed to <ph id=\"ph2\">&lt;xref href=\"System.Threading.ThreadState.Stopped\"&gt;&lt;/xref&gt;</ph>.","source":"The thread state includes <xref href=\"System.Threading.ThreadState.AbortRequested\"></xref> and the thread is now dead, but its state has not yet changed to <xref href=\"System.Threading.ThreadState.Stopped\"></xref>."}],"pos":[6033,6248],"yaml":true},{"content":"The <xref href=\"System.Threading.Thread.Abort(System.Object)\"></xref> method has been invoked on the thread, but the thread has not yet received the pending <xref href=\"System.Threading.ThreadAbortException\"></xref> that will attempt to terminate it.","nodes":[{"pos":[0,250],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.Abort(System.Object)\"&gt;&lt;/xref&gt;</ph> method has been invoked on the thread, but the thread has not yet received the pending <ph id=\"ph2\">&lt;xref href=\"System.Threading.ThreadAbortException\"&gt;&lt;/xref&gt;</ph> that will attempt to terminate it.","source":"The <xref href=\"System.Threading.Thread.Abort(System.Object)\"></xref> method has been invoked on the thread, but the thread has not yet received the pending <xref href=\"System.Threading.ThreadAbortException\"></xref> that will attempt to terminate it."}],"pos":[7484,7735],"yaml":true},{"content":"The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the <xref href=\"System.Threading.Thread.IsBackground\"></xref> property.","nodes":[{"pos":[0,195],"content":"The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the <xref href=\"System.Threading.Thread.IsBackground\"></xref> property.","nodes":[{"content":"The thread is being executed as a background thread, as opposed to a foreground thread.","pos":[0,87]},{"content":"This state is controlled by setting the <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.IsBackground\"&gt;&lt;/xref&gt;</ph> property.","pos":[88,195],"source":" This state is controlled by setting the <xref href=\"System.Threading.Thread.IsBackground\"></xref> property."}]}],"pos":[8954,9150],"yaml":true},{"content":"The thread has been started, it is not blocked, and there is no pending <xref href=\"System.Threading.ThreadAbortException\"></xref>.","nodes":[{"pos":[0,131],"content":"The thread has been started, it is not blocked, and there is no pending <ph id=\"ph1\">&lt;xref href=\"System.Threading.ThreadAbortException\"&gt;&lt;/xref&gt;</ph>.","source":"The thread has been started, it is not blocked, and there is no pending <xref href=\"System.Threading.ThreadAbortException\"></xref>."}],"pos":[10347,10479],"yaml":true},{"content":"The thread has stopped.","nodes":[{"pos":[0,23],"content":"The thread has stopped.","nodes":[{"content":"The thread has stopped.","pos":[0,23]}]}],"pos":[11673,11697],"yaml":true},{"content":"The thread is being requested to stop. This is for internal use only.","nodes":[{"pos":[0,69],"content":"The thread is being requested to stop. This is for internal use only.","nodes":[{"content":"The thread is being requested to stop. This is for internal use only.","pos":[0,69],"nodes":[{"content":"The thread is being requested to stop.","pos":[0,38]},{"content":"This is for internal use only.","pos":[39,69]}]}]}],"pos":[12927,12997],"yaml":true},{"content":"The thread has been suspended.","nodes":[{"pos":[0,30],"content":"The thread has been suspended.","nodes":[{"content":"The thread has been suspended.","pos":[0,30]}]}],"pos":[14209,14240],"yaml":true},{"content":"The thread is being requested to suspend.","nodes":[{"pos":[0,41],"content":"The thread is being requested to suspend.","nodes":[{"content":"The thread is being requested to suspend.","pos":[0,41]}]}],"pos":[15490,15532],"yaml":true},{"content":"The <xref href=\"System.Threading.Thread.Start\"></xref> method has not been invoked on the thread.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.Start\"&gt;&lt;/xref&gt;</ph> method has not been invoked on the thread.","source":"The <xref href=\"System.Threading.Thread.Start\"></xref> method has not been invoked on the thread."}],"pos":[16747,16845],"yaml":true},{"content":"The thread is blocked. This could be the result of calling <xref href=\"System.Threading.Thread.Sleep(System.Int32)\"></xref> or <xref href=\"System.Threading.Thread.Join\"></xref>, of requesting a lock — for example, by calling <xref href=\"System.Threading.Monitor.Enter(System.Object)\"></xref> or <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)\"></xref> — or of waiting on a thread synchronization object such as <xref href=\"System.Threading.ManualResetEvent\"></xref>.","nodes":[{"pos":[0,503],"content":"The thread is blocked. This could be the result of calling <xref href=\"System.Threading.Thread.Sleep(System.Int32)\"></xref> or <xref href=\"System.Threading.Thread.Join\"></xref>, of requesting a lock — for example, by calling <xref href=\"System.Threading.Monitor.Enter(System.Object)\"></xref> or <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)\"></xref> — or of waiting on a thread synchronization object such as <xref href=\"System.Threading.ManualResetEvent\"></xref>.","nodes":[{"content":"The thread is blocked.","pos":[0,22]},{"content":"This could be the result of calling <ph id=\"ph1\">&lt;xref href=\"System.Threading.Thread.Sleep(System.Int32)\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Threading.Thread.Join\"&gt;&lt;/xref&gt;</ph>, of requesting a lock — for example, by calling <ph id=\"ph3\">&lt;xref href=\"System.Threading.Monitor.Enter(System.Object)\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph4\">&lt;xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)\"&gt;&lt;/xref&gt;</ph> — or of waiting on a thread synchronization object such as <ph id=\"ph5\">&lt;xref href=\"System.Threading.ManualResetEvent\"&gt;&lt;/xref&gt;</ph>.","pos":[23,503],"source":" This could be the result of calling <xref href=\"System.Threading.Thread.Sleep(System.Int32)\"></xref> or <xref href=\"System.Threading.Thread.Join\"></xref>, of requesting a lock — for example, by calling <xref href=\"System.Threading.Monitor.Enter(System.Object)\"></xref> or <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)\"></xref> — or of waiting on a thread synchronization object such as <xref href=\"System.Threading.ManualResetEvent\"></xref>."}]}],"pos":[18077,18581],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ThreadState\n  commentId: T:System.Threading.ThreadState\n  id: ThreadState\n  children:\n  - System.Threading.ThreadState.Aborted\n  - System.Threading.ThreadState.AbortRequested\n  - System.Threading.ThreadState.Background\n  - System.Threading.ThreadState.Running\n  - System.Threading.ThreadState.Stopped\n  - System.Threading.ThreadState.StopRequested\n  - System.Threading.ThreadState.Suspended\n  - System.Threading.ThreadState.SuspendRequested\n  - System.Threading.ThreadState.Unstarted\n  - System.Threading.ThreadState.WaitSleepJoin\n  langs:\n  - csharp\n  name: ThreadState\n  nameWithType: ThreadState\n  fullName: System.Threading.ThreadState\n  type: Enum\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Specifies the execution states of a <xref href=\"System.Threading.Thread\"></xref>.\n  remarks: \"The <xref:System.Threading.ThreadState> enumeration is of interest only in a few debugging scenarios. Your code should never use the thread state to synchronize the activities of threads.  \\n  \\n <xref:System.Threading.ThreadState> defines a set of all possible execution states for threads. Once a thread is created, it is in at least one of the states until it terminates. Threads created within the common language runtime are initially in the `Unstarted` state, while external threads that come into the runtime are already in the `Running` state. An `Unstarted` thread is transitioned into the `Running` state by calling <xref:System.Threading.Thread.Start%2A>. Not all combinations of `ThreadState` values are valid; for example, a thread cannot be in both the `Aborted` and `Unstarted` states.  \\n  \\n> [!IMPORTANT]\\n>  There are two thread state enumerations,<xref:System.Threading.ThreadState?displayProperty=fullName> and <xref:System.Diagnostics.ThreadState?displayProperty=fullName>.  \\n  \\n The following table shows the actions that cause a change of state.  \\n  \\n|Action|ThreadState|  \\n|------------|-----------------|  \\n|A thread is created within the common language runtime.|Unstarted|  \\n|Another thread calls the <xref:System.Threading.Thread.Start%2A?displayProperty=fullName> method on the new thread, and the call returns.<br /><br /> The <xref:System.Threading.Thread.Start%2A> method does not return until the new thread has started running. There is no way to know at what point the new thread will start running, during the call to <xref:System.Threading.Thread.Start%2A>.|Running|  \\n|The thread calls <xref:System.Threading.Thread.Sleep%2A>|WaitSleepJoin|  \\n|The thread calls <xref:System.Threading.Monitor.Wait%2A> on another object.|WaitSleepJoin|  \\n|The thread calls <xref:System.Threading.Thread.Join%2A> on another thread.|WaitSleepJoin|  \\n|Another thread calls <xref:System.Threading.Thread.Interrupt%2A>|Running|  \\n|Another thread calls <xref:System.Threading.Thread.Suspend%2A>|SuspendRequested|  \\n|The thread responds to a <xref:System.Threading.Thread.Suspend%2A> request.|Suspended|  \\n|Another thread calls <xref:System.Threading.Thread.Resume%2A>|Running|  \\n|Another thread calls <xref:System.Threading.Thread.Abort%2A>|AbortRequested|  \\n|The thread responds to a <xref:System.Threading.Thread.Abort%2A> request.|Stopped|  \\n|A thread is terminated.|Stopped|  \\n  \\n In addition to the states noted above, there is also the `Background` state, which indicates whether the thread is running in the background or foreground.  \\n  \\n A thread can be in more than one state at a given time. For example, if a thread is blocked on a call to <xref:System.Threading.Monitor.Wait%2A>, and another thread calls <xref:System.Threading.Thread.Abort%2A> on the blocked thread, the blocked thread will be in both the `WaitSleepJoin` and the `AbortRequested` states at the same time. In this case, as soon as the thread returns from the call to <xref:System.Threading.Monitor.Wait%2A> or is interrupted, it will receive the <xref:System.Threading.ThreadAbortException> to begin aborting.  \\n  \\n The <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> property of a thread provides the current state of a thread. Applications must use a bitmask to determine whether a thread is running. Since the value for `Running` is zero (0), test whether a thread is running by using C# code such as `(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0` or Visual Basic code such as `(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`.\"\n  syntax:\n    content: >-\n      [System.Flags]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum ThreadState\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.FlagsAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ThreadState.Aborted\n  commentId: F:System.Threading.ThreadState.Aborted\n  id: Aborted\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Aborted\n  nameWithType: ThreadState.Aborted\n  fullName: ThreadState.Aborted\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread state includes <xref href=\"System.Threading.ThreadState.AbortRequested\"></xref> and the thread is now dead, but its state has not yet changed to <xref href=\"System.Threading.ThreadState.Stopped\"></xref>.\n  syntax:\n    content: Aborted\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.AbortRequested\n  commentId: F:System.Threading.ThreadState.AbortRequested\n  id: AbortRequested\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: AbortRequested\n  nameWithType: ThreadState.AbortRequested\n  fullName: ThreadState.AbortRequested\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The <xref href=\"System.Threading.Thread.Abort(System.Object)\"></xref> method has been invoked on the thread, but the thread has not yet received the pending <xref href=\"System.Threading.ThreadAbortException\"></xref> that will attempt to terminate it.\n  syntax:\n    content: AbortRequested\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.Background\n  commentId: F:System.Threading.ThreadState.Background\n  id: Background\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Background\n  nameWithType: ThreadState.Background\n  fullName: ThreadState.Background\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread is being executed as a background thread, as opposed to a foreground thread. This state is controlled by setting the <xref href=\"System.Threading.Thread.IsBackground\"></xref> property.\n  syntax:\n    content: Background\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.Running\n  commentId: F:System.Threading.ThreadState.Running\n  id: Running\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Running\n  nameWithType: ThreadState.Running\n  fullName: ThreadState.Running\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread has been started, it is not blocked, and there is no pending <xref href=\"System.Threading.ThreadAbortException\"></xref>.\n  syntax:\n    content: Running\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.Stopped\n  commentId: F:System.Threading.ThreadState.Stopped\n  id: Stopped\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Stopped\n  nameWithType: ThreadState.Stopped\n  fullName: ThreadState.Stopped\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread has stopped.\n  syntax:\n    content: Stopped\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.StopRequested\n  commentId: F:System.Threading.ThreadState.StopRequested\n  id: StopRequested\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: StopRequested\n  nameWithType: ThreadState.StopRequested\n  fullName: ThreadState.StopRequested\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread is being requested to stop. This is for internal use only.\n  syntax:\n    content: StopRequested\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.Suspended\n  commentId: F:System.Threading.ThreadState.Suspended\n  id: Suspended\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Suspended\n  nameWithType: ThreadState.Suspended\n  fullName: ThreadState.Suspended\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread has been suspended.\n  syntax:\n    content: Suspended\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.SuspendRequested\n  commentId: F:System.Threading.ThreadState.SuspendRequested\n  id: SuspendRequested\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: SuspendRequested\n  nameWithType: ThreadState.SuspendRequested\n  fullName: ThreadState.SuspendRequested\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread is being requested to suspend.\n  syntax:\n    content: SuspendRequested\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.Unstarted\n  commentId: F:System.Threading.ThreadState.Unstarted\n  id: Unstarted\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: Unstarted\n  nameWithType: ThreadState.Unstarted\n  fullName: ThreadState.Unstarted\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The <xref href=\"System.Threading.Thread.Start\"></xref> method has not been invoked on the thread.\n  syntax:\n    content: Unstarted\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\n- uid: System.Threading.ThreadState.WaitSleepJoin\n  commentId: F:System.Threading.ThreadState.WaitSleepJoin\n  id: WaitSleepJoin\n  parent: System.Threading.ThreadState\n  langs:\n  - csharp\n  name: WaitSleepJoin\n  nameWithType: ThreadState.WaitSleepJoin\n  fullName: ThreadState.WaitSleepJoin\n  type: Field\n  assemblies:\n  - System.Threading.Thread\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: The thread is blocked. This could be the result of calling <xref href=\"System.Threading.Thread.Sleep(System.Int32)\"></xref> or <xref href=\"System.Threading.Thread.Join\"></xref>, of requesting a lock — for example, by calling <xref href=\"System.Threading.Monitor.Enter(System.Object)\"></xref> or <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)\"></xref> — or of waiting on a thread synchronization object such as <xref href=\"System.Threading.ManualResetEvent\"></xref>.\n  syntax:\n    content: WaitSleepJoin\n    return:\n      type: System.Threading.ThreadState\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ThreadState.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Threading.ThreadState.Aborted\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Aborted\n  nameWithType: ThreadState.Aborted\n  fullName: ThreadState.Aborted\n- uid: System.Threading.ThreadState\n  parent: System.Threading\n  isExternal: false\n  name: ThreadState\n  nameWithType: ThreadState\n  fullName: System.Threading.ThreadState\n- uid: System.Threading.ThreadState.AbortRequested\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: AbortRequested\n  nameWithType: ThreadState.AbortRequested\n  fullName: ThreadState.AbortRequested\n- uid: System.Threading.ThreadState.Background\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Background\n  nameWithType: ThreadState.Background\n  fullName: ThreadState.Background\n- uid: System.Threading.ThreadState.Running\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Running\n  nameWithType: ThreadState.Running\n  fullName: ThreadState.Running\n- uid: System.Threading.ThreadState.Stopped\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Stopped\n  nameWithType: ThreadState.Stopped\n  fullName: ThreadState.Stopped\n- uid: System.Threading.ThreadState.StopRequested\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: StopRequested\n  nameWithType: ThreadState.StopRequested\n  fullName: ThreadState.StopRequested\n- uid: System.Threading.ThreadState.Suspended\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Suspended\n  nameWithType: ThreadState.Suspended\n  fullName: ThreadState.Suspended\n- uid: System.Threading.ThreadState.SuspendRequested\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: SuspendRequested\n  nameWithType: ThreadState.SuspendRequested\n  fullName: ThreadState.SuspendRequested\n- uid: System.Threading.ThreadState.Unstarted\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: Unstarted\n  nameWithType: ThreadState.Unstarted\n  fullName: ThreadState.Unstarted\n- uid: System.Threading.ThreadState.WaitSleepJoin\n  parent: System.Threading.ThreadState\n  isExternal: false\n  name: WaitSleepJoin\n  nameWithType: ThreadState.WaitSleepJoin\n  fullName: ThreadState.WaitSleepJoin\n"}