### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.ChangeMonitor
  commentId: T:System.Runtime.Caching.ChangeMonitor
  id: ChangeMonitor
  children:
  - System.Runtime.Caching.ChangeMonitor.#ctor
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  - System.Runtime.Caching.ChangeMonitor.UniqueId
  langs:
  - csharp
  name: ChangeMonitor
  nameWithType: ChangeMonitor
  fullName: System.Runtime.Caching.ChangeMonitor
  type: Class
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.
  remarks: "The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations. A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on. For example, the item can be a file or data entity whose contents are cached. If the file or data entity is updated, the associated cache entry must be changed also. Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.  \n  \n A dependency change is a change in the state of a dependency. In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.  \n  \n Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores. For example, there are cache implementations for a file system, physical memory, or a database. The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.  \n  \n The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:  \n  \n-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  \n  \n-   <xref:System.Runtime.Caching.FileChangeMonitor>  \n  \n-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  \n  \n-   <xref:System.Runtime.Caching.SqlChangeMonitor>  \n  \n Each of these classes works with different types of dependencies. For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on."
  syntax:
    content: 'public abstract class ChangeMonitor : IDisposable'
  inheritance:
  - System.Object
  derivedClasses:
  - System.Runtime.Caching.CacheEntryChangeMonitor
  - System.Runtime.Caching.FileChangeMonitor
  - System.Runtime.Caching.SqlChangeMonitor
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  commentId: M:System.Runtime.Caching.ChangeMonitor.#ctor
  id: '#ctor'
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: ChangeMonitor.ChangeMonitor()
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Initializes a new instance of the <xref href="System.Runtime.Caching.ChangeMonitor"></xref> class. This constructor is called from constructors in derived classes to initialize the base class.
  remarks: The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor. However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor. For more information, see the Notes for Inheritors section.
  syntax:
    content: protected ChangeMonitor ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  commentId: M:System.Runtime.Caching.ChangeMonitor.Dispose
  id: Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: ChangeMonitor.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Releases all resources that are used by the current instance of the <xref href="System.Runtime.Caching.ChangeMonitor"></xref> class.
  remarks: "The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called. Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect. After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.  \n  \n The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance. The following are the rules for calling the dispose method:  \n  \n-   Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.  \n  \n-   Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.  \n  \n-   After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed. As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.  \n  \n-   Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:  \n  \n    -   Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.  \n  \n    -   The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails. When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.  \n  \n    -   If the cache entry is removed, the cache implementation must also dispose the dependency.  \n  \n The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.  \n  \n> [!NOTE]\n>  This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.  \n  \n When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.  \n  \n> [!NOTE]\n>  Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method. However, you cannot prevent users from calling the method. Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked. In that case, the cache entry is notified as if the dependency has changed.  \n  \n To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Initialization is not complete in the derived change-monitor class that called the base <xref href="System.Runtime.Caching.ChangeMonitor.Dispose"></xref> method.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  commentId: M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: ChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Releases all managed and unmanaged resources and any references to the <xref href="System.Runtime.Caching.ChangeMonitor"></xref> instance. This overload must be implemented by derived change-monitor classes.
  remarks: When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected. It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.
  syntax:
    content: protected abstract void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release managed and unmanaged resources and any references to a <xref href="System.Runtime.Caching.ChangeMonitor"></xref> instance; `false` to release only unmanaged resources. When `false` is passed, the <xref href="System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)"></xref> method is called by a `finalizer` thread and any external managed references are likely no longer valid because they have already been garbage collected.'
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  commentId: P:System.Runtime.Caching.ChangeMonitor.HasChanged
  id: HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: ChangeMonitor.HasChanged
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets a value that indicates that the state that is monitored by the <xref href="System.Runtime.Caching.ChangeMonitor"></xref> class has changed.
  remarks: "You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.  \n  \n The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called). After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.  \n  \n> [!NOTE]\n>  Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed. However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property. Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed."
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: '`true` if the state that is monitored by the <xref href="System.Runtime.Caching.ChangeMonitor"></xref> instance has changed; otherwise, `false`.'
  overload: System.Runtime.Caching.ChangeMonitor.HasChanged*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  commentId: M:System.Runtime.Caching.ChangeMonitor.InitializationComplete
  id: InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: ChangeMonitor.InitializationComplete()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Called from the constructor of derived classes to indicate that initialization is finished.
  remarks: "If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.  \n  \n When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor. As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method. If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance."
  syntax:
    content: protected void InitializationComplete ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  commentId: P:System.Runtime.Caching.ChangeMonitor.IsDisposed
  id: IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: ChangeMonitor.IsDisposed
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets a value that indicates that the derived instance of a <xref href="System.Runtime.Caching.ChangeMonitor"></xref> class is disposed.
  remarks: The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.
  syntax:
    content: public bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: '`true` if the instance is disposed; otherwise, `false`.'
  overload: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  commentId: M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  id: NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Called by Cache implementers to register a callback and notify an <xref href="System.Runtime.Caching.ObjectCache"></xref> instance through the <xref href="System.Runtime.Caching.OnChangedCallback"></xref> delegate when a dependency has changed.
  remarks: "Cache implementers use this method to wire themselves up to a change monitor. If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item. A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.  \n  \n Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information. The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.  \n  \n> [!NOTE]\n>  The base cache extensibility API has no requirement for explicit dependency on the type of state.  \n  \n The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called. If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method. This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed. If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.  \n  \n The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls."
  syntax:
    content: public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);
    parameters:
    - id: onChangedCallback
      type: System.Runtime.Caching.OnChangedCallback
      description: A reference to a method that is invoked when a dependency has changed.
  overload: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The callback method has already been invoked.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>onChangedCallback</code> is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  commentId: M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  id: OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: ChangeMonitor.OnChanged(Object)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Called by derived classes to raise the event when a dependency changes.
  remarks: "Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur. The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.  \n  \n If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation. Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked."
  syntax:
    content: protected void OnChanged (object state);
    parameters:
    - id: state
      type: System.Object
      description: The data for the change event. This value can be `null`.
  overload: System.Runtime.Caching.ChangeMonitor.OnChanged*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  commentId: P:System.Runtime.Caching.ChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: ChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: Gets a value that represents the <xref href="System.Runtime.Caching.ChangeMonitor"></xref> class instance.
  remarks: The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance. The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string. The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.
  syntax:
    content: public abstract string UniqueId { get; }
    return:
      type: System.String
      description: The identifier for a change-monitor instance.
  overload: System.Runtime.Caching.ChangeMonitor.UniqueId*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
  ms.technology:
  - dotnet-standard
  ms.author: riande
  manager: ghogen
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: ChangeMonitor.ChangeMonitor()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: ChangeMonitor.Dispose()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: ChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: ChangeMonitor.InitializationComplete()
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
- uid: System.Runtime.Caching.OnChangedCallback
  parent: System.Runtime.Caching
  isExternal: false
  name: OnChangedCallback
  nameWithType: OnChangedCallback
  fullName: System.Runtime.Caching.OnChangedCallback
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: ChangeMonitor.OnChanged(Object)
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: ChangeMonitor.UniqueId
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.ChangeMonitor.Dispose*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: ChangeMonitor.Dispose
  fullName: ChangeMonitor.Dispose
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Runtime.Caching.ChangeMonitor.#ctor*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor
  nameWithType: ChangeMonitor.ChangeMonitor
  fullName: ChangeMonitor.ChangeMonitor
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: ChangeMonitor.HasChanged
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete
  nameWithType: ChangeMonitor.InitializationComplete
  fullName: ChangeMonitor.InitializationComplete
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: ChangeMonitor.IsDisposed
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged
  nameWithType: ChangeMonitor.NotifyOnChanged
  fullName: ChangeMonitor.NotifyOnChanged
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged
  nameWithType: ChangeMonitor.OnChanged
  fullName: ChangeMonitor.OnChanged
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: ChangeMonitor.UniqueId
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.Caching/ChangeMonitor.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
