### YamlMime:ManagedReference
items:
- uid: System.Windows.EventManager
  commentId: T:System.Windows.EventManager
  id: EventManager
  children:
  - System.Windows.EventManager.GetRoutedEvents
  - System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  langs:
  - csharp
  name: EventManager
  nameWithType: EventManager
  fullName: System.Windows.EventManager
  type: Class
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: Provides event-related utility methods that register routed events for class owners and add class handlers.
  remarks: "This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.  \n  \n The second most common [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>. You use this method to enable class handling of a routed event on the class, or an attached event. For details, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md)."
  example:
  - "The following example show how to use this class to register a new routed event as a class member, along with the routed event \"wrapper\" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.  \n  \n [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]\n [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]"
  syntax:
    content: public static class EventManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.EventManager.GetRoutedEvents
  commentId: M:System.Windows.EventManager.GetRoutedEvents
  id: GetRoutedEvents
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: EventManager.GetRoutedEvents()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: Returns identifiers for routed events that have been registered to the event system.
  remarks: More <xref:System.Windows.RoutedEvent> objects can be registered later. This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime. The collection returned might be quite large. Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)], the collection count is in the high hundreds.
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEvents ();
    parameters: []
    return:
      type: System.Windows.RoutedEvent[]
      description: An array of type <xref href="System.Windows.RoutedEvent"></xref> that contains the registered objects.
  overload: System.Windows.EventManager.GetRoutedEvents*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  commentId: M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  id: GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: EventManager.GetRoutedEventsForOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: Finds all routed event identifiers for events that are registered with the provided owner type.
  syntax:
    content: public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: The type to start the search with. Base classes are included in the search.
    return:
      type: System.Windows.RoutedEvent[]
      description: An array of matching routed event identifiers if any match is found; otherwise, `null`.
  overload: System.Windows.EventManager.GetRoutedEventsForOwner*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  commentId: M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type, RoutedEvent, Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate)
  fullName: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: Registers a class handler for a particular routed event.
  remarks: "Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing. A class handler is like a static handler that exists for all instances of the class. Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.  \n  \n Class handlers are invoked before instance handlers. You can implement a class handler that has the behavior of marking the event as handled. Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.  \n  \n Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods. By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors. These class handling methods typically exist for input events and have names that start with \"On\" and end with the name of the event being class handled.  \n  \n For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  \n  \n Using this signature, class handlers will be registered to invoke only in response to unhandled events. You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`."
  example:
  - "The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling <xref:System.Windows.EventManager.RegisterClassHandler%2A>.  \n  \n [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]\n [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]"
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: classType
      type: System.Type
      description: The type of the class that is declaring class handling.
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: The routed event identifier of the event to handle.
    - id: handler
      type: System.Delegate
      description: A reference to the class handler implementation.
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  commentId: M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterClassHandler(Type, RoutedEvent, Delegate, Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate, Boolean)
  fullName: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate, Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.
  remarks: "Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing. A class handler is like a static handler that exists for all instances of the class. Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.  \n  \n Class handlers are invoked before instance handlers. You can implement a class handler that has the behavior of marking the event as handled. Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.  \n  \n Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods. By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors. These class handling methods typically exist for input events and have names that start with \"On\" and end with the name of the event being class handled.  \n  \n For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](~/docs/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling.md).  \n  \n Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`. Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events."
  syntax:
    content: public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: classType
      type: System.Type
      description: The type of the class that is declaring class handling.
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: The routed event identifier of the event to handle.
    - id: handler
      type: System.Delegate
      description: A reference to the class handler implementation.
    - id: handledEventsToo
      type: System.Boolean
      description: '`true` to invoke this class handler even if arguments of the routed event have been marked as handled; `false` to retain the default behavior of not invoking the handler on any marked-handled event.'
  overload: System.Windows.EventManager.RegisterClassHandler*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  commentId: M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  id: RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  langs:
  - csharp
  name: RegisterRoutedEvent(String, RoutingStrategy, Type, Type)
  nameWithType: EventManager.RegisterRoutedEvent(String, RoutingStrategy, Type, Type)
  fullName: EventManager.RegisterRoutedEvent(String, RoutingStrategy, Type, Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.
  remarks: "Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field. This field should be stored within the owner type.  \n  \n There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class. For more information, see [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md)."
  syntax:
    content: public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: The name of the routed event. The name must be unique within the owner type and cannot be `null` or an empty string.
    - id: routingStrategy
      type: System.Windows.RoutingStrategy
      description: The routing strategy of the event as a value of the enumeration.
    - id: handlerType
      type: System.Type
      description: The type of the event handler. This must be a delegate type and cannot be `null`.
    - id: ownerType
      type: System.Type
      description: The owner class type of the routed event. This cannot be `null`.
    return:
      type: System.Windows.RoutedEvent
      description: The identifier for the newly registered routed event. This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event. The routed event identifier is also used for other event system [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)].
  overload: System.Windows.EventManager.RegisterRoutedEvent*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
  ms.technology:
  - dotnet-wpf
  author: stevehoag
  ms.author: shoag
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.EventManager.GetRoutedEvents
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents()
  nameWithType: EventManager.GetRoutedEvents()
  fullName: EventManager.GetRoutedEvents()
- uid: System.Windows.RoutedEvent
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.RoutedEvent[]
  parent: System.Windows
  isExternal: false
  name: RoutedEvent[]
  nameWithType: RoutedEvent[]
  fullName: System.Windows.RoutedEvent[]
  spec.csharp:
  - uid: System.Windows.RoutedEvent
    name: RoutedEvent
    nameWithType: RoutedEvent
    fullName: System.Windows.RoutedEvent
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner(Type)
  nameWithType: EventManager.GetRoutedEventsForOwner(Type)
  fullName: EventManager.GetRoutedEventsForOwner(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type, RoutedEvent, Delegate)
  nameWithType: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate)
  fullName: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate)
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler(Type, RoutedEvent, Delegate, Boolean)
  nameWithType: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate, Boolean)
  fullName: EventManager.RegisterClassHandler(Type, RoutedEvent, Delegate, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent(String, RoutingStrategy, Type, Type)
  nameWithType: EventManager.RegisterRoutedEvent(String, RoutingStrategy, Type, Type)
  fullName: EventManager.RegisterRoutedEvent(String, RoutingStrategy, Type, Type)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.EventManager.GetRoutedEvents*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEvents
  nameWithType: EventManager.GetRoutedEvents
  fullName: EventManager.GetRoutedEvents
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
- uid: System.Windows.EventManager.GetRoutedEventsForOwner*
  parent: System.Windows.EventManager
  isExternal: false
  name: GetRoutedEventsForOwner
  nameWithType: EventManager.GetRoutedEventsForOwner
  fullName: EventManager.GetRoutedEventsForOwner
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
- uid: System.Windows.EventManager.RegisterClassHandler*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterClassHandler
  nameWithType: EventManager.RegisterClassHandler
  fullName: EventManager.RegisterClassHandler
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
- uid: System.Windows.EventManager.RegisterRoutedEvent*
  parent: System.Windows.EventManager
  isExternal: false
  name: RegisterRoutedEvent
  nameWithType: EventManager.RegisterRoutedEvent
  fullName: EventManager.RegisterRoutedEvent
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/EventManager.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
