{"nodes":[{"content":"Provides data for the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event.","nodes":[{"pos":[0,87],"content":"Provides data for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.Control.KeyPress\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides data for the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event."}],"pos":[565,653],"yaml":true},{"content":"A <xref:System.Windows.Forms.KeyPressEventArgs> specifies the character that is composed when the user presses a key. For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K.  \n  \n A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key. Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>. The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key. When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats. One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release.  \n  \n With each <xref:System.Windows.Forms.Control.KeyPress> event, a <xref:System.Windows.Forms.KeyPressEventArgs> is passed. A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event. A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key. (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)  \n  \n Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event. This keeps the control from processing the key press.  \n  \n> [!NOTE]\n>  Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>. For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called. In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead.  \n  \n For information about the event model, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).","nodes":[{"pos":[0,257],"content":"A <xref:System.Windows.Forms.KeyPressEventArgs> specifies the character that is composed when the user presses a key. For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K.","nodes":[{"content":"A <xref:System.Windows.Forms.KeyPressEventArgs> specifies the character that is composed when the user presses a key. For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K.","pos":[0,257],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyPressEventArgs&gt;</ph> specifies the character that is composed when the user presses a key.","pos":[0,117],"source":"A <xref:System.Windows.Forms.KeyPressEventArgs> specifies the character that is composed when the user presses a key."},{"content":"For example, when the user presses SHIFT + K, the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> property returns an uppercase K.","pos":[118,257],"source":" For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K."}]}]},{"pos":[264,1040],"content":"A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key. Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>. The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key. When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats. One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release.","nodes":[{"content":"A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key. Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>. The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key. When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats. One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release.","pos":[0,776],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event occurs when the user presses a key.","pos":[0,88],"source":"A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key."},{"content":"Two events that are closely related to the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event are <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph>.","pos":[89,277],"source":" Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> event precedes each <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event when the user presses a key, and a <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event occurs when the user releases a key.","pos":[278,516],"source":" The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key."},{"content":"When the user holds down a key, duplicate <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> events occur each time the character repeats.","pos":[517,697],"source":" When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats."},{"content":"One <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event is generated upon release.","pos":[698,776],"source":" One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release."}]}]},{"pos":[1047,1637],"content":"With each <xref:System.Windows.Forms.Control.KeyPress> event, a <xref:System.Windows.Forms.KeyPressEventArgs> is passed. A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event. A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key. (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)","nodes":[{"content":"With each <xref:System.Windows.Forms.Control.KeyPress> event, a <xref:System.Windows.Forms.KeyPressEventArgs> is passed. A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event. A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key. (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)","pos":[0,590],"nodes":[{"content":"With each <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event, a <ph id=\"ph2\">&lt;xref:System.Windows.Forms.KeyPressEventArgs&gt;</ph> is passed.","pos":[0,120],"source":"With each <xref:System.Windows.Forms.Control.KeyPress> event, a <xref:System.Windows.Forms.KeyPressEventArgs> is passed."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyEventArgs&gt;</ph> is passed with each <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Forms.Control.KeyUp&gt;</ph> event.","pos":[121,280],"source":" A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyEventArgs&gt;</ph> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key.","pos":[281,418],"source":" A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key."},{"content":"(This modifier information can also be obtained through the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.ModifierKeys%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control&gt;</ph> class.)","pos":[419,590],"source":" (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)"}]}]},{"pos":[1644,1800],"content":"Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event. This keeps the control from processing the key press.","nodes":[{"content":"Set <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> to cancel the <ph id=\"ph3\">`KeyPress`</ph> event.","pos":[0,102],"source":"Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event."},{"content":"This keeps the control from processing the key press.","pos":[103,156]}]},{"pos":[1808,2231],"content":"[!NOTE]\n Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>. For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called. In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead.","leadings":["","> "],"nodes":[{"content":" Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>. For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called. In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead.","pos":[8,421],"nodes":[{"content":"Some controls will process certain key strokes on <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph>.","pos":[1,95],"source":" Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>."},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Windows.Forms.RichTextBox&gt;</ph> processes the Enter key before <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> is called.","pos":[96,235],"source":" For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called."},{"content":"In such cases, you cannot cancel the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.KeyPress&gt;</ph> event, and must cancel the key stroke from <ph id=\"ph2\">&lt;xref:System.Windows.Forms.Control.KeyDown&gt;</ph> instead.","pos":[236,413],"source":" In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead."}]}]},{"pos":[2238,2362],"content":"For information about the event model, see <bpt id=\"p1\">[</bpt>Events<ept id=\"p1\">](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)</ept>.","source":"For information about the event model, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f)."}],"pos":[664,3040],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Forms.KeyPressEventArgs\"></xref> class.","nodes":[{"pos":[0,100],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.KeyPressEventArgs\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Forms.KeyPressEventArgs\"></xref> class."}],"pos":[6259,6360],"yaml":true},{"content":"Use the <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> property to get the current state of the modifier keys.","nodes":[{"pos":[0,140],"content":"Use the <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> property to get the current state of the modifier keys.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName&gt;</ph> property to get the current state of the modifier keys.","pos":[0,140],"source":"Use the <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> property to get the current state of the modifier keys."}]}],"pos":[6371,6512],"yaml":true,"extradata":"MT"},{"content":"The ASCII character corresponding to the key the user pressed.","nodes":[{"pos":[0,62],"content":"The ASCII character corresponding to the key the user pressed.","nodes":[{"content":"The ASCII character corresponding to the key the user pressed.","pos":[0,62]}]}],"pos":[6760,6823],"yaml":true},{"content":"Gets or sets a value indicating whether the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event was handled.","nodes":[{"pos":[0,121],"content":"Gets or sets a value indicating whether the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Forms.Control.KeyPress\"&gt;&lt;/xref&gt;</ph> event was handled.","source":"Gets or sets a value indicating whether the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event was handled."}],"pos":[7832,7954],"yaml":true},{"content":"If the event is not handled, it will be sent to the operating system for default processing. Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event.","nodes":[{"pos":[0,195],"content":"If the event is not handled, it will be sent to the operating system for default processing. Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event.","nodes":[{"content":"If the event is not handled, it will be sent to the operating system for default processing.","pos":[0,92]},{"content":"Set <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph> to cancel the <ph id=\"ph3\">`KeyPress`</ph> event.","pos":[93,195],"source":" Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event."}]}],"pos":[7965,8161],"yaml":true,"extradata":"MT"},{"content":"`true` if the event is handled; otherwise, `false`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`true`</ph> if the event is handled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the event is handled; otherwise, `false`."}],"pos":[9024,9078],"yaml":true},{"content":"Gets or sets the character corresponding to the key pressed.","nodes":[{"pos":[0,60],"content":"Gets or sets the character corresponding to the key pressed.","nodes":[{"content":"Gets or sets the character corresponding to the key pressed.","pos":[0,60]}]}],"pos":[10067,10128],"yaml":true},{"content":"Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances. For example, you can use <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.  \n  \n You can get or set the following keys:  \n  \n-   a-z, A-Z.  \n  \n-   CTRL.  \n  \n-   Punctuation marks.  \n  \n-   Number keys, both across the top of the keyboard and on the numeric keypad.  \n  \n-   ENTER.  \n  \n You cannot get or set the following keys:  \n  \n-   The TAB key.  \n  \n-   INSERT and DELETE.  \n  \n-   HOME.  \n  \n-   END.  \n  \n-   PAGE UP and PAGE DOWN.  \n  \n-   F1-F2.  \n  \n-   ALT.  \n  \n-   Arrow keys.  \n  \n> [!NOTE]\n>  For information about how to detect any of the non-character keys mentioned above, see the <xref:System.Windows.Forms.KeyEventArgs> class.  \n  \n-","nodes":[{"pos":[0,470],"content":"Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances. For example, you can use <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.","nodes":[{"content":"Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances. For example, you can use <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.","pos":[0,470],"nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances.","pos":[0,169],"source":"Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances."},{"content":"For example, you can use <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A&gt;</ph> to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.","pos":[170,470],"source":" For example, you can use <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations."}]}]},{"pos":[477,515],"content":"You can get or set the following keys:","nodes":[{"content":"You can get or set the following keys:","pos":[0,38]}]},{"pos":[525,534],"content":"a-z, A-Z.","nodes":[{"content":"a-z, A-Z.","pos":[0,9]}]},{"pos":[544,549],"content":"CTRL.","nodes":[{"content":"CTRL.","pos":[0,5]}]},{"pos":[559,577],"content":"Punctuation marks.","nodes":[{"content":"Punctuation marks.","pos":[0,18]}]},{"pos":[587,662],"content":"Number keys, both across the top of the keyboard and on the numeric keypad.","nodes":[{"content":"Number keys, both across the top of the keyboard and on the numeric keypad.","pos":[0,75]}]},{"pos":[672,678],"content":"ENTER.","nodes":[{"content":"ENTER.","pos":[0,6]}]},{"pos":[685,726],"content":"You cannot get or set the following keys:","nodes":[{"content":"You cannot get or set the following keys:","pos":[0,41]}]},{"pos":[736,748],"content":"The TAB key.","nodes":[{"content":"The TAB key.","pos":[0,12]}]},{"pos":[758,776],"content":"INSERT and DELETE.","nodes":[{"content":"INSERT and DELETE.","pos":[0,18]}]},{"pos":[786,791],"content":"HOME.","nodes":[{"content":"HOME.","pos":[0,5]}]},{"pos":[801,805],"content":"END.","nodes":[{"content":"END.","pos":[0,4]}]},{"pos":[815,837],"content":"PAGE UP and PAGE DOWN.","nodes":[{"content":"PAGE UP and PAGE DOWN.","pos":[0,22]}]},{"pos":[847,853],"content":"F1-F2.","nodes":[{"content":"F1-F2.","pos":[0,6]}]},{"pos":[863,867],"content":"ALT.","nodes":[{"content":"ALT.","pos":[0,4]}]},{"pos":[877,888],"content":"Arrow keys.","nodes":[{"content":"Arrow keys.","pos":[0,11]}]},{"pos":[896,1045],"content":"[!NOTE]\n For information about how to detect any of the non-character keys mentioned above, see the <xref:System.Windows.Forms.KeyEventArgs> class.","leadings":["","> "],"nodes":[{"content":"For information about how to detect any of the non-character keys mentioned above, see the <ph id=\"ph1\">&lt;xref:System.Windows.Forms.KeyEventArgs&gt;</ph> class.","pos":[9,147],"source":" For information about how to detect any of the non-character keys mentioned above, see the <xref:System.Windows.Forms.KeyEventArgs> class."}]}],"pos":[10139,11229],"yaml":true,"extradata":"MT"},{"content":"The ASCII character that is composed. For example, if the user presses SHIFT + K, this property returns an uppercase K.","nodes":[{"pos":[0,119],"content":"The ASCII character that is composed. For example, if the user presses SHIFT + K, this property returns an uppercase K.","nodes":[{"content":"The ASCII character that is composed. For example, if the user presses SHIFT + K, this property returns an uppercase K.","pos":[0,119],"nodes":[{"content":"The ASCII character that is composed.","pos":[0,37]},{"content":"For example, if the user presses SHIFT + K, this property returns an uppercase K.","pos":[38,119]}]}]}],"pos":[12086,12206],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Forms.KeyPressEventArgs\n  commentId: T:System.Windows.Forms.KeyPressEventArgs\n  id: KeyPressEventArgs\n  children:\n  - System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)\n  - System.Windows.Forms.KeyPressEventArgs.Handled\n  - System.Windows.Forms.KeyPressEventArgs.KeyChar\n  langs:\n  - csharp\n  name: KeyPressEventArgs\n  nameWithType: KeyPressEventArgs\n  fullName: System.Windows.Forms.KeyPressEventArgs\n  type: Class\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Provides data for the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event.\n  remarks: \"A <xref:System.Windows.Forms.KeyPressEventArgs> specifies the character that is composed when the user presses a key. For example, when the user presses SHIFT + K, the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property returns an uppercase K.  \\n  \\n A <xref:System.Windows.Forms.Control.KeyPress> event occurs when the user presses a key. Two events that are closely related to the <xref:System.Windows.Forms.Control.KeyPress> event are <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyDown>. The <xref:System.Windows.Forms.Control.KeyDown> event precedes each <xref:System.Windows.Forms.Control.KeyPress> event when the user presses a key, and a <xref:System.Windows.Forms.Control.KeyUp> event occurs when the user releases a key. When the user holds down a key, duplicate <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyPress> events occur each time the character repeats. One <xref:System.Windows.Forms.Control.KeyUp> event is generated upon release.  \\n  \\n With each <xref:System.Windows.Forms.Control.KeyPress> event, a <xref:System.Windows.Forms.KeyPressEventArgs> is passed. A <xref:System.Windows.Forms.KeyEventArgs> is passed with each <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> event. A <xref:System.Windows.Forms.KeyEventArgs> specifies whether any modifier keys (CTRL, SHIFT, or ALT) were pressed along with another key. (This modifier information can also be obtained through the <xref:System.Windows.Forms.Control.ModifierKeys%2A> property of the <xref:System.Windows.Forms.Control> class.)  \\n  \\n Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event. This keeps the control from processing the key press.  \\n  \\n> [!NOTE]\\n>  Some controls will process certain key strokes on <xref:System.Windows.Forms.Control.KeyDown>. For example, <xref:System.Windows.Forms.RichTextBox> processes the Enter key before <xref:System.Windows.Forms.Control.KeyPress> is called. In such cases, you cannot cancel the <xref:System.Windows.Forms.Control.KeyPress> event, and must cancel the key stroke from <xref:System.Windows.Forms.Control.KeyDown> instead.  \\n  \\n For information about the event model, see [Events](http://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f).\"\n  example:\n  - \"The following example illustrates using the <xref:System.Windows.Forms.KeyPressEventArgs> to count keys as they are pressed and to display the results after each key press. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> is then set to true to keep the operating system from further processing the key. The example assumes a form with a <xref:System.Windows.Forms.TextBox> placed on it.  \\n  \\n [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]\\n [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  \\n  \\n You must create a new instance of this class. You must also set the event handler. You can do this in the constructor for your class.  \\n  \\n [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]\\n [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]\\n [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  \\n  \\n When the specified event is raised in the control, the attached method is called and the application can execute code in response to the event.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class KeyPressEventArgs : EventArgs\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  implements: []\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyPressEventArgs.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)\n  commentId: M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)\n  id: '#ctor(System.Char)'\n  parent: System.Windows.Forms.KeyPressEventArgs\n  langs:\n  - csharp\n  name: KeyPressEventArgs(Char)\n  nameWithType: KeyPressEventArgs.KeyPressEventArgs(Char)\n  fullName: KeyPressEventArgs.KeyPressEventArgs(Char)\n  type: Constructor\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Forms.KeyPressEventArgs\"></xref> class.\n  remarks: Use the <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=fullName> property to get the current state of the modifier keys.\n  example:\n  - The following example displays a message box that shows the current state of the SHIFT key.\n  syntax:\n    content: public KeyPressEventArgs (char keyChar);\n    parameters:\n    - id: keyChar\n      type: System.Char\n      description: The ASCII character corresponding to the key the user pressed.\n  overload: System.Windows.Forms.KeyPressEventArgs.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyPressEventArgs.xml\n  ms.technology:\n  - dotnet-winforms\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Forms.KeyPressEventArgs.Handled\n  commentId: P:System.Windows.Forms.KeyPressEventArgs.Handled\n  id: Handled\n  parent: System.Windows.Forms.KeyPressEventArgs\n  langs:\n  - csharp\n  name: Handled\n  nameWithType: KeyPressEventArgs.Handled\n  fullName: KeyPressEventArgs.Handled\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets a value indicating whether the <xref href=\"System.Windows.Forms.Control.KeyPress\"></xref> event was handled.\n  remarks: If the event is not handled, it will be sent to the operating system for default processing. Set <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> to `true` to cancel the `KeyPress` event.\n  example:\n  - \"The following example creates a <xref:System.Windows.Forms.TextBox> control. The `keypressed` method uses the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to check whether the ENTER key is pressed. If the ENTER key is pressed, the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> property is set to `true`, which indicates the event is handled.  \\n  \\n [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]\\n [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]\\n [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]\"\n  syntax:\n    content: public bool Handled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the event is handled; otherwise, `false`.'\n  overload: System.Windows.Forms.KeyPressEventArgs.Handled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyPressEventArgs.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Forms.KeyPressEventArgs.KeyChar\n  commentId: P:System.Windows.Forms.KeyPressEventArgs.KeyChar\n  id: KeyChar\n  parent: System.Windows.Forms.KeyPressEventArgs\n  langs:\n  - csharp\n  name: KeyChar\n  nameWithType: KeyPressEventArgs.KeyChar\n  fullName: KeyPressEventArgs.KeyChar\n  type: Property\n  assemblies:\n  - System.Windows.Forms\n  namespace: System.Windows.Forms\n  summary: Gets or sets the character corresponding to the key pressed.\n  remarks: \"Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to modify keystrokes under special run-time circumstances. For example, you can use <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> to disable non-numeric keypresses when the user enters a ZIP code, change all alphabetical keypresses to uppercase in a data entry field, or monitor the keyboard or other key input device for specific key combinations.  \\n  \\n You can get or set the following keys:  \\n  \\n-   a-z, A-Z.  \\n  \\n-   CTRL.  \\n  \\n-   Punctuation marks.  \\n  \\n-   Number keys, both across the top of the keyboard and on the numeric keypad.  \\n  \\n-   ENTER.  \\n  \\n You cannot get or set the following keys:  \\n  \\n-   The TAB key.  \\n  \\n-   INSERT and DELETE.  \\n  \\n-   HOME.  \\n  \\n-   END.  \\n  \\n-   PAGE UP and PAGE DOWN.  \\n  \\n-   F1-F2.  \\n  \\n-   ALT.  \\n  \\n-   Arrow keys.  \\n  \\n> [!NOTE]\\n>  For information about how to detect any of the non-character keys mentioned above, see the <xref:System.Windows.Forms.KeyEventArgs> class.  \\n  \\n-\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Forms.TextBox> control. The `keypressed` method uses the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to check whether the ENTER key pressed. If the ENTER key is pressed, the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> property is set to `true`, which indicates the event is handled.  \\n  \\n [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]\\n [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]\\n [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]\"\n  syntax:\n    content: public char KeyChar { get; set; }\n    return:\n      type: System.Char\n      description: The ASCII character that is composed. For example, if the user presses SHIFT + K, this property returns an uppercase K.\n  overload: System.Windows.Forms.KeyPressEventArgs.KeyChar*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyPressEventArgs.xml\n  ms.technology:\n  - dotnet-winforms\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyPressEventArgs(Char)\n  nameWithType: KeyPressEventArgs.KeyPressEventArgs(Char)\n  fullName: KeyPressEventArgs.KeyPressEventArgs(Char)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Windows.Forms.KeyPressEventArgs.Handled\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: KeyPressEventArgs.Handled\n  fullName: KeyPressEventArgs.Handled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Forms.KeyPressEventArgs.KeyChar\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyChar\n  nameWithType: KeyPressEventArgs.KeyChar\n  fullName: KeyPressEventArgs.KeyChar\n- uid: System.Windows.Forms.KeyPressEventArgs.#ctor*\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyPressEventArgs\n  nameWithType: KeyPressEventArgs.KeyPressEventArgs\n  fullName: KeyPressEventArgs.KeyPressEventArgs\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyPressEventArgs.xml\n- uid: System.Windows.Forms.KeyPressEventArgs.Handled*\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: Handled\n  nameWithType: KeyPressEventArgs.Handled\n  fullName: KeyPressEventArgs.Handled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyPressEventArgs.xml\n- uid: System.Windows.Forms.KeyPressEventArgs.KeyChar*\n  parent: System.Windows.Forms.KeyPressEventArgs\n  isExternal: false\n  name: KeyChar\n  nameWithType: KeyPressEventArgs.KeyChar\n  fullName: KeyPressEventArgs.KeyChar\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Forms/KeyPressEventArgs.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: false\n  name: Empty\n  nameWithType: EventArgs.Empty\n  fullName: EventArgs.Empty\n"}