### YamlMime:ManagedReference
items:
- uid: System.AddIn.Pipeline.CollectionAdapters
  commentId: T:System.AddIn.Pipeline.CollectionAdapters
  id: CollectionAdapters
  children:
  - System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})
  - System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  - System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})
  - System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  langs:
  - csharp
  name: CollectionAdapters
  nameWithType: CollectionAdapters
  fullName: System.AddIn.Pipeline.CollectionAdapters
  type: Class
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: Enables collections to be passed between an add-in and its host application.
  remarks: "This class provides methods that enable an <xref:System.Collections.Generic.IList%601> collection to be converted to a <xref:System.AddIn.Contract.IListContract%601> collection. The <xref:System.AddIn.Contract.IListContract%601> collection is passed across the isolation boundary and converted back to an <xref:System.Collections.Generic.IList%601> collection that the add-in or the host application can use.  \n  \n Objects in collections must be remotable. For more information about the object types that you can pass, see [Contracts, Views, and Adapters](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)."
  syntax:
    content: public static class CollectionAdapters
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})
  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})
  id: ToIList``1(System.AddIn.Contract.IListContract{``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIList<T>(IListContract<T>)
  nameWithType: CollectionAdapters.ToIList<T>(IListContract<T>)
  fullName: CollectionAdapters.ToIList<T>(IListContract<T>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: Converts the specified <xref href="System.AddIn.Contract.IListContract`1"></xref> collection to an <xref href="System.Collections.Generic.IList`1"></xref> collection.
  remarks: "The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. The <xref:System.Collections.Generic.IList%601> collection will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601> collection.  \n  \n You should use this method overload only when the contents of the <xref:System.AddIn.Contract.IListContract%601> are serializable types that can be passed directly to the add-in and host (rather than types that must be adapted into views)."
  example:
  - "The following example implements a host-side adapter pipeline segment as described [Walkthrough: Passing Collections Between Hosts and Add-Ins](http://msdn.microsoft.com/en-us/b532c604-548e-4fab-b11c-377257dd0ee5). The example adapts the custom `ProcessBooks` method by taking the <xref:System.AddIn.Contract.IListContract%601> collection passed from the add-in and converting it to an <xref:System.Collections.Generic.IList%601> collection, which the host application can then use.  \n  \n [!code-csharp[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/cs/LibraryManagerViewToContractAddInAdapter.cs#3)]\n [!code-vb[AddInCollectionPipelineAddInSideAdapter#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineAddInSideAdapter/vb/LibraryManagerViewToContractAddInAdapter.vb#3)]"
  syntax:
    content: public static System.Collections.Generic.IList<T> ToIList<T> (System.AddIn.Contract.IListContract<T> collection);
    parameters:
    - id: collection
      type: System.AddIn.Contract.IListContract`1
      description: The collection from the other side of the pipeline.
    typeParameters:
    - id: T
      description: The type of objects that are contained in the list. <code>T</code> must be serializable.
    return:
      type: System.Collections.Generic.IList`1
      description: The converted collection.
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIList``1*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  id: ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)
  nameWithType: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)
  fullName: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: Converts a specified <xref href="System.AddIn.Contract.IListContract`1"></xref> collection to an <xref href="System.Collections.Generic.IList`1"></xref> collection by using converter adapters.
  remarks: Use this method overload for <xref:System.AddIn.Contract.IListContract%601> collections that contain types that must be adapted before they can be passed to the add-in or host (rather than simple serializable types that can be passed directly). The host application or add-in can use the returned <xref:System.Collections.Generic.IList%601> collection. It will have a lifetime token for the remote <xref:System.AddIn.Contract.IListContract%601>.
  syntax:
    content: public static System.Collections.Generic.IList<TView> ToIList<TContract,TView> (System.AddIn.Contract.IListContract<TContract> collection, Converter<TContract,TView> contractViewAdapter, Converter<TView,TContract> viewContractAdapter);
    parameters:
    - id: collection
      type: System.AddIn.Contract.IListContract{TContract}
      description: The collection to pass to the other side of the pipeline.
    - id: contractViewAdapter
      type: System.Converter{TContract,TView}
      description: A converter that adapts the data from the type defined in the contract to the type expected in the view.
    - id: viewContractAdapter
      type: System.Converter{TView,TContract}
      description: A converter that adapts the data from the type defined in the view to the type expected by the contract.
    typeParameters:
    - id: TContract
      description: The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary.
    - id: TView
      description: The type that defines the view of the objects in the list.
    return:
      type: System.Collections.Generic.IList{TView}
      description: The converted collection.
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIList``2*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})
  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})
  id: ToIListContract``1(System.Collections.Generic.IList{``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIListContract<T>(IList<T>)
  nameWithType: CollectionAdapters.ToIListContract<T>(IList<T>)
  fullName: CollectionAdapters.ToIListContract<T>(IList<T>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: Converts a specified <xref href="System.Collections.Generic.IList`1"></xref> collection to an <xref href="System.AddIn.Contract.IListContract`1"></xref> collection.
  remarks: "The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between the add-in and its host application.  \n  \n You should use this method overload only when the contents of the <xref:System.Collections.Generic.IList%601> collection are serializable types that can be passed directly to the contract (rather than types that must be adapted into contracts)."
  example:
  - "The following example implements the class that defines an add-in side adapter pipeline segment. It adapts the custom `ProcessBooks` method by taking the <xref:System.Collections.Generic.IList%601> collection passed from the add-in view segment and converting it to an <xref:System.AddIn.Contract.IListContract%601> collection that can be marshaled across the isolation boundary to the host.  \n  \n [!code-csharp[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/csharp/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/cs/LibraryManagerContractToViewHostAdapter.cs#4)]\n [!code-vb[AddInCollectionPipelineHostSideAdapter#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AddInCollectionPipelineHostSideAdapter/vb/LibraryManagerContractToViewHostAdapter.vb#4)]"
  syntax:
    content: public static System.AddIn.Contract.IListContract<T> ToIListContract<T> (System.Collections.Generic.IList<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IList`1
      description: The collection to convert.
    typeParameters:
    - id: T
      description: The type of objects that are contained in the list. <code>T</code> must be serializable.
    return:
      type: System.AddIn.Contract.IListContract`1
      description: The converted collection.
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  commentId: M:System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  id: ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)
  nameWithType: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)
  fullName: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  summary: Converts a specified <xref href="System.Collections.Generic.IList`1"></xref> collection to an <xref href="System.AddIn.Contract.IListContract`1"></xref> collection by using converter adapters.
  remarks: Use this method overload for <xref:System.Collections.Generic.IList%601> collections that contain types that must be adapted into contracts before they can be passed to the contract (rather than simple serializable types that can be passed directly). The <xref:System.AddIn.Contract.IListContract%601> collection can be marshaled across the isolation boundary between an add-in and its host application.
  syntax:
    content: public static System.AddIn.Contract.IListContract<TContract> ToIListContract<TView,TContract> (System.Collections.Generic.IList<TView> collection, Converter<TView,TContract> viewContractAdapter, Converter<TContract,TView> contractViewAdapter);
    parameters:
    - id: collection
      type: System.Collections.Generic.IList{TView}
      description: The collection to convert.
    - id: viewContractAdapter
      type: System.Converter{TView,TContract}
      description: A converter that adapts the data from the type defined in the view to the type expected by the contract.
    - id: contractViewAdapter
      type: System.Converter{TContract,TView}
      description: A converter that adapts the data from the type defined in the contract to the type expected in the view.
    typeParameters:
    - id: TView
      description: The type that defines the view of the objects in the list.
    - id: TContract
      description: The type that defines the contract for passing objects of type <code>TView</code> across the isolation boundary.
    return:
      type: System.AddIn.Contract.IListContract{TContract}
      description: The converted collection.
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract{``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList<T>(IListContract<T>)
  nameWithType: CollectionAdapters.ToIList<T>(IListContract<T>)
  fullName: CollectionAdapters.ToIList<T>(IListContract<T>)
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.AddIn.Contract.IListContract`1
  parent: System.AddIn.Contract
  isExternal: false
  name: IListContract<T>
  nameWithType: IListContract<T>
  fullName: System.AddIn.Contract.IListContract<T>
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)
  nameWithType: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)
  fullName: CollectionAdapters.ToIList<TContract,TView>(IListContract<TContract>, Converter<TContract,TView>, Converter<TView,TContract>)
- uid: TView
  name: TView
  nameWithType: TView
  fullName: TView
- uid: System.Collections.Generic.IList{TView}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<TView>
  nameWithType: IList<TView>
  fullName: System.Collections.Generic.IList<TView>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: TView
    name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TContract
  name: TContract
  nameWithType: TContract
  fullName: TContract
- uid: System.AddIn.Contract.IListContract{TContract}
  parent: System.AddIn.Contract
  isExternal: false
  name: IListContract<TContract>
  nameWithType: IListContract<TContract>
  fullName: System.AddIn.Contract.IListContract<TContract>
  spec.csharp:
  - uid: System.AddIn.Contract.IListContract`1
    name: IListContract
    nameWithType: IListContract
    fullName: System.AddIn.Contract.IListContract
  - name: <
    nameWithType: <
    fullName: <
  - uid: TContract
    name: TContract
    nameWithType: TContract
    fullName: TContract
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Converter`2
  name: Converter<TInput,TOutput>
  nameWithType: Converter<TInput,TOutput>
  fullName: System.Converter<TInput,TOutput>
- uid: System.Converter{TContract,TView}
  parent: System
  isExternal: false
  name: Converter<TContract,TView>
  nameWithType: Converter<TContract,TView>
  fullName: System.Converter<TContract,TView>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
  - name: <
    nameWithType: <
    fullName: <
  - uid: TContract
    name: TContract
    nameWithType: TContract
    fullName: TContract
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TView
    name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Converter{TView,TContract}
  parent: System
  isExternal: false
  name: Converter<TView,TContract>
  nameWithType: Converter<TView,TContract>
  fullName: System.Converter<TView,TContract>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: System.Converter
  - name: <
    nameWithType: <
    fullName: <
  - uid: TView
    name: TView
    nameWithType: TView
    fullName: TView
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TContract
    name: TContract
    nameWithType: TContract
    fullName: TContract
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract<T>(IList<T>)
  nameWithType: CollectionAdapters.ToIListContract<T>(IList<T>)
  fullName: CollectionAdapters.ToIListContract<T>(IList<T>)
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)
  nameWithType: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)
  fullName: CollectionAdapters.ToIListContract<TView,TContract>(IList<TView>, Converter<TView,TContract>, Converter<TContract,TView>)
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList<T>
  nameWithType: CollectionAdapters.ToIList<T>
  fullName: CollectionAdapters.ToIList<T>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList<TContract,TView>
  nameWithType: CollectionAdapters.ToIList<TContract,TView>
  fullName: CollectionAdapters.ToIList<TContract,TView>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract<T>
  nameWithType: CollectionAdapters.ToIListContract<T>
  fullName: CollectionAdapters.ToIListContract<T>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract<TView,TContract>
  nameWithType: CollectionAdapters.ToIListContract<TView,TContract>
  fullName: CollectionAdapters.ToIListContract<TView,TContract>
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.AddIn.Pipeline/CollectionAdapters.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
