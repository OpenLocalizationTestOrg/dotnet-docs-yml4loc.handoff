<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">7a6747251ad3eb3f2d05c9d6d27de5477796c4ce</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Web.Services.Protocols.WebClientAsyncResult.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b4a0542c98e7ee6e65170592b48677226405413e</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">547332ab84bac82c9af4e2bc983bec0b06aa8471</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides an implementation of <ph id="ph1">&lt;xref href="System.IAsyncResult"&gt;&lt;/xref&gt;</ph> for use by XML Web service proxies to implement the standard asynchronous method pattern.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you call the <ph id="ph1">`BeginMyMethodName`</ph> method, where <ph id="ph2">`MyMethodName`</ph> is the synchronous version of the method, on an XML Web service proxy class, an instance of the <ph id="ph3">&lt;xref:System.Web.Services.Protocols.WebClientAsyncResult&gt;</ph> is returned.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>Following the standard asynchronous design pattern, that instance of <ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientAsyncResult&gt;</ph> must later be passed to <ph id="ph2">`EndMyMethodName`</ph> to complete the asynchronous method call.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details on calling XML Web services asynchronously, see <bpt id="p1">[</bpt>&amp;#91;<ph id="ph1">\&lt;</ph>topic://cpconInvokingWebServicesAsynchronously&gt;&amp;#93;<ept id="p1">](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Cancels an asynchronous XML Web service request.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Gets the object provided in the last parameter to the <ph id="ph1">`Begin`</ph> method asynchronous call.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> provided in the last parameter to the <ph id="ph2">`Begin`</ph> method call.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Gets a <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Threading.WaitHandle&gt;</ph> can be used to perform a <ph id="ph2">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph>, or <ph id="ph4">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> to wait for the asynchronous call to complete.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more details, see <ph id="ph1">&lt;xref:System.IAsyncResult.AsyncWaitHandle%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Threading.WaitHandle"&gt;&lt;/xref&gt;</ph> that is used to wait for an asynchronous operation to complete.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the Begin call completed synchronously.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously%2A&gt;</ph> is set to <ph id="ph2">`true`</ph> within the <ph id="ph3">&lt;xref:System.AsyncCallback&gt;</ph> delegate, it is probable that the thread that called <ph id="ph4">&lt;xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A&gt;</ph> is the current thread.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, you should be careful about making another asynchronous Begin call from the callback method, since it can cause the stack to grow without bound if the calls continue to complete synchronously.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, the call should be completed at the original call site, outside the callback method.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the Begin call completed synchronously; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the asynchronous XML Web service request has completed.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the asynchronous XML Web service request has completed; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>