{"nodes":[{"content":"A platform-specific type that is used to represent a pointer or a handle.","nodes":[{"pos":[0,73],"content":"A platform-specific type that is used to represent a pointer or a handle.","nodes":[{"content":"A platform-specific type that is used to represent a pointer or a handle.","pos":[0,73]}]}],"pos":[1634,1708],"yaml":true},{"content":"The <xref:System.IntPtr> type is designed to be an integer whose size is platform-specific. That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.  \n  \n The <xref:System.IntPtr> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.  \n  \n <xref:System.IntPtr> objects can also be used to hold handles. For example, instances of <xref:System.IntPtr> are used extensively in the <xref:System.IO.FileStream?displayProperty=fullName> class to hold file handles.  \n  \n The <xref:System.IntPtr> type is CLS-compliant, while the <xref:System.UIntPtr> type is not. Only the <xref:System.IntPtr> type is used in the common language runtime. The <xref:System.UIntPtr> type is provided mostly to maintain architectural symmetry with the <xref:System.IntPtr> type.  \n  \n This type implements the <xref:System.Runtime.Serialization.ISerializable> interface.","nodes":[{"pos":[0,247],"content":"The <xref:System.IntPtr> type is designed to be an integer whose size is platform-specific. That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.","nodes":[{"content":"The <xref:System.IntPtr> type is designed to be an integer whose size is platform-specific. That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.","pos":[0,247],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> type is designed to be an integer whose size is platform-specific.","pos":[0,91],"source":"The <xref:System.IntPtr> type is designed to be an integer whose size is platform-specific."},{"content":"That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.","pos":[92,247]}]}]},{"pos":[254,429],"content":"The <xref:System.IntPtr> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.","pos":[0,175],"source":"The <xref:System.IntPtr> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers."}]},{"pos":[436,654],"content":"<xref:System.IntPtr> objects can also be used to hold handles. For example, instances of <xref:System.IntPtr> are used extensively in the <xref:System.IO.FileStream?displayProperty=fullName> class to hold file handles.","nodes":[{"content":"<xref:System.IntPtr> objects can also be used to hold handles. For example, instances of <xref:System.IntPtr> are used extensively in the <xref:System.IO.FileStream?displayProperty=fullName> class to hold file handles.","pos":[0,218],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> objects can also be used to hold handles.","pos":[0,62],"source":"<xref:System.IntPtr> objects can also be used to hold handles."},{"content":"For example, instances of <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> are used extensively in the <ph id=\"ph2\">&lt;xref:System.IO.FileStream?displayProperty=fullName&gt;</ph> class to hold file handles.","pos":[63,218],"source":" For example, instances of <xref:System.IntPtr> are used extensively in the <xref:System.IO.FileStream?displayProperty=fullName> class to hold file handles."}]}]},{"pos":[661,949],"content":"The <xref:System.IntPtr> type is CLS-compliant, while the <xref:System.UIntPtr> type is not. Only the <xref:System.IntPtr> type is used in the common language runtime. The <xref:System.UIntPtr> type is provided mostly to maintain architectural symmetry with the <xref:System.IntPtr> type.","nodes":[{"content":"The <xref:System.IntPtr> type is CLS-compliant, while the <xref:System.UIntPtr> type is not. Only the <xref:System.IntPtr> type is used in the common language runtime. The <xref:System.UIntPtr> type is provided mostly to maintain architectural symmetry with the <xref:System.IntPtr> type.","pos":[0,288],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> type is CLS-compliant, while the <ph id=\"ph2\">&lt;xref:System.UIntPtr&gt;</ph> type is not.","pos":[0,92],"source":"The <xref:System.IntPtr> type is CLS-compliant, while the <xref:System.UIntPtr> type is not."},{"content":"Only the <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> type is used in the common language runtime.","pos":[93,167],"source":" Only the <xref:System.IntPtr> type is used in the common language runtime."},{"content":"The <ph id=\"ph1\">&lt;xref:System.UIntPtr&gt;</ph> type is provided mostly to maintain architectural symmetry with the <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> type.","pos":[168,288],"source":" The <xref:System.UIntPtr> type is provided mostly to maintain architectural symmetry with the <xref:System.IntPtr> type."}]}]},{"pos":[956,1041],"content":"This type implements the <xref:System.Runtime.Serialization.ISerializable> interface.","nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.Runtime.Serialization.ISerializable&gt;</ph> interface.","pos":[0,85],"source":"This type implements the <xref:System.Runtime.Serialization.ISerializable> interface."}]}],"pos":[1719,2771],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified 32-bit pointer or handle.","nodes":[{"pos":[0,110],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> using the specified 32-bit pointer or handle.","source":"Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified 32-bit pointer or handle."}],"pos":[8220,8331],"yaml":true},{"content":"A pointer or handle contained in a 32-bit signed integer.","nodes":[{"pos":[0,57],"content":"A pointer or handle contained in a 32-bit signed integer.","nodes":[{"content":"A pointer or handle contained in a 32-bit signed integer.","pos":[0,57]}]}],"pos":[8457,8515],"yaml":true},{"content":"Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified 64-bit pointer.","nodes":[{"pos":[0,100],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> using the specified 64-bit pointer.","source":"Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified 64-bit pointer."}],"pos":[10003,10104],"yaml":true},{"content":"An exception is only thrown if the value of `value` requires more bits than the current platform supports.","nodes":[{"pos":[0,106],"content":"An exception is only thrown if the value of <ph id=\"ph1\">`value`</ph> requires more bits than the current platform supports.","source":"An exception is only thrown if the value of `value` requires more bits than the current platform supports."}],"pos":[10115,10222],"yaml":true,"extradata":"MT"},{"content":"A pointer or handle contained in a 64-bit signed integer.","nodes":[{"pos":[0,57],"content":"A pointer or handle contained in a 64-bit signed integer.","nodes":[{"content":"A pointer or handle contained in a 64-bit signed integer.","pos":[0,57]}]}],"pos":[10349,10407],"yaml":true},{"content":"On a 32-bit platform, <code>value</code> is too large or too small to represent as an <xref href=\"System.IntPtr\"></xref>.","nodes":[{"pos":[0,121],"content":"On a 32-bit platform, <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is too large or too small to represent as an <ph id=\"ph2\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph>.","source":"On a 32-bit platform, <code>value</code> is too large or too small to represent as an <xref href=\"System.IntPtr\"></xref>."}],"pos":[10548,10670],"yaml":true},{"content":"Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified pointer to an unspecified type.","nodes":[{"pos":[0,116],"content":"Initializes a new instance of <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> using the specified pointer to an unspecified type.","source":"Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified pointer to an unspecified type."}],"pos":[12108,12225],"yaml":true},{"content":"A pointer to an unspecified type.","nodes":[{"pos":[0,33],"content":"A pointer to an unspecified type.","nodes":[{"content":"A pointer to an unspecified type.","pos":[0,33]}]}],"pos":[12398,12432],"yaml":true},{"content":"Adds an offset to the value of a pointer.","nodes":[{"pos":[0,41],"content":"Adds an offset to the value of a pointer.","nodes":[{"content":"Adds an offset to the value of a pointer.","pos":[0,41]}]}],"pos":[14000,14042],"yaml":true},{"content":"The <xref:System.IntPtr.Add%2A> method does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, the addition operation is performed in an unchecked context.  \n  \n Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.","nodes":[{"pos":[0,216],"content":"The <xref:System.IntPtr.Add%2A> method does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, the addition operation is performed in an unchecked context.","nodes":[{"content":"The <xref:System.IntPtr.Add%2A> method does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, the addition operation is performed in an unchecked context.","pos":[0,216],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method does not throw an exception if the result is too large to represent as a pointer on the specified platform.","pos":[0,146],"source":"The <xref:System.IntPtr.Add%2A> method does not throw an exception if the result is too large to represent as a pointer on the specified platform."},{"content":"Instead, the addition operation is performed in an unchecked context.","pos":[147,216]}]}]},{"pos":[223,357],"content":"Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.","nodes":[{"content":"Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.","pos":[0,134]}]}],"pos":[14053,14415],"yaml":true,"extradata":"MT"},{"content":"The pointer to add the offset to.","nodes":[{"pos":[0,33],"content":"The pointer to add the offset to.","nodes":[{"content":"The pointer to add the offset to.","pos":[0,33]}]}],"pos":[15045,15079],"yaml":true},{"content":"The offset to add.","nodes":[{"pos":[0,18],"content":"The offset to add.","nodes":[{"content":"The offset to add.","pos":[0,18]}]}],"pos":[15140,15159],"yaml":true},{"content":"A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>.","nodes":[{"pos":[0,88],"content":"A new pointer that reflects the addition of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">pointer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>."}],"pos":[15216,15305],"yaml":true},{"content":"Returns a value indicating whether this instance is equal to a specified object.","nodes":[{"pos":[0,80],"content":"Returns a value indicating whether this instance is equal to a specified object.","nodes":[{"content":"Returns a value indicating whether this instance is equal to a specified object.","pos":[0,80]}]}],"pos":[16793,16874],"yaml":true},{"content":"An object to compare with this instance or `null`.","nodes":[{"pos":[0,50],"content":"An object to compare with this instance or <ph id=\"ph1\">`null`</ph>.","source":"An object to compare with this instance or `null`."}],"pos":[17014,17065],"yaml":true},{"content":"`true` if <code>obj</code> is an instance of <xref href=\"System.IntPtr\"></xref> and equals the value of this instance; otherwise, `false`.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">obj</ph><ept id=\"p1\">&lt;/code&gt;</ept> is an instance of <ph id=\"ph3\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> and equals the value of this instance; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>obj</code> is an instance of <xref href=\"System.IntPtr\"></xref> and equals the value of this instance; otherwise, `false`."}],"pos":[17123,17264],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[18705,18746],"yaml":true},{"content":"A 32-bit signed integer hash code.","nodes":[{"pos":[0,34],"content":"A 32-bit signed integer hash code.","nodes":[{"content":"A 32-bit signed integer hash code.","pos":[0,34]}]}],"pos":[18880,18915],"yaml":true},{"content":"Adds an offset to the value of a pointer.","nodes":[{"pos":[0,41],"content":"Adds an offset to the value of a pointer.","nodes":[{"content":"Adds an offset to the value of a pointer.","pos":[0,41]}]}],"pos":[20486,20528],"yaml":true},{"content":"The <xref:System.IntPtr.op_Addition%2A> method defines the addition operation for <xref:System.IntPtr> objects. It enables code such as the following.  \n  \n [!code-csharp[System.IntPtr.op_Addition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/addition1.cs#1)]\n [!code-vb[System.IntPtr.op_Addition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/addition1.vb#1)]  \n  \n Languages that do not support custom operators can call the <xref:System.IntPtr.Add%2A> method instead.  \n  \n The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.  \n  \n The equivalent method for this operator is <xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"pos":[0,150],"content":"The <xref:System.IntPtr.op_Addition%2A> method defines the addition operation for <xref:System.IntPtr> objects. It enables code such as the following.","nodes":[{"content":"The <xref:System.IntPtr.op_Addition%2A> method defines the addition operation for <xref:System.IntPtr> objects. It enables code such as the following.","pos":[0,150],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IntPtr.op_Addition%2A&gt;</ph> method defines the addition operation for <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> objects.","pos":[0,111],"source":"The <xref:System.IntPtr.op_Addition%2A> method defines the addition operation for <xref:System.IntPtr> objects."},{"content":"It enables code such as the following.","pos":[112,150]}]}]},{"pos":[157,434],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IntPtr.op_Addition#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/addition1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IntPtr.op_Addition#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/addition1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.IntPtr.op_Addition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/addition1.cs#1)]\n [!code-vb[System.IntPtr.op_Addition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/addition1.vb#1)]"},{"pos":[441,544],"content":"Languages that do not support custom operators can call the <xref:System.IntPtr.Add%2A> method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.IntPtr.Add%2A&gt;</ph> method instead.","pos":[0,103],"source":"Languages that do not support custom operators can call the <xref:System.IntPtr.Add%2A> method instead."}]},{"pos":[551,731],"content":"The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.","nodes":[{"content":"The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.","pos":[0,180],"nodes":[{"content":"The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform.","pos":[0,130]},{"content":"Instead, it is performed in an unchecked context.","pos":[131,180]}]}]},{"pos":[738,864],"content":"The equivalent method for this operator is <xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>","pos":[0,126],"source":"The equivalent method for this operator is <xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>"}]}],"pos":[20539,21415],"yaml":true,"extradata":"MT"},{"content":"The pointer to add the offset to.","nodes":[{"pos":[0,33],"content":"The pointer to add the offset to.","nodes":[{"content":"The pointer to add the offset to.","pos":[0,33]}]}],"pos":[21580,21614],"yaml":true},{"content":"The offset to add.","nodes":[{"pos":[0,18],"content":"The offset to add.","nodes":[{"content":"The offset to add.","pos":[0,18]}]}],"pos":[21675,21694],"yaml":true},{"content":"A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>.","nodes":[{"pos":[0,88],"content":"A new pointer that reflects the addition of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">pointer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>."}],"pos":[21751,21840],"yaml":true},{"content":"Determines whether two specified instances of <xref href=\"System.IntPtr\"></xref> are equal.","nodes":[{"pos":[0,91],"content":"Determines whether two specified instances of <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> are equal.","source":"Determines whether two specified instances of <xref href=\"System.IntPtr\"></xref> are equal."}],"pos":[23434,23526],"yaml":true},{"content":"The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"pos":[0,114],"content":"The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName&gt;</ph>","pos":[0,114],"source":"The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>"}]}],"pos":[23537,23652],"yaml":true,"extradata":"MT"},{"content":"The first pointer or handle to compare.","nodes":[{"pos":[0,39],"content":"The first pointer or handle to compare.","nodes":[{"content":"The first pointer or handle to compare.","pos":[0,39]}]}],"pos":[23816,23856],"yaml":true},{"content":"The second pointer or handle to compare.","nodes":[{"pos":[0,40],"content":"The second pointer or handle to compare.","nodes":[{"content":"The second pointer or handle to compare.","pos":[0,40]}]}],"pos":[23918,23959],"yaml":true},{"content":"`true` if <code>value1</code> equals <code>value2</code>; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value1</ph><ept id=\"p1\">&lt;/code&gt;</ept> equals <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value2</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>value1</code> equals <code>value2</code>; otherwise, `false`."}],"pos":[24017,24097],"yaml":true},{"content":"Determines whether two specified instances of <xref href=\"System.IntPtr\"></xref> are not equal.","nodes":[{"pos":[0,95],"content":"Determines whether two specified instances of <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> are not equal.","source":"Determines whether two specified instances of <xref href=\"System.IntPtr\"></xref> are not equal."}],"pos":[36037,36133],"yaml":true},{"content":"The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"pos":[0,114],"content":"The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName&gt;</ph>","pos":[0,114],"source":"The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>"}]}],"pos":[36144,36259],"yaml":true,"extradata":"MT"},{"content":"The first pointer or handle to compare.","nodes":[{"pos":[0,39],"content":"The first pointer or handle to compare.","nodes":[{"content":"The first pointer or handle to compare.","pos":[0,39]}]}],"pos":[36425,36465],"yaml":true},{"content":"The second pointer or handle to compare.","nodes":[{"pos":[0,40],"content":"The second pointer or handle to compare.","nodes":[{"content":"The second pointer or handle to compare.","pos":[0,40]}]}],"pos":[36527,36568],"yaml":true},{"content":"`true` if <code>value1</code> does not equal <code>value2</code>; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value1</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not equal <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">value2</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if <code>value1</code> does not equal <code>value2</code>; otherwise, `false`."}],"pos":[36626,36714],"yaml":true},{"content":"Subtracts an offset from the value of a pointer.","nodes":[{"pos":[0,48],"content":"Subtracts an offset from the value of a pointer.","nodes":[{"content":"Subtracts an offset from the value of a pointer.","pos":[0,48]}]}],"pos":[38322,38371],"yaml":true},{"content":"The <xref:System.IntPtr.op_Subtraction%2A> method defines the subtraction operation for <xref:System.IntPtr> objects. It enables code such as the following.  \n  \n [!code-csharp[System.IntPtr.op_Addition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/op_subtraction1.cs#2)]\n [!code-vb[System.IntPtr.op_Addition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/op_subtraction1.vb#2)]  \n  \n Languages that do not support custom operators can call the <xref:System.IntPtr.Subtract%2A> method instead.  \n  \n The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.  \n  \n The equivalent method for this operator is <xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"pos":[0,156],"content":"The <xref:System.IntPtr.op_Subtraction%2A> method defines the subtraction operation for <xref:System.IntPtr> objects. It enables code such as the following.","nodes":[{"content":"The <xref:System.IntPtr.op_Subtraction%2A> method defines the subtraction operation for <xref:System.IntPtr> objects. It enables code such as the following.","pos":[0,156],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IntPtr.op_Subtraction%2A&gt;</ph> method defines the subtraction operation for <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> objects.","pos":[0,117],"source":"The <xref:System.IntPtr.op_Subtraction%2A> method defines the subtraction operation for <xref:System.IntPtr> objects."},{"content":"It enables code such as the following.","pos":[118,156]}]}]},{"pos":[163,452],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IntPtr.op_Addition#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/op_subtraction1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IntPtr.op_Addition#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/op_subtraction1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.IntPtr.op_Addition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/op_subtraction1.cs#2)]\n [!code-vb[System.IntPtr.op_Addition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/op_subtraction1.vb#2)]"},{"pos":[459,567],"content":"Languages that do not support custom operators can call the <xref:System.IntPtr.Subtract%2A> method instead.","nodes":[{"content":"Languages that do not support custom operators can call the <ph id=\"ph1\">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method instead.","pos":[0,108],"source":"Languages that do not support custom operators can call the <xref:System.IntPtr.Subtract%2A> method instead."}]},{"pos":[574,757],"content":"The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.","nodes":[{"content":"The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.","pos":[0,183],"nodes":[{"content":"The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform.","pos":[0,133]},{"content":"Instead, it is performed in an unchecked context.","pos":[134,183]}]}]},{"pos":[764,895],"content":"The equivalent method for this operator is <xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>","nodes":[{"content":"The equivalent method for this operator is <ph id=\"ph1\">&lt;xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName&gt;</ph>","pos":[0,131],"source":"The equivalent method for this operator is <xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>"}]}],"pos":[38382,39289],"yaml":true,"extradata":"MT"},{"content":"The pointer to subtract the offset from.","nodes":[{"pos":[0,40],"content":"The pointer to subtract the offset from.","nodes":[{"content":"The pointer to subtract the offset from.","pos":[0,40]}]}],"pos":[39457,39498],"yaml":true},{"content":"The offset to subtract.","nodes":[{"pos":[0,23],"content":"The offset to subtract.","nodes":[{"content":"The offset to subtract.","pos":[0,23]}]}],"pos":[39559,39583],"yaml":true},{"content":"A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>.","nodes":[{"pos":[0,93],"content":"A new pointer that reflects the subtraction of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">pointer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>."}],"pos":[39640,39734],"yaml":true},{"content":"Gets the size of this instance.","nodes":[{"pos":[0,31],"content":"Gets the size of this instance.","nodes":[{"content":"Gets the size of this instance.","pos":[0,31]}]}],"pos":[41154,41186],"yaml":true},{"content":"The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the `/platform` switch when you compile your code with the C# and Visual Basic compilers.","nodes":[{"pos":[0,280],"content":"The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the `/platform` switch when you compile your code with the C# and Visual Basic compilers.","nodes":[{"content":"The size of a pointer or handle in this process, measured in bytes.","pos":[0,67]},{"content":"The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process.","pos":[68,147]},{"content":"You can define the process type by setting the <ph id=\"ph1\">`/platform`</ph> switch when you compile your code with the C# and Visual Basic compilers.","pos":[148,280],"source":" You can define the process type by setting the `/platform` switch when you compile your code with the C# and Visual Basic compilers."}]}],"pos":[41494,41775],"yaml":true},{"content":"Subtracts an offset from the value of a pointer.","nodes":[{"pos":[0,48],"content":"Subtracts an offset from the value of a pointer.","nodes":[{"content":"Subtracts an offset from the value of a pointer.","pos":[0,48]}]}],"pos":[43406,43455],"yaml":true},{"content":"The <xref:System.IntPtr.Subtract%2A> method does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, the subtraction operation is performed in an unchecked context.  \n  \n Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.","nodes":[{"pos":[0,224],"content":"The <xref:System.IntPtr.Subtract%2A> method does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, the subtraction operation is performed in an unchecked context.","nodes":[{"content":"The <xref:System.IntPtr.Subtract%2A> method does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, the subtraction operation is performed in an unchecked context.","pos":[0,224],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IntPtr.Subtract%2A&gt;</ph> method does not throw an exception if the result is too small to represent as a pointer on the specified platform.","pos":[0,151],"source":"The <xref:System.IntPtr.Subtract%2A> method does not throw an exception if the result is too small to represent as a pointer on the specified platform."},{"content":"Instead, the subtraction operation is performed in an unchecked context.","pos":[152,224]}]}]},{"pos":[231,372],"content":"Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.","nodes":[{"content":"Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.","pos":[0,141]}]}],"pos":[43466,43843],"yaml":true,"extradata":"MT"},{"content":"The pointer to subtract the offset from.","nodes":[{"pos":[0,40],"content":"The pointer to subtract the offset from.","nodes":[{"content":"The pointer to subtract the offset from.","pos":[0,40]}]}],"pos":[44524,44565],"yaml":true},{"content":"The offset to subtract.","nodes":[{"pos":[0,23],"content":"The offset to subtract.","nodes":[{"content":"The offset to subtract.","pos":[0,23]}]}],"pos":[44626,44650],"yaml":true},{"content":"A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>.","nodes":[{"pos":[0,93],"content":"A new pointer that reflects the subtraction of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">pointer</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>."}],"pos":[44707,44801],"yaml":true},{"content":"Converts the value of this instance to a 32-bit signed integer.","nodes":[{"pos":[0,63],"content":"Converts the value of this instance to a 32-bit signed integer.","nodes":[{"content":"Converts the value of this instance to a 32-bit signed integer.","pos":[0,63]}]}],"pos":[46237,46301],"yaml":true},{"content":"A 32-bit signed integer equal to the value of this instance.","nodes":[{"pos":[0,60],"content":"A 32-bit signed integer equal to the value of this instance.","nodes":[{"content":"A 32-bit signed integer equal to the value of this instance.","pos":[0,60]}]}],"pos":[46422,46483],"yaml":true},{"content":"On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.","nodes":[{"pos":[0,115],"content":"On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.","nodes":[{"content":"On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.","pos":[0,115]}]}],"pos":[46626,46742],"yaml":true},{"content":"Converts the value of this instance to a 64-bit signed integer.","nodes":[{"pos":[0,63],"content":"Converts the value of this instance to a 64-bit signed integer.","nodes":[{"content":"Converts the value of this instance to a 64-bit signed integer.","pos":[0,63]}]}],"pos":[48125,48189],"yaml":true},{"content":"A 64-bit signed integer equal to the value of this instance.","nodes":[{"pos":[0,60],"content":"A 64-bit signed integer equal to the value of this instance.","nodes":[{"content":"A 64-bit signed integer equal to the value of this instance.","pos":[0,60]}]}],"pos":[48311,48372],"yaml":true},{"content":"Converts the value of this instance to a pointer to an unspecified type.","nodes":[{"pos":[0,72],"content":"Converts the value of this instance to a pointer to an unspecified type.","nodes":[{"content":"Converts the value of this instance to a pointer to an unspecified type.","pos":[0,72]}]}],"pos":[49819,49892],"yaml":true},{"content":"A pointer to <xref href=\"System.Void\"></xref>; that is, a pointer to memory containing data of an unspecified type.","nodes":[{"pos":[0,115],"content":"A pointer to <ph id=\"ph1\">&lt;xref href=\"System.Void\"&gt;&lt;/xref&gt;</ph>; that is, a pointer to memory containing data of an unspecified type.","source":"A pointer to <xref href=\"System.Void\"></xref>; that is, a pointer to memory containing data of an unspecified type."}],"pos":[52357,52473],"yaml":true},{"content":"Converts the numeric value of the current <xref href=\"System.IntPtr\"></xref> object to its equivalent string representation.","nodes":[{"pos":[0,124],"content":"Converts the numeric value of the current <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> object to its equivalent string representation.","source":"Converts the numeric value of the current <xref href=\"System.IntPtr\"></xref> object to its equivalent string representation."}],"pos":[54015,54140],"yaml":true},{"content":"If the `format` parameter is `null` or an empty string (\"\"), the return value is formatted with the general format specifier (\"G\"). For more information about numeric format specifiers, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) topic.  \n  \n The return value is formatted using the invariant culture.","nodes":[{"pos":[0,297],"content":"If the `format` parameter is `null` or an empty string (\"\"), the return value is formatted with the general format specifier (\"G\"). For more information about numeric format specifiers, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) topic.","nodes":[{"content":"If the <ph id=\"ph1\">`format`</ph> parameter is <ph id=\"ph2\">`null`</ph> or an empty string (\"\"), the return value is formatted with the general format specifier (\"G\").","pos":[0,131],"source":"If the `format` parameter is `null` or an empty string (\"\"), the return value is formatted with the general format specifier (\"G\")."},{"content":"For more information about numeric format specifiers, see the <bpt id=\"p1\">[</bpt>Standard Numeric Format Strings<ept id=\"p1\">](~/docs/standard/base-types/standard-numeric-format-strings.md)</ept> topic.","pos":[132,297],"source":" For more information about numeric format specifiers, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) topic."}]},{"pos":[304,362],"content":"The return value is formatted using the invariant culture.","nodes":[{"content":"The return value is formatted using the invariant culture.","pos":[0,58]}]}],"pos":[54151,54522],"yaml":true,"extradata":"MT"},{"content":"A format specification that governs how the current <xref href=\"System.IntPtr\"></xref> object is converted.","nodes":[{"pos":[0,107],"content":"A format specification that governs how the current <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> object is converted.","source":"A format specification that governs how the current <xref href=\"System.IntPtr\"></xref> object is converted."}],"pos":[54663,54771],"yaml":true},{"content":"The string representation of the value of the current <xref href=\"System.IntPtr\"></xref> object.","nodes":[{"pos":[0,96],"content":"The string representation of the value of the current <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> object.","source":"The string representation of the value of the current <xref href=\"System.IntPtr\"></xref> object."}],"pos":[54828,54925],"yaml":true},{"content":"Converts the numeric value of the current <xref href=\"System.IntPtr\"></xref> object to its equivalent string representation.","nodes":[{"pos":[0,124],"content":"Converts the numeric value of the current <ph id=\"ph1\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> object to its equivalent string representation.","source":"Converts the numeric value of the current <xref href=\"System.IntPtr\"></xref> object to its equivalent string representation."}],"pos":[56350,56475],"yaml":true},{"content":"If the value of the <xref:System.IntPtr.Size%2A> property for this instance is 4, then this method is equivalent to <xref:System.Int32.ToString%2A?displayProperty=fullName>; otherwise, this method is equivalent to <xref:System.Int64.ToString%2A?displayProperty=fullName>.","nodes":[{"pos":[0,271],"content":"If the value of the <xref:System.IntPtr.Size%2A> property for this instance is 4, then this method is equivalent to <xref:System.Int32.ToString%2A?displayProperty=fullName>; otherwise, this method is equivalent to <xref:System.Int64.ToString%2A?displayProperty=fullName>.","nodes":[{"content":"If the value of the <ph id=\"ph1\">&lt;xref:System.IntPtr.Size%2A&gt;</ph> property for this instance is 4, then this method is equivalent to <ph id=\"ph2\">&lt;xref:System.Int32.ToString%2A?displayProperty=fullName&gt;</ph>; otherwise, this method is equivalent to <ph id=\"ph3\">&lt;xref:System.Int64.ToString%2A?displayProperty=fullName&gt;</ph>.","pos":[0,271],"source":"If the value of the <xref:System.IntPtr.Size%2A> property for this instance is 4, then this method is equivalent to <xref:System.Int32.ToString%2A?displayProperty=fullName>; otherwise, this method is equivalent to <xref:System.Int64.ToString%2A?displayProperty=fullName>."}]}],"pos":[56486,56758],"yaml":true,"extradata":"MT"},{"content":"The string representation of the value of this instance.","nodes":[{"pos":[0,56],"content":"The string representation of the value of this instance.","nodes":[{"content":"The string representation of the value of this instance.","pos":[0,56]}]}],"pos":[56893,56950],"yaml":true},{"content":"A read-only field that represents a pointer or handle that has been initialized to zero.","nodes":[{"pos":[0,88],"content":"A read-only field that represents a pointer or handle that has been initialized to zero.","nodes":[{"content":"A read-only field that represents a pointer or handle that has been initialized to zero.","pos":[0,88]}]}],"pos":[58344,58433],"yaml":true},{"content":"The value of this field is not equivalent to `null`. Use this field to efficiently determine whether an instance of <xref:System.IntPtr> has been set to a value other than zero.  \n  \n For example, assume the variable, ip, is an instance of <xref:System.IntPtr>. You can determine if it has been set by comparing it to the value returned by a constructor, for example: \" `if ip != new IntPtr(0)...` \". However, invoking a constructor to get an unintialized pointer is inefficient. It is better to code either \" `if ip != IntPtr.Zero...` \", or \" `if !IntPtr.Zero.Equals(ip)...` \".  \n  \n When calling the Windows API from managed code, you can pass <xref:System.IntPtr.Zero?displayProperty=fullName> instead of `null` if an argument is expected to be either a pointer or a `null`. For example, the following call to the Windows `CreateFile` function supplies <xref:System.IntPtr.Zero?displayProperty=fullName> for the `pSecurityAttributes` and `hTemplateFile` argument values.  \n  \n [!code-csharp[System.IntPtr.Zero#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero4.cs#2)]\n [!code-vb[System.IntPtr.Zero#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero4.vb#2)]  \n  \n> [!NOTE]\n>  Although <xref:System.IntPtr.Zero> is equivalent to `null` for Windows API functions with parameters or return values that can be either pointers or `null`, <xref:System.IntPtr.Zero> is not equivalent to `null`. Passing `null` to the `IntPtr.Zero.Equals` method always returns `false`.  \n  \n You can also test for a `null` return value from Windows API function calls that return either a pointer or a `null` by comparing the returned value with <xref:System.IntPtr.Zero?displayProperty=fullName>. For example, the call to the `GetWindow` function in the following example tries to retrieve the handle of a non-existent window. If it were called from unmanaged code, the function would return `null`, but when it is called from managed code, it returns <xref:System.IntPtr.Zero?displayProperty=fullName>.  \n  \n [!code-csharp[System.IntPtr.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero2.cs#1)]\n [!code-vb[System.IntPtr.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero2.vb#1)]","nodes":[{"pos":[0,177],"content":"The value of this field is not equivalent to `null`. Use this field to efficiently determine whether an instance of <xref:System.IntPtr> has been set to a value other than zero.","nodes":[{"content":"The value of this field is not equivalent to <ph id=\"ph1\">`null`</ph>.","pos":[0,52],"source":"The value of this field is not equivalent to `null`."},{"content":"Use this field to efficiently determine whether an instance of <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph> has been set to a value other than zero.","pos":[53,177],"source":" Use this field to efficiently determine whether an instance of <xref:System.IntPtr> has been set to a value other than zero."}]},{"pos":[184,578],"content":"For example, assume the variable, ip, is an instance of <xref:System.IntPtr>. You can determine if it has been set by comparing it to the value returned by a constructor, for example: \" `if ip != new IntPtr(0)...` \". However, invoking a constructor to get an unintialized pointer is inefficient. It is better to code either \" `if ip != IntPtr.Zero...` \", or \" `if !IntPtr.Zero.Equals(ip)...` \".","nodes":[{"content":"For example, assume the variable, ip, is an instance of <ph id=\"ph1\">&lt;xref:System.IntPtr&gt;</ph>.","pos":[0,77],"source":"For example, assume the variable, ip, is an instance of <xref:System.IntPtr>."},{"content":"You can determine if it has been set by comparing it to the value returned by a constructor, for example: \" <ph id=\"ph1\">`if ip != new IntPtr(0)...`</ph> \".","pos":[78,216],"source":" You can determine if it has been set by comparing it to the value returned by a constructor, for example: \" `if ip != new IntPtr(0)...` \"."},{"content":"However, invoking a constructor to get an unintialized pointer is inefficient.","pos":[217,295]},{"content":"It is better to code either \" <ph id=\"ph1\">`if ip != IntPtr.Zero...`</ph> \", or \" <ph id=\"ph2\">`if !IntPtr.Zero.Equals(ip)...`</ph> \".","pos":[296,394],"source":" It is better to code either \" `if ip != IntPtr.Zero...` \", or \" `if !IntPtr.Zero.Equals(ip)...` \"."}]},{"pos":[585,973],"content":"When calling the Windows API from managed code, you can pass <xref:System.IntPtr.Zero?displayProperty=fullName> instead of `null` if an argument is expected to be either a pointer or a `null`. For example, the following call to the Windows `CreateFile` function supplies <xref:System.IntPtr.Zero?displayProperty=fullName> for the `pSecurityAttributes` and `hTemplateFile` argument values.","nodes":[{"content":"When calling the Windows API from managed code, you can pass <ph id=\"ph1\">&lt;xref:System.IntPtr.Zero?displayProperty=fullName&gt;</ph> instead of <ph id=\"ph2\">`null`</ph> if an argument is expected to be either a pointer or a <ph id=\"ph3\">`null`</ph>.","pos":[0,192],"source":"When calling the Windows API from managed code, you can pass <xref:System.IntPtr.Zero?displayProperty=fullName> instead of `null` if an argument is expected to be either a pointer or a `null`."},{"content":"For example, the following call to the Windows <ph id=\"ph1\">`CreateFile`</ph> function supplies <ph id=\"ph2\">&lt;xref:System.IntPtr.Zero?displayProperty=fullName&gt;</ph> for the <ph id=\"ph3\">`pSecurityAttributes`</ph> and <ph id=\"ph4\">`hTemplateFile`</ph> argument values.","pos":[193,388],"source":" For example, the following call to the Windows `CreateFile` function supplies <xref:System.IntPtr.Zero?displayProperty=fullName> for the `pSecurityAttributes` and `hTemplateFile` argument values."}]},{"pos":[980,1221],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IntPtr.Zero#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero4.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IntPtr.Zero#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero4.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.IntPtr.Zero#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero4.cs#2)]\n [!code-vb[System.IntPtr.Zero#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero4.vb#2)]"},{"pos":[1229,1525],"content":"[!NOTE]\n Although <xref:System.IntPtr.Zero> is equivalent to `null` for Windows API functions with parameters or return values that can be either pointers or `null`, <xref:System.IntPtr.Zero> is not equivalent to `null`. Passing `null` to the `IntPtr.Zero.Equals` method always returns `false`.","leadings":["","> "],"nodes":[{"content":" Although <xref:System.IntPtr.Zero> is equivalent to `null` for Windows API functions with parameters or return values that can be either pointers or `null`, <xref:System.IntPtr.Zero> is not equivalent to `null`. Passing `null` to the `IntPtr.Zero.Equals` method always returns `false`.","pos":[8,294],"nodes":[{"content":"Although <ph id=\"ph1\">&lt;xref:System.IntPtr.Zero&gt;</ph> is equivalent to <ph id=\"ph2\">`null`</ph> for Windows API functions with parameters or return values that can be either pointers or <ph id=\"ph3\">`null`</ph>, <ph id=\"ph4\">&lt;xref:System.IntPtr.Zero&gt;</ph> is not equivalent to <ph id=\"ph5\">`null`</ph>.","pos":[1,212],"source":" Although <xref:System.IntPtr.Zero> is equivalent to `null` for Windows API functions with parameters or return values that can be either pointers or `null`, <xref:System.IntPtr.Zero> is not equivalent to `null`."},{"content":"Passing <ph id=\"ph1\">`null`</ph> to the <ph id=\"ph2\">`IntPtr.Zero.Equals`</ph> method always returns <ph id=\"ph3\">`false`</ph>.","pos":[213,286],"source":" Passing `null` to the `IntPtr.Zero.Equals` method always returns `false`."}]}]},{"pos":[1532,2044],"content":"You can also test for a `null` return value from Windows API function calls that return either a pointer or a `null` by comparing the returned value with <xref:System.IntPtr.Zero?displayProperty=fullName>. For example, the call to the `GetWindow` function in the following example tries to retrieve the handle of a non-existent window. If it were called from unmanaged code, the function would return `null`, but when it is called from managed code, it returns <xref:System.IntPtr.Zero?displayProperty=fullName>.","nodes":[{"content":"You can also test for a <ph id=\"ph1\">`null`</ph> return value from Windows API function calls that return either a pointer or a <ph id=\"ph2\">`null`</ph> by comparing the returned value with <ph id=\"ph3\">&lt;xref:System.IntPtr.Zero?displayProperty=fullName&gt;</ph>.","pos":[0,205],"source":"You can also test for a `null` return value from Windows API function calls that return either a pointer or a `null` by comparing the returned value with <xref:System.IntPtr.Zero?displayProperty=fullName>."},{"content":"For example, the call to the <ph id=\"ph1\">`GetWindow`</ph> function in the following example tries to retrieve the handle of a non-existent window.","pos":[206,335],"source":" For example, the call to the `GetWindow` function in the following example tries to retrieve the handle of a non-existent window."},{"content":"If it were called from unmanaged code, the function would return <ph id=\"ph1\">`null`</ph>, but when it is called from managed code, it returns <ph id=\"ph2\">&lt;xref:System.IntPtr.Zero?displayProperty=fullName&gt;</ph>.","pos":[336,512],"source":" If it were called from unmanaged code, the function would return `null`, but when it is called from managed code, it returns <xref:System.IntPtr.Zero?displayProperty=fullName>."}]},{"pos":[2051,2292],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IntPtr.Zero#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero2.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IntPtr.Zero#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero2.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.IntPtr.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero2.cs#1)]\n [!code-vb[System.IntPtr.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero2.vb#1)]"}],"pos":[58444,60760],"yaml":true,"extradata":"MT"},{"content":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data needed to serialize the current <xref href=\"System.IntPtr\"></xref> object.","nodes":[{"pos":[0,175],"content":"Populates a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object with the data needed to serialize the current <ph id=\"ph2\">&lt;xref href=\"System.IntPtr\"&gt;&lt;/xref&gt;</ph> object.","source":"Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data needed to serialize the current <xref href=\"System.IntPtr\"></xref> object."}],"pos":[63803,63979],"yaml":true},{"content":"This  method populates the `info` parameter with the value of the current <xref:System.IntPtr> object.","nodes":[{"pos":[0,102],"content":"This  method populates the <ph id=\"ph1\">`info`</ph> parameter with the value of the current <ph id=\"ph2\">&lt;xref:System.IntPtr&gt;</ph> object.","source":"This  method populates the `info` parameter with the value of the current <xref:System.IntPtr> object."}],"pos":[63990,64093],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to populate with data.","nodes":[{"pos":[0,101],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> object to populate with data.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to populate with data."}],"pos":[64368,64470],"yaml":true},{"content":"The destination for this serialization. (This parameter is not used; specify `null`.)","nodes":[{"pos":[0,85],"content":"The destination for this serialization. (This parameter is not used; specify `null`.)","nodes":[{"content":"The destination for this serialization.","pos":[0,39]},{"content":"(This parameter is not used; specify <ph id=\"ph1\">`null`</ph>.)","pos":[40,85],"source":" (This parameter is not used; specify `null`.)"}]}],"pos":[64565,64651],"yaml":true},{"content":"<code>info</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;info&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>info</code> is `null`."}],"pos":[64851,64880],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IntPtr\n  commentId: T:System.IntPtr\n  id: IntPtr\n  children:\n  - System.IntPtr.#ctor(System.Int32)\n  - System.IntPtr.#ctor(System.Int64)\n  - System.IntPtr.#ctor(System.Void*)\n  - System.IntPtr.Add(System.IntPtr,System.Int32)\n  - System.IntPtr.Equals(System.Object)\n  - System.IntPtr.GetHashCode\n  - System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  - System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)\n  - System.IntPtr.op_Explicit(System.Void* to System.IntPtr)\n  - System.IntPtr.op_Explicit(System.IntPtr to System.Int64)\n  - System.IntPtr.op_Explicit(System.IntPtr to System.Void*)\n  - System.IntPtr.op_Explicit(System.Int64 to System.IntPtr)\n  - System.IntPtr.op_Explicit(System.Int32 to System.IntPtr)\n  - System.IntPtr.op_Explicit(System.IntPtr to System.Int32)\n  - System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)\n  - System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  - System.IntPtr.Size\n  - System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  - System.IntPtr.ToInt32\n  - System.IntPtr.ToInt64\n  - System.IntPtr.ToPointer\n  - System.IntPtr.ToString(System.String)\n  - System.IntPtr.ToString\n  - System.IntPtr.Zero\n  - System.IntPtr.System#IEquatable{System#IntPtr}#Equals(System.IntPtr)\n  - System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  langs:\n  - csharp\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n  type: Struct\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: A platform-specific type that is used to represent a pointer or a handle.\n  remarks: \"The <xref:System.IntPtr> type is designed to be an integer whose size is platform-specific. That is, an instance of this type is expected to be 32-bits on 32-bit hardware and operating systems, and 64-bits on 64-bit hardware and operating systems.  \\n  \\n The <xref:System.IntPtr> type can be used by languages that support pointers, and as a common means of referring to data between languages that do and do not support pointers.  \\n  \\n <xref:System.IntPtr> objects can also be used to hold handles. For example, instances of <xref:System.IntPtr> are used extensively in the <xref:System.IO.FileStream?displayProperty=fullName> class to hold file handles.  \\n  \\n The <xref:System.IntPtr> type is CLS-compliant, while the <xref:System.UIntPtr> type is not. Only the <xref:System.IntPtr> type is used in the common language runtime. The <xref:System.UIntPtr> type is provided mostly to maintain architectural symmetry with the <xref:System.IntPtr> type.  \\n  \\n This type implements the <xref:System.Runtime.Serialization.ISerializable> interface.\"\n  example:\n  - \"The following example uses managed pointers to reverse the characters in an array. After it initializes a <xref:System.String> object and gets its length, it does the following:  \\n  \\n1.  Calls the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> method to copy the Unicode string to unmanaged memory as an ANSI (one-byte) character. The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged string. The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.  \\n  \\n2.  Calls the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> method to allocate the same number of bytes as the unmanaged string occupies. The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged block of memory. The Visual Basic example uses this pointer directly; in the C++ and C# examples, it is cast to a pointer to a byte.  \\n  \\n3.  The Visual Basic example defines a variable named `offset` that is equal to the length of the ANSI string. It is used to determine the offset into unmanaged memory to which the next charter in the ANSI string is copied. Because its starting value is the length of the string, the copy operation will copy a character from the start of the string to the end of the memory block.  \\n  \\n     The C# and C++ examples call the <xref:System.IntPtr.ToPointer%2A> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and they add one less than the length of the string to the starting address of the ANSI string. Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.  \\n  \\n4.  Uses a loop to copy each character from the string to the unmanaged block of memory.  \\n  \\n     The Visual Basic example calls the <xref:System.Runtime.InteropServices.Marshal.ReadByte%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName> method to read the byte (or one-byte character) at a specified offset from the managed pointer to the ANSI string. The offset is incremented with each iteration of the loop. It then calls the <xref:System.Runtime.InteropServices.Marshal.WriteByte%28System.IntPtr%2CSystem.Int32%2CSystem.Byte%29?displayProperty=fullName> method to write the byte to the memory address defined by the starting address of the unmanaged block of memory plus `offset`. It then decrements `offset`.  \\n  \\n     The C# and C++ examples perform the copy operation, then decrement the pointer to the address of the next location in the unmanaged ANSI string and increment the pointer to the next address in the unmanaged block.  \\n  \\n5.  All examples call the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <xref:System.String> object.  \\n  \\n6.  After displaying the original and reversed strings, all examples call the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.  \\n  \\n [!code-cpp[System.IntPtr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.intptr/cpp/topointer.cpp#1)]\\n [!code-csharp[System.IntPtr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr/cs/topointer.cs#1)]\\n [!code-vb[System.IntPtr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr/vb/topointer.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public struct IntPtr : System.Runtime.Serialization.ISerializable\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.Runtime.Serialization.ISerializable\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.#ctor(System.Int32)\n  commentId: M:System.IntPtr.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: IntPtr(Int32)\n  nameWithType: IntPtr.IntPtr(Int32)\n  fullName: IntPtr.IntPtr(Int32)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified 32-bit pointer or handle.\n  syntax:\n    content: public IntPtr (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: A pointer or handle contained in a 32-bit signed integer.\n  overload: System.IntPtr.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.#ctor(System.Int64)\n  commentId: M:System.IntPtr.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: IntPtr(Int64)\n  nameWithType: IntPtr.IntPtr(Int64)\n  fullName: IntPtr.IntPtr(Int64)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified 64-bit pointer.\n  remarks: An exception is only thrown if the value of `value` requires more bits than the current platform supports.\n  syntax:\n    content: public IntPtr (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: A pointer or handle contained in a 64-bit signed integer.\n  overload: System.IntPtr.#ctor*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: On a 32-bit platform, <code>value</code> is too large or too small to represent as an <xref href=\"System.IntPtr\"></xref>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.#ctor(System.Void*)\n  commentId: M:System.IntPtr.#ctor(System.Void*)\n  id: '#ctor(System.Void*)'\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: IntPtr(Void*)\n  nameWithType: IntPtr.IntPtr(Void*)\n  fullName: IntPtr.IntPtr(Void*)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of <xref href=\"System.IntPtr\"></xref> using the specified pointer to an unspecified type.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public IntPtr (void* value);\n    parameters:\n    - id: value\n      type: System.Void*\n      description: A pointer to an unspecified type.\n  overload: System.IntPtr.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.Add(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.Add(System.IntPtr,System.Int32)\n  id: Add(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: Add(IntPtr, Int32)\n  nameWithType: IntPtr.Add(IntPtr, Int32)\n  fullName: IntPtr.Add(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Adds an offset to the value of a pointer.\n  remarks: \"The <xref:System.IntPtr.Add%2A> method does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, the addition operation is performed in an unchecked context.  \\n  \\n Languages that do not support operator overloading or custom operators can use this method to add an offset to the value of a pointer.\"\n  example:\n  - \"The following example instantiates an <xref:System.IntPtr> object that points to the beginning of a ten-element array, and then calls the <xref:System.IntPtr.Add%2A> method to iterate the elements in the array.  \\n  \\n [!code-csharp[System.IntPtr.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.add/cs/add1.cs#1)]\\n [!code-vb[System.IntPtr.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.add/vb/add1.vb#1)]\"\n  syntax:\n    content: public static IntPtr Add (IntPtr pointer, int offset);\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: The pointer to add the offset to.\n    - id: offset\n      type: System.Int32\n      description: The offset to add.\n    return:\n      type: System.IntPtr\n      description: A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>.\n  overload: System.IntPtr.Add*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.Equals(System.Object)\n  commentId: M:System.IntPtr.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: IntPtr.Equals(Object)\n  fullName: IntPtr.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns a value indicating whether this instance is equal to a specified object.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: An object to compare with this instance or `null`.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>obj</code> is an instance of <xref href=\"System.IntPtr\"></xref> and equals the value of this instance; otherwise, `false`.'\n  overload: System.IntPtr.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.GetHashCode\n  commentId: M:System.IntPtr.GetHashCode\n  id: GetHashCode\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: IntPtr.GetHashCode()\n  fullName: IntPtr.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer hash code.\n  overload: System.IntPtr.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  id: op_Addition(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Addition(IntPtr, Int32)\n  nameWithType: IntPtr.op_Addition(IntPtr, Int32)\n  fullName: IntPtr.op_Addition(IntPtr, Int32)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Adds an offset to the value of a pointer.\n  remarks: \"The <xref:System.IntPtr.op_Addition%2A> method defines the addition operation for <xref:System.IntPtr> objects. It enables code such as the following.  \\n  \\n [!code-csharp[System.IntPtr.op_Addition#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/addition1.cs#1)]\\n [!code-vb[System.IntPtr.op_Addition#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/addition1.vb#1)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.IntPtr.Add%2A> method instead.  \\n  \\n The addition operation does not throw an exception if the result is too large to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.  \\n  \\n The equivalent method for this operator is <xref:System.IntPtr.Add%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>\"\n  syntax:\n    content: public static IntPtr op_Addition (IntPtr pointer, int offset);\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: The pointer to add the offset to.\n    - id: offset\n      type: System.Int32\n      description: The offset to add.\n    return:\n      type: System.IntPtr\n      description: A new pointer that reflects the addition of <code>offset</code> to <code>pointer</code>.\n  overload: System.IntPtr.op_Addition*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)\n  commentId: M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)\n  id: op_Equality(System.IntPtr,System.IntPtr)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Equality(IntPtr, IntPtr)\n  nameWithType: IntPtr.op_Equality(IntPtr, IntPtr)\n  fullName: IntPtr.op_Equality(IntPtr, IntPtr)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether two specified instances of <xref href=\"System.IntPtr\"></xref> are equal.\n  remarks: The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>\n  syntax:\n    content: public static bool op_Equality (IntPtr value1, IntPtr value2);\n    parameters:\n    - id: value1\n      type: System.IntPtr\n      description: The first pointer or handle to compare.\n    - id: value2\n      type: System.IntPtr\n      description: The second pointer or handle to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value1</code> equals <code>value2</code>; otherwise, `false`.'\n  overload: System.IntPtr.op_Equality*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.op_Explicit(System.Void* to System.IntPtr)\n  commentId: M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr\n  id: op_Explicit(System.Void* to System.IntPtr)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Explicit(Void* to IntPtr)\n  nameWithType: IntPtr.op_Explicit(Void* to IntPtr)\n  fullName: IntPtr.op_Explicit(Void* to IntPtr)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static IntPtr op_Explicit (void* value);\n    parameters:\n    - id: value\n      type: System.Void*\n      description: ''\n    return:\n      type: System.IntPtr\n      description: ''\n  overload: System.IntPtr.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int64)\n  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64\n  id: op_Explicit(System.IntPtr to System.Int64)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Explicit(IntPtr to Int64)\n  nameWithType: IntPtr.op_Explicit(IntPtr to Int64)\n  fullName: IntPtr.op_Explicit(IntPtr to Int64)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  syntax:\n    content: public static long op_Explicit (IntPtr value);\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: ''\n    return:\n      type: System.Int64\n      description: ''\n  overload: System.IntPtr.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Void*)\n  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*\n  id: op_Explicit(System.IntPtr to System.Void*)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Explicit(IntPtr to Void*)\n  nameWithType: IntPtr.op_Explicit(IntPtr to Void*)\n  fullName: IntPtr.op_Explicit(IntPtr to Void*)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public static void* op_Explicit (IntPtr value);\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: ''\n    return:\n      type: System.Void*\n      description: ''\n  overload: System.IntPtr.op_Explicit*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Explicit(System.Int64 to System.IntPtr)\n  commentId: M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr\n  id: op_Explicit(System.Int64 to System.IntPtr)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Explicit(Int64 to IntPtr)\n  nameWithType: IntPtr.op_Explicit(Int64 to IntPtr)\n  fullName: IntPtr.op_Explicit(Int64 to IntPtr)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  syntax:\n    content: public static IntPtr op_Explicit (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: ''\n    return:\n      type: System.IntPtr\n      description: ''\n  overload: System.IntPtr.op_Explicit*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Explicit(System.Int32 to System.IntPtr)\n  commentId: M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr\n  id: op_Explicit(System.Int32 to System.IntPtr)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Explicit(Int32 to IntPtr)\n  nameWithType: IntPtr.op_Explicit(Int32 to IntPtr)\n  fullName: IntPtr.op_Explicit(Int32 to IntPtr)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  syntax:\n    content: public static IntPtr op_Explicit (int value);\n    parameters:\n    - id: value\n      type: System.Int32\n      description: ''\n    return:\n      type: System.IntPtr\n      description: ''\n  overload: System.IntPtr.op_Explicit*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int32)\n  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32\n  id: op_Explicit(System.IntPtr to System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Explicit(IntPtr to Int32)\n  nameWithType: IntPtr.op_Explicit(IntPtr to Int32)\n  fullName: IntPtr.op_Explicit(IntPtr to Int32)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  syntax:\n    content: public static int op_Explicit (IntPtr value);\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: ''\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.IntPtr.op_Explicit*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)\n  commentId: M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)\n  id: op_Inequality(System.IntPtr,System.IntPtr)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Inequality(IntPtr, IntPtr)\n  nameWithType: IntPtr.op_Inequality(IntPtr, IntPtr)\n  fullName: IntPtr.op_Inequality(IntPtr, IntPtr)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Determines whether two specified instances of <xref href=\"System.IntPtr\"></xref> are not equal.\n  remarks: The equivalent method for this operator is <xref:System.IntPtr.Equals%28System.Object%29?displayProperty=fullName>\n  syntax:\n    content: public static bool op_Inequality (IntPtr value1, IntPtr value2);\n    parameters:\n    - id: value1\n      type: System.IntPtr\n      description: The first pointer or handle to compare.\n    - id: value2\n      type: System.IntPtr\n      description: The second pointer or handle to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value1</code> does not equal <code>value2</code>; otherwise, `false`.'\n  overload: System.IntPtr.op_Inequality*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  id: op_Subtraction(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: op_Subtraction(IntPtr, Int32)\n  nameWithType: IntPtr.op_Subtraction(IntPtr, Int32)\n  fullName: IntPtr.op_Subtraction(IntPtr, Int32)\n  type: Operator\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Subtracts an offset from the value of a pointer.\n  remarks: \"The <xref:System.IntPtr.op_Subtraction%2A> method defines the subtraction operation for <xref:System.IntPtr> objects. It enables code such as the following.  \\n  \\n [!code-csharp[System.IntPtr.op_Addition#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.op_addition/cs/op_subtraction1.cs#2)]\\n [!code-vb[System.IntPtr.op_Addition#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.op_addition/vb/op_subtraction1.vb#2)]  \\n  \\n Languages that do not support custom operators can call the <xref:System.IntPtr.Subtract%2A> method instead.  \\n  \\n The subtraction operation does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, it is performed in an unchecked context.  \\n  \\n The equivalent method for this operator is <xref:System.IntPtr.Subtract%28System.IntPtr%2CSystem.Int32%29?displayProperty=fullName>\"\n  syntax:\n    content: public static IntPtr op_Subtraction (IntPtr pointer, int offset);\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: The pointer to subtract the offset from.\n    - id: offset\n      type: System.Int32\n      description: The offset to subtract.\n    return:\n      type: System.IntPtr\n      description: A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>.\n  overload: System.IntPtr.op_Subtraction*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.Size\n  commentId: P:System.IntPtr.Size\n  id: Size\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: Size\n  nameWithType: IntPtr.Size\n  fullName: IntPtr.Size\n  type: Property\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Gets the size of this instance.\n  syntax:\n    content: >-\n      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      public static int Size { get; }\n    return:\n      type: System.Int32\n      description: The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the `/platform` switch when you compile your code with the C# and Visual Basic compilers.\n  overload: System.IntPtr.Size*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  id: Subtract(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: Subtract(IntPtr, Int32)\n  nameWithType: IntPtr.Subtract(IntPtr, Int32)\n  fullName: IntPtr.Subtract(IntPtr, Int32)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Subtracts an offset from the value of a pointer.\n  remarks: \"The <xref:System.IntPtr.Subtract%2A> method does not throw an exception if the result is too small to represent as a pointer on the specified platform. Instead, the subtraction operation is performed in an unchecked context.  \\n  \\n Languages that do not support operator overloading or custom operators can use this method to subtract an offset from the value of a pointer.\"\n  example:\n  - \"The following example instantiates an <xref:System.IntPtr> object that points to the end of a ten-element array, and then calls the <xref:System.IntPtr.Subtract%2A> method to iterate the elements in the array in reverse order.  \\n  \\n [!code-csharp[System.IntPtr.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.subtract/cs/subtract1.cs#1)]\\n [!code-vb[System.IntPtr.Subtract#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.subtract/vb/subtract1.vb#1)]\"\n  syntax:\n    content: public static IntPtr Subtract (IntPtr pointer, int offset);\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: The pointer to subtract the offset from.\n    - id: offset\n      type: System.Int32\n      description: The offset to subtract.\n    return:\n      type: System.IntPtr\n      description: A new pointer that reflects the subtraction of <code>offset</code> from <code>pointer</code>.\n  overload: System.IntPtr.Subtract*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.ToInt32\n  commentId: M:System.IntPtr.ToInt32\n  id: ToInt32\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: ToInt32()\n  nameWithType: IntPtr.ToInt32()\n  fullName: IntPtr.ToInt32()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of this instance to a 32-bit signed integer.\n  syntax:\n    content: public int ToInt32 ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A 32-bit signed integer equal to the value of this instance.\n  overload: System.IntPtr.ToInt32*\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.ToInt64\n  commentId: M:System.IntPtr.ToInt64\n  id: ToInt64\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: ToInt64()\n  nameWithType: IntPtr.ToInt64()\n  fullName: IntPtr.ToInt64()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of this instance to a 64-bit signed integer.\n  syntax:\n    content: public long ToInt64 ();\n    parameters: []\n    return:\n      type: System.Int64\n      description: A 64-bit signed integer equal to the value of this instance.\n  overload: System.IntPtr.ToInt64*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.ToPointer\n  commentId: M:System.IntPtr.ToPointer\n  id: ToPointer\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: ToPointer()\n  nameWithType: IntPtr.ToPointer()\n  fullName: IntPtr.ToPointer()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the value of this instance to a pointer to an unspecified type.\n  remarks: ''\n  example:\n  - \"The following example uses managed pointers to reverse the characters in an array. After it initializes a <xref:System.String> object and gets its length, it does the following:  \\n  \\n-   Calls the <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> method to copy the Unicode string to unmanaged memory as ANSI (one-byte) characters. The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged string.  \\n  \\n-   Calls the <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> method to allocate the same number of bytes as the unmanaged string occupies. The method returns an <xref:System.IntPtr> object that points to the beginning of the unmanaged block of memory.  \\n  \\n-   Calls the <xref:System.IntPtr.ToPointer%2A> method to get an unmanaged pointer to the starting address of the string and the unmanaged block of memory, and adds one less than the length of the string to the starting address of the ANSI string. Because the unmanaged string pointer now points to the end of the string, the copy operation will copy a character from the end of the string to the start of the memory block.  \\n  \\n-   Uses a loop to copy each character from the string to the unmanaged block of memory. After each copy operation, it decrements the pointer to the address of the next location in the unmanaged ANSI string and increments the pointer to the next address in the unmanaged block.  \\n  \\n-   Calls the <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName> to convert the unmanaged memory block containing the copied ANSI string to a managed Unicode <xref:System.String> object.  \\n  \\n-   After displaying the original and reversed strings, calls the <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName> method to free the memory allocated for the unmanaged ANSI string and the unmanaged block of memory.  \\n  \\n [!code-cpp[System.IntPtr.ToPointer#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/System.IntPtr.ToPointer/cpp/topointer.cpp#1)]\\n [!code-csharp[System.IntPtr.ToPointer#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.IntPtr.ToPointer/cs/topointer.cs#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      public void* ToPointer ();\n    parameters: []\n    return:\n      type: System.Void*\n      description: A pointer to <xref href=\"System.Void\"></xref>; that is, a pointer to memory containing data of an unspecified type.\n  overload: System.IntPtr.ToPointer*\n  exceptions: []\n  attributes:\n  - type: System.CLSCompliantAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.ToString(System.String)\n  commentId: M:System.IntPtr.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: ToString(String)\n  nameWithType: IntPtr.ToString(String)\n  fullName: IntPtr.ToString(String)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the numeric value of the current <xref href=\"System.IntPtr\"></xref> object to its equivalent string representation.\n  remarks: \"If the `format` parameter is `null` or an empty string (\\\"\\\"), the return value is formatted with the general format specifier (\\\"G\\\"). For more information about numeric format specifiers, see the [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) topic.  \\n  \\n The return value is formatted using the invariant culture.\"\n  syntax:\n    content: public string ToString (string format);\n    parameters:\n    - id: format\n      type: System.String\n      description: A format specification that governs how the current <xref href=\"System.IntPtr\"></xref> object is converted.\n    return:\n      type: System.String\n      description: The string representation of the value of the current <xref href=\"System.IntPtr\"></xref> object.\n  overload: System.IntPtr.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.ToString\n  commentId: M:System.IntPtr.ToString\n  id: ToString\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: IntPtr.ToString()\n  fullName: IntPtr.ToString()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Converts the numeric value of the current <xref href=\"System.IntPtr\"></xref> object to its equivalent string representation.\n  remarks: If the value of the <xref:System.IntPtr.Size%2A> property for this instance is 4, then this method is equivalent to <xref:System.Int32.ToString%2A?displayProperty=fullName>; otherwise, this method is equivalent to <xref:System.Int64.ToString%2A?displayProperty=fullName>.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string representation of the value of this instance.\n  overload: System.IntPtr.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.Zero\n  commentId: F:System.IntPtr.Zero\n  id: Zero\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: Zero\n  nameWithType: IntPtr.Zero\n  fullName: IntPtr.Zero\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: A read-only field that represents a pointer or handle that has been initialized to zero.\n  remarks: \"The value of this field is not equivalent to `null`. Use this field to efficiently determine whether an instance of <xref:System.IntPtr> has been set to a value other than zero.  \\n  \\n For example, assume the variable, ip, is an instance of <xref:System.IntPtr>. You can determine if it has been set by comparing it to the value returned by a constructor, for example: \\\" `if ip != new IntPtr(0)...` \\\". However, invoking a constructor to get an unintialized pointer is inefficient. It is better to code either \\\" `if ip != IntPtr.Zero...` \\\", or \\\" `if !IntPtr.Zero.Equals(ip)...` \\\".  \\n  \\n When calling the Windows API from managed code, you can pass <xref:System.IntPtr.Zero?displayProperty=fullName> instead of `null` if an argument is expected to be either a pointer or a `null`. For example, the following call to the Windows `CreateFile` function supplies <xref:System.IntPtr.Zero?displayProperty=fullName> for the `pSecurityAttributes` and `hTemplateFile` argument values.  \\n  \\n [!code-csharp[System.IntPtr.Zero#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero4.cs#2)]\\n [!code-vb[System.IntPtr.Zero#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero4.vb#2)]  \\n  \\n> [!NOTE]\\n>  Although <xref:System.IntPtr.Zero> is equivalent to `null` for Windows API functions with parameters or return values that can be either pointers or `null`, <xref:System.IntPtr.Zero> is not equivalent to `null`. Passing `null` to the `IntPtr.Zero.Equals` method always returns `false`.  \\n  \\n You can also test for a `null` return value from Windows API function calls that return either a pointer or a `null` by comparing the returned value with <xref:System.IntPtr.Zero?displayProperty=fullName>. For example, the call to the `GetWindow` function in the following example tries to retrieve the handle of a non-existent window. If it were called from unmanaged code, the function would return `null`, but when it is called from managed code, it returns <xref:System.IntPtr.Zero?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.IntPtr.Zero#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.intptr.zero/cs/zero2.cs#1)]\\n [!code-vb[System.IntPtr.Zero#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.intptr.zero/vb/zero2.vb#1)]\"\n  syntax:\n    content: public static readonly IntPtr Zero;\n    return:\n      type: System.IntPtr\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IntPtr.System#IEquatable{System#IntPtr}#Equals(System.IntPtr)\n  commentId: M:System.IntPtr.System#IEquatable<System#IntPtr>#Equals(System.IntPtr)\n  id: System#IEquatable{System#IntPtr}#Equals(System.IntPtr)\n  isEii: true\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: IEquatable<IntPtr>.Equals(IntPtr)\n  nameWithType: IntPtr.IEquatable<IntPtr>.Equals(IntPtr)\n  fullName: IntPtr.IEquatable<IntPtr>.Equals(IntPtr)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: bool IEquatable<IntPtr>.Equals (IntPtr other);\n    parameters:\n    - id: other\n      type: System.IntPtr\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.IntPtr.System#IEquatable{System#IntPtr}#Equals*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  isEii: true\n  parent: System.IntPtr\n  langs:\n  - csharp\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: IntPtr.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: IntPtr.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Populates a <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object with the data needed to serialize the current <xref href=\"System.IntPtr\"></xref> object.\n  remarks: This  method populates the `info` parameter with the value of the current <xref:System.IntPtr> object.\n  syntax:\n    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> object to populate with data.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The destination for this serialization. (This parameter is not used; specify `null`.)\n  overload: System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>info</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.OverflowException\n  parent: System\n  isExternal: false\n  name: OverflowException\n  nameWithType: OverflowException\n  fullName: System.OverflowException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.IntPtr.#ctor(System.Int32)\n  parent: System.IntPtr\n  isExternal: false\n  name: IntPtr(Int32)\n  nameWithType: IntPtr.IntPtr(Int32)\n  fullName: IntPtr.IntPtr(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IntPtr.#ctor(System.Int64)\n  parent: System.IntPtr\n  isExternal: false\n  name: IntPtr(Int64)\n  nameWithType: IntPtr.IntPtr(Int64)\n  fullName: IntPtr.IntPtr(Int64)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IntPtr.#ctor(System.Void*)\n  parent: System.IntPtr\n  isExternal: false\n  name: IntPtr(Void*)\n  nameWithType: IntPtr.IntPtr(Void*)\n  fullName: IntPtr.IntPtr(Void*)\n- uid: System.Void\n  name: Void\n  nameWithType: Void\n  fullName: System.Void\n- uid: System.Void*\n  parent: System\n  isExternal: false\n  name: Void*\n  nameWithType: Void*\n  fullName: System.Void*\n  spec.csharp:\n  - uid: System.Void\n    name: Void\n    nameWithType: Void\n    fullName: System.Void\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.IntPtr.Add(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  isExternal: false\n  name: Add(IntPtr, Int32)\n  nameWithType: IntPtr.Add(IntPtr, Int32)\n  fullName: IntPtr.Add(IntPtr, Int32)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.IntPtr.Equals(System.Object)\n  parent: System.IntPtr\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: IntPtr.Equals(Object)\n  fullName: IntPtr.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IntPtr.GetHashCode\n  parent: System.IntPtr\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: IntPtr.GetHashCode()\n  fullName: IntPtr.GetHashCode()\n- uid: System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Addition(IntPtr, Int32)\n  nameWithType: IntPtr.op_Addition(IntPtr, Int32)\n  fullName: IntPtr.op_Addition(IntPtr, Int32)\n- uid: System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Equality(IntPtr, IntPtr)\n  nameWithType: IntPtr.op_Equality(IntPtr, IntPtr)\n  fullName: IntPtr.op_Equality(IntPtr, IntPtr)\n- uid: System.IntPtr.op_Explicit(System.Void* to System.IntPtr)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Explicit(Void* to IntPtr)\n  nameWithType: IntPtr.op_Explicit(Void* to IntPtr)\n  fullName: IntPtr.op_Explicit(Void* to IntPtr)\n- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int64)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Explicit(IntPtr to Int64)\n  nameWithType: IntPtr.op_Explicit(IntPtr to Int64)\n  fullName: IntPtr.op_Explicit(IntPtr to Int64)\n- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Void*)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Explicit(IntPtr to Void*)\n  nameWithType: IntPtr.op_Explicit(IntPtr to Void*)\n  fullName: IntPtr.op_Explicit(IntPtr to Void*)\n- uid: System.IntPtr.op_Explicit(System.Int64 to System.IntPtr)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Explicit(Int64 to IntPtr)\n  nameWithType: IntPtr.op_Explicit(Int64 to IntPtr)\n  fullName: IntPtr.op_Explicit(Int64 to IntPtr)\n- uid: System.IntPtr.op_Explicit(System.Int32 to System.IntPtr)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Explicit(Int32 to IntPtr)\n  nameWithType: IntPtr.op_Explicit(Int32 to IntPtr)\n  fullName: IntPtr.op_Explicit(Int32 to IntPtr)\n- uid: System.IntPtr.op_Explicit(System.IntPtr to System.Int32)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Explicit(IntPtr to Int32)\n  nameWithType: IntPtr.op_Explicit(IntPtr to Int32)\n  fullName: IntPtr.op_Explicit(IntPtr to Int32)\n- uid: System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Inequality(IntPtr, IntPtr)\n  nameWithType: IntPtr.op_Inequality(IntPtr, IntPtr)\n  fullName: IntPtr.op_Inequality(IntPtr, IntPtr)\n- uid: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Subtraction(IntPtr, Int32)\n  nameWithType: IntPtr.op_Subtraction(IntPtr, Int32)\n  fullName: IntPtr.op_Subtraction(IntPtr, Int32)\n- uid: System.IntPtr.Size\n  parent: System.IntPtr\n  isExternal: false\n  name: Size\n  nameWithType: IntPtr.Size\n  fullName: IntPtr.Size\n- uid: System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  isExternal: false\n  name: Subtract(IntPtr, Int32)\n  nameWithType: IntPtr.Subtract(IntPtr, Int32)\n  fullName: IntPtr.Subtract(IntPtr, Int32)\n- uid: System.IntPtr.ToInt32\n  parent: System.IntPtr\n  isExternal: false\n  name: ToInt32()\n  nameWithType: IntPtr.ToInt32()\n  fullName: IntPtr.ToInt32()\n- uid: System.IntPtr.ToInt64\n  parent: System.IntPtr\n  isExternal: false\n  name: ToInt64()\n  nameWithType: IntPtr.ToInt64()\n  fullName: IntPtr.ToInt64()\n- uid: System.IntPtr.ToPointer\n  parent: System.IntPtr\n  isExternal: false\n  name: ToPointer()\n  nameWithType: IntPtr.ToPointer()\n  fullName: IntPtr.ToPointer()\n- uid: System.IntPtr.ToString(System.String)\n  parent: System.IntPtr\n  isExternal: false\n  name: ToString(String)\n  nameWithType: IntPtr.ToString(String)\n  fullName: IntPtr.ToString(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IntPtr.ToString\n  parent: System.IntPtr\n  isExternal: false\n  name: ToString()\n  nameWithType: IntPtr.ToString()\n  fullName: IntPtr.ToString()\n- uid: System.IntPtr.Zero\n  parent: System.IntPtr\n  isExternal: false\n  name: Zero\n  nameWithType: IntPtr.Zero\n  fullName: IntPtr.Zero\n- uid: System.IntPtr.System#IEquatable{System#IntPtr}#Equals(System.IntPtr)\n  parent: System.IntPtr\n  isExternal: false\n  name: IEquatable<IntPtr>.Equals(IntPtr)\n  nameWithType: IntPtr.IEquatable<IntPtr>.Equals(IntPtr)\n  fullName: IntPtr.IEquatable<IntPtr>.Equals(IntPtr)\n- uid: System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.IntPtr\n  isExternal: false\n  name: ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: IntPtr.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: IntPtr.ISerializable.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.IntPtr.#ctor*\n  parent: System.IntPtr\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr.IntPtr\n  fullName: IntPtr.IntPtr\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.Add*\n  parent: System.IntPtr\n  isExternal: false\n  name: Add\n  nameWithType: IntPtr.Add\n  fullName: IntPtr.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.Equals*\n  parent: System.IntPtr\n  isExternal: false\n  name: Equals\n  nameWithType: IntPtr.Equals\n  fullName: IntPtr.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.GetHashCode*\n  parent: System.IntPtr\n  isExternal: false\n  name: GetHashCode\n  nameWithType: IntPtr.GetHashCode\n  fullName: IntPtr.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Addition*\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Addition\n  nameWithType: IntPtr.op_Addition\n  fullName: IntPtr.op_Addition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Equality*\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Equality\n  nameWithType: IntPtr.op_Equality\n  fullName: IntPtr.op_Equality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Explicit*\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Explicit\n  nameWithType: IntPtr.op_Explicit\n  fullName: IntPtr.op_Explicit\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Inequality*\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Inequality\n  nameWithType: IntPtr.op_Inequality\n  fullName: IntPtr.op_Inequality\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.op_Subtraction*\n  parent: System.IntPtr\n  isExternal: false\n  name: op_Subtraction\n  nameWithType: IntPtr.op_Subtraction\n  fullName: IntPtr.op_Subtraction\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.Size*\n  parent: System.IntPtr\n  isExternal: false\n  name: Size\n  nameWithType: IntPtr.Size\n  fullName: IntPtr.Size\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.Subtract*\n  parent: System.IntPtr\n  isExternal: false\n  name: Subtract\n  nameWithType: IntPtr.Subtract\n  fullName: IntPtr.Subtract\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.ToInt32*\n  parent: System.IntPtr\n  isExternal: false\n  name: ToInt32\n  nameWithType: IntPtr.ToInt32\n  fullName: IntPtr.ToInt32\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.ToInt64*\n  parent: System.IntPtr\n  isExternal: false\n  name: ToInt64\n  nameWithType: IntPtr.ToInt64\n  fullName: IntPtr.ToInt64\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.ToPointer*\n  parent: System.IntPtr\n  isExternal: false\n  name: ToPointer\n  nameWithType: IntPtr.ToPointer\n  fullName: IntPtr.ToPointer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.ToString*\n  parent: System.IntPtr\n  isExternal: false\n  name: ToString\n  nameWithType: IntPtr.ToString\n  fullName: IntPtr.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.System#IEquatable{System#IntPtr}#Equals*\n  parent: System.IntPtr\n  isExternal: false\n  name: System.IEquatable<System.IntPtr>.Equals\n  nameWithType: IntPtr.System.IEquatable<System.IntPtr>.Equals\n  fullName: IntPtr.System.IEquatable<System.IntPtr>.Equals\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.IntPtr.System#Runtime#Serialization#ISerializable#GetObjectData*\n  parent: System.IntPtr\n  isExternal: false\n  name: System.Runtime.Serialization.ISerializable.GetObjectData\n  nameWithType: IntPtr.System.Runtime.Serialization.ISerializable.GetObjectData\n  fullName: IntPtr.System.Runtime.Serialization.ISerializable.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IntPtr.xml\n- uid: System.Runtime.Serialization.ISerializable\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: ISerializable\n  nameWithType: ISerializable\n  fullName: System.Runtime.Serialization.ISerializable\n"}