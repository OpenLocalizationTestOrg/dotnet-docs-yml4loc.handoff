<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">267be7d83da6f7346c9a381922a685c2fd11dd69</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.InteropServices.ComTypes.IDataObject.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b019da336833c47f401a10cc5b626e5624a3c251</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4bc468f60d7dff5d71aea38c8bac8c9df2b2ad17</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides the managed definition of the <ph id="ph1">`IDataObject`</ph> interface.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about the <ph id="ph1">`IDataObject`</ph> interface, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The common language runtime throws an exception when a COM method in native code returns an HRESULT.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Map HRESULTs and Exceptions<ept id="p1">](~/docs/framework/interop/how-to-map-hresults-and-exceptions.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>Creates a connection between a data object and an advisory sink.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::DAdvise`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.ADVF"&gt;&lt;/xref&gt;</ph> values that specifies a group of flags for controlling the advisory connection.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>A pointer to the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IAdviseSink"&gt;&lt;/xref&gt;</ph> interface on the advisory sink that will receive the change notification.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>When this method returns, contains a pointer to a DWORD token that identifies this connection.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You can use this token later to delete the advisory connection by passing it to <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>If this value is zero, the connection was not established.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>S_OK</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The advisory connection was created.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>E_NOTIMPL</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>This method is not implemented on the data object.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>DV_E_LINDEX</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>There is an invalid value for <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"&gt;&lt;/xref&gt;</ph>; currently, only -1 is supported.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>DV_E_FORMATETC</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>There is an invalid value for the <ph id="ph1">&lt;code&gt;pFormatetc&lt;/code&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>OLE_E_ADVISENOTSUPPORTED</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The data object does not support change notification.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Destroys a notification connection that had been previously established.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::DUnAdvise`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A DWORD token that specifies the connection to remove.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>Use the value returned by <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)"&gt;&lt;/xref&gt;</ph> when the connection was originally established.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Creates an object that can be used to enumerate the current advisory connections.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::EnumDAdvise`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>When this method returns, contains an <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IEnumSTATDATA"&gt;&lt;/xref&gt;</ph> that receives the interface pointer to the new enumerator object.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>If the implementation sets <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">enumAdvise</ph><ept id="p1">&lt;/code&gt;</ept> to <ph id="ph2">`null`</ph>, there are no connections to advisory sinks at this time.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>This method supports the standard return value E_OUTOFMEMORY, as well as the following:</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>S_OK</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The enumerator object is successfully instantiated or there are no connections.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>OLE_E_ADVISENOTSUPPORTED</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>This object does not support advisory notifications.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>Creates an object for enumerating the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structures for a data object.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>These structures are used in calls to <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph> or <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::EnumFormatEtc`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>One of the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.DATADIR"&gt;&lt;/xref&gt;</ph> values that specifies the direction of the data.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>S_OK</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The enumerator object was successfully created.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>E_NOTIMPL</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>The direction specified by the <ph id="ph1">&lt;code&gt;direction&lt;/code&gt;</ph> parameter is not supported.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>OLE_S_USEREG</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Requests that OLE enumerate the formats from the registry.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Provides a standard <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure that is logically equivalent to a more complex structure.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Use this method to determine whether two different <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structures would return the same data, removing the need for duplicate rendering.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::GetCanonicalFormatEtc`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED"&gt;&lt;/xref&gt;</ph> member is not significant in this case and should be ignored.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>When this method returns, contains a pointer to a <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">formatetIn</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The caller must allocate this structure and the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)"&gt;&lt;/xref&gt;</ph> method must fill in the data.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>To retrieve data in a subsequent call such as <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph>, the caller uses the supplied value of <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">formatOut</ph><ept id="p1">&lt;/code&gt;</ept>, unless the value supplied is <ph id="ph3">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>This value is <ph id="ph1">`null`</ph> if the method returns <ph id="ph2">`DATA_S_SAMEFORMATETC`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED"&gt;&lt;/xref&gt;</ph> member is not significant in this case and should be ignored.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>S_OK</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>The returned <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure is different from the one that was passed.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>DATA_S_SAMEFORMATETC</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structures are the same and <ph id="ph2">`null`</ph> is returned in the <ph id="ph3">&lt;code&gt;formatOut&lt;/code&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>DV_E_LINDEX</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>There is an invalid value for <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"&gt;&lt;/xref&gt;</ph>; currently, only -1 is supported.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>DV_E_FORMATETC</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>There is an invalid value for the <ph id="ph1">&lt;code&gt;pFormatetc&lt;/code&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>OLE_E_NOTRUNNING</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The application is not running.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>Obtains data from a source data object.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph> method, which is called by a data consumer, renders the data described in the specified <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure and transfers it through the specified <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>The caller then assumes responsibility for releasing the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::GetData`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure, passed by reference, that defines the format, medium, and target device to use when passing the data.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>When this method returns, contains a pointer to the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM"&gt;&lt;/xref&gt;</ph> structure that indicates the storage medium containing the returned data through its <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed"&gt;&lt;/xref&gt;</ph> member, and the responsibility for releasing the medium through the value of its <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"&gt;&lt;/xref&gt;</ph> member.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>If <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`null`</ph>, the receiver of the medium is responsible for releasing it; otherwise, <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"&gt;&lt;/xref&gt;</ph> points to the <ph id="ph4">`IUnknown`</ph> interface on the appropriate object so its <ph id="ph5">`Release`</ph> method can be called.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>The medium must be allocated and filled in by <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>This parameter is passed uninitialized.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Obtains data from a source data object.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>This method, which is called by a data consumer, differs from the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph> method in that the caller must allocate and free the specified storage medium.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::GetDataHere`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure, passed by reference, that defines the format, medium, and target device to use when passing the data.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>Only one medium can be specified in <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED"&gt;&lt;/xref&gt;</ph>, and only the following <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED"&gt;&lt;/xref&gt;</ph> values are valid: <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE"&gt;&lt;/xref&gt;</ph>, <ph id="ph4">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM"&gt;&lt;/xref&gt;</ph>, <ph id="ph5">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL"&gt;&lt;/xref&gt;</ph>, or <ph id="ph6">&lt;xref href="System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM"&gt;&lt;/xref&gt;</ph>, passed by reference, that defines the storage medium containing the data being transferred.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The medium must be allocated by the caller and filled in by <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The caller must also free the medium.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>The implementation of this method must always supply a value of <ph id="ph1">`null`</ph> for the <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease"&gt;&lt;/xref&gt;</ph> member of the <ph id="ph3">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM"&gt;&lt;/xref&gt;</ph> structure that this parameter points to.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Determines whether the data object is capable of rendering the data described in the <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Objects attempting a paste or drop operation can call this method before calling <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph> to get an indication of whether the operation may be successful.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::QueryGetData`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>A pointer to a <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure, passed by reference, that defines the format, medium, and target device to use for the query.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Value</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>Description</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>S_OK</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>A subsequent call to <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)"&gt;&lt;/xref&gt;</ph> would probably be successful.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>DV_E_LINDEX</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>An invalid value for <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.lindex"&gt;&lt;/xref&gt;</ph>; currently, only -1 is supported.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>DV_E_FORMATETC</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>An invalid value for the <ph id="ph1">&lt;code&gt;pFormatetc&lt;/code&gt;</ph> parameter.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>DV_E_TYMED</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An invalid <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.tymed"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>DV_E_DVASPECT</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>An invalid <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>OLE_E_NOTRUNNING</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The application is not running.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Transfers data to the object that implements this method.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>This method is called by an object that contains a data source.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about <ph id="ph1">`IDataObject::SetData`</ph>, see the MSDN Library.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.FORMATETC"&gt;&lt;/xref&gt;</ph> structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Runtime.InteropServices.ComTypes.STGMEDIUM"&gt;&lt;/xref&gt;</ph> structure, passed by reference, that defines the storage medium in which the data is being passed.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> to specify that the data object called, which implements <ph id="ph2">&lt;xref href="System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)"&gt;&lt;/xref&gt;</ph>, owns the storage medium after the call returns.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>This means that the data object must free the medium after it has been used by calling the <ph id="ph1">`ReleaseStgMedium`</ph> function.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`false`</ph> to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>