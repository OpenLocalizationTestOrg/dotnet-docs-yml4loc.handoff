{"nodes":[{"content":"Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.","nodes":[{"pos":[0,96],"content":"Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.","nodes":[{"content":"Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.","pos":[0,96],"nodes":[{"content":"Notifies one or more waiting threads that an event has occurred.","pos":[0,64]},{"content":"This class cannot be inherited.","pos":[65,96]}]}]}],"pos":[464,561],"yaml":true},{"content":"In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class. A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.  \n  \n <xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling. Typically, this communication concerns a task which one thread must complete before other threads can proceed.  \n  \n When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state. This thread can be thought of as controlling the `ManualResetEvent`. Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal. When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed. All waiting threads are released.  \n  \n Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset. That is, calls to `WaitOne` return immediately.  \n  \n You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.  \n  \n `ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.  \n  \n For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.","nodes":[{"pos":[0,337],"content":"In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class. A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode?displayProperty=fullName>.","nodes":[{"content":"In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class. A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode?displayProperty=fullName>.","pos":[0,337],"nodes":[{"content":"In the .NET Framework version 2.0, <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> derives from the new <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class.","pos":[0,143],"source":"In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is functionally equivalent to an <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> created with <ph id=\"ph3\">&lt;xref:System.Threading.EventResetMode?displayProperty=fullName&gt;</ph>.","pos":[144,337],"source":" A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode?displayProperty=fullName>."}]}]},{"pos":[345,520],"content":"[!NOTE]\n Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.","leadings":["","> "],"nodes":[{"content":"Unlike the <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> class, the <ph id=\"ph2\">&lt;xref:System.Threading.EventWaitHandle&gt;</ph> class provides access to named system synchronization events.","pos":[9,173],"source":" Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events."}]},{"pos":[527,738],"content":"<xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling. Typically, this communication concerns a task which one thread must complete before other threads can proceed.","nodes":[{"content":"<xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling. Typically, this communication concerns a task which one thread must complete before other threads can proceed.","pos":[0,211],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> allows threads to communicate with each other by signaling.","pos":[0,100],"source":"<xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling."},{"content":"Typically, this communication concerns a task which one thread must complete before other threads can proceed.","pos":[101,211]}]}]},{"pos":[745,1319],"content":"When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state. This thread can be thought of as controlling the `ManualResetEvent`. Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal. When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed. All waiting threads are released.","nodes":[{"content":"When a thread begins an activity that must complete before other threads proceed, it calls <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle.Reset%2A&gt;</ph> to put <ph id=\"ph2\">`ManualResetEvent`</ph> in the non-signaled state.","pos":[0,192],"source":"When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state."},{"content":"This thread can be thought of as controlling the <ph id=\"ph1\">`ManualResetEvent`</ph>.","pos":[193,261],"source":" This thread can be thought of as controlling the `ManualResetEvent`."},{"content":"Threads that call <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandle.WaitOne%2A&gt;</ph> on the <ph id=\"ph2\">`ManualResetEvent`</ph> will block, awaiting the signal.","pos":[262,384],"source":" Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal."},{"content":"When the controlling thread completes the activity, it calls <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> to signal that the waiting threads can proceed.","pos":[385,540],"source":" When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed."},{"content":"All waiting threads are released.","pos":[541,574]}]},{"pos":[1326,1464],"content":"Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset. That is, calls to `WaitOne` return immediately.","nodes":[{"content":"Once it has been signaled, <ph id=\"ph1\">`ManualResetEvent`</ph> remains signaled until it is manually reset.","pos":[0,90],"source":"Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset."},{"content":"That is, calls to <ph id=\"ph1\">`WaitOne`</ph> return immediately.","pos":[91,138],"source":" That is, calls to `WaitOne` return immediately."}]},{"pos":[1471,1638],"content":"You can control the initial state of a <ph id=\"ph1\">`ManualResetEvent`</ph> by passing a Boolean value to the constructor, <ph id=\"ph2\">`true`</ph> if the initial state is signaled and <ph id=\"ph3\">`false`</ph> otherwise.","source":"You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise."},{"pos":[1645,1802],"content":"<ph id=\"ph1\">`ManualResetEvent`</ph> can also be used with the <ph id=\"ph2\">`static`</ph><ph id=\"ph3\">&lt;xref:System.Threading.WaitHandle.WaitAll%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Threading.WaitHandle.WaitAny%2A&gt;</ph> methods.","source":"`ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods."},{"pos":[1809,2023],"content":"For more information about thread synchronization mechanisms, see <bpt id=\"p1\">[</bpt>ManualResetEvent and ManualResetEventSlim<ept id=\"p1\">](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md)</ept> in the conceptual documentation.","source":"For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation."}],"pos":[572,2613],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEvent\"></xref> class with a Boolean value indicating whether to set the initial state to signaled.","nodes":[{"pos":[0,172],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Threading.ManualResetEvent\"&gt;&lt;/xref&gt;</ph> class with a Boolean value indicating whether to set the initial state to signaled.","source":"Initializes a new instance of the <xref href=\"System.Threading.ManualResetEvent\"></xref> class with a Boolean value indicating whether to set the initial state to signaled."}],"pos":[9777,9950],"yaml":true},{"content":"If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block. If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.","nodes":[{"pos":[0,350],"content":"If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block. If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.","nodes":[{"content":"If the initial state of a <ph id=\"ph1\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> is signaled (that is, if it is created by passing <ph id=\"ph2\">`true`</ph> for <ph id=\"ph3\">`initialState`</ph>), threads that wait on the <ph id=\"ph4\">&lt;xref:System.Threading.ManualResetEvent&gt;</ph> do not block.","pos":[0,224],"source":"If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block."},{"content":"If the initial state is nonsignaled, threads block until the <ph id=\"ph1\">&lt;xref:System.Threading.EventWaitHandle.Set%2A&gt;</ph> method is called.","pos":[225,350],"source":" If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called."}]}],"pos":[9961,10312],"yaml":true,"extradata":"MT"},{"content":"`true` to set the initial state signaled; `false` to set the initial state to nonsignaled.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> to set the initial state signaled; <ph id=\"ph2\">`false`</ph> to set the initial state to nonsignaled.","source":"`true` to set the initial state signaled; `false` to set the initial state to nonsignaled."}],"pos":[10465,10558],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.ManualResetEvent\n  commentId: T:System.Threading.ManualResetEvent\n  id: ManualResetEvent\n  children:\n  - System.Threading.ManualResetEvent.#ctor(System.Boolean)\n  langs:\n  - csharp\n  name: ManualResetEvent\n  nameWithType: ManualResetEvent\n  fullName: System.Threading.ManualResetEvent\n  type: Class\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Notifies one or more waiting threads that an event has occurred. This class cannot be inherited.\n  remarks: \"In the .NET Framework version 2.0, <xref:System.Threading.ManualResetEvent> derives from the new <xref:System.Threading.EventWaitHandle> class. A <xref:System.Threading.ManualResetEvent> is functionally equivalent to an <xref:System.Threading.EventWaitHandle> created with <xref:System.Threading.EventResetMode?displayProperty=fullName>.  \\n  \\n> [!NOTE]\\n>  Unlike the <xref:System.Threading.ManualResetEvent> class, the <xref:System.Threading.EventWaitHandle> class provides access to named system synchronization events.  \\n  \\n <xref:System.Threading.ManualResetEvent> allows threads to communicate with each other by signaling. Typically, this communication concerns a task which one thread must complete before other threads can proceed.  \\n  \\n When a thread begins an activity that must complete before other threads proceed, it calls <xref:System.Threading.EventWaitHandle.Reset%2A> to put `ManualResetEvent` in the non-signaled state. This thread can be thought of as controlling the `ManualResetEvent`. Threads that call <xref:System.Threading.WaitHandle.WaitOne%2A> on the `ManualResetEvent` will block, awaiting the signal. When the controlling thread completes the activity, it calls <xref:System.Threading.EventWaitHandle.Set%2A> to signal that the waiting threads can proceed. All waiting threads are released.  \\n  \\n Once it has been signaled, `ManualResetEvent` remains signaled until it is manually reset. That is, calls to `WaitOne` return immediately.  \\n  \\n You can control the initial state of a `ManualResetEvent` by passing a Boolean value to the constructor, `true` if the initial state is signaled and `false` otherwise.  \\n  \\n `ManualResetEvent` can also be used with the `static`<xref:System.Threading.WaitHandle.WaitAll%2A> and <xref:System.Threading.WaitHandle.WaitAny%2A> methods.  \\n  \\n For more information about thread synchronization mechanisms, see [ManualResetEvent and ManualResetEventSlim](~/docs/standard/threading/manualresetevent-and-manualreseteventslim.md) in the conceptual documentation.\"\n  example:\n  - \"The following example demonstrates how <xref:System.Threading.ManualResetEvent> works. The example starts with a <xref:System.Threading.ManualResetEvent> in the unsignaled state (that is, `false` is passed to the constructor). The example creates three threads, each of which blocks on the <xref:System.Threading.ManualResetEvent> by calling its <xref:System.Threading.WaitHandle.WaitOne%2A> method. When the user presses the **Enter** key, the example calls the <xref:System.Threading.EventWaitHandle.Set%2A> method, which releases all three threads. Contrast this with the behavior of the <xref:System.Threading.AutoResetEvent> class, which releases threads one at a time, resetting automatically after each release.  \\n  \\n Pressing the **Enter** key again demonstrates that the <xref:System.Threading.ManualResetEvent> remains in the signaled state until its <xref:System.Threading.EventWaitHandle.Reset%2A> method is called: The example starts two more threads. These threads do not block when they call the <xref:System.Threading.WaitHandle.WaitOne%2A> method, but instead run to completion.  \\n  \\n Pressing the **Enter** key again causes the example to call the <xref:System.Threading.EventWaitHandle.Reset%2A> method and to start one more thread, which blocks when it calls <xref:System.Threading.WaitHandle.WaitOne%2A>. Pressing the **Enter** key one final time calls <xref:System.Threading.EventWaitHandle.Set%2A> to release the last thread, and the program ends.  \\n  \\n [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]\\n [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]\\n [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class ManualResetEvent : System.Threading.EventWaitHandle\n  inheritance:\n  - System.Object\n  - System.Threading.WaitHandle\n  - System.Threading.EventWaitHandle\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Threading.EventWaitHandle.GetAccessControl\n  - System.Threading.EventWaitHandle.OpenExisting(System.String)\n  - System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)\n  - System.Threading.EventWaitHandle.Reset\n  - System.Threading.EventWaitHandle.Set\n  - System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\n  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)\n  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)\n  - System.Threading.WaitHandle.Close\n  - System.Threading.WaitHandle.Dispose\n  - System.Threading.WaitHandle.Dispose(System.Boolean)\n  - System.Threading.WaitHandle.Handle\n  - System.Threading.WaitHandle.InvalidHandle\n  - System.Threading.WaitHandle.SafeWaitHandle\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne\n  - System.Threading.WaitHandle.WaitOne(System.Int32)\n  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitTimeout\n  extensionMethods:\n  - System.Threading.ThreadingAclExtensions.GetAccessControl(System.Threading.EventWaitHandle)\n  - System.Threading.ThreadingAclExtensions.SetAccessControl(System.Threading.EventWaitHandle,System.Security.AccessControl.EventWaitHandleSecurity)\n  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)\n  commentId: M:System.Threading.ManualResetEvent.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.ManualResetEvent\n  langs:\n  - csharp\n  name: ManualResetEvent(Boolean)\n  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)\n  fullName: ManualResetEvent.ManualResetEvent(Boolean)\n  type: Constructor\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Initializes a new instance of the <xref href=\"System.Threading.ManualResetEvent\"></xref> class with a Boolean value indicating whether to set the initial state to signaled.\n  remarks: If the initial state of a <xref:System.Threading.ManualResetEvent> is signaled (that is, if it is created by passing `true` for `initialState`), threads that wait on the <xref:System.Threading.ManualResetEvent> do not block. If the initial state is nonsignaled, threads block until the <xref:System.Threading.EventWaitHandle.Set%2A> method is called.\n  syntax:\n    content: public ManualResetEvent (bool initialState);\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: '`true` to set the initial state signaled; `false` to set the initial state to nonsignaled.'\n  overload: System.Threading.ManualResetEvent.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEvent.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Threading.EventWaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: EventWaitHandle\n  nameWithType: EventWaitHandle\n  fullName: System.Threading.EventWaitHandle\n- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)\n  parent: System.Threading.ManualResetEvent\n  isExternal: false\n  name: ManualResetEvent(Boolean)\n  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)\n  fullName: ManualResetEvent.ManualResetEvent(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.ManualResetEvent.#ctor*\n  parent: System.Threading.ManualResetEvent\n  isExternal: false\n  name: ManualResetEvent\n  nameWithType: ManualResetEvent.ManualResetEvent\n  fullName: ManualResetEvent.ManualResetEvent\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/ManualResetEvent.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Threading.WaitHandle.Close\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: Close()\n  nameWithType: WaitHandle.Close()\n  fullName: WaitHandle.Close()\n- uid: System.Threading.WaitHandle.Dispose\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: Dispose()\n  nameWithType: WaitHandle.Dispose()\n  fullName: WaitHandle.Dispose()\n- uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: WaitHandle.Dispose(Boolean)\n  fullName: WaitHandle.Dispose(Boolean)\n- uid: System.Threading.WaitHandle.Handle\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: Handle\n  nameWithType: WaitHandle.Handle\n  fullName: WaitHandle.Handle\n- uid: System.Threading.WaitHandle.InvalidHandle\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: InvalidHandle\n  nameWithType: WaitHandle.InvalidHandle\n  fullName: WaitHandle.InvalidHandle\n- uid: System.Threading.WaitHandle.SafeWaitHandle\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: SafeWaitHandle\n  nameWithType: WaitHandle.SafeWaitHandle\n  fullName: WaitHandle.SafeWaitHandle\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: SignalAndWait(WaitHandle, WaitHandle)\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle)\n  fullName: WaitHandle.SignalAndWait(WaitHandle, WaitHandle)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)\n  fullName: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)\n  fullName: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAll(WaitHandle[], TimeSpan, Boolean)\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan, Boolean)\n  fullName: WaitHandle.WaitAll(WaitHandle[], TimeSpan, Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAll(WaitHandle[], Int32, Boolean)\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32, Boolean)\n  fullName: WaitHandle.WaitAll(WaitHandle[], Int32, Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAll(WaitHandle[], TimeSpan)\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan)\n  fullName: WaitHandle.WaitAll(WaitHandle[], TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAll(WaitHandle[], Int32)\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32)\n  fullName: WaitHandle.WaitAll(WaitHandle[], Int32)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAll(WaitHandle[])\n  nameWithType: WaitHandle.WaitAll(WaitHandle[])\n  fullName: WaitHandle.WaitAll(WaitHandle[])\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAny(WaitHandle[])\n  nameWithType: WaitHandle.WaitAny(WaitHandle[])\n  fullName: WaitHandle.WaitAny(WaitHandle[])\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAny(WaitHandle[], Int32)\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32)\n  fullName: WaitHandle.WaitAny(WaitHandle[], Int32)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAny(WaitHandle[], TimeSpan)\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan)\n  fullName: WaitHandle.WaitAny(WaitHandle[], TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAny(WaitHandle[], Int32, Boolean)\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32, Boolean)\n  fullName: WaitHandle.WaitAny(WaitHandle[], Int32, Boolean)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitAny(WaitHandle[], TimeSpan, Boolean)\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan, Boolean)\n  fullName: WaitHandle.WaitAny(WaitHandle[], TimeSpan, Boolean)\n- uid: System.Threading.WaitHandle.WaitOne\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitOne()\n  nameWithType: WaitHandle.WaitOne()\n  fullName: WaitHandle.WaitOne()\n- uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitOne(Int32)\n  nameWithType: WaitHandle.WaitOne(Int32)\n  fullName: WaitHandle.WaitOne(Int32)\n- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitOne(TimeSpan)\n  nameWithType: WaitHandle.WaitOne(TimeSpan)\n  fullName: WaitHandle.WaitOne(TimeSpan)\n- uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitOne(Int32, Boolean)\n  nameWithType: WaitHandle.WaitOne(Int32, Boolean)\n  fullName: WaitHandle.WaitOne(Int32, Boolean)\n- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitOne(TimeSpan, Boolean)\n  nameWithType: WaitHandle.WaitOne(TimeSpan, Boolean)\n  fullName: WaitHandle.WaitOne(TimeSpan, Boolean)\n- uid: System.Threading.WaitHandle.WaitTimeout\n  parent: System.Threading.WaitHandle\n  isExternal: false\n  name: WaitTimeout\n  nameWithType: WaitHandle.WaitTimeout\n  fullName: WaitHandle.WaitTimeout\n- uid: System.Threading.EventWaitHandle.GetAccessControl\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: GetAccessControl()\n  nameWithType: EventWaitHandle.GetAccessControl()\n  fullName: EventWaitHandle.GetAccessControl()\n- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: OpenExisting(String)\n  nameWithType: EventWaitHandle.OpenExisting(String)\n  fullName: EventWaitHandle.OpenExisting(String)\n- uid: System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: OpenExisting(String, EventWaitHandleRights)\n  nameWithType: EventWaitHandle.OpenExisting(String, EventWaitHandleRights)\n  fullName: EventWaitHandle.OpenExisting(String, EventWaitHandleRights)\n- uid: System.Threading.EventWaitHandle.Reset\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: Reset()\n  nameWithType: EventWaitHandle.Reset()\n  fullName: EventWaitHandle.Reset()\n- uid: System.Threading.EventWaitHandle.Set\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: Set()\n  nameWithType: EventWaitHandle.Set()\n  fullName: EventWaitHandle.Set()\n- uid: System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: SetAccessControl(EventWaitHandleSecurity)\n  nameWithType: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)\n  fullName: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)\n- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: TryOpenExisting(String, EventWaitHandle)\n  nameWithType: EventWaitHandle.TryOpenExisting(String, EventWaitHandle)\n  fullName: EventWaitHandle.TryOpenExisting(String, EventWaitHandle)\n- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)\n  parent: System.Threading.EventWaitHandle\n  isExternal: false\n  name: TryOpenExisting(String, EventWaitHandleRights, EventWaitHandle)\n  nameWithType: EventWaitHandle.TryOpenExisting(String, EventWaitHandleRights, EventWaitHandle)\n  fullName: EventWaitHandle.TryOpenExisting(String, EventWaitHandleRights, EventWaitHandle)\n- uid: System.Threading.ThreadingAclExtensions.GetAccessControl(System.Threading.EventWaitHandle)\n  parent: System.Threading.ThreadingAclExtensions\n  isExternal: false\n  name: GetAccessControl(EventWaitHandle)\n  nameWithType: ThreadingAclExtensions.GetAccessControl(EventWaitHandle)\n  fullName: ThreadingAclExtensions.GetAccessControl(EventWaitHandle)\n- uid: System.Threading.ThreadingAclExtensions.SetAccessControl(System.Threading.EventWaitHandle,System.Security.AccessControl.EventWaitHandleSecurity)\n  parent: System.Threading.ThreadingAclExtensions\n  isExternal: false\n  name: SetAccessControl(EventWaitHandle, EventWaitHandleSecurity)\n  nameWithType: ThreadingAclExtensions.SetAccessControl(EventWaitHandle, EventWaitHandleSecurity)\n  fullName: ThreadingAclExtensions.SetAccessControl(EventWaitHandle, EventWaitHandleSecurity)\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: GetSafeWaitHandle(WaitHandle)\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  fullName: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  fullName: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n"}