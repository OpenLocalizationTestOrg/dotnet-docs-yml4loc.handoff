{"nodes":[{"content":"Manages trust decisions for manifest-activated applications.","nodes":[{"pos":[0,60],"content":"Manages trust decisions for manifest-activated applications.","nodes":[{"content":"Manages trust decisions for manifest-activated applications.","pos":[0,60]}]}],"pos":[754,815],"yaml":true},{"content":"The <xref:System.Security.Policy.ApplicationSecurityManager> class provides essential information for the execution of a manifest-based application. The <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property identifies the trust manager responsible for determining whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> method calls the application trust manager to determine whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A> property contains the cached trust decisions for the user.","nodes":[{"pos":[0,663],"content":"The <xref:System.Security.Policy.ApplicationSecurityManager> class provides essential information for the execution of a manifest-based application. The <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property identifies the trust manager responsible for determining whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> method calls the application trust manager to determine whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A> property contains the cached trust decisions for the user.","nodes":[{"content":"The <xref:System.Security.Policy.ApplicationSecurityManager> class provides essential information for the execution of a manifest-based application. The <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property identifies the trust manager responsible for determining whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> method calls the application trust manager to determine whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A> property contains the cached trust decisions for the user.","pos":[0,663],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationSecurityManager&gt;</ph> class provides essential information for the execution of a manifest-based application.","pos":[0,148],"source":"The <xref:System.Security.Policy.ApplicationSecurityManager> class provides essential information for the execution of a manifest-based application."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A&gt;</ph> property identifies the trust manager responsible for determining whether an application is trusted.","pos":[149,337],"source":" The <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property identifies the trust manager responsible for determining whether an application is trusted."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A&gt;</ph> method calls the application trust manager to determine whether an application is trusted.","pos":[338,518],"source":" The <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> method calls the application trust manager to determine whether an application is trusted."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A&gt;</ph> property contains the cached trust decisions for the user.","pos":[519,663],"source":" The <xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A> property contains the cached trust decisions for the user."}]}]}],"pos":[826,1490],"yaml":true,"extradata":"MT"},{"content":"Gets the current application trust manager.","nodes":[{"pos":[0,43],"content":"Gets the current application trust manager.","nodes":[{"content":"Gets the current application trust manager.","pos":[0,43]}]}],"pos":[3249,3293],"yaml":true},{"content":"In the current release there is only one trust manager, which can be a custom implementation of the <xref:System.Security.Policy.IApplicationTrustManager> interface. The default trust manager implementation prompts the user for permission to install the application and elevate the permissions granted to the application. Other trust manager implementations might have different user experiences. For example, an implementation might check an enterprise list for trusted applications, rather than prompting the user for that information.","nodes":[{"pos":[0,537],"content":"In the current release there is only one trust manager, which can be a custom implementation of the <xref:System.Security.Policy.IApplicationTrustManager> interface. The default trust manager implementation prompts the user for permission to install the application and elevate the permissions granted to the application. Other trust manager implementations might have different user experiences. For example, an implementation might check an enterprise list for trusted applications, rather than prompting the user for that information.","nodes":[{"content":"In the current release there is only one trust manager, which can be a custom implementation of the <xref:System.Security.Policy.IApplicationTrustManager> interface. The default trust manager implementation prompts the user for permission to install the application and elevate the permissions granted to the application. Other trust manager implementations might have different user experiences. For example, an implementation might check an enterprise list for trusted applications, rather than prompting the user for that information.","pos":[0,537],"nodes":[{"content":"In the current release there is only one trust manager, which can be a custom implementation of the <ph id=\"ph1\">&lt;xref:System.Security.Policy.IApplicationTrustManager&gt;</ph> interface.","pos":[0,165],"source":"In the current release there is only one trust manager, which can be a custom implementation of the <xref:System.Security.Policy.IApplicationTrustManager> interface."},{"content":"The default trust manager implementation prompts the user for permission to install the application and elevate the permissions granted to the application.","pos":[166,321]},{"content":"Other trust manager implementations might have different user experiences.","pos":[322,396]},{"content":"For example, an implementation might check an enterprise list for trusted applications, rather than prompting the user for that information.","pos":[397,537]}]}]}],"pos":[3304,3842],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Policy.IApplicationTrustManager\"></xref> that represents the current trust manager.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Policy.IApplicationTrustManager\"&gt;&lt;/xref&gt;</ph> that represents the current trust manager.","source":"An <xref href=\"System.Security.Policy.IApplicationTrustManager\"></xref> that represents the current trust manager."}],"pos":[4051,4166],"yaml":true},{"content":"The policy on this application does not have a trust manager.","nodes":[{"pos":[0,61],"content":"The policy on this application does not have a trust manager.","nodes":[{"content":"The policy on this application does not have a trust manager.","pos":[0,61]}]}],"pos":[4389,4451],"yaml":true},{"content":"Determines whether the user approves the specified application to execute with the requested permission set.","nodes":[{"pos":[0,108],"content":"Determines whether the user approves the specified application to execute with the requested permission set.","nodes":[{"content":"Determines whether the user approves the specified application to execute with the requested permission set.","pos":[0,108]}]}],"pos":[5992,6101],"yaml":true},{"content":"<xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> uses the configured <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property to determine whether to allow execution of the specified application with the permission set requested in the application manifest. The trust manager's behavior is dependent on the trust manager implementation and the information passed in the `context` parameter. The default behavior of the trust manager is to establish a user interface (UI) dialog box to determine the user's approval. However, a trust manager can also determine an application's trust status based on other criteria, such as decisions provided by a corporate database. The trust decision can be persisted, depending upon the `context` parameters properties and the trust manager implementation. If the trust for the application is persisted for a decision based on a user dialog box, future calls to the <xref:System.Security.Policy.ApplicationSecurityManager> will not present the UI dialog box for every request for that application. <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> is called after the manifest, but before the application has been downloaded to the local system.","nodes":[{"pos":[0,1290],"content":"<xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> uses the configured <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property to determine whether to allow execution of the specified application with the permission set requested in the application manifest. The trust manager's behavior is dependent on the trust manager implementation and the information passed in the `context` parameter. The default behavior of the trust manager is to establish a user interface (UI) dialog box to determine the user's approval. However, a trust manager can also determine an application's trust status based on other criteria, such as decisions provided by a corporate database. The trust decision can be persisted, depending upon the `context` parameters properties and the trust manager implementation. If the trust for the application is persisted for a decision based on a user dialog box, future calls to the <xref:System.Security.Policy.ApplicationSecurityManager> will not present the UI dialog box for every request for that application. <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> is called after the manifest, but before the application has been downloaded to the local system.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A&gt;</ph> uses the configured <ph id=\"ph2\">&lt;xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A&gt;</ph> property to determine whether to allow execution of the specified application with the permission set requested in the application manifest.","pos":[0,330],"source":"<xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> uses the configured <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property to determine whether to allow execution of the specified application with the permission set requested in the application manifest."},{"content":"The trust manager's behavior is dependent on the trust manager implementation and the information passed in the <ph id=\"ph1\">`context`</ph> parameter.","pos":[331,463],"source":" The trust manager's behavior is dependent on the trust manager implementation and the information passed in the `context` parameter."},{"content":"The default behavior of the trust manager is to establish a user interface (UI) dialog box to determine the user's approval.","pos":[464,588]},{"content":"However, a trust manager can also determine an application's trust status based on other criteria, such as decisions provided by a corporate database.","pos":[589,739]},{"content":"The trust decision can be persisted, depending upon the <ph id=\"ph1\">`context`</ph> parameters properties and the trust manager implementation.","pos":[740,865],"source":" The trust decision can be persisted, depending upon the `context` parameters properties and the trust manager implementation."},{"content":"If the trust for the application is persisted for a decision based on a user dialog box, future calls to the <ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationSecurityManager&gt;</ph> will not present the UI dialog box for every request for that application.","pos":[866,1106],"source":" If the trust for the application is persisted for a decision based on a user dialog box, future calls to the <xref:System.Security.Policy.ApplicationSecurityManager> will not present the UI dialog box for every request for that application."},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A&gt;</ph> is called after the manifest, but before the application has been downloaded to the local system.","pos":[1107,1290],"source":" <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> is called after the manifest, but before the application has been downloaded to the local system."}]}],"pos":[6112,7403],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.ActivationContext\"></xref> identifying the activation context for the application.","nodes":[{"pos":[0,104],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.ActivationContext\"&gt;&lt;/xref&gt;</ph> identifying the activation context for the application.","source":"An <xref href=\"System.ActivationContext\"></xref> identifying the activation context for the application."}],"pos":[7662,7767],"yaml":true},{"content":"A <xref href=\"System.Security.Policy.TrustManagerContext\"></xref> identifying the trust manager context for the application.","nodes":[{"pos":[0,124],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Policy.TrustManagerContext\"&gt;&lt;/xref&gt;</ph> identifying the trust manager context for the application.","source":"A <xref href=\"System.Security.Policy.TrustManagerContext\"></xref> identifying the trust manager context for the application."}],"pos":[7859,7984],"yaml":true},{"content":"`true` to execute the specified application; otherwise, `false`.","nodes":[{"pos":[0,64],"content":"<ph id=\"ph1\">`true`</ph> to execute the specified application; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to execute the specified application; otherwise, `false`."}],"pos":[8042,8109],"yaml":true},{"content":"The <code>activationContext</code> parameter is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">activationContext</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>activationContext</code> parameter is `null`."}],"pos":[8314,8370],"yaml":true},{"content":"Gets an application trust collection that contains the cached trust decisions for the user.","nodes":[{"pos":[0,91],"content":"Gets an application trust collection that contains the cached trust decisions for the user.","nodes":[{"content":"Gets an application trust collection that contains the cached trust decisions for the user.","pos":[0,91]}]}],"pos":[9562,9654],"yaml":true},{"content":"The trust decisions in the collection are maintained using the methods of the collection, such as the <xref:System.Security.Policy.ApplicationTrustCollection.Add%2A> method or the <xref:System.Security.Policy.ApplicationTrustCollection.Remove%2A> method.","nodes":[{"pos":[0,254],"content":"The trust decisions in the collection are maintained using the methods of the collection, such as the <xref:System.Security.Policy.ApplicationTrustCollection.Add%2A> method or the <xref:System.Security.Policy.ApplicationTrustCollection.Remove%2A> method.","nodes":[{"content":"The trust decisions in the collection are maintained using the methods of the collection, such as the <ph id=\"ph1\">&lt;xref:System.Security.Policy.ApplicationTrustCollection.Add%2A&gt;</ph> method or the <ph id=\"ph2\">&lt;xref:System.Security.Policy.ApplicationTrustCollection.Remove%2A&gt;</ph> method.","pos":[0,254],"source":"The trust decisions in the collection are maintained using the methods of the collection, such as the <xref:System.Security.Policy.ApplicationTrustCollection.Add%2A> method or the <xref:System.Security.Policy.ApplicationTrustCollection.Remove%2A> method."}]}],"pos":[9665,9920],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Security.Policy.ApplicationTrustCollection\"></xref> that contains the cached trust decisions for the user.","nodes":[{"pos":[0,128],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Policy.ApplicationTrustCollection\"&gt;&lt;/xref&gt;</ph> that contains the cached trust decisions for the user.","source":"An <xref href=\"System.Security.Policy.ApplicationTrustCollection\"></xref> that contains the cached trust decisions for the user."}],"pos":[10131,10260],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Policy.ApplicationSecurityManager\n  commentId: T:System.Security.Policy.ApplicationSecurityManager\n  id: ApplicationSecurityManager\n  children:\n  - System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager\n  - System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)\n  - System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts\n  langs:\n  - csharp\n  name: ApplicationSecurityManager\n  nameWithType: ApplicationSecurityManager\n  fullName: System.Security.Policy.ApplicationSecurityManager\n  type: Class\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Manages trust decisions for manifest-activated applications.\n  remarks: The <xref:System.Security.Policy.ApplicationSecurityManager> class provides essential information for the execution of a manifest-based application. The <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property identifies the trust manager responsible for determining whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> method calls the application trust manager to determine whether an application is trusted. The <xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A> property contains the cached trust decisions for the user.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public static class ApplicationSecurityManager\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Policy/ApplicationSecurityManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager\n  commentId: P:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager\n  id: ApplicationTrustManager\n  parent: System.Security.Policy.ApplicationSecurityManager\n  langs:\n  - csharp\n  name: ApplicationTrustManager\n  nameWithType: ApplicationSecurityManager.ApplicationTrustManager\n  fullName: ApplicationSecurityManager.ApplicationTrustManager\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets the current application trust manager.\n  remarks: In the current release there is only one trust manager, which can be a custom implementation of the <xref:System.Security.Policy.IApplicationTrustManager> interface. The default trust manager implementation prompts the user for permission to install the application and elevate the permissions granted to the application. Other trust manager implementations might have different user experiences. For example, an implementation might check an enterprise list for trusted applications, rather than prompting the user for that information.\n  syntax:\n    content: public static System.Security.Policy.IApplicationTrustManager ApplicationTrustManager { get; }\n    return:\n      type: System.Security.Policy.IApplicationTrustManager\n      description: An <xref href=\"System.Security.Policy.IApplicationTrustManager\"></xref> that represents the current trust manager.\n  overload: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager*\n  exceptions:\n  - type: System.Security.Policy.PolicyException\n    commentId: T:System.Security.Policy.PolicyException\n    description: The policy on this application does not have a trust manager.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Policy/ApplicationSecurityManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)\n  commentId: M:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)\n  id: DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)\n  parent: System.Security.Policy.ApplicationSecurityManager\n  langs:\n  - csharp\n  name: DetermineApplicationTrust(ActivationContext, TrustManagerContext)\n  nameWithType: ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext, TrustManagerContext)\n  fullName: ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext, TrustManagerContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Determines whether the user approves the specified application to execute with the requested permission set.\n  remarks: <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> uses the configured <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> property to determine whether to allow execution of the specified application with the permission set requested in the application manifest. The trust manager's behavior is dependent on the trust manager implementation and the information passed in the `context` parameter. The default behavior of the trust manager is to establish a user interface (UI) dialog box to determine the user's approval. However, a trust manager can also determine an application's trust status based on other criteria, such as decisions provided by a corporate database. The trust decision can be persisted, depending upon the `context` parameters properties and the trust manager implementation. If the trust for the application is persisted for a decision based on a user dialog box, future calls to the <xref:System.Security.Policy.ApplicationSecurityManager> will not present the UI dialog box for every request for that application. <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> is called after the manifest, but before the application has been downloaded to the local system.\n  syntax:\n    content: public static bool DetermineApplicationTrust (ActivationContext activationContext, System.Security.Policy.TrustManagerContext context);\n    parameters:\n    - id: activationContext\n      type: System.ActivationContext\n      description: An <xref href=\"System.ActivationContext\"></xref> identifying the activation context for the application.\n    - id: context\n      type: System.Security.Policy.TrustManagerContext\n      description: A <xref href=\"System.Security.Policy.TrustManagerContext\"></xref> identifying the trust manager context for the application.\n    return:\n      type: System.Boolean\n      description: '`true` to execute the specified application; otherwise, `false`.'\n  overload: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>activationContext</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Policy/ApplicationSecurityManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts\n  commentId: P:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts\n  id: UserApplicationTrusts\n  parent: System.Security.Policy.ApplicationSecurityManager\n  langs:\n  - csharp\n  name: UserApplicationTrusts\n  nameWithType: ApplicationSecurityManager.UserApplicationTrusts\n  fullName: ApplicationSecurityManager.UserApplicationTrusts\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Security.Policy\n  summary: Gets an application trust collection that contains the cached trust decisions for the user.\n  remarks: The trust decisions in the collection are maintained using the methods of the collection, such as the <xref:System.Security.Policy.ApplicationTrustCollection.Add%2A> method or the <xref:System.Security.Policy.ApplicationTrustCollection.Remove%2A> method.\n  syntax:\n    content: public static System.Security.Policy.ApplicationTrustCollection UserApplicationTrusts { get; }\n    return:\n      type: System.Security.Policy.ApplicationTrustCollection\n      description: An <xref href=\"System.Security.Policy.ApplicationTrustCollection\"></xref> that contains the cached trust decisions for the user.\n  overload: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Policy/ApplicationSecurityManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Policy.PolicyException\n  parent: System.Security.Policy\n  isExternal: false\n  name: PolicyException\n  nameWithType: PolicyException\n  fullName: System.Security.Policy.PolicyException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager\n  parent: System.Security.Policy.ApplicationSecurityManager\n  isExternal: false\n  name: ApplicationTrustManager\n  nameWithType: ApplicationSecurityManager.ApplicationTrustManager\n  fullName: ApplicationSecurityManager.ApplicationTrustManager\n- uid: System.Security.Policy.IApplicationTrustManager\n  parent: System.Security.Policy\n  isExternal: false\n  name: IApplicationTrustManager\n  nameWithType: IApplicationTrustManager\n  fullName: System.Security.Policy.IApplicationTrustManager\n- uid: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)\n  parent: System.Security.Policy.ApplicationSecurityManager\n  isExternal: false\n  name: DetermineApplicationTrust(ActivationContext, TrustManagerContext)\n  nameWithType: ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext, TrustManagerContext)\n  fullName: ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext, TrustManagerContext)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ActivationContext\n  parent: System\n  isExternal: false\n  name: ActivationContext\n  nameWithType: ActivationContext\n  fullName: System.ActivationContext\n- uid: System.Security.Policy.TrustManagerContext\n  parent: System.Security.Policy\n  isExternal: false\n  name: TrustManagerContext\n  nameWithType: TrustManagerContext\n  fullName: System.Security.Policy.TrustManagerContext\n- uid: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts\n  parent: System.Security.Policy.ApplicationSecurityManager\n  isExternal: false\n  name: UserApplicationTrusts\n  nameWithType: ApplicationSecurityManager.UserApplicationTrusts\n  fullName: ApplicationSecurityManager.UserApplicationTrusts\n- uid: System.Security.Policy.ApplicationTrustCollection\n  parent: System.Security.Policy\n  isExternal: false\n  name: ApplicationTrustCollection\n  nameWithType: ApplicationTrustCollection\n  fullName: System.Security.Policy.ApplicationTrustCollection\n- uid: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager*\n  parent: System.Security.Policy.ApplicationSecurityManager\n  isExternal: false\n  name: ApplicationTrustManager\n  nameWithType: ApplicationSecurityManager.ApplicationTrustManager\n  fullName: ApplicationSecurityManager.ApplicationTrustManager\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Policy/ApplicationSecurityManager.xml\n- uid: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust*\n  parent: System.Security.Policy.ApplicationSecurityManager\n  isExternal: false\n  name: DetermineApplicationTrust\n  nameWithType: ApplicationSecurityManager.DetermineApplicationTrust\n  fullName: ApplicationSecurityManager.DetermineApplicationTrust\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Policy/ApplicationSecurityManager.xml\n- uid: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts*\n  parent: System.Security.Policy.ApplicationSecurityManager\n  isExternal: false\n  name: UserApplicationTrusts\n  nameWithType: ApplicationSecurityManager.UserApplicationTrusts\n  fullName: ApplicationSecurityManager.UserApplicationTrusts\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Policy/ApplicationSecurityManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}