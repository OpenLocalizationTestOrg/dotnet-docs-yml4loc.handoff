{"nodes":[{"content":"Enables compilers to dynamically attach object fields to managed objects.","nodes":[{"pos":[0,73],"content":"Enables compilers to dynamically attach object fields to managed objects.","nodes":[{"content":"Enables compilers to dynamically attach object fields to managed objects.","pos":[0,73]}]}],"pos":[1528,1602],"yaml":true},{"content":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class enables language compilers to attach arbitrary properties to managed objects at run time. A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value. The object's keys are the individual instances of the `TKey` class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.  \n  \n Keys must be unique; in other words, the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class supports one attached value per managed object. Two keys are equal if passing them to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`.  \n  \n> [!NOTE]\n>  You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=fullName> to explicitly set the hash code for a key. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=fullName> overrides.  \n  \n Although the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from a dictionary in several ways:  \n  \n-   It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.  \n  \n-   It does not include all the methods (such as `GetEnumerator` or `Contains`) that a dictionary typically has.  \n  \n-   It does not implement the <xref:System.Collections.Generic.IDictionary%602> interface.  \n  \n The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration.","nodes":[{"pos":[0,560],"content":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class enables language compilers to attach arbitrary properties to managed objects at run time. A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value. The object's keys are the individual instances of the `TKey` class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class enables language compilers to attach arbitrary properties to managed objects at run time.","pos":[0,163],"source":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class enables language compilers to attach arbitrary properties to managed objects at run time."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value.","pos":[164,371],"source":" A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value."},{"content":"The object's keys are the individual instances of the <ph id=\"ph1\">`TKey`</ph> class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.","pos":[372,560],"source":" The object's keys are the individual instances of the `TKey` class to which the property is attached, and its values are the property values that are assigned to the corresponding objects."}]},{"pos":[567,855],"content":"Keys must be unique; in other words, the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class supports one attached value per managed object. Two keys are equal if passing them to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`.","nodes":[{"content":"Keys must be unique; in other words, the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class supports one attached value per managed object.","pos":[0,158],"source":"Keys must be unique; in other words, the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class supports one attached value per managed object."},{"content":"Two keys are equal if passing them to the <ph id=\"ph1\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method returns <ph id=\"ph2\">`true`</ph>.","pos":[159,288],"source":" Two keys are equal if passing them to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`."}]},{"pos":[863,1315],"content":"[!NOTE]\n You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=fullName> to explicitly set the hash code for a key. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=fullName> overrides.","leadings":["","> "],"nodes":[{"content":" You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=fullName> to explicitly set the hash code for a key. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=fullName> overrides.","pos":[8,450],"nodes":[{"content":"You cannot control equality comparisons by overriding <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph> to explicitly set the hash code for a key.","pos":[1,158],"source":" You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=fullName> to explicitly set the hash code for a key."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class does not use the <ph id=\"ph2\">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph> method to compute hash codes, and therefore does not invoke <ph id=\"ph3\">&lt;xref:System.Object.GetHashCode%2A?displayProperty=fullName&gt;</ph> overrides.","pos":[159,442],"source":" The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=fullName> overrides."}]}]},{"pos":[1322,1626],"content":"Although the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from a dictionary in several ways:","nodes":[{"content":"Although the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from a dictionary in several ways:","pos":[0,304],"nodes":[{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object.","pos":[0,187],"source":"Although the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class differs from a dictionary in several ways:","pos":[188,304],"source":" The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from a dictionary in several ways:"}]}]},{"pos":[1636,1741],"content":"It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.","nodes":[{"content":"It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.","pos":[0,105],"nodes":[{"content":"It does not persist keys.","pos":[0,25]},{"content":"That is, a key is not kept alive only because it is a member of the collection.","pos":[26,105]}]}]},{"pos":[1751,1859],"content":"It does not include all the methods (such as <ph id=\"ph1\">`GetEnumerator`</ph> or <ph id=\"ph2\">`Contains`</ph>) that a dictionary typically has.","source":"It does not include all the methods (such as `GetEnumerator` or `Contains`) that a dictionary typically has."},{"pos":[1869,1955],"content":"It does not implement the <xref:System.Collections.Generic.IDictionary%602> interface.","nodes":[{"content":"It does not implement the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IDictionary%602&gt;</ph> interface.","pos":[0,86],"source":"It does not implement the <xref:System.Collections.Generic.IDictionary%602> interface."}]},{"pos":[1962,2936],"content":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration.","nodes":[{"content":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration.","pos":[0,974],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class differs from other collection objects in its management of the object lifetime of keys stored in the collection.","pos":[0,186],"source":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from other collection objects in its management of the object lifetime of keys stored in the collection."},{"content":"Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed.","pos":[187,386]},{"content":"However, in the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A).","pos":[387,756],"source":" However, in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A)."},{"content":"Instead, <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> automatically removes the key/value entry as soon as no other references to a key exist outside the table.","pos":[757,936],"source":" Instead, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatically removes the key/value entry as soon as no other references to a key exist outside the table."},{"content":"The example provides an illustration.","pos":[937,974]}]}]}],"pos":[1613,4567],"yaml":true,"extradata":"MT"},{"content":"The reference type to which the field is attached.","nodes":[{"pos":[0,50],"content":"The reference type to which the field is attached.","nodes":[{"content":"The reference type to which the field is attached.","pos":[0,50]}]}],"pos":[5887,5938],"yaml":true},{"content":"The field's type. This must be a reference type.","nodes":[{"pos":[0,48],"content":"The field's type. This must be a reference type.","nodes":[{"content":"The field's type. This must be a reference type.","pos":[0,48],"nodes":[{"content":"The field's type.","pos":[0,17]},{"content":"This must be a reference type.","pos":[18,48]}]}]}],"pos":[5974,6023],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"></xref> class.","nodes":[{"pos":[0,116],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"></xref> class."}],"pos":[7935,8052],"yaml":true},{"content":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method.  \n  \n Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`).","nodes":[{"pos":[0,518],"content":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method.","nodes":[{"content":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method.","pos":[0,518],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A&gt;</ph> constructor instantiates an empty <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table; that is, the table contains no key/value pairs.","pos":[0,231],"source":"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs."},{"content":"You can add key/value pairs by calling the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> method.","pos":[232,518],"source":" You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method."}]}]},{"pos":[525,814],"content":"Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`).","nodes":[{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object must be unique.","pos":[0,101],"source":"Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique."},{"content":"Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <ph id=\"ph1\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method returns <ph id=\"ph2\">`true`</ph>).","pos":[102,289],"source":" Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`)."}]}],"pos":[8063,8882],"yaml":true,"extradata":"MT"},{"content":"Adds a key to the table.","nodes":[{"pos":[0,24],"content":"Adds a key to the table.","nodes":[{"content":"Adds a key to the table.","pos":[0,24]}]}],"pos":[10569,10594],"yaml":true},{"content":"Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`).  \n  \n If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.","nodes":[{"pos":[0,289],"content":"Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`).","nodes":[{"content":"Every key in a <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> object must be unique.","pos":[0,101],"source":"Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique."},{"content":"Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <ph id=\"ph1\">&lt;xref:System.Object.ReferenceEquals%2A?displayProperty=fullName&gt;</ph> method returns <ph id=\"ph2\">`true`</ph>).","pos":[102,289],"source":" Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`)."}]},{"pos":[296,468],"content":"If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.","nodes":[{"content":"If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.","pos":[0,172]}]}],"pos":[10605,11078],"yaml":true,"extradata":"MT"},{"content":"The key to add. <code>key</code> represents the object to which the property is attached.","nodes":[{"pos":[0,89],"content":"The key to add. <code>key</code> represents the object to which the property is attached.","nodes":[{"content":"The key to add.","pos":[0,15]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents the object to which the property is attached.","pos":[16,89],"source":"<code>key</code> represents the object to which the property is attached."}]}],"pos":[12424,12514],"yaml":true},{"content":"The key's property value.","nodes":[{"pos":[0,25],"content":"The key's property value.","nodes":[{"content":"The key's property value.","pos":[0,25]}]}],"pos":[12568,12594],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[12782,12810],"yaml":true},{"content":"<code>key</code> already exists.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> already exists.","source":"<code>key</code> already exists."}],"pos":[12904,12937],"yaml":true},{"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"></xref> object.","nodes":[{"pos":[0,199],"content":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"&gt;&lt;/xref&gt;</ph> object.","source":"Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"></xref> object."}],"pos":[16244,16444],"yaml":true},{"content":"The garbage collector calls <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> when the current object is ready to be finalized.","nodes":[{"pos":[0,153],"content":"The garbage collector calls <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> when the current object is ready to be finalized.","nodes":[{"content":"The garbage collector calls <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A&gt;</ph> when the current object is ready to be finalized.","pos":[0,153],"source":"The garbage collector calls <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> when the current object is ready to be finalized."}]}],"pos":[16455,16609],"yaml":true,"extradata":"MT"},{"content":"Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.","nodes":[{"pos":[0,273],"content":"Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.","nodes":[{"content":"Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.","pos":[0,273],"nodes":[{"content":"Atomically searches for a specified key in the table and returns the corresponding value.","pos":[0,89]},{"content":"If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.","pos":[90,273]}]}]}],"pos":[18300,18574],"yaml":true},{"content":"If `key` does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the `TValue` generic type parameter. If the `TValue` class has no default constructor, a <xref:System.MissingMethodException> is thrown.  \n  \n This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a default constructor. If it does not define a default constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value  \n  \n To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.","nodes":[{"pos":[0,296],"content":"If `key` does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the `TValue` generic type parameter. If the `TValue` class has no default constructor, a <xref:System.MissingMethodException> is thrown.","nodes":[{"content":"If <ph id=\"ph1\">`key`</ph> does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the <ph id=\"ph2\">`TValue`</ph> generic type parameter.","pos":[0,196],"source":"If `key` does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the `TValue` generic type parameter."},{"content":"If the <ph id=\"ph1\">`TValue`</ph> class has no default constructor, a <ph id=\"ph2\">&lt;xref:System.MissingMethodException&gt;</ph> is thrown.","pos":[197,296],"source":" If the `TValue` class has no default constructor, a <xref:System.MissingMethodException> is thrown."}]},{"pos":[303,783],"content":"This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a default constructor. If it does not define a default constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value","nodes":[{"content":"This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a default constructor. If it does not define a default constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value","pos":[0,480],"nodes":[{"content":"This is the recommended method of retrieving an existing value or adding a new value to the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602&gt;</ph> table if the class of the table's value defines a default constructor.","pos":[0,226],"source":"This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a default constructor."},{"content":"If it does not define a default constructor, you can instead call the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> method, which relies on a callback-provided method to instantiate the object representing the table's value","pos":[227,480],"source":" If it does not define a default constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value"}]}]},{"pos":[790,998],"content":"To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.","nodes":[{"content":"To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method.","pos":[0,208],"source":"To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method."}]}],"pos":[18585,19590],"yaml":true,"extradata":"MT"},{"content":"The key to search for. <code>key</code> represents the object to which the property is attached.","nodes":[{"pos":[0,96],"content":"The key to search for. <code>key</code> represents the object to which the property is attached.","nodes":[{"content":"The key to search for.","pos":[0,22]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents the object to which the property is attached.","pos":[23,96],"source":"<code>key</code> represents the object to which the property is attached."}]}],"pos":[20932,21029],"yaml":true},{"content":"The value that corresponds to <code>key</code>, if <code>key</code> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <code>TValue</code> generic type parameter.","nodes":[{"pos":[0,226],"content":"The value that corresponds to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p2\">&lt;/code&gt;</ept> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">TValue</ph><ept id=\"p3\">&lt;/code&gt;</ept> generic type parameter.","source":"The value that corresponds to <code>key</code>, if <code>key</code> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <code>TValue</code> generic type parameter."}],"pos":[21079,21306],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[21507,21535],"yaml":true},{"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MissingMemberException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n The class that represents the table's value does not define a default constructor.","nodes":[{"pos":[0,350],"content":"<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MissingMemberException\"></xref>, instead.","nodes":[{"content":"In the <bpt id=\"p1\">[</bpt>.NET for Windows Store apps<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=247912)</ept> or the <bpt id=\"p2\">[</bpt>Portable Class Library<ept id=\"p2\">](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md)</ept>, catch the base class exception, <ph id=\"ph1\">&lt;xref href=\"System.MissingMemberException\"&gt;&lt;/xref&gt;</ph>, instead.","pos":[47,350],"source":" In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.MissingMemberException\"></xref>, instead."}]},{"pos":[356,373],"content":"</p>\n    </block>","nodes":[]},{"pos":[380,462],"content":"The class that represents the table's value does not define a default constructor.","nodes":[{"content":"The class that represents the table's value does not define a default constructor.","pos":[0,82]}]}],"pos":[21639,22117],"yaml":true},{"content":"Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.","nodes":[{"pos":[0,220],"content":"Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.","nodes":[{"content":"Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.","pos":[0,220],"nodes":[{"content":"Atomically searches for a specified key in the table and returns the corresponding value.","pos":[0,89]},{"content":"If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.","pos":[90,220]}]}]}],"pos":[23983,24204],"yaml":true},{"content":"If `key` does not exist in the table, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> invokes the method that is defined by the `createValueCallback` parameter and passes it the key. A new value is bound to the key in the table and returned as a result.  \n  \n Use this method only when the class that represents the table's value does not define a default constructor. If it does define a default constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.  \n  \n If multiple threads try to create the same key, `createValueCallback` may be invoked multiple times with the same key. Only one of these calls will succeed, and its returned value will be added to the table. Which thread succeeds in creating the value is indeterminate. This rule permits the table to invoke `createValueCallback` outside the internal table lock to prevent deadlocks.","nodes":[{"pos":[0,281],"content":"If `key` does not exist in the table, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> invokes the method that is defined by the `createValueCallback` parameter and passes it the key. A new value is bound to the key in the table and returned as a result.","nodes":[{"content":"If <ph id=\"ph1\">`key`</ph> does not exist in the table, <ph id=\"ph2\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A&gt;</ph> invokes the method that is defined by the <ph id=\"ph3\">`createValueCallback`</ph> parameter and passes it the key.","pos":[0,210],"source":"If `key` does not exist in the table, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> invokes the method that is defined by the `createValueCallback` parameter and passes it the key."},{"content":"A new value is bound to the key in the table and returned as a result.","pos":[211,281]}]},{"pos":[288,754],"content":"Use this method only when the class that represents the table's value does not define a default constructor. If it does define a default constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.","nodes":[{"content":"Use this method only when the class that represents the table's value does not define a default constructor. If it does define a default constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.","pos":[0,466],"nodes":[{"content":"Use this method only when the class that represents the table's value does not define a default constructor.","pos":[0,108]},{"content":"If it does define a default constructor, use the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A&gt;</ph> method instead.","pos":[109,257],"source":" If it does define a default constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead."},{"content":"To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <ph id=\"ph1\">&lt;xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A&gt;</ph> method.","pos":[258,466],"source":" To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method."}]}]},{"pos":[761,1144],"content":"If multiple threads try to create the same key, `createValueCallback` may be invoked multiple times with the same key. Only one of these calls will succeed, and its returned value will be added to the table. Which thread succeeds in creating the value is indeterminate. This rule permits the table to invoke `createValueCallback` outside the internal table lock to prevent deadlocks.","nodes":[{"content":"If multiple threads try to create the same key, <ph id=\"ph1\">`createValueCallback`</ph> may be invoked multiple times with the same key.","pos":[0,118],"source":"If multiple threads try to create the same key, `createValueCallback` may be invoked multiple times with the same key."},{"content":"Only one of these calls will succeed, and its returned value will be added to the table.","pos":[119,207]},{"content":"Which thread succeeds in creating the value is indeterminate.","pos":[208,269]},{"content":"This rule permits the table to invoke <ph id=\"ph1\">`createValueCallback`</ph> outside the internal table lock to prevent deadlocks.","pos":[270,383],"source":" This rule permits the table to invoke `createValueCallback` outside the internal table lock to prevent deadlocks."}]}],"pos":[24215,25366],"yaml":true,"extradata":"MT"},{"content":"The key to search for. <code>key</code> represents the object to which the property is attached.","nodes":[{"pos":[0,96],"content":"The key to search for. <code>key</code> represents the object to which the property is attached.","nodes":[{"content":"The key to search for.","pos":[0,22]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> represents the object to which the property is attached.","pos":[23,96],"source":"<code>key</code> represents the object to which the property is attached."}]}],"pos":[27111,27208],"yaml":true},{"content":"A delegate to a method that can create a value for the given <code>key</code>. It has a single parameter of type <code>TKey</code>, and returns a value of type <code>TValue</code>.","nodes":[{"pos":[0,180],"content":"A delegate to a method that can create a value for the given <code>key</code>. It has a single parameter of type <code>TKey</code>, and returns a value of type <code>TValue</code>.","nodes":[{"content":"A delegate to a method that can create a value for the given <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,78],"source":"A delegate to a method that can create a value for the given <code>key</code>."},{"content":"It has a single parameter of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TKey</ph><ept id=\"p1\">&lt;/code&gt;</ept>, and returns a value of type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">TValue</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[79,180],"source":" It has a single parameter of type <code>TKey</code>, and returns a value of type <code>TValue</code>."}]}],"pos":[27335,27516],"yaml":true},{"content":"The value attached to <code>key</code>, if <code>key</code> already exists in the table; otherwise, the new value returned by the <code>createValueCallback</code> delegate.","nodes":[{"pos":[0,172],"content":"The value attached to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept>, if <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p2\">&lt;/code&gt;</ept> already exists in the table; otherwise, the new value returned by the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">createValueCallback</ph><ept id=\"p3\">&lt;/code&gt;</ept> delegate.","source":"The value attached to <code>key</code>, if <code>key</code> already exists in the table; otherwise, the new value returned by the <code>createValueCallback</code> delegate."}],"pos":[27566,27739],"yaml":true},{"content":"<code>key</code> or <code>createValueCallback</code> is `null`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;createValueCallback&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>key</code> or <code>createValueCallback</code> is `null`."}],"pos":[27932,27996],"yaml":true},{"content":"Removes a key and its value from the table.","nodes":[{"pos":[0,43],"content":"Removes a key and its value from the table.","nodes":[{"content":"Removes a key and its value from the table.","pos":[0,43]}]}],"pos":[29503,29547],"yaml":true},{"content":"If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.","nodes":[{"pos":[0,128],"content":"If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.","nodes":[{"content":"If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.","pos":[0,128]}]}],"pos":[29558,29687],"yaml":true,"extradata":"MT"},{"content":"The key to remove.","nodes":[{"pos":[0,18],"content":"The key to remove.","nodes":[{"content":"The key to remove.","pos":[0,18]}]}],"pos":[29807,29826],"yaml":true},{"content":"`true` if the key is found and removed; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if the key is found and removed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the key is found and removed; otherwise, `false`."}],"pos":[29884,29946],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[30137,30165],"yaml":true},{"content":"Gets the value of the specified key.","nodes":[{"pos":[0,36],"content":"Gets the value of the specified key.","nodes":[{"content":"Gets the value of the specified key.","pos":[0,36]}]}],"pos":[31738,31775],"yaml":true},{"content":"If the key is garbage-collected during this operation, the method may return `false` and set `value` to the default value (as if the key were not present).","nodes":[{"pos":[0,155],"content":"If the key is garbage-collected during this operation, the method may return <ph id=\"ph1\">`false`</ph> and set <ph id=\"ph2\">`value`</ph> to the default value (as if the key were not present).","source":"If the key is garbage-collected during this operation, the method may return `false` and set `value` to the default value (as if the key were not present)."}],"pos":[31786,31942],"yaml":true,"extradata":"MT"},{"content":"The key that represents an object with an attached property.","nodes":[{"pos":[0,60],"content":"The key that represents an object with an attached property.","nodes":[{"content":"The key that represents an object with an attached property.","pos":[0,60]}]}],"pos":[33218,33279],"yaml":true},{"content":"When this method returns, contains the attached property value. If <code>key</code> is not found, <code>value</code> contains the default value.","nodes":[{"pos":[0,144],"content":"When this method returns, contains the attached property value. If <code>key</code> is not found, <code>value</code> contains the default value.","nodes":[{"content":"When this method returns, contains the attached property value.","pos":[0,63]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not found, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p2\">&lt;/code&gt;</ept> contains the default value.","pos":[64,144],"source":" If <code>key</code> is not found, <code>value</code> contains the default value."}]}],"pos":[33333,33478],"yaml":true},{"content":"`true` if <code>key</code> is found; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">key</ph><ept id=\"p1\">&lt;/code&gt;</ept> is found; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>key</code> is found; otherwise, `false`."}],"pos":[33536,33595],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[33791,33819],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  commentId: T:System.Runtime.CompilerServices.ConditionalWeakTable`2\n  id: ConditionalWeakTable`2\n  children:\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  - System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  name: ConditionalWeakTable<TKey,TValue>\n  nameWithType: ConditionalWeakTable<TKey,TValue>\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Enables compilers to dynamically attach object fields to managed objects.\n  remarks: \"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class enables language compilers to attach arbitrary properties to managed objects at run time. A <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object is a dictionary that binds a managed object, which is represented by a key, to its attached property, which is represented by a value. The object's keys are the individual instances of the `TKey` class to which the property is attached, and its values are the property values that are assigned to the corresponding objects.  \\n  \\n Keys must be unique; in other words, the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class supports one attached value per managed object. Two keys are equal if passing them to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`.  \\n  \\n> [!NOTE]\\n>  You cannot control equality comparisons by overriding <xref:System.Object.GetHashCode%2A?displayProperty=fullName> to explicitly set the hash code for a key. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class does not use the <xref:System.Object.GetHashCode%2A?displayProperty=fullName> method to compute hash codes, and therefore does not invoke <xref:System.Object.GetHashCode%2A?displayProperty=fullName> overrides.  \\n  \\n Although the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class holds a collection of key/value pairs, it is best thought of as a table rather than a dictionary object. The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from a dictionary in several ways:  \\n  \\n-   It does not persist keys. That is, a key is not kept alive only because it is a member of the collection.  \\n  \\n-   It does not include all the methods (such as `GetEnumerator` or `Contains`) that a dictionary typically has.  \\n  \\n-   It does not implement the <xref:System.Collections.Generic.IDictionary%602> interface.  \\n  \\n The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class differs from other collection objects in its management of the object lifetime of keys stored in the collection. Ordinarily, when an object is stored in a collection, its lifetime lasts until it is removed (and there are no additional references to the object) or until the collection object itself is destroyed. However, in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> class, adding a key/value pair to the table does not ensure that the key will persist, even if it can be reached directly from a value stored in the table (for example, if the table contains one key, A, with a value V1, and a second key, B, with a value P2 that contains a reference to A). Instead, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> automatically removes the key/value entry as soon as no other references to a key exist outside the table. The example provides an illustration.\"\n  example:\n  - \"The following example illustrates that a key stored in the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table does not persist after references to it outside the table are destroyed. The example defines two classes: `ManagedClass`, which represents the key in the table, and `ClassData`, which represents the key's value. The example instantiates three objects of each type. It also instantiates a <xref:System.WeakReference> object that represents the second `ManagedClass`, and then destroys the second `ManagedClass` instance. The attempt to retrieve the second `ManagedClass` object from the <xref:System.WeakReference.Target%2A> property indicates that no references to the object remain.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/cs/example1.cs#1)]\\n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.class/vb/example1.vb#1)]\"\n  syntax:\n    content: 'public sealed class ConditionalWeakTable<TKey,TValue> where TKey : class where TValue : class'\n    typeParameters:\n    - id: TKey\n      description: The reference type to which the field is attached.\n    - id: TValue\n      description: The field's type. This must be a reference type.\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\n  id: '#ctor'\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: ConditionalWeakTable<TKey,TValue>()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()\n  fullName: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"></xref> class.\n  remarks: \"The <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.%23ctor%2A> constructor instantiates an empty <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table; that is, the table contains no key/value pairs. You can add key/value pairs by calling the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A>, or <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method.  \\n  \\n Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`).\"\n  syntax:\n    content: public ConditionalWeakTable ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\n  id: Add(`0,`1)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: Add(TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Add(TKey, TValue)\n  fullName: ConditionalWeakTable<TKey,TValue>.Add(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Adds a key to the table.\n  remarks: \"Every key in a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> object must be unique. Keys are not unique if they refer to the same object (that is, if passing them as arguments to the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method returns `true`).  \\n  \\n If the key is garbage-collected during the addition operation, the existing key/value pair is removed and the new key/value pair is added without an exception being thrown.\"\n  example:\n  - \"The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. The example then calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]\\n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]\"\n  syntax:\n    content: public void Add (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to add. <code>key</code> represents the object to which the property is attached.\n    - id: value\n      type: TValue\n      description: The key's property value.\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>key</code> already exists.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)\n  id: AddOrUpdate(`0,`1)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: AddOrUpdate(TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.AddOrUpdate(TKey, TValue)\n  fullName: ConditionalWeakTable<TKey,TValue>.AddOrUpdate(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void AddOrUpdate (TKey key, TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: ''\n    - id: value\n      type: TValue\n      description: ''\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear\n  id: Clear\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Clear()\n  fullName: ConditionalWeakTable<TKey,TValue>.Clear()\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\n  id: Finalize\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Finalize()\n  fullName: ConditionalWeakTable<TKey,TValue>.Finalize()\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  namespace: System.Runtime.CompilerServices\n  summary: Ensures that resources are freed and other cleanup operations are performed when the garbage collector reclaims the <xref href=\"System.Runtime.CompilerServices.ConditionalWeakTable`2\"></xref> object.\n  remarks: The garbage collector calls <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Finalize%2A> when the current object is ready to be finalized.\n  syntax:\n    content: ~ConditionalWeakTable`2 ();\n    parameters: []\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  id: GetOrCreateValue(`0)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: GetOrCreateValue(TKey)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)\n  fullName: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes the default constructor of the class that represents the table's value to create a value that is bound to the specified key.\n  remarks: \"If `key` does not exist in the table, the method adds it, along with the object that is instantiated by calling the default constructor of the class defined by the `TValue` generic type parameter. If the `TValue` class has no default constructor, a <xref:System.MissingMethodException> is thrown.  \\n  \\n This is the recommended method of retrieving an existing value or adding a new value to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table if the class of the table's value defines a default constructor. If it does not define a default constructor, you can instead call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method, which relies on a callback-provided method to instantiate the object representing the table's value  \\n  \\n To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.\"\n  example:\n  - \"The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]\\n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]\"\n  syntax:\n    content: public TValue GetOrCreateValue (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to search for. <code>key</code> represents the object to which the property is attached.\n    return:\n      type: TValue\n      description: The value that corresponds to <code>key</code>, if <code>key</code> already exists in the table; otherwise, a new value created by the default constructor of the class defined by the <code>TValue</code> generic type parameter.\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.MissingMethodException\n    commentId: T:System.MissingMethodException\n    description: \"<block subset=\\\"none\\\" type=\\\"note\\\">\\n      <p>  \\n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\\\"System.MissingMemberException\\\"></xref>, instead.  \\n  \\n</p>\\n    </block>  \\n  \\n The class that represents the table's value does not define a default constructor.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable`2.CreateValueCallback{`0,`1})\n  id: GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: GetValue(TKey, ConditionalWeakTable<TKey,TValue>)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.GetValue(TKey, ConditionalWeakTable<TKey,TValue>)\n  fullName: ConditionalWeakTable<TKey,TValue>.GetValue(TKey, ConditionalWeakTable<TKey,TValue>)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Atomically searches for a specified key in the table and returns the corresponding value. If the key does not exist in the table, the method invokes a callback method to create a value that is bound to the specified key.\n  remarks: \"If `key` does not exist in the table, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> invokes the method that is defined by the `createValueCallback` parameter and passes it the key. A new value is bound to the key in the table and returned as a result.  \\n  \\n Use this method only when the class that represents the table's value does not define a default constructor. If it does define a default constructor, use the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> method instead. To retrieve the value of an existing key without adding the key/value pair if the key is not found in the table, call the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method.  \\n  \\n If multiple threads try to create the same key, `createValueCallback` may be invoked multiple times with the same key. Only one of these calls will succeed, and its returned value will be added to the table. Which thread succeeds in creating the value is indeterminate. This rule permits the table to invoke `createValueCallback` outside the internal table lock to prevent deadlocks.\"\n  example:\n  - \"The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. It also defines a static (`Shared` in Visual Basic) `CreateAttachedValue` method that can be assigned to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.CreateValueCallback> delegate and passed to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method. The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> method to add a `MainClass` object and its attached `MainInfo` object to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. The example also illustrates calls to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A> and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A> methods to add key/value pairs to the table, and to the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to retrieve the value of an existing key.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]\\n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]\"\n  syntax:\n    content: public TValue GetValue (TKey key, System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>.CreateValueCallback createValueCallback);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to search for. <code>key</code> represents the object to which the property is attached.\n    - id: createValueCallback\n      type: System.Runtime.CompilerServices.ConditionalWeakTable{TKey,TValue}\n      description: A delegate to a method that can create a value for the given <code>key</code>. It has a single parameter of type <code>TKey</code>, and returns a value of type <code>TValue</code>.\n    return:\n      type: TValue\n      description: The value attached to <code>key</code>, if <code>key</code> already exists in the table; otherwise, the new value returned by the <code>createValueCallback</code> delegate.\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> or <code>createValueCallback</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)\n  id: Remove(`0)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: Remove(TKey)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Remove(TKey)\n  fullName: ConditionalWeakTable<TKey,TValue>.Remove(TKey)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Removes a key and its value from the table.\n  remarks: If the key is garbage-collected during this operation, the method does not raise an exception and the return value is undefined.\n  syntax:\n    content: public bool Remove (TKey key);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key to remove.\n    return:\n      type: System.Boolean\n      description: '`true` if the key is found and removed; otherwise, `false`.'\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  id: TryGetValue(`0,`1@)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: TryGetValue(TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey, TValue)\n  fullName: ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey, TValue)\n  type: Method\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.CompilerServices\n  summary: Gets the value of the specified key.\n  remarks: If the key is garbage-collected during this operation, the method may return `false` and set `value` to the default value (as if the key were not present).\n  example:\n  - \"The following example defines a `MainClass` class and a `MainInfo` class, which provides information about the `MainClass` instance. The example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.Add%2A>, <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetOrCreateValue%2A>, and <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.GetValue%2A> methods to add key/value pairs to a <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602> table. In each case, the example calls the <xref:System.Runtime.CompilerServices.ConditionalWeakTable%602.TryGetValue%2A> method to confirm that the key/value pair has been added to the table.  \\n  \\n [!code-csharp[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/cs/getvalue1.cs#1)]\\n [!code-vb[System.Runtime.CompilerServices.ConditionalWeakTable.GetValue#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.conditionalweaktable.getvalue/vb/getvalue1.vb#1)]\"\n  syntax:\n    content: public bool TryGetValue (TKey key, out TValue value);\n    parameters:\n    - id: key\n      type: TKey\n      description: The key that represents an object with an attached property.\n    - id: value\n      type: TValue\n      description: When this method returns, contains the attached property value. If <code>key</code> is not found, <code>value</code> contains the default value.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>key</code> is found; otherwise, `false`.'\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable<System#Collections#Generic#KeyValuePair<TKey,TValue>>#GetEnumerator\n  id: System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  isEii: true\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  fullName: ConditionalWeakTable<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>> IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n      description: ''\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  langs:\n  - csharp\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.IEnumerable.GetEnumerator()\n  fullName: ConditionalWeakTable<TKey,TValue>.IEnumerable.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  syntax:\n    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: ''\n  overload: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.MissingMethodException\n  parent: System\n  isExternal: false\n  name: MissingMethodException\n  nameWithType: MissingMethodException\n  fullName: System.MissingMethodException\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: ConditionalWeakTable<TKey,TValue>()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()\n  fullName: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>()\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add(`0,`1)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Add(TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Add(TKey, TValue)\n  fullName: ConditionalWeakTable<TKey,TValue>.Add(TKey, TValue)\n- uid: TKey\n  isExternal: true\n  name: TKey\n  nameWithType: TKey\n  fullName: TKey\n- uid: TValue\n  isExternal: true\n  name: TValue\n  nameWithType: TValue\n  fullName: TValue\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate(`0,`1)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: AddOrUpdate(TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.AddOrUpdate(TKey, TValue)\n  fullName: ConditionalWeakTable<TKey,TValue>.AddOrUpdate(TKey, TValue)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Clear()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Clear()\n  fullName: ConditionalWeakTable<TKey,TValue>.Clear()\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Finalize()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Finalize()\n  fullName: ConditionalWeakTable<TKey,TValue>.Finalize()\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue(`0)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: GetOrCreateValue(TKey)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)\n  fullName: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue(TKey)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue(`0,System.Runtime.CompilerServices.ConditionalWeakTable{`0,`1}.CreateValueCallback)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: GetValue(TKey, ConditionalWeakTable<TKey,TValue>)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.GetValue(TKey, ConditionalWeakTable<TKey,TValue>)\n  fullName: ConditionalWeakTable<TKey,TValue>.GetValue(TKey, ConditionalWeakTable<TKey,TValue>)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  name: ConditionalWeakTable<TKey,TValue>\n  nameWithType: ConditionalWeakTable<TKey,TValue>\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable{TKey,TValue}\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: ConditionalWeakTable<TKey,TValue>\n  nameWithType: ConditionalWeakTable<TKey,TValue>\n  fullName: System.Runtime.CompilerServices.ConditionalWeakTable<TKey,TValue>+CreateValueCallback\n  spec.csharp:\n  - uid: System.Runtime.CompilerServices.ConditionalWeakTable`2\n    name: ConditionalWeakTable\n    nameWithType: ConditionalWeakTable\n    fullName: System.Runtime.CompilerServices.ConditionalWeakTable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove(`0)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Remove(TKey)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Remove(TKey)\n  fullName: ConditionalWeakTable<TKey,TValue>.Remove(TKey)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue(`0,`1@)\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: TryGetValue(TKey, TValue)\n  nameWithType: ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey, TValue)\n  fullName: ConditionalWeakTable<TKey,TValue>.TryGetValue(TKey, TValue)\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n  fullName: ConditionalWeakTable<TKey,TValue>.IEnumerable<KeyValuePair<TKey,TValue>>.GetEnumerator()\n- uid: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  nameWithType: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n- uid: System.Collections.Generic.KeyValuePair`2\n  name: KeyValuePair<TKey,TValue>\n  nameWithType: KeyValuePair<TKey,TValue>\n  fullName: System.Collections.Generic.KeyValuePair<TKey,TValue>\n- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{TKey,TValue}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerator<KeyValuePair<TKey,TValue>>\n  nameWithType: IEnumerator<KeyValuePair<TKey,TValue>>\n  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey,TValue>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    nameWithType: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Collections.Generic.KeyValuePair`2\n    name: KeyValuePair\n    nameWithType: KeyValuePair\n    fullName: System.Collections.Generic.KeyValuePair\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: TKey\n    name: TKey\n    nameWithType: TKey\n    fullName: TKey\n  - name: ','\n    nameWithType: ','\n    fullName: ','\n  - uid: TValue\n    name: TValue\n    nameWithType: TValue\n    fullName: TValue\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  nameWithType: ConditionalWeakTable<TKey,TValue>.IEnumerable.GetEnumerator()\n  fullName: ConditionalWeakTable<TKey,TValue>.IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.#ctor*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: ConditionalWeakTable<TKey,TValue>\n  nameWithType: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>\n  fullName: ConditionalWeakTable<TKey,TValue>.ConditionalWeakTable<TKey,TValue>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Add*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Add\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Add\n  fullName: ConditionalWeakTable<TKey,TValue>.Add\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.AddOrUpdate*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: AddOrUpdate\n  nameWithType: ConditionalWeakTable<TKey,TValue>.AddOrUpdate\n  fullName: ConditionalWeakTable<TKey,TValue>.AddOrUpdate\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Clear*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Clear\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Clear\n  fullName: ConditionalWeakTable<TKey,TValue>.Clear\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Finalize*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Finalize\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Finalize\n  fullName: ConditionalWeakTable<TKey,TValue>.Finalize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetOrCreateValue*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: GetOrCreateValue\n  nameWithType: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue\n  fullName: ConditionalWeakTable<TKey,TValue>.GetOrCreateValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.GetValue*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: GetValue\n  nameWithType: ConditionalWeakTable<TKey,TValue>.GetValue\n  fullName: ConditionalWeakTable<TKey,TValue>.GetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.Remove*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: Remove\n  nameWithType: ConditionalWeakTable<TKey,TValue>.Remove\n  fullName: ConditionalWeakTable<TKey,TValue>.Remove\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.TryGetValue*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: TryGetValue\n  nameWithType: ConditionalWeakTable<TKey,TValue>.TryGetValue\n  fullName: ConditionalWeakTable<TKey,TValue>.TryGetValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey,TValue}}#GetEnumerator*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator\n  nameWithType: ConditionalWeakTable<TKey,TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator\n  fullName: ConditionalWeakTable<TKey,TValue>.System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Runtime.CompilerServices.ConditionalWeakTable`2.System#Collections#IEnumerable#GetEnumerator*\n  parent: System.Runtime.CompilerServices.ConditionalWeakTable`2\n  isExternal: false\n  name: System.Collections.IEnumerable.GetEnumerator\n  nameWithType: ConditionalWeakTable<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator\n  fullName: ConditionalWeakTable<TKey,TValue>.System.Collections.IEnumerable.GetEnumerator\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.CompilerServices/ConditionalWeakTable`2.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}