{"nodes":[{"content":"Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited","nodes":[{"pos":[0,116],"content":"Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited","nodes":[{"content":"Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited","pos":[0,116],"nodes":[{"content":"Specifies whether the property this attribute is bound to is read-only or read/write.","pos":[0,85]},{"content":"This class cannot be inherited","pos":[86,116]}]}]}],"pos":[897,1014],"yaml":true},{"content":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.  \n  \n> [!IMPORTANT]\n>  The <xref:System.ComponentModel.PropertyDescriptor> class enforces the <xref:System.ComponentModel.ReadOnlyAttribute> in the design environment and at run time. When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.  \n  \n For more information, see [Attributes](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87).","nodes":[{"pos":[0,384],"content":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.","nodes":[{"content":"Members that are marked with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`true`</ph> or that do not have a <ph id=\"ph3\">`Set`</ph> method cannot be changed.","pos":[0,147],"source":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed."},{"content":"Members that do not have this attribute or that are marked with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`false`</ph> are read/write, and they can be changed.","pos":[148,318],"source":" Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed."},{"content":"The default is <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.","pos":[319,384],"source":" The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>."}]},{"pos":[392,1197],"content":"[!IMPORTANT]\n The <xref:System.ComponentModel.PropertyDescriptor> class enforces the <xref:System.ComponentModel.ReadOnlyAttribute> in the design environment and at run time. When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":" The <xref:System.ComponentModel.PropertyDescriptor> class enforces the <xref:System.ComponentModel.ReadOnlyAttribute> in the design environment and at run time. When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","pos":[13,803],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ComponentModel.PropertyDescriptor&gt;</ph> class enforces the <ph id=\"ph2\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> in the design environment and at run time.","pos":[1,161],"source":" The <xref:System.ComponentModel.PropertyDescriptor> class enforces the <xref:System.ComponentModel.ReadOnlyAttribute> in the design environment and at run time."},{"content":"When you mark a property with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`true`</ph>, the value of this attribute is set to the constant member <ph id=\"ph3\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>.","pos":[162,367],"source":" When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>."},{"content":"For a property marked with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`false`</ph>, the value is <ph id=\"ph3\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.","pos":[368,525],"source":" For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName&gt;</ph>.","pos":[526,790],"source":" Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>."}]}]},{"pos":[1204,1315],"content":"For more information, see <bpt id=\"p1\">[</bpt>Attributes<ept id=\"p1\">](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87)</ept>.","source":"For more information, see [Attributes](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87)."}],"pos":[1025,2348],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref> class.","nodes":[{"pos":[0,101],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref> class."}],"pos":[9891,9993],"yaml":true},{"content":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.  \n  \n> [!NOTE]\n>  When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","nodes":[{"pos":[0,384],"content":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.","nodes":[{"content":"Members that are marked with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`true`</ph> or that do not have a <ph id=\"ph3\">`Set`</ph> method cannot be changed.","pos":[0,147],"source":"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed."},{"content":"Members that do not have this attribute or that are marked with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`false`</ph> are read/write, and they can be changed.","pos":[148,318],"source":" Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed."},{"content":"The default is <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.","pos":[319,384],"source":" The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>."}]},{"pos":[392,1031],"content":"[!NOTE]\n When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","leadings":["","> "],"nodes":[{"content":" When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","pos":[8,637],"nodes":[{"content":"When you mark a property with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`true`</ph>, the value of this attribute is set to the constant member <ph id=\"ph3\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>.","pos":[1,206],"source":" When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>."},{"content":"For a property marked with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`false`</ph>, the value is <ph id=\"ph3\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.","pos":[207,364],"source":" For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName&gt;</ph>.","pos":[365,629],"source":" Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>."}]}]}],"pos":[10004,11041],"yaml":true,"extradata":"MT"},{"content":"`true` to show that the property this attribute is bound to is read-only; `false` to show that the property is read/write.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">`true`</ph> to show that the property this attribute is bound to is read-only; <ph id=\"ph2\">`false`</ph> to show that the property is read/write.","source":"`true` to show that the property this attribute is bound to is read-only; `false` to show that the property is read/write."}],"pos":[12027,12152],"yaml":true},{"content":"Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"></xref> (that is, the property this attribute is bound to is read/write). This `static` field is read-only.","nodes":[{"pos":[0,270],"content":"Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"></xref> (that is, the property this attribute is bound to is read/write). This `static` field is read-only.","nodes":[{"content":"Specifies the default value for the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute\"&gt;&lt;/xref&gt;</ph>, which is <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"&gt;&lt;/xref&gt;</ph> (that is, the property this attribute is bound to is read/write).","pos":[0,236],"source":"Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"></xref> (that is, the property this attribute is bound to is read/write)."},{"content":"This <ph id=\"ph1\">`static`</ph> field is read-only.","pos":[237,270],"source":" This `static` field is read-only."}]}],"pos":[13463,13734],"yaml":true},{"content":"When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","nodes":[{"pos":[0,338],"content":"When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","nodes":[{"content":"When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","pos":[0,338],"nodes":[{"content":"When you mark a property with this value, this attribute is set to the constant member <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.","pos":[0,137],"source":"When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName&gt;</ph>.","pos":[138,338],"source":" Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>."}]}]}],"pos":[13745,14084],"yaml":true,"extradata":"MT"},{"content":"Indicates whether this instance and a specified object are equal.","nodes":[{"pos":[0,65],"content":"Indicates whether this instance and a specified object are equal.","nodes":[{"content":"Indicates whether this instance and a specified object are equal.","pos":[0,65]}]}],"pos":[15581,15647],"yaml":true},{"content":"Another object to compare to.","nodes":[{"pos":[0,29],"content":"Another object to compare to.","nodes":[{"content":"Another object to compare to.","pos":[0,29]}]}],"pos":[15791,15821],"yaml":true},{"content":"`true` if <code>value</code> is equal to this instance; otherwise, `false`.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is equal to this instance; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>value</code> is equal to this instance; otherwise, `false`."}],"pos":[15879,15957],"yaml":true},{"content":"Returns the hash code for this instance.","nodes":[{"pos":[0,40],"content":"Returns the hash code for this instance.","nodes":[{"content":"Returns the hash code for this instance.","pos":[0,40]}]}],"pos":[17300,17341],"yaml":true},{"content":"A hash code for the current <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>.","nodes":[{"pos":[0,89],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.ReadOnlyAttribute\"&gt;&lt;/xref&gt;</ph>.","source":"A hash code for the current <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>."}],"pos":[17475,17565],"yaml":true},{"content":"Determines if this attribute is the default.","nodes":[{"pos":[0,44],"content":"Determines if this attribute is the default.","nodes":[{"content":"Determines if this attribute is the default.","pos":[0,44]}]}],"pos":[18955,19000],"yaml":true},{"content":"`true` if the attribute is the default value for this attribute class; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the attribute is the default value for this attribute class; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the attribute is the default value for this attribute class; otherwise, `false`."}],"pos":[19144,19237],"yaml":true},{"content":"Gets a value indicating whether the property this attribute is bound to is read-only.","nodes":[{"pos":[0,85],"content":"Gets a value indicating whether the property this attribute is bound to is read-only.","nodes":[{"content":"Gets a value indicating whether the property this attribute is bound to is read-only.","pos":[0,85]}]}],"pos":[20518,20604],"yaml":true},{"content":"`true` if the property this attribute is bound to is read-only; `false` if the property is read/write.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">`true`</ph> if the property this attribute is bound to is read-only; <ph id=\"ph2\">`false`</ph> if the property is read/write.","source":"`true` if the property this attribute is bound to is read-only; `false` if the property is read/write."}],"pos":[21942,22047],"yaml":true},{"content":"Specifies that the property this attribute is bound to is read/write and can be modified. This `static` field is read-only.","nodes":[{"pos":[0,123],"content":"Specifies that the property this attribute is bound to is read/write and can be modified. This `static` field is read-only.","nodes":[{"content":"Specifies that the property this attribute is bound to is read/write and can be modified.","pos":[0,89]},{"content":"This <ph id=\"ph1\">`static`</ph> field is read-only.","pos":[90,123],"source":" This `static` field is read-only."}]}],"pos":[23333,23457],"yaml":true},{"content":"This field is the default setting for this attribute.  \n  \n When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","nodes":[{"pos":[0,53],"content":"This field is the default setting for this attribute.","nodes":[{"content":"This field is the default setting for this attribute.","pos":[0,53]}]},{"pos":[60,466],"content":"When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.","nodes":[{"content":"When you mark a property with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`false`</ph>, the value of this attribute is set to the constant member <ph id=\"ph3\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No&gt;</ph>.","pos":[0,205],"source":"When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>."},{"content":"Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName&gt;</ph>.","pos":[206,406],"source":" Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>."}]}],"pos":[23468,23939],"yaml":true,"extradata":"MT"},{"content":"Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This `static` field is read-only.","nodes":[{"pos":[0,148],"content":"Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This `static` field is read-only.","nodes":[{"content":"Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer.","pos":[0,114]},{"content":"This <ph id=\"ph1\">`static`</ph> field is read-only.","pos":[115,148],"source":" This `static` field is read-only."}]}],"pos":[25343,25492],"yaml":true},{"content":"When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>.","nodes":[{"pos":[0,407],"content":"When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>.","nodes":[{"content":"When you mark a property with the <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute&gt;</ph> set to <ph id=\"ph2\">`true`</ph>, the value of this attribute is set to the constant member <ph id=\"ph3\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes&gt;</ph>.","pos":[0,205],"source":"When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>."},{"content":"Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <ph id=\"ph1\">&lt;xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName&gt;</ph>.","pos":[206,407],"source":" Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>."}]}],"pos":[25503,25911],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.ReadOnlyAttribute\n  commentId: T:System.ComponentModel.ReadOnlyAttribute\n  id: ReadOnlyAttribute\n  children:\n  - System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)\n  - System.ComponentModel.ReadOnlyAttribute.Default\n  - System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\n  - System.ComponentModel.ReadOnlyAttribute.GetHashCode\n  - System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute\n  - System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  - System.ComponentModel.ReadOnlyAttribute.No\n  - System.ComponentModel.ReadOnlyAttribute.Yes\n  langs:\n  - csharp\n  name: ReadOnlyAttribute\n  nameWithType: ReadOnlyAttribute\n  fullName: System.ComponentModel.ReadOnlyAttribute\n  type: Class\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Specifies whether the property this attribute is bound to is read-only or read/write. This class cannot be inherited\n  remarks: \"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.  \\n  \\n> [!IMPORTANT]\\n>  The <xref:System.ComponentModel.PropertyDescriptor> class enforces the <xref:System.ComponentModel.ReadOnlyAttribute> in the design environment and at run time. When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.  \\n  \\n For more information, see [Attributes](http://msdn.microsoft.com/library/30386922-1e00-4602-9ebf-526b271a8b87).\"\n  example:\n  - \"The following code example marks a property as read-only.  \\n  \\n [!code-cpp[Classic ReadOnlyAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ReadOnlyAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CS/source.cs#1)]\\n [!code-vb[Classic ReadOnlyAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/VB/source.vb#1)]  \\n  \\n The next code example shows how to check the value of the <xref:System.ComponentModel.ReadOnlyAttribute> for `MyProperty`. First, the code gets a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object. Next, it indexes into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`. Then it returns the attributes for this property and saves them in the attributes variable.  \\n  \\n The example presents two different ways of checking the value of the <xref:System.ComponentModel.ReadOnlyAttribute>. In the second code fragment, the example calls the <xref:System.ComponentModel.ReadOnlyAttribute.Equals%2A> method. In the last code fragment, the example uses the <xref:System.ComponentModel.ReadOnlyAttribute.IsReadOnly%2A> property to check the value.  \\n  \\n [!code-cpp[Classic ReadOnlyAttribute Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CPP/source.cpp#2)]\\n [!code-csharp[Classic ReadOnlyAttribute Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CS/source.cs#2)]\\n [!code-vb[Classic ReadOnlyAttribute Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/VB/source.vb#2)]  \\n  \\n If you marked a class with the <xref:System.ComponentModel.ReadOnlyAttribute>, use the following code example to check the value.  \\n  \\n [!code-cpp[Classic ReadOnlyAttribute Example#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CPP/source.cpp#3)]\\n [!code-csharp[Classic ReadOnlyAttribute Example#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/CS/source.cs#3)]\\n [!code-vb[Classic ReadOnlyAttribute Example#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute Example/VB/source.vb#3)]\"\n  syntax:\n    content: >-\n      [System.AttributeUsage(System.AttributeTargets.All)]\n\n      public sealed class ReadOnlyAttribute : Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  implements: []\n  inheritedMembers:\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  - System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  - System.Attribute.Match(System.Object)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  - System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Attribute.TypeId\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.AttributeUsageAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)\n  commentId: M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: ReadOnlyAttribute(Boolean)\n  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n  fullName: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n  type: Constructor\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Initializes a new instance of the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref> class.\n  remarks: \"Members that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true` or that do not have a `Set` method cannot be changed. Members that do not have this attribute or that are marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false` are read/write, and they can be changed. The default is <xref:System.ComponentModel.ReadOnlyAttribute.No>.  \\n  \\n> [!NOTE]\\n>  When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. For a property marked with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value is <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check the value of this attribute in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName> or <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.\"\n  example:\n  - \"The following code example marks a property as read-only. This code creates a new <xref:System.ComponentModel.ReadOnlyAttribute>, sets its value to <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>, and binds it to the property.  \\n  \\n [!code-cpp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.ReadOnlyAttribute Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.ReadOnlyAttribute Example/CS/source.cs#1)]\\n [!code-vb[Classic ReadOnlyAttribute.ReadOnlyAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute.ReadOnlyAttribute Example/VB/source.vb#1)]\"\n  syntax:\n    content: public ReadOnlyAttribute (bool isReadOnly);\n    parameters:\n    - id: isReadOnly\n      type: System.Boolean\n      description: '`true` to show that the property this attribute is bound to is read-only; `false` to show that the property is read/write.'\n  overload: System.ComponentModel.ReadOnlyAttribute.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.Default\n  commentId: F:System.ComponentModel.ReadOnlyAttribute.Default\n  id: Default\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: Default\n  nameWithType: ReadOnlyAttribute.Default\n  fullName: ReadOnlyAttribute.Default\n  type: Field\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Specifies the default value for the <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>, which is <xref href=\"System.ComponentModel.ReadOnlyAttribute.No\"></xref> (that is, the property this attribute is bound to is read/write). This `static` field is read-only.\n  remarks: When you mark a property with this value, this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.\n  syntax:\n    content: public static readonly System.ComponentModel.ReadOnlyAttribute Default;\n    return:\n      type: System.ComponentModel.ReadOnlyAttribute\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\n  commentId: M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: ReadOnlyAttribute.Equals(Object)\n  fullName: ReadOnlyAttribute.Equals(Object)\n  type: Method\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Indicates whether this instance and a specified object are equal.\n  syntax:\n    content: public override bool Equals (object value);\n    parameters:\n    - id: value\n      type: System.Object\n      description: Another object to compare to.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>value</code> is equal to this instance; otherwise, `false`.'\n  overload: System.ComponentModel.ReadOnlyAttribute.Equals*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode\n  commentId: M:System.ComponentModel.ReadOnlyAttribute.GetHashCode\n  id: GetHashCode\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: ReadOnlyAttribute.GetHashCode()\n  fullName: ReadOnlyAttribute.GetHashCode()\n  type: Method\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Returns the hash code for this instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.ComponentModel.ReadOnlyAttribute\"></xref>.\n  overload: System.ComponentModel.ReadOnlyAttribute.GetHashCode*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute\n  commentId: M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute\n  id: IsDefaultAttribute\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: IsDefaultAttribute()\n  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()\n  fullName: ReadOnlyAttribute.IsDefaultAttribute()\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.ComponentModel.Primitives\n  namespace: System.ComponentModel\n  summary: Determines if this attribute is the default.\n  syntax:\n    content: public override bool IsDefaultAttribute ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the attribute is the default value for this attribute class; otherwise, `false`.'\n  overload: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  commentId: P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  id: IsReadOnly\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: ReadOnlyAttribute.IsReadOnly\n  fullName: ReadOnlyAttribute.IsReadOnly\n  type: Property\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Gets a value indicating whether the property this attribute is bound to is read-only.\n  remarks: ''\n  example:\n  - \"The following code example checks to see whether `MyProperty` is read-only. First, the code gets the attributes for `MyProperty` by doing the following:  \\n  \\n-   Retrieving a <xref:System.ComponentModel.PropertyDescriptorCollection> with all the properties for the object.  \\n  \\n-   Indexing into the <xref:System.ComponentModel.PropertyDescriptorCollection> to get `MyProperty`.  \\n  \\n-   Saving the attributes for this property in the attributes variable.  \\n  \\n Then the code sets `myAttribute` to the value of the <xref:System.ComponentModel.ReadOnlyAttribute> in the <xref:System.ComponentModel.AttributeCollection> and checks whether the property is read-only.  \\n  \\n [!code-cpp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.IsReadOnly Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ReadOnlyAttribute.IsReadOnly Example/CS/source.cs#1)]\\n [!code-vb[Classic ReadOnlyAttribute.IsReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ReadOnlyAttribute.IsReadOnly Example/VB/source.vb#1)]\"\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the property this attribute is bound to is read-only; `false` if the property is read/write.'\n  overload: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.No\n  commentId: F:System.ComponentModel.ReadOnlyAttribute.No\n  id: No\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: No\n  nameWithType: ReadOnlyAttribute.No\n  fullName: ReadOnlyAttribute.No\n  type: Field\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Specifies that the property this attribute is bound to is read/write and can be modified. This `static` field is read-only.\n  remarks: \"This field is the default setting for this attribute.  \\n  \\n When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `false`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.No>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.No?displayProperty=fullName>.\"\n  syntax:\n    content: public static readonly System.ComponentModel.ReadOnlyAttribute No;\n    return:\n      type: System.ComponentModel.ReadOnlyAttribute\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.ReadOnlyAttribute.Yes\n  commentId: F:System.ComponentModel.ReadOnlyAttribute.Yes\n  id: Yes\n  parent: System.ComponentModel.ReadOnlyAttribute\n  langs:\n  - csharp\n  name: Yes\n  nameWithType: ReadOnlyAttribute.Yes\n  fullName: ReadOnlyAttribute.Yes\n  type: Field\n  assemblies:\n  - System.ComponentModel.Primitives\n  - System\n  - netstandard\n  namespace: System.ComponentModel\n  summary: Specifies that the property this attribute is bound to is read-only and cannot be modified in the server explorer. This `static` field is read-only.\n  remarks: When you mark a property with the <xref:System.ComponentModel.ReadOnlyAttribute> set to `true`, the value of this attribute is set to the constant member <xref:System.ComponentModel.ReadOnlyAttribute.Yes>. Therefore, when you want to check whether the attribute is set to this value in your code, you must specify the attribute as <xref:System.ComponentModel.ReadOnlyAttribute.Yes?displayProperty=fullName>.\n  syntax:\n    content: public static readonly System.ComponentModel.ReadOnlyAttribute Yes;\n    return:\n      type: System.ComponentModel.ReadOnlyAttribute\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  nameWithType: Attribute\n  fullName: System.Attribute\n- uid: System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: ReadOnlyAttribute(Boolean)\n  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n  fullName: ReadOnlyAttribute.ReadOnlyAttribute(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ComponentModel.ReadOnlyAttribute.Default\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Default\n  nameWithType: ReadOnlyAttribute.Default\n  fullName: ReadOnlyAttribute.Default\n- uid: System.ComponentModel.ReadOnlyAttribute\n  parent: System.ComponentModel\n  isExternal: false\n  name: ReadOnlyAttribute\n  nameWithType: ReadOnlyAttribute\n  fullName: System.ComponentModel.ReadOnlyAttribute\n- uid: System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: ReadOnlyAttribute.Equals(Object)\n  fullName: ReadOnlyAttribute.Equals(Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ReadOnlyAttribute.GetHashCode()\n  fullName: ReadOnlyAttribute.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsDefaultAttribute()\n  nameWithType: ReadOnlyAttribute.IsDefaultAttribute()\n  fullName: ReadOnlyAttribute.IsDefaultAttribute()\n- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReadOnlyAttribute.IsReadOnly\n  fullName: ReadOnlyAttribute.IsReadOnly\n- uid: System.ComponentModel.ReadOnlyAttribute.No\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: No\n  nameWithType: ReadOnlyAttribute.No\n  fullName: ReadOnlyAttribute.No\n- uid: System.ComponentModel.ReadOnlyAttribute.Yes\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Yes\n  nameWithType: ReadOnlyAttribute.Yes\n  fullName: ReadOnlyAttribute.Yes\n- uid: System.ComponentModel.ReadOnlyAttribute.#ctor*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: ReadOnlyAttribute\n  nameWithType: ReadOnlyAttribute.ReadOnlyAttribute\n  fullName: ReadOnlyAttribute.ReadOnlyAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n- uid: System.ComponentModel.ReadOnlyAttribute.Equals*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: Equals\n  nameWithType: ReadOnlyAttribute.Equals\n  fullName: ReadOnlyAttribute.Equals\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n- uid: System.ComponentModel.ReadOnlyAttribute.GetHashCode*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: GetHashCode\n  nameWithType: ReadOnlyAttribute.GetHashCode\n  fullName: ReadOnlyAttribute.GetHashCode\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n- uid: System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsDefaultAttribute\n  nameWithType: ReadOnlyAttribute.IsDefaultAttribute\n  fullName: ReadOnlyAttribute.IsDefaultAttribute\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n- uid: System.ComponentModel.ReadOnlyAttribute.IsReadOnly*\n  parent: System.ComponentModel.ReadOnlyAttribute\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: ReadOnlyAttribute.IsReadOnly\n  fullName: ReadOnlyAttribute.IsReadOnly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/ReadOnlyAttribute.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttribute(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Module, Type)\n  nameWithType: Attribute.GetCustomAttribute(Module, Type)\n  fullName: Attribute.GetCustomAttribute(Module, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttribute(Assembly, Type)\n  fullName: Attribute.GetCustomAttribute(Assembly, Type)\n- uid: System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttribute(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttribute(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttribute(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type)\n  fullName: Attribute.GetCustomAttributes(Module, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Type)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Module, Boolean)\n  fullName: Attribute.GetCustomAttributes(Module, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Type)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Type)\n  fullName: Attribute.GetCustomAttributes(Assembly, Type)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly, Boolean)\n  nameWithType: Attribute.GetCustomAttributes(Assembly, Boolean)\n  fullName: Attribute.GetCustomAttributes(Assembly, Boolean)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(ParameterInfo)\n  nameWithType: Attribute.GetCustomAttributes(ParameterInfo)\n  fullName: Attribute.GetCustomAttributes(ParameterInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Module)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Module)\n  nameWithType: Attribute.GetCustomAttributes(Module)\n  fullName: Attribute.GetCustomAttributes(Module)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo)\n  fullName: Attribute.GetCustomAttributes(MemberInfo)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.Assembly)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(Assembly)\n  nameWithType: Attribute.GetCustomAttributes(Assembly)\n  fullName: Attribute.GetCustomAttributes(Assembly)\n- uid: System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: Attribute.GetCustomAttributes(MemberInfo, Type)\n  fullName: Attribute.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(ParameterInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Module, Type, Boolean)\n  fullName: Attribute.IsDefined(Module, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type, Boolean)\n  fullName: Attribute.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type, Boolean)\n  nameWithType: Attribute.IsDefined(Assembly, Type, Boolean)\n  fullName: Attribute.IsDefined(Assembly, Type, Boolean)\n- uid: System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: Attribute.IsDefined(MemberInfo, Type)\n  fullName: Attribute.IsDefined(MemberInfo, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Module,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Module, Type)\n  nameWithType: Attribute.IsDefined(Module, Type)\n  fullName: Attribute.IsDefined(Module, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(Assembly, Type)\n  nameWithType: Attribute.IsDefined(Assembly, Type)\n  fullName: Attribute.IsDefined(Assembly, Type)\n- uid: System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)\n  parent: System.Attribute\n  isExternal: false\n  name: IsDefined(ParameterInfo, Type)\n  nameWithType: Attribute.IsDefined(ParameterInfo, Type)\n  fullName: Attribute.IsDefined(ParameterInfo, Type)\n- uid: System.Attribute.Match(System.Object)\n  parent: System.Attribute\n  isExternal: false\n  name: Match(Object)\n  nameWithType: Attribute.Match(Object)\n  fullName: Attribute.Match(Object)\n- uid: System.Attribute.TypeId\n  parent: System.Attribute\n  isExternal: false\n  name: TypeId\n  nameWithType: Attribute.TypeId\n  fullName: Attribute.TypeId\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: Attribute._Attribute.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.GetTypeInfoCount(UInt32)\n  nameWithType: Attribute._Attribute.GetTypeInfoCount(UInt32)\n  fullName: Attribute._Attribute.GetTypeInfoCount(UInt32)\n- uid: System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Attribute\n  isExternal: false\n  name: _Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: Attribute._Attribute.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n"}