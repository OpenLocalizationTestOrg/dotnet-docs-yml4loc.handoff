{"nodes":[{"content":"Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).","nodes":[{"pos":[0,186],"content":"Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).","nodes":[{"content":"Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).","pos":[0,186]}]}],"pos":[1112,1299],"yaml":true},{"content":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.","nodes":[{"pos":[0,125],"content":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.","nodes":[{"content":"Implemented on a UI Automation provider that must support the <ph id=\"ph1\">&lt;xref:System.Windows.Automation.WindowPattern&gt;</ph> control pattern.","pos":[0,125],"source":"Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern."}]}],"pos":[1310,1436],"yaml":true,"extradata":"MT"},{"content":"Attempts to close the window.","nodes":[{"pos":[0,29],"content":"Attempts to close the window.","nodes":[{"content":"Attempts to close the window.","pos":[0,29]}]}],"pos":[2953,2983],"yaml":true},{"content":"<xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.  \n  \n <xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event. If possible, the event should be raised after the control has completed its associated action.  \n  \n When called on a split pane control, this method will close the pane and remove the associated split. This method might also close all other panes, depending on implementation.","nodes":[{"pos":[0,108],"content":"<xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A&gt;</ph> must return immediately without blocking.","pos":[0,108],"source":"<xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking."}]},{"pos":[115,370],"content":"<xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event. If possible, the event should be raised after the control has completed its associated action.","nodes":[{"content":"<xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event. If possible, the event should be raised after the control has completed its associated action.","pos":[0,255],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent&gt;</ph> event.","pos":[0,160],"source":"<xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event."},{"content":"If possible, the event should be raised after the control has completed its associated action.","pos":[161,255]}]}]},{"pos":[377,553],"content":"When called on a split pane control, this method will close the pane and remove the associated split. This method might also close all other panes, depending on implementation.","nodes":[{"content":"When called on a split pane control, this method will close the pane and remove the associated split. This method might also close all other panes, depending on implementation.","pos":[0,176],"nodes":[{"content":"When called on a split pane control, this method will close the pane and remove the associated split.","pos":[0,101]},{"content":"This method might also close all other panes, depending on implementation.","pos":[102,176]}]}]}],"pos":[2994,3554],"yaml":true,"extradata":"MT"},{"content":"When the control is unable to perform the requested action.","nodes":[{"pos":[0,59],"content":"When the control is unable to perform the requested action.","nodes":[{"content":"When the control is unable to perform the requested action.","pos":[0,59]}]}],"pos":[3812,3872],"yaml":true},{"content":"When the target element is no longer available (for example, the window has closed).","nodes":[{"pos":[0,84],"content":"When the target element is no longer available (for example, the window has closed).","nodes":[{"content":"When the target element is no longer available (for example, the window has closed).","pos":[0,84]}]}],"pos":[4026,4111],"yaml":true},{"content":"Gets the interaction state of the window.","nodes":[{"pos":[0,41],"content":"Gets the interaction state of the window.","nodes":[{"content":"Gets the interaction state of the window.","pos":[0,41]}]}],"pos":[5149,5191],"yaml":true},{"content":"The <xref href=\"System.Windows.Automation.WindowInteractionState\"></xref> of the control.","nodes":[{"pos":[0,89],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Automation.WindowInteractionState\"&gt;&lt;/xref&gt;</ph> of the control.","source":"The <xref href=\"System.Windows.Automation.WindowInteractionState\"></xref> of the control."}],"pos":[5388,5478],"yaml":true},{"content":"Gets a value that specifies whether the window is modal.","nodes":[{"pos":[0,56],"content":"Gets a value that specifies whether the window is modal.","nodes":[{"content":"Gets a value that specifies whether the window is modal.","pos":[0,56]}]}],"pos":[6560,6617],"yaml":true},{"content":"`true` if the window is modal; otherwise `false`.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">`true`</ph> if the window is modal; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the window is modal; otherwise `false`."}],"pos":[6727,6779],"yaml":true},{"content":"Gets a value that specifies whether the window is the topmost element in the z-order.","nodes":[{"pos":[0,85],"content":"Gets a value that specifies whether the window is the topmost element in the z-order.","nodes":[{"content":"Gets a value that specifies whether the window is the topmost element in the z-order.","pos":[0,85]}]}],"pos":[7864,7950],"yaml":true},{"content":"`true` if the window is topmost; otherwise `false`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`true`</ph> if the window is topmost; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the window is topmost; otherwise `false`."}],"pos":[8062,8116],"yaml":true},{"content":"Gets a value that specifies whether the window can be maximized.","nodes":[{"pos":[0,64],"content":"Gets a value that specifies whether the window can be maximized.","nodes":[{"content":"Gets a value that specifies whether the window can be maximized.","pos":[0,64]}]}],"pos":[9215,9280],"yaml":true},{"content":"`true` if the window can be maximized; otherwise `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if the window can be maximized; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the window can be maximized; otherwise `false`."}],"pos":[9394,9454],"yaml":true},{"content":"Gets a value that specifies whether the window can be minimized.","nodes":[{"pos":[0,64],"content":"Gets a value that specifies whether the window can be minimized.","nodes":[{"content":"Gets a value that specifies whether the window can be minimized.","pos":[0,64]}]}],"pos":[10555,10620],"yaml":true},{"content":"`true` if the window can be minimized; otherwise `false`.","nodes":[{"pos":[0,57],"content":"<ph id=\"ph1\">`true`</ph> if the window can be minimized; otherwise <ph id=\"ph2\">`false`</ph>.","source":"`true` if the window can be minimized; otherwise `false`."}],"pos":[10734,10794],"yaml":true},{"content":"Changes the visual state of the window. For example, minimizes or maximizes it.","nodes":[{"pos":[0,79],"content":"Changes the visual state of the window. For example, minimizes or maximizes it.","nodes":[{"content":"Changes the visual state of the window. For example, minimizes or maximizes it.","pos":[0,79],"nodes":[{"content":"Changes the visual state of the window.","pos":[0,39]},{"content":"For example, minimizes or maximizes it.","pos":[40,79]}]}]}],"pos":[12103,12183],"yaml":true},{"content":"The requested visual state of the window.","nodes":[{"pos":[0,41],"content":"The requested visual state of the window.","nodes":[{"content":"The requested visual state of the window.","pos":[0,41]}]}],"pos":[12393,12435],"yaml":true},{"content":"When the control does not support the requested behavior.","nodes":[{"pos":[0,57],"content":"When the control does not support the requested behavior.","nodes":[{"content":"When the control does not support the requested behavior.","pos":[0,57]}]}],"pos":[12638,12696],"yaml":true},{"content":"Gets the visual state of the window.","nodes":[{"pos":[0,36],"content":"Gets the visual state of the window.","nodes":[{"content":"Gets the visual state of the window.","pos":[0,36]}]}],"pos":[13704,13741],"yaml":true},{"content":"The visual state of the window.","nodes":[{"pos":[0,31],"content":"The visual state of the window.","nodes":[{"content":"The visual state of the window.","pos":[0,31]}]}],"pos":[13923,13955],"yaml":true},{"content":"Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.","nodes":[{"pos":[0,136],"content":"Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.","nodes":[{"content":"Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.","pos":[0,136]}]}],"pos":[15147,15284],"yaml":true},{"content":"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.  \n  \n The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.","nodes":[{"pos":[0,144],"content":"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.","nodes":[{"content":"This method is typically used in conjunction with the handling of a <ph id=\"ph1\">&lt;xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent&gt;</ph>.","pos":[0,144],"source":"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>."}]},{"pos":[151,412],"content":"The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.","nodes":[{"content":"The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.","pos":[0,261],"nodes":[{"content":"The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.","pos":[0,159]},{"content":"The calling code should not rely on this method to ascertain exactly when the window has become idle.","pos":[160,261]}]}]}],"pos":[15295,15712],"yaml":true,"extradata":"MT"},{"content":"The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,146],"content":"The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"content":"The amount of time, in milliseconds, to wait for the associated process to become idle.","pos":[0,87]},{"content":"The maximum is <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","pos":[88,146],"source":" The maximum is <xref href=\"System.Int32.MaxValue\"></xref>."}]}],"pos":[15867,16014],"yaml":true},{"content":"`true` if the window has entered the idle state; `false` if the timeout occurred.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> if the window has entered the idle state; <ph id=\"ph2\">`false`</ph> if the timeout occurred.","source":"`true` if the window has entered the idle state; `false` if the timeout occurred."}],"pos":[16072,16156],"yaml":true},{"content":"When the parameter passed in is not a valid number.","nodes":[{"pos":[0,51],"content":"When the parameter passed in is not a valid number.","nodes":[{"content":"When the parameter passed in is not a valid number.","pos":[0,51]}]}],"pos":[16365,16417],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Automation.Provider.IWindowProvider\n  commentId: T:System.Windows.Automation.Provider.IWindowProvider\n  id: IWindowProvider\n  children:\n  - System.Windows.Automation.Provider.IWindowProvider.Close\n  - System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  - System.Windows.Automation.Provider.IWindowProvider.IsModal\n  - System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  - System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  - System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  - System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)\n  - System.Windows.Automation.Provider.IWindowProvider.VisualState\n  - System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)\n  langs:\n  - csharp\n  name: IWindowProvider\n  nameWithType: IWindowProvider\n  fullName: System.Windows.Automation.Provider.IWindowProvider\n  type: Interface\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).\n  remarks: Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      [System.Runtime.InteropServices.Guid(\"987df77b-db06-4d77-8f8a-86a9c3bb90b9\")]\n\n      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]\n\n      public interface IWindowProvider\n  implements: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Runtime.InteropServices.GuidAttribute\n  - type: System.Runtime.InteropServices.InterfaceTypeAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.Close\n  commentId: M:System.Windows.Automation.Provider.IWindowProvider.Close\n  id: Close\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: IWindowProvider.Close()\n  fullName: IWindowProvider.Close()\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Attempts to close the window.\n  remarks: \"<xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.  \\n  \\n <xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event. If possible, the event should be raised after the control has completed its associated action.  \\n  \\n When called on a split pane control, this method will close the pane and remove the associated split. This method might also close all other panes, depending on implementation.\"\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Windows.Automation.Provider.IWindowProvider.Close*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: When the control is unable to perform the requested action.\n  - type: System.Windows.Automation.ElementNotAvailableException\n    commentId: T:System.Windows.Automation.ElementNotAvailableException\n    description: When the target element is no longer available (for example, the window has closed).\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  commentId: P:System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  id: InteractionState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: InteractionState\n  nameWithType: IWindowProvider.InteractionState\n  fullName: IWindowProvider.InteractionState\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets the interaction state of the window.\n  syntax:\n    content: public System.Windows.Automation.WindowInteractionState InteractionState { get; }\n    return:\n      type: System.Windows.Automation.WindowInteractionState\n      description: The <xref href=\"System.Windows.Automation.WindowInteractionState\"></xref> of the control.\n  overload: System.Windows.Automation.Provider.IWindowProvider.InteractionState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal\n  commentId: P:System.Windows.Automation.Provider.IWindowProvider.IsModal\n  id: IsModal\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: IsModal\n  nameWithType: IWindowProvider.IsModal\n  fullName: IWindowProvider.IsModal\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window is modal.\n  syntax:\n    content: public bool IsModal { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window is modal; otherwise `false`.'\n  overload: System.Windows.Automation.Provider.IWindowProvider.IsModal*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  commentId: P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  id: IsTopmost\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: IsTopmost\n  nameWithType: IWindowProvider.IsTopmost\n  fullName: IWindowProvider.IsTopmost\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window is the topmost element in the z-order.\n  syntax:\n    content: public bool IsTopmost { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window is topmost; otherwise `false`.'\n  overload: System.Windows.Automation.Provider.IWindowProvider.IsTopmost*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  commentId: P:System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  id: Maximizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: Maximizable\n  nameWithType: IWindowProvider.Maximizable\n  fullName: IWindowProvider.Maximizable\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window can be maximized.\n  syntax:\n    content: public bool Maximizable { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window can be maximized; otherwise `false`.'\n  overload: System.Windows.Automation.Provider.IWindowProvider.Maximizable*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  commentId: P:System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  id: Minimizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: Minimizable\n  nameWithType: IWindowProvider.Minimizable\n  fullName: IWindowProvider.Minimizable\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets a value that specifies whether the window can be minimized.\n  syntax:\n    content: public bool Minimizable { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window can be minimized; otherwise `false`.'\n  overload: System.Windows.Automation.Provider.IWindowProvider.Minimizable*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)\n  commentId: M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)\n  id: SetVisualState(System.Windows.Automation.WindowVisualState)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: SetVisualState(WindowVisualState)\n  nameWithType: IWindowProvider.SetVisualState(WindowVisualState)\n  fullName: IWindowProvider.SetVisualState(WindowVisualState)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Changes the visual state of the window. For example, minimizes or maximizes it.\n  syntax:\n    content: public void SetVisualState (System.Windows.Automation.WindowVisualState state);\n    parameters:\n    - id: state\n      type: System.Windows.Automation.WindowVisualState\n      description: The requested visual state of the window.\n  overload: System.Windows.Automation.Provider.IWindowProvider.SetVisualState*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: When the control does not support the requested behavior.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState\n  commentId: P:System.Windows.Automation.Provider.IWindowProvider.VisualState\n  id: VisualState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: VisualState\n  nameWithType: IWindowProvider.VisualState\n  fullName: IWindowProvider.VisualState\n  type: Property\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Gets the visual state of the window.\n  syntax:\n    content: public System.Windows.Automation.WindowVisualState VisualState { get; }\n    return:\n      type: System.Windows.Automation.WindowVisualState\n      description: The visual state of the window.\n  overload: System.Windows.Automation.Provider.IWindowProvider.VisualState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\n- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)\n  commentId: M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)\n  id: WaitForInputIdle(System.Int32)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  langs:\n  - csharp\n  name: WaitForInputIdle(Int32)\n  nameWithType: IWindowProvider.WaitForInputIdle(Int32)\n  fullName: IWindowProvider.WaitForInputIdle(Int32)\n  type: Method\n  assemblies:\n  - UIAutomationProvider\n  namespace: System.Windows.Automation.Provider\n  summary: Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.\n  remarks: \"This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.  \\n  \\n The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input. The calling code should not rely on this method to ascertain exactly when the window has become idle.\"\n  syntax:\n    content: public bool WaitForInputIdle (int milliseconds);\n    parameters:\n    - id: milliseconds\n      type: System.Int32\n      description: The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <xref href=\"System.Int32.MaxValue\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the window has entered the idle state; `false` if the timeout occurred.'\n  overload: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: When the parameter passed in is not a valid number.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n  ms.technology:\n  - dotnet-wpf\n  author: Xansky\n  ms.author: mhopkins\n  manager: markl\nreferences:\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Windows.Automation.ElementNotAvailableException\n  parent: System.Windows.Automation\n  isExternal: false\n  name: ElementNotAvailableException\n  nameWithType: ElementNotAvailableException\n  fullName: System.Windows.Automation.ElementNotAvailableException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Windows.Automation.Provider.IWindowProvider.Close\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Close()\n  nameWithType: IWindowProvider.Close()\n  fullName: IWindowProvider.Close()\n- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: InteractionState\n  nameWithType: IWindowProvider.InteractionState\n  fullName: IWindowProvider.InteractionState\n- uid: System.Windows.Automation.WindowInteractionState\n  parent: System.Windows.Automation\n  isExternal: false\n  name: WindowInteractionState\n  nameWithType: WindowInteractionState\n  fullName: System.Windows.Automation.WindowInteractionState\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsModal\n  nameWithType: IWindowProvider.IsModal\n  fullName: IWindowProvider.IsModal\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsTopmost\n  nameWithType: IWindowProvider.IsTopmost\n  fullName: IWindowProvider.IsTopmost\n- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Maximizable\n  nameWithType: IWindowProvider.Maximizable\n  fullName: IWindowProvider.Maximizable\n- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Minimizable\n  nameWithType: IWindowProvider.Minimizable\n  fullName: IWindowProvider.Minimizable\n- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: SetVisualState(WindowVisualState)\n  nameWithType: IWindowProvider.SetVisualState(WindowVisualState)\n  fullName: IWindowProvider.SetVisualState(WindowVisualState)\n- uid: System.Windows.Automation.WindowVisualState\n  parent: System.Windows.Automation\n  isExternal: false\n  name: WindowVisualState\n  nameWithType: WindowVisualState\n  fullName: System.Windows.Automation.WindowVisualState\n- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: VisualState\n  nameWithType: IWindowProvider.VisualState\n  fullName: IWindowProvider.VisualState\n- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: WaitForInputIdle(Int32)\n  nameWithType: IWindowProvider.WaitForInputIdle(Int32)\n  fullName: IWindowProvider.WaitForInputIdle(Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Automation.Provider.IWindowProvider.Close*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Close\n  nameWithType: IWindowProvider.Close\n  fullName: IWindowProvider.Close\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.InteractionState*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: InteractionState\n  nameWithType: IWindowProvider.InteractionState\n  fullName: IWindowProvider.InteractionState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsModal*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsModal\n  nameWithType: IWindowProvider.IsModal\n  fullName: IWindowProvider.IsModal\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.IsTopmost*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: IsTopmost\n  nameWithType: IWindowProvider.IsTopmost\n  fullName: IWindowProvider.IsTopmost\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.Maximizable*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Maximizable\n  nameWithType: IWindowProvider.Maximizable\n  fullName: IWindowProvider.Maximizable\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.Minimizable*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: Minimizable\n  nameWithType: IWindowProvider.Minimizable\n  fullName: IWindowProvider.Minimizable\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.SetVisualState*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: SetVisualState\n  nameWithType: IWindowProvider.SetVisualState\n  fullName: IWindowProvider.SetVisualState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.VisualState*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: VisualState\n  nameWithType: IWindowProvider.VisualState\n  fullName: IWindowProvider.VisualState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n- uid: System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle*\n  parent: System.Windows.Automation.Provider.IWindowProvider\n  isExternal: false\n  name: WaitForInputIdle\n  nameWithType: IWindowProvider.WaitForInputIdle\n  fullName: IWindowProvider.WaitForInputIdle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Automation.Provider/IWindowProvider.xml\n"}