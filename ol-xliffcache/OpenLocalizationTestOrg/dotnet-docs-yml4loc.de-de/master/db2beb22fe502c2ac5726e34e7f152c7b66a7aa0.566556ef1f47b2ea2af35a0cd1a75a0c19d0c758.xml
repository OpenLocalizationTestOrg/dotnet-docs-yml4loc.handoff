{"nodes":[{"content":"Provides desktop-specific features not available to Windows Store apps or other environments.","nodes":[{"pos":[0,93],"content":"Provides desktop-specific features not available to Windows Store apps or other environments.","nodes":[{"content":"Provides desktop-specific features not available to Windows Store apps or other environments.","pos":[0,93]}]}],"pos":[1028,1122],"yaml":true},{"content":"This class implements a transport handler using <xref:System.Net.HttpWebRequest> instances to send HTTP requests to servers.","nodes":[{"pos":[0,124],"content":"This class implements a transport handler using <xref:System.Net.HttpWebRequest> instances to send HTTP requests to servers.","nodes":[{"content":"This class implements a transport handler using <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest&gt;</ph> instances to send HTTP requests to servers.","pos":[0,124],"source":"This class implements a transport handler using <xref:System.Net.HttpWebRequest> instances to send HTTP requests to servers."}]}],"pos":[1133,1258],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Net.Http.WebRequestHandler\"></xref> class.","nodes":[{"pos":[0,95],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Http.WebRequestHandler\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Net.Http.WebRequestHandler\"></xref> class."}],"pos":[4119,4215],"yaml":true},{"content":"Gets or sets a value that indicates whether to pipeline the request to the Internet resource.","nodes":[{"pos":[0,93],"content":"Gets or sets a value that indicates whether to pipeline the request to the Internet resource.","nodes":[{"content":"Gets or sets a value that indicates whether to pipeline the request to the Internet resource.","pos":[0,93]}]}],"pos":[5260,5354],"yaml":true},{"content":"An application uses the <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> property to indicate a preference for pipelined connections. When <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> is `true`, an application makes pipelined connections to the servers that support them.","nodes":[{"pos":[0,297],"content":"An application uses the <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> property to indicate a preference for pipelined connections. When <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> is `true`, an application makes pipelined connections to the servers that support them.","nodes":[{"content":"An application uses the <ph id=\"ph1\">&lt;xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A&gt;</ph> property to indicate a preference for pipelined connections.","pos":[0,144],"source":"An application uses the <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> property to indicate a preference for pipelined connections."},{"content":"When <ph id=\"ph1\">&lt;xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, an application makes pipelined connections to the servers that support them.","pos":[145,297],"source":" When <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> is `true`, an application makes pipelined connections to the servers that support them."}]}],"pos":[5365,5663],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` if the request should be pipelined; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,136],"content":"`true` if the request should be pipelined; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the request should be pipelined; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,62],"source":"`true` if the request should be pipelined; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[63,85],"source":" The default is `true`."}]}],"pos":[5786,5929],"yaml":true},{"content":"Gets or sets a value indicating the level of authentication and impersonation used for this request.","nodes":[{"pos":[0,100],"content":"Gets or sets a value indicating the level of authentication and impersonation used for this request.","nodes":[{"content":"Gets or sets a value indicating the level of authentication and impersonation used for this request.","pos":[0,100]}]}],"pos":[6937,7038],"yaml":true},{"content":"In mutual authentication, both the client and server present credentials to establish their identity. The <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> and <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> values are relevant for Kerberos authentication. Kerberos authentication can be supported directly, or can be used if the Negotiate security protocol is used to select the actual security protocol. For more information about authentication protocols, see [Internet Authentication](~/docs/framework/network-programming/internet-authentication.md).","nodes":[{"pos":[0,589],"content":"In mutual authentication, both the client and server present credentials to establish their identity. The <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> and <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> values are relevant for Kerberos authentication. Kerberos authentication can be supported directly, or can be used if the Negotiate security protocol is used to select the actual security protocol. For more information about authentication protocols, see [Internet Authentication](~/docs/framework/network-programming/internet-authentication.md).","nodes":[{"content":"In mutual authentication, both the client and server present credentials to establish their identity.","pos":[0,101]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested&gt;</ph> values are relevant for Kerberos authentication.","pos":[102,291],"source":" The <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> and <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> values are relevant for Kerberos authentication."},{"content":"Kerberos authentication can be supported directly, or can be used if the Negotiate security protocol is used to select the actual security protocol.","pos":[292,440]},{"content":"For more information about authentication protocols, see <bpt id=\"p1\">[</bpt>Internet Authentication<ept id=\"p1\">](~/docs/framework/network-programming/internet-authentication.md)</ept>.","pos":[441,589],"source":" For more information about authentication protocols, see [Internet Authentication](~/docs/framework/network-programming/internet-authentication.md)."}]}],"pos":[7049,7639],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Net.Security.AuthenticationLevel\"></xref>.  \n  \n A bitwise combination of the <xref href=\"System.Net.Security.AuthenticationLevel\"></xref> values.  The default value is <xref href=\"System.Net.Security.AuthenticationLevel.MutualAuthRequested\"></xref>.","nodes":[{"pos":[0,69],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.AuthenticationLevel\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Net.Security.AuthenticationLevel\"></xref>."},{"pos":[76,277],"content":"A bitwise combination of the <xref href=\"System.Net.Security.AuthenticationLevel\"></xref> values.  The default value is <xref href=\"System.Net.Security.AuthenticationLevel.MutualAuthRequested\"></xref>.","nodes":[{"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.AuthenticationLevel\"&gt;&lt;/xref&gt;</ph> values.","pos":[0,97],"source":"A bitwise combination of the <xref href=\"System.Net.Security.AuthenticationLevel\"></xref> values."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.AuthenticationLevel.MutualAuthRequested\"&gt;&lt;/xref&gt;</ph>.","pos":[99,201],"source":"  The default value is <xref href=\"System.Net.Security.AuthenticationLevel.MutualAuthRequested\"></xref>."}]}],"pos":[7826,8114],"yaml":true},{"content":"Gets or sets the cache policy for this request.","nodes":[{"pos":[0,47],"content":"Gets or sets the cache policy for this request.","nodes":[{"content":"Gets or sets the cache policy for this request.","pos":[0,47]}]}],"pos":[9078,9126],"yaml":true},{"content":"The current cache policy and the presence of the requested resource in the cache determine whether a response can be retrieved from the cache. Using cached responses usually improves application performance, but there is a risk that the response in the cache does not match the response on the server.  \n  \n The default cache policy can be specified in the Machine.config configuration file or by setting the <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> property.  \n  \n A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream. So another request for the same resource could use a cached copy, depending on the cache policy level for this request.","nodes":[{"pos":[0,301],"content":"The current cache policy and the presence of the requested resource in the cache determine whether a response can be retrieved from the cache. Using cached responses usually improves application performance, but there is a risk that the response in the cache does not match the response on the server.","nodes":[{"content":"The current cache policy and the presence of the requested resource in the cache determine whether a response can be retrieved from the cache. Using cached responses usually improves application performance, but there is a risk that the response in the cache does not match the response on the server.","pos":[0,301],"nodes":[{"content":"The current cache policy and the presence of the requested resource in the cache determine whether a response can be retrieved from the cache.","pos":[0,142]},{"content":"Using cached responses usually improves application performance, but there is a risk that the response in the cache does not match the response on the server.","pos":[143,301]}]}]},{"pos":[308,473],"content":"The default cache policy can be specified in the Machine.config configuration file or by setting the <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> property.","nodes":[{"content":"The default cache policy can be specified in the Machine.config configuration file or by setting the <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A&gt;</ph> property.","pos":[0,165],"source":"The default cache policy can be specified in the Machine.config configuration file or by setting the <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> property."}]},{"pos":[480,735],"content":"A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream. So another request for the same resource could use a cached copy, depending on the cache policy level for this request.","nodes":[{"content":"A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream. So another request for the same resource could use a cached copy, depending on the cache policy level for this request.","pos":[0,255],"nodes":[{"content":"A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream.","pos":[0,135]},{"content":"So another request for the same resource could use a cached copy, depending on the cache policy level for this request.","pos":[136,255]}]}]}],"pos":[9137,9879],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref>.  \n  \n A <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref> object that defines a cache policy. The default is <xref href=\"System.Net.WebRequest.DefaultCachePolicy\"></xref>.","nodes":[{"pos":[0,65],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Net.Cache.RequestCachePolicy\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref>."},{"pos":[72,244],"content":"A <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref> object that defines a cache policy. The default is <xref href=\"System.Net.WebRequest.DefaultCachePolicy\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Net.Cache.RequestCachePolicy\"&gt;&lt;/xref&gt;</ph> object that defines a cache policy.","pos":[0,94],"source":"A <xref href=\"System.Net.Cache.RequestCachePolicy\"></xref> object that defines a cache policy."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Net.WebRequest.DefaultCachePolicy\"&gt;&lt;/xref&gt;</ph>.","pos":[95,172],"source":" The default is <xref href=\"System.Net.WebRequest.DefaultCachePolicy\"></xref>."}]}],"pos":[10050,10305],"yaml":true},{"content":"Gets or sets the collection of security certificates that are associated with this request.","nodes":[{"pos":[0,91],"content":"Gets or sets the collection of security certificates that are associated with this request.","nodes":[{"content":"Gets or sets the collection of security certificates that are associated with this request.","pos":[0,91]}]}],"pos":[11303,11395],"yaml":true},{"content":"Returns <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref>.  \n  \n The collection of security certificates associated with this request.","nodes":[{"pos":[0,101],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\"></xref>."},{"pos":[108,177],"content":"The collection of security certificates associated with this request.","nodes":[{"content":"The collection of security certificates associated with this request.","pos":[0,69]}]}],"pos":[11640,11824],"yaml":true},{"content":"Gets or sets the amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.","nodes":[{"pos":[0,131],"content":"Gets or sets the amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.","nodes":[{"content":"Gets or sets the amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.","pos":[0,131]}]}],"pos":[12811,12943],"yaml":true},{"content":"Returns <xref href=\"System.TimeSpan\"></xref>.  \n  \n The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data. The default value is 350 milliseconds.","nodes":[{"pos":[0,45],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.TimeSpan\"></xref>."},{"pos":[52,209],"content":"The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data. The default value is 350 milliseconds.","nodes":[{"content":"The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data. The default value is 350 milliseconds.","pos":[0,157],"nodes":[{"content":"The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.","pos":[0,118]},{"content":"The default value is 350 milliseconds.","pos":[119,157]}]}]}],"pos":[13071,13287],"yaml":true},{"content":"Gets or sets the impersonation level for the current request.","nodes":[{"pos":[0,61],"content":"Gets or sets the impersonation level for the current request.","nodes":[{"content":"Gets or sets the impersonation level for the current request.","pos":[0,61]}]}],"pos":[14289,14351],"yaml":true},{"content":"The impersonation level determines how the server can use the client's credentials.","nodes":[{"pos":[0,83],"content":"The impersonation level determines how the server can use the client's credentials.","nodes":[{"content":"The impersonation level determines how the server can use the client's credentials.","pos":[0,83]}]}],"pos":[14362,14446],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref>.  \n  \n The impersonation level for the request. The default is <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>.","nodes":[{"pos":[0,79],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Security.Principal.TokenImpersonationLevel\"></xref>."},{"pos":[86,224],"content":"The impersonation level for the request. The default is <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>.","nodes":[{"content":"The impersonation level for the request.","pos":[0,40]},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"&gt;&lt;/xref&gt;</ph>.","pos":[41,138],"source":" The default is <xref href=\"System.Security.Principal.TokenImpersonationLevel.Delegation\"></xref>."}]}],"pos":[14652,14885],"yaml":true},{"content":"Gets or sets the maximum allowed length of the response headers.","nodes":[{"pos":[0,64],"content":"Gets or sets the maximum allowed length of the response headers.","nodes":[{"content":"Gets or sets the maximum allowed length of the response headers.","pos":[0,64]}]}],"pos":[15926,15991],"yaml":true},{"content":"The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.  \n  \n If the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property is not explicitly set, it defaults to the value of the <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> property.  \n  \n If the length of the response header received exceeds the value of the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property, an exception is thrown when the response is accessed.","nodes":[{"pos":[0,252],"content":"The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.","nodes":[{"content":"The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.","pos":[0,252],"nodes":[{"content":"The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol.","pos":[0,144]},{"content":"A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.","pos":[145,252]}]}]},{"pos":[259,480],"content":"If the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property is not explicitly set, it defaults to the value of the <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> property.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A&gt;</ph> property is not explicitly set, it defaults to the value of the <ph id=\"ph2\">&lt;xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A&gt;</ph> property.","pos":[0,221],"source":"If the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property is not explicitly set, it defaults to the value of the <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> property."}]},{"pos":[487,690],"content":"If the length of the response header received exceeds the value of the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property, an exception is thrown when the response is accessed.","nodes":[{"content":"If the length of the response header received exceeds the value of the <ph id=\"ph1\">&lt;xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A&gt;</ph> property, an exception is thrown when the response is accessed.","pos":[0,203],"source":"If the length of the response header received exceeds the value of the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property, an exception is thrown when the response is accessed."}]}],"pos":[16002,16699],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Int32\"></xref>.  \n  \n The length, in kilobytes (1024 bytes), of the response headers.","nodes":[{"pos":[0,42],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Int32\"></xref>."},{"pos":[49,112],"content":"The length, in kilobytes (1024 bytes), of the response headers.","nodes":[{"content":"The length, in kilobytes (1024 bytes), of the response headers.","pos":[0,63]}]}],"pos":[16828,16947],"yaml":true},{"content":"Gets or sets a time-out in milliseconds when writing a request to or reading a response from a server.","nodes":[{"pos":[0,102],"content":"Gets or sets a time-out in milliseconds when writing a request to or reading a response from a server.","nodes":[{"content":"Gets or sets a time-out in milliseconds when writing a request to or reading a response from a server.","pos":[0,102]}]}],"pos":[17946,18049],"yaml":true},{"content":"Returns <xref href=\"System.Int32\"></xref>.  \n  \n The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).","nodes":[{"pos":[0,42],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Int32\"></xref>."},{"pos":[49,171],"content":"The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).","nodes":[{"content":"The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).","pos":[0,122],"nodes":[{"content":"The number of milliseconds before the writing or reading times out.","pos":[0,67]},{"content":"The default value is 300,000 milliseconds (5 minutes).","pos":[68,122]}]}]}],"pos":[18170,18348],"yaml":true},{"content":"Gets or sets a callback method to validate the server certificate.","nodes":[{"pos":[0,66],"content":"Gets or sets a callback method to validate the server certificate.","nodes":[{"content":"Gets or sets a callback method to validate the server certificate.","pos":[0,66]}]}],"pos":[19453,19520],"yaml":true},{"content":"If the <xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A> is `null`, the server certificate will be validated using standard well-known  certificate authorities.","nodes":[{"pos":[0,190],"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A&gt;</ph> is <ph id=\"ph2\">`null`</ph>, the server certificate will be validated using standard well-known  certificate authorities.","source":"If the <xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A> is `null`, the server certificate will be validated using standard well-known  certificate authorities."}],"pos":[19531,19722],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref>.  \n  \n A callback method to validate the server certificate.","nodes":[{"pos":[0,85],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Net.Security.RemoteCertificateValidationCallback\"></xref>."},{"pos":[92,145],"content":"A callback method to validate the server certificate.","nodes":[{"content":"A callback method to validate the server certificate.","pos":[0,53]}]}],"pos":[19957,20109],"yaml":true},{"content":"Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.","nodes":[{"pos":[0,102],"content":"Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.","nodes":[{"content":"Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.","pos":[0,102]}]}],"pos":[21239,21342],"yaml":true},{"content":"The default value for this property is `false`, which causes the current connection to be closed after a request is completed. Your application must go through the authentication sequence every time it issues a new request.If this property is set to `true`, the connection used to retrieve the response remains open after the authentication has been performed. In this case, other requests that have this property set to `true` may use the connection without re-authenticating. In other words, if a connection has been authenticated for user A, user B may reuse A's connection; user B's request is fulfilled based on the credentials of user A.  \n  \n> [!CAUTION]\n>  Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`. If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below.  \n  \n You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.  \n  \n Enabling this setting opens the system to security risks. If you set the <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> property to `true` be sure to take the following precautions:  \n  \n-   Run your application in a protected environment to help avoid possible connection exploits.  \n  \n If you control the back-end server, as an alternative you might consider turning off authentication persistence. This increases performance to a lesser degree, but it is safer. For more details, search for AuthPersistence in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).","nodes":[{"pos":[0,643],"content":"The default value for this property is `false`, which causes the current connection to be closed after a request is completed. Your application must go through the authentication sequence every time it issues a new request.If this property is set to `true`, the connection used to retrieve the response remains open after the authentication has been performed. In this case, other requests that have this property set to `true` may use the connection without re-authenticating. In other words, if a connection has been authenticated for user A, user B may reuse A's connection; user B's request is fulfilled based on the credentials of user A.","nodes":[{"content":"The default value for this property is <ph id=\"ph1\">`false`</ph>, which causes the current connection to be closed after a request is completed.","pos":[0,126],"source":"The default value for this property is `false`, which causes the current connection to be closed after a request is completed."},{"content":"Your application must go through the authentication sequence every time it issues a new request.If this property is set to <ph id=\"ph1\">`true`</ph>, the connection used to retrieve the response remains open after the authentication has been performed.","pos":[127,360],"source":" Your application must go through the authentication sequence every time it issues a new request.If this property is set to `true`, the connection used to retrieve the response remains open after the authentication has been performed."},{"content":"In this case, other requests that have this property set to <ph id=\"ph1\">`true`</ph> may use the connection without re-authenticating.","pos":[361,477],"source":" In this case, other requests that have this property set to `true` may use the connection without re-authenticating."},{"content":"In other words, if a connection has been authenticated for user A, user B may reuse A's connection; user B's request is fulfilled based on the credentials of user A.","pos":[478,643]}]},{"pos":[651,1107],"content":"[!CAUTION]\n Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`. If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below.","leadings":["","> "],"nodes":[{"content":" Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`. If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below.","pos":[11,454],"nodes":[{"content":"Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to <ph id=\"ph1\">`true`</ph>.","pos":[1,212],"source":" Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`."},{"content":"If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to <ph id=\"ph1\">`true`</ph> unless you use connection groups as described below.","pos":[213,443],"source":" If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below."}]}]},{"pos":[1114,1290],"content":"You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.","nodes":[{"content":"You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.","pos":[0,176]}]},{"pos":[1297,1504],"content":"Enabling this setting opens the system to security risks. If you set the <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> property to `true` be sure to take the following precautions:","nodes":[{"content":"Enabling this setting opens the system to security risks.","pos":[0,57]},{"content":"If you set the <ph id=\"ph1\">&lt;xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A&gt;</ph> property to <ph id=\"ph2\">`true`</ph> be sure to take the following precautions:","pos":[58,207],"source":" If you set the <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> property to `true` be sure to take the following precautions:"}]},{"pos":[1514,1605],"content":"Run your application in a protected environment to help avoid possible connection exploits.","nodes":[{"content":"Run your application in a protected environment to help avoid possible connection exploits.","pos":[0,91]}]},{"pos":[1612,1928],"content":"If you control the back-end server, as an alternative you might consider turning off authentication persistence. This increases performance to a lesser degree, but it is safer. For more details, search for AuthPersistence in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).","nodes":[{"content":"If you control the back-end server, as an alternative you might consider turning off authentication persistence.","pos":[0,112]},{"content":"This increases performance to a lesser degree, but it is safer.","pos":[113,176]},{"content":"For more details, search for AuthPersistence in the MSDN library at <bpt id=\"p1\">[</bpt>http://msdn.microsoft.com/library<ept id=\"p1\">](http://msdn.microsoft.com/library)</ept>.","pos":[177,316],"source":" For more details, search for AuthPersistence in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)."}]}],"pos":[21353,23295],"yaml":true,"extradata":"MT"},{"content":"Returns <xref href=\"System.Boolean\"></xref>.  \n  \n `true` to keep the authenticated connection open; otherwise, `false`.","nodes":[{"pos":[0,44],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Boolean\"></xref>."},{"pos":[51,120],"content":"<ph id=\"ph1\">`true`</ph> to keep the authenticated connection open; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to keep the authenticated connection open; otherwise, `false`."}],"pos":[23499,23626],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Http.WebRequestHandler\n  commentId: T:System.Net.Http.WebRequestHandler\n  id: WebRequestHandler\n  children:\n  - System.Net.Http.WebRequestHandler.#ctor\n  - System.Net.Http.WebRequestHandler.AllowPipelining\n  - System.Net.Http.WebRequestHandler.AuthenticationLevel\n  - System.Net.Http.WebRequestHandler.CachePolicy\n  - System.Net.Http.WebRequestHandler.ClientCertificates\n  - System.Net.Http.WebRequestHandler.ContinueTimeout\n  - System.Net.Http.WebRequestHandler.ImpersonationLevel\n  - System.Net.Http.WebRequestHandler.MaxResponseHeadersLength\n  - System.Net.Http.WebRequestHandler.ReadWriteTimeout\n  - System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback\n  - System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  langs:\n  - csharp\n  name: WebRequestHandler\n  nameWithType: WebRequestHandler\n  fullName: System.Net.Http.WebRequestHandler\n  type: Class\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Provides desktop-specific features not available to Windows Store apps or other environments.\n  remarks: This class implements a transport handler using <xref:System.Net.HttpWebRequest> instances to send HTTP requests to servers.\n  syntax:\n    content: 'public class WebRequestHandler : System.Net.Http.HttpClientHandler'\n  inheritance:\n  - System.Object\n  - System.Net.Http.HttpMessageHandler\n  - System.Net.Http.HttpClientHandler\n  implements: []\n  inheritedMembers:\n  - System.Net.Http.HttpClientHandler.AllowAutoRedirect\n  - System.Net.Http.HttpClientHandler.AutomaticDecompression\n  - System.Net.Http.HttpClientHandler.CheckCertificateRevocationList\n  - System.Net.Http.HttpClientHandler.ClientCertificateOptions\n  - System.Net.Http.HttpClientHandler.CookieContainer\n  - System.Net.Http.HttpClientHandler.Credentials\n  - System.Net.Http.HttpClientHandler.DefaultProxyCredentials\n  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)\n  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\n  - System.Net.Http.HttpClientHandler.MaxConnectionsPerServer\n  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\n  - System.Net.Http.HttpClientHandler.PreAuthenticate\n  - System.Net.Http.HttpClientHandler.Properties\n  - System.Net.Http.HttpClientHandler.Proxy\n  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback\n  - System.Net.Http.HttpClientHandler.SslProtocols\n  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression\n  - System.Net.Http.HttpClientHandler.SupportsProxy\n  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration\n  - System.Net.Http.HttpClientHandler.UseCookies\n  - System.Net.Http.HttpClientHandler.UseDefaultCredentials\n  - System.Net.Http.HttpClientHandler.UseProxy\n  - System.Net.Http.HttpMessageHandler.Dispose\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.#ctor\n  commentId: M:System.Net.Http.WebRequestHandler.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: WebRequestHandler()\n  nameWithType: WebRequestHandler.WebRequestHandler()\n  fullName: WebRequestHandler.WebRequestHandler()\n  type: Constructor\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Initializes a new instance of the <xref href=\"System.Net.Http.WebRequestHandler\"></xref> class.\n  syntax:\n    content: public WebRequestHandler ();\n    parameters: []\n  overload: System.Net.Http.WebRequestHandler.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.AllowPipelining\n  commentId: P:System.Net.Http.WebRequestHandler.AllowPipelining\n  id: AllowPipelining\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: AllowPipelining\n  nameWithType: WebRequestHandler.AllowPipelining\n  fullName: WebRequestHandler.AllowPipelining\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets a value that indicates whether to pipeline the request to the Internet resource.\n  remarks: An application uses the <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> property to indicate a preference for pipelined connections. When <xref:System.Net.Http.WebRequestHandler.AllowPipelining%2A> is `true`, an application makes pipelined connections to the servers that support them.\n  syntax:\n    content: public bool AllowPipelining { get; set; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n `true` if the request should be pipelined; otherwise, `false`. The default is `true`.\"\n  overload: System.Net.Http.WebRequestHandler.AllowPipelining*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel\n  commentId: P:System.Net.Http.WebRequestHandler.AuthenticationLevel\n  id: AuthenticationLevel\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: AuthenticationLevel\n  nameWithType: WebRequestHandler.AuthenticationLevel\n  fullName: WebRequestHandler.AuthenticationLevel\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets a value indicating the level of authentication and impersonation used for this request.\n  remarks: In mutual authentication, both the client and server present credentials to establish their identity. The <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequired> and <xref:System.Net.Security.AuthenticationLevel.MutualAuthRequested> values are relevant for Kerberos authentication. Kerberos authentication can be supported directly, or can be used if the Negotiate security protocol is used to select the actual security protocol. For more information about authentication protocols, see [Internet Authentication](~/docs/framework/network-programming/internet-authentication.md).\n  syntax:\n    content: public System.Net.Security.AuthenticationLevel AuthenticationLevel { get; set; }\n    return:\n      type: System.Net.Security.AuthenticationLevel\n      description: \"Returns <xref href=\\\"System.Net.Security.AuthenticationLevel\\\"></xref>.  \\n  \\n A bitwise combination of the <xref href=\\\"System.Net.Security.AuthenticationLevel\\\"></xref> values.  The default value is <xref href=\\\"System.Net.Security.AuthenticationLevel.MutualAuthRequested\\\"></xref>.\"\n  overload: System.Net.Http.WebRequestHandler.AuthenticationLevel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.CachePolicy\n  commentId: P:System.Net.Http.WebRequestHandler.CachePolicy\n  id: CachePolicy\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: CachePolicy\n  nameWithType: WebRequestHandler.CachePolicy\n  fullName: WebRequestHandler.CachePolicy\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets the cache policy for this request.\n  remarks: \"The current cache policy and the presence of the requested resource in the cache determine whether a response can be retrieved from the cache. Using cached responses usually improves application performance, but there is a risk that the response in the cache does not match the response on the server.  \\n  \\n The default cache policy can be specified in the Machine.config configuration file or by setting the <xref:System.Net.HttpWebRequest.DefaultCachePolicy%2A> property.  \\n  \\n A copy of a resource is only added to the cache if the response stream for the resource is retrieved and read to the end of the stream. So another request for the same resource could use a cached copy, depending on the cache policy level for this request.\"\n  syntax:\n    content: public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }\n    return:\n      type: System.Net.Cache.RequestCachePolicy\n      description: \"Returns <xref href=\\\"System.Net.Cache.RequestCachePolicy\\\"></xref>.  \\n  \\n A <xref href=\\\"System.Net.Cache.RequestCachePolicy\\\"></xref> object that defines a cache policy. The default is <xref href=\\\"System.Net.WebRequest.DefaultCachePolicy\\\"></xref>.\"\n  overload: System.Net.Http.WebRequestHandler.CachePolicy*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.ClientCertificates\n  commentId: P:System.Net.Http.WebRequestHandler.ClientCertificates\n  id: ClientCertificates\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: ClientCertificates\n  nameWithType: WebRequestHandler.ClientCertificates\n  fullName: WebRequestHandler.ClientCertificates\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets the collection of security certificates that are associated with this request.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509CertificateCollection ClientCertificates { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n      description: \"Returns <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\"></xref>.  \\n  \\n The collection of security certificates associated with this request.\"\n  overload: System.Net.Http.WebRequestHandler.ClientCertificates*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.ContinueTimeout\n  commentId: P:System.Net.Http.WebRequestHandler.ContinueTimeout\n  id: ContinueTimeout\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: ContinueTimeout\n  nameWithType: WebRequestHandler.ContinueTimeout\n  fullName: WebRequestHandler.ContinueTimeout\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets the amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data.\n  syntax:\n    content: public TimeSpan ContinueTimeout { get; set; }\n    return:\n      type: System.TimeSpan\n      description: \"Returns <xref href=\\\"System.TimeSpan\\\"></xref>.  \\n  \\n The amount of time, in milliseconds, the application will wait for 100-continue from the server before uploading data. The default value is 350 milliseconds.\"\n  overload: System.Net.Http.WebRequestHandler.ContinueTimeout*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel\n  commentId: P:System.Net.Http.WebRequestHandler.ImpersonationLevel\n  id: ImpersonationLevel\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: ImpersonationLevel\n  nameWithType: WebRequestHandler.ImpersonationLevel\n  fullName: WebRequestHandler.ImpersonationLevel\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets the impersonation level for the current request.\n  remarks: The impersonation level determines how the server can use the client's credentials.\n  syntax:\n    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; set; }\n    return:\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: \"Returns <xref href=\\\"System.Security.Principal.TokenImpersonationLevel\\\"></xref>.  \\n  \\n The impersonation level for the request. The default is <xref href=\\\"System.Security.Principal.TokenImpersonationLevel.Delegation\\\"></xref>.\"\n  overload: System.Net.Http.WebRequestHandler.ImpersonationLevel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength\n  commentId: P:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength\n  id: MaxResponseHeadersLength\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: MaxResponseHeadersLength\n  nameWithType: WebRequestHandler.MaxResponseHeadersLength\n  fullName: WebRequestHandler.MaxResponseHeadersLength\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets the maximum allowed length of the response headers.\n  remarks: \"The length of the response header includes the response status line and any extra control characters that are received as part of HTTP protocol. A value of -1 means no limit is imposed on the response headers; a value of 0 means that all requests fail.  \\n  \\n If the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property is not explicitly set, it defaults to the value of the <xref:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength%2A> property.  \\n  \\n If the length of the response header received exceeds the value of the <xref:System.Net.Http.WebRequestHandler.MaxResponseHeadersLength%2A> property, an exception is thrown when the response is accessed.\"\n  syntax:\n    content: public int MaxResponseHeadersLength { get; set; }\n    return:\n      type: System.Int32\n      description: \"Returns <xref href=\\\"System.Int32\\\"></xref>.  \\n  \\n The length, in kilobytes (1024 bytes), of the response headers.\"\n  overload: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout\n  commentId: P:System.Net.Http.WebRequestHandler.ReadWriteTimeout\n  id: ReadWriteTimeout\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: ReadWriteTimeout\n  nameWithType: WebRequestHandler.ReadWriteTimeout\n  fullName: WebRequestHandler.ReadWriteTimeout\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets a time-out in milliseconds when writing a request to or reading a response from a server.\n  syntax:\n    content: public int ReadWriteTimeout { get; set; }\n    return:\n      type: System.Int32\n      description: \"Returns <xref href=\\\"System.Int32\\\"></xref>.  \\n  \\n The number of milliseconds before the writing or reading times out. The default value is 300,000 milliseconds (5 minutes).\"\n  overload: System.Net.Http.WebRequestHandler.ReadWriteTimeout*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback\n  commentId: P:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback\n  id: ServerCertificateValidationCallback\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: ServerCertificateValidationCallback\n  nameWithType: WebRequestHandler.ServerCertificateValidationCallback\n  fullName: WebRequestHandler.ServerCertificateValidationCallback\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets a callback method to validate the server certificate.\n  remarks: If the <xref:System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback%2A> is `null`, the server certificate will be validated using standard well-known  certificate authorities.\n  syntax:\n    content: public System.Net.Security.RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; set; }\n    return:\n      type: System.Net.Security.RemoteCertificateValidationCallback\n      description: \"Returns <xref href=\\\"System.Net.Security.RemoteCertificateValidationCallback\\\"></xref>.  \\n  \\n A callback method to validate the server certificate.\"\n  overload: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  commentId: P:System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  id: UnsafeAuthenticatedConnectionSharing\n  parent: System.Net.Http.WebRequestHandler\n  langs:\n  - csharp\n  name: UnsafeAuthenticatedConnectionSharing\n  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  fullName: WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  type: Property\n  assemblies:\n  - System.Net.Http.WebRequest\n  namespace: System.Net.Http\n  summary: Gets or sets a value that indicates whether to allow high-speed NTLM-authenticated connection sharing.\n  remarks: \"The default value for this property is `false`, which causes the current connection to be closed after a request is completed. Your application must go through the authentication sequence every time it issues a new request.If this property is set to `true`, the connection used to retrieve the response remains open after the authentication has been performed. In this case, other requests that have this property set to `true` may use the connection without re-authenticating. In other words, if a connection has been authenticated for user A, user B may reuse A's connection; user B's request is fulfilled based on the credentials of user A.  \\n  \\n> [!CAUTION]\\n>  Because it is possible for an application to use the connection without being authenticated, you need to be sure that there is no administrative vulnerability in your system when setting this property to `true`. If your application sends requests for multiple users (impersonates multiple user accounts) and relies on authentication to protect resources, do not set this property to `true` unless you use connection groups as described below.  \\n  \\n You may want to consider enabling this mechanism if your are having performance problems and your application is running on a Web server with integrated Windows authentication.  \\n  \\n Enabling this setting opens the system to security risks. If you set the <xref:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing%2A> property to `true` be sure to take the following precautions:  \\n  \\n-   Run your application in a protected environment to help avoid possible connection exploits.  \\n  \\n If you control the back-end server, as an alternative you might consider turning off authentication persistence. This increases performance to a lesser degree, but it is safer. For more details, search for AuthPersistence in the MSDN library at [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).\"\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public bool UnsafeAuthenticatedConnectionSharing { get; set; }\n    return:\n      type: System.Boolean\n      description: \"Returns <xref href=\\\"System.Boolean\\\"></xref>.  \\n  \\n `true` to keep the authenticated connection open; otherwise, `false`.\"\n  overload: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*\n  exceptions: []\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Net.Http.HttpClientHandler\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpClientHandler\n  nameWithType: HttpClientHandler\n  fullName: System.Net.Http.HttpClientHandler\n- uid: System.Net.Http.WebRequestHandler.#ctor\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: WebRequestHandler()\n  nameWithType: WebRequestHandler.WebRequestHandler()\n  fullName: WebRequestHandler.WebRequestHandler()\n- uid: System.Net.Http.WebRequestHandler.AllowPipelining\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: AllowPipelining\n  nameWithType: WebRequestHandler.AllowPipelining\n  fullName: WebRequestHandler.AllowPipelining\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: AuthenticationLevel\n  nameWithType: WebRequestHandler.AuthenticationLevel\n  fullName: WebRequestHandler.AuthenticationLevel\n- uid: System.Net.Security.AuthenticationLevel\n  parent: System.Net.Security\n  isExternal: false\n  name: AuthenticationLevel\n  nameWithType: AuthenticationLevel\n  fullName: System.Net.Security.AuthenticationLevel\n- uid: System.Net.Http.WebRequestHandler.CachePolicy\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: CachePolicy\n  nameWithType: WebRequestHandler.CachePolicy\n  fullName: WebRequestHandler.CachePolicy\n- uid: System.Net.Cache.RequestCachePolicy\n  parent: System.Net.Cache\n  isExternal: false\n  name: RequestCachePolicy\n  nameWithType: RequestCachePolicy\n  fullName: System.Net.Cache.RequestCachePolicy\n- uid: System.Net.Http.WebRequestHandler.ClientCertificates\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ClientCertificates\n  nameWithType: WebRequestHandler.ClientCertificates\n  fullName: WebRequestHandler.ClientCertificates\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509CertificateCollection\n  nameWithType: X509CertificateCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n- uid: System.Net.Http.WebRequestHandler.ContinueTimeout\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ContinueTimeout\n  nameWithType: WebRequestHandler.ContinueTimeout\n  fullName: WebRequestHandler.ContinueTimeout\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: WebRequestHandler.ImpersonationLevel\n  fullName: WebRequestHandler.ImpersonationLevel\n- uid: System.Security.Principal.TokenImpersonationLevel\n  parent: System.Security.Principal\n  isExternal: false\n  name: TokenImpersonationLevel\n  nameWithType: TokenImpersonationLevel\n  fullName: System.Security.Principal.TokenImpersonationLevel\n- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: MaxResponseHeadersLength\n  nameWithType: WebRequestHandler.MaxResponseHeadersLength\n  fullName: WebRequestHandler.MaxResponseHeadersLength\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ReadWriteTimeout\n  nameWithType: WebRequestHandler.ReadWriteTimeout\n  fullName: WebRequestHandler.ReadWriteTimeout\n- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ServerCertificateValidationCallback\n  nameWithType: WebRequestHandler.ServerCertificateValidationCallback\n  fullName: WebRequestHandler.ServerCertificateValidationCallback\n- uid: System.Net.Security.RemoteCertificateValidationCallback\n  parent: System.Net.Security\n  isExternal: false\n  name: RemoteCertificateValidationCallback\n  nameWithType: RemoteCertificateValidationCallback\n  fullName: System.Net.Security.RemoteCertificateValidationCallback\n- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: UnsafeAuthenticatedConnectionSharing\n  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  fullName: WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n- uid: System.Net.Http.WebRequestHandler.#ctor*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: WebRequestHandler\n  nameWithType: WebRequestHandler.WebRequestHandler\n  fullName: WebRequestHandler.WebRequestHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.AllowPipelining*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: AllowPipelining\n  nameWithType: WebRequestHandler.AllowPipelining\n  fullName: WebRequestHandler.AllowPipelining\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.AuthenticationLevel*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: AuthenticationLevel\n  nameWithType: WebRequestHandler.AuthenticationLevel\n  fullName: WebRequestHandler.AuthenticationLevel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.CachePolicy*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: CachePolicy\n  nameWithType: WebRequestHandler.CachePolicy\n  fullName: WebRequestHandler.CachePolicy\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.ClientCertificates*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ClientCertificates\n  nameWithType: WebRequestHandler.ClientCertificates\n  fullName: WebRequestHandler.ClientCertificates\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.ContinueTimeout*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ContinueTimeout\n  nameWithType: WebRequestHandler.ContinueTimeout\n  fullName: WebRequestHandler.ContinueTimeout\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.ImpersonationLevel*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ImpersonationLevel\n  nameWithType: WebRequestHandler.ImpersonationLevel\n  fullName: WebRequestHandler.ImpersonationLevel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.MaxResponseHeadersLength*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: MaxResponseHeadersLength\n  nameWithType: WebRequestHandler.MaxResponseHeadersLength\n  fullName: WebRequestHandler.MaxResponseHeadersLength\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.ReadWriteTimeout*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ReadWriteTimeout\n  nameWithType: WebRequestHandler.ReadWriteTimeout\n  fullName: WebRequestHandler.ReadWriteTimeout\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.ServerCertificateValidationCallback*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: ServerCertificateValidationCallback\n  nameWithType: WebRequestHandler.ServerCertificateValidationCallback\n  fullName: WebRequestHandler.ServerCertificateValidationCallback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Net.Http.WebRequestHandler.UnsafeAuthenticatedConnectionSharing*\n  parent: System.Net.Http.WebRequestHandler\n  isExternal: false\n  name: UnsafeAuthenticatedConnectionSharing\n  nameWithType: WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  fullName: WebRequestHandler.UnsafeAuthenticatedConnectionSharing\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net.Http/WebRequestHandler.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Net.Http.HttpMessageHandler.Dispose\n  parent: System.Net.Http.HttpMessageHandler\n  isExternal: false\n  name: Dispose()\n  nameWithType: HttpMessageHandler.Dispose()\n  fullName: HttpMessageHandler.Dispose()\n- uid: System.Net.Http.HttpClientHandler.Dispose(System.Boolean)\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: HttpClientHandler.Dispose(Boolean)\n  fullName: HttpClientHandler.Dispose(Boolean)\n- uid: System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  nameWithType: HttpClientHandler.SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: HttpClientHandler.SendAsync(HttpRequestMessage, CancellationToken)\n- uid: System.Net.Http.HttpClientHandler.AllowAutoRedirect\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: AllowAutoRedirect\n  nameWithType: HttpClientHandler.AllowAutoRedirect\n  fullName: HttpClientHandler.AllowAutoRedirect\n- uid: System.Net.Http.HttpClientHandler.AutomaticDecompression\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: AutomaticDecompression\n  nameWithType: HttpClientHandler.AutomaticDecompression\n  fullName: HttpClientHandler.AutomaticDecompression\n- uid: System.Net.Http.HttpClientHandler.CheckCertificateRevocationList\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: CheckCertificateRevocationList\n  nameWithType: HttpClientHandler.CheckCertificateRevocationList\n  fullName: HttpClientHandler.CheckCertificateRevocationList\n- uid: System.Net.Http.HttpClientHandler.ClientCertificateOptions\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: ClientCertificateOptions\n  nameWithType: HttpClientHandler.ClientCertificateOptions\n  fullName: HttpClientHandler.ClientCertificateOptions\n- uid: System.Net.Http.HttpClientHandler.CookieContainer\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: CookieContainer\n  nameWithType: HttpClientHandler.CookieContainer\n  fullName: HttpClientHandler.CookieContainer\n- uid: System.Net.Http.HttpClientHandler.Credentials\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: Credentials\n  nameWithType: HttpClientHandler.Credentials\n  fullName: HttpClientHandler.Credentials\n- uid: System.Net.Http.HttpClientHandler.DefaultProxyCredentials\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: DefaultProxyCredentials\n  nameWithType: HttpClientHandler.DefaultProxyCredentials\n  fullName: HttpClientHandler.DefaultProxyCredentials\n- uid: System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: MaxAutomaticRedirections\n  nameWithType: HttpClientHandler.MaxAutomaticRedirections\n  fullName: HttpClientHandler.MaxAutomaticRedirections\n- uid: System.Net.Http.HttpClientHandler.MaxConnectionsPerServer\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: MaxConnectionsPerServer\n  nameWithType: HttpClientHandler.MaxConnectionsPerServer\n  fullName: HttpClientHandler.MaxConnectionsPerServer\n- uid: System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: MaxRequestContentBufferSize\n  nameWithType: HttpClientHandler.MaxRequestContentBufferSize\n  fullName: HttpClientHandler.MaxRequestContentBufferSize\n- uid: System.Net.Http.HttpClientHandler.PreAuthenticate\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: PreAuthenticate\n  nameWithType: HttpClientHandler.PreAuthenticate\n  fullName: HttpClientHandler.PreAuthenticate\n- uid: System.Net.Http.HttpClientHandler.Properties\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: Properties\n  nameWithType: HttpClientHandler.Properties\n  fullName: HttpClientHandler.Properties\n- uid: System.Net.Http.HttpClientHandler.Proxy\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: Proxy\n  nameWithType: HttpClientHandler.Proxy\n  fullName: HttpClientHandler.Proxy\n- uid: System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: ServerCertificateCustomValidationCallback\n  nameWithType: HttpClientHandler.ServerCertificateCustomValidationCallback\n  fullName: HttpClientHandler.ServerCertificateCustomValidationCallback\n- uid: System.Net.Http.HttpClientHandler.SslProtocols\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: SslProtocols\n  nameWithType: HttpClientHandler.SslProtocols\n  fullName: HttpClientHandler.SslProtocols\n- uid: System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: SupportsAutomaticDecompression\n  nameWithType: HttpClientHandler.SupportsAutomaticDecompression\n  fullName: HttpClientHandler.SupportsAutomaticDecompression\n- uid: System.Net.Http.HttpClientHandler.SupportsProxy\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: SupportsProxy\n  nameWithType: HttpClientHandler.SupportsProxy\n  fullName: HttpClientHandler.SupportsProxy\n- uid: System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: SupportsRedirectConfiguration\n  nameWithType: HttpClientHandler.SupportsRedirectConfiguration\n  fullName: HttpClientHandler.SupportsRedirectConfiguration\n- uid: System.Net.Http.HttpClientHandler.UseCookies\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: UseCookies\n  nameWithType: HttpClientHandler.UseCookies\n  fullName: HttpClientHandler.UseCookies\n- uid: System.Net.Http.HttpClientHandler.UseDefaultCredentials\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: UseDefaultCredentials\n  nameWithType: HttpClientHandler.UseDefaultCredentials\n  fullName: HttpClientHandler.UseDefaultCredentials\n- uid: System.Net.Http.HttpClientHandler.UseProxy\n  parent: System.Net.Http.HttpClientHandler\n  isExternal: false\n  name: UseProxy\n  nameWithType: HttpClientHandler.UseProxy\n  fullName: HttpClientHandler.UseProxy\n"}