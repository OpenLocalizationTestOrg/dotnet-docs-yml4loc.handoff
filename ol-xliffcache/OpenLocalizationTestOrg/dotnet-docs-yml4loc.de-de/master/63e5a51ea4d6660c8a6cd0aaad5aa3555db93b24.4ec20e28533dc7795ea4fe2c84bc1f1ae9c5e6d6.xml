{"nodes":[{"content":"Binds a <xref href=\"System.Windows.Input.KeyGesture\"></xref> to a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> (or another  <xref href=\"System.Windows.Input.ICommand\"></xref> implementation).","nodes":[{"pos":[0,202],"content":"Binds a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph> to a <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.RoutedCommand\"&gt;&lt;/xref&gt;</ph> (or another  <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> implementation).","source":"Binds a <xref href=\"System.Windows.Input.KeyGesture\"></xref> to a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> (or another  <xref href=\"System.Windows.Input.ICommand\"></xref> implementation)."}],"pos":[921,1124],"yaml":true},{"content":"A <xref:System.Windows.Input.KeyBinding> associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commanding system .  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value.  For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).  \n  \n With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>. It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a <xref:System.Windows.Input.KeyBinding> with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or code. For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key. Such a <xref:System.Windows.Input.KeyBinding> will never attempt to invoke its associated command.  \n  \n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  \n  \n A <xref:System.Windows.Input.KeyBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class. The most typical way to define a <xref:System.Windows.Input.KeyBinding> is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or <xref:System.Windows.Input.KeyBinding> elements.","nodes":[{"pos":[0,802],"content":"A <xref:System.Windows.Input.KeyBinding> associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commanding system .  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value.  For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> associates a <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> with a <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, such as a <ph id=\"ph4\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph>.","pos":[0,190],"source":"A <xref:System.Windows.Input.KeyBinding> associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.RoutedCommand&gt;</ph> is the primary implementation of the <ph id=\"ph2\">&lt;xref:System.Windows.Input.ICommand&gt;</ph> interface for the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> commanding system .","pos":[191,416],"source":" <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commanding system ."},{"content":"In general, when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A&gt;</ph> value.","pos":[418,680],"source":"  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value."},{"content":"For more information on commanding, see the <bpt id=\"p1\">[</bpt>Commanding Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/commanding-overview.md)</ept>.","pos":[682,802],"source":"  For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md)."}]},{"pos":[809,1694],"content":"With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>. It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a <xref:System.Windows.Input.KeyBinding> with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or code. For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key. Such a <xref:System.Windows.Input.KeyBinding> will never attempt to invoke its associated command.","nodes":[{"content":"With the exception of the function keys and the numeric keypad keys, a valid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain exactly one <ph id=\"ph2\">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id=\"ph3\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,230],"source":"With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"Function keys and numeric keypad keys do not require a modifier key in order to be a valid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.","pos":[232,362],"source":"  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>."},{"content":"It is possible to specify an invalid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> and a <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> with an invalid associated gesture, either through <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> or code.","pos":[363,605],"source":" It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a <xref:System.Windows.Input.KeyBinding> with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or code."},{"content":"For instance, there is no validation that prevents creating and binding a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> that contains only a nonfunction key, or only modifiers but no key.","pos":[606,786],"source":" For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key."},{"content":"Such a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> will never attempt to invoke its associated command.","pos":[787,885],"source":" Such a <xref:System.Windows.Input.KeyBinding> will never attempt to invoke its associated command."}]},{"pos":[1701,3465],"content":"When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","nodes":[{"content":"When defining a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.","pos":[0,191],"source":"When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>."},{"content":"The first way to establish a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is to define the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute of the <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\".","pos":[192,551],"source":" The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\"."},{"content":"The second way is to define the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> attribute and the <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> attributes of the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element.","pos":[552,765],"source":" The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element."},{"content":"Both ways of setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> are equivalent and modify the same underlying object, but there will be a conflict if both are used.","pos":[766,930],"source":" Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used."},{"content":"In the case when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, and the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attributes are all set, the attribute which is defined last will be used for the <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.","pos":[932,1231],"source":"  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>."},{"content":"You can potentially have situations where for example a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.","pos":[1232,1447],"source":" You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same."},{"content":"In general, it is recommended that you use only the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute from <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","pos":[1448,1764],"source":" In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization."}]},{"pos":[3472,4073],"content":"A <xref:System.Windows.Input.KeyBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class. The most typical way to define a <xref:System.Windows.Input.KeyBinding> is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or <xref:System.Windows.Input.KeyBinding> elements.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> can be defined on a specific object or at the class level by registering a <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> class.","pos":[0,244],"source":"A <xref:System.Windows.Input.KeyBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class."},{"content":"The most typical way to define a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> is within the control template, setting the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property in <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> by declaring one or more <ph id=\"ph4\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> elements.","pos":[245,601],"source":" The most typical way to define a <xref:System.Windows.Input.KeyBinding> is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or <xref:System.Windows.Input.KeyBinding> elements."}]}],"pos":[1135,5219],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class.","nodes":[{"pos":[0,93],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class."}],"pos":[10437,10531],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,221],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;&lt;/xref&gt;</ph> class using the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[11809,12031],"yaml":true},{"content":"The command to associate with <code>gesture</code>.","nodes":[{"pos":[0,51],"content":"The command to associate with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">gesture</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The command to associate with <code>gesture</code>."}],"pos":[12249,12301],"yaml":true},{"content":"The key combination to associate with <code>command</code>.","nodes":[{"pos":[0,59],"content":"The key combination to associate with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">command</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The key combination to associate with <code>command</code>."}],"pos":[12382,12442],"yaml":true},{"content":"<code>command</code> or <code>gesture</code> is `null`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">&lt;code&gt;command&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;gesture&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>command</code> or <code>gesture</code> is `null`."}],"pos":[12609,12665],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref> which will be converted into a <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,371],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;&lt;/xref&gt;</ph> class using the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.ICommand\"&gt;&lt;/xref&gt;</ph> and the specified <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph4\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;&lt;/xref&gt;</ph> which will be converted into a <ph id=\"ph5\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref> which will be converted into a <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[13913,14285],"yaml":true},{"content":"The command to invoke.","nodes":[{"pos":[0,22],"content":"The command to invoke.","nodes":[{"content":"The command to invoke.","pos":[0,22]}]}],"pos":[14537,14560],"yaml":true},{"content":"The key to be associated with <code>command</code>.","nodes":[{"pos":[0,51],"content":"The key to be associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">command</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The key to be associated with <code>command</code>."}],"pos":[14630,14682],"yaml":true},{"content":"The modifiers to be associated with <code>command</code>.","nodes":[{"pos":[0,57],"content":"The modifiers to be associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">command</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The modifiers to be associated with <code>command</code>."}],"pos":[14767,14825],"yaml":true},{"content":"Creates an instance of a <xref href=\"System.Windows.Input.KeyBinding\"></xref>.","nodes":[{"pos":[0,78],"content":"Creates an instance of a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an instance of a <xref href=\"System.Windows.Input.KeyBinding\"></xref>."}],"pos":[15846,15925],"yaml":true},{"content":"The new object.","nodes":[{"pos":[0,15],"content":"The new object.","nodes":[{"content":"The new object.","pos":[0,15]}]}],"pos":[16102,16118],"yaml":true},{"content":"Gets or sets the gesture associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.","nodes":[{"pos":[0,99],"content":"Gets or sets the gesture associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the gesture associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>."}],"pos":[17082,17182],"yaml":true},{"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.","nodes":[{"pos":[0,214],"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.","nodes":[{"content":"With the exception of the function keys and the numeric keypad keys, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain a <ph id=\"ph2\">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id=\"ph3\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,214],"source":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."}]}],"pos":[17193,17408],"yaml":true,"extradata":"MT"},{"content":"The key sequence. The default value is `null`.","nodes":[{"pos":[0,46],"content":"The key sequence. The default value is `null`.","nodes":[{"content":"The key sequence.","pos":[0,17]},{"content":"The default value is <ph id=\"ph1\">`null`</ph>.","pos":[18,46],"source":" The default value is `null`."}]}],"pos":[18524,18571],"yaml":true},{"content":"the value <code>gesture</code> is being set to is not a <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,109],"content":"the value <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">gesture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is being set to is not a <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"the value <code>gesture</code> is being set to is not a <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[18732,18842],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Windows.Input.Key\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.","nodes":[{"pos":[0,197],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph> of the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph> associated with this <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the <xref href=\"System.Windows.Input.Key\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>."}],"pos":[19770,19968],"yaml":true},{"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  \n  \n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","nodes":[{"pos":[0,214],"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.","nodes":[{"content":"With the exception of the function keys and the numeric keypad keys, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain a <ph id=\"ph2\">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id=\"ph3\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,214],"source":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."}]},{"pos":[221,1985],"content":"When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","nodes":[{"content":"When defining a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.","pos":[0,191],"source":"When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>."},{"content":"The first way to establish a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is to define the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute of the <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\".","pos":[192,551],"source":" The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\"."},{"content":"The second way is to define the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> attribute and the <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> attributes of the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element.","pos":[552,765],"source":" The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element."},{"content":"Both ways of setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> are equivalent and modify the same underlying object, but there will be a conflict if both are used.","pos":[766,930],"source":" Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used."},{"content":"In the case when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, and the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attributes are all set, the attribute which is defined last will be used for the <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.","pos":[932,1231],"source":"  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>."},{"content":"You can potentially have situations where for example a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.","pos":[1232,1447],"source":" You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same."},{"content":"In general, it is recommended that you use only the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute from <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","pos":[1448,1764],"source":" In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization."}]}],"pos":[19979,21971],"yaml":true,"extradata":"MT"},{"content":"The key part of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>.","nodes":[{"pos":[0,146],"content":"The key part of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>.","nodes":[{"content":"The key part of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","pos":[0,73],"source":"The key part of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Key.None\"&gt;&lt;/xref&gt;</ph>.","pos":[74,146],"source":" The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>."}]}],"pos":[22112,22259],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Input.KeyBinding.Key\"></xref> dependency property.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyBinding.Key\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Input.KeyBinding.Key\"></xref> dependency property."}],"pos":[23207,23300],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Windows.Input.ModifierKeys\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.","nodes":[{"pos":[0,206],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;&lt;/xref&gt;</ph> of the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph> associated with this <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.KeyBinding\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the <xref href=\"System.Windows.Input.ModifierKeys\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>."}],"pos":[24385,24592],"yaml":true},{"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  \n  \n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  \n  \n<a name=\"xamlAttributeUsage_Modifiers\"></a>   \n## XAML Attribute Usage  \n  \n```  \n<object Modifiers=\"oneOrMoreModifierKeys\"/>  \n  \n```  \n  \n<a name=\"xamlValues_Modifiers\"></a>   \n## XAML Values  \n *oneOrMoreModifierKeys*  \n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character.","nodes":[{"pos":[0,214],"content":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.","nodes":[{"content":"With the exception of the function keys and the numeric keypad keys, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must contain a <ph id=\"ph2\">&lt;xref:System.Windows.Input.Key&gt;</ph> and one or more <ph id=\"ph3\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,214],"source":"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>."}]},{"pos":[221,1985],"content":"When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","nodes":[{"content":"When defining a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> there are two ways to specify the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.","pos":[0,191],"source":"When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>."},{"content":"The first way to establish a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is to define the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute of the <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\".","pos":[192,551],"source":" The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \"CTRL+P\"."},{"content":"The second way is to define the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> attribute and the <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> attributes of the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> element.","pos":[552,765],"source":" The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element."},{"content":"Both ways of setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> are equivalent and modify the same underlying object, but there will be a conflict if both are used.","pos":[766,930],"source":" Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used."},{"content":"In the case when the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph>, and the <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attributes are all set, the attribute which is defined last will be used for the <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph>.","pos":[932,1231],"source":"  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>."},{"content":"You can potentially have situations where for example a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same.","pos":[1232,1447],"source":" You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same."},{"content":"In general, it is recommended that you use only the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> attribute from <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.","pos":[1448,1764],"source":" In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization."}]},{"pos":[2041,2061],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[2173,2184],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[2188,2342],"content":"*oneOrMoreModifierKeys*  \n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>oneOrMoreModifierKeys<ept id=\"p1\">*</ept>","pos":[0,23],"source":"*oneOrMoreModifierKeys*"},{"content":"One or more modifier keys, defined by the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph> enumeration, delimited with a \"+\" character.","pos":[27,154],"source":" One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character."}]}],"pos":[24603,26973],"yaml":true,"extradata":"MT"},{"content":"The modifier keys of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.  The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>.","nodes":[{"pos":[0,161],"content":"The modifier keys of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.  The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>.","nodes":[{"content":"The modifier keys of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","pos":[0,78],"source":"The modifier keys of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ModifierKeys.None\"&gt;&lt;/xref&gt;</ph>.","pos":[80,161],"source":"  The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>."}]}],"pos":[27138,27300],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Input.KeyBinding.Modifiers\"></xref> dependency property.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyBinding.Modifiers\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Input.KeyBinding.Modifiers\"></xref> dependency property."}],"pos":[28312,28411],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.KeyBinding\n  commentId: T:System.Windows.Input.KeyBinding\n  id: KeyBinding\n  children:\n  - System.Windows.Input.KeyBinding.#ctor\n  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)\n  - System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  - System.Windows.Input.KeyBinding.CreateInstanceCore\n  - System.Windows.Input.KeyBinding.Gesture\n  - System.Windows.Input.KeyBinding.Key\n  - System.Windows.Input.KeyBinding.KeyProperty\n  - System.Windows.Input.KeyBinding.Modifiers\n  - System.Windows.Input.KeyBinding.ModifiersProperty\n  langs:\n  - csharp\n  name: KeyBinding\n  nameWithType: KeyBinding\n  fullName: System.Windows.Input.KeyBinding\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Binds a <xref href=\"System.Windows.Input.KeyGesture\"></xref> to a <xref href=\"System.Windows.Input.RoutedCommand\"></xref> (or another  <xref href=\"System.Windows.Input.ICommand\"></xref> implementation).\n  remarks: \"A <xref:System.Windows.Input.KeyBinding> associates a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.ICommand>, such as a <xref:System.Windows.Input.RoutedCommand>. <xref:System.Windows.Input.RoutedCommand> is the primary implementation of the <xref:System.Windows.Input.ICommand> interface for the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] commanding system .  In general, when the <xref:System.Windows.Input.KeyGesture> is executed the command is invoked, although the command behavior is further influenced by command-specific factors such as the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> value.  For more information on commanding, see the [Commanding Overview](~/docs/framework/wpf/advanced/commanding-overview.md).  \\n  \\n With the exception of the function keys and the numeric keypad keys, a valid <xref:System.Windows.Input.KeyGesture> must contain exactly one <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  Function keys and numeric keypad keys do not require a modifier key in order to be a valid <xref:System.Windows.Input.KeyGesture>. It is possible to specify an invalid <xref:System.Windows.Input.KeyGesture> and a <xref:System.Windows.Input.KeyBinding> with an invalid associated gesture, either through [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or code. For instance, there is no validation that prevents creating and binding a <xref:System.Windows.Input.KeyGesture> that contains only a nonfunction key, or only modifiers but no key. Such a <xref:System.Windows.Input.KeyBinding> will never attempt to invoke its associated command.  \\n  \\n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \\\"CTRL+P\\\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  \\n  \\n A <xref:System.Windows.Input.KeyBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> on the <xref:System.Windows.Input.CommandManager> class. The most typical way to define a <xref:System.Windows.Input.KeyBinding> is within the control template, setting the <xref:System.Windows.UIElement.InputBindings%2A> property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] by declaring one or more <xref:System.Windows.Input.MouseBinding> or <xref:System.Windows.Input.KeyBinding> elements.\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.KeyBinding> and adds it to the <xref:System.Windows.Input.InputBindingCollection> of the root window.  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  \\n  \\n [!code-csharp[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]\\n [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerkeybindingcodebehind)]\"\n  syntax:\n    content: 'public class KeyBinding : System.Windows.Input.InputBinding'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  - System.Windows.Input.InputBinding\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.Clone\n  - System.Windows.Freezable.CloneCurrentValue\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.FreezeCore(System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.Command\n  - System.Windows.Input.InputBinding.CommandParameter\n  - System.Windows.Input.InputBinding.CommandParameterProperty\n  - System.Windows.Input.InputBinding.CommandProperty\n  - System.Windows.Input.InputBinding.CommandTarget\n  - System.Windows.Input.InputBinding.CommandTargetProperty\n  - System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.#ctor\n  commentId: M:System.Windows.Input.KeyBinding.#ctor\n  id: '#ctor'\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyBinding()\n  nameWithType: KeyBinding.KeyBinding()\n  fullName: KeyBinding.KeyBinding()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class.\n  syntax:\n    content: public KeyBinding ();\n    parameters: []\n  overload: System.Windows.Input.KeyBinding.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)\n  commentId: M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)'\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyBinding(ICommand, KeyGesture)\n  nameWithType: KeyBinding.KeyBinding(ICommand, KeyGesture)\n  fullName: KeyBinding.KeyBinding(ICommand, KeyGesture)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  syntax:\n    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to associate with <code>gesture</code>.\n    - id: gesture\n      type: System.Windows.Input.KeyGesture\n      description: The key combination to associate with <code>command</code>.\n  overload: System.Windows.Input.KeyBinding.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>command</code> or <code>gesture</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  commentId: M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  id: '#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyBinding(ICommand, Key, ModifierKeys)\n  nameWithType: KeyBinding.KeyBinding(ICommand, Key, ModifierKeys)\n  fullName: KeyBinding.KeyBinding(ICommand, Key, ModifierKeys)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyBinding\"></xref> class using the specified <xref href=\"System.Windows.Input.ICommand\"></xref> and the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref> which will be converted into a <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  syntax:\n    content: public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);\n    parameters:\n    - id: command\n      type: System.Windows.Input.ICommand\n      description: The command to invoke.\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key to be associated with <code>command</code>.\n    - id: modifiers\n      type: System.Windows.Input.ModifierKeys\n      description: The modifiers to be associated with <code>command</code>.\n  overload: System.Windows.Input.KeyBinding.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.CreateInstanceCore\n  commentId: M:System.Windows.Input.KeyBinding.CreateInstanceCore\n  id: CreateInstanceCore\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: CreateInstanceCore()\n  nameWithType: KeyBinding.CreateInstanceCore()\n  fullName: KeyBinding.CreateInstanceCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Creates an instance of a <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  syntax:\n    content: protected override System.Windows.Freezable CreateInstanceCore ();\n    parameters: []\n    return:\n      type: System.Windows.Freezable\n      description: The new object.\n  overload: System.Windows.Input.KeyBinding.CreateInstanceCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.Gesture\n  commentId: P:System.Windows.Input.KeyBinding.Gesture\n  id: Gesture\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: Gesture\n  nameWithType: KeyBinding.Gesture\n  fullName: KeyBinding.Gesture\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the gesture associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  remarks: With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.\n  example:\n  - \"The following example shows how to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand> using a <xref:System.Windows.Input.KeyBinding> (the markup and code examples specify different keys but are otherwise equivalent).  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  \\n  \\n [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]\n\n      public override System.Windows.Input.InputGesture Gesture { get; set; }\n    return:\n      type: System.Windows.Input.InputGesture\n      description: The key sequence. The default value is `null`.\n  overload: System.Windows.Input.KeyBinding.Gesture*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: the value <code>gesture</code> is being set to is not a <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.Key\n  commentId: P:System.Windows.Input.KeyBinding.Key\n  id: Key\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: Key\n  nameWithType: KeyBinding.Key\n  fullName: KeyBinding.Key\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.Key\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  remarks: \"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  \\n  \\n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \\\"CTRL+P\\\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.\"\n  syntax:\n    content: public System.Windows.Input.Key Key { get; set; }\n    return:\n      type: System.Windows.Input.Key\n      description: The key part of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>.\n  overload: System.Windows.Input.KeyBinding.Key*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Input.KeyBinding.KeyProperty\n  commentId: F:System.Windows.Input.KeyBinding.KeyProperty\n  id: KeyProperty\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: KeyProperty\n  nameWithType: KeyBinding.KeyProperty\n  fullName: KeyBinding.KeyProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref href=\"System.Windows.Input.KeyBinding.Key\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty KeyProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.Modifiers\n  commentId: P:System.Windows.Input.KeyBinding.Modifiers\n  id: Modifiers\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: Modifiers\n  nameWithType: KeyBinding.Modifiers\n  fullName: KeyBinding.Modifiers\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets or sets the <xref href=\"System.Windows.Input.ModifierKeys\"></xref> of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> associated with this <xref href=\"System.Windows.Input.KeyBinding\"></xref>.\n  remarks: \"With the exception of the function keys and the numeric keypad keys, a <xref:System.Windows.Input.KeyGesture> must contain a <xref:System.Windows.Input.Key> and one or more <xref:System.Windows.Input.ModifierKeys>.  \\n  \\n When defining a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] there are two ways to specify the <xref:System.Windows.Input.KeyGesture>. The first way to establish a <xref:System.Windows.Input.KeyBinding> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is to define the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute of the <xref:System.Windows.Input.KeyBinding> element, which enables a syntax to specify keys and modifiers as a single string, for example \\\"CTRL+P\\\". The second way is to define the <xref:System.Windows.Input.KeyBinding.Key%2A> attribute and the <xref:System.Windows.Input.KeyBinding.Modifiers%2A> attributes of the <xref:System.Windows.Input.KeyBinding> element. Both ways of setting the <xref:System.Windows.Input.KeyGesture> are equivalent and modify the same underlying object, but there will be a conflict if both are used.  In the case when the <xref:System.Windows.Input.KeyBinding.Key%2A>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A>, and the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attributes are all set, the attribute which is defined last will be used for the <xref:System.Windows.Input.KeyGesture>. You can potentially have situations where for example a <xref:System.Windows.Input.KeyBinding.Key%2A> set last will overwrite just the Key component of a preceding Gesture but leave the Gesture's modifiers the same. In general, it is recommended that you use only the <xref:System.Windows.Input.KeyBinding.Gesture%2A> attribute from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]; this will avoid ambiguity, provides the most streamlined syntax, and provides the most straightforward representation for serialization.  \\n  \\n<a name=\\\"xamlAttributeUsage_Modifiers\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object Modifiers=\\\"oneOrMoreModifierKeys\\\"/>  \\n  \\n```  \\n  \\n<a name=\\\"xamlValues_Modifiers\\\"></a>   \\n## XAML Values  \\n *oneOrMoreModifierKeys*  \\n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \\\"+\\\" character.\"\n  syntax:\n    content: public System.Windows.Input.ModifierKeys Modifiers { get; set; }\n    return:\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.  The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>.\n  overload: System.Windows.Input.KeyBinding.Modifiers*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyBinding.ModifiersProperty\n  commentId: F:System.Windows.Input.KeyBinding.ModifiersProperty\n  id: ModifiersProperty\n  parent: System.Windows.Input.KeyBinding\n  langs:\n  - csharp\n  name: ModifiersProperty\n  nameWithType: KeyBinding.ModifiersProperty\n  fullName: KeyBinding.ModifiersProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Identifies the <xref href=\"System.Windows.Input.KeyBinding.Modifiers\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ModifiersProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.InputBinding\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputBinding\n  nameWithType: InputBinding\n  fullName: System.Windows.Input.InputBinding\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Windows.Input.KeyBinding.#ctor\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding()\n  nameWithType: KeyBinding.KeyBinding()\n  fullName: KeyBinding.KeyBinding()\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding(ICommand, KeyGesture)\n  nameWithType: KeyBinding.KeyBinding(ICommand, KeyGesture)\n  fullName: KeyBinding.KeyBinding(ICommand, KeyGesture)\n- uid: System.Windows.Input.ICommand\n  parent: System.Windows.Input\n  isExternal: false\n  name: ICommand\n  nameWithType: ICommand\n  fullName: System.Windows.Input.ICommand\n- uid: System.Windows.Input.KeyGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyGesture\n  nameWithType: KeyGesture\n  fullName: System.Windows.Input.KeyGesture\n- uid: System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding(ICommand, Key, ModifierKeys)\n  nameWithType: KeyBinding.KeyBinding(ICommand, Key, ModifierKeys)\n  fullName: KeyBinding.KeyBinding(ICommand, Key, ModifierKeys)\n- uid: System.Windows.Input.Key\n  parent: System.Windows.Input\n  isExternal: false\n  name: Key\n  nameWithType: Key\n  fullName: System.Windows.Input.Key\n- uid: System.Windows.Input.ModifierKeys\n  parent: System.Windows.Input\n  isExternal: false\n  name: ModifierKeys\n  nameWithType: ModifierKeys\n  fullName: System.Windows.Input.ModifierKeys\n- uid: System.Windows.Input.KeyBinding.CreateInstanceCore\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: KeyBinding.CreateInstanceCore()\n  fullName: KeyBinding.CreateInstanceCore()\n- uid: System.Windows.Freezable\n  parent: System.Windows\n  isExternal: false\n  name: Freezable\n  nameWithType: Freezable\n  fullName: System.Windows.Freezable\n- uid: System.Windows.Input.KeyBinding.Gesture\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: KeyBinding.Gesture\n  fullName: KeyBinding.Gesture\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.Windows.Input.KeyBinding.Key\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Key\n  nameWithType: KeyBinding.Key\n  fullName: KeyBinding.Key\n- uid: System.Windows.Input.KeyBinding.KeyProperty\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyProperty\n  nameWithType: KeyBinding.KeyProperty\n  fullName: KeyBinding.KeyProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Input.KeyBinding.Modifiers\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyBinding.Modifiers\n  fullName: KeyBinding.Modifiers\n- uid: System.Windows.Input.KeyBinding.ModifiersProperty\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: ModifiersProperty\n  nameWithType: KeyBinding.ModifiersProperty\n  fullName: KeyBinding.ModifiersProperty\n- uid: System.Windows.Input.KeyBinding.#ctor*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: KeyBinding\n  nameWithType: KeyBinding.KeyBinding\n  fullName: KeyBinding.KeyBinding\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n- uid: System.Windows.Input.KeyBinding.CreateInstanceCore*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: CreateInstanceCore\n  nameWithType: KeyBinding.CreateInstanceCore\n  fullName: KeyBinding.CreateInstanceCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n- uid: System.Windows.Input.KeyBinding.Gesture*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Gesture\n  nameWithType: KeyBinding.Gesture\n  fullName: KeyBinding.Gesture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n- uid: System.Windows.Input.KeyBinding.Key*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Key\n  nameWithType: KeyBinding.Key\n  fullName: KeyBinding.Key\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n- uid: System.Windows.Input.KeyBinding.Modifiers*\n  parent: System.Windows.Input.KeyBinding\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyBinding.Modifiers\n  fullName: KeyBinding.Modifiers\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyBinding.xml\n- uid: System.Windows.DependencyObject.Equals(System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: DependencyObject.Equals(Object)\n  fullName: DependencyObject.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Windows.DependencyObject.GetHashCode\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: DependencyObject.GetHashCode()\n  fullName: DependencyObject.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyProperty)\n  nameWithType: DependencyObject.ClearValue(DependencyProperty)\n  fullName: DependencyObject.ClearValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyPropertyKey)\n  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)\n  fullName: DependencyObject.ClearValue(DependencyPropertyKey)\n- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: CoerceValue(DependencyProperty)\n  nameWithType: DependencyObject.CoerceValue(DependencyProperty)\n  fullName: DependencyObject.CoerceValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.DependencyObjectType\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: DependencyObjectType\n  nameWithType: DependencyObject.DependencyObjectType\n  fullName: DependencyObject.DependencyObjectType\n- uid: System.Windows.DependencyObject.GetLocalValueEnumerator\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetLocalValueEnumerator()\n  nameWithType: DependencyObject.GetLocalValueEnumerator()\n  fullName: DependencyObject.GetLocalValueEnumerator()\n- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: InvalidateProperty(DependencyProperty)\n  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)\n  fullName: DependencyObject.InvalidateProperty(DependencyProperty)\n- uid: System.Windows.DependencyObject.IsSealed\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: IsSealed\n  nameWithType: DependencyObject.IsSealed\n  fullName: DependencyObject.IsSealed\n- uid: System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: Freezable.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: Freezable.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ReadLocalValue(DependencyProperty)\n  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)\n  fullName: DependencyObject.ReadLocalValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetCurrentValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyPropertyKey, Object)\n  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)\n  fullName: DependencyObject.SetValue(DependencyPropertyKey, Object)\n- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ShouldSerializeProperty(DependencyProperty)\n  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n  fullName: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n- uid: System.Windows.Freezable.CanFreeze\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CanFreeze\n  nameWithType: Freezable.CanFreeze\n  fullName: Freezable.CanFreeze\n- uid: System.Windows.Freezable.Changed\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Changed\n  nameWithType: Freezable.Changed\n  fullName: Freezable.Changed\n- uid: System.Windows.Freezable.Clone\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Clone()\n  nameWithType: Freezable.Clone()\n  fullName: Freezable.Clone()\n- uid: System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCore(Freezable)\n  nameWithType: InputBinding.CloneCore(Freezable)\n  fullName: InputBinding.CloneCore(Freezable)\n- uid: System.Windows.Freezable.CloneCurrentValue\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CloneCurrentValue()\n  nameWithType: Freezable.CloneCurrentValue()\n  fullName: Freezable.CloneCurrentValue()\n- uid: System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: InputBinding.CloneCurrentValueCore(Freezable)\n  fullName: InputBinding.CloneCurrentValueCore(Freezable)\n- uid: System.Windows.Freezable.CreateInstance\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CreateInstance()\n  nameWithType: Freezable.CreateInstance()\n  fullName: Freezable.CreateInstance()\n- uid: System.Windows.Freezable.Freeze\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Freeze()\n  nameWithType: Freezable.Freeze()\n  fullName: Freezable.Freeze()\n- uid: System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Freeze(Freezable, Boolean)\n  nameWithType: Freezable.Freeze(Freezable, Boolean)\n  fullName: Freezable.Freeze(Freezable, Boolean)\n- uid: System.Windows.Freezable.FreezeCore(System.Boolean)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: FreezeCore(Boolean)\n  nameWithType: Freezable.FreezeCore(Boolean)\n  fullName: Freezable.FreezeCore(Boolean)\n- uid: System.Windows.Freezable.GetAsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetAsFrozen()\n  nameWithType: Freezable.GetAsFrozen()\n  fullName: Freezable.GetAsFrozen()\n- uid: System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetAsFrozenCore(Freezable)\n  fullName: InputBinding.GetAsFrozenCore(Freezable)\n- uid: System.Windows.Freezable.GetCurrentValueAsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetCurrentValueAsFrozen()\n  nameWithType: Freezable.GetCurrentValueAsFrozen()\n  fullName: Freezable.GetCurrentValueAsFrozen()\n- uid: System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: InputBinding.GetCurrentValueAsFrozenCore(Freezable)\n- uid: System.Windows.Freezable.IsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: IsFrozen\n  nameWithType: Freezable.IsFrozen\n  fullName: Freezable.IsFrozen\n- uid: System.Windows.Freezable.OnChanged\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnChanged()\n  nameWithType: Freezable.OnChanged()\n  fullName: Freezable.OnChanged()\n- uid: System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n  nameWithType: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n  fullName: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n- uid: System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n  nameWithType: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n  fullName: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n- uid: System.Windows.Freezable.ReadPreamble\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: ReadPreamble()\n  nameWithType: Freezable.ReadPreamble()\n  fullName: Freezable.ReadPreamble()\n- uid: System.Windows.Freezable.WritePostscript\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: WritePostscript()\n  nameWithType: Freezable.WritePostscript()\n  fullName: Freezable.WritePostscript()\n- uid: System.Windows.Freezable.WritePreamble\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: WritePreamble()\n  nameWithType: Freezable.WritePreamble()\n  fullName: Freezable.WritePreamble()\n- uid: System.Windows.Input.InputBinding.Command\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: Command\n  nameWithType: InputBinding.Command\n  fullName: InputBinding.Command\n- uid: System.Windows.Input.InputBinding.CommandParameter\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameter\n  nameWithType: InputBinding.CommandParameter\n  fullName: InputBinding.CommandParameter\n- uid: System.Windows.Input.InputBinding.CommandParameterProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandParameterProperty\n  nameWithType: InputBinding.CommandParameterProperty\n  fullName: InputBinding.CommandParameterProperty\n- uid: System.Windows.Input.InputBinding.CommandProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandProperty\n  nameWithType: InputBinding.CommandProperty\n  fullName: InputBinding.CommandProperty\n- uid: System.Windows.Input.InputBinding.CommandTarget\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTarget\n  nameWithType: InputBinding.CommandTarget\n  fullName: InputBinding.CommandTarget\n- uid: System.Windows.Input.InputBinding.CommandTargetProperty\n  parent: System.Windows.Input.InputBinding\n  isExternal: false\n  name: CommandTargetProperty\n  nameWithType: InputBinding.CommandTargetProperty\n  fullName: InputBinding.CommandTargetProperty\n"}