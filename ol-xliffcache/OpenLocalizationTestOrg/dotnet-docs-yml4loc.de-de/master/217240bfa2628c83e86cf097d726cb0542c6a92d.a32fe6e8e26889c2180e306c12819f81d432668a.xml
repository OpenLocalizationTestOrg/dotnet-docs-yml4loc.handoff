{"nodes":[{"content":"The exception that is thrown when a method in the <xref href=\"System.Security.AccessControl\"></xref> namespace attempts to enable a privilege that it does not have.","nodes":[{"pos":[0,164],"content":"The exception that is thrown when a method in the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl\"&gt;&lt;/xref&gt;</ph> namespace attempts to enable a privilege that it does not have.","source":"The exception that is thrown when a method in the <xref href=\"System.Security.AccessControl\"></xref> namespace attempts to enable a privilege that it does not have."}],"pos":[994,1159],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class.","nodes":[{"pos":[0,117],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class."}],"pos":[3318,3436],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified privilege.","nodes":[{"pos":[0,150],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"&gt;&lt;/xref&gt;</ph> class by using the specified privilege.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified privilege."}],"pos":[4996,5147],"yaml":true},{"content":"The privilege that is not enabled.","nodes":[{"pos":[0,34],"content":"The privilege that is not enabled.","nodes":[{"content":"The privilege that is not enabled.","pos":[0,34]}]}],"pos":[5304,5339],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified exception.","nodes":[{"pos":[0,150],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"&gt;&lt;/xref&gt;</ph> class by using the specified exception.","source":"Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified exception."}],"pos":[6904,7055],"yaml":true},{"content":"The privilege that is not enabled.","nodes":[{"pos":[0,34],"content":"The privilege that is not enabled.","nodes":[{"content":"The privilege that is not enabled.","pos":[0,34]}]}],"pos":[7229,7264],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,240],"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">innerException</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic), the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,240],"source":" If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[7328,7569],"yaml":true},{"content":"Sets the <code>info</code> parameter with information about the exception.","nodes":[{"pos":[0,74],"content":"Sets the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">info</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter with information about the exception.","source":"Sets the <code>info</code> parameter with information about the exception."}],"pos":[9355,9430],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.","nodes":[{"pos":[0,143],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.SerializationInfo\"&gt;&lt;/xref&gt;</ph> that holds the serialized object data about the exception being thrown.","source":"The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown."}],"pos":[9707,9851],"yaml":true},{"content":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.","nodes":[{"pos":[0,140],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Runtime.Serialization.StreamingContext\"&gt;&lt;/xref&gt;</ph> that contains contextual information about the source or destination.","source":"The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination."}],"pos":[9946,10087],"yaml":true},{"content":"Gets the name of the privilege that is not enabled.","nodes":[{"pos":[0,51],"content":"Gets the name of the privilege that is not enabled.","nodes":[{"content":"Gets the name of the privilege that is not enabled.","pos":[0,51]}]}],"pos":[11426,11478],"yaml":true},{"content":"The name of the privilege that the method failed to enable.","nodes":[{"pos":[0,59],"content":"The name of the privilege that the method failed to enable.","nodes":[{"content":"The name of the privilege that the method failed to enable.","pos":[0,59]}]}],"pos":[11595,11655],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.AccessControl.PrivilegeNotHeldException\n  commentId: T:System.Security.AccessControl.PrivilegeNotHeldException\n  id: PrivilegeNotHeldException\n  children:\n  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor\n  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)\n  - System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)\n  - System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException\n  nameWithType: PrivilegeNotHeldException\n  fullName: System.Security.AccessControl.PrivilegeNotHeldException\n  type: Class\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: The exception that is thrown when a method in the <xref href=\"System.Security.AccessControl\"></xref> namespace attempts to enable a privilege that it does not have.\n  syntax:\n    content: 'public sealed class PrivilegeNotHeldException : UnauthorizedAccessException'\n  inheritance:\n  - System.Object\n  - System.Exception\n  - System.UnauthorizedAccessException\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor\n  commentId: M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor\n  id: '#ctor'\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException()\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException()\n  fullName: PrivilegeNotHeldException.PrivilegeNotHeldException()\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class.\n  syntax:\n    content: public PrivilegeNotHeldException ();\n    parameters: []\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)\n  commentId: M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException(String)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n  fullName: PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified privilege.\n  syntax:\n    content: public PrivilegeNotHeldException (string privilege);\n    parameters:\n    - id: privilege\n      type: System.String\n      description: The privilege that is not enabled.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)\n  commentId: M:System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeNotHeldException(String, Exception)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String, Exception)\n  fullName: PrivilegeNotHeldException.PrivilegeNotHeldException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Initializes a new instance of the <xref href=\"System.Security.AccessControl.PrivilegeNotHeldException\"></xref> class by using the specified exception.\n  syntax:\n    content: public PrivilegeNotHeldException (string privilege, Exception inner);\n    parameters:\n    - id: privilege\n      type: System.String\n      description: The privilege that is not enabled.\n    - id: inner\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  commentId: M:System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: PrivilegeNotHeldException.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: PrivilegeNotHeldException.GetObjectData(SerializationInfo, StreamingContext)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: Sets the <code>info</code> parameter with information about the exception.\n  syntax:\n    content: public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);\n    parameters:\n    - id: info\n      type: System.Runtime.Serialization.SerializationInfo\n      description: The <xref href=\"System.Runtime.Serialization.SerializationInfo\"></xref> that holds the serialized object data about the exception being thrown.\n    - id: context\n      type: System.Runtime.Serialization.StreamingContext\n      description: The <xref href=\"System.Runtime.Serialization.StreamingContext\"></xref> that contains contextual information about the source or destination.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  commentId: P:System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  id: PrivilegeName\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  langs:\n  - csharp\n  name: PrivilegeName\n  nameWithType: PrivilegeNotHeldException.PrivilegeName\n  fullName: PrivilegeNotHeldException.PrivilegeName\n  type: Property\n  assemblies:\n  - System.Security.AccessControl\n  - mscorlib\n  namespace: System.Security.AccessControl\n  summary: Gets the name of the privilege that is not enabled.\n  syntax:\n    content: public string PrivilegeName { get; }\n    return:\n      type: System.String\n      description: The name of the privilege that the method failed to enable.\n  overload: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException()\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException()\n  fullName: PrivilegeNotHeldException.PrivilegeNotHeldException()\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException(String)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n  fullName: PrivilegeNotHeldException.PrivilegeNotHeldException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor(System.String,System.Exception)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException(String, Exception)\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException(String, Exception)\n  fullName: PrivilegeNotHeldException.PrivilegeNotHeldException(String, Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: PrivilegeNotHeldException.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: PrivilegeNotHeldException.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Runtime.Serialization.SerializationInfo\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: SerializationInfo\n  nameWithType: SerializationInfo\n  fullName: System.Runtime.Serialization.SerializationInfo\n- uid: System.Runtime.Serialization.StreamingContext\n  parent: System.Runtime.Serialization\n  isExternal: false\n  name: StreamingContext\n  nameWithType: StreamingContext\n  fullName: System.Runtime.Serialization.StreamingContext\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeName\n  nameWithType: PrivilegeNotHeldException.PrivilegeName\n  fullName: PrivilegeNotHeldException.PrivilegeName\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.#ctor*\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeNotHeldException\n  nameWithType: PrivilegeNotHeldException.PrivilegeNotHeldException\n  fullName: PrivilegeNotHeldException.PrivilegeNotHeldException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.GetObjectData*\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: GetObjectData\n  nameWithType: PrivilegeNotHeldException.GetObjectData\n  fullName: PrivilegeNotHeldException.GetObjectData\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n- uid: System.Security.AccessControl.PrivilegeNotHeldException.PrivilegeName*\n  parent: System.Security.AccessControl.PrivilegeNotHeldException\n  isExternal: false\n  name: PrivilegeName\n  nameWithType: PrivilegeNotHeldException.PrivilegeName\n  fullName: PrivilegeNotHeldException.PrivilegeName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.AccessControl/PrivilegeNotHeldException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}