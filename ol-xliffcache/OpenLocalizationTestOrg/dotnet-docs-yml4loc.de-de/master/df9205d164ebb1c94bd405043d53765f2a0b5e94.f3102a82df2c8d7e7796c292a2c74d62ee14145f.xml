{"nodes":[{"content":"Provides support for spin-based waiting.","nodes":[{"pos":[0,40],"content":"Provides support for spin-based waiting.","nodes":[{"content":"Provides support for spin-based waiting.","pos":[0,40]}]}],"pos":[752,793],"yaml":true},{"content":"<xref:System.Threading.SpinWait> encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding.  \n  \n <xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>. For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A> method.","nodes":[{"pos":[0,337],"content":"<xref:System.Threading.SpinWait> encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding.","nodes":[{"content":"<xref:System.Threading.SpinWait> encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding.","pos":[0,337],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinWait&gt;</ph> encapsulates common spinning logic.","pos":[0,68],"source":"<xref:System.Threading.SpinWait> encapsulates common spinning logic."},{"content":"On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation.","pos":[69,269]},{"content":"SpinWait encapsulates a good mixture of spinning and true yielding.","pos":[270,337]}]}]},{"pos":[344,868],"content":"<xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>. For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A> method.","nodes":[{"content":"<xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>. For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A> method.","pos":[0,524],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.SpinWait&gt;</ph> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads.","pos":[0,152],"source":"<xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads."},{"content":"SpinWait is not generally useful for ordinary applications.","pos":[153,212]},{"content":"In most cases, you should use the synchronization classes provided by the .NET Framework, such as <ph id=\"ph1\">&lt;xref:System.Threading.Monitor&gt;</ph>.","pos":[213,343],"source":" In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>."},{"content":"For most purposes where spin waiting is required, however, the <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait&gt;</ph> type should be preferred over the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> method.","pos":[344,524],"source":" For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A> method."}]}]}],"pos":[804,1677],"yaml":true,"extradata":"MT"},{"content":"Gets the number of times <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> has been called on this instance.","nodes":[{"pos":[0,114],"content":"Gets the number of times <ph id=\"ph1\">&lt;xref href=\"System.Threading.SpinWait.SpinOnce\"&gt;&lt;/xref&gt;</ph> has been called on this instance.","source":"Gets the number of times <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> has been called on this instance."}],"pos":[3549,3664],"yaml":true},{"content":"Returns an integer that represents the number of times <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> has been called on this instance.","nodes":[{"pos":[0,144],"content":"Returns an integer that represents the number of times <ph id=\"ph1\">&lt;xref href=\"System.Threading.SpinWait.SpinOnce\"&gt;&lt;/xref&gt;</ph> has been called on this instance.","source":"Returns an integer that represents the number of times <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> has been called on this instance."}],"pos":[3769,3914],"yaml":true},{"content":"Gets whether the next call to <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> will yield the processor, triggering a forced context switch.","nodes":[{"pos":[0,147],"content":"Gets whether the next call to <ph id=\"ph1\">&lt;xref href=\"System.Threading.SpinWait.SpinOnce\"&gt;&lt;/xref&gt;</ph> will yield the processor, triggering a forced context switch.","source":"Gets whether the next call to <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> will yield the processor, triggering a forced context switch."}],"pos":[5422,5570],"yaml":true},{"content":"On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor. On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.","nodes":[{"pos":[0,223],"content":"On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor. On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.","nodes":[{"content":"On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor. On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.","pos":[0,223],"nodes":[{"content":"On a single-CPU machine, <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait.SpinOnce%2A&gt;</ph> always yields the processor.","pos":[0,98],"source":"On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor."},{"content":"On machines with multiple CPUs, <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait.SpinOnce%2A&gt;</ph> may yield after an unspecified number of calls.","pos":[99,223],"source":" On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls."}]}]}],"pos":[5581,5805],"yaml":true,"extradata":"MT"},{"content":"Whether the next call to <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> will yield the processor, triggering a forced context switch.","nodes":[{"pos":[0,142],"content":"Whether the next call to <ph id=\"ph1\">&lt;xref href=\"System.Threading.SpinWait.SpinOnce\"&gt;&lt;/xref&gt;</ph> will yield the processor, triggering a forced context switch.","source":"Whether the next call to <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> will yield the processor, triggering a forced context switch."}],"pos":[5925,6068],"yaml":true},{"content":"Resets the spin counter.","nodes":[{"pos":[0,24],"content":"Resets the spin counter.","nodes":[{"content":"Resets the spin counter.","pos":[0,24]}]}],"pos":[7520,7545],"yaml":true},{"content":"This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance. If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.","nodes":[{"pos":[0,347],"content":"This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance. If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.","nodes":[{"content":"This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance. If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.","pos":[0,347],"nodes":[{"content":"This makes <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait.SpinOnce%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Threading.SpinWait.NextSpinWillYield%2A&gt;</ph> behave as though no calls to <ph id=\"ph3\">&lt;xref:System.Threading.SpinWait.SpinOnce%2A&gt;</ph> had been issued on this instance.","pos":[0,221],"source":"This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance."},{"content":"If a <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait&gt;</ph> instance is reused many times, it may be useful to reset it to avoid yielding too soon.","pos":[222,347],"source":" If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon."}]}]}],"pos":[7556,7904],"yaml":true,"extradata":"MT"},{"content":"Performs a single spin.","nodes":[{"pos":[0,23],"content":"Performs a single spin.","nodes":[{"content":"Performs a single spin.","pos":[0,23]}]}],"pos":[11776,11800],"yaml":true},{"content":"This is typically called in a loop, and may change in behavior based on the number of times a <xref:System.Threading.SpinWait.SpinOnce%2A> has been called thus far on this instance. Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called. A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.","nodes":[{"pos":[0,467],"content":"This is typically called in a loop, and may change in behavior based on the number of times a <xref:System.Threading.SpinWait.SpinOnce%2A> has been called thus far on this instance. Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called. A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.","nodes":[{"content":"This is typically called in a loop, and may change in behavior based on the number of times a <xref:System.Threading.SpinWait.SpinOnce%2A> has been called thus far on this instance. Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called. A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.","pos":[0,467],"nodes":[{"content":"This is typically called in a loop, and may change in behavior based on the number of times a <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait.SpinOnce%2A&gt;</ph> has been called thus far on this instance.","pos":[0,181],"source":"This is typically called in a loop, and may change in behavior based on the number of times a <xref:System.Threading.SpinWait.SpinOnce%2A> has been called thus far on this instance."},{"content":"Each spin results in the <ph id=\"ph1\">&lt;xref:System.Threading.Thread.SpinWait%2A&gt;</ph> method being called.","pos":[182,270],"source":" Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called."},{"content":"A count is kept of the number of times <ph id=\"ph1\">&lt;xref:System.Threading.SpinWait.SpinOnce%2A&gt;</ph> is called, and after a threshold count is reached, the <ph id=\"ph2\">&lt;xref:System.Threading.Thread.Yield%2A&gt;</ph> method is called.","pos":[271,467],"source":" A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called."}]}]}],"pos":[11811,12279],"yaml":true,"extradata":"MT"},{"content":"Spins until the specified condition is satisfied.","nodes":[{"pos":[0,49],"content":"Spins until the specified condition is satisfied.","nodes":[{"content":"Spins until the specified condition is satisfied.","pos":[0,49]}]}],"pos":[13939,13989],"yaml":true},{"content":"A delegate to be executed over and over until it returns true.","nodes":[{"pos":[0,62],"content":"A delegate to be executed over and over until it returns true.","nodes":[{"content":"A delegate to be executed over and over until it returns true.","pos":[0,62]}]}],"pos":[14160,14223],"yaml":true},{"content":"The <code>condition</code> argument is null.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">condition</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>condition</code> argument is null."}],"pos":[14388,14433],"yaml":true},{"content":"Spins until the specified condition is satisfied or until the specified timeout is expired.","nodes":[{"pos":[0,91],"content":"Spins until the specified condition is satisfied or until the specified timeout is expired.","nodes":[{"content":"Spins until the specified condition is satisfied or until the specified timeout is expired.","pos":[0,91]}]}],"pos":[16021,16113],"yaml":true},{"content":"A delegate to be executed over and over until it returns true.","nodes":[{"pos":[0,62],"content":"A delegate to be executed over and over until it returns true.","nodes":[{"content":"A delegate to be executed over and over until it returns true.","pos":[0,62]}]}],"pos":[16309,16372],"yaml":true},{"content":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.","nodes":[{"pos":[0,120],"content":"The number of milliseconds to wait, or <ph id=\"ph1\">&lt;xref href=\"System.Threading.Timeout.Infinite\"&gt;&lt;/xref&gt;</ph> (-1) to wait indefinitely.","source":"The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely."}],"pos":[16446,16567],"yaml":true},{"content":"True if the condition is satisfied within the timeout; otherwise, false","nodes":[{"pos":[0,71],"content":"True if the condition is satisfied within the timeout; otherwise, false","nodes":[{"content":"True if the condition is satisfied within the timeout; otherwise, false","pos":[0,71]}]}],"pos":[16625,16697],"yaml":true},{"content":"The <code>condition</code> argument is null.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">condition</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>condition</code> argument is null."}],"pos":[16862,16907],"yaml":true},{"content":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.","nodes":[{"pos":[0,107],"content":"<ph id=\"ph1\">&lt;code&gt;millisecondsTimeout&lt;/code&gt;</ph> is a negative number other than -1, which represents an infinite time-out.","source":"<code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out."}],"pos":[17021,17129],"yaml":true},{"content":"Spins until the specified condition is satisfied or until the specified timeout is expired.","nodes":[{"pos":[0,91],"content":"Spins until the specified condition is satisfied or until the specified timeout is expired.","nodes":[{"content":"Spins until the specified condition is satisfied or until the specified timeout is expired.","pos":[0,91]}]}],"pos":[18735,18827],"yaml":true},{"content":"A delegate to be executed over and over until it returns true.","nodes":[{"pos":[0,62],"content":"A delegate to be executed over and over until it returns true.","nodes":[{"content":"A delegate to be executed over and over until it returns true.","pos":[0,62]}]}],"pos":[19016,19079],"yaml":true},{"content":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.","nodes":[{"pos":[0,158],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.","source":"A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely."}],"pos":[19144,19303],"yaml":true},{"content":"True if the condition is satisfied within the timeout; otherwise, false","nodes":[{"pos":[0,71],"content":"True if the condition is satisfied within the timeout; otherwise, false","nodes":[{"content":"True if the condition is satisfied within the timeout; otherwise, false","pos":[0,71]}]}],"pos":[19361,19433],"yaml":true},{"content":"The <code>condition</code> argument is null.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">condition</ph><ept id=\"p1\">&lt;/code&gt;</ept> argument is null.","source":"The <code>condition</code> argument is null."}],"pos":[19598,19643],"yaml":true},{"content":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.","nodes":[{"pos":[0,180],"content":"<ph id=\"ph1\">&lt;code&gt;timeout&lt;/code&gt;</ph> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <ph id=\"ph2\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>."}],"pos":[19757,19938],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.SpinWait\n  commentId: T:System.Threading.SpinWait\n  id: SpinWait\n  children:\n  - System.Threading.SpinWait.Count\n  - System.Threading.SpinWait.NextSpinWillYield\n  - System.Threading.SpinWait.Reset\n  - System.Threading.SpinWait.SpinOnce\n  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})\n  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)\n  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  langs:\n  - csharp\n  name: SpinWait\n  nameWithType: SpinWait\n  fullName: System.Threading.SpinWait\n  type: Struct\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Provides support for spin-based waiting.\n  remarks: \"<xref:System.Threading.SpinWait> encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding.  \\n  \\n <xref:System.Threading.SpinWait> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref:System.Threading.Monitor>. For most purposes where spin waiting is required, however, the <xref:System.Threading.SpinWait> type should be preferred over the <xref:System.Threading.Thread.SpinWait%2A> method.\"\n  example:\n  - \"The following example shows how to use a <xref:System.Threading.SpinWait>:  \\n  \\n [!code-csharp[System.Threading.SpinWait#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.spinwait/cs/spinwait.cs#01)]\\n [!code-vb[System.Threading.SpinWait#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.spinwait/vb/spinwait.vb#01)]\"\n  syntax:\n    content: public struct SpinWait\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.SpinWait.Count\n  commentId: P:System.Threading.SpinWait.Count\n  id: Count\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  name: Count\n  nameWithType: SpinWait.Count\n  fullName: SpinWait.Count\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets the number of times <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> has been called on this instance.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: Returns an integer that represents the number of times <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> has been called on this instance.\n  overload: System.Threading.SpinWait.Count*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.SpinWait.NextSpinWillYield\n  commentId: P:System.Threading.SpinWait.NextSpinWillYield\n  id: NextSpinWillYield\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  name: NextSpinWillYield\n  nameWithType: SpinWait.NextSpinWillYield\n  fullName: SpinWait.NextSpinWillYield\n  type: Property\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Gets whether the next call to <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> will yield the processor, triggering a forced context switch.\n  remarks: On a single-CPU machine, <xref:System.Threading.SpinWait.SpinOnce%2A> always yields the processor. On machines with multiple CPUs, <xref:System.Threading.SpinWait.SpinOnce%2A> may yield after an unspecified number of calls.\n  syntax:\n    content: public bool NextSpinWillYield { get; }\n    return:\n      type: System.Boolean\n      description: Whether the next call to <xref href=\"System.Threading.SpinWait.SpinOnce\"></xref> will yield the processor, triggering a forced context switch.\n  overload: System.Threading.SpinWait.NextSpinWillYield*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.SpinWait.Reset\n  commentId: M:System.Threading.SpinWait.Reset\n  id: Reset\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: SpinWait.Reset()\n  fullName: SpinWait.Reset()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Resets the spin counter.\n  remarks: This makes <xref:System.Threading.SpinWait.SpinOnce%2A> and <xref:System.Threading.SpinWait.NextSpinWillYield%2A> behave as though no calls to <xref:System.Threading.SpinWait.SpinOnce%2A> had been issued on this instance. If a <xref:System.Threading.SpinWait> instance is reused many times, it may be useful to reset it to avoid yielding too soon.\n  example:\n  - \"The following is an example of using SpinWait in a simple lock-free stack implementation. (This is just an example. If an efficient, thread-safe stack is needed, consider using ConcurrentStack.)  \\n  \\n `// C#`  \\n  \\n `public class LockFreeStack<T>`  \\n  \\n `{`  \\n  \\n `private volatile Node m_head;`  \\n  \\n `private class Node { public Node Next; public T Value; }`  \\n  \\n `public void Push(T item)`  \\n  \\n `{`  \\n  \\n `var spin = new SpinWait();`  \\n  \\n `Node node = new Node { Value = item }, head;`  \\n  \\n `while (true)`  \\n  \\n `{`  \\n  \\n `head = m_head;`  \\n  \\n `node.Next = head;`  \\n  \\n `if (Interlocked.CompareExchange(ref m_head, node, head) == head) break;`  \\n  \\n `spin.SpinOnce();`  \\n  \\n `}`  \\n  \\n `}`  \\n  \\n `public bool TryPop(out T result)`  \\n  \\n `{`  \\n  \\n `result = default(T);`  \\n  \\n `var spin = new SpinWait();`  \\n  \\n `Node head;`  \\n  \\n `while (true)`  \\n  \\n `{`  \\n  \\n `head = m_head;`  \\n  \\n `if (head == null) return false;`  \\n  \\n `if (Interlocked.CompareExchange(ref m_head, head.Next, head) == head)`  \\n  \\n `{`  \\n  \\n `result = head.Value;`  \\n  \\n `return true;`  \\n  \\n `}`  \\n  \\n `spin.SpinOnce();`  \\n  \\n `}`  \\n  \\n `}`  \\n  \\n `}`  \\n  \\n `' Visual Basic`  \\n  \\n `Public Class LockFreeStack(Of T)`  \\n  \\n `Private m_head As Node`  \\n  \\n `Private Class Node`  \\n  \\n `Public [Next] As Node`  \\n  \\n `Public Value As T`  \\n  \\n `End Class`  \\n  \\n `Public Sub Push(ByVal item As T)`  \\n  \\n `Dim spin As New SpinWait()`  \\n  \\n `Dim head As Node, node As New Node With {.Value = item}`  \\n  \\n `While True`  \\n  \\n `Thread.MemoryBarrier()`  \\n  \\n `head = m_head`  \\n  \\n `node.Next = head`  \\n  \\n `If Interlocked.CompareExchange(m_head, node, head) Is head Then Exit While`  \\n  \\n `spin.SpinOnce()`  \\n  \\n `End While`  \\n  \\n `End Sub`  \\n  \\n `Public Function TryPop(ByRef result As T) As Boolean`  \\n  \\n `result = CType(Nothing, T)`  \\n  \\n `Dim spin As New SpinWait()`  \\n  \\n `Dim head As Node`  \\n  \\n `While True`  \\n  \\n `Thread.MemoryBarrier()`  \\n  \\n `head = m_head`  \\n  \\n `If head Is Nothing Then Return False`  \\n  \\n `If Interlocked.CompareExchange(m_head, head.Next, head) Is head Then`  \\n  \\n `result = head.Value`  \\n  \\n `Return True`  \\n  \\n `End If`  \\n  \\n `spin.SpinOnce()`  \\n  \\n `End While`  \\n  \\n `End Function`  \\n  \\n `End Class`\"\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Threading.SpinWait.Reset*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.SpinWait.SpinOnce\n  commentId: M:System.Threading.SpinWait.SpinOnce\n  id: SpinOnce\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  name: SpinOnce()\n  nameWithType: SpinWait.SpinOnce()\n  fullName: SpinWait.SpinOnce()\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Performs a single spin.\n  remarks: This is typically called in a loop, and may change in behavior based on the number of times a <xref:System.Threading.SpinWait.SpinOnce%2A> has been called thus far on this instance. Each spin results in the <xref:System.Threading.Thread.SpinWait%2A> method being called. A count is kept of the number of times <xref:System.Threading.SpinWait.SpinOnce%2A> is called, and after a threshold count is reached, the <xref:System.Threading.Thread.Yield%2A> method is called.\n  syntax:\n    content: public void SpinOnce ();\n    parameters: []\n  overload: System.Threading.SpinWait.SpinOnce*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})\n  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})\n  id: SpinUntil(System.Func{System.Boolean})\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  name: SpinUntil(Func<Boolean>)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>)\n  fullName: SpinWait.SpinUntil(Func<Boolean>)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Spins until the specified condition is satisfied.\n  syntax:\n    content: public static void SpinUntil (Func<bool> condition);\n    parameters:\n    - id: condition\n      type: System.Func{System.Boolean}\n      description: A delegate to be executed over and over until it returns true.\n  overload: System.Threading.SpinWait.SpinUntil*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>condition</code> argument is null.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)\n  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)\n  id: SpinUntil(System.Func{System.Boolean},System.Int32)\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  name: SpinUntil(Func<Boolean>, Int32)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>, Int32)\n  fullName: SpinWait.SpinUntil(Func<Boolean>, Int32)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Spins until the specified condition is satisfied or until the specified timeout is expired.\n  syntax:\n    content: public static bool SpinUntil (Func<bool> condition, int millisecondsTimeout);\n    parameters:\n    - id: condition\n      type: System.Func{System.Boolean}\n      description: A delegate to be executed over and over until it returns true.\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\"></xref> (-1) to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: True if the condition is satisfied within the timeout; otherwise, false\n  overload: System.Threading.SpinWait.SpinUntil*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>condition</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>millisecondsTimeout</code> is a negative number other than -1, which represents an infinite time-out.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  id: SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  parent: System.Threading.SpinWait\n  langs:\n  - csharp\n  name: SpinUntil(Func<Boolean>, TimeSpan)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>, TimeSpan)\n  fullName: SpinWait.SpinUntil(Func<Boolean>, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Threading\n  - mscorlib\n  - netstandard\n  namespace: System.Threading\n  summary: Spins until the specified condition is satisfied or until the specified timeout is expired.\n  syntax:\n    content: public static bool SpinUntil (Func<bool> condition, TimeSpan timeout);\n    parameters:\n    - id: condition\n      type: System.Func{System.Boolean}\n      description: A delegate to be executed over and over until it returns true.\n    - id: timeout\n      type: System.TimeSpan\n      description: A <xref href=\"System.TimeSpan\"></xref> that represents the number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.\n    return:\n      type: System.Boolean\n      description: True if the condition is satisfied within the timeout; otherwise, false\n  overload: System.Threading.SpinWait.SpinUntil*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>condition</code> argument is null.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Threading.SpinWait.Count\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: Count\n  nameWithType: SpinWait.Count\n  fullName: SpinWait.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Threading.SpinWait.NextSpinWillYield\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: NextSpinWillYield\n  nameWithType: SpinWait.NextSpinWillYield\n  fullName: SpinWait.NextSpinWillYield\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Threading.SpinWait.Reset\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: Reset()\n  nameWithType: SpinWait.Reset()\n  fullName: SpinWait.Reset()\n- uid: System.Threading.SpinWait.SpinOnce\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: SpinOnce()\n  nameWithType: SpinWait.SpinOnce()\n  fullName: SpinWait.SpinOnce()\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: SpinUntil(Func<Boolean>)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>)\n  fullName: SpinWait.SpinUntil(Func<Boolean>)\n- uid: System.Func`1\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n- uid: System.Func{System.Boolean}\n  parent: System\n  isExternal: false\n  name: Func<Boolean>\n  nameWithType: Func<Boolean>\n  fullName: System.Func<System.Boolean>\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    nameWithType: Func\n    fullName: System.Func\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: SpinUntil(Func<Boolean>, Int32)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>, Int32)\n  fullName: SpinWait.SpinUntil(Func<Boolean>, Int32)\n- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: SpinUntil(Func<Boolean>, TimeSpan)\n  nameWithType: SpinWait.SpinUntil(Func<Boolean>, TimeSpan)\n  fullName: SpinWait.SpinUntil(Func<Boolean>, TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Threading.SpinWait.Count*\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: Count\n  nameWithType: SpinWait.Count\n  fullName: SpinWait.Count\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n- uid: System.Threading.SpinWait.NextSpinWillYield*\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: NextSpinWillYield\n  nameWithType: SpinWait.NextSpinWillYield\n  fullName: SpinWait.NextSpinWillYield\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n- uid: System.Threading.SpinWait.Reset*\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: Reset\n  nameWithType: SpinWait.Reset\n  fullName: SpinWait.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n- uid: System.Threading.SpinWait.SpinOnce*\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: SpinOnce\n  nameWithType: SpinWait.SpinOnce\n  fullName: SpinWait.SpinOnce\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n- uid: System.Threading.SpinWait.SpinUntil*\n  parent: System.Threading.SpinWait\n  isExternal: false\n  name: SpinUntil\n  nameWithType: SpinWait.SpinUntil\n  fullName: SpinWait.SpinUntil\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SpinWait.xml\n"}