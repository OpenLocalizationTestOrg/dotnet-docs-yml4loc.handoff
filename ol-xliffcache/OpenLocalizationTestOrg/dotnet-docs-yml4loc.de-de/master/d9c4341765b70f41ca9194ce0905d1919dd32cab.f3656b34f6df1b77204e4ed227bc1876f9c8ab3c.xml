{"nodes":[{"content":"<xref href=\"System.Windows.UIElement\"></xref> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.","nodes":[{"pos":[0,195],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.","source":"<xref href=\"System.Windows.UIElement\"></xref> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics."}],"pos":[24319,24515],"yaml":true},{"content":"<xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.  \n  \n Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class. This includes the events for keyboard, mouse and stylus input, and related status properties. Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event. These paired events are typically the events of greatest interest to control authors.  \n  \n <xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.  \n  \n In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming. <xref:System.Windows.UIElement> is a base element at the WPF core level.  \n  \n A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:  \n  \n-   Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)  \n  \n-   Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)  \n  \n-   Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)  \n  \n-   Can raise routed events that travel a route through the logical element tree  \n  \n-   Supports some aspects of the animation system  \n  \n <xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level. <xref:System.Windows.FrameworkElement> adds and defines the following capabilities:  \n  \n-   Additional framework-specific layout characteristics  \n  \n-   Support for richer metadata reporting on properties  \n  \n-   Class-specific implementation of certain input base classes and their attached properties or attached events  \n  \n-   Style support  \n  \n-   Further animation support  \n  \n Another related class is <xref:System.Windows.ContentElement>. The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model. A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup. There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties. A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.  \n  \n> [!IMPORTANT]\n>  <xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element. Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.","nodes":[{"pos":[0,250],"content":"<xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.","pos":[0,250],"source":"<xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements."}]},{"pos":[257,721],"content":"Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class. This includes the events for keyboard, mouse and stylus input, and related status properties. Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event. These paired events are typically the events of greatest interest to control authors.","nodes":[{"content":"Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class. This includes the events for keyboard, mouse and stylus input, and related status properties. Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event. These paired events are typically the events of greatest interest to control authors.","pos":[0,464],"nodes":[{"content":"Much of the input and focusing behavior for elements in general is also defined in the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> class.","pos":[0,125],"source":"Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class."},{"content":"This includes the events for keyboard, mouse and stylus input, and related status properties.","pos":[126,219]},{"content":"Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event.","pos":[220,378]},{"content":"These paired events are typically the events of greatest interest to control authors.","pos":[379,464]}]}]},{"pos":[728,1053],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> also includes <ph id=\"ph2\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> that relate to the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> event model, including methods that can raise specified routed events that are sourced from an element instance.","source":"<xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance."},{"pos":[1060,1416],"content":"In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming. <xref:System.Windows.UIElement> is a base element at the WPF core level.","nodes":[{"content":"In terms of architecture, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> can be considered roughly equivalent to a window handle in <ph id=\"ph2\">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph> programming, or an Element in <ph id=\"ph3\">[!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)]</ph> programming.","pos":[0,283],"source":"In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is a base element at the WPF core level.","pos":[284,356],"source":" <xref:System.Windows.UIElement> is a base element at the WPF core level."}]},{"pos":[1423,1563],"content":"A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> has the following capabilities that are specifically defined by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> class:","pos":[0,140],"source":"A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:"}]},{"pos":[1573,1713],"content":"Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)","nodes":[{"content":"Can render as a child element (<ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> derives from <ph id=\"ph2\">&lt;xref:System.Windows.Media.Visual&gt;</ph>, a high level graphics class)","pos":[0,140],"source":"Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)"}]},{"pos":[1723,1870],"content":"Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)","nodes":[{"content":"Contains logic that is used to size and position possible child elements of a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> (when interpreted by a layout system)","pos":[0,147],"source":"Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)"}]},{"pos":[1880,2019],"content":"Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)","nodes":[{"content":"Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)","pos":[0,139]}]},{"pos":[2029,2105],"content":"Can raise routed events that travel a route through the logical element tree","nodes":[{"content":"Can raise routed events that travel a route through the logical element tree","pos":[0,76]}]},{"pos":[2115,2160],"content":"Supports some aspects of the animation system","nodes":[{"content":"Supports some aspects of the animation system","pos":[0,45]}]},{"pos":[2167,2446],"content":"<xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level. <xref:System.Windows.FrameworkElement> adds and defines the following capabilities:","nodes":[{"content":"<xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level. <xref:System.Windows.FrameworkElement> adds and defines the following capabilities:","pos":[0,279],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> is the WPF framework-level implementation class that builds on <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>, and adds specific interactions with the WPF framework level.","pos":[0,195],"source":"<xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> adds and defines the following capabilities:","pos":[196,279],"source":" <xref:System.Windows.FrameworkElement> adds and defines the following capabilities:"}]}]},{"pos":[2456,2508],"content":"Additional framework-specific layout characteristics","nodes":[{"content":"Additional framework-specific layout characteristics","pos":[0,52]}]},{"pos":[2518,2569],"content":"Support for richer metadata reporting on properties","nodes":[{"content":"Support for richer metadata reporting on properties","pos":[0,51]}]},{"pos":[2579,2687],"content":"Class-specific implementation of certain input base classes and their attached properties or attached events","nodes":[{"content":"Class-specific implementation of certain input base classes and their attached properties or attached events","pos":[0,108]}]},{"pos":[2697,2710],"content":"Style support","nodes":[{"content":"Style support","pos":[0,13]}]},{"pos":[2720,2745],"content":"Further animation support","nodes":[{"content":"Further animation support","pos":[0,25]}]},{"pos":[2752,3564],"content":"Another related class is <xref:System.Windows.ContentElement>. The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model. A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup. There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties. A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.","nodes":[{"content":"Another related class is <xref:System.Windows.ContentElement>. The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model. A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup. There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties. A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.","pos":[0,812],"nodes":[{"content":"Another related class is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[0,62],"source":"Another related class is <xref:System.Windows.ContentElement>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> class implements many of the same members as does <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>; the difference between these two classes has to do with their intended place in the overall content model.","pos":[63,293],"source":" The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup.","pos":[294,479],"source":" A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup."},{"content":"There might be capacity for taking less restrictive child content in a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>, but that capacity is typically centralized in designated content properties.","pos":[480,660],"source":" There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.","pos":[661,812],"source":" A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents."}]}]},{"pos":[3572,3861],"content":"[!IMPORTANT]\n <xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element. Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.","leadings":["","> "],"nodes":[{"content":" <xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element. Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.","pos":[13,287],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> state affects all input handling by that element.","pos":[1,96],"source":" <xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element."},{"content":"Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.","pos":[97,274]}]}]}],"pos":[24526,28425],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.UIElement\"></xref> class.","nodes":[{"pos":[0,86],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.UIElement\"></xref> class."}],"pos":[33636,33723],"yaml":true},{"content":"Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element. See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).","nodes":[{"pos":[0,259],"content":"Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element. See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).","nodes":[{"content":"Creating a new instance that is actually of type <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is uncommon in application code, because <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> is a base element.","pos":[0,172],"source":"Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element."},{"content":"See <bpt id=\"p1\">[</bpt>Base Elements Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/base-elements-overview.md)</ept>.","pos":[173,259],"source":" See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md)."}]}],"pos":[33734,33994],"yaml":true,"extradata":"MT"},{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","nodes":[{"pos":[0,126],"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","nodes":[{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","pos":[0,126]}]}],"pos":[35182,35309],"yaml":true},{"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \n  \n You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.","nodes":[{"pos":[0,298],"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[0,298],"nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception.","pos":[0,92]},{"content":"However, the handler is actually invoked multiple times when the event is handled.","pos":[93,175]},{"content":"Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[176,298]}]}]},{"pos":[305,499],"content":"You typically use this method to provide the implementation of the \"add\" accessor for the <ph id=\"ph1\">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.","source":"You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event."}],"pos":[35320,35826],"yaml":true,"extradata":"MT"},{"content":"An identifier for the routed event to be handled.","nodes":[{"pos":[0,49],"content":"An identifier for the routed event to be handled.","nodes":[{"content":"An identifier for the routed event to be handled.","pos":[0,49]}]}],"pos":[36028,36078],"yaml":true},{"content":"A reference to the handler implementation.","nodes":[{"pos":[0,42],"content":"A reference to the handler implementation.","nodes":[{"content":"A reference to the handler implementation.","pos":[0,42]}]}],"pos":[36143,36186],"yaml":true},{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.","nodes":[{"pos":[0,313],"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.","nodes":[{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","pos":[0,126]},{"content":"Specify <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handledEventsToo</ph><ept id=\"p1\">&lt;/code&gt;</ept> as <ph id=\"ph2\">`true`</ph> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.","pos":[127,313],"source":" Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route."}]}],"pos":[37388,37702],"yaml":true},{"content":"Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.  \n  \n Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.  \n  \n You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \n  \n You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.","nodes":[{"pos":[0,1021],"content":"Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.","nodes":[{"content":"Processing low-level input events in a practical way is a complex task.","pos":[0,71]},{"content":"Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.","pos":[72,197]},{"content":"Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.","pos":[198,315]},{"content":"In certain scenarios, those design intentions might not be what your particular handling of the input event requires.","pos":[316,433]},{"content":"It is for these scenarios that registering handlers with <ph id=\"ph1\">`handledEventsToo`</ph> as <ph id=\"ph2\">`true`</ph> is appropriate.","pos":[434,535],"source":" It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate."},{"content":"But you should not do this routinely.","pos":[536,573]},{"content":"Invoking handlers in response to all events even if handled will complicate your own application event processing logic.","pos":[574,694]},{"content":"You may see a decrease in performance if the handler logic is substantial.","pos":[695,769]},{"content":"You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.","pos":[770,1021]}]},{"pos":[1028,1379],"content":"Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.","nodes":[{"content":"Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.","pos":[0,351],"nodes":[{"content":"Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.","pos":[0,140]},{"content":"For example, if <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> is marked handled by class handling, you might be able to add handlers for <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> instead.","pos":[141,351],"source":" For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead."}]}]},{"pos":[1386,1684],"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[0,298],"nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception.","pos":[0,92]},{"content":"However, the handler is actually invoked multiple times when the event is handled.","pos":[93,175]},{"content":"Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[176,298]}]}]},{"pos":[1691,1885],"content":"You typically use this method to provide the implementation of the \"add\" accessor for the <ph id=\"ph1\">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.","source":"You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event."}],"pos":[37713,39609],"yaml":true,"extradata":"MT"},{"content":"An identifier for the routed event to be handled.","nodes":[{"pos":[0,49],"content":"An identifier for the routed event to be handled.","nodes":[{"content":"An identifier for the routed event to be handled.","pos":[0,49]}]}],"pos":[40567,40617],"yaml":true},{"content":"A reference to the handler implementation.","nodes":[{"pos":[0,42],"content":"A reference to the handler implementation.","nodes":[{"content":"A reference to the handler implementation.","pos":[0,42]}]}],"pos":[40682,40725],"yaml":true},{"content":"`true` to register the handler such that it is invoked even when  the routed event is marked handled in its event data; `false` to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.  \n  \n The default is `false`.  \n  \n Do not routinely ask to rehandle a routed event.","nodes":[{"pos":[0,253],"content":"<ph id=\"ph1\">`true`</ph> to register the handler such that it is invoked even when  the routed event is marked handled in its event data; <ph id=\"ph2\">`false`</ph> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.","source":"`true` to register the handler such that it is invoked even when  the routed event is marked handled in its event data; `false` to register the handler with the default condition that it will not be invoked if the routed event is already marked handled."},{"pos":[260,283],"content":"The default is <ph id=\"ph1\">`false`</ph>.","source":"The default is `false`."},{"pos":[290,338],"content":"Do not routinely ask to rehandle a routed event.","nodes":[{"content":"Do not routinely ask to rehandle a routed event.","pos":[0,48]}]}],"pos":[40798,41143],"yaml":true},{"content":"Adds handlers to the specified <xref href=\"System.Windows.EventRoute\"></xref> for the current <xref href=\"System.Windows.UIElement\"></xref> event handler collection.","nodes":[{"pos":[0,165],"content":"Adds handlers to the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.EventRoute\"&gt;&lt;/xref&gt;</ph> for the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> event handler collection.","source":"Adds handlers to the specified <xref href=\"System.Windows.EventRoute\"></xref> for the current <xref href=\"System.Windows.UIElement\"></xref> event handler collection."}],"pos":[42363,42529],"yaml":true},{"content":"This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>. Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree. However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route. Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.","nodes":[{"pos":[0,694],"content":"This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>. Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree. However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route. Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.","nodes":[{"content":"This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>. Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree. However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route. Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.","pos":[0,694],"nodes":[{"content":"This method can be used by content host elements (either those that implement <ph id=\"ph1\">&lt;xref:System.Windows.IContentHost&gt;</ph> or those that don't) to add handlers for child elements to the <ph id=\"ph2\">&lt;xref:System.Windows.EventRoute&gt;</ph>.","pos":[0,209],"source":"This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>."},{"content":"Ordinarily, this is not required for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>, because handlers are automatically added for all elements found in a completed logical tree.","pos":[210,372],"source":" Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree."},{"content":"However, in some cases where <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are mixed in templated trees, intervening elements that came from the template need to be added to a route.","pos":[373,582],"source":" However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route."},{"content":"Both <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> support a version of this method.","pos":[583,694],"source":" Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method."}]}]}],"pos":[42540,43235],"yaml":true,"extradata":"MT"},{"content":"The event route that handlers are added to.","nodes":[{"pos":[0,43],"content":"The event route that handlers are added to.","nodes":[{"content":"The event route that handlers are added to.","pos":[0,43]}]}],"pos":[43444,43488],"yaml":true},{"content":"The event data that is used to add the handlers. This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the event data to create the handlers.","nodes":[{"pos":[0,184],"content":"The event data that is used to add the handlers. This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the event data to create the handlers.","nodes":[{"content":"The event data that is used to add the handlers.","pos":[0,48]},{"content":"This method uses the <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"&gt;&lt;/xref&gt;</ph> property of the event data to create the handlers.","pos":[49,184],"source":" This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the event data to create the handlers."}]}],"pos":[43562,43747],"yaml":true},{"content":"Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.","nodes":[{"pos":[0,140],"content":"Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.","nodes":[{"content":"Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.","pos":[0,140],"nodes":[{"content":"Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.","pos":[0,108]},{"content":"This is a dependency property.","pos":[110,140]}]}]}],"pos":[44655,44796],"yaml":true},{"content":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class. Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior. For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  \n  \n <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation. Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system. In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.  \n  \n<a name=\"dependencyPropertyInfo_AllowDrop\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.AllowDropProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,554],"content":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class. Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior. For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).","nodes":[{"content":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>.","pos":[0,152],"source":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`."},{"content":"Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> or any other base element class.","pos":[153,325],"source":" Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class."},{"content":"Certain controls, for example, <ph id=\"ph1\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, do have a default behavior.","pos":[326,428],"source":" Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior."},{"content":"For more information on drag and drop, see <bpt id=\"p1\">[</bpt>Drag and Drop Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.","pos":[429,554],"source":" For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)."}]},{"pos":[561,1519],"content":"<xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation. Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system. In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property in its implementation.","pos":[0,113],"source":"<xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation."},{"content":"Specifically, <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> designates this property to allow property value inheritance (<ph id=\"ph2\">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph> in metadata).","pos":[114,312],"source":" Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata)."},{"content":"Property value inheritance in this context means that if there are child elements with no other value for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AllowDrop%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system.","pos":[313,757],"source":" Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system."},{"content":"In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id=\"ph1\">`false`</ph>.","pos":[758,958],"source":" In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`."}]},{"pos":[1579,1610],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1631,1647],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1648,1697],"content":"<xref:System.Windows.UIElement.AllowDropProperty>","nodes":[]},{"pos":[1702,1735],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1736,1740],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[44807,46563],"yaml":true,"extradata":"MT"},{"content":"`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`. The default value is `false`.","nodes":[{"pos":[0,128],"content":"`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`. The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this element can be used as the target of a drag-and-drop operation; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,98],"source":"`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[99,128],"source":" The default value is `false`."}]}],"pos":[47349,47480],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.AllowDrop\"></xref> dependency property.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.AllowDrop\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.AllowDrop\"></xref> dependency property."}],"pos":[48449,48541],"yaml":true},{"content":"Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.","nodes":[{"pos":[0,145],"content":"Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.","nodes":[{"content":"Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.","pos":[0,145],"nodes":[{"content":"Applies an animation to a specified dependency property on this element.","pos":[0,72]},{"content":"Any existing animations are stopped and replaced with the new animation.","pos":[73,145]}]}]}],"pos":[50005,50151],"yaml":true},{"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"pos":[0,331],"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"content":"To remove an animation from a property, specify the identifier for that property as <ph id=\"ph1\">`dp`</ph> and specify <ph id=\"ph2\">`clock`</ph> as <ph id=\"ph3\">`null`</ph>.","pos":[0,119],"source":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`."},{"content":"This removes the animation and the animated property is set to its base value.","pos":[120,198]},{"content":"However, the originally associated animation clock is not stopped.","pos":[199,265]},{"content":"Any other animations assigned to that clock will continue to run.","pos":[266,331]}]}],"pos":[50162,50494],"yaml":true,"extradata":"MT"},{"content":"The identifier for the property to animate.","nodes":[{"pos":[0,43],"content":"The identifier for the property to animate.","nodes":[{"content":"The identifier for the property to animate.","pos":[0,43]}]}],"pos":[51422,51466],"yaml":true},{"content":"The animation clock that controls and declares the animation.","nodes":[{"pos":[0,61],"content":"The animation clock that controls and declares the animation.","nodes":[{"content":"The animation clock that controls and declares the animation.","pos":[0,61]}]}],"pos":[51559,51621],"yaml":true},{"content":"Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.","nodes":[{"pos":[0,162],"content":"Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.","nodes":[{"content":"Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.","pos":[0,162]}]}],"pos":[53156,53319],"yaml":true},{"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"pos":[0,331],"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"content":"To remove an animation from a property, specify the identifier for that property as <ph id=\"ph1\">`dp`</ph> and specify <ph id=\"ph2\">`clock`</ph> as <ph id=\"ph3\">`null`</ph>.","pos":[0,119],"source":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`."},{"content":"This removes the animation and the animated property is set to its base value.","pos":[120,198]},{"content":"However, the originally associated animation clock is not stopped.","pos":[199,265]},{"content":"Any other animations assigned to that clock will continue to run.","pos":[266,331]}]}],"pos":[53330,53662],"yaml":true,"extradata":"MT"},{"content":"The property to animate.","nodes":[{"pos":[0,24],"content":"The property to animate.","nodes":[{"content":"The property to animate.","pos":[0,24]}]}],"pos":[53968,53993],"yaml":true},{"content":"The animation clock that controls and declares the animation.","nodes":[{"pos":[0,61],"content":"The animation clock that controls and declares the animation.","nodes":[{"content":"The animation clock that controls and declares the animation.","pos":[0,61]}]}],"pos":[54086,54148],"yaml":true},{"content":"A value of the enumeration. The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one.","nodes":[{"pos":[0,199],"content":"A value of the enumeration. The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one.","nodes":[{"content":"A value of the enumeration.","pos":[0,27]},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"&gt;&lt;/xref&gt;</ph>, which will stop any existing animation and replace with the new one.","pos":[28,199],"source":" The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one."}]}],"pos":[54252,54452],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is captured to this element.","nodes":[{"pos":[0,83],"content":"Gets a value that indicates whether at least one touch is captured to this element.","nodes":[{"content":"Gets a value that indicates whether at least one touch is captured to this element.","pos":[0,83]}]}],"pos":[55458,55542],"yaml":true},{"content":"`true` if at least one touch is captured to this element; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is captured to this element; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is captured to this element; otherwise, `false`."}],"pos":[55666,55746],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesCaptured\"></xref> dependency property.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.AreAnyTouchesCaptured\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesCaptured\"></xref> dependency property."}],"pos":[56777,56881],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.","nodes":[{"pos":[0,127],"content":"Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.","nodes":[{"content":"Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.","pos":[0,127]}]}],"pos":[58056,58184],"yaml":true},{"content":"`true` if at least one touch is captured to this element or any child elements in its visual tree; otherwise, `false`.","nodes":[{"pos":[0,118],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is captured to this element or any child elements in its visual tree; otherwise, `false`."}],"pos":[58314,58435],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesCapturedWithin\"></xref> dependency property.","nodes":[{"pos":[0,109],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.AreAnyTouchesCapturedWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesCapturedWithin\"></xref> dependency property."}],"pos":[59530,59640],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is pressed over this element.","nodes":[{"pos":[0,84],"content":"Gets a value that indicates whether at least one touch is pressed over this element.","nodes":[{"content":"Gets a value that indicates whether at least one touch is pressed over this element.","pos":[0,84]}]}],"pos":[60787,60872],"yaml":true},{"content":"`true` if at least one touch is pressed over this element; otherwise, `false`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is pressed over this element; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is pressed over this element; otherwise, `false`."}],"pos":[61000,61081],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesDirectlyOver\"></xref> dependency property.","nodes":[{"pos":[0,107],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.AreAnyTouchesDirectlyOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesDirectlyOver\"></xref> dependency property."}],"pos":[62162,62270],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.","nodes":[{"pos":[0,125],"content":"Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.","nodes":[{"content":"Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.","pos":[0,125]}]}],"pos":[63389,63515],"yaml":true},{"content":"`true` if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, `false`.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, `false`."}],"pos":[63635,63757],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesOver\"></xref> dependency property.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.AreAnyTouchesOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesOver\"></xref> dependency property."}],"pos":[64760,64860],"yaml":true},{"content":"Positions child elements and determines a size for a <xref href=\"System.Windows.UIElement\"></xref>. Parent elements call this method from their <xref href=\"System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\"></xref> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update.","nodes":[{"pos":[0,370],"content":"Positions child elements and determines a size for a <xref href=\"System.Windows.UIElement\"></xref>. Parent elements call this method from their <xref href=\"System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\"></xref> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update.","nodes":[{"content":"Positions child elements and determines a size for a <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","pos":[0,99],"source":"Positions child elements and determines a size for a <xref href=\"System.Windows.UIElement\"></xref>."},{"content":"Parent elements call this method from their <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\"&gt;&lt;/xref&gt;</ph> implementation (or a WPF framework-level equivalent) to form a recursive layout update.","pos":[100,310],"source":" Parent elements call this method from their <xref href=\"System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\"></xref> implementation (or a WPF framework-level equivalent) to form a recursive layout update."},{"content":"This method constitutes the second pass of a layout update.","pos":[311,370]}]}],"pos":[65990,66361],"yaml":true},{"content":"For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class. Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.  \n  \n For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements. Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  \n  \n Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call. During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument. During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).  \n  \n `availableSize` can be any number from zero to infinity. Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.  \n  \n When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.  \n  \n Layout updates generally occur asynchronously (at a time determined by the layout system). An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).  \n  \n> [!NOTE]\n>  Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance. In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates. The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.  \n  \n The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree. Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.  \n  \n When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.","nodes":[{"pos":[0,677],"content":"For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class. Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.","nodes":[{"content":"For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class. Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.","pos":[0,677],"nodes":[{"content":"For WPF framework-level element deriving scenarios, behavior for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> should not (and cannot, unless you shadow) be changed.","pos":[0,162],"source":"For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed."},{"content":"Instead, you should override the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> implementation in your class.","pos":[163,283],"source":" Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class."},{"content":"Your <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> implementation is called internally by <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> as part of default WPF framework-level layout operations.","pos":[284,486],"source":" Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations."},{"content":"Your <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation should also call <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph> on each child element, if it has child elements.","pos":[487,677],"source":" Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements."}]}]},{"pos":[684,1776],"content":"For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements. Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.","nodes":[{"content":"For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements. Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.","pos":[0,1092],"nodes":[{"content":"For WPF core-level element deriving scenarios, the behavior for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> should not (and cannot, unless you shadow) be changed.","pos":[0,161],"source":"For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed."},{"content":"Instead, you should override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> in your class.","pos":[162,252],"source":" Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class."},{"content":"Your <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation is called internally by <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> as part of default WPF framework-level layout operations.","pos":[253,444],"source":" Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations."},{"content":"However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> base element class.","pos":[445,683],"source":" However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class."},{"content":"Your <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> implementation should also call <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> on each child element, if it has child elements.","pos":[684,859],"source":" Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements."},{"content":"Note that the WPF core-level scenario implies that you are not using a <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, because <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>.","pos":[860,1092],"source":" Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>."}]}]},{"pos":[1783,2437],"content":"Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call. During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument. During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"content":"Computation of WPF framework-level layout positioning in <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> consists of a <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call and an <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.","pos":[0,244],"source":"Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call."},{"content":"During the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call, the layout system determines an element's size requirements using a provided <ph id=\"ph2\">&lt;xref:System.Windows.Size&gt;</ph> (<ph id=\"ph3\">`availableSize`</ph>) argument.","pos":[245,436],"source":" During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument."},{"content":"During the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call, the layout system finalizes the size and position of an element's bounding box.","pos":[437,576],"source":" During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Layout<ept id=\"p1\">](~/docs/framework/wpf/advanced/layout.md)</ept>.","pos":[578,654],"source":"  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md)."}]},{"pos":[2444,2622],"content":"`availableSize` can be any number from zero to infinity. Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.","nodes":[{"content":"<ph id=\"ph1\">`availableSize`</ph> can be any number from zero to infinity.","pos":[0,56],"source":"`availableSize` can be any number from zero to infinity."},{"content":"Elements to be laid out return the minimum <ph id=\"ph1\">&lt;xref:System.Windows.Size&gt;</ph> they require through the <ph id=\"ph2\">`availableSize`</ph> parameter.","pos":[57,178],"source":" Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter."}]},{"pos":[2629,3328],"content":"When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.","nodes":[{"content":"When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.","pos":[0,699],"nodes":[{"content":"When a layout is first instantiated, it always receives a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call before <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.","pos":[0,156],"source":"When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>."},{"content":"However, after the first layout pass, it may receive an <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call without a <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; this can happen when a property that affects only <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> is changed (such as alignment), or when the parent receives an <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> without a <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.","pos":[157,567],"source":" However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call will automatically invalidate an <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.","pos":[568,699],"source":" A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call."}]}]},{"pos":[3335,3574],"content":"Layout updates generally occur asynchronously (at a time determined by the layout system). An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).","nodes":[{"content":"Layout updates generally occur asynchronously (at a time determined by the layout system). An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).","pos":[0,239],"nodes":[{"content":"Layout updates generally occur asynchronously (at a time determined by the layout system).","pos":[0,90]},{"content":"An element might not immediately reflect changes to properties that affect element sizing (such as <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>).","pos":[91,239],"source":" An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>)."}]}]},{"pos":[3582,4087],"content":"[!NOTE]\n Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance. In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates. The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.","leadings":["","> "],"nodes":[{"content":" Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance. In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates. The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.","pos":[8,503],"nodes":[{"content":"Layout updates can be forced by using the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance.","pos":[1,210],"source":" Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance."},{"content":"In many situations where calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> might be appropriate, the layout system will probably already be processing updates.","pos":[211,376],"source":" In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates."},{"content":"The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.","pos":[377,495]}]}]},{"pos":[4094,4617],"content":"The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree. Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.","nodes":[{"content":"The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree. Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.","pos":[0,523],"nodes":[{"content":"The layout system keeps two separate queues of invalid layouts, one for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and one for <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.","pos":[0,170],"source":"The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>."},{"content":"The layout queue is sorted based upon the order of elements in the visual tree.","pos":[171,250]},{"content":"Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents.","pos":[251,382]},{"content":"Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.","pos":[383,523]}]}]},{"pos":[4624,4952],"content":"When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.","nodes":[{"content":"When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.","pos":[0,328],"nodes":[{"content":"When updating layout, the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue is emptied first, followed by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue.","pos":[0,158],"source":"When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue."},{"content":"An element in the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue will never be arranged if there is an element in the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue.","pos":[159,328],"source":" An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue."}]}]}],"pos":[66372,71344],"yaml":true,"extradata":"MT"},{"content":"The final size that the parent computes for the child element, provided as a <xref href=\"System.Windows.Rect\"></xref> instance.","nodes":[{"pos":[0,127],"content":"The final size that the parent computes for the child element, provided as a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Rect\"&gt;&lt;/xref&gt;</ph> instance.","source":"The final size that the parent computes for the child element, provided as a <xref href=\"System.Windows.Rect\"></xref> instance."}],"pos":[71507,71635],"yaml":true},{"content":"Defines the template for WPF core-level arrange layout definition.","nodes":[{"pos":[0,66],"content":"Defines the template for WPF core-level arrange layout definition.","nodes":[{"content":"Defines the template for WPF core-level arrange layout definition.","pos":[0,66]}]}],"pos":[72648,72715],"yaml":true},{"content":"> [!NOTE]\n>  Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.","nodes":[{"pos":[2,520],"content":"[!NOTE]\n Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.","leadings":["","> "],"nodes":[{"content":" Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.","pos":[8,516],"nodes":[{"content":"Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class, because <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.ArrangeCore%2A&gt;</ph>.","pos":[1,312],"source":" Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>."},{"content":"If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>.","pos":[313,508],"source":" If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>."}]}]}],"pos":[72726,73259],"yaml":true,"extradata":"MT"},{"content":"The final area within the parent that element should use to arrange itself and its child elements.","nodes":[{"pos":[0,98],"content":"The final area within the parent that element should use to arrange itself and its child elements.","nodes":[{"content":"The final area within the parent that element should use to arrange itself and its child elements.","pos":[0,98]}]}],"pos":[74675,74774],"yaml":true},{"content":"Starts an animation for a specified animated property on this element.","nodes":[{"pos":[0,70],"content":"Starts an animation for a specified animated property on this element.","nodes":[{"content":"Starts an animation for a specified animated property on this element.","pos":[0,70]}]}],"pos":[76097,76168],"yaml":true},{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \n  \n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \n  \n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"pos":[0,181],"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","nodes":[{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","pos":[0,181]}]},{"pos":[188,368],"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id=\"ph2\">`animation`</ph> is <ph id=\"ph3\">`null`</ph>, then any current animations are removed and the current value of the property is held.","source":"If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held."},{"pos":[375,651],"content":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"content":"If the entire <ph id=\"ph1\">`animation`</ph> value is <ph id=\"ph2\">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.","pos":[0,137],"source":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value."},{"content":"However, the originally associated animation timeline is not stopped.","pos":[138,207]},{"content":"Any other animations assigned to that timeline will continue to run.","pos":[208,276]}]}],"pos":[76179,76837],"yaml":true,"extradata":"MT"},{"content":"The property to animate, which is specified as a dependency property identifier.","nodes":[{"pos":[0,80],"content":"The property to animate, which is specified as a dependency property identifier.","nodes":[{"content":"The property to animate, which is specified as a dependency property identifier.","pos":[0,80]}]}],"pos":[77632,77713],"yaml":true},{"content":"The timeline of the animation to start.","nodes":[{"pos":[0,39],"content":"The timeline of the animation to start.","nodes":[{"content":"The timeline of the animation to start.","pos":[0,39]}]}],"pos":[77813,77853],"yaml":true},{"content":"Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.","nodes":[{"pos":[0,170],"content":"Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.","nodes":[{"content":"Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.","pos":[0,170]}]}],"pos":[79349,79520],"yaml":true},{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \n  \n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \n  \n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"pos":[0,181],"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","nodes":[{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","pos":[0,181]}]},{"pos":[188,368],"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id=\"ph2\">`animation`</ph> is <ph id=\"ph3\">`null`</ph>, then any current animations are removed and the current value of the property is held.","source":"If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held."},{"pos":[375,651],"content":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"content":"If the entire <ph id=\"ph1\">`animation`</ph> value is <ph id=\"ph2\">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.","pos":[0,137],"source":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value."},{"content":"However, the originally associated animation timeline is not stopped.","pos":[138,207]},{"content":"Any other animations assigned to that timeline will continue to run.","pos":[208,276]}]}],"pos":[79531,80189],"yaml":true,"extradata":"MT"},{"content":"The property to animate, which is specified as the dependency property identifier.","nodes":[{"pos":[0,82],"content":"The property to animate, which is specified as the dependency property identifier.","nodes":[{"content":"The property to animate, which is specified as the dependency property identifier.","pos":[0,82]}]}],"pos":[81066,81149],"yaml":true},{"content":"The timeline of the animation to be applied.","nodes":[{"pos":[0,44],"content":"The timeline of the animation to be applied.","nodes":[{"content":"The timeline of the animation to be applied.","pos":[0,44]}]}],"pos":[81249,81294],"yaml":true},{"content":"A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.","nodes":[{"pos":[0,158],"content":"A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.","nodes":[{"content":"A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.","pos":[0,158]}]}],"pos":[81398,81557],"yaml":true},{"content":"Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.","nodes":[{"pos":[0,124],"content":"Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.","nodes":[{"content":"Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.","pos":[0,124],"nodes":[{"content":"Gets or sets a bitmap effect that applies directly to the rendered content for this element.","pos":[0,92]},{"content":"This is a dependency property.","pos":[94,124]}]}]}],"pos":[82504,82629],"yaml":true},{"content":"<xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.  \n  \n No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.  \n  \n<a name=\"dependencyPropertyInfo_BitmapEffect\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.BitmapEffectProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,499],"content":"<xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> is an abstract type, therefore the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usage requires an implemented derived class of <ph id=\"ph3\">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, such as <ph id=\"ph4\">&lt;xref:System.Windows.Media.Effects.OuterGlowBitmapEffect&gt;</ph>.","pos":[0,309],"source":"<xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>."},{"content":"Note that one implemented derived class is a collection type that allows you to specify more than one sequential <ph id=\"ph1\">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph>, using a nested tag syntax.","pos":[310,499],"source":" Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax."}]},{"pos":[506,755],"content":"No existing derived class of <ph id=\"ph1\">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> supports a type converter, so the <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> syntax that you use for this property is generally property element syntax.","source":"No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax."},{"pos":[818,849],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[870,886],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[887,939],"content":"<xref:System.Windows.UIElement.BitmapEffectProperty>","nodes":[]},{"pos":[944,977],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[978,982],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[82640,83638],"yaml":true,"extradata":"MT"},{"content":"The bitmap effect to apply.","nodes":[{"pos":[0,27],"content":"The bitmap effect to apply.","nodes":[{"content":"The bitmap effect to apply.","pos":[0,27]}]}],"pos":[84304,84332],"yaml":true},{"content":"Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.","nodes":[{"pos":[0,146],"content":"Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.","nodes":[{"content":"Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.","pos":[0,146],"nodes":[{"content":"Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.","pos":[0,114]},{"content":"This is a dependency property.","pos":[116,146]}]}]}],"pos":[85356,85503],"yaml":true},{"content":"<a name=\"dependencyPropertyInfo_BitmapEffectInput\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[62,93],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[114,130],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[131,188],"content":"<xref:System.Windows.UIElement.BitmapEffectInputProperty>","nodes":[]},{"pos":[193,226],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[227,231],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[85514,85757],"yaml":true,"extradata":"MT"},{"content":"The source for bitmap effects.","nodes":[{"pos":[0,30],"content":"The source for bitmap effects.","nodes":[{"content":"The source for bitmap effects.","pos":[0,30]}]}],"pos":[86097,86128],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.BitmapEffectInput\"></xref> dependency property.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.BitmapEffectInput\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.BitmapEffectInput\"></xref> dependency property."}],"pos":[87202,87302],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.BitmapEffect\"></xref> dependency property.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.BitmapEffect\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.BitmapEffect\"></xref> dependency property."}],"pos":[88428,88523],"yaml":true},{"content":"Gets or sets a cached representation of the <xref href=\"System.Windows.UIElement\"></xref>.","nodes":[{"pos":[0,90],"content":"Gets or sets a cached representation of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets a cached representation of the <xref href=\"System.Windows.UIElement\"></xref>."}],"pos":[89581,89672],"yaml":true},{"content":"Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render. For more information, see <xref:System.Windows.Media.BitmapCache>.","nodes":[{"pos":[0,212],"content":"Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render. For more information, see <xref:System.Windows.Media.BitmapCache>.","nodes":[{"content":"Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render. For more information, see <xref:System.Windows.Media.BitmapCache>.","pos":[0,212],"nodes":[{"content":"Set the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CacheMode%2A&gt;</ph> property when you need to increase performance for content that is time consuming to render.","pos":[0,145],"source":"Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Media.BitmapCache&gt;</ph>.","pos":[146,212],"source":" For more information, see <xref:System.Windows.Media.BitmapCache>."}]}]}],"pos":[89683,89896],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Media.CacheMode\"></xref> that holds a cached representation of the <xref href=\"System.Windows.UIElement\"></xref>.","nodes":[{"pos":[0,142],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.CacheMode\"&gt;&lt;/xref&gt;</ph> that holds a cached representation of the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Windows.Media.CacheMode\"></xref> that holds a cached representation of the <xref href=\"System.Windows.UIElement\"></xref>."}],"pos":[90055,90198],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.CacheMode\"></xref> dependency property.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.CacheMode\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.CacheMode\"></xref> dependency property."}],"pos":[91167,91259],"yaml":true},{"content":"Attempts to force capture of the mouse to this element.","nodes":[{"pos":[0,55],"content":"Attempts to force capture of the mouse to this element.","nodes":[{"content":"Attempts to force capture of the mouse to this element.","pos":[0,55]}]}],"pos":[92336,92392],"yaml":true},{"content":"To be captured, an element must be enabled. Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.  \n  \n If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.  \n  \n If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.  \n  \n To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with the `element` parameter provided as `null`.","nodes":[{"pos":[0,177],"content":"To be captured, an element must be enabled. Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.","nodes":[{"content":"To be captured, an element must be enabled.","pos":[0,43]},{"content":"Check whether <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> before you call <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph>.","pos":[44,177],"source":" Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>."}]},{"pos":[184,330],"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, then <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> is also <ph id=\"ph4\">`true`</ph>.","source":"If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`."},{"pos":[337,877],"content":"If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.","nodes":[{"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, then the <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> events are raised, with <ph id=\"ph5\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt;</ph> in the event data reported as the element where the <ph id=\"ph6\">&lt;xref:System.Windows.UIElement.CaptureMouse%2A&gt;</ph> method is called.","pos":[0,405],"source":"If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called."},{"content":"If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.","pos":[406,540]}]},{"pos":[884,1049],"content":"To clear mouse capture from all elements, call <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt;</ph> with the <ph id=\"ph2\">`element`</ph> parameter provided as <ph id=\"ph3\">`null`</ph>.","source":"To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with the `element` parameter provided as `null`."}],"pos":[92403,93461],"yaml":true,"extradata":"MT"},{"content":"`true` if the mouse is successfully captured; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the mouse is successfully captured; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the mouse is successfully captured; otherwise, `false`."}],"pos":[94108,94176],"yaml":true},{"content":"Attempts to force capture of the stylus to this element.","nodes":[{"pos":[0,56],"content":"Attempts to force capture of the stylus to this element.","nodes":[{"content":"Attempts to force capture of the stylus to this element.","pos":[0,56]}]}],"pos":[95131,95188],"yaml":true},{"content":"The default implementation based on the underlying default stylus device always returns `true`. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.  \n  \n When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \n  \n Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.  \n  \n To be captured, an element must be enabled. Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.  \n  \n If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.","nodes":[{"pos":[0,324],"content":"The default implementation based on the underlying default stylus device always returns `true`. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.","nodes":[{"content":"The default implementation based on the underlying default stylus device always returns <ph id=\"ph1\">`true`</ph>.","pos":[0,95],"source":"The default implementation based on the underlying default stylus device always returns `true`."},{"content":"However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.","pos":[96,324]}]},{"pos":[331,505],"content":"When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","pos":[0,174],"nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.","pos":[0,103]},{"content":"The stylus is typically captured only during drag-and-drop operations.","pos":[104,174]}]}]},{"pos":[512,734],"content":"Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.","nodes":[{"content":"Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.","pos":[0,222],"nodes":[{"content":"Calling this method calls an underlying static <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus&gt;</ph> method <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.","pos":[0,135],"source":"Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>."},{"content":"The actual capture behavior is implemented by the active stylus device implementation.","pos":[136,222]}]}]},{"pos":[741,926],"content":"To be captured, an element must be enabled. Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.","nodes":[{"content":"To be captured, an element must be enabled.","pos":[0,43]},{"content":"Check whether <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> return before you call <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph>.","pos":[44,185],"source":" Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>."}]},{"pos":[933,1076],"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CaptureStylus%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> is also <ph id=\"ph4\">`true`</ph>.","source":"If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`."}],"pos":[95199,96286],"yaml":true,"extradata":"MT"},{"content":"`true` if the stylus was successfully captured; otherwise, `false`.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">`true`</ph> if the stylus was successfully captured; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the stylus was successfully captured; otherwise, `false`."}],"pos":[96416,96486],"yaml":true},{"content":"Attempts to force capture of a touch to this element.","nodes":[{"pos":[0,53],"content":"Attempts to force capture of a touch to this element.","nodes":[{"content":"Attempts to force capture of a touch to this element.","pos":[0,53]}]}],"pos":[97571,97625],"yaml":true},{"content":"<xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.  \n  \n If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.  \n  \n To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.","nodes":[{"pos":[0,156],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> will return <ph id=\"ph2\">`false`</ph> if the <ph id=\"ph3\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is currently captured to another element.","source":"<xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element."},{"pos":[163,303],"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CaptureTouch%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, then the <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> event is raised.","source":"If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised."},{"pos":[310,593],"content":"To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.","nodes":[{"content":"To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.","pos":[0,283],"nodes":[{"content":"To release capture of a single touch from this element, use the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ReleaseTouchCapture%2A&gt;</ph> method and specify the touch device to release.","pos":[0,166],"source":"To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release."},{"content":"To release all touches from this element, use the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A&gt;</ph> method.","pos":[167,283],"source":" To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method."}]}]}],"pos":[97636,98236],"yaml":true,"extradata":"MT"},{"content":"The device to capture.","nodes":[{"pos":[0,22],"content":"The device to capture.","nodes":[{"content":"The device to capture.","pos":[0,22]}]}],"pos":[98434,98457],"yaml":true},{"content":"`true` if the specified touch is captured to this element; otherwise, `false`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">`true`</ph> if the specified touch is captured to this element; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified touch is captured to this element; otherwise, `false`."}],"pos":[98515,98596],"yaml":true},{"content":"<code>touchDevice</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>touchDevice</code> is `null`."}],"pos":[98763,98799],"yaml":true},{"content":"Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.","nodes":[{"pos":[0,115],"content":"Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.","nodes":[{"content":"Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.","pos":[0,115],"nodes":[{"content":"Gets or sets the geometry used to define the outline of the contents of an element.","pos":[0,83]},{"content":"This is a dependency property.","pos":[85,115]}]}]}],"pos":[99606,99722],"yaml":true},{"content":"Elements outside the geometry will be visually clipped in the rendered layout. The geometry does not have to be rectangular.  \n  \n<a name=\"dependencyPropertyInfo_Clip\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ClipProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,124],"content":"Elements outside the geometry will be visually clipped in the rendered layout. The geometry does not have to be rectangular.","nodes":[{"content":"Elements outside the geometry will be visually clipped in the rendered layout. The geometry does not have to be rectangular.","pos":[0,124],"nodes":[{"content":"Elements outside the geometry will be visually clipped in the rendered layout.","pos":[0,78]},{"content":"The geometry does not have to be rectangular.","pos":[79,124]}]}]},{"pos":[179,210],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[231,247],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[248,292],"content":"<xref:System.Windows.UIElement.ClipProperty>","nodes":[]},{"pos":[297,330],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[331,335],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[99733,100082],"yaml":true,"extradata":"MT"},{"content":"The geometry to be used for clipping area sizing. The default is a null <xref href=\"System.Windows.Media.Geometry\"></xref>.","nodes":[{"pos":[0,123],"content":"The geometry to be used for clipping area sizing. The default is a null <xref href=\"System.Windows.Media.Geometry\"></xref>.","nodes":[{"content":"The geometry to be used for clipping area sizing.","pos":[0,49]},{"content":"The default is a null <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Geometry\"&gt;&lt;/xref&gt;</ph>.","pos":[50,123],"source":" The default is a null <xref href=\"System.Windows.Media.Geometry\"></xref>."}]}],"pos":[102345,102469],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.Clip\"></xref> dependency property.","nodes":[{"pos":[0,86],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Clip\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.Clip\"></xref> dependency property."}],"pos":[103403,103490],"yaml":true},{"content":"Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.","nodes":[{"pos":[0,216],"content":"Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.","nodes":[{"content":"Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.","pos":[0,216],"nodes":[{"content":"Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.","pos":[0,183]},{"content":"This is a dependency property.","pos":[186,216]}]}]}],"pos":[104558,104775],"yaml":true},{"content":"For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums. The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.  \n  \n Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class. It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead. Several existing derived classes override this metadata and/or adjust the dependency property default value.  \n  \n <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.  \n  \n <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property. Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system. In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.  \n  \n<a name=\"dependencyPropertyInfo_ClipToBounds\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,1009],"content":"For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums. The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.","nodes":[{"content":"For child elements, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph><ph id=\"ph3\"> / </ph><ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> or <ph id=\"ph5\">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id=\"ph6\"> / </ph><ph id=\"ph7\">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph>.","pos":[0,405],"source":"For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.MaxHeight%2A&gt;</ph><ph id=\"ph2\"> / </ph><ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.MaxWidth%2A&gt;</ph> of the parent element are always respected regardless of the value of <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> and the effective clipping will always clip the content based on these maximums.","pos":[406,709],"source":" <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums."},{"content":"The parent's <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph><ph id=\"ph2\"> / </ph><ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> settings will not clip the content when <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id=\"ph5\">`false`</ph>, but will clip the content if <ph id=\"ph6\">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> is <ph id=\"ph7\">`true`</ph>.","pos":[710,1009],"source":" The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`."}]},{"pos":[1016,1438],"content":"Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class. It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead. Several existing derived classes override this metadata and/or adjust the dependency property default value.","nodes":[{"content":"Note that defaulting to <ph id=\"ph1\">`false`</ph> is the general behavior as implemented in the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> class.","pos":[0,116],"source":"Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class."},{"content":"It is possible for any given element that derives from <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> to override the dependency property metadata for this property in that instance to default to <ph id=\"ph2\">`true`</ph> instead.","pos":[117,313],"source":" It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead."},{"content":"Several existing derived classes override this metadata and/or adjust the dependency property default value.","pos":[314,422]}]},{"pos":[1445,1629],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Controls.InkPresenter&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> each override the default value to be <ph id=\"ph4\">`true`</ph>.","source":"<xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`."},{"pos":[1636,2565],"content":"<xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property. Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system. In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property.","pos":[0,91],"source":"<xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property."},{"content":"Specifically, <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> designates this property to allow property value inheritance (<ph id=\"ph2\">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph> in metadata).","pos":[92,290],"source":" Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata)."},{"content":"Property value inheritance in this context means that if there are child elements with no other value for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ClipToBounds%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system.","pos":[291,729],"source":" Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system."},{"content":"In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as <ph id=\"ph1\">`false`</ph>.","pos":[730,929],"source":" In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`."}]},{"pos":[2628,2659],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[2680,2696],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2697,2749],"content":"<xref:System.Windows.UIElement.ClipToBoundsProperty>","nodes":[]},{"pos":[2754,2787],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[2788,2792],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[104786,107598],"yaml":true,"extradata":"MT"},{"content":"`true` if the content should be clipped; otherwise, `false`. The default value is `false`.","nodes":[{"pos":[0,90],"content":"`true` if the content should be clipped; otherwise, `false`. The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the content should be clipped; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,60],"source":"`true` if the content should be clipped; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[61,90],"source":" The default value is `false`."}]}],"pos":[107718,107811],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.ClipToBounds\"></xref> dependency property.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ClipToBounds\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.ClipToBounds\"></xref> dependency property."}],"pos":[108801,108896],"yaml":true},{"content":"Gets a collection of <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects associated with this element. A <xref href=\"System.Windows.Input.CommandBinding\"></xref> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.","nodes":[{"pos":[0,316],"content":"Gets a collection of <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects associated with this element. A <xref href=\"System.Windows.Input.CommandBinding\"></xref> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.","nodes":[{"content":"Gets a collection of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> objects associated with this element.","pos":[0,115],"source":"Gets a collection of <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects associated with this element."},{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.","pos":[116,316],"source":" A <xref href=\"System.Windows.Input.CommandBinding\"></xref> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element."}]}],"pos":[109990,110307],"yaml":true},{"content":"Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.  \n  \n<a name=\"xamlPropertyElementUsage_CommandBindings\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.CommandBindings>  \n    oneOrMoreCommandBindings  \n  </object.CommandBindings>  \n</object>  \n```  \n  \n<a name=\"xamlValues_CommandBindings\"></a>   \n## XAML Values  \n *oneOrMoreCommandBindings*  \n One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.","nodes":[{"pos":[0,176],"content":"Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.","nodes":[{"content":"Another typical way to populate the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> collection is to use <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> methods programmatically.","pos":[0,176],"source":"Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically."}]},{"pos":[244,271],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[453,464],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[468,909],"content":"*oneOrMoreCommandBindings*  \n One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>oneOrMoreCommandBindings<ept id=\"p1\">*</ept>","pos":[0,26],"source":"*oneOrMoreCommandBindings*"},{"content":" One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.","pos":[29,441],"nodes":[{"content":"One or more <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements.","pos":[1,65],"source":" One or more <xref:System.Windows.Input.CommandBinding> elements."},{"content":"Each of these should have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> attribute set to a known command, and attributes set for the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler implementations.","pos":[66,343],"source":" Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations."},{"content":"For more information see <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.","pos":[344,412],"source":" For more information see <xref:System.Windows.Input.CommandBinding>."}]}]}],"pos":[110318,111250],"yaml":true,"extradata":"MT"},{"content":"The collection of all <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects.","nodes":[{"pos":[0,87],"content":"The collection of all <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> objects.","source":"The collection of all <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects."}],"pos":[112757,112845],"yaml":true},{"content":"Gets the size that this element computed during the measure pass of the layout process.","nodes":[{"pos":[0,87],"content":"Gets the size that this element computed during the measure pass of the layout process.","nodes":[{"content":"Gets the size that this element computed during the measure pass of the layout process.","pos":[0,87]}]}],"pos":[113804,113892],"yaml":true},{"content":"The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.  \n  \n <xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation). Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element. For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>. The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control. Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.","nodes":[{"pos":[0,158],"content":"The value returned by this property will only be a valid measurement if the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> property is <ph id=\"ph2\">`true`</ph>.","source":"The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`."},{"pos":[165,1472],"content":"<xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation). Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element. For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>. The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control. Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.ArrangeOverride%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>, or <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> (in the <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> case, you might check <ph id=\"ph6\">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> instead, but this depends on your implementation).","pos":[0,490],"source":"<xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation)."},{"content":"Depending on the scenario, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> might be fully respected by your implementation logic, constraints on <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> might be applied, and such constraints might also change other characteristics of either the parent element or child element.","pos":[491,807],"source":" Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element."},{"content":"For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph>.","pos":[808,1048],"source":" For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>."},{"content":"The control could then set an internal state that enabled scrollbars in the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> for that control.","pos":[1049,1200],"source":" The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control."},{"content":"Or, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DesiredSize%2A&gt;</ph> could potentially also be ignored in certain scenarios.","pos":[1201,1307],"source":" Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios."}]}],"pos":[113903,115380],"yaml":true,"extradata":"MT"},{"content":"The computed size, which becomes the desired size for the arrange pass.","nodes":[{"pos":[0,71],"content":"The computed size, which becomes the desired size for the arrange pass.","nodes":[{"content":"The computed size, which becomes the desired size for the arrange pass.","pos":[0,71]}]}],"pos":[116246,116318],"yaml":true},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","pos":[0,99]}]}],"pos":[117241,117341],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_DragEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.DragEnterEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.  \n  \n-   Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,552],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,552],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.DragEnter?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,310],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[311,552],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[605,629],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[650,666],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[667,713],"content":"<xref:System.Windows.UIElement.DragEnterEvent>","nodes":[]},{"pos":[718,734],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[735,743],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[748,756],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[757,795],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[806,892],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph>.","pos":[0,86],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>."}]},{"pos":[902,1020],"content":"Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[117352,118390],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.DragEnter\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.DragEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.DragEnter\"></xref> routed event."}],"pos":[119450,119535],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[119546,120086],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","pos":[0,99]}]}],"pos":[121121,121221],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_DragLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.DragLeaveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.  \n  \n-   Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,551],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,551],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.DragLeave?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,309],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[310,551],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[604,628],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[649,665],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[666,712],"content":"<xref:System.Windows.UIElement.DragLeaveEvent>","nodes":[]},{"pos":[717,733],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[734,742],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[747,755],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[756,794],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[805,890],"content":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.","pos":[0,85],"source":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>."}]},{"pos":[900,1018],"content":"Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[121232,122268],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.DragLeave\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.DragLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.DragLeave\"></xref> routed event."}],"pos":[123328,123413],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[123424,123964],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"pos":[0,109],"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","pos":[0,109]}]}],"pos":[124993,125103],"yaml":true},{"content":"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_DragOver\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.DragOverEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.  \n  \n-   Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,237],"content":"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.","nodes":[{"content":"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.","pos":[0,237],"nodes":[{"content":"This event occurs even if the drag originates in the element bounds.","pos":[0,68]},{"content":"If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph> and related preview events.","pos":[69,237],"source":" If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events."}]}]},{"pos":[244,791],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,547],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.DragOver?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,307],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[308,547],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[843,867],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[888,904],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[905,950],"content":"<xref:System.Windows.UIElement.DragOverEvent>","nodes":[]},{"pos":[955,971],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[972,980],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[985,993],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[994,1032],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[1043,1127],"content":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.","pos":[0,84],"source":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>."}]},{"pos":[1137,1254],"content":"Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,117],"source":"Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes."}]}],"pos":[125114,126388],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.DragOver\"></xref> routed event.","nodes":[{"pos":[0,83],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.DragOver\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.DragOver\"></xref> routed event."}],"pos":[127419,127503],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[127514,128054],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","pos":[0,99]}]}],"pos":[129058,129158],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_Drop\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.DropEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.  \n  \n-   Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,531],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,531],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Drop?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,299],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Drop&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[300,531],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[579,603],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[624,640],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[641,682],"content":"<xref:System.Windows.UIElement.DropEvent>","nodes":[]},{"pos":[687,703],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[704,712],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[717,725],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[726,764],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[775,856],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph>.","pos":[0,81],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>."}]},{"pos":[866,979],"content":"Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnDrop%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,113],"source":"Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes."}]}],"pos":[129169,130166],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.Drop\"></xref> routed event.","nodes":[{"pos":[0,79],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Drop\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.Drop\"></xref> routed event."}],"pos":[131169,131249],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[131260,131800],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the bitmap effect to apply to the <xref href=\"System.Windows.UIElement\"></xref>. This is a dependency property.","nodes":[{"pos":[0,124],"content":"Gets or sets the bitmap effect to apply to the <xref href=\"System.Windows.UIElement\"></xref>. This is a dependency property.","nodes":[{"content":"Gets or sets the bitmap effect to apply to the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","pos":[0,93],"source":"Gets or sets the bitmap effect to apply to the <xref href=\"System.Windows.UIElement\"></xref>."},{"content":"This is a dependency property.","pos":[94,124]}]}],"pos":[132815,132940],"yaml":true},{"content":"Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.  \n  \n<a name=\"dependencyPropertyInfo_Effect\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.EffectProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,121],"content":"Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.","nodes":[{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Effect%2A&gt;</ph> property to apply a bitmap effect to a <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,121],"source":"Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>."}]},{"pos":[178,209],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[230,246],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[247,293],"content":"<xref:System.Windows.UIElement.EffectProperty>","nodes":[]},{"pos":[298,331],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[332,336],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[132951,133301],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Windows.Media.Effects.Effect\"></xref> that represents the bitmap effect.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Effects.Effect\"&gt;&lt;/xref&gt;</ph> that represents the bitmap effect.","source":"An <xref href=\"System.Windows.Media.Effects.Effect\"></xref> that represents the bitmap effect."}],"pos":[133814,133909],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.Effect\"></xref> dependency property.","nodes":[{"pos":[0,88],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Effect\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.Effect\"></xref> dependency property."}],"pos":[134835,134924],"yaml":true},{"content":"Attempts to set focus to this element.","nodes":[{"pos":[0,38],"content":"Attempts to set focus to this element.","nodes":[{"content":"Attempts to set focus to this element.","pos":[0,38]}]}],"pos":[135956,135995],"yaml":true},{"content":"To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.  \n  \n Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.  \n  \n Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.  For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.  \n  \n If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).  \n  \n In order for this call to be successful, some other element in the application needed to have focus previously.","nodes":[{"pos":[0,131],"content":"To be focusable, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> must both be <ph id=\"ph3\">`true`</ph>.","source":"To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`."},{"pos":[138,365],"content":"Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id=\"ph1\">`false`</ph>.","source":"Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`."},{"pos":[372,655],"content":"Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.  For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.","pos":[0,120]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Focus Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> or <bpt id=\"p2\">[</bpt>Input Overview<ept id=\"p2\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[122,283],"source":"  For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[662,860],"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are also <ph id=\"ph5\">`true`</ph>.","source":"If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`."},{"pos":[867,1446],"content":"If the related properties are not already <ph id=\"ph1\">`true`</ph>, when you call  <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, one or more of the following events are raised in the following order: <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> (source is the new focus target), <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> (source is the new focus target).","source":"If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target)."},{"pos":[1453,1564],"content":"In order for this call to be successful, some other element in the application needed to have focus previously.","nodes":[{"content":"In order for this call to be successful, some other element in the application needed to have focus previously.","pos":[0,111]}]}],"pos":[136006,137583],"yaml":true,"extradata":"MT"},{"content":"`true` if keyboard focus and logical focus were set to this element; `false` if only logical focus was set to this element, or if the call to this method did not force the focus to change.","nodes":[{"pos":[0,188],"content":"<ph id=\"ph1\">`true`</ph> if keyboard focus and logical focus were set to this element; <ph id=\"ph2\">`false`</ph> if only logical focus was set to this element, or if the call to this method did not force the focus to change.","source":"`true` if keyboard focus and logical focus were set to this element; `false` if only logical focus was set to this element, or if the call to this method did not force the focus to change."}],"pos":[138276,138467],"yaml":true},{"content":"Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.","nodes":[{"pos":[0,106],"content":"Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.","nodes":[{"content":"Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.","pos":[0,106],"nodes":[{"content":"Gets or sets a value that indicates whether the element can receive focus.","pos":[0,74]},{"content":"This is a dependency property.","pos":[76,106]}]}]}],"pos":[139365,139472],"yaml":true},{"content":"Only the focused element receives keyboard input.  \n  \n <xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent \"default\" value set differently in derived element classes, particularly in controls. This commonly occurs in one of two ways:  \n  \n-   The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.  \n  \n-   A style or template is applied to an element, which sets that dependency property value differently.  \n  \n For example, the apparent \"default\" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>. This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.  \n  \n When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.  \n  \n When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.  \n  \n<a name=\"dependencyPropertyInfo_Focusable\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.FocusableProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,49],"content":"Only the focused element receives keyboard input.","nodes":[{"content":"Only the focused element receives keyboard input.","pos":[0,49]}]},{"pos":[56,426],"content":"<xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent \"default\" value set differently in derived element classes, particularly in controls. This commonly occurs in one of two ways:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> is the <ph id=\"ph2\">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> property accessor for what is in reality a dependency property.","pos":[0,173],"source":"<xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property."},{"content":"This particular dependency property quite frequently has its apparent \"default\" value set differently in derived element classes, particularly in controls.","pos":[174,329]},{"content":"This commonly occurs in one of two ways:","pos":[330,370]}]},{"pos":[436,616],"content":"The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.","nodes":[{"content":"The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.","pos":[0,180]}]},{"pos":[626,726],"content":"A style or template is applied to an element, which sets that dependency property value differently.","nodes":[{"content":"A style or template is applied to an element, which sets that dependency property value differently.","pos":[0,100]}]},{"pos":[733,1450],"content":"For example, the apparent \"default\" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>. This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.","nodes":[{"content":"For example, the apparent \"default\" of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> for a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> control will be <ph id=\"ph3\">`true`</ph>, even though <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Button&gt;</ph> inherits <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> as a <ph id=\"ph6\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> property directly from <ph id=\"ph7\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,374],"source":"For example, the apparent \"default\" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>."},{"content":"This is because the applied metadata value for the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focusable%2A&gt;</ph> dependency property was overridden within the static constructor of the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control&gt;</ph> base class, which is situated between <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.UIElement&gt;</ph> in the class hierarchy.","pos":[375,717],"source":" This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy."}]},{"pos":[1457,1635],"content":"When inherited by <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> or its derived classes, <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control&gt;</ph> redefines the default value of this property to be <ph id=\"ph3\">`true`</ph>.","source":"When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`."},{"pos":[1642,1815],"content":"When inherited by <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Label&gt;</ph> (which is a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Control&gt;</ph> derived class), the default value is again redefined to be <ph id=\"ph3\">`false`</ph>.","source":"When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`."},{"pos":[1875,1906],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1927,1943],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1944,1993],"content":"<xref:System.Windows.UIElement.FocusableProperty>","nodes":[]},{"pos":[1998,2031],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[2032,2036],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[139483,141549],"yaml":true,"extradata":"MT"},{"content":"`true` if the element is focusable; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,78],"content":"`true` if the element is focusable; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element is focusable; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,54],"source":"`true` if the element is focusable; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[55,78],"source":" The default is `false`."}]}],"pos":[142050,142131],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.Focusable\"></xref> property changes.","nodes":[{"pos":[0,102],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Focusable\"&gt;&lt;/xref&gt;</ph> property changes.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.Focusable\"></xref> property changes."}],"pos":[143094,143197],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[143208,143312],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.Focusable\"></xref> dependency property.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Focusable\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.Focusable\"></xref> dependency property."}],"pos":[144439,144531],"yaml":true},{"content":"Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.","nodes":[{"pos":[0,153],"content":"Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.","nodes":[{"content":"Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.","pos":[0,153]}]}],"pos":[145821,145975],"yaml":true},{"content":"If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).","nodes":[{"pos":[0,553],"content":"If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).","nodes":[{"content":"If no animations are attached to the property, then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GetAnimationBaseValue%2A&gt;</ph> return value is always identical to the <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> return value.","pos":[0,217],"source":"If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value."},{"content":"If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.","pos":[218,416]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Dependency Property Value Precedence<ept id=\"p1\">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.","pos":[417,553],"source":" For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)."}]}],"pos":[145986,146540],"yaml":true,"extradata":"MT"},{"content":"The dependency property to check.","nodes":[{"pos":[0,33],"content":"The dependency property to check.","nodes":[{"content":"The dependency property to check.","pos":[0,33]}]}],"pos":[147407,147441],"yaml":true},{"content":"The property value as if no animations are attached to the specified dependency property.","nodes":[{"pos":[0,89],"content":"The property value as if no animations are attached to the specified dependency property.","nodes":[{"content":"The property value as if no animations are attached to the specified dependency property.","pos":[0,89]}]}],"pos":[147498,147588],"yaml":true},{"content":"Returns an alternative clipping geometry that represents the region that would be clipped if <xref href=\"System.Windows.UIElement.ClipToBounds\"></xref> were set to `true`.","nodes":[{"pos":[0,171],"content":"Returns an alternative clipping geometry that represents the region that would be clipped if <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ClipToBounds\"&gt;&lt;/xref&gt;</ph> were set to <ph id=\"ph2\">`true`</ph>.","source":"Returns an alternative clipping geometry that represents the region that would be clipped if <xref href=\"System.Windows.UIElement.ClipToBounds\"></xref> were set to `true`."}],"pos":[148605,148777],"yaml":true},{"content":"The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations. Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.  \n  \n This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements. For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>.","nodes":[{"pos":[0,203],"content":"The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations. Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.","nodes":[{"content":"The default implementation will return a legitimate value, but does not use the <ph id=\"ph1\">`layoutSlotSize`</ph> parameter in its calculations.","pos":[0,127],"source":"The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations."},{"content":"Instead it uses the value of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph>.","pos":[128,203],"source":" Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>."}]},{"pos":[210,558],"content":"This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements. For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>.","nodes":[{"content":"This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements. For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>.","pos":[0,348],"nodes":[{"content":"This method is substantially overridden by the immediately derived <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> class, and the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> override produces a more sophisticated behavior for general WPF framework-level elements.","pos":[0,249],"source":"This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements."},{"content":"For details, see <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName&gt;</ph>.","pos":[250,348],"source":" For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>."}]}]}],"pos":[148788,149351],"yaml":true,"extradata":"MT"},{"content":"The available size provided by the element.","nodes":[{"pos":[0,43],"content":"The available size provided by the element.","nodes":[{"content":"The available size provided by the element.","pos":[0,43]}]}],"pos":[149566,149610],"yaml":true},{"content":"The potential clipping geometry.","nodes":[{"pos":[0,32],"content":"The potential clipping geometry.","nodes":[{"content":"The potential clipping geometry.","pos":[0,32]}]}],"pos":[149683,149716],"yaml":true},{"content":"When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.","nodes":[{"pos":[0,166],"content":"When overridden in a derived class, returns an alternative <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.","source":"When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists."}],"pos":[150684,150851],"yaml":true},{"content":"The default virtual implementation of this method returns `null`. <xref:System.Windows.FrameworkElement> provides a practical implementation.  \n  \n Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.","nodes":[{"pos":[0,141],"content":"The default virtual implementation of this method returns `null`. <xref:System.Windows.FrameworkElement> provides a practical implementation.","nodes":[{"content":"The default virtual implementation of this method returns <ph id=\"ph1\">`null`</ph>.","pos":[0,65],"source":"The default virtual implementation of this method returns `null`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> provides a practical implementation.","pos":[66,141],"source":" <xref:System.Windows.FrameworkElement> provides a practical implementation."}]},{"pos":[148,439],"content":"Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.","nodes":[{"content":"Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.","pos":[0,291]}]}],"pos":[150862,151306],"yaml":true,"extradata":"MT"},{"content":"An object, if implementation of a derived class has an alternate parent connection to report.","nodes":[{"pos":[0,93],"content":"An object, if implementation of a derived class has an alternate parent connection to report.","nodes":[{"content":"An object, if implementation of a derived class has an alternate parent connection to report.","pos":[0,93]}]}],"pos":[151493,151587],"yaml":true},{"content":"Occurs when the input system reports an underlying drag-and-drop event that involves this element.","nodes":[{"pos":[0,98],"content":"Occurs when the input system reports an underlying drag-and-drop event that involves this element.","nodes":[{"content":"Occurs when the input system reports an underlying drag-and-drop event that involves this element.","pos":[0,98]}]}],"pos":[152532,152631],"yaml":true},{"content":"The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GiveFeedback\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.  \n  \n-   Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,287],"content":"The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.","nodes":[{"content":"The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.","pos":[0,287],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.","pos":[0,210],"source":"The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation."},{"content":"The visual feedback reinforces that a drag-and-drop operation is in process.","pos":[211,287]}]}]},{"pos":[294,832],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,538],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,290],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[291,538],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[888,912],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[933,949],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[950,999],"content":"<xref:System.Windows.UIElement.GiveFeedbackEvent>","nodes":[]},{"pos":[1004,1020],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1021,1029],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1034,1042],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1043,1089],"content":"<xref:System.Windows.GiveFeedbackEventHandler>","nodes":[]},{"pos":[1100,1189],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph>.","pos":[0,89],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>."}]},{"pos":[1199,1320],"content":"Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,121],"source":"Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes."}]}],"pos":[152642,153982],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.GiveFeedback\"></xref> routed event.","nodes":[{"pos":[0,87],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GiveFeedback\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.GiveFeedback\"></xref> routed event."}],"pos":[155079,155167],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[155178,155718],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element gets logical focus.","nodes":[{"pos":[0,44],"content":"Occurs when this element gets logical focus.","nodes":[{"content":"Occurs when this element gets logical focus.","pos":[0,44]}]}],"pos":[156750,156795],"yaml":true},{"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.  \n  \n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.  \n  \n Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \n  \n<a name=\"routedEventInfo_GotFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.GotFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \n  \n-   There is no corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,318],"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.","nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.","pos":[0,318],"nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.","pos":[0,157]},{"content":"In this scenario, keyboard focus remains where it is and the element where a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> method is called still gets logical focus.","pos":[158,318],"source":" In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus."}]}]},{"pos":[325,527],"content":"A more precise interpretation of this event is that it is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property of an element in the route is changed from <ph id=\"ph2\">`false`</ph> to <ph id=\"ph3\">`true`</ph>.","source":"A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`."},{"pos":[534,828],"content":"Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","pos":[0,294],"nodes":[{"content":"Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,167]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.","pos":[168,294],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus."}]}]},{"pos":[880,904],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[925,941],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[942,987],"content":"<xref:System.Windows.UIElement.GotFocusEvent>","nodes":[]},{"pos":[992,1008],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1009,1017],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1022,1030],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1031,1071],"content":"<xref:System.Windows.RoutedEventHandler>","nodes":[]},{"pos":[1082,1124],"content":"There is no corresponding tunneling event.","nodes":[{"content":"There is no corresponding tunneling event.","pos":[0,42]}]},{"pos":[1134,1251],"content":"Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,117],"source":"Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[156806,158079],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> routed event.","nodes":[{"pos":[0,83],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> routed event."}],"pos":[159136,159220],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[159231,159771],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is focused on this element.","nodes":[{"pos":[0,52],"content":"Occurs when the keyboard is focused on this element.","nodes":[{"content":"Occurs when the keyboard is focused on this element.","pos":[0,52]}]}],"pos":[160847,160900],"yaml":true},{"content":"<xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.  \n  \n Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GotKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,267],"content":"<xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> event is raised in many of the same circumstances.","pos":[0,267],"source":"<xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances."}]},{"pos":[274,560],"content":"Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","pos":[0,286],"nodes":[{"content":"Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,162]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.","pos":[163,286],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus."}]}]},{"pos":[567,1133],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,566],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,304],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[305,566],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1193,1217],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1238,1254],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1255,1308],"content":"<xref:System.Windows.UIElement.GotKeyboardFocusEvent>","nodes":[]},{"pos":[1313,1329],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1330,1338],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1343,1351],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1352,1412],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1423,1516],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph>.","pos":[0,93],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>."}]},{"pos":[1526,1651],"content":"Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[160911,162584],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.GotKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.GotKeyboardFocus\"></xref> routed event."}],"pos":[163737,163829],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[163840,164380],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element captures the mouse.","nodes":[{"pos":[0,44],"content":"Occurs when this element captures the mouse.","nodes":[{"content":"Occurs when this element captures the mouse.","pos":[0,44]}]}],"pos":[165436,165481],"yaml":true},{"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.  \n  \n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GotMouseCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,259],"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.","nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.","pos":[0,259],"nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.","pos":[0,108]},{"content":"The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.","pos":[109,259]}]}]},{"pos":[266,562],"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.","nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.","pos":[0,296],"nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has mouse capture.","pos":[165,296],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture."}]}]},{"pos":[569,1126],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,557],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</ph> attached event for  this class so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,300],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[301,557],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1185,1209],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1230,1246],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1247,1299],"content":"<xref:System.Windows.UIElement.GotMouseCaptureEvent>","nodes":[]},{"pos":[1304,1320],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1321,1329],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1334,1342],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1343,1388],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1399,1449],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1459,1583],"content":"Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[165492,167097],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.GotMouseCapture\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotMouseCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.GotMouseCapture\"></xref> routed event."}],"pos":[168191,168282],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[168293,168833],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element captures the stylus.","nodes":[{"pos":[0,45],"content":"Occurs when this element captures the stylus.","nodes":[{"content":"Occurs when this element captures the stylus.","pos":[0,45]}]}],"pos":[169916,169962],"yaml":true},{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.  \n  \n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.  \n  \n This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GotStylusCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,255],"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.","nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.","pos":[0,255],"nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.","pos":[0,104]},{"content":"The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.","pos":[105,255]}]}]},{"pos":[262,552],"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.","nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.","pos":[0,290],"nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has capture.","pos":[165,290],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture."}]}]},{"pos":[559,1044],"content":"This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,485],"nodes":[{"content":"This event creates an alias for the attached event for this class so that <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> is part of the class members list when <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,225],"source":"This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GotStylusCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[226,485],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1104,1128],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1149,1165],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1166,1219],"content":"<xref:System.Windows.UIElement.GotStylusCaptureEvent>","nodes":[]},{"pos":[1224,1240],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1241,1249],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1254,1262],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1263,1309],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1320,1370],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1380,1505],"content":"Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[169973,171500],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.GotStylusCapture\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotStylusCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.GotStylusCapture\"></xref> routed event."}],"pos":[172625,172717],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[172728,173268],"yaml":true,"extradata":"MT"},{"content":"Occurs when a touch is captured to this element.","nodes":[{"pos":[0,48],"content":"Occurs when a touch is captured to this element.","nodes":[{"content":"Occurs when a touch is captured to this element.","pos":[0,48]}]}],"pos":[174346,174395],"yaml":true},{"content":"<a name=\"routedEventInfo_GotTouchCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[53,77],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[98,114],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[115,167],"content":"<xref:System.Windows.UIElement.GotTouchCaptureEvent>","nodes":[]},{"pos":[172,188],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[189,197],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[202,210],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[211,293],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[304,428],"content":"Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[174406,174848],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.GotTouchCapture\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.GotTouchCapture\"></xref> routed event."}],"pos":[175971,176062],"yaml":true},{"content":"Gets a value indicating whether this element has any animated properties.","nodes":[{"pos":[0,73],"content":"Gets a value indicating whether this element has any animated properties.","nodes":[{"content":"Gets a value indicating whether this element has any animated properties.","pos":[0,73]}]}],"pos":[177178,177252],"yaml":true},{"content":"This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.","nodes":[{"pos":[0,139],"content":"This property returns <ph id=\"ph1\">`true`</ph> either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.","source":"This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline."}],"pos":[177263,177403],"yaml":true,"extradata":"MT"},{"content":"`true` if this element has animations attached to any of its properties; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if this element has animations attached to any of its properties; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element has animations attached to any of its properties; otherwise, `false`."}],"pos":[177527,177622],"yaml":true},{"content":"Gets a value that indicates whether the <xref href=\"System.Windows.UIElement\"></xref> has focus.","nodes":[{"pos":[0,96],"content":"Gets a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> has focus.","source":"Gets a value that indicates whether the <xref href=\"System.Windows.UIElement\"></xref> has focus."}],"pos":[178654,178751],"yaml":true},{"content":"Subclasses can override this property to specify when the element has keyboard focus.  This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.","nodes":[{"pos":[0,245],"content":"Subclasses can override this property to specify when the element has keyboard focus.  This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.","nodes":[{"content":"Subclasses can override this property to specify when the element has keyboard focus.  This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.","pos":[0,245],"nodes":[{"content":"Subclasses can override this property to specify when the element has keyboard focus.","pos":[0,85]},{"content":"This is useful when your <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> contains elements that can have keyboard focus and you want your element to report that it has focus.","pos":[87,245],"source":"  This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus."}]}]}],"pos":[178762,179008],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.UIElement\"></xref> has focus; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> has focus; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.UIElement\"></xref> has focus; otherwise, `false`."}],"pos":[179147,179240],"yaml":true},{"content":"Implements <xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\"></xref> to supply base element hit testing behavior (returning <xref href=\"System.Windows.Media.GeometryHitTestResult\"></xref>).","nodes":[{"pos":[0,240],"content":"Implements <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\"&gt;&lt;/xref&gt;</ph> to supply base element hit testing behavior (returning <ph id=\"ph2\">&lt;xref href=\"System.Windows.Media.GeometryHitTestResult\"&gt;&lt;/xref&gt;</ph>).","source":"Implements <xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\"></xref> to supply base element hit testing behavior (returning <xref href=\"System.Windows.Media.GeometryHitTestResult\"></xref>)."}],"pos":[180415,180656],"yaml":true},{"content":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.  \n  \n This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","nodes":[{"pos":[0,327],"content":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.","nodes":[{"content":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.","pos":[0,327],"nodes":[{"content":"See the original virtual method <ph id=\"ph1\">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt;</ph> for information on overriding this method in further derived classes.","pos":[0,176],"source":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes."},{"content":"Note that several specific controls (<ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, for example) do have distinct implementations, which override this one.","pos":[177,327],"source":" Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one."}]}]},{"pos":[334,571],"content":"This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","nodes":[{"content":"This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","pos":[0,237],"nodes":[{"content":"This method is not intended to be called from your application code.","pos":[0,68]},{"content":"This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","pos":[69,237]}]}]}],"pos":[180667,181243],"yaml":true,"extradata":"MT"},{"content":"Describes the hit test to perform, including the initial hit point.","nodes":[{"pos":[0,67],"content":"Describes the hit test to perform, including the initial hit point.","nodes":[{"content":"Describes the hit test to perform, including the initial hit point.","pos":[0,67]}]}],"pos":[181530,181598],"yaml":true},{"content":"Results of the test, including the evaluated geometry.","nodes":[{"pos":[0,54],"content":"Results of the test, including the evaluated geometry.","nodes":[{"content":"Results of the test, including the evaluated geometry.","pos":[0,54]}]}],"pos":[181684,181739],"yaml":true},{"content":"Implements <xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)\"></xref> to supply base element hit testing behavior (returning <xref href=\"System.Windows.Media.HitTestResult\"></xref>).","nodes":[{"pos":[0,229],"content":"Implements <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)\"&gt;&lt;/xref&gt;</ph> to supply base element hit testing behavior (returning <ph id=\"ph2\">&lt;xref href=\"System.Windows.Media.HitTestResult\"&gt;&lt;/xref&gt;</ph>).","source":"Implements <xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)\"></xref> to supply base element hit testing behavior (returning <xref href=\"System.Windows.Media.HitTestResult\"></xref>)."}],"pos":[182882,183112],"yaml":true},{"content":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.  \n  \n This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","nodes":[{"pos":[0,411],"content":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.","nodes":[{"content":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.","pos":[0,411],"nodes":[{"content":"See the original virtual method <ph id=\"ph1\">&lt;xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName&gt;</ph> for information on overriding this method in further derived classes.","pos":[0,176],"source":"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes."},{"content":"Note that several specific controls (<ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>, for example) do have distinct implementations, which override <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.HitTestCore%2A&gt;</ph> as defined by <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[177,411],"source":" Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>."}]}]},{"pos":[418,655],"content":"This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","nodes":[{"content":"This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","pos":[0,237],"nodes":[{"content":"This method is not intended to be called from your application code.","pos":[0,68]},{"content":"This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).","pos":[69,237]}]}]}],"pos":[183123,183783],"yaml":true,"extradata":"MT"},{"content":"Describes the hit test to perform, including the initial hit point.","nodes":[{"pos":[0,67],"content":"Describes the hit test to perform, including the initial hit point.","nodes":[{"content":"Describes the hit test to perform, including the initial hit point.","pos":[0,67]}]}],"pos":[184056,184124],"yaml":true},{"content":"Results of the test, including the evaluated point.","nodes":[{"pos":[0,51],"content":"Results of the test, including the evaluated point.","nodes":[{"content":"Results of the test, including the evaluated point.","pos":[0,51]}]}],"pos":[184202,184254],"yaml":true},{"content":"Gets the collection of input bindings associated with this element.","nodes":[{"pos":[0,67],"content":"Gets the collection of input bindings associated with this element.","nodes":[{"content":"Gets the collection of input bindings associated with this element.","pos":[0,67]}]}],"pos":[185204,185272],"yaml":true},{"content":"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.  \n  \n The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.  \n  \n A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings. These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.  \n  \n<a name=\"xamlPropertyElementUsage_InputBindings\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.InputBindings>  \n    oneOrMoreInputBindings  \n  </object.InputBindings>  \n</object>  \n```  \n  \n<a name=\"xamlValues_InputBindings\"></a>   \n## XAML Values  \n *oneOrMoreInputBindings*  \n One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.","nodes":[{"pos":[0,206],"content":"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.","nodes":[{"content":"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.","pos":[0,206],"nodes":[{"content":"Input bindings support the binding of commands to input devices.","pos":[0,64]},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implements input bindings that include properties that are particular to mouse devices.","pos":[65,206],"source":" For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices."}]}]},{"pos":[213,364],"content":"The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.","nodes":[{"content":"The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.","pos":[0,151]}]},{"pos":[371,627],"content":"A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings. These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.","nodes":[{"content":"A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings. These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.","pos":[0,256],"nodes":[{"content":"A related property, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph>, maintains a collection of command bindings.","pos":[0,115],"source":"A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings."},{"content":"These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.","pos":[116,256]}]}]},{"pos":[693,720],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[894,905],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[909,1273],"content":"*oneOrMoreInputBindings*  \n One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>oneOrMoreInputBindings<ept id=\"p1\">*</ept>","pos":[0,24],"source":"*oneOrMoreInputBindings*"},{"content":" One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.","pos":[27,364],"nodes":[{"content":"One or more <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> elements (typically the <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> derived classes).","pos":[1,178],"source":" One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes)."},{"content":"Each of these is expected to have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> attribute set.","pos":[179,337],"source":" Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set."}]}]}],"pos":[185283,186583],"yaml":true,"extradata":"MT"},{"content":"The collection of input bindings.","nodes":[{"pos":[0,33],"content":"The collection of input bindings.","nodes":[{"content":"The collection of input bindings.","pos":[0,33]}]}],"pos":[187333,187367],"yaml":true},{"content":"Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.","nodes":[{"pos":[0,132],"content":"Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.","nodes":[{"content":"Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.","pos":[0,132]}]}],"pos":[188415,188548],"yaml":true},{"content":"<xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>. You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.  \n  \n This method typically is not called from your application code. Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.  \n  \n <xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.","nodes":[{"pos":[0,360],"content":"<xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>. You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.","nodes":[{"content":"<xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>. You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.","pos":[0,360],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.IInputElement&gt;</ph> is returned as the return type, because that type is a common interface for both <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[0,190],"source":"<xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>."},{"content":"You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <ph id=\"ph1\">&lt;xref:System.Windows.IInputElement&gt;</ph> interface.","pos":[191,360],"source":" You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface."}]}]},{"pos":[367,618],"content":"This method typically is not called from your application code. Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.","nodes":[{"content":"This method typically is not called from your application code. Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.","pos":[0,251],"nodes":[{"content":"This method typically is not called from your application code.","pos":[0,63]},{"content":"Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.","pos":[64,251]}]}]},{"pos":[625,807],"content":"<xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.IContentHost&gt;</ph> contracts an <ph id=\"ph2\">&lt;xref:System.Windows.IContentHost.InputHitTest%2A&gt;</ph> method with the same signature, which some elements choose to implement explicitly.","pos":[0,182],"source":"<xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly."}]}],"pos":[188559,189373],"yaml":true,"extradata":"MT"},{"content":"The offset coordinates within this element.","nodes":[{"pos":[0,43],"content":"The offset coordinates within this element.","nodes":[{"content":"The offset coordinates within this element.","pos":[0,43]}]}],"pos":[189559,189603],"yaml":true},{"content":"The element child that is located at the given position.","nodes":[{"pos":[0,56],"content":"The element child that is located at the given position.","nodes":[{"content":"The element child that is located at the given position.","pos":[0,56]}]}],"pos":[189675,189732],"yaml":true},{"content":"Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <xref href=\"System.Windows.UIElement.UpdateLayout\"></xref>.","nodes":[{"pos":[0,243],"content":"Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <xref href=\"System.Windows.UIElement.UpdateLayout\"></xref>.","nodes":[{"content":"Invalidates the arrange state (layout) for the element.","pos":[0,55]},{"content":"After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.UpdateLayout\"&gt;&lt;/xref&gt;</ph>.","pos":[56,243],"source":" After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <xref href=\"System.Windows.UIElement.UpdateLayout\"></xref>."}]}],"pos":[190711,190955],"yaml":true},{"content":"Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code. An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.","nodes":[{"pos":[0,754],"content":"Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code. An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.","nodes":[{"content":"Frequent calls to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> or in particular to <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> have significant performance consequences.","pos":[0,181],"source":"Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences."},{"content":"Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.","pos":[182,391],"source":" Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code."},{"content":"An advanced scenario where you might call <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> is if you are creating a <ph id=\"ph2\">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id=\"ph3\">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the arrange pass of layout when it changes.","pos":[392,754],"source":" An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes."}]}],"pos":[190966,191721],"yaml":true,"extradata":"MT"},{"content":"Invalidates the measurement state (layout) for the element.","nodes":[{"pos":[0,59],"content":"Invalidates the measurement state (layout) for the element.","nodes":[{"content":"Invalidates the measurement state (layout) for the element.","pos":[0,59]}]}],"pos":[192781,192841],"yaml":true},{"content":"Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession. After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.  \n  \n The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary. You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.  \n  \n Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.","nodes":[{"pos":[0,447],"content":"Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession. After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.","nodes":[{"content":"Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession. After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.","pos":[0,447],"nodes":[{"content":"Calling this method also calls <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> internally, there is no need to call <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> in succession.","pos":[0,245],"source":"Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession."},{"content":"After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> is called to force a synchronous layout change.","pos":[246,447],"source":" After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change."}]}]},{"pos":[454,1144],"content":"The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary. You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.","nodes":[{"content":"The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary. You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.","pos":[0,690],"nodes":[{"content":"The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary.","pos":[0,224]},{"content":"You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios.","pos":[225,395]},{"content":"One such advanced scenario is if you are creating a <ph id=\"ph1\">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id=\"ph2\">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the measure pass of layout when it changes.","pos":[396,690],"source":" One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes."}]}]},{"pos":[1151,1542],"content":"Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.","nodes":[{"content":"Frequent calls to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> or in particular to <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> have significant performance consequences.","pos":[0,181],"source":"Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences."},{"content":"Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in your code.","pos":[182,391],"source":" Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code."}]}],"pos":[192852,194401],"yaml":true,"extradata":"MT"},{"content":"Invalidates the rendering of the element, and forces a complete new layout pass. <xref href=\"System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\"></xref> is called after the layout cycle is completed.","nodes":[{"pos":[0,219],"content":"Invalidates the rendering of the element, and forces a complete new layout pass. <xref href=\"System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\"></xref> is called after the layout cycle is completed.","nodes":[{"content":"Invalidates the rendering of the element, and forces a complete new layout pass.","pos":[0,80]},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\"&gt;&lt;/xref&gt;</ph> is called after the layout cycle is completed.","pos":[81,219],"source":"<xref href=\"System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\"></xref> is called after the layout cycle is completed."}]}],"pos":[195455,195675],"yaml":true},{"content":"This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.  \n  \n This method is not generally called from your application code. The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already. Calling this method is necessary only for advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.","nodes":[{"pos":[0,82],"content":"This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.","nodes":[{"content":"This method calls <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> internally.","pos":[0,82],"source":"This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally."}]},{"pos":[89,673],"content":"This method is not generally called from your application code. The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already. Calling this method is necessary only for advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.","nodes":[{"content":"This method is not generally called from your application code. The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already. Calling this method is necessary only for advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.","pos":[0,584],"nodes":[{"content":"This method is not generally called from your application code.","pos":[0,63]},{"content":"The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already.","pos":[64,243]},{"content":"Calling this method is necessary only for advanced scenarios.","pos":[244,305]},{"content":"One such advanced scenario is if you are creating a <ph id=\"ph1\">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph> for a dependency property that is not on a <ph id=\"ph2\">&lt;xref:System.Windows.Freezable&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> derived class that still influences the layout when it changes.","pos":[306,584],"source":" One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes."}]}]}],"pos":[195686,196364],"yaml":true,"extradata":"MT"},{"content":"Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.","nodes":[{"pos":[0,116],"content":"Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.","nodes":[{"content":"Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.","pos":[0,116]}]}],"pos":[197400,197517],"yaml":true},{"content":"You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents). This flags the layout for recomposition at such time as the layout system determines. Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).  \n  \n <xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).","nodes":[{"pos":[0,493],"content":"You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents). This flags the layout for recomposition at such time as the layout system determines. Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).","nodes":[{"content":"You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents). This flags the layout for recomposition at such time as the layout system determines. Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).","pos":[0,493],"nodes":[{"content":"You can force arrangement to be invalidated by calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateArrange%2A&gt;</ph> on this element (or its parents).","pos":[0,141],"source":"You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents)."},{"content":"This flags the layout for recomposition at such time as the layout system determines.","pos":[142,227]},{"content":"Alternatively, an immediate call to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).","pos":[228,493],"source":" Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences)."}]}]},{"pos":[500,730],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> cannot be <ph id=\"ph2\">`true`</ph> unless <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> is also <ph id=\"ph4\">`true`</ph> (in the layout process, arrangement cannot be valid without measurement first being valid).","source":"<xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid)."}],"pos":[197528,198263],"yaml":true,"extradata":"MT"},{"content":"`true` if the size and position of layout are valid; otherwise, `false`.","nodes":[{"pos":[0,72],"content":"<ph id=\"ph1\">`true`</ph> if the size and position of layout are valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the size and position of layout are valid; otherwise, `false`."}],"pos":[198380,198455],"yaml":true},{"content":"Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.","nodes":[{"pos":[0,159],"content":"Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.","nodes":[{"content":"Gets or sets a value indicating whether this element is enabled in the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.","pos":[0,127],"source":"Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]."},{"content":"This is a dependency property.","pos":[129,159]}]}],"pos":[199362,199522],"yaml":true},{"content":"Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime. Therefore, the default value listed here is sometimes not effective. For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar. Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.  \n  \n Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.  \n  \n<a name=\"dependencyPropertyInfo_IsEnabled\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsEnabledProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,575],"content":"Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime. Therefore, the default value listed here is sometimes not effective. For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar. Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.","nodes":[{"content":"Note that this property is influenced by class-specific implementations of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph> on particular elements, often at runtime.","pos":[0,165],"source":"Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime."},{"content":"Therefore, the default value listed here is sometimes not effective.","pos":[166,234]},{"content":"For instance, a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ScrollBar&gt;</ph> will be <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> <ph id=\"ph3\">`false`</ph> whenever it is determined that there is no need to support a scrollbar.","pos":[235,435],"source":" For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar."},{"content":"Attempting to set this value will also potentially be overridden by the value returned by <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsEnabledCore%2A&gt;</ph>.","pos":[436,575],"source":" Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>."}]},{"pos":[582,705],"content":"Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.","nodes":[{"content":"Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.","pos":[0,123]}]},{"pos":[765,796],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[817,833],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[834,883],"content":"<xref:System.Windows.UIElement.IsEnabledProperty>","nodes":[]},{"pos":[888,921],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[922,926],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[199533,200475],"yaml":true,"extradata":"MT"},{"content":"`true` if the element is enabled; otherwise, `false`. The default value is `true`.","nodes":[{"pos":[0,82],"content":"`true` if the element is enabled; otherwise, `false`. The default value is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,53],"source":"`true` if the element is enabled; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`true`</ph>.","pos":[54,82],"source":" The default value is `true`."}]}],"pos":[201096,201181],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> property on this element changes.","nodes":[{"pos":[0,118],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsEnabled\"&gt;&lt;/xref&gt;</ph> property on this element changes.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> property on this element changes."}],"pos":[202144,202263],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[202274,202378],"yaml":true,"extradata":"MT"},{"content":"Gets a value that becomes the return value of <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> in derived classes.","nodes":[{"pos":[0,121],"content":"Gets a value that becomes the return value of <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsEnabled\"&gt;&lt;/xref&gt;</ph> in derived classes.","source":"Gets a value that becomes the return value of <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> in derived classes."}],"pos":[203484,203606],"yaml":true},{"content":"`true` if the element is enabled; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the element is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the element is enabled; otherwise, `false`."}],"pos":[203733,203789],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> dependency property.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsEnabled\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> dependency property."}],"pos":[204762,204854],"yaml":true},{"content":"Gets a value that determines whether this element has logical focus.  This is a dependency property.","nodes":[{"pos":[0,100],"content":"Gets a value that determines whether this element has logical focus.  This is a dependency property.","nodes":[{"content":"Gets a value that determines whether this element has logical focus.  This is a dependency property.","pos":[0,100],"nodes":[{"content":"Gets a value that determines whether this element has logical focus.","pos":[0,68]},{"content":"This is a dependency property.","pos":[70,100]}]}]}],"pos":[205909,206010],"yaml":true},{"content":"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  \n  \n You do not set focus by setting this property (it is read-only). The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>. To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>. Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.  \n  \n<a name=\"dependencyPropertyInfo_IsFocused\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsFocusedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,441],"content":"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).","nodes":[{"content":"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.","pos":[0,162]},{"content":"In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.","pos":[163,331]},{"content":"For more information on logical focus, see <bpt id=\"p1\">[</bpt>Focus Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.","pos":[332,441],"source":" For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md)."}]},{"pos":[448,851],"content":"You do not set focus by setting this property (it is read-only). The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>. To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>. Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.","nodes":[{"content":"You do not set focus by setting this property (it is read-only). The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>. To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>. Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.","pos":[0,403],"nodes":[{"content":"You do not set focus by setting this property (it is read-only).","pos":[0,64]},{"content":"The typical use for this property is to use it as a dependency property for a <ph id=\"ph1\">&lt;xref:System.Windows.Setter&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.EventTrigger&gt;</ph>.","pos":[65,210],"source":" The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>."},{"content":"To set focus programmatically, call <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>.","pos":[211,288],"source":" To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>."},{"content":"Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.","pos":[289,403]}]}]},{"pos":[911,942],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[963,979],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[980,1029],"content":"<xref:System.Windows.UIElement.IsFocusedProperty>","nodes":[]},{"pos":[1034,1067],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1068,1072],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[206021,207109],"yaml":true,"extradata":"MT"},{"content":"`true` if this element has logical focus; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if this element has logical focus; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element has logical focus; otherwise, `false`."}],"pos":[207965,208029],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsFocused\"></xref> dependency property.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsFocused\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsFocused\"></xref> dependency property."}],"pos":[208976,209068],"yaml":true},{"content":"Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.","nodes":[{"pos":[0,175],"content":"Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.","nodes":[{"content":"Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.","pos":[0,175],"nodes":[{"content":"Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content.","pos":[0,144]},{"content":"This is a dependency property.","pos":[145,175]}]}]}],"pos":[210143,210319],"yaml":true},{"content":"The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree. For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally. For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control. For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  \n  \n<a name=\"dependencyPropertyInfo_IsHitTestVisible\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,687],"content":"The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree. For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally. For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control. For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).","nodes":[{"content":"The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree.","pos":[0,122]},{"content":"For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain <ph id=\"ph1\">`false`</ph>, even if attempting to set that value locally.","pos":[123,329],"source":" For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally."},{"content":"For this reason, it is important that you do not set <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsHitTestVisible%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph> on a composited control unless you do not want any input or hit testing on that control.","pos":[330,534],"source":" For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control."},{"content":"For more information on hit testing, see <bpt id=\"p1\">[</bpt>Hit Testing in the Visual Layer<ept id=\"p1\">](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)</ept>.","pos":[535,687],"source":" For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md)."}]},{"pos":[754,785],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[806,822],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[823,879],"content":"<xref:System.Windows.UIElement.IsHitTestVisibleProperty>","nodes":[]},{"pos":[884,917],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[918,922],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[210330,211266],"yaml":true,"extradata":"MT"},{"content":"`true` if this element could be returned as a hit test result from at least one point; otherwise, `false`. The default value is `true`.","nodes":[{"pos":[0,135],"content":"`true` if this element could be returned as a hit test result from at least one point; otherwise, `false`. The default value is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this element could be returned as a hit test result from at least one point; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,106],"source":"`true` if this element could be returned as a hit test result from at least one point; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`true`</ph>.","pos":[107,135],"source":" The default value is `true`."}]}],"pos":[211390,211528],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsHitTestVisible\"></xref> dependency property changes on this element.","nodes":[{"pos":[0,136],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsHitTestVisible\"&gt;&lt;/xref&gt;</ph> dependency property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsHitTestVisible\"></xref> dependency property changes on this element."}],"pos":[212540,212677],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[212688,212792],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsHitTestVisible\"></xref> dependency property.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsHitTestVisible\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsHitTestVisible\"></xref> dependency property."}],"pos":[213968,214067],"yaml":true},{"content":"Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.","nodes":[{"pos":[0,179],"content":"Gets a value indicating whether an input method system, such as an <ph id=\"ph1\">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>,  is enabled for processing the input to this element.","source":"Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element."}],"pos":[215195,215375],"yaml":true},{"content":"This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices).","nodes":[{"pos":[0,247],"content":"This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices).","nodes":[{"content":"This property returns the value that is returned by the attached property <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt;</ph> for the currently enabled input methods (keyboard, speech, and other input devices).","pos":[0,247],"source":"This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices)."}]}],"pos":[215386,215634],"yaml":true,"extradata":"MT"},{"content":"`true` if an input method is active; otherwise, `false`. The default value of the underlying attached property is `true;` however, this will be influenced by the actual state of input methods at runtime.","nodes":[{"pos":[0,203],"content":"`true` if an input method is active; otherwise, `false`. The default value of the underlying attached property is `true;` however, this will be influenced by the actual state of input methods at runtime.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if an input method is active; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,56],"source":"`true` if an input method is active; otherwise, `false`."},{"content":"The default value of the underlying attached property is <ph id=\"ph1\">`true;`</ph> however, this will be influenced by the actual state of input methods at runtime.","pos":[57,203],"source":" The default value of the underlying attached property is `true;` however, this will be influenced by the actual state of input methods at runtime."}]}],"pos":[215757,215963],"yaml":true},{"content":"Gets a value indicating whether this element has keyboard focus.  This is a dependency property.","nodes":[{"pos":[0,96],"content":"Gets a value indicating whether this element has keyboard focus.  This is a dependency property.","nodes":[{"content":"Gets a value indicating whether this element has keyboard focus.  This is a dependency property.","pos":[0,96],"nodes":[{"content":"Gets a value indicating whether this element has keyboard focus.","pos":[0,64]},{"content":"This is a dependency property.","pos":[66,96]}]}]}],"pos":[216946,217043],"yaml":true},{"content":"Changes to the determined value of this property may be accompanied by focus-related events.  \n  \n <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.  \n  \n<a name=\"dependencyPropertyInfo_IsKeyboardFocused\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,92],"content":"Changes to the determined value of this property may be accompanied by focus-related events.","nodes":[{"content":"Changes to the determined value of this property may be accompanied by focus-related events.","pos":[0,92]}]},{"pos":[99,450],"content":"<xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.","pos":[0,351],"source":"<xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction."}]},{"pos":[518,549],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[570,586],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[587,644],"content":"<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>","nodes":[]},{"pos":[649,682],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[683,687],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[217054,217757],"yaml":true,"extradata":"MT"},{"content":"`true` if this element has keyboard focus; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,86],"content":"`true` if this element has keyboard focus; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this element has keyboard focus; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,62],"source":"`true` if this element has keyboard focus; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[63,86],"source":" The default is `false`."}]}],"pos":[217877,217966],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsKeyboardFocused\"></xref> property changes on this element.","nodes":[{"pos":[0,126],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsKeyboardFocused\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsKeyboardFocused\"></xref> property changes on this element."}],"pos":[218985,219112],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[219123,219227],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsKeyboardFocused\"></xref> dependency property.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsKeyboardFocused\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsKeyboardFocused\"></xref> dependency property."}],"pos":[220410,220510],"yaml":true},{"content":"Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.","nodes":[{"pos":[0,144],"content":"Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.","nodes":[{"content":"Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.","pos":[0,144],"nodes":[{"content":"Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.","pos":[0,112]},{"content":"This is a dependency property.","pos":[114,144]}]}]}],"pos":[221645,221790],"yaml":true},{"content":"Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.  \n  \n You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request. Either of these method calls might change this property value.  \n  \n <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.  \n  \n<a name=\"dependencyPropertyInfo_IsKeyboardFocusWithin\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,252],"content":"Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.","nodes":[{"content":"Changes to the value of this property typically raise the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event, unless a derived class has overridden <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> to suppress the event.","pos":[0,252],"source":"Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event."}]},{"pos":[259,522],"content":"You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request. Either of these method calls might change this property value.","nodes":[{"content":"You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request. Either of these method calls might change this property value.","pos":[0,263],"nodes":[{"content":"You do not set this property directly, but you can set the focus to an element by calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph>, or by making a <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MoveFocus%2A&gt;</ph> request.","pos":[0,200],"source":"You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request."},{"content":"Either of these method calls might change this property value.","pos":[201,263]}]}]},{"pos":[529,881],"content":"<xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.","pos":[0,352],"source":"<xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction."}]},{"pos":[953,984],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1005,1021],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1022,1083],"content":"<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>","nodes":[]},{"pos":[1088,1121],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1122,1126],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[221801,222945],"yaml":true,"extradata":"MT"},{"content":"`true` if keyboard focus is on the element or its child elements; otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if keyboard focus is on the element or its child elements; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if keyboard focus is on the element or its child elements; otherwise, `false`."}],"pos":[223069,223157],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"></xref> property changes on this element.","nodes":[{"pos":[0,137],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"></xref> property changes on this element."}],"pos":[224204,224342],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[224353,224457],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithin\"></xref> dependency property.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsKeyboardFocusWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithin\"></xref> dependency property."}],"pos":[225668,225772],"yaml":true},{"content":"Gets or sets a value that indicates whether manipulation events are enabled on this <xref href=\"System.Windows.UIElement\"></xref>.","nodes":[{"pos":[0,130],"content":"Gets or sets a value that indicates whether manipulation events are enabled on this <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets a value that indicates whether manipulation events are enabled on this <xref href=\"System.Windows.UIElement\"></xref>."}],"pos":[226911,227042],"yaml":true},{"content":"Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events. For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).","nodes":[{"pos":[0,760],"content":"Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events. For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).","nodes":[{"content":"Set this property to true if you want the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> to receive the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph>, and <ph id=\"ph7\">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> events.","pos":[0,435],"source":"Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events."},{"content":"For more information about manipulations, see the <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[436,552],"source":" For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.","pos":[554,760],"source":"  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)."}]}],"pos":[227053,227816],"yaml":true,"extradata":"MT"},{"content":"`true` if manipulation events are enabled on this <xref href=\"System.Windows.UIElement\"></xref>; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,140],"content":"`true` if manipulation events are enabled on this <xref href=\"System.Windows.UIElement\"></xref>; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if manipulation events are enabled on this <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,116],"source":"`true` if manipulation events are enabled on this <xref href=\"System.Windows.UIElement\"></xref>; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[117,140],"source":" The default is `false`."}]}],"pos":[228671,228814],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsManipulationEnabled\"></xref> dependency property.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsManipulationEnabled\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsManipulationEnabled\"></xref> dependency property."}],"pos":[229867,229971],"yaml":true},{"content":"Gets a value indicating whether the current size returned by layout measure is valid.","nodes":[{"pos":[0,85],"content":"Gets a value indicating whether the current size returned by layout measure is valid.","nodes":[{"content":"Gets a value indicating whether the current size returned by layout measure is valid.","pos":[0,85]}]}],"pos":[231068,231154],"yaml":true},{"content":"You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree). This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system. Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>. However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).  \n  \n If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).","nodes":[{"pos":[0,618],"content":"You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree). This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system. Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>. However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).","nodes":[{"content":"You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree). This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system. Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>. However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).","pos":[0,618],"nodes":[{"content":"You can force measurement and arrangement to be invalidated by calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateMeasure%2A&gt;</ph> on this element (or any parent element up the visual tree).","pos":[0,183],"source":"You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree)."},{"content":"This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system.","pos":[184,297]},{"content":"Alternatively, you could make an immediate call to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph>.","pos":[298,397],"source":" Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>."},{"content":"However, you should only call <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).","pos":[398,618],"source":" However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences)."}]}]},{"pos":[625,874],"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph> must also be <ph id=\"ph4\">`false`</ph> (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).","source":"If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid)."}],"pos":[231165,232044],"yaml":true,"extradata":"MT"},{"content":"`true` if the measure pass of layout returned a valid and current value; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if the measure pass of layout returned a valid and current value; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the measure pass of layout returned a valid and current value; otherwise, `false`."}],"pos":[232161,232256],"yaml":true},{"content":"Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.","nodes":[{"pos":[0,102],"content":"Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.","nodes":[{"content":"Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.","pos":[0,102],"nodes":[{"content":"Gets a value indicating whether the mouse is captured to this element.","pos":[0,70]},{"content":"This is a dependency property.","pos":[72,102]}]}]}],"pos":[233221,233324],"yaml":true},{"content":"Mouse capture state is related to in-process drag-and-drop operations.  \n  \n<a name=\"dependencyPropertyInfo_IsMouseCaptured\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,70],"content":"Mouse capture state is related to in-process drag-and-drop operations.","nodes":[{"content":"Mouse capture state is related to in-process drag-and-drop operations.","pos":[0,70]}]},{"pos":[136,167],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[188,204],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[205,260],"content":"<xref:System.Windows.UIElement.IsMouseCapturedProperty>","nodes":[]},{"pos":[265,298],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[299,303],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[233335,233652],"yaml":true,"extradata":"MT"},{"content":"`true` if the element has mouse capture; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,84],"content":"`true` if the element has mouse capture; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element has mouse capture; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,60],"source":"`true` if the element has mouse capture; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[61,84],"source":" The default is `false`."}]}],"pos":[234462,234549],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseCaptured\"></xref> property changes on this element.","nodes":[{"pos":[0,124],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseCaptured\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseCaptured\"></xref> property changes on this element."}],"pos":[235554,235679],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[235690,235794],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseCaptured\"></xref> dependency property.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseCaptured\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseCaptured\"></xref> dependency property."}],"pos":[236963,237061],"yaml":true},{"content":"Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.","nodes":[{"pos":[0,146],"content":"Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.","nodes":[{"content":"Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.","pos":[0,146],"nodes":[{"content":"Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree.","pos":[0,115]},{"content":"This is a dependency property.","pos":[116,146]}]}]}],"pos":[238188,238335],"yaml":true},{"content":"<a name=\"dependencyPropertyInfo_IsMouseCaptureWithin\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[65,96],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[117,133],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[134,194],"content":"<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>","nodes":[]},{"pos":[199,232],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[233,237],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[238346,238595],"yaml":true,"extradata":"MT"},{"content":"`true` if this element or a contained element has mouse capture; otherwise, `false`.","nodes":[{"pos":[0,84],"content":"<ph id=\"ph1\">`true`</ph> if this element or a contained element has mouse capture; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element or a contained element has mouse capture; otherwise, `false`."}],"pos":[238718,238805],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseCaptureWithinProperty\"></xref> changes on this element.","nodes":[{"pos":[0,128],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseCaptureWithinProperty\"&gt;&lt;/xref&gt;</ph> changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseCaptureWithinProperty\"></xref> changes on this element."}],"pos":[239845,239974],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[239985,240089],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseCaptureWithin\"></xref> dependency property.","nodes":[{"pos":[0,102],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseCaptureWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseCaptureWithin\"></xref> dependency property."}],"pos":[241293,241396],"yaml":true},{"content":"Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  This is a dependency property.","nodes":[{"pos":[0,179],"content":"Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  This is a dependency property.","nodes":[{"content":"Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  This is a dependency property.","pos":[0,179],"nodes":[{"content":"Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.","pos":[0,147]},{"content":"This is a dependency property.","pos":[149,179]}]}]}],"pos":[242522,242702],"yaml":true},{"content":"Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.  \n  \n If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.  \n  \n<a name=\"dependencyPropertyInfo_IsMouseDirectlyOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,638],"content":"Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.","nodes":[{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph>, this property is only <ph id=\"ph2\">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.","pos":[0,157],"source":"Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test."},{"content":"If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id=\"ph1\">`false`</ph>.","pos":[158,333],"source":" If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`."},{"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.","pos":[334,521]},{"content":"For most scenarios where you are not authoring controls, use <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> instead.","pos":[522,638],"source":" For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead."}]},{"pos":[645,847],"content":"If the mouse is captured by this element, and this property is <ph id=\"ph1\">`true`</ph> at time of capture, this property will continue to return <ph id=\"ph2\">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.","source":"If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds."},{"pos":[917,948],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[969,985],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[986,1045],"content":"<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>","nodes":[]},{"pos":[1050,1083],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1084,1088],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[242713,243817],"yaml":true,"extradata":"MT"},{"content":"`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,118],"content":"`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the mouse pointer is over the same element result as a hit test; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,94],"source":"`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[95,118],"source":" The default is `false`."}]}],"pos":[243939,244060],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"></xref> property changes on this element.","nodes":[{"pos":[0,128],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"></xref> property changes on this element."}],"pos":[245093,245222],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[245233,245337],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"></xref> dependency property.","nodes":[{"pos":[0,101],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"></xref> dependency property."}],"pos":[246512,246614],"yaml":true},{"content":"Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.","nodes":[{"pos":[0,157],"content":"Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.","nodes":[{"content":"Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.","pos":[0,157],"nodes":[{"content":"Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).","pos":[0,125]},{"content":"This is a dependency property.","pos":[127,157]}]}]}],"pos":[247669,247827],"yaml":true},{"content":"Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control. For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.  \n  \n Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do. For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  \n  \n If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.  \n  \n Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse. This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.  \n  \n<a name=\"dependencyPropertyInfo_IsMouseOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsMouseOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,401],"content":"Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control. For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.","nodes":[{"content":"Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control.","pos":[0,162]},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> style control will report <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> as <ph id=\"ph3\">`true`</ph> if the mouse is anywhere over its geometry, including any <ph id=\"ph4\">&lt;xref:System.Windows.Controls.ListBoxItem&gt;</ph>.","pos":[163,401],"source":" For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>."}]},{"pos":[408,678],"content":"Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do. For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.","nodes":[{"content":"Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do. For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.","pos":[0,270],"nodes":[{"content":"Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do.","pos":[0,91]},{"content":"For example, you can handle <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph>.","pos":[92,270],"source":" For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>."}]}]},{"pos":[685,826],"content":"If this element captures the mouse, this property remains <ph id=\"ph1\">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.","source":"If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds."},{"pos":[833,1071],"content":"Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse. This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.","nodes":[{"content":"Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse.","pos":[0,113]},{"content":"This can lead to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> being <ph id=\"ph2\">`true`</ph> even though the mouse has not apparently moved.","pos":[114,238],"source":" This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved."}]},{"pos":[1133,1164],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1185,1201],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1202,1253],"content":"<xref:System.Windows.UIElement.IsMouseOverProperty>","nodes":[]},{"pos":[1258,1291],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1292,1296],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[247838,249156],"yaml":true,"extradata":"MT"},{"content":"`true` if mouse pointer is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,110],"content":"`true` if mouse pointer is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if mouse pointer is over the element or its child elements; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,86],"source":"`true` if mouse pointer is over the element or its child elements; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[87,110],"source":" The default is `false`."}]}],"pos":[249646,249759],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseOver\"></xref> dependency property.","nodes":[{"pos":[0,93],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsMouseOver\"></xref> dependency property."}],"pos":[250742,250836],"yaml":true},{"content":"Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.","nodes":[{"pos":[0,103],"content":"Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.","nodes":[{"content":"Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.","pos":[0,103],"nodes":[{"content":"Gets a value indicating whether the stylus is captured by this element.","pos":[0,71]},{"content":"This is a dependency property.","pos":[73,103]}]}]}],"pos":[251913,252017],"yaml":true},{"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusCaptured\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,159],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[226,257],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[278,294],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[295,351],"content":"<xref:System.Windows.UIElement.IsStylusCapturedProperty>","nodes":[]},{"pos":[356,389],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[390,394],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[252028,252436],"yaml":true,"extradata":"MT"},{"content":"`true` if the element has stylus capture; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,85],"content":"`true` if the element has stylus capture; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element has stylus capture; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,61],"source":"`true` if the element has stylus capture; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[62,85],"source":" The default is `false`."}]}],"pos":[252555,252643],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusCaptured\"></xref> property changes on this element.","nodes":[{"pos":[0,125],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusCaptured\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusCaptured\"></xref> property changes on this element."}],"pos":[253655,253781],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[253792,253896],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusCaptured\"></xref> dependency property.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusCaptured\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusCaptured\"></xref> dependency property."}],"pos":[255072,255171],"yaml":true},{"content":"Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.","nodes":[{"pos":[0,168],"content":"Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.","nodes":[{"content":"Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.","pos":[0,168],"nodes":[{"content":"Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree.","pos":[0,137]},{"content":"This is a dependency property.","pos":[138,168]}]}]}],"pos":[256305,256474],"yaml":true},{"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusCaptureWithin\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,272],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Touch Input Support in Windows Vista<ept id=\"p1\">](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id=\"p2\">[</bpt>Input Overview<ept id=\"p2\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,272],"source":" For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[344,375],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[396,412],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[413,474],"content":"<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>","nodes":[]},{"pos":[479,512],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[513,517],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[256485,257016],"yaml":true,"extradata":"MT"},{"content":"`true` if this element or a contained element has stylus capture; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,109],"content":"`true` if this element or a contained element has stylus capture; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this element or a contained element has stylus capture; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,85],"source":"`true` if this element or a contained element has stylus capture; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[86,109],"source":" The default is `false`."}]}],"pos":[257140,257252],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"></xref> property changes on this element.","nodes":[{"pos":[0,130],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"></xref> property changes on this element."}],"pos":[258299,258430],"yaml":true},{"content":"This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,96],"content":"This is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[258441,258538],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"></xref> dependency property.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"></xref> dependency property."}],"pos":[259749,259853],"yaml":true},{"content":"Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  This is a dependency property.","nodes":[{"pos":[0,165],"content":"Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  This is a dependency property.","nodes":[{"content":"Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  This is a dependency property.","pos":[0,165],"nodes":[{"content":"Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.","pos":[0,133]},{"content":"This is a dependency property.","pos":[135,165]}]}]}],"pos":[260986,261152],"yaml":true},{"content":"Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.  \n  \n Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.  \n  \n If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusDirectlyOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,281],"content":"Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.","nodes":[{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph>, this property is only <ph id=\"ph2\">`true`</ph> if the stylus is over the element.","pos":[0,119],"source":"Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element."},{"content":"If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be <ph id=\"ph1\">`false`</ph>.","pos":[120,281],"source":" If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`."}]},{"pos":[288,593],"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.","nodes":[{"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.","pos":[0,305],"nodes":[{"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.","pos":[0,187]},{"content":"For most scenarios where you are not authoring controls, use <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> instead.","pos":[188,305],"source":" For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead."}]}]},{"pos":[600,783],"content":"If this element has stylus capture and this property is <ph id=\"ph1\">`true`</ph> at the time of capture, this property remains <ph id=\"ph2\">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.","source":"If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds."},{"pos":[790,949],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[1020,1051],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1072,1088],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1089,1149],"content":"<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>","nodes":[]},{"pos":[1154,1187],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1188,1192],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[261163,262375],"yaml":true,"extradata":"MT"},{"content":"`true` if the stylus pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,119],"content":"`true` if the stylus pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the stylus pointer is over the same element result as a hit test; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,95],"source":"`true` if the stylus pointer is over the same element result as a hit test; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[96,119],"source":" The default is `false`."}]}],"pos":[262498,262620],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"></xref> property changes on this element.","nodes":[{"pos":[0,129],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"></xref> property changes on this element."}],"pos":[263660,263790],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[263801,263905],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"></xref> dependency property.","nodes":[{"pos":[0,102],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"></xref> dependency property."}],"pos":[265109,265212],"yaml":true},{"content":"Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.","nodes":[{"pos":[0,145],"content":"Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.","nodes":[{"content":"Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.","pos":[0,145],"nodes":[{"content":"Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).","pos":[0,113]},{"content":"This is a dependency property.","pos":[115,145]}]}]}],"pos":[266296,266442],"yaml":true},{"content":"If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsStylusOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,147],"content":"If this element has stylus capture, this property will continue to return <ph id=\"ph1\">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.","source":"If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds."},{"pos":[154,313],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[376,407],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[428,444],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[445,497],"content":"<xref:System.Windows.UIElement.IsStylusOverProperty>","nodes":[]},{"pos":[502,535],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[536,540],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[266453,267009],"yaml":true,"extradata":"MT"},{"content":"`true` if stylus cursor is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,110],"content":"`true` if stylus cursor is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if stylus cursor is over the element or its child elements; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,86],"source":"`true` if stylus cursor is over the element or its child elements; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[87,110],"source":" The default is `false`."}]}],"pos":[267124,267237],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusOver\"></xref> dependency property.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsStylusOver\"></xref> dependency property."}],"pos":[268227,268322],"yaml":true},{"content":"Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.","nodes":[{"pos":[0,151],"content":"Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.","nodes":[{"content":"Gets a value indicating whether this element is visible in the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.","pos":[0,119],"source":"Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]."},{"content":"This is a dependency property.","pos":[121,151]}]}],"pos":[269380,269532],"yaml":true},{"content":"Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account. In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.  \n  \n Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing. In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.  \n  \n<a name=\"dependencyPropertyInfo_IsVisible\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.IsVisibleProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,290],"content":"Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account. In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.","nodes":[{"content":"Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account. In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.","pos":[0,290],"nodes":[{"content":"Determination of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> value takes all factors of layout into account.","pos":[0,113],"source":"Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account."},{"content":"In contrast, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.","pos":[114,290],"source":" In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible."}]}]},{"pos":[297,745],"content":"Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing. In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.","nodes":[{"content":"Elements where <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph> do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing.","pos":[0,272],"source":"Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing."},{"content":"In contrast, elements where <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsEnabled%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph> will still participate in events and commands, and hit testing, but are also not focusable.","pos":[273,448],"source":" In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable."}]},{"pos":[805,836],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[857,873],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[874,923],"content":"<xref:System.Windows.UIElement.IsVisibleProperty>","nodes":[]},{"pos":[928,961],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[962,966],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[269543,270525],"yaml":true,"extradata":"MT"},{"content":"`true` if the element is visible; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the element is visible; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the element is visible; otherwise, `false`."}],"pos":[270637,270693],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsVisible\"></xref> property changes on this element.","nodes":[{"pos":[0,118],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsVisible\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.UIElement.IsVisible\"></xref> property changes on this element."}],"pos":[271656,271775],"yaml":true},{"content":"This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property. For example, the element might not have an associated visual.  \n  \n This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,240],"content":"This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property. For example, the element might not have an associated visual.","nodes":[{"content":"This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property. For example, the element might not have an associated visual.","pos":[0,240],"nodes":[{"content":"This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> property.","pos":[0,178],"source":"This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property."},{"content":"For example, the element might not have an associated visual.","pos":[179,240]}]}]},{"pos":[247,350],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[271786,272141],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.IsVisible\"></xref> dependency property.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsVisible\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.IsVisible\"></xref> dependency property."}],"pos":[273268,273360],"yaml":true},{"content":"Occurs when a key is pressed while focus is on this element.","nodes":[{"pos":[0,60],"content":"Occurs when a key is pressed while focus is on this element.","nodes":[{"content":"Occurs when a key is pressed while focus is on this element.","pos":[0,60]}]}],"pos":[274400,274461],"yaml":true},{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_KeyDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.KeyDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,384],"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[0,384],"nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition.","pos":[0,92]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.","pos":[93,231],"source":" The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls."},{"content":"This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[232,384]}]}]},{"pos":[391,921],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,530],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,286],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[287,530],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[972,996],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1017,1033],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1034,1078],"content":"<xref:System.Windows.UIElement.KeyDownEvent>","nodes":[]},{"pos":[1083,1099],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1100,1108],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1113,1121],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1122,1165],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[1176,1260],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph>.","pos":[0,84],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>."}]},{"pos":[1270,1386],"content":"Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,116],"source":"Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[274472,275878],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.KeyDown\"></xref> routed event.","nodes":[{"pos":[0,82],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.KeyDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.KeyDown\"></xref> routed event."}],"pos":[276934,277017],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[277028,277568],"yaml":true,"extradata":"MT"},{"content":"Occurs when a key is released while focus is on this element.","nodes":[{"pos":[0,61],"content":"Occurs when a key is released while focus is on this element.","nodes":[{"content":"Occurs when a key is released while focus is on this element.","pos":[0,61]}]}],"pos":[278577,278639],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_KeyUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.KeyUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,523],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,523],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</ph> attached event for this class so that  <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,283],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[284,523],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[572,596],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[617,633],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[634,676],"content":"<xref:System.Windows.UIElement.KeyUpEvent>","nodes":[]},{"pos":[681,697],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[698,706],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[711,719],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[720,763],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[774,856],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph>.","pos":[0,82],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>."}]},{"pos":[866,980],"content":"Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,114],"source":"Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[278650,279648],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.KeyUp\"></xref> routed event.","nodes":[{"pos":[0,80],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.KeyUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.KeyUp\"></xref> routed event."}],"pos":[280668,280749],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[280760,281300],"yaml":true,"extradata":"MT"},{"content":"Occurs when the layout of the various visual elements associated with the current <xref href=\"System.Windows.Threading.Dispatcher\"></xref> changes.","nodes":[{"pos":[0,147],"content":"Occurs when the layout of the various visual elements associated with the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Threading.Dispatcher\"&gt;&lt;/xref&gt;</ph> changes.","source":"Occurs when the layout of the various visual elements associated with the current <xref href=\"System.Windows.Threading.Dispatcher\"></xref> changes."}],"pos":[282355,282503],"yaml":true},{"content":"A layout update can occur as a result of a property change, a window resize, or an explicit user request.  \n  \n This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,105],"content":"A layout update can occur as a result of a property change, a window resize, or an explicit user request.","nodes":[{"content":"A layout update can occur as a result of a property change, a window resize, or an explicit user request.","pos":[0,105]}]},{"pos":[112,215],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[282514,282734],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses logical focus.","nodes":[{"pos":[0,45],"content":"Occurs when this element loses logical focus.","nodes":[{"content":"Occurs when this element loses logical focus.","pos":[0,45]}]}],"pos":[283715,283761],"yaml":true},{"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.  \n  \n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.  \n  \n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \n  \n<a name=\"routedEventInfo_LostFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.LostFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \n  \n-   There is no corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,324],"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.","nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.","pos":[0,324],"nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.","pos":[0,162]},{"content":"In this scenario, keyboard focus remains where it is, and the element where a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Focus%2A&gt;</ph> method is called still gets logical focus.","pos":[163,324],"source":" In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus."}]}]},{"pos":[331,530],"content":"A more precise interpretation of this event is that it is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property of an element in the route changes from <ph id=\"ph2\">`true`</ph> to <ph id=\"ph3\">`false`</ph>.","source":"A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`."},{"pos":[537,828],"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","pos":[0,291],"nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.","pos":[165,291],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus."}]}]},{"pos":[881,905],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[926,942],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[943,989],"content":"<xref:System.Windows.UIElement.LostFocusEvent>","nodes":[]},{"pos":[994,1010],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1011,1019],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1024,1032],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1033,1073],"content":"<xref:System.Windows.RoutedEventHandler>","nodes":[]},{"pos":[1084,1126],"content":"There is no corresponding tunneling event.","nodes":[{"content":"There is no corresponding tunneling event.","pos":[0,42]}]},{"pos":[1136,1254],"content":"Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[283772,285048],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> routed event."}],"pos":[286112,286197],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[286208,286748],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is no longer focused on this element,.","nodes":[{"pos":[0,63],"content":"Occurs when the keyboard is no longer focused on this element,.","nodes":[{"content":"Occurs when the keyboard is no longer focused on this element,.","pos":[0,63]}]}],"pos":[287831,287895],"yaml":true},{"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_LostKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,288],"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","pos":[0,288],"nodes":[{"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,163]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.","pos":[164,288],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus."}]}]},{"pos":[295,866],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,571],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,307],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[308,571],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[927,951],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[972,988],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[989,1043],"content":"<xref:System.Windows.UIElement.LostKeyboardFocusEvent>","nodes":[]},{"pos":[1048,1064],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1065,1073],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1078,1086],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1087,1147],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1158,1252],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph>.","pos":[0,94],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>."}]},{"pos":[1262,1388],"content":"Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[287906,289314],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.LostKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.LostKeyboardFocus\"></xref> routed event."}],"pos":[290474,290567],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[290578,291118],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses mouse capture.","nodes":[{"pos":[0,45],"content":"Occurs when this element loses mouse capture.","nodes":[{"content":"Occurs when this element loses mouse capture.","pos":[0,45]}]}],"pos":[292203,292249],"yaml":true},{"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.  \n  \n Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_LostMouseCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,172],"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.","nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.","pos":[0,172],"nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.","pos":[0,102]},{"content":"The mouse is typically captured only during drag-and-drop operations.","pos":[103,172]}]}]},{"pos":[179,472],"content":"Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.","nodes":[{"content":"Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.","pos":[0,293],"nodes":[{"content":"Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.","pos":[0,166]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost capture.","pos":[167,293],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture."}]}]},{"pos":[479,1040],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,561],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,302],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.LostMouseCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[303,561],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1100,1124],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1145,1161],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1162,1215],"content":"<xref:System.Windows.UIElement.LostMouseCaptureEvent>","nodes":[]},{"pos":[1220,1236],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1237,1245],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1250,1258],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1259,1304],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1315,1365],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1375,1500],"content":"Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[292260,293782],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.LostMouseCapture\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostMouseCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.LostMouseCapture\"></xref> routed event."}],"pos":[294905,294997],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[295008,295548],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses stylus capture.","nodes":[{"pos":[0,46],"content":"Occurs when this element loses stylus capture.","nodes":[{"content":"Occurs when this element loses stylus capture.","pos":[0,46]}]}],"pos":[296638,296685],"yaml":true},{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \n  \n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_LostStylusCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,175],"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","pos":[0,175],"nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.","pos":[0,104]},{"content":"The stylus is typically captured only during drag-and-drop operations.","pos":[105,175]}]}]},{"pos":[182,471],"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","pos":[0,289],"nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.","pos":[165,289],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus."}]}]},{"pos":[478,1045],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,567],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,305],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.LostStylusCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[306,567],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1106,1130],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1151,1167],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1168,1222],"content":"<xref:System.Windows.UIElement.LostStylusCaptureEvent>","nodes":[]},{"pos":[1227,1243],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1244,1252],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1257,1265],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1266,1312],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1323,1373],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1383,1509],"content":"Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[296696,298227],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.LostStylusCapture\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostStylusCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.LostStylusCapture\"></xref> routed event."}],"pos":[299359,299452],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[299463,300003],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses a touch capture.","nodes":[{"pos":[0,47],"content":"Occurs when this element loses a touch capture.","nodes":[{"content":"Occurs when this element loses a touch capture.","pos":[0,47]}]}],"pos":[301066,301114],"yaml":true},{"content":"<a name=\"routedEventInfo_LostTouchCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[54,78],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[99,115],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[116,169],"content":"<xref:System.Windows.UIElement.LostTouchCaptureEvent>","nodes":[]},{"pos":[174,190],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[191,199],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[204,212],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[213,295],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[306,431],"content":"Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[301125,301570],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.LostTouchCapture\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.LostTouchCapture\"></xref> routed event."}],"pos":[302700,302792],"yaml":true},{"content":"Occurs when the manipulation encounters a boundary.","nodes":[{"pos":[0,51],"content":"Occurs when the manipulation encounters a boundary.","nodes":[{"content":"Occurs when the manipulation encounters a boundary.","pos":[0,51]}]}],"pos":[303948,304000],"yaml":true},{"content":"<a name=\"routedEventInfo_ManipulationBoundaryFeedback\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|","nodes":[{"pos":[66,90],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[111,127],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[128,193],"content":"<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>","nodes":[]},{"pos":[198,214],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[215,223],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[228,236],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[237,342],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs&gt;</ph>.","pos":[0,105],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>."}]}],"pos":[304011,304366],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"&gt;&lt;/xref&gt;</ph> event.","source":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event."}],"pos":[305648,305745],"yaml":true},{"content":"Occurs when a manipulation and inertia on the <xref href=\"System.Windows.UIElement\"></xref> object is complete.","nodes":[{"pos":[0,111],"content":"Occurs when a manipulation and inertia on the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> object is complete.","source":"Occurs when a manipulation and inertia on the <xref href=\"System.Windows.UIElement\"></xref> object is complete."}],"pos":[306871,306983],"yaml":true},{"content":"You can use this event to get information about the manipulation when it completes.  For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName> property to determine the total amount the position of the manipulation changed.  \n  \n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \n  \n<a name=\"routedEventInfo_ManipulationCompleted\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|","nodes":[{"pos":[0,299],"content":"You can use this event to get information about the manipulation when it completes.  For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName> property to determine the total amount the position of the manipulation changed.","nodes":[{"content":"You can use this event to get information about the manipulation when it completes.  For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName> property to determine the total amount the position of the manipulation changed.","pos":[0,299],"nodes":[{"content":"You can use this event to get information about the manipulation when it completes.","pos":[0,83]},{"content":"For example, you can use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName&gt;</ph> property to determine the total amount the position of the manipulation changed.","pos":[85,299],"source":"  For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName> property to determine the total amount the position of the manipulation changed."}]}]},{"pos":[306,630],"content":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).","nodes":[{"content":"For more information about manipulations, see the <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[0,116],"source":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.","pos":[118,324],"source":"  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)."}]},{"pos":[695,719],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[740,756],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[757,815],"content":"<xref:System.Windows.UIElement.ManipulationCompletedEvent>","nodes":[]},{"pos":[820,836],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[837,845],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[850,858],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[859,957],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationCompletedEventArgs&gt;</ph>.","pos":[0,98],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>."}]}],"pos":[306994,307968],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationCompleted\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> routed event."}],"pos":[309187,309284],"yaml":true},{"content":"Occurs when the input device changes position during a manipulation.","nodes":[{"pos":[0,68],"content":"Occurs when the input device changes position during a manipulation.","nodes":[{"content":"Occurs when the input device changes position during a manipulation.","pos":[0,68]}]}],"pos":[310357,310426],"yaml":true},{"content":"The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.  You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.  \n  \n The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.  You must provide the logic to the element that is to be manipulated.  The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.  You apply that information to the element that is to be manipulated.  \n  \n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \n  \n<a name=\"routedEventInfo_ManipulationDelta\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|","nodes":[{"pos":[0,329],"content":"The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.  You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.","nodes":[{"content":"The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.  You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.","pos":[0,329],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.","pos":[0,178],"source":"The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs."},{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A&gt;</ph> property to check whether the event is occurring during inertia.","pos":[180,329],"source":"  You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia."}]}]},{"pos":[336,975],"content":"The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.  You must provide the logic to the element that is to be manipulated.  The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.  You apply that information to the element that is to be manipulated.","nodes":[{"content":"The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.  You must provide the logic to the element that is to be manipulated.  The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.  You apply that information to the element that is to be manipulated.","pos":[0,639],"nodes":[{"content":"The element on with <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event occurs is not affected in any way when the event occurs.","pos":[0,132],"source":"The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs."},{"content":"You must provide the logic to the element that is to be manipulated.","pos":[134,202]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A&gt;</ph> properties, which are of type <ph id=\"ph3\">&lt;xref:System.Windows.Input.ManipulationDelta&gt;</ph>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.","pos":[204,569],"source":"  The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object."},{"content":"You apply that information to the element that is to be manipulated.","pos":[571,639]}]}]},{"pos":[982,1306],"content":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).","nodes":[{"content":"For more information about manipulations, see the <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[0,116],"source":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.","pos":[118,324],"source":"  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)."}]},{"pos":[1367,1391],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1412,1428],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1429,1483],"content":"<xref:System.Windows.UIElement.ManipulationDeltaEvent>","nodes":[]},{"pos":[1488,1504],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1505,1513],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1518,1526],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1527,1621],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationDeltaEventArgs&gt;</ph>.","pos":[0,94],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>."}]}],"pos":[310437,312077],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> routed event."}],"pos":[314392,314485],"yaml":true},{"content":"Occurs when the input device loses contact with the <xref href=\"System.Windows.UIElement\"></xref> object during a manipulation and inertia begins.","nodes":[{"pos":[0,146],"content":"Occurs when the input device loses contact with the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> object during a manipulation and inertia begins.","source":"Occurs when the input device loses contact with the <xref href=\"System.Windows.UIElement\"></xref> object during a manipulation and inertia begins."}],"pos":[315614,315761],"yaml":true},{"content":"The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation. For example, if a user \"throws\" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>. When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.  The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.  \n  \n You can use this event to specify the behavior of the inertia.  For example, you can set the initial velocity that is used when inertia begins.  You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.  You can set these values for each type of manipulation (translation, expansion, or rotation) independently.  For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  \n  \n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \n  \n<a name=\"routedEventInfo_ManipulationInertiaStarting\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|","nodes":[{"pos":[0,727],"content":"The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation. For example, if a user \"throws\" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>. When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.  The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.","nodes":[{"content":"The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation. For example, if a user \"throws\" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>. When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.  The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.","pos":[0,727],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event occurs when the user lifts all of the fingers from the screen during a manipulation.","pos":[0,154],"source":"The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation."},{"content":"For example, if a user \"throws\" a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> across a surface, the user will touch the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> to begin the action, move the finger across the screen for a short distance, and then release the <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[155,425],"source":" For example, if a user \"throws\" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>."},{"content":"When the user releases the element, inertia begins and the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event occurs.","pos":[426,558],"source":" When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> continues to receive <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> events to indicate that inertia is occurring on the element.","pos":[560,727],"source":"  The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element."}]}]},{"pos":[734,1196],"content":"You can use this event to specify the behavior of the inertia.  For example, you can set the initial velocity that is used when inertia begins.  You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.  You can set these values for each type of manipulation (translation, expansion, or rotation) independently.  For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.","nodes":[{"content":"You can use this event to specify the behavior of the inertia.  For example, you can set the initial velocity that is used when inertia begins.  You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.  You can set these values for each type of manipulation (translation, expansion, or rotation) independently.  For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.","pos":[0,462],"nodes":[{"content":"You can use this event to specify the behavior of the inertia.","pos":[0,62]},{"content":"For example, you can set the initial velocity that is used when inertia begins.","pos":[64,143]},{"content":"You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.","pos":[145,260]},{"content":"You can set these values for each type of manipulation (translation, expansion, or rotation) independently.","pos":[262,369]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>.","pos":[371,462],"source":"  For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>."}]}]},{"pos":[1203,1527],"content":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).","nodes":[{"content":"For more information about manipulations, see the <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[0,116],"source":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.","pos":[118,324],"source":"  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)."}]},{"pos":[1598,1622],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1643,1659],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1660,1724],"content":"<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>","nodes":[]},{"pos":[1729,1745],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1746,1754],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1759,1767],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1768,1872],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationInertiaStartingEventArgs&gt;</ph>.","pos":[0,104],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>."}]}],"pos":[315772,317665],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> routed event.","nodes":[{"pos":[0,102],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> routed event."}],"pos":[319717,319820],"yaml":true},{"content":"Occurs when an input device begins a manipulation on the <xref href=\"System.Windows.UIElement\"></xref> object.","nodes":[{"pos":[0,110],"content":"Occurs when an input device begins a manipulation on the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> object.","source":"Occurs when an input device begins a manipulation on the <xref href=\"System.Windows.UIElement\"></xref> object."}],"pos":[320933,321044],"yaml":true},{"content":"The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.  You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:  \n  \n-   Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.  \n  \n-   Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.  \n  \n-   Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.  \n  \n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \n  \n<a name=\"routedEventInfo_ManipulationStarted\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.|","nodes":[{"pos":[0,231],"content":"The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.  You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:","nodes":[{"content":"The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.  You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:","pos":[0,231],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> event occurs after the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event.","pos":[0,138],"source":"The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event."},{"content":"You can do the following with the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>:","pos":[140,231],"source":"  You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:"}]}]},{"pos":[241,409],"content":"Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.","nodes":[{"content":"Get the element that the manipulation's position is relative to by using the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A&gt;</ph> property.","pos":[0,168],"source":"Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property."}]},{"pos":[419,555],"content":"Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.","nodes":[{"content":"Get the origin of the manipulation by using the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A&gt;</ph> property.","pos":[0,136],"source":"Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property."}]},{"pos":[565,680],"content":"Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.","nodes":[{"content":"Cancel the manipulation by calling the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A&gt;</ph> method.","pos":[0,115],"source":"Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method."}]},{"pos":[687,1011],"content":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).","nodes":[{"content":"For more information about manipulations, see the <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[0,116],"source":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.","pos":[118,324],"source":"  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)."}]},{"pos":[1074,1098],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1119,1135],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1136,1192],"content":"<xref:System.Windows.UIElement.ManipulationStartedEvent>","nodes":[]},{"pos":[1197,1213],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1214,1222],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1227,1235],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1236,1332],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationStartedEventArgs&gt;</ph>.","pos":[0,96],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>."}]}],"pos":[321055,322410],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationStarted\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationStarted\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationStarted\"></xref> routed event."}],"pos":[323611,323706],"yaml":true},{"content":"Occurs when the manipulation processor is first created.","nodes":[{"pos":[0,56],"content":"Occurs when the manipulation processor is first created.","nodes":[{"content":"Occurs when the manipulation processor is first created.","pos":[0,56]}]}],"pos":[324795,324852],"yaml":true},{"content":"The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it. By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.  You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property. For example, you can make the manipulation relative to the parent of the element.  \n  \n You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:  \n  \n-   Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName> property.  \n  \n-   Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.  \n  \n-   Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName> property.  \n  \n-   Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName> method.  \n  \n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \n  \n<a name=\"routedEventInfo_ManipulationStarting\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.|","nodes":[{"pos":[0,662],"content":"The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it. By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.  You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property. For example, you can make the manipulation relative to the parent of the element.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event occurs on an element that has the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> property set to <ph id=\"ph3\">`true`</ph> when the user puts a finger on it.","pos":[0,211],"source":"The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it."},{"content":"By default, subsequent manipulation events report the position of the manipulation relative to the element that has <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsManipulationEnabled%2A&gt;</ph> set to <ph id=\"ph2\">`true`</ph>.","pos":[212,399],"source":" By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`."},{"content":"You can specify that the position should be relative to another element by setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A&gt;</ph> property.","pos":[401,580],"source":"  You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property."},{"content":"For example, you can make the manipulation relative to the parent of the element.","pos":[581,662]}]},{"pos":[669,776],"content":"You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:","nodes":[{"content":"You can also do the following in an event handler for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph>:","pos":[0,107],"source":"You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:"}]},{"pos":[786,998],"content":"Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName> property.","nodes":[{"content":"Specify whether the user needs more than one finger to perform the manipulations by setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,212],"source":"Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName> property."}]},{"pos":[1008,1234],"content":"Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.","nodes":[{"content":"Specify which types of manipulation are enabled by setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName&gt;</ph> property to a <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationModes&gt;</ph> enumeration.","pos":[0,226],"source":"Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName> property to a <xref:System.Windows.Input.ManipulationModes> enumeration."}]},{"pos":[1244,1407],"content":"Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName> property.","nodes":[{"content":"Specify the center of a single-finger rotation by setting the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,163],"source":"Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName> property."}]},{"pos":[1417,1556],"content":"Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName> method.","nodes":[{"content":"Cancel the manipulation by calling the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,139],"source":"Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName> method."}]},{"pos":[1563,1887],"content":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).","nodes":[{"content":"For more information about manipulations, see the <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[0,116],"source":"For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."},{"content":"For an example of an application that responds to manipulations, see <bpt id=\"p1\">[</bpt>Walkthrough: Creating Your First Touch Application<ept id=\"p1\">](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)</ept>.","pos":[118,324],"source":"  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md)."}]},{"pos":[1951,1975],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1996,2012],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2013,2070],"content":"<xref:System.Windows.UIElement.ManipulationStartingEvent>","nodes":[]},{"pos":[2075,2091],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2092,2100],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[2105,2113],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2114,2211],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.ManipulationStartingEventArgs&gt;</ph>.","pos":[0,97],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>."}]}],"pos":[324863,327101],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationStarting\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationStarting\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.ManipulationStarting\"></xref> routed event."}],"pos":[329180,329276],"yaml":true},{"content":"Updates the <xref href=\"System.Windows.UIElement.DesiredSize\"></xref> of a <xref href=\"System.Windows.UIElement\"></xref>. Parent elements call this method from their own <xref href=\"System.Windows.UIElement.MeasureCore(System.Windows.Size)\"></xref> implementations to form a recursive layout update. Calling this method constitutes the first pass (the \"Measure\" pass) of a layout update.","nodes":[{"pos":[0,387],"content":"Updates the <xref href=\"System.Windows.UIElement.DesiredSize\"></xref> of a <xref href=\"System.Windows.UIElement\"></xref>. Parent elements call this method from their own <xref href=\"System.Windows.UIElement.MeasureCore(System.Windows.Size)\"></xref> implementations to form a recursive layout update. Calling this method constitutes the first pass (the \"Measure\" pass) of a layout update.","nodes":[{"content":"Updates the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.DesiredSize\"&gt;&lt;/xref&gt;</ph> of a <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","pos":[0,121],"source":"Updates the <xref href=\"System.Windows.UIElement.DesiredSize\"></xref> of a <xref href=\"System.Windows.UIElement\"></xref>."},{"content":"Parent elements call this method from their own <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MeasureCore(System.Windows.Size)\"&gt;&lt;/xref&gt;</ph> implementations to form a recursive layout update.","pos":[122,299],"source":" Parent elements call this method from their own <xref href=\"System.Windows.UIElement.MeasureCore(System.Windows.Size)\"></xref> implementations to form a recursive layout update."},{"content":"Calling this method constitutes the first pass (the \"Measure\" pass) of a layout update.","pos":[300,387]}]}],"pos":[330370,330758],"yaml":true},{"content":"Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call. During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input. During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.  \n  \n `availableSize` can be any number from zero to infinite. Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.  \n  \n When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.  \n  \n Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change. Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).  \n  \n> [!NOTE]\n>  Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method. However, calling this method is usually unnecessary and can cause poor performance.  \n  \n The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.  \n  \n When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.","nodes":[{"pos":[0,458],"content":"Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call. During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input. During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.","nodes":[{"content":"Computation of layout positioning in <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> is comprised of a <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call and an <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.","pos":[0,228],"source":"Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call."},{"content":"During the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call, an element determines its size requirements by using an <ph id=\"ph2\">`availableSize`</ph> input.","pos":[229,367],"source":" During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input."},{"content":"During the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call, the element size is finalized.","pos":[368,458],"source":" During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized."}]},{"pos":[465,649],"content":"`availableSize` can be any number from zero to infinite. Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.","nodes":[{"content":"<ph id=\"ph1\">`availableSize`</ph> can be any number from zero to infinite.","pos":[0,56],"source":"`availableSize` can be any number from zero to infinite."},{"content":"Elements participating in layout should return the minimum <ph id=\"ph1\">&lt;xref:System.Windows.Size&gt;</ph> they require for a given <ph id=\"ph2\">`availableSize`</ph>.","pos":[57,184],"source":" Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`."}]},{"pos":[656,1355],"content":"When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.","nodes":[{"content":"When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.","pos":[0,699],"nodes":[{"content":"When a layout is first instantiated, it always receives a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call before <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.","pos":[0,156],"source":"When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>."},{"content":"However, after the first layout pass, it may receive an <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call without a <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>; this can happen when a property that affects only <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> is changed (such as alignment), or when the parent receives an <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> without a <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph>.","pos":[157,567],"source":" However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> call will automatically invalidate an <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> call.","pos":[568,699],"source":" A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call."}]}]},{"pos":[1362,1721],"content":"Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change. Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).","nodes":[{"content":"Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change. Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).","pos":[0,359],"nodes":[{"content":"Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change.","pos":[0,112]},{"content":"Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> property, for example).","pos":[113,359],"source":" Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example)."}]}]},{"pos":[1729,1921],"content":"[!NOTE]\n Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method. However, calling this method is usually unnecessary and can cause poor performance.","leadings":["","> "],"nodes":[{"content":" Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method. However, calling this method is usually unnecessary and can cause poor performance.","pos":[8,190],"nodes":[{"content":"Layout updates can be forced by using the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> method.","pos":[1,98],"source":" Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method."},{"content":"However, calling this method is usually unnecessary and can cause poor performance.","pos":[99,182]}]}]},{"pos":[1928,2486],"content":"The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.","nodes":[{"content":"The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.","pos":[0,558],"nodes":[{"content":"The layout system keeps two separate queues of invalid layouts, one for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> and one for <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph>.","pos":[0,170],"source":"The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>."},{"content":"The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents.","pos":[171,406]},{"content":"Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.","pos":[407,558]}]}]},{"pos":[2493,2821],"content":"When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.","nodes":[{"content":"When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.","pos":[0,328],"nodes":[{"content":"When updating layout, the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue is emptied first, followed by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue.","pos":[0,158],"source":"When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue."},{"content":"An element in the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Arrange%2A&gt;</ph> queue will never be arranged if there is an element in the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> queue.","pos":[159,328],"source":" An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue."}]}]}],"pos":[330769,333606],"yaml":true,"extradata":"MT"},{"content":"The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.","nodes":[{"pos":[0,249],"content":"The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.","nodes":[{"content":"The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.","pos":[0,249],"nodes":[{"content":"The available space that a parent element can allocate a child element.","pos":[0,71]},{"content":"A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.","pos":[72,249]}]}]}],"pos":[333777,334027],"yaml":true},{"content":"When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.","nodes":[{"pos":[0,157],"content":"When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.","nodes":[{"content":"When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.","pos":[0,157]}]}],"pos":[335040,335198],"yaml":true},{"content":"It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>. If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method. Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>. This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level. Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  \n  \n A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.","nodes":[{"pos":[0,1057],"content":"It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>. If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method. Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>. This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level. Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.","nodes":[{"content":"It is more common to derive an element from <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> rather than <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,127],"source":"It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>."},{"content":"If you are deriving from <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, note that an override of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> on <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> seals the <ph id=\"ph4\">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> method.","pos":[128,371],"source":" If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method."},{"content":"Therefore, you only override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> as a means to alter layout measure characteristics if you derive from <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> through an inheritance that does not include <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","pos":[372,634],"source":" Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>."},{"content":"This might be the case if you are attempting to build your own implementation on the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> core-level.","pos":[635,803],"source":" This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level."},{"content":"Otherwise, if you are deriving from <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>, then the implementation template for Measure behavior is the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation of .<ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.MeasureOverride%2A&gt;</ph>.","pos":[804,1057],"source":" Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>."}]},{"pos":[1064,1269],"content":"A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.","nodes":[{"content":"A parent element with child elements must call <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Measure%2A&gt;</ph> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.","pos":[0,205],"source":"A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout."}]}],"pos":[335209,336483],"yaml":true,"extradata":"MT"},{"content":"The available size that the parent element can allocate for the child.","nodes":[{"pos":[0,70],"content":"The available size that the parent element can allocate for the child.","nodes":[{"content":"The available size that the parent element can allocate for the child.","pos":[0,70]}]}],"pos":[338174,338245],"yaml":true},{"content":"The desired size of this element in layout.","nodes":[{"pos":[0,43],"content":"The desired size of this element in layout.","nodes":[{"content":"The desired size of this element in layout.","pos":[0,43]}]}],"pos":[338308,338352],"yaml":true},{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","pos":[0,79]}]}],"pos":[339275,339355],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.  \n  \n> [!IMPORTANT]\n>  Some controls might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \n  \n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \n  \n-   Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \n  \n-   Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \n  \n<a name=\"routedEventInfo_MouseDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,533],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,533],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,288],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[289,533],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[540,1280],"content":"The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.","nodes":[{"content":"The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.","pos":[0,740],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.","pos":[0,267],"source":"The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[268,615],"source":" <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.","pos":[616,740],"source":" See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>."}]}]},{"pos":[1288,1852],"content":"[!IMPORTANT]\n Some controls might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","leadings":["","> "],"nodes":[{"content":" Some controls might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[13,562],"nodes":[{"content":"Some controls might have inherent class handling for mouse button events.","pos":[1,74]},{"content":"The left mouse button down event is the most likely event to have class handling in a control.","pos":[75,169]},{"content":"The class handling often marks the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.","pos":[170,273],"source":" The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled."},{"content":"Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.","pos":[274,392]},{"content":"Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[393,549]}]}]},{"pos":[1859,2108],"content":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","nodes":[{"content":"You can resolve the issue that is outlined in the preceding Important and still receive <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","pos":[0,249],"source":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:"}]},{"pos":[2118,2352],"content":"Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","nodes":[{"content":"Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[0,234],"nodes":[{"content":"Attach handlers for the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.","pos":[0,127],"source":"Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls."},{"content":"Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[128,234]}]}]},{"pos":[2362,2611],"content":"Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","nodes":[{"content":"Register a handler on the control procedurally by calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","pos":[0,249],"source":"Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data."}]},{"pos":[2664,2688],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2709,2725],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2726,2772],"content":"<xref:System.Windows.UIElement.MouseDownEvent>","nodes":[]},{"pos":[2777,2793],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2794,2802],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[2807,2815],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2816,2867],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2878,2964],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph>.","pos":[0,86],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>."}]},{"pos":[2974,3092],"content":"Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[339366,342487],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseDown\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseDown\"></xref> routed event."}],"pos":[343551,343636],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[343647,344187],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer enters the bounds of this element.","nodes":[{"pos":[0,64],"content":"Occurs when the mouse pointer enters the bounds of this element.","nodes":[{"content":"Occurs when the mouse pointer enters the bounds of this element.","pos":[0,64]}]}],"pos":[345228,345293],"yaml":true},{"content":"<xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar. The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move. As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source. In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.  \n  \n<a name=\"routedEventInfo_MouseEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseEnterEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,320],"content":"<xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[0,320],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is a  that uses the direct event handling routing strategy.","pos":[0,102],"source":"<xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[103,222]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[223,320]}]}]},{"pos":[327,598],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`false`</ph> to <ph id=\"ph4\">`true`</ph> on this element.","source":"Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element."},{"pos":[605,1142],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,537],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,290],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[291,537],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1149,1951],"content":"A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar. The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move. As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source. In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.","nodes":[{"content":"A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar. The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move. As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source. In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.","pos":[0,802],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> (or any <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase&gt;</ph> derived class) has native handling for a <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event when the button has focus, and the pressed key is the space bar.","pos":[0,252],"source":"A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar."},{"content":"The native handling raises the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move.","pos":[253,463],"source":" The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move."},{"content":"As a result of the mouse capture, a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> event is also raised with the button as the source.","pos":[464,594],"source":" As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source."},{"content":"In general, if an element captures the mouse, then <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseEnter&gt;</ph> is raised, as well as <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.GotMouseCapture&gt;</ph> and possibly other control-specific events.","pos":[595,802],"source":" In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events."}]}]},{"pos":[2005,2029],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2050,2066],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2067,2114],"content":"<xref:System.Windows.UIElement.MouseEnterEvent>","nodes":[]},{"pos":[2119,2135],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2136,2142],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2147,2155],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2156,2201],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[2212,2331],"content":"Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[345304,347657],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseEnter\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseEnter\"></xref> routed event."}],"pos":[348738,348824],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[348835,349375],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer leaves the bounds of this element.","nodes":[{"pos":[0,64],"content":"Occurs when the mouse pointer leaves the bounds of this element.","nodes":[{"content":"Occurs when the mouse pointer leaves the bounds of this element.","pos":[0,64]}]}],"pos":[350417,350482],"yaml":true},{"content":"<xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_MouseLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseLeaveEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,320],"content":"<xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[0,320],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> is a  that uses the direct event handling routing strategy.","pos":[0,102],"source":"<xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[103,222]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[223,320]}]}]},{"pos":[327,576],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> tracks when the mouse leaves an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`true`</ph> to <ph id=\"ph4\">`false`</ph> on this element.","source":"Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element."},{"pos":[583,1120],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,537],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,290],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[291,537],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1174,1198],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1219,1235],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1236,1283],"content":"<xref:System.Windows.UIElement.MouseLeaveEvent>","nodes":[]},{"pos":[1288,1304],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1305,1311],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1316,1324],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1325,1370],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1381,1500],"content":"Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[350493,352013],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseLeave\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseLeave\"></xref> routed event."}],"pos":[353094,353180],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[353191,353731],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[354827,354918],"yaml":true},{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n> [!IMPORTANT]\n>  Some control classes might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \n  \n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \n  \n-   Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \n  \n-   Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \n  \n<a name=\"routedEventInfo_MouseLeftButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,201],"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,201],"source":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[208,466],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,258],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[473,1339],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.","pos":[0,866],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,145],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[146,499],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[500,747],"source":" If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events."},{"content":"This possibly includes class-handler generated events such as <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>.","pos":[748,866],"source":" This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>."}]}]},{"pos":[1346,1991],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[1999,2570],"content":"[!IMPORTANT]\n Some control classes might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","leadings":["","> "],"nodes":[{"content":" Some control classes might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[13,569],"nodes":[{"content":"Some control classes might have inherent class handling for mouse button events.","pos":[1,81]},{"content":"The left mouse button down event is the most likely event to have class handling in a control.","pos":[82,176]},{"content":"The class handling often marks the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.","pos":[177,280],"source":" The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled."},{"content":"Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.","pos":[281,399]},{"content":"Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[400,556]}]}]},{"pos":[2577,2836],"content":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","nodes":[{"content":"You can resolve the issue that is outlined in the preceding Important and still receive <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","pos":[0,259],"source":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:"}]},{"pos":[2846,3080],"content":"Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","nodes":[{"content":"Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[0,234],"nodes":[{"content":"Attach handlers for the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.","pos":[0,127],"source":"Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls."},{"content":"Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[128,234]}]}]},{"pos":[3090,3339],"content":"Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","nodes":[{"content":"Register a handler on the control procedurally by calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","pos":[0,249],"source":"Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data."}]},{"pos":[3402,3426],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[3447,3463],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[3464,3520],"content":"<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>","nodes":[]},{"pos":[3525,3541],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[3542,3548],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[3553,3561],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[3562,3613],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[3624,3752],"content":"Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,128],"source":"Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[354929,358714],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"></xref> routed event."}],"pos":[359870,359965],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[359976,360516],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[361609,361701],"yaml":true},{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n<a name=\"routedEventInfo_MouseLeftButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,201],"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,201],"source":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[208,464],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,256],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[471,1212],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","pos":[0,741],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,143],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[144,497],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[498,741],"source":" If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events."}]}]},{"pos":[1219,1864],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[1925,1949],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1970,1986],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1987,2041],"content":"<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>","nodes":[]},{"pos":[2046,2062],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2063,2069],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2074,2082],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2083,2134],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2145,2271],"content":"Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[361712,364007],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"></xref> routed event."}],"pos":[365149,365242],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[365253,365793],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer moves while over this element.","nodes":[{"pos":[0,60],"content":"Occurs when the mouse pointer moves while over this element.","nodes":[{"content":"Occurs when the mouse pointer moves while over this element.","pos":[0,60]}]}],"pos":[366836,366897],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_MouseMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,533],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,533],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,288],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[289,533],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[586,610],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[631,647],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[648,694],"content":"<xref:System.Windows.UIElement.MouseMoveEvent>","nodes":[]},{"pos":[699,715],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[716,724],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[729,737],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[738,783],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[794,880],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph>.","pos":[0,86],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>."}]},{"pos":[890,1008],"content":"Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[366908,367934],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseMove\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseMove\"></xref> routed event."}],"pos":[369008,369093],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[369104,369644],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[370745,370837],"yaml":true},{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).  \n  \n<a name=\"routedEventInfo_MouseRightButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,201],"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,201],"source":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[208,466],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,258],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[473,1340],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.","pos":[0,867],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,145],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[146,499],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[500,748],"source":" If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events."},{"content":"This possibly includes class-handler generated events such as <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.MouseDoubleClick&gt;</ph>.","pos":[749,867],"source":" This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>."}]}]},{"pos":[1347,1992],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[1999,2235],"content":"Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).","nodes":[{"content":"Right button mouse events frequently have native handling in application scenarios.","pos":[0,83]},{"content":"For instance, a right mouse button down might display a context menu.","pos":[84,153]},{"content":"See <bpt id=\"p1\">[</bpt>ContextMenu Overview<ept id=\"p1\">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.","pos":[154,236],"source":" See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md)."}]},{"pos":[2299,2323],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2344,2360],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2361,2418],"content":"<xref:System.Windows.UIElement.MouseRightButtonDownEvent>","nodes":[]},{"pos":[2423,2439],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2440,2446],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2451,2459],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2460,2511],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2522,2651],"content":"Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,129],"source":"Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[370848,373525],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseRightButtonDown\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseRightButtonDown\"></xref> routed event."}],"pos":[374688,374784],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[374795,375335],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,92],"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","pos":[0,92]}]}],"pos":[376413,376506],"yaml":true},{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n<a name=\"routedEventInfo_MouseRightButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,201],"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,201],"source":"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[208,464],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,256],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[471,1215],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","pos":[0,744],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,143],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[144,497],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[498,744],"source":" If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events."}]}]},{"pos":[1222,1867],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[1929,1953],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1974,1990],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1991,2046],"content":"<xref:System.Windows.UIElement.MouseRightButtonUpEvent>","nodes":[]},{"pos":[2051,2067],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2068,2074],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2079,2087],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2088,2139],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2150,2277],"content":"Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,127],"source":"Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[376517,378818],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseRightButtonUp\"></xref> routed event.","nodes":[{"pos":[0,93],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseRightButtonUp\"></xref> routed event."}],"pos":[379967,380061],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[380072,380612],"yaml":true,"extradata":"MT"},{"content":"Occurs when any mouse button is released over this element.","nodes":[{"pos":[0,59],"content":"Occurs when any mouse button is released over this element.","nodes":[{"content":"Occurs when any mouse button is released over this element.","pos":[0,59]}]}],"pos":[381622,381682],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.  \n  \n<a name=\"routedEventInfo_MouseUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,525],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,525],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,284],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[285,525],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[532,1260],"content":"The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.","nodes":[{"content":"The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.","pos":[0,728],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>, which correspond to a release of one of the two standard mouse buttons.","pos":[0,263],"source":"The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[264,607],"source":" <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.","pos":[608,728],"source":" See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>."}]}]},{"pos":[1311,1335],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1356,1372],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1373,1417],"content":"<xref:System.Windows.UIElement.MouseUpEvent>","nodes":[]},{"pos":[1422,1438],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1439,1447],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1452,1460],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1461,1512],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[1523,1607],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph>.","pos":[0,84],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>."}]},{"pos":[1617,1733],"content":"Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,116],"source":"Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[381693,383446],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseUp\"></xref> routed event.","nodes":[{"pos":[0,82],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseUp\"></xref> routed event."}],"pos":[384518,384601],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[384612,385152],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[386169,386260],"yaml":true},{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_MouseWheel\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.MouseWheelEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.  \n  \n-   Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,244],"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.","nodes":[{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> event from a focused or captured element, the mouse pointer might actually be over another element.","pos":[0,244],"source":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element."}]},{"pos":[251,788],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,537],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,290],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[291,537],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[842,866],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[887,903],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[904,951],"content":"<xref:System.Windows.UIElement.MouseWheelEvent>","nodes":[]},{"pos":[956,972],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[973,981],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[986,994],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[995,1045],"content":"<xref:System.Windows.Input.MouseWheelEventHandler>","nodes":[]},{"pos":[1056,1143],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseWheel&gt;</ph>.","pos":[0,87],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>."}]},{"pos":[1153,1272],"content":"Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes."}]}],"pos":[386271,387563],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.MouseWheel\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseWheel\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.MouseWheel\"></xref> routed event."}],"pos":[388654,388740],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[388751,389291],"yaml":true,"extradata":"MT"},{"content":"Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","nodes":[{"pos":[0,210],"content":"Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","nodes":[{"content":"Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","pos":[0,210],"nodes":[{"content":"Attempts to move focus from this element to another element.","pos":[0,60]},{"content":"The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","pos":[61,210]}]}]}],"pos":[390499,390710],"yaml":true},{"content":"Make sure you check the return value of this method. A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.","nodes":[{"pos":[0,229],"content":"Make sure you check the return value of this method. A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.","nodes":[{"content":"Make sure you check the return value of this method.","pos":[0,52]},{"content":"A return value of <ph id=\"ph1\">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.","pos":[53,229],"source":" A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap."}]}],"pos":[390721,390951],"yaml":true,"extradata":"MT"},{"content":"A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.","nodes":[{"pos":[0,143],"content":"A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.","nodes":[{"content":"A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.","pos":[0,143]}]}],"pos":[391156,391300],"yaml":true},{"content":"`true` if the requested traversal was performed; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the requested traversal was performed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the requested traversal was performed; otherwise, `false`."}],"pos":[391358,391429],"yaml":true},{"content":"Provides class handling for when an access key that is meaningful for this element is invoked.","nodes":[{"pos":[0,94],"content":"Provides class handling for when an access key that is meaningful for this element is invoked.","nodes":[{"content":"Provides class handling for when an access key that is meaningful for this element is invoked.","pos":[0,94]}]}],"pos":[392546,392641],"yaml":true},{"content":"There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for. Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.","nodes":[{"pos":[0,352],"content":"There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for. Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.","nodes":[{"content":"There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for. Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.","pos":[0,352],"nodes":[{"content":"There is no actual AccessKey event in the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> class, or elsewhere, which you can raise or attach handlers for.","pos":[0,138],"source":"There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for."},{"content":"Instead, the event is originated via a dedicated manager class, <ph id=\"ph1\">&lt;xref:System.Windows.Input.AccessKeyManager&gt;</ph>, which post-processes all input to search for access keys that are applicable to the entire input model.","pos":[139,352],"source":" Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model."}]}]}],"pos":[392652,393005],"yaml":true,"extradata":"MT"},{"content":"The event data to the access key event. The event data reports which key was invoked, and indicate whether the <xref href=\"System.Windows.Input.AccessKeyManager\"></xref> object that controls the sending of these events also sent this access key invocation to other elements.","nodes":[{"pos":[0,274],"content":"The event data to the access key event. The event data reports which key was invoked, and indicate whether the <xref href=\"System.Windows.Input.AccessKeyManager\"></xref> object that controls the sending of these events also sent this access key invocation to other elements.","nodes":[{"content":"The event data to the access key event.","pos":[0,39]},{"content":"The event data reports which key was invoked, and indicate whether the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.AccessKeyManager\"&gt;&lt;/xref&gt;</ph> object that controls the sending of these events also sent this access key invocation to other elements.","pos":[40,274],"source":" The event data reports which key was invoked, and indicate whether the <xref href=\"System.Windows.Input.AccessKeyManager\"></xref> object that controls the sending of these events also sent this access key invocation to other elements."}]}],"pos":[393207,393482],"yaml":true},{"content":"Supports layout behavior when a child element is resized.","nodes":[{"pos":[0,57],"content":"Supports layout behavior when a child element is resized.","nodes":[{"content":"Supports layout behavior when a child element is resized.","pos":[0,57]}]}],"pos":[394613,394671],"yaml":true},{"content":"This method is typically not called by your application code. It is exposed so that derived element classes can make further checks on their own possibly invalid layout state. Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements. An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.","nodes":[{"pos":[0,469],"content":"This method is typically not called by your application code. It is exposed so that derived element classes can make further checks on their own possibly invalid layout state. Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements. An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.","nodes":[{"content":"This method is typically not called by your application code. It is exposed so that derived element classes can make further checks on their own possibly invalid layout state. Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements. An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.","pos":[0,469],"nodes":[{"content":"This method is typically not called by your application code.","pos":[0,61]},{"content":"It is exposed so that derived element classes can make further checks on their own possibly invalid layout state.","pos":[62,175]},{"content":"Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements.","pos":[176,307]},{"content":"An example derived element class that implements <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A&gt;</ph> is the <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Grid&gt;</ph> control.","pos":[308,469],"source":" An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control."}]}]}],"pos":[394682,395152],"yaml":true,"extradata":"MT"},{"content":"The child element that is being resized.","nodes":[{"pos":[0,40],"content":"The child element that is being resized.","nodes":[{"content":"The child element that is being resized.","pos":[0,40]}]}],"pos":[395346,395387],"yaml":true},{"content":"Returns class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.","nodes":[{"pos":[0,200],"content":"Returns class-specific <ph id=\"ph1\">&lt;xref href=\"System.Windows.Automation.Peers.AutomationPeer\"&gt;&lt;/xref&gt;</ph> implementations for the <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.","source":"Returns class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure."}],"pos":[396409,396610],"yaml":true},{"content":"The type-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementation.","nodes":[{"pos":[0,101],"content":"The type-specific <ph id=\"ph1\">&lt;xref href=\"System.Windows.Automation.Peers.AutomationPeer\"&gt;&lt;/xref&gt;</ph> implementation.","source":"The type-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementation."}],"pos":[396834,396936],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,220],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragEnter\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,160],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[161,220]}]}],"pos":[398018,398239],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[398250,399521],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[399701,399785],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,220],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragLeave\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,160],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[161,220]}]}],"pos":[400834,401055],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[401066,402337],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[402517,402601],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,219],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragOver\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,159],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[160,219]}]}],"pos":[403644,403864],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[403875,405146],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[405325,405409],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,220],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragEnter\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,160],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[161,220]}]}],"pos":[406449,406670],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[406681,407952],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[408127,408211],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.GiveFeedback\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[409321,409545],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[409556,410827],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.GiveFeedbackEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data."}],"pos":[411026,411118],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> routed event by using the event data provided.","nodes":[{"pos":[0,112],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotFocus\"&gt;&lt;/xref&gt;</ph> routed event by using the event data provided.","source":"Raises the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> routed event by using the event data provided."}],"pos":[412198,412311],"yaml":true},{"content":"This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"pos":[0,88],"content":"This method, although virtual, does have a default implementation that raises the event.","nodes":[{"content":"This method, although virtual, does have a default implementation that raises the event.","pos":[0,88]}]},{"pos":[95,566],"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property value changes.","pos":[0,217],"source":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotFocus%2A&gt;</ph> implementation differs from some other <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.","pos":[218,471],"source":" The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event."}]}],"pos":[412322,412893],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> event.","nodes":[{"pos":[0,193],"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> event.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","pos":[0,79],"source":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data."},{"content":"This event data must contain the identifier for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotFocus\"&gt;&lt;/xref&gt;</ph> event.","pos":[80,193],"source":" This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> event."}]}],"pos":[413076,413270],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,233],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,173],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[174,233]}]}],"pos":[414496,414730],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[414741,416012],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data."}],"pos":[416243,416349],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,229],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,169],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[170,229]}]}],"pos":[417487,417717],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[417728,418999],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[419199,419290],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[420417,420649],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[420660,421931],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[422134,422226],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.GotTouchCapture\"></xref> routed event that occurs when a touch is captured to this element.","nodes":[{"pos":[0,160],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.GotTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is captured to this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.GotTouchCapture\"></xref> routed event that occurs when a touch is captured to this element."}],"pos":[423364,423525],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.","nodes":[{"pos":[0,377],"content":"The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> method has no default implementation.","pos":[0,94],"source":"The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.GotTouchCapture&gt;</ph> event.","pos":[95,244],"source":" Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnGotTouchCapture%2A&gt;</ph> method so that base classes receive the event.","pos":[245,377],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event."}]}]}],"pos":[423536,423914],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[424114,424203],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,189],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsKeyboardFocusedChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,129],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[130,189]}]}],"pos":[425496,425686],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,500],"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,500],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocused%2A&gt;</ph> dependency property changes.","pos":[0,133],"source":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[134,216]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> event is raised with that same event data instance.","pos":[217,334],"source":" Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance."},{"content":"Notice that the  <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusedChanged&gt;</ph> event is not a routed event.","pos":[335,437],"source":" Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event."},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[438,500]}]}]},{"pos":[507,798],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[425697,426500],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[426737,426842],"yaml":true},{"content":"Invoked just before the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,191],"content":"Invoked just before the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked just before the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"&gt;&lt;/xref&gt;</ph> event is raised by this element.","pos":[0,131],"source":"Invoked just before the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element."},{"content":"Implement this method to add class handling for this event.","pos":[132,191]}]}],"pos":[428168,428360],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes . The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,512],"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes . The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes . The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,512],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A&gt;</ph> dependency property changes .","pos":[0,138],"source":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes ."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[139,221]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event is raised with that same event data instance.","pos":[222,343],"source":" Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged&gt;</ph> event is not a routed event.","pos":[344,449],"source":" Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event."},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[450,512]}]}]},{"pos":[519,810],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[428371,429186],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[429427,429530],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,187],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseCapturedChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,127],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCapturedChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[128,187]}]}],"pos":[430824,431012],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,503],"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.","pos":[0,503],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> dependency property changes its value.","pos":[0,141],"source":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[142,224]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> event is raised with that same event data instance.","pos":[225,340],"source":" Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseCapturedChanged&gt;</ph> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.","pos":[341,503],"source":" Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler."}]}]},{"pos":[510,801],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[431023,431829],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[432064,432169],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,192],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseCaptureWithinChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,132],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[133,192]}]}],"pos":[433487,433680],"yaml":true},{"content":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[433920,434023],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,191],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsMouseDirectlyOverChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,131],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[132,191]}]}],"pos":[435318,435510],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,515],"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,515],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOver%2A&gt;</ph> dependency property changes its value.","pos":[0,145],"source":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[146,228]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.","pos":[229,348],"source":" Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseDirectlyOverChanged&gt;</ph> event is not a routed event.","pos":[349,452],"source":" Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event."},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[453,515]}]}]},{"pos":[522,813],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[435521,436339],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[436578,436683],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,188],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusCapturedChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,128],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCapturedChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[129,188]}]}],"pos":[437981,438170],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,450],"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,450],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> dependency property changes its value.","pos":[0,142],"source":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[143,225]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusCapturedChanged&gt;</ph> event is raised with that same event data instance.","pos":[226,342],"source":" Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance."},{"content":"Notice that the event is not a routed event.","pos":[343,387]},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[388,450]}]}]},{"pos":[457,748],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[438181,438934],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[439170,439273],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,193],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusCaptureWithinChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,133],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[134,193]}]}],"pos":[440598,440792],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,460],"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,460],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithin%2A&gt;</ph> dependency property changes its value.","pos":[0,147],"source":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[148,230]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusCaptureWithinChanged&gt;</ph> event is raised with that same event data instance.","pos":[231,352],"source":" Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance."},{"content":"Notice that the event is not a routed event.","pos":[353,397]},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[398,460]}]}]},{"pos":[467,758],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[440803,441566],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[441807,441912],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,192],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.IsStylusDirectlyOverChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,132],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[133,192]}]}],"pos":[443214,443407],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,457],"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.","pos":[0,457],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOver%2A&gt;</ph> dependency property changes its value.","pos":[0,146],"source":"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[147,229]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.","pos":[230,350],"source":" Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance."},{"content":"Notice that the event is not a routed event.","pos":[351,395]},{"content":"Therefore you cannot mark it as handled in the class handler.","pos":[396,457]}]}]},{"pos":[464,755],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[443418,444178],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[444418,444523],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,224],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.KeyDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,164],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[165,224]}]}],"pos":[445612,445837],"yaml":true},{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,341],"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.","nodes":[{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.","pos":[0,341],"nodes":[{"content":"Keystrokes are handled by a dedicated input manager.","pos":[0,52]},{"content":"Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.","pos":[53,217]},{"content":"If these input system features mark the event as handled, then <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnKeyDown%2A&gt;</ph> is not invoked.","pos":[218,341],"source":" If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked."}]}]},{"pos":[348,543],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[550,1216],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[1223,1612],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[445848,447469],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[447657,447746],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,222],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.KeyUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,162],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[163,222]}]}],"pos":[448803,449026],"yaml":true},{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,339],"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.","nodes":[{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.","pos":[0,339],"nodes":[{"content":"Keystrokes are handled by a dedicated input manager.","pos":[0,52]},{"content":"Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.","pos":[53,217]},{"content":"If these input system features mark the event as handled, then <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnKeyUp%2A&gt;</ph> is not invoked.","pos":[218,339],"source":" If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked."}]}]},{"pos":[346,541],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[548,1214],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[1221,1610],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[449037,450656],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[450842,450931],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> routed event by using the event data that is provided.","nodes":[{"pos":[0,121],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostFocus\"&gt;&lt;/xref&gt;</ph> routed event by using the event data that is provided.","source":"Raises the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> routed event by using the event data that is provided."}],"pos":[452010,452132],"yaml":true},{"content":"This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"pos":[0,88],"content":"This method, although virtual, does have a default implementation that raises the event.","nodes":[{"content":"This method, although virtual, does have a default implementation that raises the event.","pos":[0,88]}]},{"pos":[95,521],"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsFocused%2A&gt;</ph> property value changes.","pos":[0,217],"source":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes."},{"content":"This implementation differs from some other <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.","pos":[218,426],"source":" This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event."}]}],"pos":[452143,452669],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> event.","nodes":[{"pos":[0,194],"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> event.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","pos":[0,79],"source":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data."},{"content":"This event data must contain the identifier for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostFocus\"&gt;&lt;/xref&gt;</ph> event.","pos":[80,194],"source":" This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> event."}]}],"pos":[452853,453048],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,234],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,174],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[175,234]}]}],"pos":[454259,454494],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[454505,455776],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains event data.","nodes":[{"pos":[0,101],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains event data."}],"pos":[456008,456110],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[457255,457486],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[457497,458768],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains event data.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains event data."}],"pos":[458969,459056],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,232],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,172],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[173,232]}]}],"pos":[460212,460445],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[460456,461727],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains event data.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains event data."}],"pos":[461931,462019],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.LostTouchCapture\"></xref> routed event that occurs when this element loses a touch capture.","nodes":[{"pos":[0,160],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.LostTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event that occurs when this element loses a touch capture.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.LostTouchCapture\"></xref> routed event that occurs when this element loses a touch capture."}],"pos":[463164,463325],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.","nodes":[{"pos":[0,381],"content":"The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.","pos":[0,381],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> method has no default implementation.","pos":[0,95],"source":"The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.LostTouchCapture&gt;</ph> event.","pos":[96,247],"source":" Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnLostTouchCapture%2A&gt;</ph> method so that base classes receive the event.","pos":[248,381],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event."}]}]}],"pos":[463336,463718],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[463919,464008],"yaml":true},{"content":"Called when the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event occurs.","nodes":[{"pos":[0,104],"content":"Called when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"&gt;&lt;/xref&gt;</ph> event occurs.","source":"Called when the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event occurs."}],"pos":[465362,465467],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.","nodes":[{"pos":[0,434],"content":"The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.","pos":[0,434],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> method has no default implementation.","pos":[0,107],"source":"The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event.","pos":[108,283],"source":" Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event."},{"content":"Be sure to call the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A&gt;</ph> method of the base class so that base classes receive the event.","pos":[284,434],"source":" Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event."}]}]}],"pos":[465478,465913],"yaml":true,"extradata":"MT"},{"content":"The data for the event.","nodes":[{"pos":[0,23],"content":"The data for the event.","nodes":[{"content":"The data for the event.","pos":[0,23]}]}],"pos":[466172,466196],"yaml":true},{"content":"Called when the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event occurs.","nodes":[{"pos":[0,97],"content":"Called when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationCompleted\"&gt;&lt;/xref&gt;</ph> event occurs.","source":"Called when the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event occurs."}],"pos":[467478,467576],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.","nodes":[{"pos":[0,406],"content":"The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.","pos":[0,406],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> method has no default implementation.","pos":[0,100],"source":"The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationCompleted&gt;</ph> event.","pos":[101,262],"source":" Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event."},{"content":"Be sure to call the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationCompleted%2A&gt;</ph> method of the base class so that base classes receive the event.","pos":[263,406],"source":" Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event."}]}]}],"pos":[467587,467994],"yaml":true,"extradata":"MT"},{"content":"The data for the event.","nodes":[{"pos":[0,23],"content":"The data for the event.","nodes":[{"content":"The data for the event.","pos":[0,23]}]}],"pos":[468232,468256],"yaml":true},{"content":"Called when the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs.","nodes":[{"pos":[0,93],"content":"Called when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationDelta\"&gt;&lt;/xref&gt;</ph> event occurs.","source":"Called when the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs."}],"pos":[469461,469555],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.","nodes":[{"pos":[0,390],"content":"The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.","pos":[0,390],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> method has no default implementation.","pos":[0,96],"source":"The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationDelta&gt;</ph> event.","pos":[97,250],"source":" Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event."},{"content":"Be sure to call the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationDelta%2A&gt;</ph> method of the base class so that base classes receive the event.","pos":[251,390],"source":" Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event."}]}]}],"pos":[469566,469957],"yaml":true,"extradata":"MT"},{"content":"The data for the event.","nodes":[{"pos":[0,23],"content":"The data for the event.","nodes":[{"content":"The data for the event.","pos":[0,23]}]}],"pos":[470183,470207],"yaml":true},{"content":"Called when the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event occurs.","nodes":[{"pos":[0,103],"content":"Called when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"&gt;&lt;/xref&gt;</ph> event occurs.","source":"Called when the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event occurs."}],"pos":[471550,471654],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.","nodes":[{"pos":[0,430],"content":"The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.","pos":[0,430],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> method has no default implementation.","pos":[0,106],"source":"The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationInertiaStarting&gt;</ph> event.","pos":[107,280],"source":" Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event."},{"content":"Be sure to call the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A&gt;</ph> method of the base class so that base classes receive the event.","pos":[281,430],"source":" Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event."}]}]}],"pos":[471665,472096],"yaml":true,"extradata":"MT"},{"content":"The data for the event.","nodes":[{"pos":[0,23],"content":"The data for the event.","nodes":[{"content":"The data for the event.","pos":[0,23]}]}],"pos":[472352,472376],"yaml":true},{"content":"Called when the <xref href=\"System.Windows.UIElement.ManipulationStarted\"></xref> event occurs.","nodes":[{"pos":[0,95],"content":"Called when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationStarted\"&gt;&lt;/xref&gt;</ph> event occurs.","source":"Called when the <xref href=\"System.Windows.UIElement.ManipulationStarted\"></xref> event occurs."}],"pos":[473633,473729],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.","nodes":[{"pos":[0,398],"content":"The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.","pos":[0,398],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> method has no default implementation.","pos":[0,98],"source":"The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationStarted&gt;</ph> event.","pos":[99,256],"source":" Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event."},{"content":"Be sure to call the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationStarted%2A&gt;</ph> method of the base class so that base classes receive the event.","pos":[257,398],"source":" Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event."}]}]}],"pos":[473740,474139],"yaml":true,"extradata":"MT"},{"content":"The data for the event.","nodes":[{"pos":[0,23],"content":"The data for the event.","nodes":[{"content":"The data for the event.","pos":[0,23]}]}],"pos":[474371,474395],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.ManipulationStarting\"></xref> routed event that occurs when the manipulation processor is first created.","nodes":[{"pos":[0,173],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationStarting\"&gt;&lt;/xref&gt;</ph> routed event that occurs when the manipulation processor is first created.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.ManipulationStarting\"></xref> routed event that occurs when the manipulation processor is first created."}],"pos":[475656,475830],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.","nodes":[{"pos":[0,397],"content":"The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.","pos":[0,397],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> method has no default implementation.","pos":[0,99],"source":"The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationStarting&gt;</ph> event.","pos":[100,259],"source":" Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnManipulationStarting%2A&gt;</ph> method so that base classes receive the event.","pos":[260,397],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event."}]}]}],"pos":[475841,476239],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.ManipulationStartingEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ManipulationStartingEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.ManipulationStartingEventArgs\"></xref> that contains the event data."}],"pos":[476474,476578],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[477698,477922],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,447],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.","pos":[0,447],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph> is not invoked.","pos":[258,447],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked."}]}]},{"pos":[454,817],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.","pos":[0,363],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.","pos":[0,214],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>."},{"content":"Either of these events may be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is received.","pos":[215,363],"source":" Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received."}]}]},{"pos":[824,1791],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,427],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[428,695],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.","pos":[696,851],"source":" By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions."},{"content":"This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","pos":[852,967]}]},{"pos":[1798,1962],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[1969,2164],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2171,2837],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2844,3233],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[477933,481181],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.","nodes":[{"pos":[0,191],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"This event data reports details about the mouse button that was pressed and the handled state.","pos":[97,191]}]}],"pos":[481387,481579],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,186],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseEnter\"&gt;&lt;/xref&gt;</ph> attached event is raised on this element.","pos":[0,126],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[127,186]}]}],"pos":[482680,482867],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,812],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event, with a direct routing strategy.","pos":[275,357]},{"content":"Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[358,514],"source":" Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[482878,483695],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[483890,483981],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,186],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseLeave\"&gt;&lt;/xref&gt;</ph> attached event is raised on this element.","pos":[0,126],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[127,186]}]}],"pos":[485083,485270],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,812],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event, with a direct routing strategy.","pos":[275,357]},{"content":"Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[358,514],"source":" Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[485281,486098],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[486293,486384],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"></xref> routed event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,191],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"></xref> routed event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event is raised on this element.","pos":[0,131],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"></xref> routed event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[132,191]}]}],"pos":[487554,487746],"yaml":true},{"content":"The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>. Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"pos":[0,797],"content":"The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>. Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,137],"source":"The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph>.","pos":[138,426],"source":" <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[427,630],"source":" Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[631,797],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[804,1409],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.","pos":[0,605],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,222],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[223,291]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph>.","pos":[292,452],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>.","pos":[453,605],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>."}]}]},{"pos":[1416,2083],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","pos":[0,667],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph>.","pos":[183,361],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.","pos":[362,667],"source":" For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."}]}]}],"pos":[487757,489847],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"pos":[0,159],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was pressed.","pos":[97,159]}]}],"pos":[490063,490223],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,227],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,167],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[168,227]}]}],"pos":[491412,491640],"yaml":true},{"content":"The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>. Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.","nodes":[{"pos":[0,789],"content":"The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>. Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,135],"source":"The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph>.","pos":[136,420],"source":" <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[421,622],"source":" Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[623,789],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[796,1395],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.","pos":[0,599],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,220],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[221,289]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph>.","pos":[290,448],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A&gt;</ph>.","pos":[449,599],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>."}]}]}],"pos":[491651,493051],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was released.","pos":[97,160]}]}],"pos":[493265,493426],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[494529,494753],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[494764,496035],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[496229,496320],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[497517,497748],"yaml":true},{"content":"The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"pos":[0,800],"content":"The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,138],"source":"The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.","pos":[139,428],"source":" <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[429,633],"source":" Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[634,800],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[807,1413],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.","pos":[0,606],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,222],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[223,291]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph>.","pos":[292,452],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>.","pos":[453,606],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>."}]}]},{"pos":[1420,2123],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","pos":[0,703],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph>.","pos":[183,362],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.","pos":[363,703],"source":" For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior."}]}]}],"pos":[497759,499889],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was pressed.","pos":[97,160]}]}],"pos":[500106,500267],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,228],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,168],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[169,228]}]}],"pos":[501463,501692],"yaml":true},{"content":"The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>. Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.","nodes":[{"pos":[0,792],"content":"The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>. Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,136],"source":"The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.","pos":[137,422],"source":" <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[423,625],"source":" Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[626,792],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[799,1399],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.","pos":[0,600],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,220],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[221,289]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph>.","pos":[290,448],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseRightButtonUp%2A&gt;</ph>.","pos":[449,600],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>."}]}]}],"pos":[501703,503107],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"pos":[0,161],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was released.","pos":[97,161]}]}],"pos":[503322,503484],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,219],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,159],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[160,219]}]}],"pos":[504612,504832],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,443],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.","pos":[0,443],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph> is not invoked.","pos":[258,443],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked."}]}]},{"pos":[450,809],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.","pos":[0,359],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.MouseRightButtonUp&gt;</ph>.","pos":[0,210],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>."},{"content":"Either of these events might be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is received.","pos":[211,359],"source":" Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received."}]}]},{"pos":[816,1779],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,427],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[428,695],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.","pos":[696,847],"source":" By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions."},{"content":"This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","pos":[848,963]}]},{"pos":[1786,1950],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[1957,2152],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2159,2825],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2832,3221],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[504843,508079],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the mouse button was released.","nodes":[{"pos":[0,155],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the mouse button was released.","pos":[97,155]}]}],"pos":[508283,508439],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,224],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseWheel\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,164],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[165,224]}]}],"pos":[509568,509793],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[509804,511075],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseWheelEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data."}],"pos":[511280,511376],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,227],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDragEnter\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,167],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[168,227]}]}],"pos":[512490,512718],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[512729,514143],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[514330,514414],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,227],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDragLeave\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,167],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[168,227]}]}],"pos":[515534,515762],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[515773,517187],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[517374,517458],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,226],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDragOver\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,166],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[167,226]}]}],"pos":[518572,518799],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[518810,520224],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[520410,520494],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,222],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDrop\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,162],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[163,222]}]}],"pos":[521583,521806],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[521817,523231],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[523413,523497],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[524678,524909],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[524920,526334],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.GiveFeedbackEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data."}],"pos":[526540,526632],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,240],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,180],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[181,240]}]}],"pos":[527889,528130],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[528141,529555],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data."}],"pos":[529793,529899],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[531026,531258],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[531269,532683],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[532878,532967],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,229],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,169],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[170,229]}]}],"pos":[534073,534303],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[534314,535728],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[535921,536010],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[537288,537520],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[537531,538945],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data."}],"pos":[539184,539290],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,237],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element in its route that is derived from this class.","pos":[0,177],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[178,237]}]}],"pos":[540478,540716],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,461],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.","pos":[0,461],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> is not invoked.","pos":[258,461],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked."}]}]},{"pos":[468,852],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.","pos":[0,384],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>.","pos":[0,228],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>."},{"content":"Either of these events may be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is received.","pos":[229,384],"source":" Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received."}]}]},{"pos":[859,1833],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,427],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[428,695],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.","pos":[696,858],"source":" By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions."},{"content":"This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","pos":[859,974]}]},{"pos":[1840,2004],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[2011,2206],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2213,2879],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2886,3418],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[540727,544160],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were pressed.","nodes":[{"pos":[0,164],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that one or more mouse buttons were pressed.","pos":[97,164]}]}],"pos":[544373,544538],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,236],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,176],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[177,236]}]}],"pos":[545778,546015],"yaml":true},{"content":"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"pos":[0,826],"content":"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,145],"source":"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph>.","pos":[146,448],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[449,659],"source":" Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[660,826],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[833,1459],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.","pos":[0,626],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,229],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[230,298]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph>.","pos":[299,466],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.","pos":[467,626],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>."}]}]},{"pos":[1466,2147],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","pos":[0,681],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.","pos":[183,368],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.","pos":[369,681],"source":" For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."}]}]}],"pos":[546026,548180],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"pos":[0,159],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was pressed.","pos":[97,159]}]}],"pos":[548403,548563],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,234],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,174],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[175,234]}]}],"pos":[549801,550036],"yaml":true},{"content":"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.","nodes":[{"pos":[0,818],"content":"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,143],"source":"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph>.","pos":[144,442],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[443,651],"source":" Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[652,818],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[825,1445],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.","pos":[0,620],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,227],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[228,296]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph>.","pos":[297,462],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.","pos":[463,620],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>."}]}]}],"pos":[550047,551497],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was released.","pos":[97,160]}]}],"pos":[551718,551879],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[553031,553262],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[553273,554687],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[554888,554979],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,237],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,177],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[178,237]}]}],"pos":[556225,556463],"yaml":true},{"content":"The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"pos":[0,822],"content":"The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,146],"source":"The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.MouseRightButtonDown&gt;</ph>.","pos":[147,443],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[444,655],"source":" Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[656,822],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[829,1456],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.","pos":[0,627],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,229],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[230,298]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph>.","pos":[299,466],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.","pos":[467,627],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>."}]}]},{"pos":[1463,2180],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","pos":[0,717],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.","pos":[183,369],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.","pos":[370,717],"source":" For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior."}]}]}],"pos":[556474,558661],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was pressed.","pos":[97,160]}]}],"pos":[558885,559046],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,235],"content":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,175],"source":"Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[176,235]}]}],"pos":[560269,560505],"yaml":true},{"content":"The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.","nodes":[{"pos":[0,821],"content":"The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,144],"source":"The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.","pos":[145,444],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[445,654],"source":" Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[655,821],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[828,1449],"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.","pos":[0,621],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,227],"source":"The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[228,296]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph>.","pos":[297,462],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.","pos":[463,621],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>."}]}]}],"pos":[560516,561970],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"pos":[0,161],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was released.","pos":[97,161]}]}],"pos":[562192,562354],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,228],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,168],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[169,228]}]}],"pos":[563531,563760],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,457],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.","pos":[0,457],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> is not invoked.","pos":[258,457],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked."}]}]},{"pos":[464,844],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.","pos":[0,380],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.","pos":[0,224],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>."},{"content":"Either of these events might be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is received.","pos":[225,380],"source":" Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received."}]}]},{"pos":[851,1821],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,427],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[428,695],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.","pos":[696,854],"source":" By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions."},{"content":"This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","pos":[855,970]}]},{"pos":[1828,1992],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[1999,2194],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2201,2867],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2874,3263],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[563771,567049],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were released.","nodes":[{"pos":[0,165],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that one or more mouse buttons were released.","pos":[97,165]}]}],"pos":[567260,567426],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[568604,568836],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[568847,570261],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseWheelEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data."}],"pos":[570473,570569],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,235],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,175],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[176,235]}]}],"pos":[571816,572052],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[572063,573477],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.QueryContinueDragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data."}],"pos":[573698,573795],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,238],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,178],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[179,238]}]}],"pos":[575031,575270],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[575281,576695],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[576917,577015],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,236],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,176],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[177,236]}]}],"pos":[578238,578475],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[578486,579900],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[580120,580218],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,232],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,172],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[173,232]}]}],"pos":[581381,581614],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[581625,583039],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusDownEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data."}],"pos":[583251,583347],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,237],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,177],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[178,237]}]}],"pos":[584534,584772],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[584783,586197],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[586406,586498],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,235],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,175],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[176,235]}]}],"pos":[587678,587914],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[587925,589339],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[589546,589638],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,232],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,172],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[173,232]}]}],"pos":[590776,591009],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[591020,592434],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[592638,592730],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,238],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,178],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[179,238]}]}],"pos":[593923,594162],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[594173,595587],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[595797,595889],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,241],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,181],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[182,241]}]}],"pos":[597184,597426],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[597437,598851],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data."}],"pos":[599090,599195],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[600349,600580],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[600591,602005],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[602207,602299],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,247],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,187],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[188,247]}]}],"pos":[603502,603750],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1407],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,532],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[390,532]}]}]}],"pos":[603761,605175],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data."}],"pos":[605396,605497],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchDown\"></xref> routed event that occurs when a touch presses this element.","nodes":[{"pos":[0,154],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewTouchDown\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch presses this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchDown\"></xref> routed event that occurs when a touch presses this element."}],"pos":[606641,606796],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.","nodes":[{"pos":[0,381],"content":"The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.","pos":[0,381],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> method has no default implementation.","pos":[0,95],"source":"The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> event.","pos":[96,247],"source":" Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> method so that base classes receive the event.","pos":[248,381],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event."}]}]}],"pos":[606807,607189],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[607390,607479],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchMove\"></xref> routed event that occurs when a touch moves while inside this element.","nodes":[{"pos":[0,165],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewTouchMove\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves while inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchMove\"></xref> routed event that occurs when a touch moves while inside this element."}],"pos":[608601,608767],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.","nodes":[{"pos":[0,381],"content":"The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.","pos":[0,381],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> method has no default implementation.","pos":[0,95],"source":"The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph> event.","pos":[96,247],"source":" Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> method so that base classes receive the event.","pos":[248,381],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event."}]}]}],"pos":[608778,609160],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[609361,609450],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchUp\"></xref> routed event that occurs when a touch is released inside this element.","nodes":[{"pos":[0,163],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewTouchUp\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is released inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchUp\"></xref> routed event that occurs when a touch is released inside this element."}],"pos":[610582,610746],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.","nodes":[{"pos":[0,373],"content":"The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.","pos":[0,373],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> method has no default implementation.","pos":[0,93],"source":"The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph> event.","pos":[94,241],"source":" Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> method so that base classes receive the event.","pos":[242,373],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event."}]}]}],"pos":[610757,611131],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[611330,611419],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,228],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.QueryContinueDrag\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,168],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[169,228]}]}],"pos":[612621,612850],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[612861,614132],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.QueryContinueDragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data."}],"pos":[614346,614443],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,225],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.QueryCursor\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,165],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[166,225]}]}],"pos":[615572,615798],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[615809,617080],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.QueryCursorEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.QueryCursorEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.QueryCursorEventArgs\"></xref> that contains the event data."}],"pos":[617288,617385],"yaml":true},{"content":"When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.","nodes":[{"pos":[0,283],"content":"When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.","nodes":[{"content":"When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.","pos":[0,283],"nodes":[{"content":"When overridden in a derived class, participates in rendering operations that are directed by the layout system.","pos":[0,112]},{"content":"The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.","pos":[113,283]}]}]}],"pos":[618442,618726],"yaml":true},{"content":"This method has no default implementation in the <xref:System.Windows.UIElement> class.","nodes":[{"pos":[0,87],"content":"This method has no default implementation in the <xref:System.Windows.UIElement> class.","nodes":[{"content":"This method has no default implementation in the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> class.","pos":[0,87],"source":"This method has no default implementation in the <xref:System.Windows.UIElement> class."}]}],"pos":[618737,618825],"yaml":true,"extradata":"MT"},{"content":"The drawing instructions for a specific element. This context is provided to the layout system.","nodes":[{"pos":[0,95],"content":"The drawing instructions for a specific element. This context is provided to the layout system.","nodes":[{"content":"The drawing instructions for a specific element. This context is provided to the layout system.","pos":[0,95],"nodes":[{"content":"The drawing instructions for a specific element.","pos":[0,48]},{"content":"This context is provided to the layout system.","pos":[49,95]}]}]}],"pos":[619423,619519],"yaml":true},{"content":"When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element's <xref href=\"System.Windows.UIElement.RenderSize\"></xref> has changed as a result of layout update.","nodes":[{"pos":[0,294],"content":"When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element's <xref href=\"System.Windows.UIElement.RenderSize\"></xref> has changed as a result of layout update.","nodes":[{"content":"When overridden in a derived class, participates in rendering operations that are directed by the layout system.","pos":[0,112]},{"content":"This method is invoked after layout update, and before rendering, if the element's <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.RenderSize\"&gt;&lt;/xref&gt;</ph> has changed as a result of layout update.","pos":[113,294],"source":" This method is invoked after layout update, and before rendering, if the element's <xref href=\"System.Windows.UIElement.RenderSize\"></xref> has changed as a result of layout update."}]}],"pos":[620647,620942],"yaml":true},{"content":"This method has no default implementation. A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>. The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout. Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.","nodes":[{"pos":[0,726],"content":"This method has no default implementation. A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>. The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout. Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.","nodes":[{"content":"This method has no default implementation. A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>. The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout. Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.","pos":[0,726],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"A typical WPF framework-level element uses the override implementation from <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph>.","pos":[43,158],"source":" A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> implementation invalidates the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> properties and handles the basics of remaking the layout.","pos":[159,391],"source":" The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout."},{"content":"Overriding <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> at the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.","pos":[392,726],"source":" Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system."}]}]}],"pos":[620953,621680],"yaml":true,"extradata":"MT"},{"content":"The packaged parameters (<xref href=\"System.Windows.SizeChangedInfo\"></xref>), which includes old and new sizes, and which dimension actually changes.","nodes":[{"pos":[0,150],"content":"The packaged parameters (<ph id=\"ph1\">&lt;xref href=\"System.Windows.SizeChangedInfo\"&gt;&lt;/xref&gt;</ph>), which includes old and new sizes, and which dimension actually changes.","source":"The packaged parameters (<xref href=\"System.Windows.SizeChangedInfo\"></xref>), which includes old and new sizes, and which dimension actually changes."}],"pos":[621878,622029],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[623216,623448],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[623459,624730],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[624945,625043],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,229],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,169],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[170,229]}]}],"pos":[626195,626425],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[626436,627707],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[627920,628018],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,225],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,165],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[166,225]}]}],"pos":[629154,629380],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[629391,630662],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusDownEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data."}],"pos":[630867,630963],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,188],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusEnter\"&gt;&lt;/xref&gt;</ph> attached event is raised by this element.","pos":[0,128],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element."},{"content":"Implement this method to add class handling for this event.","pos":[129,188]}]}],"pos":[632077,632266],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,772],"content":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,270],"source":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[271,321]},{"content":"Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[322,474],"source":" Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[632277,633054],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[633252,633344],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[634483,634714],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[634725,635996],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[636198,636290],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,228],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusInRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,168],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[169,228]}]}],"pos":[637421,637650],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[637661,638932],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[639132,639224],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,188],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusLeave\"&gt;&lt;/xref&gt;</ph> attached event is raised by this element.","pos":[0,128],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element."},{"content":"Implement this method to add class handling for this event.","pos":[129,188]}]}],"pos":[640319,640508],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,772],"content":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,270],"source":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[271,321]},{"content":"Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[322,474],"source":" Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[640519,641296],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[641494,641586],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,225],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,165],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[166,225]}]}],"pos":[642695,642921],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[642932,644203],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[644400,644492],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[645636,645868],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[645879,647150],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[647353,647445],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,234],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,174],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[175,234]}]}],"pos":[648669,648904],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[648915,650186],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data."}],"pos":[650418,650523],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[651606,651830],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[651841,653112],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[653307,653399],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,240],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,180],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[181,240]}]}],"pos":[654553,654794],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1264],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,389],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,270],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[271,389]}]}]}],"pos":[654805,656076],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data."}],"pos":[656290,656391],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> routed event that occurs when a touch presses inside this element.","nodes":[{"pos":[0,154],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchDown\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch presses inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> routed event that occurs when a touch presses inside this element."}],"pos":[657486,657641],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.","nodes":[{"pos":[0,353],"content":"The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.","pos":[0,353],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> method has no default implementation.","pos":[0,88],"source":"The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> event.","pos":[89,226],"source":" Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> method so that base classes receive the event.","pos":[227,353],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event."}]}]}],"pos":[657652,658006],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[658200,658289],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchEnter\"></xref> routed event that occurs when a touch moves from outside to inside the bounds of this element.","nodes":[{"pos":[0,183],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchEnter\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves from outside to inside the bounds of this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchEnter\"></xref> routed event that occurs when a touch moves from outside to inside the bounds of this element."}],"pos":[659390,659574],"yaml":true},{"content":"The<xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.","nodes":[{"pos":[0,356],"content":"The<xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.","nodes":[{"content":"The<xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.","pos":[0,356],"nodes":[{"content":"The<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> method has no default implementation.","pos":[0,88],"source":"The<xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchEnter&gt;</ph> event.","pos":[89,228],"source":" Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> method so that base classes receive the event.","pos":[229,356],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event."}]}]}],"pos":[659585,659942],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[660137,660226],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchLeave\"></xref> routed event that occurs when a touch moves from inside to outside the bounds of this <xref href=\"System.Windows.UIElement\"></xref>.","nodes":[{"pos":[0,221],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchLeave\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves from inside to outside the bounds of this <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph>.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchLeave\"></xref> routed event that occurs when a touch moves from inside to outside the bounds of this <xref href=\"System.Windows.UIElement\"></xref>."}],"pos":[661306,661528],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.","nodes":[{"pos":[0,357],"content":"The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.","pos":[0,357],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> method has no default implementation.","pos":[0,89],"source":"The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchLeave&gt;</ph> event.","pos":[90,229],"source":" Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> method so that base classes receive the event.","pos":[230,357],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event."}]}]}],"pos":[661539,661897],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[662092,662181],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> routed event that occurs when a touch moves while inside this element.","nodes":[{"pos":[0,158],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchMove\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves while inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> routed event that occurs when a touch moves while inside this element."}],"pos":[663255,663414],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.","nodes":[{"pos":[0,353],"content":"The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.","pos":[0,353],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> method has no default implementation.","pos":[0,88],"source":"The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph> event.","pos":[89,226],"source":" Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> method so that base classes receive the event.","pos":[227,353],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event."}]}]}],"pos":[663425,663779],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[663973,664062],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> routed event that occurs when a touch is released inside this element.","nodes":[{"pos":[0,156],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchUp\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is released inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> routed event that occurs when a touch is released inside this element."}],"pos":[665123,665280],"yaml":true},{"content":"The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.","nodes":[{"pos":[0,345],"content":"The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.","pos":[0,345],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> method has no default implementation.","pos":[0,86],"source":"The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph> event.","pos":[87,220],"source":" Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> method so that base classes receive the event.","pos":[221,345],"source":" Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event."}]}]}],"pos":[665291,665637],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[665829,665918],"yaml":true},{"content":"Invoked when the parent element of this <xref href=\"System.Windows.UIElement\"></xref> reports a change to its underlying visual parent.","nodes":[{"pos":[0,135],"content":"Invoked when the parent element of this <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> reports a change to its underlying visual parent.","source":"Invoked when the parent element of this <xref href=\"System.Windows.UIElement\"></xref> reports a change to its underlying visual parent."}],"pos":[667065,667201],"yaml":true},{"content":"The previous parent. This may be provided as `null` if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a parent element previously.","nodes":[{"pos":[0,153],"content":"The previous parent. This may be provided as `null` if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a parent element previously.","nodes":[{"content":"The previous parent.","pos":[0,20]},{"content":"This may be provided as <ph id=\"ph1\">`null`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.DependencyObject\"&gt;&lt;/xref&gt;</ph> did not have a parent element previously.","pos":[21,153],"source":" This may be provided as `null` if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a parent element previously."}]}],"pos":[667414,667568],"yaml":true},{"content":"Gets or sets the opacity factor applied to the entire <xref href=\"System.Windows.UIElement\"></xref> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.","nodes":[{"pos":[0,215],"content":"Gets or sets the opacity factor applied to the entire <xref href=\"System.Windows.UIElement\"></xref> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.","nodes":[{"content":"Gets or sets the opacity factor applied to the entire <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> when it is rendered in the <ph id=\"ph2\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.","pos":[0,183],"source":"Gets or sets the opacity factor applied to the entire <xref href=\"System.Windows.UIElement\"></xref> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]."},{"content":"This is a dependency property.","pos":[185,215]}]}],"pos":[668492,668708],"yaml":true},{"content":"The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class. Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.  \n  \n The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).  \n  \n <xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements. For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.  \n  \n Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable. This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements. The opacity-zero object can then handle all the input event processing for an underlying area. However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.  \n  \n<a name=\"dependencyPropertyInfo_Opacity\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.OpacityProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,271],"content":"The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class. Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.","nodes":[{"content":"The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class. Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.","pos":[0,271],"nodes":[{"content":"The 1.0 default value is the default provided by the initial metadata of this dependency property on the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> class.","pos":[0,143],"source":"The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class."},{"content":"Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.","pos":[144,271]}]}]},{"pos":[278,460],"content":"The value of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> won't be applied to actual layout unless the element is also visible (<ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph>).","source":"The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`)."},{"pos":[467,1031],"content":"<xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements. For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.","nodes":[{"content":"<xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements. For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.","pos":[0,564],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements.","pos":[0,242],"source":"<xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements."},{"content":"For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Opacity%2A&gt;</ph> property would still be 0.2 when queried.","pos":[243,564],"source":" For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried."}]}]},{"pos":[1038,1638],"content":"Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable. This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements. The opacity-zero object can then handle all the input event processing for an underlying area. However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.","nodes":[{"content":"Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable.","pos":[0,137]},{"content":"This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements.","pos":[138,288]},{"content":"The opacity-zero object can then handle all the input event processing for an underlying area.","pos":[289,383]},{"content":"However, the <ph id=\"ph1\">`Background`</ph> or <ph id=\"ph2\">`Fill`</ph> of the object or shape should be set to a value, even if it is <ph id=\"ph3\">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph>, otherwise hit testing is not enabled, and no events are received.","pos":[384,600],"source":" However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received."}]},{"pos":[1696,1727],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1748,1764],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1765,1812],"content":"<xref:System.Windows.UIElement.OpacityProperty>","nodes":[]},{"pos":[1817,1850],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1851,1855],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[668719,670594],"yaml":true,"extradata":"MT"},{"content":"The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.","nodes":[{"pos":[0,84],"content":"The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.","nodes":[{"content":"The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.","pos":[0,84],"nodes":[{"content":"The opacity factor.","pos":[0,19]},{"content":"Default opacity is 1.0.","pos":[20,43]},{"content":"Expected values are between 0.0 and 1.0.","pos":[44,84]}]}]}],"pos":[670851,670936],"yaml":true},{"content":"Gets or sets an opacity mask, as a <xref href=\"System.Windows.Media.Brush\"></xref> implementation that is applied to any alpha-channel masking for the rendered content of this element.  This is a dependency property.","nodes":[{"pos":[0,216],"content":"Gets or sets an opacity mask, as a <xref href=\"System.Windows.Media.Brush\"></xref> implementation that is applied to any alpha-channel masking for the rendered content of this element.  This is a dependency property.","nodes":[{"content":"Gets or sets an opacity mask, as a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Brush\"&gt;&lt;/xref&gt;</ph> implementation that is applied to any alpha-channel masking for the rendered content of this element.","pos":[0,184],"source":"Gets or sets an opacity mask, as a <xref href=\"System.Windows.Media.Brush\"></xref> implementation that is applied to any alpha-channel masking for the rendered content of this element."},{"content":"This is a dependency property.","pos":[186,216]}]}],"pos":[671933,672150],"yaml":true},{"content":"This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>. The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.  \n  \n The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette. But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.  \n  \n In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class. For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_OpacityMask\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.OpacityMaskProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,225],"content":"This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>. The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.","nodes":[{"content":"This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>. The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.","pos":[0,225],"nodes":[{"content":"This property only uses whatever the alpha channel value is for the supplied <ph id=\"ph1\">&lt;xref:System.Windows.Media.Brush&gt;</ph>.","pos":[0,111],"source":"This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>."},{"content":"The other channels of the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Brush&gt;</ph>'s rendered content (Red, Green, or Blue) are ignored.","pos":[112,225],"source":" The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored."}]}]},{"pos":[232,546],"content":"The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette. But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.","nodes":[{"content":"The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette. But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.","pos":[0,314],"nodes":[{"content":"The most typical <ph id=\"ph1\">&lt;xref:System.Windows.Media.Brush&gt;</ph> for this purpose is an <ph id=\"ph2\">&lt;xref:System.Windows.Media.ImageBrush&gt;</ph>, which can be used for a variety of photo masking techniques such as a vignette.","pos":[0,193],"source":"The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette."},{"content":"But any defined <ph id=\"ph1\">&lt;xref:System.Windows.Media.Brush&gt;</ph> (such as <ph id=\"ph2\">&lt;xref:System.Windows.Media.LinearGradientBrush&gt;</ph>) can be used.","pos":[194,314],"source":" But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used."}]}]},{"pos":[553,932],"content":"In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class. For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).","nodes":[{"content":"In <ph id=\"ph1\">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph>, this property value can use an inline syntax that is specific to each implementation of the <ph id=\"ph2\">&lt;xref:System.Windows.Media.Brush&gt;</ph> abstract class.","pos":[0,205],"source":"In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Painting with Solid Colors and Gradients Overview<ept id=\"p1\">](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)</ept>.","pos":[206,379],"source":" For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md)."}]},{"pos":[994,1025],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1046,1062],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1063,1114],"content":"<xref:System.Windows.UIElement.OpacityMaskProperty>","nodes":[]},{"pos":[1119,1152],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1153,1157],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[672161,673336],"yaml":true,"extradata":"MT"},{"content":"The brush to use for opacity masking.","nodes":[{"pos":[0,37],"content":"The brush to use for opacity masking.","nodes":[{"content":"The brush to use for opacity masking.","pos":[0,37]}]}],"pos":[673825,673863],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.OpacityMask\"></xref> dependency property.","nodes":[{"pos":[0,93],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.OpacityMask\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.OpacityMask\"></xref> dependency property."}],"pos":[674846,674940],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.Opacity\"></xref> dependency property.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Opacity\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.Opacity\"></xref> dependency property."}],"pos":[676030,676120],"yaml":true},{"content":"Gets a value that uniquely identifies this element.","nodes":[{"pos":[0,51],"content":"Gets a value that uniquely identifies this element.","nodes":[{"content":"Gets a value that uniquely identifies this element.","pos":[0,51]}]}],"pos":[677173,677225],"yaml":true},{"content":"<xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element. An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations). This identifier is used for internal loading, parsing and serialization requirements. It is not intended to be used by your application code.  \n  \n This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.","nodes":[{"pos":[0,417],"content":"<xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element. An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations). This identifier is used for internal loading, parsing and serialization requirements. It is not intended to be used by your application code.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> uniquely identifies each element.","pos":[0,78],"source":"<xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element."},{"content":"An element keeps the same <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PersistId%2A&gt;</ph> every time the same <ph id=\"ph2\">[!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]</ph> is loaded (including binary representations).","pos":[79,275],"source":" An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations)."},{"content":"This identifier is used for internal loading, parsing and serialization requirements.","pos":[276,361]},{"content":"It is not intended to be used by your application code.","pos":[362,417]}]},{"pos":[424,531],"content":"This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.","nodes":[{"content":"This property has no relationship to the <ph id=\"ph1\">&lt;xref:System.Object.GetHashCode%2A&gt;</ph> result for any given instance.","pos":[0,107],"source":"This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance."}]}],"pos":[677236,677772],"yaml":true,"extradata":"MT"},{"content":"The unique identifier for this element.","nodes":[{"pos":[0,39],"content":"The unique identifier for this element.","nodes":[{"content":"The unique identifier for this element.","pos":[0,39]}]}],"pos":[678036,678076],"yaml":true},{"content":"When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.","nodes":[{"pos":[0,170],"content":"When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.","nodes":[{"content":"When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.","pos":[0,170]}]}],"pos":[679284,679455],"yaml":true},{"content":"The default implementation of this method in this class is incomplete, and always returns `null`.","nodes":[{"pos":[0,97],"content":"The default implementation of this method in this class is incomplete, and always returns <ph id=\"ph1\">`null`</ph>.","source":"The default implementation of this method in this class is incomplete, and always returns `null`."}],"pos":[679466,679564],"yaml":true,"extradata":"MT"},{"content":"The direction of the requested focus traversal.","nodes":[{"pos":[0,47],"content":"The direction of the requested focus traversal.","nodes":[{"content":"The direction of the requested focus traversal.","pos":[0,47]}]}],"pos":[679819,679867],"yaml":true},{"content":"The element that would have received focus if <xref href=\"System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\"></xref> were actually invoked.","nodes":[{"pos":[0,163],"content":"The element that would have received focus if <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\"&gt;&lt;/xref&gt;</ph> were actually invoked.","source":"The element that would have received focus if <xref href=\"System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\"></xref> were actually invoked."}],"pos":[679942,680106],"yaml":true},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","pos":[0,99]}]}],"pos":[681072,681172],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDragEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,555],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,555],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,299],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewDragEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[300,555],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[615,639],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[660,676],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[677,730],"content":"<xref:System.Windows.UIElement.PreviewDragEnterEvent>","nodes":[]},{"pos":[735,751],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[752,761],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[766,774],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[775,813],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[824,902],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DragEnter&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>."}]},{"pos":[912,1037],"content":"Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[681183,682238],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDragEnter\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewDragEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDragEnter\"></xref> routed event."}],"pos":[683347,683439],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[683450,683990],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","pos":[0,99]}]}],"pos":[685074,685174],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDragLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,555],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,555],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,299],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewDragLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[300,555],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[615,639],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[660,676],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[677,730],"content":"<xref:System.Windows.UIElement.PreviewDragLeaveEvent>","nodes":[]},{"pos":[735,751],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[752,761],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[766,774],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[775,813],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[824,902],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DragLeave&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>."}]},{"pos":[912,1037],"content":"Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[685185,686240],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDragLeave\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewDragLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDragLeave\"></xref> routed event."}],"pos":[687327,687419],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[687430,687970],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"pos":[0,109],"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","pos":[0,109]}]}],"pos":[689026,689136],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDragOver\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,551],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,551],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,297],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewDragOver&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[298,551],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[610,634],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[655,671],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[672,724],"content":"<xref:System.Windows.UIElement.PreviewDragOverEvent>","nodes":[]},{"pos":[729,745],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[746,755],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[760,768],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[769,807],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[818,895],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.DragOver&gt;</ph>.","pos":[0,77],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>."}]},{"pos":[905,1029],"content":"Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes."}]}],"pos":[689147,690194],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDragOver\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewDragOver\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDragOver\"></xref> routed event."}],"pos":[691296,691387],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[691398,691938],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","pos":[0,99]}]}],"pos":[692991,693091],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDrop\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewDropEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,535],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,535],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,289],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewDrop&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[290,535],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[590,614],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[635,651],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[652,700],"content":"<xref:System.Windows.UIElement.PreviewDropEvent>","nodes":[]},{"pos":[705,721],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[722,731],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[736,744],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[745,783],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[794,867],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Drop&gt;</ph>.","pos":[0,73],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>."}]},{"pos":[877,997],"content":"Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewDrop%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,120],"source":"Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes."}]}],"pos":[693102,694117],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDrop\"></xref> routed event.","nodes":[{"pos":[0,86],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewDrop\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewDrop\"></xref> routed event."}],"pos":[695169,695256],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[695267,695807],"yaml":true,"extradata":"MT"},{"content":"Occurs when a drag-and-drop operation is started.","nodes":[{"pos":[0,49],"content":"Occurs when a drag-and-drop operation is started.","nodes":[{"content":"Occurs when a drag-and-drop operation is started.","pos":[0,49]}]}],"pos":[696904,696954],"yaml":true},{"content":"The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewGiveFeedback\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,219],"content":"The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.","pos":[0,219],"source":"The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation."}]},{"pos":[226,793],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,567],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,305],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewGiveFeedback&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[306,567],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[856,880],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[901,917],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[918,974],"content":"<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>","nodes":[]},{"pos":[979,995],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[996,1005],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1010,1018],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1019,1065],"content":"<xref:System.Windows.GiveFeedbackEventHandler>","nodes":[]},{"pos":[1076,1157],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GiveFeedback&gt;</ph>.","pos":[0,81],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>."}]},{"pos":[1167,1295],"content":"Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,128],"source":"Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes."}]}],"pos":[696965,698280],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewGiveFeedback\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewGiveFeedback\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewGiveFeedback\"></xref> routed event."}],"pos":[699426,699521],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[699532,700072],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is focused on this element.","nodes":[{"pos":[0,52],"content":"Occurs when the keyboard is focused on this element.","nodes":[{"content":"Occurs when the keyboard is focused on this element.","pos":[0,52]}]}],"pos":[701201,701254],"yaml":true},{"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewGotKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,287],"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","nodes":[{"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","pos":[0,287],"nodes":[{"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,163]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.","pos":[164,287],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus."}]}]},{"pos":[294,889],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,595],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,319],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewGotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[320,595],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[956,980],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1001,1017],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1018,1078],"content":"<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>","nodes":[]},{"pos":[1083,1099],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1100,1109],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1114,1122],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1123,1183],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1194,1279],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.GotKeyboardFocus&gt;</ph>.","pos":[0,85],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>."}]},{"pos":[1289,1421],"content":"Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,132],"source":"Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[701265,702706],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewGotKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewGotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewGotKeyboardFocus\"></xref> routed event."}],"pos":[703908,704007],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[704018,704558],"yaml":true,"extradata":"MT"},{"content":"Occurs when a key is pressed while focus is on this element.","nodes":[{"pos":[0,60],"content":"Occurs when a key is pressed while focus is on this element.","nodes":[{"content":"Occurs when a key is pressed while focus is on this element.","pos":[0,60]}]}],"pos":[705637,705698],"yaml":true},{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewKeyDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,384],"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[0,384],"nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition.","pos":[0,92]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.","pos":[93,231],"source":" The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls."},{"content":"This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[232,384]}]}]},{"pos":[391,950],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,559],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,301],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewKeyDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[302,559],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1008,1032],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1053,1069],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1070,1121],"content":"<xref:System.Windows.UIElement.PreviewKeyDownEvent>","nodes":[]},{"pos":[1126,1142],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1143,1152],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1157,1165],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1166,1209],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[1220,1296],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.KeyDown&gt;</ph>.","pos":[0,76],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>."}]},{"pos":[1306,1429],"content":"Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[705709,707158],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewKeyDown\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewKeyDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewKeyDown\"></xref> routed event."}],"pos":[708263,708353],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[708364,708904],"yaml":true,"extradata":"MT"},{"content":"Occurs when a key is released while focus is on this element.","nodes":[{"pos":[0,61],"content":"Occurs when a key is released while focus is on this element.","nodes":[{"content":"Occurs when a key is released while focus is on this element.","pos":[0,61]}]}],"pos":[709940,710002],"yaml":true},{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewKeyUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,444],"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.","nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.","pos":[0,444],"nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition.","pos":[0,92]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.","pos":[93,229],"source":" The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls."},{"content":"This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[230,382]},{"content":"For details, check the documentation for individual controls.","pos":[383,444]}]}]},{"pos":[451,1002],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,551],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,297],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewKeyUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[298,551],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1058,1082],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1103,1119],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1120,1169],"content":"<xref:System.Windows.UIElement.PreviewKeyUpEvent>","nodes":[]},{"pos":[1174,1190],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1191,1200],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1205,1213],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1214,1257],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[1268,1342],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.KeyUp&gt;</ph>.","pos":[0,74],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>."}]},{"pos":[1352,1473],"content":"Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,121],"source":"Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[710013,711506],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewKeyUp\"></xref> routed event.","nodes":[{"pos":[0,87],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewKeyUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewKeyUp\"></xref> routed event."}],"pos":[712597,712685],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[712696,713236],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is no longer focused on this element.","nodes":[{"pos":[0,62],"content":"Occurs when the keyboard is no longer focused on this element.","nodes":[{"content":"Occurs when the keyboard is no longer focused on this element.","pos":[0,62]}]}],"pos":[714364,714427],"yaml":true},{"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewLostKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,289],"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","nodes":[{"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","pos":[0,289],"nodes":[{"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.","pos":[165,289],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus."}]}]},{"pos":[296,895],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,599],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,321],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewLostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[322,599],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[963,987],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1008,1024],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1025,1086],"content":"<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>","nodes":[]},{"pos":[1091,1107],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1108,1117],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1122,1130],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1131,1191],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1202,1288],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.LostKeyboardFocus&gt;</ph>.","pos":[0,86],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>."}]},{"pos":[1298,1431],"content":"Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,133],"source":"Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[714438,715889],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewLostKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewLostKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewLostKeyboardFocus\"></xref> routed event."}],"pos":[717098,717198],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[717209,717749],"yaml":true,"extradata":"MT"},{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","pos":[0,79]}]}],"pos":[718841,718921],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  \n  \n<a name=\"routedEventInfo_PreviewMouseDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,561],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,561],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,302],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[303,561],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[568,1364],"content":"The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.","nodes":[{"content":"The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.","pos":[0,796],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseDown&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.","pos":[0,288],"source":"The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[289,657],"source":" <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph>.","pos":[658,796],"source":" See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>."}]}]},{"pos":[1424,1448],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1469,1485],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1486,1539],"content":"<xref:System.Windows.UIElement.PreviewMouseDownEvent>","nodes":[]},{"pos":[1544,1560],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1561,1570],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1575,1583],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1584,1635],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[1646,1724],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseDown&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>."}]},{"pos":[1734,1859],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[718932,720811],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseDown\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseDown\"></xref> routed event."}],"pos":[721946,722038],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[722049,722589],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[723711,723802],"yaml":true},{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseLeftButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,202],"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,202],"source":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[209,474],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,265],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[481,1375],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.","pos":[0,894],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,152],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[153,506],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonDown&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[507,768],"source":" If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events."},{"content":"This possibly includes class-handler generated events such as <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>.","pos":[769,894],"source":" This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>."}]}]},{"pos":[1382,2027],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[2097,2121],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2142,2158],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2159,2222],"content":"<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>","nodes":[]},{"pos":[2227,2243],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2244,2250],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2255,2263],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2264,2315],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2326,2461],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,135],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[723813,726298],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"></xref> routed event.","nodes":[{"pos":[0,101],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"></xref> routed event."}],"pos":[727503,727605],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[727616,728156],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[729298,729390],"yaml":true},{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseLeftButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,202],"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,202],"source":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[209,472],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,263],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[479,1241],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","pos":[0,762],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,150],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[151,504],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[505,762],"source":" If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events."}]}]},{"pos":[1248,1893],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[1961,1985],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2006,2022],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2023,2084],"content":"<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>","nodes":[]},{"pos":[2089,2105],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2106,2112],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2117,2125],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2126,2177],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2188,2321],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,133],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[729401,731746],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"></xref> routed event.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"></xref> routed event."}],"pos":[732937,733037],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[733048,733588],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer moves while the mouse pointer is over this element.","nodes":[{"pos":[0,81],"content":"Occurs when the mouse pointer moves while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the mouse pointer moves while the mouse pointer is over this element.","pos":[0,81]}]}],"pos":[734680,734762],"yaml":true},{"content":"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewMouseMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,170],"content":"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.","nodes":[{"content":"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.","pos":[0,170]}]},{"pos":[177,738],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,561],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,302],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[303,561],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[798,822],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[843,859],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[860,913],"content":"<xref:System.Windows.UIElement.PreviewMouseMoveEvent>","nodes":[]},{"pos":[918,934],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[935,944],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[949,957],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[958,1003],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1014,1092],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseMove&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>."}]},{"pos":[1102,1227],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[734773,736020],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseMove\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseMove\"></xref> routed event."}],"pos":[737143,737235],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[737246,737786],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[738936,739028],"yaml":true},{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseRightButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,202],"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,202],"source":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[209,474],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,265],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[481,1376],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.","pos":[0,895],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,152],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[153,506],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonDown&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[507,769],"source":" If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events."},{"content":"This possibly includes class-handler generated events such as <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.PreviewMouseDoubleClick&gt;</ph>.","pos":[770,895],"source":" This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>."}]}]},{"pos":[1383,2028],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[2099,2123],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2144,2160],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2161,2225],"content":"<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>","nodes":[]},{"pos":[2230,2246],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2247,2253],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2258,2266],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2267,2318],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2329,2465],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,136],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[739039,741528],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"></xref> routed event.","nodes":[{"pos":[0,102],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"></xref> routed event."}],"pos":[742740,742843],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[742854,743394],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,92],"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","pos":[0,92]}]}],"pos":[744543,744636],"yaml":true},{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseRightButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,202],"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.","nodes":[{"content":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,202],"source":"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>."}]},{"pos":[209,472],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,263],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[479,1242],"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","nodes":[{"content":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.","pos":[0,763],"nodes":[{"content":"The event data of this event exposes the event data of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,150],"source":"The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[151,504],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."},{"content":"If you mark <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> handled, you are essentially marking <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> handled for all further listeners along the route, and on all related events.","pos":[505,763],"source":" If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events."}]}]},{"pos":[1249,1894],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,211],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[212,360]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[361,645],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>."}]},{"pos":[1963,1987],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2008,2024],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2025,2087],"content":"<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>","nodes":[]},{"pos":[2092,2108],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2109,2115],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2120,2128],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2129,2180],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2191,2325],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,134],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[744647,746996],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"></xref> routed event.","nodes":[{"pos":[0,100],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"></xref> routed event."}],"pos":[748194,748295],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[748306,748846],"yaml":true,"extradata":"MT"},{"content":"Occurs when any mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,86],"content":"Occurs when any mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when any mouse button is released while the mouse pointer is over this element.","pos":[0,86]}]}],"pos":[749927,750014],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  \n  \n<a name=\"routedEventInfo_PreviewMouseUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,553],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,553],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,298],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[299,553],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[560,1340],"content":"The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.","nodes":[{"content":"The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.","pos":[0,780],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseUp&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.","pos":[0,282],"source":"The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[283,645],"source":" <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseRightButtonUp&gt;</ph>.","pos":[646,780],"source":" See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>."}]}]},{"pos":[1398,1422],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1443,1459],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1460,1511],"content":"<xref:System.Windows.UIElement.PreviewMouseUpEvent>","nodes":[]},{"pos":[1516,1532],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1533,1542],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1547,1555],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1556,1607],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[1618,1694],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseUp&gt;</ph>.","pos":[0,76],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>."}]},{"pos":[1704,1827],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[750025,751872],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseUp\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseUp\"></xref> routed event."}],"pos":[752993,753083],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[753094,753634],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[754700,754791],"yaml":true},{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewMouseWheel\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,202],"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.","nodes":[{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.","pos":[0,202]}]},{"pos":[209,772],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,563],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,303],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[304,563],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[833,857],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[878,894],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[895,949],"content":"<xref:System.Windows.UIElement.PreviewMouseWheelEvent>","nodes":[]},{"pos":[954,970],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[971,980],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[985,993],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[994,1044],"content":"<xref:System.Windows.Input.MouseWheelEventHandler>","nodes":[]},{"pos":[1055,1134],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseWheel&gt;</ph>.","pos":[0,79],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>."}]},{"pos":[1144,1270],"content":"Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes."}]}],"pos":[754802,756092],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseWheel\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewMouseWheel\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseWheel\"></xref> routed event."}],"pos":[757210,757303],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[757314,757854],"yaml":true,"extradata":"MT"},{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"pos":[0,101],"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","pos":[0,101]}]}],"pos":[758987,759089],"yaml":true},{"content":"The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewQueryContinueDrag\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,157],"content":"The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> event enables the drag source to declare whether the drag-and-drop operation should be canceled.","pos":[0,157],"source":"The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled."}]},{"pos":[164,751],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,587],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,315],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[316,587],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[819,843],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[864,880],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[881,942],"content":"<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>","nodes":[]},{"pos":[947,963],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[964,973],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[978,986],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[987,1038],"content":"<xref:System.Windows.QueryContinueDragEventHandler>","nodes":[]},{"pos":[1049,1135],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph>.","pos":[0,86],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>."}]},{"pos":[1145,1278],"content":"Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,133],"source":"Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes."}]}],"pos":[759100,760398],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewQueryContinueDrag\"></xref> routed event.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewQueryContinueDrag\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewQueryContinueDrag\"></xref> routed event."}],"pos":[761589,761689],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[761700,762240],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"pos":[0,80],"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","pos":[0,80]}]}],"pos":[763374,763455],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,591],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,591],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,317],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[318,591],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[598,870],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Touch Input Support in Windows Vista<ept id=\"p1\">](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0)</ept> and <bpt id=\"p2\">[</bpt>Input Overview<ept id=\"p2\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,272],"source":" For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[937,961],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[982,998],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[999,1059],"content":"<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>","nodes":[]},{"pos":[1064,1080],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1081,1090],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1095,1103],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1104,1156],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[1167,1252],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph>.","pos":[0,85],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>."}]},{"pos":[1262,1394],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,132],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[763466,764880],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusButtonDown\"></xref> routed event.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusButtonDown\"></xref> routed event."}],"pos":[766066,766165],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[766176,766716],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"pos":[0,81],"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is released while the pointer is over this element.","pos":[0,81]}]}],"pos":[767837,767919],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,583],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,583],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,313],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[314,583],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[590,749],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[814,838],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[859,875],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[876,934],"content":"<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>","nodes":[]},{"pos":[939,955],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[956,965],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[970,978],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[979,1031],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[1042,1125],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>."}]},{"pos":[1135,1265],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[767930,769215],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusButtonUp\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusButtonUp\"></xref> routed event."}],"pos":[770387,770484],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[770495,771035],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus touches the digitizer while it is over this element.","nodes":[{"pos":[0,75],"content":"Occurs when the stylus touches the digitizer while it is over this element.","nodes":[{"content":"Occurs when the stylus touches the digitizer while it is over this element.","pos":[0,75]}]}],"pos":[772130,772206],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,567],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,567],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,305],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[306,567],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[574,733],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[794,818],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[839,855],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[856,910],"content":"<xref:System.Windows.UIElement.PreviewStylusDownEvent>","nodes":[]},{"pos":[915,931],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[932,941],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[946,954],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[955,1005],"content":"<xref:System.Windows.Input.StylusDownEventHandler>","nodes":[]},{"pos":[1016,1095],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph>.","pos":[0,79],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>."}]},{"pos":[1105,1231],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[772217,773468],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusDown\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusDown\"></xref> routed event."}],"pos":[774608,774701],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[774712,775252],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"pos":[0,85],"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","pos":[0,85]}]}],"pos":[776373,776459],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusInAirMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,587],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,587],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,315],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[316,587],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[594,753],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[819,843],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[864,880],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[881,940],"content":"<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>","nodes":[]},{"pos":[945,961],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[962,971],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[976,984],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[985,1031],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1042,1126],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph>.","pos":[0,84],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>."}]},{"pos":[1136,1267],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[776470,777757],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"></xref> routed event."}],"pos":[778924,779022],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[779033,779573],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"pos":[0,96],"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","pos":[0,96]}]}],"pos":[780687,780784],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusInRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,579],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,579],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,311],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[312,579],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[586,745],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[809,833],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[854,870],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[871,928],"content":"<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>","nodes":[]},{"pos":[933,949],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[950,959],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[964,972],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[973,1019],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1030,1112],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph>.","pos":[0,82],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>."}]},{"pos":[1122,1251],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,129],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[780795,782066],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusInRange\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusInRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusInRange\"></xref> routed event."}],"pos":[783197,783293],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[783304,783844],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"></xref> is raised instead.","nodes":[{"pos":[0,231],"content":"Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"></xref> is raised instead.","nodes":[{"content":"Occurs when the stylus moves while over the element.","pos":[0,52]},{"content":"The stylus must move while being detected by the digitizer to raise this event, otherwise, <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"&gt;&lt;/xref&gt;</ph> is raised instead.","pos":[53,231],"source":" The stylus must move while being detected by the digitizer to raise this event, otherwise, <xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"></xref> is raised instead."}]}],"pos":[784938,785170],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,567],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,567],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,305],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[306,567],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[574,733],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[794,818],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[839,855],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[856,910],"content":"<xref:System.Windows.UIElement.PreviewStylusMoveEvent>","nodes":[]},{"pos":[915,931],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[932,941],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[946,954],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[955,1001],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1012,1091],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph>.","pos":[0,79],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>."}]},{"pos":[1101,1227],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[785181,786428],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusMove\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusMove\"></xref> routed event."}],"pos":[787560,787653],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[787664,788204],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is too far from the digitizer to be detected.","nodes":[{"pos":[0,68],"content":"Occurs when the stylus is too far from the digitizer to be detected.","nodes":[{"content":"Occurs when the stylus is too far from the digitizer to be detected.","pos":[0,68]}]}],"pos":[789309,789378],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusOutOfRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,591],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,591],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,317],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[318,591],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[598,757],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[824,848],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[869,885],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[886,946],"content":"<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>","nodes":[]},{"pos":[951,967],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[968,977],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[982,990],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[991,1037],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1048,1133],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph>.","pos":[0,85],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>."}]},{"pos":[1143,1275],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,132],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[789389,790684],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusOutOfRange\"></xref> routed event.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusOutOfRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusOutOfRange\"></xref> routed event."}],"pos":[791858,791957],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[791968,792508],"yaml":true,"extradata":"MT"},{"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"pos":[0,59],"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"content":"Occurs when a user performs one of several stylus gestures.","pos":[0,59]}]}],"pos":[793659,793719],"yaml":true},{"content":"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusSystemGesture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,85],"content":"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.","nodes":[{"content":"For information about stylus gestures, see <ph id=\"ph1\">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.","pos":[0,85],"source":"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>."}]},{"pos":[92,695],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,603],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,323],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[324,603],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[702,861],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[931,955],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[976,992],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[993,1056],"content":"<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>","nodes":[]},{"pos":[1061,1077],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1078,1087],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1092,1100],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1101,1160],"content":"<xref:System.Windows.Input.StylusSystemGestureEventHandler>","nodes":[]},{"pos":[1171,1259],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph>.","pos":[0,88],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>."}]},{"pos":[1269,1404],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,135],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes."}]}],"pos":[793730,795156],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusSystemGesture\"></xref> routed event.","nodes":[{"pos":[0,101],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusSystemGesture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusSystemGesture\"></xref> routed event."}],"pos":[796355,796457],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[796468,797008],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user raises the stylus off the digitizer while the stylus is over this element.","nodes":[{"pos":[0,95],"content":"Occurs when the user raises the stylus off the digitizer while the stylus is over this element.","nodes":[{"content":"Occurs when the user raises the stylus off the digitizer while the stylus is over this element.","pos":[0,95]}]}],"pos":[798096,798192],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,563],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,563],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,303],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[304,563],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[570,729],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[788,812],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[833,849],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[850,902],"content":"<xref:System.Windows.UIElement.PreviewStylusUpEvent>","nodes":[]},{"pos":[907,923],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[924,933],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[938,946],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[947,993],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1004,1081],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph>.","pos":[0,77],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>."}]},{"pos":[1091,1215],"content":"Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[798203,799438],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusUp\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewStylusUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusUp\"></xref> routed event."}],"pos":[800556,800647],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[800658,801198],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"pos":[0,66],"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"content":"Occurs when this element gets text in a device-independent manner.","pos":[0,66]}]}],"pos":[802281,802348],"yaml":true},{"content":"The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.  \n  \n Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.  \n  \n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewTextInput\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,353],"content":"The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.","nodes":[{"content":"The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.","pos":[0,353],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.","pos":[0,149],"source":"The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner."},{"content":"The keyboard is the primary means of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>; but speech, handwriting, and other input devices can also generate <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>.","pos":[150,353],"source":" The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>."}]}]},{"pos":[360,504],"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.","nodes":[{"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.","pos":[0,144]}]},{"pos":[511,1106],"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,595],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,319],"source":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[320,595],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1166,1190],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1211,1227],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1228,1281],"content":"<xref:System.Windows.UIElement.PreviewTextInputEvent>","nodes":[]},{"pos":[1286,1302],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1303,1312],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1317,1325],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1326,1381],"content":"<xref:System.Windows.Input.TextCompositionEventHandler>","nodes":[]},{"pos":[1392,1470],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>."}]},{"pos":[1480,1605],"content":"Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes."}]}],"pos":[802359,803986],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTextInput\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewTextInput\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTextInput\"></xref> routed event."}],"pos":[805129,805221],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[805232,805772],"yaml":true,"extradata":"MT"},{"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"pos":[0,78],"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger touches the screen while the finger is over this element.","pos":[0,78]}]}],"pos":[806856,806935],"yaml":true},{"content":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \n  \n To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \n  \n<a name=\"routedEventInfo_PreviewTouchDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,382],"content":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","nodes":[{"content":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","pos":[0,382],"nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.","pos":[0,175],"source":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves."},{"content":"Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.","pos":[176,316],"source":" Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>."},{"content":"The press and hold behavior is equivalent to a mouse right-click.","pos":[317,382]}]}]},{"pos":[389,692],"content":"To cause the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;</ph> attached property to <ph id=\"ph4\">`false`</ph> for this element.","source":"To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element."},{"pos":[752,776],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[797,813],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[814,867],"content":"<xref:System.Windows.UIElement.PreviewTouchDownEvent>","nodes":[]},{"pos":[872,888],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[889,898],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[903,911],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[912,994],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[1005,1083],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>."}]},{"pos":[1093,1218],"content":"Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[806946,808184],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchDown\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewTouchDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchDown\"></xref> routed event."}],"pos":[809336,809428],"yaml":true},{"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger moves on the screen while the finger is over this element.","pos":[0,79]}]}],"pos":[810490,810570],"yaml":true},{"content":"<a name=\"routedEventInfo_PreviewTouchMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[54,78],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[99,115],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[116,169],"content":"<xref:System.Windows.UIElement.PreviewTouchMoveEvent>","nodes":[]},{"pos":[174,190],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[191,200],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[205,213],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[214,296],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[307,385],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchMove&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>."}]},{"pos":[395,520],"content":"Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[810581,811117],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchMove\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewTouchMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchMove\"></xref> routed event."}],"pos":[812269,812361],"yaml":true},{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"pos":[0,87],"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","pos":[0,87]}]}],"pos":[813411,813499],"yaml":true},{"content":"<a name=\"routedEventInfo_PreviewTouchUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[52,76],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[97,113],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[114,165],"content":"<xref:System.Windows.UIElement.PreviewTouchUpEvent>","nodes":[]},{"pos":[170,186],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[187,196],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[201,209],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[210,292],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[303,379],"content":"The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TouchUp&gt;</ph>.","pos":[0,76],"source":"The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>."}]},{"pos":[389,512],"content":"Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnPreviewTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[813510,814038],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchUp\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.PreviewTouchUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchUp\"></xref> routed event."}],"pos":[815176,815266],"yaml":true},{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"pos":[0,101],"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","pos":[0,101]}]}],"pos":[816332,816434],"yaml":true},{"content":"The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_QueryContinueDrag\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  \n  \n-   Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,152],"content":"The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.","pos":[0,152],"source":"The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled."}]},{"pos":[159,718],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,559],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,301],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.QueryContinueDrag&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[302,559],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[779,803],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[824,840],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[841,895],"content":"<xref:System.Windows.UIElement.QueryContinueDragEvent>","nodes":[]},{"pos":[900,916],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[917,925],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[930,938],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[939,990],"content":"<xref:System.Windows.QueryContinueDragEventHandler>","nodes":[]},{"pos":[1001,1095],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewQueryContinueDrag&gt;</ph>.","pos":[0,94],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>."}]},{"pos":[1105,1231],"content":"Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes."}]}],"pos":[816445,817696],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.QueryContinueDrag\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.QueryContinueDrag\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.QueryContinueDrag\"></xref> routed event."}],"pos":[818838,818931],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[818942,819482],"yaml":true,"extradata":"MT"},{"content":"Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","nodes":[{"pos":[0,222],"content":"Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","nodes":[{"content":"Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","pos":[0,222],"nodes":[{"content":"Occurs when the cursor is requested to display.","pos":[0,47]},{"content":"This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","pos":[48,222]}]}]}],"pos":[820537,820760],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming. That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.  \n  \n Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.  \n  \n<a name=\"routedEventInfo_QueryCursor\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.QueryCursorEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,541],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,541],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,292],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[293,541],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[548,1383],"content":"The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming. That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.","nodes":[{"content":"The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).","pos":[0,124]},{"content":"Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]</ph> programming.","pos":[125,357],"source":" Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming."},{"content":"That object is represented by the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.","pos":[358,508],"source":" That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]."},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.","pos":[509,694],"source":" The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer."},{"content":"You can use predefined values from the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Cursors&gt;</ph> enumeration, or you can declare a custom cursor as an image file.","pos":[695,835],"source":" You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file."}]},{"pos":[1390,2109],"content":"Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.","nodes":[{"content":"Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.","pos":[0,719],"nodes":[{"content":"Listening for the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> event is not an efficient technique for cursor management.","pos":[0,120],"source":"Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management."},{"content":"Instead, each element should define its own cursor behavior with <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.","pos":[121,307],"source":" Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>."},{"content":"You should only rely on <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.","pos":[308,549],"source":" You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs."},{"content":"For more information on implementing cursor behavior in response to <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.QueryCursor&gt;</ph>, see <ph id=\"ph2\">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.","pos":[550,719],"source":" For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>."}]}]},{"pos":[2164,2188],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2209,2225],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2226,2274],"content":"<xref:System.Windows.UIElement.QueryCursorEvent>","nodes":[]},{"pos":[2279,2295],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2296,2304],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[2309,2317],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2318,2369],"content":"<xref:System.Windows.Input.QueryCursorEventHandler>","nodes":[]},{"pos":[2380,2430],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[2440,2560],"content":"Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnQueryCursor%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,120],"source":"Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes."}]}],"pos":[820771,823353],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.QueryCursor\"></xref> routed event.","nodes":[{"pos":[0,86],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.QueryCursor\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.QueryCursor\"></xref> routed event."}],"pos":[824453,824540],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[824551,825091],"yaml":true,"extradata":"MT"},{"content":"Raises a specific routed event. The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data).","nodes":[{"pos":[0,301],"content":"Raises a specific routed event. The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data).","nodes":[{"content":"Raises a specific routed event.","pos":[0,31]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEvent\"&gt;&lt;/xref&gt;</ph> to be raised is identified within the <ph id=\"ph2\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> instance that is provided (as the <ph id=\"ph3\">&lt;xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"&gt;&lt;/xref&gt;</ph> property of that event data).","pos":[32,301],"source":" The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data)."}]}],"pos":[826282,826584],"yaml":true},{"content":"The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.  \n  \n <xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.","nodes":[{"pos":[0,366],"content":"The <ph id=\"ph1\">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <ph id=\"ph2\">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.","source":"The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised."},{"pos":[373,730],"content":"<xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> is not just the state properties for the event; it also identifies which routed event to raise.","pos":[0,133],"source":"<xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise."},{"content":"This event-raising pattern and the routed event data both differ from <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.","pos":[134,357],"source":" This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event."}]}],"pos":[826595,827330],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data and also identifies the event to raise.","nodes":[{"pos":[0,122],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data and also identifies the event to raise.","source":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data and also identifies the event to raise."}],"pos":[827982,828105],"yaml":true},{"content":"Releases all captured touch devices from this element.","nodes":[{"pos":[0,54],"content":"Releases all captured touch devices from this element.","nodes":[{"content":"Releases all captured touch devices from this element.","pos":[0,54]}]}],"pos":[829096,829151],"yaml":true},{"content":"Releases the mouse capture, if this element held the capture.","nodes":[{"pos":[0,61],"content":"Releases the mouse capture, if this element held the capture.","nodes":[{"content":"Releases the mouse capture, if this element held the capture.","pos":[0,61]}]}],"pos":[830235,830297],"yaml":true},{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.","nodes":[{"pos":[0,187],"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.","nodes":[{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.","pos":[0,187],"nodes":[{"content":"If this element did not hold the capture, calling this method has no effect.","pos":[0,76]},{"content":"Consider checking the value of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMouseCaptured%2A&gt;</ph> before you call this method.","pos":[77,187],"source":" Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method."}]}]}],"pos":[830308,830496],"yaml":true,"extradata":"MT"},{"content":"Releases the stylus device capture, if this element held the capture.","nodes":[{"pos":[0,69],"content":"Releases the stylus device capture, if this element held the capture.","nodes":[{"content":"Releases the stylus device capture, if this element held the capture.","pos":[0,69]}]}],"pos":[832109,832179],"yaml":true},{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.","nodes":[{"pos":[0,188],"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.","nodes":[{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.","pos":[0,188],"nodes":[{"content":"If this element did not hold the capture, calling this method has no effect.","pos":[0,76]},{"content":"Consider checking the value of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsStylusCaptured%2A&gt;</ph> before you call this method.","pos":[77,188],"source":" Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method."}]}]}],"pos":[832190,832379],"yaml":true,"extradata":"MT"},{"content":"Attempts to release the specified touch device from this element.","nodes":[{"pos":[0,65],"content":"Attempts to release the specified touch device from this element.","nodes":[{"content":"Attempts to release the specified touch device from this element.","pos":[0,65]}]}],"pos":[833592,833658],"yaml":true},{"content":"The device to release.","nodes":[{"pos":[0,22],"content":"The device to release.","nodes":[{"content":"The device to release.","pos":[0,22]}]}],"pos":[833863,833886],"yaml":true},{"content":"`true` if the touch device is released; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if the touch device is released; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the touch device is released; otherwise, `false`."}],"pos":[833944,834006],"yaml":true},{"content":"<code>touchDevice</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>touchDevice</code> is `null`."}],"pos":[834180,834216],"yaml":true},{"content":"Removes the specified routed event handler from this element.","nodes":[{"pos":[0,61],"content":"Removes the specified routed event handler from this element.","nodes":[{"content":"Removes the specified routed event handler from this element.","pos":[0,61]}]}],"pos":[835298,835360],"yaml":true},{"content":"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level. The example that follows this remarks section illustrates this scenario.  \n  \n Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.  \n  \n If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.  \n  \n Neither `routedEvent` nor `handler` may be `null`. Attempting to provide either value as `null` will raise an exception.  \n  \n This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events. Either type of handler is removed.","nodes":[{"pos":[0,455],"content":"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level. The example that follows this remarks section illustrates this scenario.","nodes":[{"content":"The most common scenario for using this <ph id=\"ph1\">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id=\"ph2\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> level.","pos":[0,382],"source":"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level."},{"content":"The example that follows this remarks section illustrates this scenario.","pos":[383,455]}]},{"pos":[462,601],"content":"Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.","nodes":[{"content":"Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.","pos":[0,139]}]},{"pos":[608,857],"content":"If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.","nodes":[{"content":"If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.","pos":[0,125]},{"content":"This behavior is consistent with <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id=\"ph2\">`-=`</ph> operator.","pos":[126,249],"source":" This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator."}]},{"pos":[864,984],"content":"Neither `routedEvent` nor `handler` may be `null`. Attempting to provide either value as `null` will raise an exception.","nodes":[{"content":"Neither <ph id=\"ph1\">`routedEvent`</ph> nor <ph id=\"ph2\">`handler`</ph> may be <ph id=\"ph3\">`null`</ph>.","pos":[0,50],"source":"Neither `routedEvent` nor `handler` may be `null`."},{"content":"Attempting to provide either value as <ph id=\"ph1\">`null`</ph> will raise an exception.","pos":[51,120],"source":" Attempting to provide either value as `null` will raise an exception."}]},{"pos":[991,1318],"content":"This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events. Either type of handler is removed.","nodes":[{"content":"This method ignores the <ph id=\"ph1\">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature that enables handling of already-handled events.","pos":[0,292],"source":"This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events."},{"content":"Either type of handler is removed.","pos":[293,327]}]}],"pos":[835371,836704],"yaml":true,"extradata":"MT"},{"content":"The identifier of the routed event for which the handler is attached.","nodes":[{"pos":[0,69],"content":"The identifier of the routed event for which the handler is attached.","nodes":[{"content":"The identifier of the routed event for which the handler is attached.","pos":[0,69]}]}],"pos":[837375,837445],"yaml":true},{"content":"The specific handler implementation to remove from the event handler collection on this element.","nodes":[{"pos":[0,96],"content":"The specific handler implementation to remove from the event handler collection on this element.","nodes":[{"content":"The specific handler implementation to remove from the event handler collection on this element.","pos":[0,96]}]}],"pos":[837510,837607],"yaml":true},{"content":"Gets (or sets) the final render size of this element.","nodes":[{"pos":[0,53],"content":"Gets (or sets) the final render size of this element.","nodes":[{"content":"Gets (or sets) the final render size of this element.","pos":[0,53]}]}],"pos":[838519,838573],"yaml":true},{"content":"> [!IMPORTANT]\n>  Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system. Nearly all typical application scenarios will use this layout system. The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly. The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.  \n  \n This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.  \n  \n A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.  \n  \n<a name=\"xamlTextUsage_RenderSize\"></a>   \n## XAML Text Usage","nodes":[{"pos":[2,636],"content":"[!IMPORTANT]\n Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system. Nearly all typical application scenarios will use this layout system. The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly. The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.","leadings":["","> "],"nodes":[{"content":" Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system. Nearly all typical application scenarios will use this layout system. The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly. The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.","pos":[13,632],"nodes":[{"content":"Do not attempt to set this property, either in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> or in code, if using the WPF framework-level layout system.","pos":[1,169],"source":" Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system."},{"content":"Nearly all typical application scenarios will use this layout system.","pos":[170,239]},{"content":"The layout system will not respect sizes set in the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> property directly.","pos":[240,356],"source":" The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Adorner&gt;</ph> class.","pos":[357,619],"source":" The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class."}]}]},{"pos":[643,844],"content":"This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.","nodes":[{"content":"This property can be used for checking the applicable render size within layout system overrides such as <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnRender%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.GetLayoutClip%2A&gt;</ph>.","pos":[0,201],"source":"This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>."}]},{"pos":[851,1047],"content":"A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.","nodes":[{"content":"A more common scenario is handling the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> event with the class handler override or the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.OnRenderSizeChanged%2A&gt;</ph> event.","pos":[0,196],"source":"A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event."}]},{"pos":[1099,1114],"content":"XAML Text Usage","linkify":"XAML Text Usage","nodes":[{"content":"XAML Text Usage","pos":[0,15]}]}],"pos":[838584,839711],"yaml":true,"extradata":"MT"},{"content":"The rendered size for this element.","nodes":[{"pos":[0,35],"content":"The rendered size for this element.","nodes":[{"content":"The rendered size for this element.","pos":[0,35]}]}],"pos":[840458,840494],"yaml":true},{"content":"Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.","nodes":[{"pos":[0,119],"content":"Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.","nodes":[{"content":"Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.","pos":[0,119],"nodes":[{"content":"Gets or sets transform information that affects the rendering position of this element.","pos":[0,87]},{"content":"This is a dependency property.","pos":[89,119]}]}]}],"pos":[841472,841592],"yaml":true},{"content":"A render transform does not regenerate layout size or render size information. Render transforms are typically intended for animating or applying a temporary effect to an element. For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  \n  \n<a name=\"dependencyPropertyInfo_RenderTransform\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.RenderTransformProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,361],"content":"A render transform does not regenerate layout size or render size information. Render transforms are typically intended for animating or applying a temporary effect to an element. For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].","nodes":[{"content":"A render transform does not regenerate layout size or render size information.","pos":[0,78]},{"content":"Render transforms are typically intended for animating or applying a temporary effect to an element.","pos":[79,179]},{"content":"For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.","pos":[180,361],"source":" For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]."}]},{"pos":[427,458],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[479,495],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[496,551],"content":"<xref:System.Windows.UIElement.RenderTransformProperty>","nodes":[]},{"pos":[556,589],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[590,594],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[841603,842211],"yaml":true,"extradata":"MT"},{"content":"Describes the specifics of the desired render transform. The default is <xref href=\"System.Windows.Media.Transform.Identity\"></xref>.","nodes":[{"pos":[0,133],"content":"Describes the specifics of the desired render transform. The default is <xref href=\"System.Windows.Media.Transform.Identity\"></xref>.","nodes":[{"content":"Describes the specifics of the desired render transform.","pos":[0,56]},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Transform.Identity\"&gt;&lt;/xref&gt;</ph>.","pos":[57,133],"source":" The default is <xref href=\"System.Windows.Media.Transform.Identity\"></xref>."}]}],"pos":[842376,842510],"yaml":true},{"content":"Gets or sets the center point of any possible render transform declared by <xref href=\"System.Windows.UIElement.RenderTransform\"></xref>, relative to the bounds of the element.  This is a dependency property.","nodes":[{"pos":[0,208],"content":"Gets or sets the center point of any possible render transform declared by <xref href=\"System.Windows.UIElement.RenderTransform\"></xref>, relative to the bounds of the element.  This is a dependency property.","nodes":[{"content":"Gets or sets the center point of any possible render transform declared by <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.RenderTransform\"&gt;&lt;/xref&gt;</ph>, relative to the bounds of the element.","pos":[0,176],"source":"Gets or sets the center point of any possible render transform declared by <xref href=\"System.Windows.UIElement.RenderTransform\"></xref>, relative to the bounds of the element."},{"content":"This is a dependency property.","pos":[178,208]}]}],"pos":[843512,843721],"yaml":true},{"content":"<xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system. Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis. For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element. <xref:System.Double.NaN> is not an accepted value.  \n  \n Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects. For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself. The transform will spin your element around in a big circle that originates beyond bottom right. The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view. Negative point values are similar, these will go beyond the top left bounds.  \n  \n Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.  \n  \n<a name=\"xamlAttributeUsage_RenderTransformOrigin\"></a>   \n## XAML Attribute Usage  \n  \n```  \n<object RenderTransformOrigin=\"xOrigin, yOrigin\"/>  \n```  \n  \n<a name=\"xamlPropertyElementUsage_RenderTransformOrigin\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.RenderTransformOrigin>  \n    <Point X=\" xOrigin \" Y=\" yOrigin \"/>  \n  </object.RenderTransformOrigin>  \n</object>  \n```  \n  \n<a name=\"xamlValues_RenderTransformOrigin\"></a>   \n## XAML Values  \n *xOrigin*  \n The horizontal origin factor. This is typically given as a value between 0 and 1. See Remarks.  \n  \n *yOrigin*  \n The vertical origin factor. This is typically given as a value between 0 and 1. See Remarks.  \n  \n<a name=\"dependencyPropertyInfo_RenderTransformOrigin\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,580],"content":"<xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system. Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis. For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element. <xref:System.Double.NaN> is not an accepted value.","nodes":[{"content":"<xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system. Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis. For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element. <xref:System.Double.NaN> is not an accepted value.","pos":[0,580],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> has a somewhat nonstandard use of the <ph id=\"ph2\">&lt;xref:System.Windows.Point&gt;</ph> structure value, in that the <ph id=\"ph3\">&lt;xref:System.Windows.Point&gt;</ph> does not represent an absolute location in a coordinate system.","pos":[0,243],"source":"<xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system."},{"content":"Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis.","pos":[244,358]},{"content":"For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element.","pos":[359,529]},{"content":"<ph id=\"ph1\">&lt;xref:System.Double.NaN&gt;</ph> is not an accepted value.","pos":[530,580],"source":" <xref:System.Double.NaN> is not an accepted value."}]}]},{"pos":[587,1199],"content":"Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects. For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself. The transform will spin your element around in a big circle that originates beyond bottom right. The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view. Negative point values are similar, these will go beyond the top left bounds.","nodes":[{"content":"Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects. For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself. The transform will spin your element around in a big circle that originates beyond bottom right. The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view. Negative point values are similar, these will go beyond the top left bounds.","pos":[0,612],"nodes":[{"content":"Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects.","pos":[0,98]},{"content":"For instance, if you set <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.RenderTransformOrigin%2A&gt;</ph> to be (5,5), and then apply a <ph id=\"ph2\">&lt;xref:System.Windows.Media.RotateTransform&gt;</ph>, the rotation point will be well outside the bounds of the element itself.","pos":[99,329],"source":" For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself."},{"content":"The transform will spin your element around in a big circle that originates beyond bottom right.","pos":[330,426]},{"content":"The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view.","pos":[427,535]},{"content":"Negative point values are similar, these will go beyond the top left bounds.","pos":[536,612]}]}]},{"pos":[1206,1322],"content":"Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.","nodes":[{"content":"Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.","pos":[0,116]}]},{"pos":[1390,1410],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1552,1579],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[1791,1802],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1806,1913],"content":"*xOrigin*  \n The horizontal origin factor. This is typically given as a value between 0 and 1. See Remarks.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>xOrigin<ept id=\"p1\">*</ept>","pos":[0,9],"source":"*xOrigin*"},{"content":" The horizontal origin factor. This is typically given as a value between 0 and 1. See Remarks.","pos":[12,107],"nodes":[{"content":"The horizontal origin factor.","pos":[1,30]},{"content":"This is typically given as a value between 0 and 1.","pos":[31,82]},{"content":"See Remarks.","pos":[83,95]}]}]},{"pos":[1920,2025],"content":"*yOrigin*  \n The vertical origin factor. This is typically given as a value between 0 and 1. See Remarks.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>yOrigin<ept id=\"p1\">*</ept>","pos":[0,9],"source":"*yOrigin*"},{"content":" The vertical origin factor. This is typically given as a value between 0 and 1. See Remarks.","pos":[12,105],"nodes":[{"content":"The vertical origin factor.","pos":[1,28]},{"content":"This is typically given as a value between 0 and 1.","pos":[29,80]},{"content":"See Remarks.","pos":[81,93]}]}]},{"pos":[2097,2128],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[2149,2165],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2166,2227],"content":"<xref:System.Windows.UIElement.RenderTransformOriginProperty>","nodes":[]},{"pos":[2232,2265],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[2266,2270],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[843732,846058],"yaml":true,"extradata":"MT"},{"content":"The value that declares the render transform. The default value is a <xref href=\"System.Windows.Point\"></xref> with coordinates (0,0).","nodes":[{"pos":[0,134],"content":"The value that declares the render transform. The default value is a <xref href=\"System.Windows.Point\"></xref> with coordinates (0,0).","nodes":[{"content":"The value that declares the render transform.","pos":[0,45]},{"content":"The default value is a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Point\"&gt;&lt;/xref&gt;</ph> with coordinates (0,0).","pos":[46,134],"source":" The default value is a <xref href=\"System.Windows.Point\"></xref> with coordinates (0,0)."}]}],"pos":[846844,846979],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.RenderTransformOrigin\"></xref> dependency property.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.RenderTransformOrigin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.RenderTransformOrigin\"></xref> dependency property."}],"pos":[848032,848136],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.RenderTransform\"></xref> dependency property.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.RenderTransform\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.RenderTransform\"></xref> dependency property."}],"pos":[849262,849360],"yaml":true},{"content":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.UIElement.CommandBindings\"></xref> property on instances of this class.","nodes":[{"pos":[0,175],"content":"Returns whether serialization processes should serialize the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.CommandBindings\"&gt;&lt;/xref&gt;</ph> property on instances of this class.","source":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.UIElement.CommandBindings\"></xref> property on instances of this class."}],"pos":[850551,850727],"yaml":true},{"content":"This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.  \n  \n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \n  \n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).","nodes":[{"pos":[0,93],"content":"This will return <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> is locally set.","source":"This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set."},{"pos":[100,483],"content":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.","nodes":[{"content":"This <ph id=\"ph1\">`ShouldSerialize`</ph> method is provided because the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> property does not have a simple default value.","pos":[0,151],"source":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value."},{"content":"This method indicates whether the property has changed from its default value.","pos":[152,230]},{"content":"You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[231,383],"source":" You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>."}]},{"pos":[490,691],"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id=\"p1\">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.","source":"For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)."}],"pos":[850738,851436],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.UIElement.CommandBindings\"></xref> property value should be serialized; otherwise, `false`.","nodes":[{"pos":[0,132],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement.CommandBindings\"&gt;&lt;/xref&gt;</ph> property value should be serialized; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.UIElement.CommandBindings\"></xref> property value should be serialized; otherwise, `false`."}],"pos":[851583,851718],"yaml":true},{"content":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.UIElement.InputBindings\"></xref> property on instances of this class.","nodes":[{"pos":[0,173],"content":"Returns whether serialization processes should serialize the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.InputBindings\"&gt;&lt;/xref&gt;</ph> property on instances of this class.","source":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.UIElement.InputBindings\"></xref> property on instances of this class."}],"pos":[852798,852972],"yaml":true},{"content":"This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.  \n  \n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \n  \n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).","nodes":[{"pos":[0,91],"content":"This will return <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> is locally set.","source":"This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set."},{"pos":[98,479],"content":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.","nodes":[{"content":"This <ph id=\"ph1\">`ShouldSerialize`</ph> method is provided because the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property does not have a simple default value.","pos":[0,149],"source":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value."},{"content":"This method indicates whether the property has changed from its default value.","pos":[150,228]},{"content":"You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[229,381],"source":" You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>."}]},{"pos":[486,687],"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id=\"p1\">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.","source":"For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)."}],"pos":[852983,853677],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.UIElement.InputBindings\"></xref> property value should be serialized; otherwise, `false`.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.UIElement.InputBindings\"&gt;&lt;/xref&gt;</ph> property value should be serialized; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.UIElement.InputBindings\"></xref> property value should be serialized; otherwise, `false`."}],"pos":[853822,853955],"yaml":true},{"content":"Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.","nodes":[{"pos":[0,163],"content":"Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.","nodes":[{"content":"Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.","pos":[0,163],"nodes":[{"content":"Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.","pos":[0,131]},{"content":"This is a dependency property.","pos":[133,163]}]}]}],"pos":[854975,855139],"yaml":true},{"content":"You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI. For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.  \n  \n When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`. What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.  \n  \n<a name=\"dependencyPropertyInfo_SnapsToDevicePixels\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,315],"content":"You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI. For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.","nodes":[{"content":"You can set this property to <ph id=\"ph1\">`true`</ph> on your root element to enable pixel snap rendering throughout the UI.","pos":[0,106],"source":"You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI."},{"content":"For devices operating at greater than 96 <ph id=\"ph1\">[!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)]</ph>, pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.","pos":[107,315],"source":" For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines."}]},{"pos":[322,961],"content":"When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`. What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.","nodes":[{"content":"When inherited by <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> or any possible derived classes, <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement&gt;</ph> overrides the metadata for this dependency property to set the <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> metadata property to <ph id=\"ph4\">`true`</ph>.","pos":[0,280],"source":"When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`."},{"content":"What this achieves is that only the outermost element in a subtree needs to specify <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> as <ph id=\"ph2\">`true`</ph>, and all child elements of that subtree will then report <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> as <ph id=\"ph4\">`true`</ph> and will have the <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.SnapsToDevicePixels%2A&gt;</ph> visual effect.","pos":[281,639],"source":" What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect."}]},{"pos":[1031,1062],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1083,1099],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1100,1159],"content":"<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>","nodes":[]},{"pos":[1164,1197],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1198,1202],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[855150,856368],"yaml":true,"extradata":"MT"},{"content":"`true` if the element should render in accordance to device pixels; otherwise, `false`. The default as declared on <xref href=\"System.Windows.UIElement\"></xref> is `false`.","nodes":[{"pos":[0,172],"content":"`true` if the element should render in accordance to device pixels; otherwise, `false`. The default as declared on <xref href=\"System.Windows.UIElement\"></xref> is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element should render in accordance to device pixels; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,87],"source":"`true` if the element should render in accordance to device pixels; otherwise, `false`."},{"content":"The default as declared on <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement\"&gt;&lt;/xref&gt;</ph> is <ph id=\"ph2\">`false`</ph>.","pos":[88,172],"source":" The default as declared on <xref href=\"System.Windows.UIElement\"></xref> is `false`."}]}],"pos":[856495,856670],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.SnapsToDevicePixels\"></xref> dependency property.","nodes":[{"pos":[0,101],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.SnapsToDevicePixels\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.SnapsToDevicePixels\"></xref> dependency property."}],"pos":[857709,857811],"yaml":true},{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"pos":[0,80],"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","pos":[0,80]}]}],"pos":[858915,858996],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,563],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,563],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,303],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusButtonDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[304,563],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[570,729],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[789,813],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[834,850],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[851,904],"content":"<xref:System.Windows.UIElement.StylusButtonDownEvent>","nodes":[]},{"pos":[909,925],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[926,934],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[939,947],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[948,1000],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[1011,1104],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusButtonDown&gt;</ph>.","pos":[0,93],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>."}]},{"pos":[1114,1239],"content":"Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[859007,860266],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusButtonDown\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusButtonDown\"></xref> routed event."}],"pos":[861403,861495],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[861506,862046],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"pos":[0,81],"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is released while the pointer is over this element.","pos":[0,81]}]}],"pos":[863118,863200],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,555],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,555],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,299],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusButtonUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[300,555],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[562,721],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[779,803],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[824,840],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[841,892],"content":"<xref:System.Windows.UIElement.StylusButtonUpEvent>","nodes":[]},{"pos":[897,913],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[914,922],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[927,935],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[936,988],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[999,1090],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusButtonUp&gt;</ph>.","pos":[0,91],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>."}]},{"pos":[1100,1223],"content":"Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[863211,864454],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusButtonUp\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusButtonUp\"></xref> routed event."}],"pos":[865555,865645],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[865656,866196],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus touches the digitizer while the stylus is over this element.","nodes":[{"pos":[0,83],"content":"Occurs when the stylus touches the digitizer while the stylus is over this element.","nodes":[{"content":"Occurs when the stylus touches the digitizer while the stylus is over this element.","pos":[0,83]}]}],"pos":[867242,867326],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,539],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,539],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,291],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[292,539],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[546,705],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[759,783],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[804,820],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[821,868],"content":"<xref:System.Windows.UIElement.StylusDownEvent>","nodes":[]},{"pos":[873,889],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[890,898],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[903,911],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[912,962],"content":"<xref:System.Windows.Input.StylusDownEventHandler>","nodes":[]},{"pos":[973,1060],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusDown&gt;</ph>.","pos":[0,87],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>."}]},{"pos":[1070,1189],"content":"Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[867337,868546],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusDown\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusDown\"></xref> routed event."}],"pos":[869637,869723],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[869734,870274],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus enters the bounds of this element.","nodes":[{"pos":[0,57],"content":"Occurs when the stylus enters the bounds of this element.","nodes":[{"content":"Occurs when the stylus enters the bounds of this element.","pos":[0,57]}]}],"pos":[871322,871380],"yaml":true},{"content":"<xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusEnterEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,321],"content":"<xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> is a  that uses the direct event handling routing strategy.","pos":[0,103],"source":"<xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[104,223]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[224,321]}]}]},{"pos":[328,594],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> tracks when the stylus enters the bounds of an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`false`</ph> to <ph id=\"ph4\">`true`</ph> on this element.","source":"Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element."},{"pos":[601,1144],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,543],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,293],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[294,543],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1151,1310],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[1365,1389],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1410,1426],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1427,1475],"content":"<xref:System.Windows.UIElement.StylusEnterEvent>","nodes":[]},{"pos":[1480,1496],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1497,1503],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1508,1516],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1517,1563],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1574,1694],"content":"Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,120],"source":"Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[871391,873107],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusEnter\"></xref> routed event.","nodes":[{"pos":[0,86],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusEnter\"></xref> routed event."}],"pos":[874197,874284],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[874295,874835],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"pos":[0,85],"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","pos":[0,85]}]}],"pos":[875908,875994],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusInAirMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,559],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,559],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,301],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusInAirMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[302,559],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[566,725],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[784,808],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[829,845],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[846,898],"content":"<xref:System.Windows.UIElement.StylusInAirMoveEvent>","nodes":[]},{"pos":[903,919],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[920,928],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[933,941],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[942,988],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[999,1091],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusInAirMove&gt;</ph>.","pos":[0,92],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>."}]},{"pos":[1101,1225],"content":"Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[876005,877250],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusInAirMove\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusInAirMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusInAirMove\"></xref> routed event."}],"pos":[878346,878437],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[878448,878988],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"pos":[0,96],"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","pos":[0,96]}]}],"pos":[880031,880128],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusInRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusInRangeEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,551],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,551],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,297],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusInRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[298,551],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[558,717],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[774,798],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[819,835],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[836,886],"content":"<xref:System.Windows.UIElement.StylusInRangeEvent>","nodes":[]},{"pos":[891,907],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[908,916],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[921,929],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[930,976],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[987,1077],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusInRange&gt;</ph>.","pos":[0,90],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>."}]},{"pos":[1087,1209],"content":"Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,122],"source":"Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[880139,881368],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusInRange\"></xref> routed event.","nodes":[{"pos":[0,88],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusInRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusInRange\"></xref> routed event."}],"pos":[882472,882561],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[882572,883112],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus leaves the bounds of the element.","nodes":[{"pos":[0,56],"content":"Occurs when the stylus leaves the bounds of the element.","nodes":[{"content":"Occurs when the stylus leaves the bounds of the element.","pos":[0,56]}]}],"pos":[884163,884220],"yaml":true},{"content":"<xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusLeaveEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,321],"content":"<xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[0,321],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> is a  that uses the direct event handling routing strategy.","pos":[0,103],"source":"<xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[104,223]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[224,321]}]}]},{"pos":[328,594],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`true`</ph> to <ph id=\"ph4\">`false`</ph> on this element.","source":"Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element."},{"pos":[601,1144],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,543],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,293],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[294,543],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1151,1310],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[1365,1389],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1410,1426],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1427,1475],"content":"<xref:System.Windows.UIElement.StylusLeaveEvent>","nodes":[]},{"pos":[1480,1496],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1497,1503],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1508,1516],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1517,1563],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1574,1694],"content":"Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,120],"source":"Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[884231,885947],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusLeave\"></xref> routed event.","nodes":[{"pos":[0,86],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusLeave\"></xref> routed event."}],"pos":[887037,887124],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[887135,887675],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <xref href=\"System.Windows.UIElement.StylusInAirMove\"></xref> is raised instead.","nodes":[{"pos":[0,204],"content":"Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <xref href=\"System.Windows.UIElement.StylusInAirMove\"></xref> is raised instead.","nodes":[{"content":"Occurs when the stylus moves over this element.","pos":[0,47]},{"content":"The stylus must move while on the digitizer to raise this event.","pos":[48,112]},{"content":"Otherwise, <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusInAirMove\"&gt;&lt;/xref&gt;</ph> is raised instead.","pos":[113,204],"source":" Otherwise, <xref href=\"System.Windows.UIElement.StylusInAirMove\"></xref> is raised instead."}]}],"pos":[888718,888923],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,539],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,539],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,291],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[292,539],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[546,705],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[759,783],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[804,820],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[821,868],"content":"<xref:System.Windows.UIElement.StylusMoveEvent>","nodes":[]},{"pos":[873,889],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[890,898],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[903,911],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[912,958],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[969,1056],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusMove&gt;</ph>.","pos":[0,87],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>."}]},{"pos":[1066,1185],"content":"Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[888934,890139],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusMove\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusMove\"></xref> routed event."}],"pos":[891200,891286],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[891297,891837],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is too far from the digitizer to be detected, while over this element.","nodes":[{"pos":[0,93],"content":"Occurs when the stylus is too far from the digitizer to be detected, while over this element.","nodes":[{"content":"Occurs when the stylus is too far from the digitizer to be detected, while over this element.","pos":[0,93]}]}],"pos":[892915,893009],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusOutOfRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,563],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,563],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,303],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusOutOfRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[304,563],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[570,729],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[789,813],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[834,850],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[851,904],"content":"<xref:System.Windows.UIElement.StylusOutOfRangeEvent>","nodes":[]},{"pos":[909,925],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[926,934],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[939,947],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[948,994],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1005,1098],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusOutOfRange&gt;</ph>.","pos":[0,93],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>."}]},{"pos":[1108,1233],"content":"Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[893020,894273],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusOutOfRange\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusOutOfRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusOutOfRange\"></xref> routed event."}],"pos":[895376,895468],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[895479,896019],"yaml":true,"extradata":"MT"},{"content":"Gets a collection of all stylus plug-in (customization) objects associated with this element.","nodes":[{"pos":[0,93],"content":"Gets a collection of all stylus plug-in (customization) objects associated with this element.","nodes":[{"content":"Gets a collection of all stylus plug-in (customization) objects associated with this element.","pos":[0,93]}]}],"pos":[897088,897182],"yaml":true},{"content":"An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.  \n  \n For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).","nodes":[{"pos":[0,405],"content":"An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.","nodes":[{"content":"An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.","pos":[0,405],"nodes":[{"content":"An example of a control that populates this collection is <ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph>.","pos":[0,99],"source":"An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.InkCanvas&gt;</ph> adds the <ph id=\"ph2\">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> as a collection item, which enables the <ph id=\"ph3\">&lt;xref:System.Windows.Input.StylusPlugIns.DynamicRenderer&gt;</ph> to interact with stylus input and produce the unique rendering in response to stylus driven events.","pos":[100,405],"source":" <xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events."}]}]},{"pos":[412,611],"content":"For information on creating custom plug-ins that can receive and interpret stylus input, see <bpt id=\"p1\">[</bpt>Intercepting Input from the Stylus<ept id=\"p1\">](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)</ept>.","source":"For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md)."}],"pos":[897193,897809],"yaml":true,"extradata":"MT"},{"content":"The collection of stylus plug-ins, as a specialized collection.","nodes":[{"pos":[0,63],"content":"The collection of stylus plug-ins, as a specialized collection.","nodes":[{"content":"The collection of stylus plug-ins, as a specialized collection.","pos":[0,63]}]}],"pos":[898524,898588],"yaml":true},{"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"pos":[0,59],"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"content":"Occurs when a user performs one of several stylus gestures.","pos":[0,59]}]}],"pos":[899551,899611],"yaml":true},{"content":"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusSystemGesture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,90],"content":"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.","nodes":[{"content":"For more information about stylus gestures, see <ph id=\"ph1\">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.","pos":[0,90],"source":"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>."}]},{"pos":[97,672],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,575],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,309],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusSystemGesture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[310,575],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[679,838],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[901,925],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[946,962],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[963,1019],"content":"<xref:System.Windows.UIElement.StylusSystemGestureEvent>","nodes":[]},{"pos":[1024,1040],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1041,1049],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1054,1062],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1063,1122],"content":"<xref:System.Windows.Input.StylusSystemGestureEventHandler>","nodes":[]},{"pos":[1133,1229],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusSystemGesture&gt;</ph>.","pos":[0,96],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>."}]},{"pos":[1239,1367],"content":"Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,128],"source":"Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes."}]}],"pos":[899622,901011],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusSystemGesture\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusSystemGesture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusSystemGesture\"></xref> routed event."}],"pos":[902183,902278],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[902289,902829],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user raises the stylus off the digitizer while it is over this element.","nodes":[{"pos":[0,87],"content":"Occurs when the user raises the stylus off the digitizer while it is over this element.","nodes":[{"content":"Occurs when the user raises the stylus off the digitizer while it is over this element.","pos":[0,87]}]}],"pos":[903868,903956],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.StylusUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,531],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,531],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,287],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.StylusUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[288,531],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[538,697],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[749,773],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[794,810],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[811,856],"content":"<xref:System.Windows.UIElement.StylusUpEvent>","nodes":[]},{"pos":[861,877],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[878,886],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[891,899],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[900,946],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[957,1042],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewStylusUp&gt;</ph>.","pos":[0,85],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>."}]},{"pos":[1052,1169],"content":"Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,117],"source":"Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[903967,905156],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.StylusUp\"></xref> routed event.","nodes":[{"pos":[0,83],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.StylusUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.StylusUp\"></xref> routed event."}],"pos":[906225,906309],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[906320,906860],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"pos":[0,66],"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"content":"Occurs when this element gets text in a device-independent manner.","pos":[0,66]}]}],"pos":[907894,907961],"yaml":true},{"content":"> [!IMPORTANT]\n>  This event might already be marked as handled by the internal implementations of composited controls. See Remark below.  \n  \n The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.  \n  \n The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.  \n  \n Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.  \n  \n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_TextInput\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.TextInputEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.  \n  \n-   Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[2,137],"content":"[!IMPORTANT]\n This event might already be marked as handled by the internal implementations of composited controls. See Remark below.","leadings":["","> "],"nodes":[{"content":" This event might already be marked as handled by the internal implementations of composited controls. See Remark below.","pos":[13,133],"nodes":[{"content":"This event might already be marked as handled by the internal implementations of composited controls.","pos":[1,102]},{"content":"See Remark below.","pos":[103,120]}]}]},{"pos":[144,940],"content":"The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.","nodes":[{"content":"The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.","pos":[0,796],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event may already be marked as handled by the internal implementations of composited controls.","pos":[0,140],"source":"The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls."},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is a composited control where the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event is already marked as handled; within its compositing.","pos":[141,330],"source":" For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing."},{"content":"Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.","pos":[331,470]},{"content":"If you use <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph> as the event where you attach handlers for text input, you may receive better results.","pos":[471,617],"source":" If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results."},{"content":"This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.","pos":[618,796]}]}]},{"pos":[947,1276],"content":"The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.","nodes":[{"content":"The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.","pos":[0,329],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.","pos":[0,142],"source":"The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner."},{"content":"The keyboard is the primary means of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>, but speech, handwriting, and other input devices can also raise <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph>.","pos":[143,329],"source":" The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>."}]}]},{"pos":[1283,1429],"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.","nodes":[{"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.","pos":[0,146]}]},{"pos":[1436,2003],"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,567],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph> is inherited as a base element.","pos":[0,305],"source":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.TextInput&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[306,567],"source":" Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[2056,2080],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2101,2117],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2118,2164],"content":"<xref:System.Windows.UIElement.TextInputEvent>","nodes":[]},{"pos":[2169,2185],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2186,2194],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[2199,2207],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2208,2263],"content":"<xref:System.Windows.Input.TextCompositionEventHandler>","nodes":[]},{"pos":[2274,2360],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTextInput&gt;</ph>.","pos":[0,86],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>."}]},{"pos":[2370,2488],"content":"Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes."}]}],"pos":[907972,910487],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.TextInput\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TextInput\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.TextInput\"></xref> routed event."}],"pos":[911581,911666],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[911677,912217],"yaml":true,"extradata":"MT"},{"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"pos":[0,78],"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger touches the screen while the finger is over this element.","pos":[0,78]}]}],"pos":[913252,913331],"yaml":true},{"content":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \n  \n To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \n  \n<a name=\"routedEventInfo_TouchDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.TouchDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.  \n  \n-   Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,382],"content":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","nodes":[{"content":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","pos":[0,382],"nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.","pos":[0,175],"source":"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves."},{"content":"Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.","pos":[176,316],"source":" Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>."},{"content":"The press and hold behavior is equivalent to a mouse right-click.","pos":[317,382]}]}]},{"pos":[389,692],"content":"To cause the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;</ph> attached property to <ph id=\"ph4\">`false`</ph> for this element.","source":"To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element."},{"pos":[745,769],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[790,806],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[807,853],"content":"<xref:System.Windows.UIElement.TouchDownEvent>","nodes":[]},{"pos":[858,874],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[875,883],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[888,896],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[897,979],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[990,1076],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTouchDown&gt;</ph>.","pos":[0,86],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>."}]},{"pos":[1086,1204],"content":"Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[913342,914566],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> routed event."}],"pos":[915669,915754],"yaml":true},{"content":"Occurs when a touch moves from outside to inside the bounds of this element.","nodes":[{"pos":[0,76],"content":"Occurs when a touch moves from outside to inside the bounds of this element.","nodes":[{"content":"Occurs when a touch moves from outside to inside the bounds of this element.","pos":[0,76]}]}],"pos":[916773,916850],"yaml":true},{"content":"This event is always raised, whether or not the touch device is captured to this element.  \n  \n<a name=\"routedEventInfo_TouchEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.TouchEnterEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,89],"content":"This event is always raised, whether or not the touch device is captured to this element.","nodes":[{"content":"This event is always raised, whether or not the touch device is captured to this element.","pos":[0,89]}]},{"pos":[143,167],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[188,204],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[205,252],"content":"<xref:System.Windows.UIElement.TouchEnterEvent>","nodes":[]},{"pos":[257,273],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[274,280],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[285,293],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[294,376],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[387,506],"content":"Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[916861,917383],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.TouchEnter\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.TouchEnter\"></xref> routed event."}],"pos":[918493,918579],"yaml":true},{"content":"Gets all touch devices that are captured to this element.","nodes":[{"pos":[0,57],"content":"Gets all touch devices that are captured to this element.","nodes":[{"content":"Gets all touch devices that are captured to this element.","pos":[0,57]}]}],"pos":[919654,919712],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element.","nodes":[{"pos":[0,114],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are captured to this element.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element."}],"pos":[919956,920071],"yaml":true},{"content":"Gets all touch devices that are captured to this element or any child elements in its visual tree.","nodes":[{"pos":[0,98],"content":"Gets all touch devices that are captured to this element or any child elements in its visual tree.","nodes":[{"content":"Gets all touch devices that are captured to this element or any child elements in its visual tree.","pos":[0,98]}]}],"pos":[921073,921172],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element or any child elements in its visual tree.","nodes":[{"pos":[0,155],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are captured to this element or any child elements in its visual tree.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element or any child elements in its visual tree."}],"pos":[921422,921578],"yaml":true},{"content":"Gets all touch devices that are over this element.","nodes":[{"pos":[0,50],"content":"Gets all touch devices that are over this element.","nodes":[{"content":"Gets all touch devices that are over this element.","pos":[0,50]}]}],"pos":[922574,922625],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element.","nodes":[{"pos":[0,107],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are over this element.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element."}],"pos":[922873,922981],"yaml":true},{"content":"Gets all touch devices that are over this element or any child elements in its visual tree.","nodes":[{"pos":[0,91],"content":"Gets all touch devices that are over this element or any child elements in its visual tree.","nodes":[{"content":"Gets all touch devices that are over this element or any child elements in its visual tree.","pos":[0,91]}]}],"pos":[923927,924019],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element or any child elements in its visual tree.","nodes":[{"pos":[0,148],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are over this element or any child elements in its visual tree.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element or any child elements in its visual tree."}],"pos":[924259,924408],"yaml":true},{"content":"Occurs when a touch moves from inside to outside the bounds of this element.","nodes":[{"pos":[0,76],"content":"Occurs when a touch moves from inside to outside the bounds of this element.","nodes":[{"content":"Occurs when a touch moves from inside to outside the bounds of this element.","pos":[0,76]}]}],"pos":[925337,925414],"yaml":true},{"content":"This event is always raised, whether or not the touch device is captured to this element.  \n  \n<a name=\"routedEventInfo_TouchLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.TouchLeaveEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,89],"content":"This event is always raised, whether or not the touch device is captured to this element.","nodes":[{"content":"This event is always raised, whether or not the touch device is captured to this element.","pos":[0,89]}]},{"pos":[143,167],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[188,204],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[205,252],"content":"<xref:System.Windows.UIElement.TouchLeaveEvent>","nodes":[]},{"pos":[257,273],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[274,280],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[285,293],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[294,376],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[387,506],"content":"Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[925425,925947],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.TouchLeave\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.TouchLeave\"></xref> routed event."}],"pos":[927057,927143],"yaml":true},{"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger moves on the screen while the finger is over this element.","pos":[0,79]}]}],"pos":[928179,928259],"yaml":true},{"content":"<a name=\"routedEventInfo_TouchMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.TouchMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.  \n  \n-   Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[47,71],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[92,108],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[109,155],"content":"<xref:System.Windows.UIElement.TouchMoveEvent>","nodes":[]},{"pos":[160,176],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[177,185],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[190,198],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[199,281],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[292,378],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTouchMove&gt;</ph>.","pos":[0,86],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>."}]},{"pos":[388,506],"content":"Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[928270,928792],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> routed event."}],"pos":[929895,929980],"yaml":true},{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"pos":[0,87],"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","pos":[0,87]}]}],"pos":[931003,931091],"yaml":true},{"content":"<a name=\"routedEventInfo_TouchUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.TouchUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.  \n  \n-   Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[45,69],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[90,106],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[107,151],"content":"<xref:System.Windows.UIElement.TouchUpEvent>","nodes":[]},{"pos":[156,172],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[173,181],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[186,194],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[195,277],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[288,372],"content":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.PreviewTouchUp&gt;</ph>.","pos":[0,84],"source":"The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>."}]},{"pos":[382,498],"content":"Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.OnTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,116],"source":"Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[931102,931616],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> routed event.","nodes":[{"pos":[0,82],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.TouchUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> routed event."}],"pos":[932705,932788],"yaml":true},{"content":"Translates a point relative to this element to coordinates that are relative to the specified element.","nodes":[{"pos":[0,102],"content":"Translates a point relative to this element to coordinates that are relative to the specified element.","nodes":[{"content":"Translates a point relative to this element to coordinates that are relative to the specified element.","pos":[0,102]}]}],"pos":[934047,934150],"yaml":true},{"content":"Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.  \n  \n This method is used for translating hit test point values. Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level. If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.","nodes":[{"pos":[0,165],"content":"Passing <ph id=\"ph1\">`null`</ph> for <ph id=\"ph2\">`relativeTo`</ph> is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.","source":"Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to."},{"pos":[172,480],"content":"This method is used for translating hit test point values. Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level. If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.","nodes":[{"content":"This method is used for translating hit test point values. Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level. If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.","pos":[0,308],"nodes":[{"content":"This method is used for translating hit test point values.","pos":[0,58]},{"content":"Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level.","pos":[59,172]},{"content":"If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.","pos":[173,308]}]}]}],"pos":[934161,934646],"yaml":true,"extradata":"MT"},{"content":"The point value, as relative to this element.","nodes":[{"pos":[0,45],"content":"The point value, as relative to this element.","nodes":[{"content":"The point value, as relative to this element.","pos":[0,45]}]}],"pos":[934863,934909],"yaml":true},{"content":"The element to translate the given point into.","nodes":[{"pos":[0,46],"content":"The element to translate the given point into.","nodes":[{"content":"The element to translate the given point into.","pos":[0,46]}]}],"pos":[934986,935033],"yaml":true},{"content":"A point value, now relative to the target element rather than this source element.","nodes":[{"pos":[0,82],"content":"A point value, now relative to the target element rather than this source element.","nodes":[{"content":"A point value, now relative to the target element rather than this source element.","pos":[0,82]}]}],"pos":[935097,935180],"yaml":true},{"content":"Gets or sets the unique identifier (for localization) for this element. This is a dependency property.","nodes":[{"pos":[0,102],"content":"Gets or sets the unique identifier (for localization) for this element. This is a dependency property.","nodes":[{"content":"Gets or sets the unique identifier (for localization) for this element. This is a dependency property.","pos":[0,102],"nodes":[{"content":"Gets or sets the unique identifier (for localization) for this element.","pos":[0,71]},{"content":"This is a dependency property.","pos":[72,102]}]}]}],"pos":[936073,936176],"yaml":true},{"content":"Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).  \n  \n<a name=\"dependencyPropertyInfo_WindowWindowStyle\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.UidProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,194],"content":"Used by designers to get the <ph id=\"ph1\">`x:Uid`</ph> value (see <bpt id=\"p1\">[</bpt>WPF Globalization and Localization Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md)</ept> for more information).","source":"Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information)."},{"pos":[262,293],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[314,330],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[331,374],"content":"<xref:System.Windows.UIElement.UidProperty>","nodes":[]},{"pos":[379,412],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[413,417],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[936187,936618],"yaml":true,"extradata":"MT"},{"content":"A string that is the unique identifier for this element.","nodes":[{"pos":[0,56],"content":"A string that is the unique identifier for this element.","nodes":[{"content":"A string that is the unique identifier for this element.","pos":[0,56]}]}],"pos":[936730,936787],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.Uid\"></xref> dependency property.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Uid\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.Uid\"></xref> dependency property."}],"pos":[937692,937778],"yaml":true},{"content":"Ensures that all visual child elements of this element are properly updated for layout.","nodes":[{"pos":[0,87],"content":"Ensures that all visual child elements of this element are properly updated for layout.","nodes":[{"content":"Ensures that all visual child elements of this element are properly updated for layout.","pos":[0,87]}]}],"pos":[938849,938937],"yaml":true},{"content":"When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.  \n  \n Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid. However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout. Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree. The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid. You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.","nodes":[{"pos":[0,361],"content":"When you call this method, elements with <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsMeasureValid%2A&gt;</ph><ph id=\"ph2\">`false`</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.IsArrangeValid%2A&gt;</ph><ph id=\"ph4\">`false`</ph> will call element-specific <ph id=\"ph5\">&lt;xref:System.Windows.UIElement.MeasureCore%2A&gt;</ph> and <ph id=\"ph6\">&lt;xref:System.Windows.UIElement.ArrangeCore%2A&gt;</ph> methods, which forces layout update, and all computed sizes will be validated.","source":"When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated."},{"pos":[368,1238],"content":"Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid. However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout. Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree. The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid. You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.","nodes":[{"content":"Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid. However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout. Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree. The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid. You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.","pos":[0,870],"nodes":[{"content":"Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid.","pos":[0,129]},{"content":"However, if layout is invalid in either respect, the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> call will redo the entire layout.","pos":[130,264],"source":" However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout."},{"content":"Therefore, you should avoid calling <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> after each incremental and minor change in the element tree.","pos":[265,409],"source":" Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree."},{"content":"The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid.","pos":[410,628]},{"content":"You should only call <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.UpdateLayout%2A&gt;</ph> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.","pos":[629,870],"source":" You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed."}]}]}],"pos":[938948,940191],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.  This is a dependency property.","nodes":[{"pos":[0,132],"content":"Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.  This is a dependency property.","nodes":[{"content":"Gets or sets the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> visibility of this element.","pos":[0,100],"source":"Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element."},{"content":"This is a dependency property.","pos":[102,132]}]}],"pos":[941195,941328],"yaml":true},{"content":"Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event. However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.  \n  \n Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.  \n  \n When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>. This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0). For details, see <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.  \n  \n<a name=\"dependencyPropertyInfo_Visibility\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.UIElement.VisibilityProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,328],"content":"Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event. However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.","nodes":[{"content":"Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event. However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.","pos":[0,328],"nodes":[{"content":"Setting this property affects the value of <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph>, which in turn may raise the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.IsVisibleChanged&gt;</ph> event.","pos":[0,172],"source":"Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event."},{"content":"However, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.IsVisible%2A&gt;</ph> has other factors that influence it, for instance the visibility settings of parents that contain it.","pos":[173,328],"source":" However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it."}]}]},{"pos":[335,626],"content":"Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.","nodes":[{"content":"Elements where <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> is not <ph id=\"ph2\">&lt;xref:System.Windows.Visibility.Visible&gt;</ph> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.","pos":[0,291],"source":"Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing."}]},{"pos":[633,1295],"content":"When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>. This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0). For details, see <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.","nodes":[{"content":"When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>. This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0). For details, see <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.","pos":[0,662],"nodes":[{"content":"When inherited by <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> or its derived classes, <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph> redefines the default value of this property to be <ph id=\"ph3\">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.","pos":[0,194],"source":"When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>."},{"content":"This has the effect of not running the Measure pass of layout on an initially created <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph>, and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.RenderSize%2A&gt;</ph> returns (0,0).","pos":[195,375],"source":" This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0)."},{"content":"For details, see <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph>.","pos":[376,422],"source":" For details, see <xref:System.Windows.Window>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> also redefines the default value to be <ph id=\"ph2\">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>, with similar resulting behavior for <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.Popup&gt;</ph> and its derived classes.","pos":[423,662],"source":" <xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes."}]}]},{"pos":[1356,1387],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1408,1424],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1425,1475],"content":"<xref:System.Windows.UIElement.VisibilityProperty>","nodes":[]},{"pos":[1480,1513],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1514,1518],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[941339,942875],"yaml":true,"extradata":"MT"},{"content":"A value of the enumeration. The default value is <xref href=\"System.Windows.Visibility.Visible\"></xref>.","nodes":[{"pos":[0,104],"content":"A value of the enumeration. The default value is <xref href=\"System.Windows.Visibility.Visible\"></xref>.","nodes":[{"content":"A value of the enumeration.","pos":[0,27]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Visibility.Visible\"&gt;&lt;/xref&gt;</ph>.","pos":[28,104],"source":" The default value is <xref href=\"System.Windows.Visibility.Visible\"></xref>."}]}],"pos":[943934,944039],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.UIElement.Visibility\"></xref> dependency property.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Visibility\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.UIElement.Visibility\"></xref> dependency property."}],"pos":[945078,945171],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.UIElement\n  commentId: T:System.Windows.UIElement\n  id: UIElement\n  children:\n  - System.Windows.UIElement.#ctor\n  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.AllowDrop\n  - System.Windows.UIElement.AllowDropProperty\n  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.UIElement.AreAnyTouchesCaptured\n  - System.Windows.UIElement.AreAnyTouchesCapturedProperty\n  - System.Windows.UIElement.AreAnyTouchesCapturedWithin\n  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\n  - System.Windows.UIElement.AreAnyTouchesDirectlyOver\n  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\n  - System.Windows.UIElement.AreAnyTouchesOver\n  - System.Windows.UIElement.AreAnyTouchesOverProperty\n  - System.Windows.UIElement.Arrange(System.Windows.Rect)\n  - System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\n  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.UIElement.BitmapEffect\n  - System.Windows.UIElement.BitmapEffectInput\n  - System.Windows.UIElement.BitmapEffectInputProperty\n  - System.Windows.UIElement.BitmapEffectProperty\n  - System.Windows.UIElement.CacheMode\n  - System.Windows.UIElement.CacheModeProperty\n  - System.Windows.UIElement.CaptureMouse\n  - System.Windows.UIElement.CaptureStylus\n  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  - System.Windows.UIElement.Clip\n  - System.Windows.UIElement.ClipProperty\n  - System.Windows.UIElement.ClipToBounds\n  - System.Windows.UIElement.ClipToBoundsProperty\n  - System.Windows.UIElement.CommandBindings\n  - System.Windows.UIElement.DesiredSize\n  - System.Windows.UIElement.DragEnter\n  - System.Windows.UIElement.DragEnterEvent\n  - System.Windows.UIElement.DragLeave\n  - System.Windows.UIElement.DragLeaveEvent\n  - System.Windows.UIElement.DragOver\n  - System.Windows.UIElement.DragOverEvent\n  - System.Windows.UIElement.Drop\n  - System.Windows.UIElement.DropEvent\n  - System.Windows.UIElement.Effect\n  - System.Windows.UIElement.EffectProperty\n  - System.Windows.UIElement.Focus\n  - System.Windows.UIElement.Focusable\n  - System.Windows.UIElement.FocusableChanged\n  - System.Windows.UIElement.FocusableProperty\n  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.UIElement.GetLayoutClip(System.Windows.Size)\n  - System.Windows.UIElement.GetUIParentCore\n  - System.Windows.UIElement.GiveFeedback\n  - System.Windows.UIElement.GiveFeedbackEvent\n  - System.Windows.UIElement.GotFocus\n  - System.Windows.UIElement.GotFocusEvent\n  - System.Windows.UIElement.GotKeyboardFocus\n  - System.Windows.UIElement.GotKeyboardFocusEvent\n  - System.Windows.UIElement.GotMouseCapture\n  - System.Windows.UIElement.GotMouseCaptureEvent\n  - System.Windows.UIElement.GotStylusCapture\n  - System.Windows.UIElement.GotStylusCaptureEvent\n  - System.Windows.UIElement.GotTouchCapture\n  - System.Windows.UIElement.GotTouchCaptureEvent\n  - System.Windows.UIElement.HasAnimatedProperties\n  - System.Windows.UIElement.HasEffectiveKeyboardFocus\n  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)\n  - System.Windows.UIElement.InputBindings\n  - System.Windows.UIElement.InputHitTest(System.Windows.Point)\n  - System.Windows.UIElement.InvalidateArrange\n  - System.Windows.UIElement.InvalidateMeasure\n  - System.Windows.UIElement.InvalidateVisual\n  - System.Windows.UIElement.IsArrangeValid\n  - System.Windows.UIElement.IsEnabled\n  - System.Windows.UIElement.IsEnabledChanged\n  - System.Windows.UIElement.IsEnabledCore\n  - System.Windows.UIElement.IsEnabledProperty\n  - System.Windows.UIElement.IsFocused\n  - System.Windows.UIElement.IsFocusedProperty\n  - System.Windows.UIElement.IsHitTestVisible\n  - System.Windows.UIElement.IsHitTestVisibleChanged\n  - System.Windows.UIElement.IsHitTestVisibleProperty\n  - System.Windows.UIElement.IsInputMethodEnabled\n  - System.Windows.UIElement.IsKeyboardFocused\n  - System.Windows.UIElement.IsKeyboardFocusedChanged\n  - System.Windows.UIElement.IsKeyboardFocusedProperty\n  - System.Windows.UIElement.IsKeyboardFocusWithin\n  - System.Windows.UIElement.IsKeyboardFocusWithinChanged\n  - System.Windows.UIElement.IsKeyboardFocusWithinProperty\n  - System.Windows.UIElement.IsManipulationEnabled\n  - System.Windows.UIElement.IsManipulationEnabledProperty\n  - System.Windows.UIElement.IsMeasureValid\n  - System.Windows.UIElement.IsMouseCaptured\n  - System.Windows.UIElement.IsMouseCapturedChanged\n  - System.Windows.UIElement.IsMouseCapturedProperty\n  - System.Windows.UIElement.IsMouseCaptureWithin\n  - System.Windows.UIElement.IsMouseCaptureWithinChanged\n  - System.Windows.UIElement.IsMouseCaptureWithinProperty\n  - System.Windows.UIElement.IsMouseDirectlyOver\n  - System.Windows.UIElement.IsMouseDirectlyOverChanged\n  - System.Windows.UIElement.IsMouseDirectlyOverProperty\n  - System.Windows.UIElement.IsMouseOver\n  - System.Windows.UIElement.IsMouseOverProperty\n  - System.Windows.UIElement.IsStylusCaptured\n  - System.Windows.UIElement.IsStylusCapturedChanged\n  - System.Windows.UIElement.IsStylusCapturedProperty\n  - System.Windows.UIElement.IsStylusCaptureWithin\n  - System.Windows.UIElement.IsStylusCaptureWithinChanged\n  - System.Windows.UIElement.IsStylusCaptureWithinProperty\n  - System.Windows.UIElement.IsStylusDirectlyOver\n  - System.Windows.UIElement.IsStylusDirectlyOverChanged\n  - System.Windows.UIElement.IsStylusDirectlyOverProperty\n  - System.Windows.UIElement.IsStylusOver\n  - System.Windows.UIElement.IsStylusOverProperty\n  - System.Windows.UIElement.IsVisible\n  - System.Windows.UIElement.IsVisibleChanged\n  - System.Windows.UIElement.IsVisibleProperty\n  - System.Windows.UIElement.KeyDown\n  - System.Windows.UIElement.KeyDownEvent\n  - System.Windows.UIElement.KeyUp\n  - System.Windows.UIElement.KeyUpEvent\n  - System.Windows.UIElement.LayoutUpdated\n  - System.Windows.UIElement.LostFocus\n  - System.Windows.UIElement.LostFocusEvent\n  - System.Windows.UIElement.LostKeyboardFocus\n  - System.Windows.UIElement.LostKeyboardFocusEvent\n  - System.Windows.UIElement.LostMouseCapture\n  - System.Windows.UIElement.LostMouseCaptureEvent\n  - System.Windows.UIElement.LostStylusCapture\n  - System.Windows.UIElement.LostStylusCaptureEvent\n  - System.Windows.UIElement.LostTouchCapture\n  - System.Windows.UIElement.LostTouchCaptureEvent\n  - System.Windows.UIElement.ManipulationBoundaryFeedback\n  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\n  - System.Windows.UIElement.ManipulationCompleted\n  - System.Windows.UIElement.ManipulationCompletedEvent\n  - System.Windows.UIElement.ManipulationDelta\n  - System.Windows.UIElement.ManipulationDeltaEvent\n  - System.Windows.UIElement.ManipulationInertiaStarting\n  - System.Windows.UIElement.ManipulationInertiaStartingEvent\n  - System.Windows.UIElement.ManipulationStarted\n  - System.Windows.UIElement.ManipulationStartedEvent\n  - System.Windows.UIElement.ManipulationStarting\n  - System.Windows.UIElement.ManipulationStartingEvent\n  - System.Windows.UIElement.Measure(System.Windows.Size)\n  - System.Windows.UIElement.MeasureCore(System.Windows.Size)\n  - System.Windows.UIElement.MouseDown\n  - System.Windows.UIElement.MouseDownEvent\n  - System.Windows.UIElement.MouseEnter\n  - System.Windows.UIElement.MouseEnterEvent\n  - System.Windows.UIElement.MouseLeave\n  - System.Windows.UIElement.MouseLeaveEvent\n  - System.Windows.UIElement.MouseLeftButtonDown\n  - System.Windows.UIElement.MouseLeftButtonDownEvent\n  - System.Windows.UIElement.MouseLeftButtonUp\n  - System.Windows.UIElement.MouseLeftButtonUpEvent\n  - System.Windows.UIElement.MouseMove\n  - System.Windows.UIElement.MouseMoveEvent\n  - System.Windows.UIElement.MouseRightButtonDown\n  - System.Windows.UIElement.MouseRightButtonDownEvent\n  - System.Windows.UIElement.MouseRightButtonUp\n  - System.Windows.UIElement.MouseRightButtonUpEvent\n  - System.Windows.UIElement.MouseUp\n  - System.Windows.UIElement.MouseUpEvent\n  - System.Windows.UIElement.MouseWheel\n  - System.Windows.UIElement.MouseWheelEvent\n  - System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)\n  - System.Windows.UIElement.OnCreateAutomationPeer\n  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\n  - System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)\n  - System.Windows.UIElement.Opacity\n  - System.Windows.UIElement.OpacityMask\n  - System.Windows.UIElement.OpacityMaskProperty\n  - System.Windows.UIElement.OpacityProperty\n  - System.Windows.UIElement.PersistId\n  - System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  - System.Windows.UIElement.PreviewDragEnter\n  - System.Windows.UIElement.PreviewDragEnterEvent\n  - System.Windows.UIElement.PreviewDragLeave\n  - System.Windows.UIElement.PreviewDragLeaveEvent\n  - System.Windows.UIElement.PreviewDragOver\n  - System.Windows.UIElement.PreviewDragOverEvent\n  - System.Windows.UIElement.PreviewDrop\n  - System.Windows.UIElement.PreviewDropEvent\n  - System.Windows.UIElement.PreviewGiveFeedback\n  - System.Windows.UIElement.PreviewGiveFeedbackEvent\n  - System.Windows.UIElement.PreviewGotKeyboardFocus\n  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent\n  - System.Windows.UIElement.PreviewKeyDown\n  - System.Windows.UIElement.PreviewKeyDownEvent\n  - System.Windows.UIElement.PreviewKeyUp\n  - System.Windows.UIElement.PreviewKeyUpEvent\n  - System.Windows.UIElement.PreviewLostKeyboardFocus\n  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent\n  - System.Windows.UIElement.PreviewMouseDown\n  - System.Windows.UIElement.PreviewMouseDownEvent\n  - System.Windows.UIElement.PreviewMouseLeftButtonDown\n  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\n  - System.Windows.UIElement.PreviewMouseLeftButtonUp\n  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\n  - System.Windows.UIElement.PreviewMouseMove\n  - System.Windows.UIElement.PreviewMouseMoveEvent\n  - System.Windows.UIElement.PreviewMouseRightButtonDown\n  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent\n  - System.Windows.UIElement.PreviewMouseRightButtonUp\n  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent\n  - System.Windows.UIElement.PreviewMouseUp\n  - System.Windows.UIElement.PreviewMouseUpEvent\n  - System.Windows.UIElement.PreviewMouseWheel\n  - System.Windows.UIElement.PreviewMouseWheelEvent\n  - System.Windows.UIElement.PreviewQueryContinueDrag\n  - System.Windows.UIElement.PreviewQueryContinueDragEvent\n  - System.Windows.UIElement.PreviewStylusButtonDown\n  - System.Windows.UIElement.PreviewStylusButtonDownEvent\n  - System.Windows.UIElement.PreviewStylusButtonUp\n  - System.Windows.UIElement.PreviewStylusButtonUpEvent\n  - System.Windows.UIElement.PreviewStylusDown\n  - System.Windows.UIElement.PreviewStylusDownEvent\n  - System.Windows.UIElement.PreviewStylusInAirMove\n  - System.Windows.UIElement.PreviewStylusInAirMoveEvent\n  - System.Windows.UIElement.PreviewStylusInRange\n  - System.Windows.UIElement.PreviewStylusInRangeEvent\n  - System.Windows.UIElement.PreviewStylusMove\n  - System.Windows.UIElement.PreviewStylusMoveEvent\n  - System.Windows.UIElement.PreviewStylusOutOfRange\n  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent\n  - System.Windows.UIElement.PreviewStylusSystemGesture\n  - System.Windows.UIElement.PreviewStylusSystemGestureEvent\n  - System.Windows.UIElement.PreviewStylusUp\n  - System.Windows.UIElement.PreviewStylusUpEvent\n  - System.Windows.UIElement.PreviewTextInput\n  - System.Windows.UIElement.PreviewTextInputEvent\n  - System.Windows.UIElement.PreviewTouchDown\n  - System.Windows.UIElement.PreviewTouchDownEvent\n  - System.Windows.UIElement.PreviewTouchMove\n  - System.Windows.UIElement.PreviewTouchMoveEvent\n  - System.Windows.UIElement.PreviewTouchUp\n  - System.Windows.UIElement.PreviewTouchUpEvent\n  - System.Windows.UIElement.QueryContinueDrag\n  - System.Windows.UIElement.QueryContinueDragEvent\n  - System.Windows.UIElement.QueryCursor\n  - System.Windows.UIElement.QueryCursorEvent\n  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.ReleaseAllTouchCaptures\n  - System.Windows.UIElement.ReleaseMouseCapture\n  - System.Windows.UIElement.ReleaseStylusCapture\n  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.UIElement.RenderSize\n  - System.Windows.UIElement.RenderTransform\n  - System.Windows.UIElement.RenderTransformOrigin\n  - System.Windows.UIElement.RenderTransformOriginProperty\n  - System.Windows.UIElement.RenderTransformProperty\n  - System.Windows.UIElement.ShouldSerializeCommandBindings\n  - System.Windows.UIElement.ShouldSerializeInputBindings\n  - System.Windows.UIElement.SnapsToDevicePixels\n  - System.Windows.UIElement.SnapsToDevicePixelsProperty\n  - System.Windows.UIElement.StylusButtonDown\n  - System.Windows.UIElement.StylusButtonDownEvent\n  - System.Windows.UIElement.StylusButtonUp\n  - System.Windows.UIElement.StylusButtonUpEvent\n  - System.Windows.UIElement.StylusDown\n  - System.Windows.UIElement.StylusDownEvent\n  - System.Windows.UIElement.StylusEnter\n  - System.Windows.UIElement.StylusEnterEvent\n  - System.Windows.UIElement.StylusInAirMove\n  - System.Windows.UIElement.StylusInAirMoveEvent\n  - System.Windows.UIElement.StylusInRange\n  - System.Windows.UIElement.StylusInRangeEvent\n  - System.Windows.UIElement.StylusLeave\n  - System.Windows.UIElement.StylusLeaveEvent\n  - System.Windows.UIElement.StylusMove\n  - System.Windows.UIElement.StylusMoveEvent\n  - System.Windows.UIElement.StylusOutOfRange\n  - System.Windows.UIElement.StylusOutOfRangeEvent\n  - System.Windows.UIElement.StylusPlugIns\n  - System.Windows.UIElement.StylusSystemGesture\n  - System.Windows.UIElement.StylusSystemGestureEvent\n  - System.Windows.UIElement.StylusUp\n  - System.Windows.UIElement.StylusUpEvent\n  - System.Windows.UIElement.TextInput\n  - System.Windows.UIElement.TextInputEvent\n  - System.Windows.UIElement.TouchDown\n  - System.Windows.UIElement.TouchDownEvent\n  - System.Windows.UIElement.TouchEnter\n  - System.Windows.UIElement.TouchEnterEvent\n  - System.Windows.UIElement.TouchesCaptured\n  - System.Windows.UIElement.TouchesCapturedWithin\n  - System.Windows.UIElement.TouchesDirectlyOver\n  - System.Windows.UIElement.TouchesOver\n  - System.Windows.UIElement.TouchLeave\n  - System.Windows.UIElement.TouchLeaveEvent\n  - System.Windows.UIElement.TouchMove\n  - System.Windows.UIElement.TouchMoveEvent\n  - System.Windows.UIElement.TouchUp\n  - System.Windows.UIElement.TouchUpEvent\n  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  - System.Windows.UIElement.Uid\n  - System.Windows.UIElement.UidProperty\n  - System.Windows.UIElement.UpdateLayout\n  - System.Windows.UIElement.Visibility\n  - System.Windows.UIElement.VisibilityProperty\n  langs:\n  - csharp\n  name: UIElement\n  nameWithType: UIElement\n  fullName: System.Windows.UIElement\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: <xref href=\"System.Windows.UIElement\"></xref> is a base class for WPF core level implementations building on Windows Presentation Foundation (WPF) elements and basic presentation characteristics.\n  remarks: \"<xref:System.Windows.UIElement> provides a starting point for element layout characteristics, and also exposes virtual methods that derived classes can override, which can influence the layout rendering behavior of the element and its child elements.  \\n  \\n Much of the input and focusing behavior for elements in general is also defined in the <xref:System.Windows.UIElement> class. This includes the events for keyboard, mouse and stylus input, and related status properties. Many of these events are routed events, and many of the input-related events have both a bubbling routing version as well as a tunneling version of the event. These paired events are typically the events of greatest interest to control authors.  \\n  \\n <xref:System.Windows.UIElement> also includes [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that relate to the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] event model, including methods that can raise specified routed events that are sourced from an element instance.  \\n  \\n In terms of architecture, <xref:System.Windows.UIElement> can be considered roughly equivalent to a window handle in [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] programming, or an Element in [!INCLUDE[TLA#tla_dhtml](~/includes/tlasharptla-dhtml-md.md)] programming. <xref:System.Windows.UIElement> is a base element at the WPF core level.  \\n  \\n A <xref:System.Windows.UIElement> has the following capabilities that are specifically defined by the <xref:System.Windows.UIElement> class:  \\n  \\n-   Can render as a child element (<xref:System.Windows.UIElement> derives from <xref:System.Windows.Media.Visual>, a high level graphics class)  \\n  \\n-   Contains logic that is used to size and position possible child elements of a <xref:System.Windows.UIElement> (when interpreted by a layout system)  \\n  \\n-   Can respond to user input (including control of where input is getting sent to via their handling of event routing, or routing of commands)  \\n  \\n-   Can raise routed events that travel a route through the logical element tree  \\n  \\n-   Supports some aspects of the animation system  \\n  \\n <xref:System.Windows.FrameworkElement> is the WPF framework-level implementation class that builds on <xref:System.Windows.UIElement>, and adds specific interactions with the WPF framework level. <xref:System.Windows.FrameworkElement> adds and defines the following capabilities:  \\n  \\n-   Additional framework-specific layout characteristics  \\n  \\n-   Support for richer metadata reporting on properties  \\n  \\n-   Class-specific implementation of certain input base classes and their attached properties or attached events  \\n  \\n-   Style support  \\n  \\n-   Further animation support  \\n  \\n Another related class is <xref:System.Windows.ContentElement>. The <xref:System.Windows.ContentElement> class implements many of the same members as does <xref:System.Windows.UIElement>; the difference between these two classes has to do with their intended place in the overall content model. A <xref:System.Windows.UIElement> derived class typically defines a relatively rigid content model, meaning that there are restrictions on what elements may be child elements in markup. There might be capacity for taking less restrictive child content in a <xref:System.Windows.UIElement>, but that capacity is typically centralized in designated content properties. A <xref:System.Windows.ContentElement> derived class is typically not as restrictive about content, to support scenarios such as flow-format documents.  \\n  \\n> [!IMPORTANT]\\n>  <xref:System.Windows.UIElement.Visibility%2A> state affects all input handling by that element. Elements that are not visible do not participate in hit testing and do not receive input events, even if the mouse is over the bounds where the element would be if were visible.\"\n  syntax:\n    content: >-\n      [System.Windows.Markup.UidProperty(\"Uid\")]\n\n      public class UIElement : System.Windows.Media.Visual, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Media.Visual\n  derivedClasses:\n  - System.Windows.FrameworkElement\n  implements:\n  - System.Windows.IInputElement\n  - System.Windows.Media.Animation.IAnimatable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.GetVisualChild(System.Int32)\n  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)\n  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)\n  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)\n  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.VisualBitmapEffect\n  - System.Windows.Media.Visual.VisualBitmapEffectInput\n  - System.Windows.Media.Visual.VisualBitmapScalingMode\n  - System.Windows.Media.Visual.VisualCacheMode\n  - System.Windows.Media.Visual.VisualChildrenCount\n  - System.Windows.Media.Visual.VisualClearTypeHint\n  - System.Windows.Media.Visual.VisualClip\n  - System.Windows.Media.Visual.VisualEdgeMode\n  - System.Windows.Media.Visual.VisualEffect\n  - System.Windows.Media.Visual.VisualOffset\n  - System.Windows.Media.Visual.VisualOpacity\n  - System.Windows.Media.Visual.VisualOpacityMask\n  - System.Windows.Media.Visual.VisualParent\n  - System.Windows.Media.Visual.VisualScrollableAreaClip\n  - System.Windows.Media.Visual.VisualTextHintingMode\n  - System.Windows.Media.Visual.VisualTextRenderingMode\n  - System.Windows.Media.Visual.VisualTransform\n  - System.Windows.Media.Visual.VisualXSnappingGuidelines\n  - System.Windows.Media.Visual.VisualYSnappingGuidelines\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  attributes:\n  - type: System.Windows.Markup.UidPropertyAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.#ctor\n  commentId: M:System.Windows.UIElement.#ctor\n  id: '#ctor'\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: UIElement()\n  nameWithType: UIElement.UIElement()\n  fullName: UIElement.UIElement()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.UIElement\"></xref> class.\n  remarks: Creating a new instance that is actually of type <xref:System.Windows.UIElement> is uncommon in application code, because <xref:System.Windows.UIElement> is a base element. See [Base Elements Overview](~/docs/framework/wpf/advanced/base-elements-overview.md).\n  syntax:\n    content: public UIElement ();\n    parameters: []\n  overload: System.Windows.UIElement.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  commentId: M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AddHandler(RoutedEvent, Delegate)\n  nameWithType: UIElement.AddHandler(RoutedEvent, Delegate)\n  fullName: UIElement.AddHandler(RoutedEvent, Delegate)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.\n  remarks: \"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \\n  \\n You typically use this method to provide the implementation of the \\\"add\\\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.\"\n  syntax:\n    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);\n    parameters:\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: An identifier for the routed event to be handled.\n    - id: handler\n      type: System.Delegate\n      description: A reference to the handler implementation.\n  overload: System.Windows.UIElement.AddHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  commentId: M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AddHandler(RoutedEvent, Delegate, Boolean)\n  nameWithType: UIElement.AddHandler(RoutedEvent, Delegate, Boolean)\n  fullName: UIElement.AddHandler(RoutedEvent, Delegate, Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.\n  remarks: \"Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.  \\n  \\n Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.UIElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> instead.  \\n  \\n You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \\n  \\n You typically use this method to provide the implementation of the \\\"add\\\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.\"\n  example:\n  - \"The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \\n  \\n [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]\\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]\"\n  syntax:\n    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);\n    parameters:\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: An identifier for the routed event to be handled.\n    - id: handler\n      type: System.Delegate\n      description: A reference to the handler implementation.\n    - id: handledEventsToo\n      type: System.Boolean\n      description: \"`true` to register the handler such that it is invoked even when  the routed event is marked handled in its event data; `false` to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.  \\n  \\n The default is `false`.  \\n  \\n Do not routinely ask to rehandle a routed event.\"\n  overload: System.Windows.UIElement.AddHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AddToEventRoute(EventRoute, RoutedEventArgs)\n  nameWithType: UIElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n  fullName: UIElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds handlers to the specified <xref href=\"System.Windows.EventRoute\"></xref> for the current <xref href=\"System.Windows.UIElement\"></xref> event handler collection.\n  remarks: This method can be used by content host elements (either those that implement <xref:System.Windows.IContentHost> or those that don't) to add handlers for child elements to the <xref:System.Windows.EventRoute>. Ordinarily, this is not required for <xref:System.Windows.UIElement>, because handlers are automatically added for all elements found in a completed logical tree. However, in some cases where <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are mixed in templated trees, intervening elements that came from the template need to be added to a route. Both <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> support a version of this method.\n  syntax:\n    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: route\n      type: System.Windows.EventRoute\n      description: The event route that handlers are added to.\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: The event data that is used to add the handlers. This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the event data to create the handlers.\n  overload: System.Windows.UIElement.AddToEventRoute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.AllowDrop\n  commentId: P:System.Windows.UIElement.AllowDrop\n  id: AllowDrop\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AllowDrop\n  nameWithType: UIElement.AllowDrop\n  fullName: UIElement.AllowDrop\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value indicating whether this element can be used as the target of a drag-and-drop operation.  This is a dependency property.\n  remarks: \"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.UIElement.AllowDrop%2A> to `true`. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.UIElement> or any other base element class. Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior. For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  \\n  \\n <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property in its implementation. Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from the parent element will be assigned to all previously unassigned child elements by the property system. In practice this means that you can specify whether to allow drop operations at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.  \\n  \\n<a name=\\\"dependencyPropertyInfo_AllowDrop\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.AllowDropProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following markup example sets the <xref:System.Windows.UIElement.AllowDrop%2A> property `true` using an attribute on a <xref:System.Windows.Controls.TextBox>, as well as setting some other related properties that in aggregate enable that <xref:System.Windows.Controls.TextBox> to be the target of a multiline text data object when it is dragged in. For the complete sample, see [Load a Dropped File Sample](http://msdn.microsoft.com/en-us/be90d645-dd61-4f53-93bb-87902d086ef7).  \\n  \\n [!code-xml[DragDrop_DropOpenTextFile#UIElementAllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/DragDrop_DropOpenTextFile/CS/window1.xaml#uielementallowdrop)]\"\n  syntax:\n    content: public bool AllowDrop { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`. The default value is `false`.'\n  overload: System.Windows.UIElement.AllowDrop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AllowDropProperty\n  commentId: F:System.Windows.UIElement.AllowDropProperty\n  id: AllowDropProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AllowDropProperty\n  nameWithType: UIElement.AllowDropProperty\n  fullName: UIElement.AllowDropProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.AllowDrop\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  commentId: M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock)\n  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  fullName: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.\n  remarks: To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.\n  example:\n  - \"In the following example, a <xref:System.Windows.Shapes.Rectangle> `myAnimatedRectangle` has a particular timing animation applied to it by calling <xref:System.Windows.UIElement.ApplyAnimationClock%2A> .  \\n  \\n [!code-csharp[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/ClockControllerSpeedRatioExample.cs#uielementapplyanimationclock)]\\n [!code-vb[timingbehaviors_procedural_snip#UIElementApplyAnimationClock](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/clockcontrollerspeedratioexample.vb#uielementapplyanimationclock)]\"\n  syntax:\n    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The identifier for the property to animate.\n    - id: clock\n      type: System.Windows.Media.Animation.AnimationClock\n      description: The animation clock that controls and declares the animation.\n  overload: System.Windows.UIElement.ApplyAnimationClock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  commentId: M:System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  fullName: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.\n  remarks: To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.\n  syntax:\n    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The property to animate.\n    - id: clock\n      type: System.Windows.Media.Animation.AnimationClock\n      description: The animation clock that controls and declares the animation.\n    - id: handoffBehavior\n      type: System.Windows.Media.Animation.HandoffBehavior\n      description: A value of the enumeration. The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one.\n  overload: System.Windows.UIElement.ApplyAnimationClock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AreAnyTouchesCaptured\n  commentId: P:System.Windows.UIElement.AreAnyTouchesCaptured\n  id: AreAnyTouchesCaptured\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCaptured\n  nameWithType: UIElement.AreAnyTouchesCaptured\n  fullName: UIElement.AreAnyTouchesCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is captured to this element.\n  syntax:\n    content: public bool AreAnyTouchesCaptured { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is captured to this element; otherwise, `false`.'\n  overload: System.Windows.UIElement.AreAnyTouchesCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty\n  commentId: F:System.Windows.UIElement.AreAnyTouchesCapturedProperty\n  id: AreAnyTouchesCapturedProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCapturedProperty\n  nameWithType: UIElement.AreAnyTouchesCapturedProperty\n  fullName: UIElement.AreAnyTouchesCapturedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesCaptured\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin\n  commentId: P:System.Windows.UIElement.AreAnyTouchesCapturedWithin\n  id: AreAnyTouchesCapturedWithin\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCapturedWithin\n  nameWithType: UIElement.AreAnyTouchesCapturedWithin\n  fullName: UIElement.AreAnyTouchesCapturedWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.\n  syntax:\n    content: public bool AreAnyTouchesCapturedWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is captured to this element or any child elements in its visual tree; otherwise, `false`.'\n  overload: System.Windows.UIElement.AreAnyTouchesCapturedWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\n  commentId: F:System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\n  id: AreAnyTouchesCapturedWithinProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCapturedWithinProperty\n  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty\n  fullName: UIElement.AreAnyTouchesCapturedWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesCapturedWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver\n  commentId: P:System.Windows.UIElement.AreAnyTouchesDirectlyOver\n  id: AreAnyTouchesDirectlyOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesDirectlyOver\n  nameWithType: UIElement.AreAnyTouchesDirectlyOver\n  fullName: UIElement.AreAnyTouchesDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is pressed over this element.\n  syntax:\n    content: public bool AreAnyTouchesDirectlyOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is pressed over this element; otherwise, `false`.'\n  overload: System.Windows.UIElement.AreAnyTouchesDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\n  commentId: F:System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\n  id: AreAnyTouchesDirectlyOverProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesDirectlyOverProperty\n  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty\n  fullName: UIElement.AreAnyTouchesDirectlyOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesDirectlyOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.AreAnyTouchesOver\n  commentId: P:System.Windows.UIElement.AreAnyTouchesOver\n  id: AreAnyTouchesOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesOver\n  nameWithType: UIElement.AreAnyTouchesOver\n  fullName: UIElement.AreAnyTouchesOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.\n  syntax:\n    content: public bool AreAnyTouchesOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, `false`.'\n  overload: System.Windows.UIElement.AreAnyTouchesOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.AreAnyTouchesOverProperty\n  commentId: F:System.Windows.UIElement.AreAnyTouchesOverProperty\n  id: AreAnyTouchesOverProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: AreAnyTouchesOverProperty\n  nameWithType: UIElement.AreAnyTouchesOverProperty\n  fullName: UIElement.AreAnyTouchesOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.AreAnyTouchesOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)\n  commentId: M:System.Windows.UIElement.Arrange(System.Windows.Rect)\n  id: Arrange(System.Windows.Rect)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Arrange(Rect)\n  nameWithType: UIElement.Arrange(Rect)\n  fullName: UIElement.Arrange(Rect)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Positions child elements and determines a size for a <xref href=\"System.Windows.UIElement\"></xref>. Parent elements call this method from their <xref href=\"System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\"></xref> implementation (or a WPF framework-level equivalent) to form a recursive layout update. This method constitutes the second pass of a layout update.\n  remarks: \"For WPF framework-level element deriving scenarios, behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override the <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation in your class. Your <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.FrameworkElement.ArrangeOverride%2A> on each child element, if it has child elements.  \\n  \\n For WPF core-level element deriving scenarios, the behavior for <xref:System.Windows.UIElement.Arrange%2A> should not (and cannot, unless you shadow) be changed. Instead, you should override <xref:System.Windows.UIElement.ArrangeCore%2A> in your class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation is called internally by <xref:System.Windows.UIElement.Arrange%2A> as part of default WPF framework-level layout operations. However, this assumes you are using WPF framework-level layout and its layout system, which is often not the case if you are specifically deriving elements at the WPF core-level from the <xref:System.Windows.UIElement> base element class. Your <xref:System.Windows.UIElement.ArrangeCore%2A> implementation should also call <xref:System.Windows.UIElement.Arrange%2A> on each child element, if it has child elements. Note that the WPF core-level scenario implies that you are not using a <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>.  \\n  \\n Computation of WPF framework-level layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] consists of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call. During the <xref:System.Windows.UIElement.Measure%2A> call, the layout system determines an element's size requirements using a provided <xref:System.Windows.Size> (`availableSize`) argument. During the <xref:System.Windows.UIElement.Arrange%2A> call, the layout system finalizes the size and position of an element's bounding box.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).  \\n  \\n `availableSize` can be any number from zero to infinity. Elements to be laid out return the minimum <xref:System.Windows.Size> they require through the `availableSize` parameter.  \\n  \\n When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.  \\n  \\n Layout updates generally occur asynchronously (at a time determined by the layout system). An element might not immediately reflect changes to properties that affect element sizing (such as <xref:System.Windows.FrameworkElement.Width%2A>).  \\n  \\n> [!NOTE]\\n>  Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method; however, calling this function is not recommended, as it is usually unnecessary and can cause poor performance. In many situations where calling <xref:System.Windows.UIElement.UpdateLayout%2A> might be appropriate, the layout system will probably already be processing updates. The layout system can process layout changes in a manner that can optimize all necessary updates as part of a package.  \\n  \\n The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree. Elements higher in the tree are at the top of the queue, in order to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already valid.  \\n  \\n When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.\"\n  syntax:\n    content: public void Arrange (System.Windows.Rect finalRect);\n    parameters:\n    - id: finalRect\n      type: System.Windows.Rect\n      description: The final size that the parent computes for the child element, provided as a <xref href=\"System.Windows.Rect\"></xref> instance.\n  overload: System.Windows.UIElement.Arrange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\n  commentId: M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\n  id: ArrangeCore(System.Windows.Rect)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ArrangeCore(Rect)\n  nameWithType: UIElement.ArrangeCore(Rect)\n  fullName: UIElement.ArrangeCore(Rect)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Defines the template for WPF core-level arrange layout definition.\n  remarks: >-\n    > [!NOTE]\n\n    >  Overriding this method is only appropriate if you are deriving at the WPF core-level, and you are not using the WPF framework-level layout system and <xref:System.Windows.FrameworkElement> derived class, because <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.FrameworkElement.ArrangeCore%2A>. If you are using the WPF framework-level layout system, the appropriate method to override for class-specific layout arrange behavior is <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.\n  example:\n  - \"<xref:System.Windows.UIElement.ArrangeCore%2A> implementations should call the base implementation to return a size, then call the <xref:System.Windows.UIElement.Arrange%2A> method of each visible child element, and reconcile the sizes returned by these <xref:System.Windows.UIElement.Arrange%2A> calls with the size of the base implementation. The logic for the reconciliation aspect of a <xref:System.Windows.UIElement.ArrangeCore%2A> implementation might vary, depending on the layout characteristics of your element. In the following example template, `VisualChildren` is a hypothetical property that your element might define to help enumerate its content; <xref:System.Windows.UIElement> does not define content collections at this level, the WPF framework-level architecture defers content behavior to derived elements such as specific controls or control base classes.  \\n  \\n [!code-csharp[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementarrangeoverride)]\\n [!code-vb[CorePseudocode#UIElementArrangeOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementarrangeoverride)]\"\n  syntax:\n    content: protected virtual void ArrangeCore (System.Windows.Rect finalRect);\n    parameters:\n    - id: finalRect\n      type: System.Windows.Rect\n      description: The final area within the parent that element should use to arrange itself and its child elements.\n  overload: System.Windows.UIElement.ArrangeCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  commentId: M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: BeginAnimation(DependencyProperty, AnimationTimeline)\n  nameWithType: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n  fullName: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Starts an animation for a specified animated property on this element.\n  remarks: \"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \\n  \\n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \\n  \\n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.\"\n  example:\n  - \"The following example creates an animation, assigns it, and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> to start it.  \\n  \\n [!code-csharp[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#beginanimation)]\\n [!code-vb[timingbehaviors_procedural_snip#BeginAnimation](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#beginanimation)]\"\n  syntax:\n    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The property to animate, which is specified as a dependency property identifier.\n    - id: animation\n      type: System.Windows.Media.Animation.AnimationTimeline\n      description: The timeline of the animation to start.\n  overload: System.Windows.UIElement.BeginAnimation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  commentId: M:System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  nameWithType: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  fullName: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.\n  remarks: \"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \\n  \\n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \\n  \\n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.\"\n  example:\n  - \"The following example implements a handler that obtains an existing animation from a resource and then calls <xref:System.Windows.UIElement.BeginAnimation%2A> with a specified handoff behavior.  \\n  \\n [!code-csharp[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/csharp/VS_Snippets_Wpf/BrushesIntroduction/CSharp/SampleViewer.xaml.cs#beginanimationhandoff)]\\n [!code-vb[BrushesIntroduction#BeginAnimationHandoff](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BrushesIntroduction/visualbasic/sampleviewer.xaml.vb#beginanimationhandoff)]\"\n  syntax:\n    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The property to animate, which is specified as the dependency property identifier.\n    - id: animation\n      type: System.Windows.Media.Animation.AnimationTimeline\n      description: The timeline of the animation to be applied.\n    - id: handoffBehavior\n      type: System.Windows.Media.Animation.HandoffBehavior\n      description: A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.\n  overload: System.Windows.UIElement.BeginAnimation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.BitmapEffect\n  commentId: P:System.Windows.UIElement.BitmapEffect\n  id: BitmapEffect\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: BitmapEffect\n  nameWithType: UIElement.BitmapEffect\n  fullName: UIElement.BitmapEffect\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.\n  remarks: \"<xref:System.Windows.Media.Effects.BitmapEffect> is an abstract type, therefore the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage requires an implemented derived class of <xref:System.Windows.Media.Effects.BitmapEffect>, such as <xref:System.Windows.Media.Effects.OuterGlowBitmapEffect>. Note that one implemented derived class is a collection type that allows you to specify more than one sequential <xref:System.Windows.Media.Effects.BitmapEffect>, using a nested tag syntax.  \\n  \\n No existing derived class of <xref:System.Windows.Media.Effects.BitmapEffect> supports a type converter, so the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax that you use for this property is generally property element syntax.  \\n  \\n<a name=\\\"dependencyPropertyInfo_BitmapEffect\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.BitmapEffectProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example sets a bitmap effect, using <xref:System.Windows.Media.Effects.BlurBitmapEffect>.  \\n  \\n [!code-csharp[EffectsGallery_snip#CodeBehindBlurCodeBehindExampleInline](~/samples/snippets/csharp/VS_Snippets_Wpf/EffectsGallery_snip/CSharp/blurcodebehindexample.xaml.cs#codebehindblurcodebehindexampleinline)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      public System.Windows.Media.Effects.BitmapEffect BitmapEffect { get; set; }\n    return:\n      type: System.Windows.Media.Effects.BitmapEffect\n      description: The bitmap effect to apply.\n  overload: System.Windows.UIElement.BitmapEffect*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.BitmapEffectInput\n  commentId: P:System.Windows.UIElement.BitmapEffectInput\n  id: BitmapEffectInput\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: BitmapEffectInput\n  nameWithType: UIElement.BitmapEffectInput\n  fullName: UIElement.BitmapEffectInput\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets an input source for the bitmap effect that applies directly to the rendered content for this element.  This is a dependency property.\n  remarks: \"<a name=\\\"dependencyPropertyInfo_BitmapEffectInput\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.BitmapEffectInputProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      public System.Windows.Media.Effects.BitmapEffectInput BitmapEffectInput { get; set; }\n    return:\n      type: System.Windows.Media.Effects.BitmapEffectInput\n      description: The source for bitmap effects.\n  overload: System.Windows.UIElement.BitmapEffectInput*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.BitmapEffectInputProperty\n  commentId: F:System.Windows.UIElement.BitmapEffectInputProperty\n  id: BitmapEffectInputProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: BitmapEffectInputProperty\n  nameWithType: UIElement.BitmapEffectInputProperty\n  fullName: UIElement.BitmapEffectInputProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.BitmapEffectInput\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty BitmapEffectInputProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.BitmapEffectProperty\n  commentId: F:System.Windows.UIElement.BitmapEffectProperty\n  id: BitmapEffectProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: BitmapEffectProperty\n  nameWithType: UIElement.BitmapEffectProperty\n  fullName: UIElement.BitmapEffectProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.BitmapEffect\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty BitmapEffectProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.CacheMode\n  commentId: P:System.Windows.UIElement.CacheMode\n  id: CacheMode\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: CacheMode\n  nameWithType: UIElement.CacheMode\n  fullName: UIElement.CacheMode\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a cached representation of the <xref href=\"System.Windows.UIElement\"></xref>.\n  remarks: Set the <xref:System.Windows.UIElement.CacheMode%2A> property when you need to increase performance for content that is time consuming to render. For more information, see <xref:System.Windows.Media.BitmapCache>.\n  syntax:\n    content: public System.Windows.Media.CacheMode CacheMode { get; set; }\n    return:\n      type: System.Windows.Media.CacheMode\n      description: A <xref href=\"System.Windows.Media.CacheMode\"></xref> that holds a cached representation of the <xref href=\"System.Windows.UIElement\"></xref>.\n  overload: System.Windows.UIElement.CacheMode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.CacheModeProperty\n  commentId: F:System.Windows.UIElement.CacheModeProperty\n  id: CacheModeProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: CacheModeProperty\n  nameWithType: UIElement.CacheModeProperty\n  fullName: UIElement.CacheModeProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.CacheMode\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty CacheModeProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.CaptureMouse\n  commentId: M:System.Windows.UIElement.CaptureMouse\n  id: CaptureMouse\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: CaptureMouse()\n  nameWithType: UIElement.CaptureMouse()\n  fullName: UIElement.CaptureMouse()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to force capture of the mouse to this element.\n  remarks: \"To be captured, an element must be enabled. Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.UIElement.CaptureMouse%2A>.  \\n  \\n If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.UIElement.IsMouseCaptured%2A> is also `true`.  \\n  \\n If calling <xref:System.Windows.UIElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.UIElement.GotMouseCapture> and <xref:System.Windows.UIElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.UIElement.CaptureMouse%2A> method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.  \\n  \\n To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with the `element` parameter provided as `null`.\"\n  example:\n  - \"The following example implements a pair of handlers for mouse and key input combination that capture (and uncapture) the mouse and enable a special mouse mode for viewing a 3D model.  \\n  \\n [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]\\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]\"\n  syntax:\n    content: public bool CaptureMouse ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the mouse is successfully captured; otherwise, `false`.'\n  overload: System.Windows.UIElement.CaptureMouse*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.CaptureStylus\n  commentId: M:System.Windows.UIElement.CaptureStylus\n  id: CaptureStylus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: CaptureStylus()\n  nameWithType: UIElement.CaptureStylus()\n  fullName: UIElement.CaptureStylus()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to force capture of the stylus to this element.\n  remarks: \"The default implementation based on the underlying default stylus device always returns `true`. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.  \\n  \\n When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \\n  \\n Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.  \\n  \\n To be captured, an element must be enabled. Check whether <xref:System.Windows.UIElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.UIElement.CaptureStylus%2A>.  \\n  \\n If calling <xref:System.Windows.UIElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.UIElement.IsStylusCaptured%2A> is also `true`.\"\n  syntax:\n    content: public bool CaptureStylus ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the stylus was successfully captured; otherwise, `false`.'\n  overload: System.Windows.UIElement.CaptureStylus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  commentId: M:System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  id: CaptureTouch(System.Windows.Input.TouchDevice)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: CaptureTouch(TouchDevice)\n  nameWithType: UIElement.CaptureTouch(TouchDevice)\n  fullName: UIElement.CaptureTouch(TouchDevice)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to force capture of a touch to this element.\n  remarks: \"<xref:System.Windows.UIElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.  \\n  \\n If <xref:System.Windows.UIElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.UIElement.GotTouchCapture> event is raised.  \\n  \\n To release capture of a single touch from this element, use the <xref:System.Windows.UIElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.UIElement.ReleaseAllTouchCaptures%2A> method.\"\n  syntax:\n    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);\n    parameters:\n    - id: touchDevice\n      type: System.Windows.Input.TouchDevice\n      description: The device to capture.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified touch is captured to this element; otherwise, `false`.'\n  overload: System.Windows.UIElement.CaptureTouch*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>touchDevice</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.Clip\n  commentId: P:System.Windows.UIElement.Clip\n  id: Clip\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Clip\n  nameWithType: UIElement.Clip\n  fullName: UIElement.Clip\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets the geometry used to define the outline of the contents of an element.  This is a dependency property.\n  remarks: \"Elements outside the geometry will be visually clipped in the rendered layout. The geometry does not have to be rectangular.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Clip\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ClipProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"This example shows how to define a framework element's<xref:System.Windows.UIElement.Clip%2A>region. To define a clip, use a <xref:System.Windows.Media.Geometry> (for example, an <xref:System.Windows.Media.EllipseGeometry>to set the element's <xref:System.Windows.UIElement.Clip%2A>property. Only the area that is within the region of the geometry will be visible.  \\n  \\n The following example shows an <xref:System.Windows.Controls.Image>element without a defined clip region. Because no clip region is defined, the entire image is displayed.  \\n  \\n [!code-xml[ClipPathExample#2](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#2)]  \\n  \\n ![An object before applying a clip region](~/add/media/mil-task-clip-region-noclip.png \\\"An object before applying a clip region\\\")  \\nImage with No Clip Region  \\n  \\n In the next example, an identical Image is created, except that it has a defined clip region. Only the part of the image that is within the area the <xref:System.Windows.Media.EllipseGeometry>will be displayed.  \\n  \\n [!code-xml[ClipPathExample#4](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#4)]  \\n  \\n ![A clipped object](~/add/media/mil-task-clip-region-ellispe.PNG \\\"A clipped object\\\")  \\nImage with an Elliptical Clip Region  \\n  \\n The following example shows how animate a framework element's <xref:System.Windows.UIElement.Clip%2A> region. In this example, an <xref:System.Windows.Media.EllipseGeometry> is used to define an elliptical clip region for an <xref:System.Windows.Controls.Image> element. A <xref:System.Windows.Media.Animation.PointAnimation> animates the ellipse geometry's <xref:System.Windows.Media.EllipseGeometry.Center%2A> property from (0, 0) to (200, 150). The animation starts playing after the image is loaded and repeats indefinitely.  \\n  \\n [!code-xml[ClipPathExample#5](~/samples/snippets/csharp/VS_Snippets_Wpf/ClipPathExample/CS/ClipExample.xaml#5)]  \\n  \\n For the full sample, see the [Clip Region Sample](http://msdn.microsoft.com/en-us/83043a0b-f824-445f-9675-103280c5ca67).\"\n  syntax:\n    content: public System.Windows.Media.Geometry Clip { get; set; }\n    return:\n      type: System.Windows.Media.Geometry\n      description: The geometry to be used for clipping area sizing. The default is a null <xref href=\"System.Windows.Media.Geometry\"></xref>.\n  overload: System.Windows.UIElement.Clip*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ClipProperty\n  commentId: F:System.Windows.UIElement.ClipProperty\n  id: ClipProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ClipProperty\n  nameWithType: UIElement.ClipProperty\n  fullName: UIElement.ClipProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.Clip\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ClipProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ClipToBounds\n  commentId: P:System.Windows.UIElement.ClipToBounds\n  id: ClipToBounds\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ClipToBounds\n  nameWithType: UIElement.ClipToBounds\n  fullName: UIElement.ClipToBounds\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value indicating whether to clip the content of this element (or content coming from the child elements of this element) to fit into the size of the containing element.   This is a dependency property.\n  remarks: \"For child elements, <xref:System.Windows.UIElement.ClipToBounds%2A> has different effects on layout behaviors depending on whether the height and width of the parent element are being determined by <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> or <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A>. <xref:System.Windows.FrameworkElement.MaxHeight%2A> / <xref:System.Windows.FrameworkElement.MaxWidth%2A> of the parent element are always respected regardless of the value of <xref:System.Windows.UIElement.ClipToBounds%2A> and the effective clipping will always clip the content based on these maximums. The parent's <xref:System.Windows.FrameworkElement.Height%2A> / <xref:System.Windows.FrameworkElement.Width%2A> settings will not clip the content when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`, but will clip the content if <xref:System.Windows.UIElement.ClipToBounds%2A> is `true`.  \\n  \\n Note that defaulting to `false` is the general behavior as implemented in the <xref:System.Windows.UIElement> class. It is possible for any given element that derives from <xref:System.Windows.UIElement> to override the dependency property metadata for this property in that instance to default to `true` instead. Several existing derived classes override this metadata and/or adjust the dependency property default value.  \\n  \\n <xref:System.Windows.Controls.InkCanvas>, <xref:System.Windows.Controls.InkPresenter>, and <xref:System.Windows.Controls.Primitives.Popup> each override the default value to be `true`.  \\n  \\n <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property. Specifically, <xref:System.Windows.FrameworkElement> designates this property to allow property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.UIElement.ClipToBounds%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a locally value), then the value from the parent element will be assigned to all unassigned child elements by the property system. In practice this means that you can specify whether to allow clip to bounds at the root element, and that value will propagate to all child elements that have not specifically assigned it as `false`.  \\n  \\n<a name=\\\"dependencyPropertyInfo_ClipToBounds\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ClipToBoundsProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool ClipToBounds { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the content should be clipped; otherwise, `false`. The default value is `false`.'\n  overload: System.Windows.UIElement.ClipToBounds*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ClipToBoundsProperty\n  commentId: F:System.Windows.UIElement.ClipToBoundsProperty\n  id: ClipToBoundsProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ClipToBoundsProperty\n  nameWithType: UIElement.ClipToBoundsProperty\n  fullName: UIElement.ClipToBoundsProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.ClipToBounds\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ClipToBoundsProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.CommandBindings\n  commentId: P:System.Windows.UIElement.CommandBindings\n  id: CommandBindings\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: CommandBindings\n  nameWithType: UIElement.CommandBindings\n  fullName: UIElement.CommandBindings\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a collection of <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects associated with this element. A <xref href=\"System.Windows.Input.CommandBinding\"></xref> enables command handling for this element, and declares the linkage between a command, its events, and the handlers attached by this element.\n  remarks: \"Another typical way to populate the <xref:System.Windows.UIElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.  \\n  \\n<a name=\\\"xamlPropertyElementUsage_CommandBindings\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.CommandBindings>  \\n    oneOrMoreCommandBindings  \\n  </object.CommandBindings>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_CommandBindings\\\"></a>   \\n## XAML Values  \\n *oneOrMoreCommandBindings*  \\n One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.\"\n  example:\n  - \"The following example adds a <xref:System.Windows.Input.CommandBinding> to a window using markup. Note that in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the <xref:System.Windows.Input.CommandBindingCollection> is not declared in the markup as an element; the collection object is inferred by the type that the property takes, and you populate the property element with one or more <xref:System.Windows.Input.CommandBinding> elements:  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerCommandBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlercommandbinding)]  \\n  \\n For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).  \\n  \\n The following example does essentially the same thing in code:  \\n  \\n [!code-csharp[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerbindinginit)]\\n [!code-vb[CommandHandlerProcedural#CommandHandlerBindingInit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerbindinginit)]\"\n  syntax:\n    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }\n    return:\n      type: System.Windows.Input.CommandBindingCollection\n      description: The collection of all <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects.\n  overload: System.Windows.UIElement.CommandBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.DesiredSize\n  commentId: P:System.Windows.UIElement.DesiredSize\n  id: DesiredSize\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DesiredSize\n  nameWithType: UIElement.DesiredSize\n  fullName: UIElement.DesiredSize\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets the size that this element computed during the measure pass of the layout process.\n  remarks: \"The value returned by this property will only be a valid measurement if the value of the <xref:System.Windows.UIElement.IsMeasureValid%2A> property is `true`.  \\n  \\n <xref:System.Windows.UIElement.DesiredSize%2A> is typically checked as one of the measurement factors when you implement layout behavior overrides such as <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>, <xref:System.Windows.FrameworkElement.MeasureOverride%2A>, or <xref:System.Windows.UIElement.OnRender%2A> (in the <xref:System.Windows.UIElement.OnRender%2A> case, you might check <xref:System.Windows.UIElement.RenderSize%2A> instead, but this depends on your implementation). Depending on the scenario, <xref:System.Windows.UIElement.DesiredSize%2A> might be fully respected by your implementation logic, constraints on <xref:System.Windows.UIElement.DesiredSize%2A> might be applied, and such constraints might also change other characteristics of either the parent element or child element. For example, a control that supports scrollable regions (but chooses not to derive from the WPF framework-level controls that already enable scrollable regions) could compare available size to <xref:System.Windows.UIElement.DesiredSize%2A>. The control could then set an internal state that enabled scrollbars in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] for that control. Or, <xref:System.Windows.UIElement.DesiredSize%2A> could potentially also be ignored in certain scenarios.\"\n  example:\n  - \"The following example shows <xref:System.Windows.UIElement.DesiredSize%2A> as part of a <xref:System.Windows.FrameworkElement.MeasureOverride%2A> implementation. Notice how <xref:System.Windows.UIElement.Measure%2A> is called immediately prior to obtaining <xref:System.Windows.UIElement.DesiredSize%2A>. This assures that <xref:System.Windows.UIElement.DesiredSize%2A> holds a legitimate value.  \\n  \\n [!code-cpp[PlotPanel#2](~/samples/snippets/cpp/VS_Snippets_Wpf/PlotPanel/CPP/PlotPanel.cpp#2)]\\n [!code-csharp[PlotPanel#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PlotPanel/CSharp/PlotPanel.cs#2)]\\n [!code-vb[PlotPanel#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PlotPanel/VisualBasic/PlotPanel.vb#2)]\"\n  syntax:\n    content: public System.Windows.Size DesiredSize { get; }\n    return:\n      type: System.Windows.Size\n      description: The computed size, which becomes the desired size for the arrange pass.\n  overload: System.Windows.UIElement.DesiredSize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.DragEnter\n  commentId: E:System.Windows.UIElement.DragEnter\n  id: DragEnter\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DragEnter\n  nameWithType: UIElement.DragEnter\n  fullName: UIElement.DragEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_DragEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.DragEnterEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDragEnter>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnDragEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler DragEnter;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.DragEnterEvent\n  commentId: F:System.Windows.UIElement.DragEnterEvent\n  id: DragEnterEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DragEnterEvent\n  nameWithType: UIElement.DragEnterEvent\n  fullName: UIElement.DragEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.DragEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.DragLeave\n  commentId: E:System.Windows.UIElement.DragLeave\n  id: DragLeave\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DragLeave\n  nameWithType: UIElement.DragLeave\n  fullName: UIElement.DragLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag origin.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_DragLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.DragLeaveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnDragLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler DragLeave;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.DragLeaveEvent\n  commentId: F:System.Windows.UIElement.DragLeaveEvent\n  id: DragLeaveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DragLeaveEvent\n  nameWithType: UIElement.DragLeaveEvent\n  fullName: UIElement.DragLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.DragLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.DragOver\n  commentId: E:System.Windows.UIElement.DragOver\n  id: DragOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DragOver\n  nameWithType: UIElement.DragOver\n  fullName: UIElement.DragOver\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the potential drop target.\n  remarks: \"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.UIElement.DragEnter> and related preview events.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_DragOver\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.DragOverEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnDragOver%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler DragOver;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.DragOverEvent\n  commentId: F:System.Windows.UIElement.DragOverEvent\n  id: DragOverEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DragOverEvent\n  nameWithType: UIElement.DragOverEvent\n  fullName: UIElement.DragOverEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.DragOver\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DragOverEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.Drop\n  commentId: E:System.Windows.UIElement.Drop\n  id: Drop\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Drop\n  nameWithType: UIElement.Drop\n  fullName: UIElement.Drop\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drop event with this element as the drop target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_Drop\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.DropEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewDrop>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnDrop%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler Drop;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.DropEvent\n  commentId: F:System.Windows.UIElement.DropEvent\n  id: DropEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: DropEvent\n  nameWithType: UIElement.DropEvent\n  fullName: UIElement.DropEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.Drop\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DropEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.Effect\n  commentId: P:System.Windows.UIElement.Effect\n  id: Effect\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Effect\n  nameWithType: UIElement.Effect\n  fullName: UIElement.Effect\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets the bitmap effect to apply to the <xref href=\"System.Windows.UIElement\"></xref>. This is a dependency property.\n  remarks: \"Use the <xref:System.Windows.UIElement.Effect%2A> property to apply a bitmap effect to a <xref:System.Windows.UIElement>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Effect\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.EffectProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following XAML shows how to assign a custom <xref:System.Windows.Media.Effects.ShaderEffect> to the <xref:System.Windows.UIElement.Effect%2A> property.  \\n  \\n [!code-xml[System.Windows.Media.Effects.ShaderEffect#1000](~/samples/snippets/csharp/VS_Snippets_Wpf/System.Windows.Media.Effects.ShaderEffect/CS/Window1.xaml#1000)]\"\n  syntax:\n    content: public System.Windows.Media.Effects.Effect Effect { get; set; }\n    return:\n      type: System.Windows.Media.Effects.Effect\n      description: An <xref href=\"System.Windows.Media.Effects.Effect\"></xref> that represents the bitmap effect.\n  overload: System.Windows.UIElement.Effect*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.EffectProperty\n  commentId: F:System.Windows.UIElement.EffectProperty\n  id: EffectProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: EffectProperty\n  nameWithType: UIElement.EffectProperty\n  fullName: UIElement.EffectProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.Effect\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty EffectProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.Focus\n  commentId: M:System.Windows.UIElement.Focus\n  id: Focus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Focus()\n  nameWithType: UIElement.Focus()\n  fullName: UIElement.Focus()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to set focus to this element.\n  remarks: \"To be focusable, <xref:System.Windows.UIElement.Focusable%2A> and <xref:System.Windows.UIElement.IsEnabled%2A> must both be `true`.  \\n  \\n Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.  \\n  \\n Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.  For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) or [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n If calling <xref:System.Windows.UIElement.Focus%2A> returns `true`, <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are also `true`.  \\n  \\n If the related properties are not already `true`, when you call  <xref:System.Windows.UIElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>, <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.UIElement.IsKeyboardFocusedChanged>, <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.UIElement.LostKeyboardFocus>, <xref:System.Windows.UIElement.GotKeyboardFocus> (source is the new focus target).  \\n  \\n In order for this call to be successful, some other element in the application needed to have focus previously.\"\n  example:\n  - \"The following example sets focus to a <xref:System.Windows.Controls.TextBox> referenced by <xref:System.Windows.FrameworkElement.Name%2A>, and then adjusts the position of the cursor within the <xref:System.Windows.Controls.TextBox>.  \\n  \\n [!code-csharp[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/TextBox_CursorToEnd/CSharp/Window1.xaml.cs#uielementfocus)]\\n [!code-vb[TextBox_CursorToEnd#UIElementFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextBox_CursorToEnd/VisualBasic/Window1.xaml.vb#uielementfocus)]\"\n  syntax:\n    content: public bool Focus ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if keyboard focus and logical focus were set to this element; `false` if only logical focus was set to this element, or if the call to this method did not force the focus to change.'\n  overload: System.Windows.UIElement.Focus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.Focusable\n  commentId: P:System.Windows.UIElement.Focusable\n  id: Focusable\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Focusable\n  nameWithType: UIElement.Focusable\n  fullName: UIElement.Focusable\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the element can receive focus.  This is a dependency property.\n  remarks: \"Only the focused element receives keyboard input.  \\n  \\n <xref:System.Windows.UIElement.Focusable%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property. This particular dependency property quite frequently has its apparent \\\"default\\\" value set differently in derived element classes, particularly in controls. This commonly occurs in one of two ways:  \\n  \\n-   The dependency property is inherited by a particular derived class, but that derived class overrides the metadata of the dependency property and changes the property default value.  \\n  \\n-   A style or template is applied to an element, which sets that dependency property value differently.  \\n  \\n For example, the apparent \\\"default\\\" of <xref:System.Windows.UIElement.Focusable%2A> for a <xref:System.Windows.Controls.Button> control will be `true`, even though <xref:System.Windows.Controls.Button> inherits <xref:System.Windows.UIElement.Focusable%2A> as a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property directly from <xref:System.Windows.UIElement>. This is because the applied metadata value for the <xref:System.Windows.UIElement.Focusable%2A> dependency property was overridden within the static constructor of the <xref:System.Windows.Controls.Control> base class, which is situated between <xref:System.Windows.Controls.Button> and <xref:System.Windows.UIElement> in the class hierarchy.  \\n  \\n When inherited by <xref:System.Windows.Controls.Control> or its derived classes, <xref:System.Windows.Controls.Control> redefines the default value of this property to be `true`.  \\n  \\n When inherited by <xref:System.Windows.Controls.Label> (which is a <xref:System.Windows.Controls.Control> derived class), the default value is again redefined to be `false`.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Focusable\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.FocusableProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example code illustrates a control template for a particular custom control, which sets <xref:System.Windows.UIElement.Focusable%2A> `false` on one of the elements within the template.  \\n  \\n [!code-xml[RichTextBox_NoScrollViewer#_ControlTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBox_NoScrollViewer/CS/window1.xaml#_controltemplate)]\"\n  syntax:\n    content: public bool Focusable { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element is focusable; otherwise `false`. The default is `false`.'\n  overload: System.Windows.UIElement.Focusable*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.FocusableChanged\n  commentId: E:System.Windows.UIElement.FocusableChanged\n  id: FocusableChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: FocusableChanged\n  nameWithType: UIElement.FocusableChanged\n  fullName: UIElement.FocusableChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.Focusable\"></xref> property changes.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.FocusableProperty\n  commentId: F:System.Windows.UIElement.FocusableProperty\n  id: FocusableProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: FocusableProperty\n  nameWithType: UIElement.FocusableProperty\n  fullName: UIElement.FocusableProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.Focusable\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty FocusableProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  commentId: M:System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  id: GetAnimationBaseValue(System.Windows.DependencyProperty)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GetAnimationBaseValue(DependencyProperty)\n  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)\n  fullName: UIElement.GetAnimationBaseValue(DependencyProperty)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.\n  remarks: If no animations are attached to the property, then the <xref:System.Windows.UIElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).\n  example:\n  - \"The following example implements a handler that reports the base value of an animated <xref:System.Windows.FrameworkElement.Width%2A> property on a <xref:System.Windows.Controls.Button>, as well as the base value of a transform.  \\n  \\n [!code-csharp[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/csharp/VS_Snippets_Wpf/timingbehaviors_procedural_snip/CSharp/GetAnimationBaseValueExample.cs#getanimationbasevalue)]\\n [!code-vb[timingbehaviors_procedural_snip#GetAnimationBaseValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/timingbehaviors_procedural_snip/visualbasic/getanimationbasevalueexample.vb#getanimationbasevalue)]\"\n  syntax:\n    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The dependency property to check.\n    return:\n      type: System.Object\n      description: The property value as if no animations are attached to the specified dependency property.\n  overload: System.Windows.UIElement.GetAnimationBaseValue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)\n  commentId: M:System.Windows.UIElement.GetLayoutClip(System.Windows.Size)\n  id: GetLayoutClip(System.Windows.Size)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GetLayoutClip(Size)\n  nameWithType: UIElement.GetLayoutClip(Size)\n  fullName: UIElement.GetLayoutClip(Size)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns an alternative clipping geometry that represents the region that would be clipped if <xref href=\"System.Windows.UIElement.ClipToBounds\"></xref> were set to `true`.\n  remarks: \"The default implementation will return a legitimate value, but does not use the `layoutSlotSize` parameter in its calculations. Instead it uses the value of <xref:System.Windows.UIElement.RenderSize%2A>.  \\n  \\n This method is substantially overridden by the immediately derived <xref:System.Windows.FrameworkElement> class, and the <xref:System.Windows.FrameworkElement> override produces a more sophisticated behavior for general WPF framework-level elements. For details, see <xref:System.Windows.FrameworkElement.GetLayoutClip%2A?displayProperty=fullName>.\"\n  syntax:\n    content: protected virtual System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);\n    parameters:\n    - id: layoutSlotSize\n      type: System.Windows.Size\n      description: The available size provided by the element.\n    return:\n      type: System.Windows.Media.Geometry\n      description: The potential clipping geometry.\n  overload: System.Windows.UIElement.GetLayoutClip*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GetUIParentCore\n  commentId: M:System.Windows.UIElement.GetUIParentCore\n  id: GetUIParentCore\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GetUIParentCore()\n  nameWithType: UIElement.GetUIParentCore()\n  fullName: UIElement.GetUIParentCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.\n  remarks: \"The default virtual implementation of this method returns `null`. <xref:System.Windows.FrameworkElement> provides a practical implementation.  \\n  \\n Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.\"\n  syntax:\n    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();\n    parameters: []\n    return:\n      type: System.Windows.DependencyObject\n      description: An object, if implementation of a derived class has an alternate parent connection to report.\n  overload: System.Windows.UIElement.GetUIParentCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GiveFeedback\n  commentId: E:System.Windows.UIElement.GiveFeedback\n  id: GiveFeedback\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GiveFeedback\n  nameWithType: UIElement.GiveFeedback\n  fullName: UIElement.GiveFeedback\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag-and-drop event that involves this element.\n  remarks: \"The <xref:System.Windows.UIElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GiveFeedback\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.GiveFeedbackEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGiveFeedback>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;\n    return:\n      type: System.Windows.GiveFeedbackEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GiveFeedbackEvent\n  commentId: F:System.Windows.UIElement.GiveFeedbackEvent\n  id: GiveFeedbackEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GiveFeedbackEvent\n  nameWithType: UIElement.GiveFeedbackEvent\n  fullName: UIElement.GiveFeedbackEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.GiveFeedback\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GotFocus\n  commentId: E:System.Windows.UIElement.GotFocus\n  id: GotFocus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotFocus\n  nameWithType: UIElement.GotFocus\n  fullName: UIElement.GotFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element gets logical focus.\n  remarks: \"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.  \\n  \\n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.  \\n  \\n Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \\n  \\n<a name=\\\"routedEventInfo_GotFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.GotFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \\n  \\n-   There is no corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnGotFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.RoutedEventHandler GotFocus;\n    return:\n      type: System.Windows.RoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GotFocusEvent\n  commentId: F:System.Windows.UIElement.GotFocusEvent\n  id: GotFocusEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotFocusEvent\n  nameWithType: UIElement.GotFocusEvent\n  fullName: UIElement.GotFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GotKeyboardFocus\n  commentId: E:System.Windows.UIElement.GotKeyboardFocus\n  id: GotKeyboardFocus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotKeyboardFocus\n  nameWithType: UIElement.GotKeyboardFocus\n  fullName: UIElement.GotKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is focused on this element.\n  remarks: \"<xref:System.Windows.UIElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.UIElement.GotKeyboardFocus> event is raised in many of the same circumstances.  \\n  \\n Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GotKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.GotKeyboardFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewGotKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GotKeyboardFocusEvent\n  commentId: F:System.Windows.UIElement.GotKeyboardFocusEvent\n  id: GotKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotKeyboardFocusEvent\n  nameWithType: UIElement.GotKeyboardFocusEvent\n  fullName: UIElement.GotKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.GotKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.GotMouseCapture\n  commentId: E:System.Windows.UIElement.GotMouseCapture\n  id: GotMouseCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotMouseCapture\n  nameWithType: UIElement.GotMouseCapture\n  fullName: UIElement.GotMouseCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element captures the mouse.\n  remarks: \"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.  \\n  \\n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.UIElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GotMouseCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.GotMouseCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.GotMouseCaptureEvent\n  commentId: F:System.Windows.UIElement.GotMouseCaptureEvent\n  id: GotMouseCaptureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotMouseCaptureEvent\n  nameWithType: UIElement.GotMouseCaptureEvent\n  fullName: UIElement.GotMouseCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.GotMouseCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GotStylusCapture\n  commentId: E:System.Windows.UIElement.GotStylusCapture\n  id: GotStylusCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotStylusCapture\n  nameWithType: UIElement.GotStylusCapture\n  fullName: UIElement.GotStylusCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element captures the stylus.\n  remarks: \"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.  \\n  \\n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.  \\n  \\n This event creates an alias for the attached event for this class so that <xref:System.Windows.UIElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GotStylusCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.GotStylusCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GotStylusCaptureEvent\n  commentId: F:System.Windows.UIElement.GotStylusCaptureEvent\n  id: GotStylusCaptureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotStylusCaptureEvent\n  nameWithType: UIElement.GotStylusCaptureEvent\n  fullName: UIElement.GotStylusCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.GotStylusCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.GotTouchCapture\n  commentId: E:System.Windows.UIElement.GotTouchCapture\n  id: GotTouchCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotTouchCapture\n  nameWithType: UIElement.GotTouchCapture\n  fullName: UIElement.GotTouchCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a touch is captured to this element.\n  remarks: \"<a name=\\\"routedEventInfo_GotTouchCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.GotTouchCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.GotTouchCaptureEvent\n  commentId: F:System.Windows.UIElement.GotTouchCaptureEvent\n  id: GotTouchCaptureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: GotTouchCaptureEvent\n  nameWithType: UIElement.GotTouchCaptureEvent\n  fullName: UIElement.GotTouchCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.GotTouchCapture\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.HasAnimatedProperties\n  commentId: P:System.Windows.UIElement.HasAnimatedProperties\n  id: HasAnimatedProperties\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: HasAnimatedProperties\n  nameWithType: UIElement.HasAnimatedProperties\n  fullName: UIElement.HasAnimatedProperties\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether this element has any animated properties.\n  remarks: This property returns `true` either for persistent (unclocked, always-running) animations, or for animations that have a specific timeline.\n  syntax:\n    content: public bool HasAnimatedProperties { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has animations attached to any of its properties; otherwise, `false`.'\n  overload: System.Windows.UIElement.HasAnimatedProperties*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus\n  commentId: P:System.Windows.UIElement.HasEffectiveKeyboardFocus\n  id: HasEffectiveKeyboardFocus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: HasEffectiveKeyboardFocus\n  nameWithType: UIElement.HasEffectiveKeyboardFocus\n  fullName: UIElement.HasEffectiveKeyboardFocus\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the <xref href=\"System.Windows.UIElement\"></xref> has focus.\n  remarks: Subclasses can override this property to specify when the element has keyboard focus.  This is useful when your <xref:System.Windows.UIElement> contains elements that can have keyboard focus and you want your element to report that it has focus.\n  syntax:\n    content: protected virtual bool HasEffectiveKeyboardFocus { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.UIElement\"></xref> has focus; otherwise, `false`.'\n  overload: System.Windows.UIElement.HasEffectiveKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  commentId: M:System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  id: HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: HitTestCore(GeometryHitTestParameters)\n  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)\n  fullName: UIElement.HitTestCore(GeometryHitTestParameters)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Implements <xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\"></xref> to supply base element hit testing behavior (returning <xref href=\"System.Windows.Media.GeometryHitTestResult\"></xref>).\n  remarks: \"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override this one.  \\n  \\n This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).\"\n  syntax:\n    content: protected override System.Windows.Media.GeometryHitTestResult HitTestCore (System.Windows.Media.GeometryHitTestParameters hitTestParameters);\n    parameters:\n    - id: hitTestParameters\n      type: System.Windows.Media.GeometryHitTestParameters\n      description: Describes the hit test to perform, including the initial hit point.\n    return:\n      type: System.Windows.Media.GeometryHitTestResult\n      description: Results of the test, including the evaluated geometry.\n  overload: System.Windows.UIElement.HitTestCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)\n  commentId: M:System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)\n  id: HitTestCore(System.Windows.Media.PointHitTestParameters)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: HitTestCore(PointHitTestParameters)\n  nameWithType: UIElement.HitTestCore(PointHitTestParameters)\n  fullName: UIElement.HitTestCore(PointHitTestParameters)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Implements <xref href=\"System.Windows.Media.Visual.HitTestCore(System.Windows.Media.PointHitTestParameters)\"></xref> to supply base element hit testing behavior (returning <xref href=\"System.Windows.Media.HitTestResult\"></xref>).\n  remarks: \"See the original virtual method <xref:System.Windows.Media.Visual.HitTestCore%2A?displayProperty=fullName> for information on overriding this method in further derived classes. Note that several specific controls (<xref:System.Windows.Controls.TextBlock>, for example) do have distinct implementations, which override <xref:System.Windows.UIElement.HitTestCore%2A> as defined by <xref:System.Windows.UIElement>.  \\n  \\n This method is not intended to be called from your application code. This method supports internal hit testing behaviors that are exposed by various aspects of the input system (whether the mouse pointer is over an element, for example).\"\n  syntax:\n    content: protected override System.Windows.Media.HitTestResult HitTestCore (System.Windows.Media.PointHitTestParameters hitTestParameters);\n    parameters:\n    - id: hitTestParameters\n      type: System.Windows.Media.PointHitTestParameters\n      description: Describes the hit test to perform, including the initial hit point.\n    return:\n      type: System.Windows.Media.HitTestResult\n      description: Results of the test, including the evaluated point.\n  overload: System.Windows.UIElement.HitTestCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.InputBindings\n  commentId: P:System.Windows.UIElement.InputBindings\n  id: InputBindings\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: InputBindings\n  nameWithType: UIElement.InputBindings\n  fullName: UIElement.InputBindings\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets the collection of input bindings associated with this element.\n  remarks: \"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are particular to mouse devices.  \\n  \\n The collection of input bindings will include both input bindings that pertain to the type as well as input bindings that are declared on the instance.  \\n  \\n A related property, <xref:System.Windows.UIElement.CommandBindings%2A>, maintains a collection of command bindings. These differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands.  \\n  \\n<a name=\\\"xamlPropertyElementUsage_InputBindings\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.InputBindings>  \\n    oneOrMoreInputBindings  \\n  </object.InputBindings>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_InputBindings\\\"></a>   \\n## XAML Values  \\n *oneOrMoreInputBindings*  \\n One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.\"\n  example:\n  - \"The following example populates this property on a <xref:System.Windows.Window>, with a single <xref:System.Windows.Input.KeyBinding>.  \\n  \\n [!code-xml[CommandingOverviewSnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  \\n  \\n For more information about the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax for collections, see [XAML Syntax In Detail](~/docs/framework/wpf/advanced/xaml-syntax-in-detail.md).\"\n  syntax:\n    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }\n    return:\n      type: System.Windows.Input.InputBindingCollection\n      description: The collection of input bindings.\n  overload: System.Windows.UIElement.InputBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)\n  commentId: M:System.Windows.UIElement.InputHitTest(System.Windows.Point)\n  id: InputHitTest(System.Windows.Point)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: InputHitTest(Point)\n  nameWithType: UIElement.InputHitTest(Point)\n  fullName: UIElement.InputHitTest(Point)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns the input element within the current element that is at the specified coordinates, relative to the current element's origin.\n  remarks: \"<xref:System.Windows.IInputElement> is returned as the return type, because that type is a common interface for both <xref:System.Windows.UIElement> and <xref:System.Windows.ContentElement>. You can then cast the return type appropriately, or use the interface instance for certain members that are defined by the <xref:System.Windows.IInputElement> interface.  \\n  \\n This method typically is not called from your application code. Calling this method is only appropriate if you intend to re-implement a substantial amount of the low level input features that are already present, such as recreating mouse device logic.  \\n  \\n <xref:System.Windows.IContentHost> contracts an <xref:System.Windows.IContentHost.InputHitTest%2A> method with the same signature, which some elements choose to implement explicitly.\"\n  syntax:\n    content: public System.Windows.IInputElement InputHitTest (System.Windows.Point point);\n    parameters:\n    - id: point\n      type: System.Windows.Point\n      description: The offset coordinates within this element.\n    return:\n      type: System.Windows.IInputElement\n      description: The element child that is located at the given position.\n  overload: System.Windows.UIElement.InputHitTest*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.InvalidateArrange\n  commentId: M:System.Windows.UIElement.InvalidateArrange\n  id: InvalidateArrange\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: InvalidateArrange()\n  nameWithType: UIElement.InvalidateArrange()\n  fullName: UIElement.InvalidateArrange()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invalidates the arrange state (layout) for the element. After the invalidation, the element will have its layout updated, which will occur asynchronously unless subsequently forced by <xref href=\"System.Windows.UIElement.UpdateLayout\"></xref>.\n  remarks: Frequent calls to <xref:System.Windows.UIElement.InvalidateArrange%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code. An advanced scenario where you might call <xref:System.Windows.UIElement.InvalidateArrange%2A> is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the arrange pass of layout when it changes.\n  syntax:\n    content: public void InvalidateArrange ();\n    parameters: []\n  overload: System.Windows.UIElement.InvalidateArrange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.InvalidateMeasure\n  commentId: M:System.Windows.UIElement.InvalidateMeasure\n  id: InvalidateMeasure\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: InvalidateMeasure()\n  nameWithType: UIElement.InvalidateMeasure()\n  fullName: UIElement.InvalidateMeasure()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invalidates the measurement state (layout) for the element.\n  remarks: \"Calling this method also calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally, there is no need to call <xref:System.Windows.UIElement.InvalidateMeasure%2A> and <xref:System.Windows.UIElement.InvalidateArrange%2A> in succession. After the invalidation, the element will have its layout updated, which will occur asynchronously, unless <xref:System.Windows.UIElement.UpdateLayout%2A> is called to force a synchronous layout change.  \\n  \\n The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and in most common layout invalidation cases the layout system is calling the equivalent of this method when necessary. You should only call this method if you are producing a complete layout implementation, which does direct manipulation of the element tree, or similar advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the measure pass of layout when it changes.  \\n  \\n Frequent calls to <xref:System.Windows.UIElement.InvalidateMeasure%2A> or in particular to <xref:System.Windows.UIElement.UpdateLayout%2A> have significant performance consequences. Therefore, avoid calling this method unless you absolutely require precise layout state for subsequent calls to other [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in your code.\"\n  syntax:\n    content: public void InvalidateMeasure ();\n    parameters: []\n  overload: System.Windows.UIElement.InvalidateMeasure*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.InvalidateVisual\n  commentId: M:System.Windows.UIElement.InvalidateVisual\n  id: InvalidateVisual\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: InvalidateVisual()\n  nameWithType: UIElement.InvalidateVisual()\n  fullName: UIElement.InvalidateVisual()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invalidates the rendering of the element, and forces a complete new layout pass. <xref href=\"System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\"></xref> is called after the layout cycle is completed.\n  remarks: \"This method calls <xref:System.Windows.UIElement.InvalidateArrange%2A> internally.  \\n  \\n This method is not generally called from your application code. The WPF framework-level layout system does its own handling of changes in the visual tree of an element, and would be calling the equivalent of this method when necessary already. Calling this method is necessary only for advanced scenarios. One such advanced scenario is if you are creating a <xref:System.Windows.PropertyChangedCallback> for a dependency property that is not on a <xref:System.Windows.Freezable> or <xref:System.Windows.FrameworkElement> derived class that still influences the layout when it changes.\"\n  syntax:\n    content: public void InvalidateVisual ();\n    parameters: []\n  overload: System.Windows.UIElement.InvalidateVisual*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsArrangeValid\n  commentId: P:System.Windows.UIElement.IsArrangeValid\n  id: IsArrangeValid\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsArrangeValid\n  nameWithType: UIElement.IsArrangeValid\n  fullName: UIElement.IsArrangeValid\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether the computed size and position of child elements in this element's layout are valid.\n  remarks: \"You can force arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateArrange%2A> on this element (or its parents). This flags the layout for recomposition at such time as the layout system determines. Alternatively, an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A> could be made, but this should only be done if it is certain that no further invalidations are pending (a large number of unnecessarily forced updates has performance consequences).  \\n  \\n <xref:System.Windows.UIElement.IsArrangeValid%2A> cannot be `true` unless <xref:System.Windows.UIElement.IsMeasureValid%2A> is also `true` (in the layout process, arrangement cannot be valid without measurement first being valid).\"\n  syntax:\n    content: public bool IsArrangeValid { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the size and position of layout are valid; otherwise, `false`.'\n  overload: System.Windows.UIElement.IsArrangeValid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.IsEnabled\n  commentId: P:System.Windows.UIElement.IsEnabled\n  id: IsEnabled\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsEnabled\n  nameWithType: UIElement.IsEnabled\n  fullName: UIElement.IsEnabled\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value indicating whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.\n  remarks: \"Note that this property is influenced by class-specific implementations of <xref:System.Windows.UIElement.IsEnabledCore%2A> on particular elements, often at runtime. Therefore, the default value listed here is sometimes not effective. For instance, a <xref:System.Windows.Controls.Primitives.ScrollBar> will be <xref:System.Windows.UIElement.IsEnabled%2A> `false` whenever it is determined that there is no need to support a scrollbar. Attempting to set this value will also potentially be overridden by the value returned by <xref:System.Windows.UIElement.IsEnabledCore%2A>.  \\n  \\n Elements that are not enabled do not participate in hit testing or focus and therefore will not be sources of input events.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsEnabled\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsEnabledProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example shows a handler on one button that when executed will set <xref:System.Windows.UIElement.IsEnabled%2A> `false` on another named button `b1`.  \\n  \\n [!code-csharp[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/CSharp/default.xaml.cs#handler)]\\n [!code-vb[RoutedEventAddRemoveHandler#Handler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventAddRemoveHandler/VisualBasic/default.xaml.vb#handler)]\"\n  syntax:\n    content: public bool IsEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element is enabled; otherwise, `false`. The default value is `true`.'\n  overload: System.Windows.UIElement.IsEnabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsEnabledChanged\n  commentId: E:System.Windows.UIElement.IsEnabledChanged\n  id: IsEnabledChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsEnabledChanged\n  nameWithType: UIElement.IsEnabledChanged\n  fullName: UIElement.IsEnabledChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> property on this element changes.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsEnabledCore\n  commentId: P:System.Windows.UIElement.IsEnabledCore\n  id: IsEnabledCore\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsEnabledCore\n  nameWithType: UIElement.IsEnabledCore\n  fullName: UIElement.IsEnabledCore\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that becomes the return value of <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> in derived classes.\n  syntax:\n    content: protected virtual bool IsEnabledCore { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element is enabled; otherwise, `false`.'\n  overload: System.Windows.UIElement.IsEnabledCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsEnabledProperty\n  commentId: F:System.Windows.UIElement.IsEnabledProperty\n  id: IsEnabledProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsEnabledProperty\n  nameWithType: UIElement.IsEnabledProperty\n  fullName: UIElement.IsEnabledProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsEnabled\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsFocused\n  commentId: P:System.Windows.UIElement.IsFocused\n  id: IsFocused\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsFocused\n  nameWithType: UIElement.IsFocused\n  fullName: UIElement.IsFocused\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that determines whether this element has logical focus.  This is a dependency property.\n  remarks: \"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  \\n  \\n You do not set focus by setting this property (it is read-only). The typical use for this property is to use it as a dependency property for a <xref:System.Windows.Setter> or <xref:System.Windows.EventTrigger>. To set focus programmatically, call <xref:System.Windows.UIElement.Focus%2A>. Focus can also be set by user action or by control implementations, which possibly include mouse capture behavior.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsFocused\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsFocusedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example is a code handler that changes the background of a control when it is focused.  \\n  \\n [!code-csharp[PopupSimple#IsFocused](~/samples/snippets/csharp/VS_Snippets_Wpf/PopupSimple/CSharp/Window1.xaml.cs#isfocused)]  \\n  \\n Another common way to achieve this same effect is to place a <xref:System.Windows.Trigger> in the <xref:System.Windows.Style> of a control; this approach does not require handling specific events with code-behind and allows designers greater access to the interactive and graphical nature of the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]. For an example, see [How to: Create an Outer Glow Effect](http://msdn.microsoft.com/en-us/a2ccf19a-d0dc-4e3c-88e3-95d7f7d765b1).\"\n  syntax:\n    content: public bool IsFocused { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has logical focus; otherwise, `false`.'\n  overload: System.Windows.UIElement.IsFocused*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.IsFocusedProperty\n  commentId: F:System.Windows.UIElement.IsFocusedProperty\n  id: IsFocusedProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsFocusedProperty\n  nameWithType: UIElement.IsFocusedProperty\n  fullName: UIElement.IsFocusedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsFocused\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.IsHitTestVisible\n  commentId: P:System.Windows.UIElement.IsHitTestVisible\n  id: IsHitTestVisible\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsHitTestVisible\n  nameWithType: UIElement.IsHitTestVisible\n  fullName: UIElement.IsHitTestVisible\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value that declares whether this element can possibly be returned as a hit test result from some portion of its rendered content. This is a dependency property.\n  remarks: \"The effective value of this property is influenced by the relative positions of hit testable elements in the logical tree. For instance, if an element is a child element of an element that is not hit test visible, the effective value of the property on the child will remain `false`, even if attempting to set that value locally. For this reason, it is important that you do not set <xref:System.Windows.UIElement.IsHitTestVisible%2A> to `false` on a composited control unless you do not want any input or hit testing on that control. For more information on hit testing, see [Hit Testing in the Visual Layer](~/docs/framework/wpf/graphics-multimedia/hit-testing-in-the-visual-layer.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsHitTestVisible\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsHitTestVisibleProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsHitTestVisible { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element could be returned as a hit test result from at least one point; otherwise, `false`. The default value is `true`.'\n  overload: System.Windows.UIElement.IsHitTestVisible*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsHitTestVisibleChanged\n  commentId: E:System.Windows.UIElement.IsHitTestVisibleChanged\n  id: IsHitTestVisibleChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsHitTestVisibleChanged\n  nameWithType: UIElement.IsHitTestVisibleChanged\n  fullName: UIElement.IsHitTestVisibleChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsHitTestVisible\"></xref> dependency property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsHitTestVisibleProperty\n  commentId: F:System.Windows.UIElement.IsHitTestVisibleProperty\n  id: IsHitTestVisibleProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsHitTestVisibleProperty\n  nameWithType: UIElement.IsHitTestVisibleProperty\n  fullName: UIElement.IsHitTestVisibleProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsHitTestVisible\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsInputMethodEnabled\n  commentId: P:System.Windows.UIElement.IsInputMethodEnabled\n  id: IsInputMethodEnabled\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsInputMethodEnabled\n  nameWithType: UIElement.IsInputMethodEnabled\n  fullName: UIElement.IsInputMethodEnabled\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)],  is enabled for processing the input to this element.\n  remarks: This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices).\n  syntax:\n    content: public bool IsInputMethodEnabled { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if an input method is active; otherwise, `false`. The default value of the underlying attached property is `true;` however, this will be influenced by the actual state of input methods at runtime.'\n  overload: System.Windows.UIElement.IsInputMethodEnabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsKeyboardFocused\n  commentId: P:System.Windows.UIElement.IsKeyboardFocused\n  id: IsKeyboardFocused\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsKeyboardFocused\n  nameWithType: UIElement.IsKeyboardFocused\n  fullName: UIElement.IsKeyboardFocused\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether this element has keyboard focus.  This is a dependency property.\n  remarks: \"Changes to the determined value of this property may be accompanied by focus-related events.  \\n  \\n <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are commonly used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsKeyboardFocused\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsKeyboardFocusedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsKeyboardFocused { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has keyboard focus; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsKeyboardFocused*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsKeyboardFocusedChanged\n  commentId: E:System.Windows.UIElement.IsKeyboardFocusedChanged\n  id: IsKeyboardFocusedChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusedChanged\n  nameWithType: UIElement.IsKeyboardFocusedChanged\n  fullName: UIElement.IsKeyboardFocusedChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsKeyboardFocused\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsKeyboardFocusedProperty\n  commentId: F:System.Windows.UIElement.IsKeyboardFocusedProperty\n  id: IsKeyboardFocusedProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusedProperty\n  nameWithType: UIElement.IsKeyboardFocusedProperty\n  fullName: UIElement.IsKeyboardFocusedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsKeyboardFocused\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsKeyboardFocusWithin\n  commentId: P:System.Windows.UIElement.IsKeyboardFocusWithin\n  id: IsKeyboardFocusWithin\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusWithin\n  nameWithType: UIElement.IsKeyboardFocusWithin\n  fullName: UIElement.IsKeyboardFocusWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether keyboard focus is anywhere within the element or its visual tree child elements.  This is a dependency property.\n  remarks: \"Changes to the value of this property typically raise the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.  \\n  \\n You do not set this property directly, but you can set the focus to an element by calling <xref:System.Windows.UIElement.Focus%2A>, or by making a <xref:System.Windows.UIElement.MoveFocus%2A> request. Either of these method calls might change this property value.  \\n  \\n <xref:System.Windows.UIElement.IsKeyboardFocused%2A> and <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> are typically used within class event handlers for other input-related events, for instance to determine whether the element already has keyboard focus, or to make determinations when mouse events and keyboard events occur in conjunction.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsKeyboardFocusWithin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsKeyboardFocusWithinProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsKeyboardFocusWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if keyboard focus is on the element or its child elements; otherwise, `false`.'\n  overload: System.Windows.UIElement.IsKeyboardFocusWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged\n  commentId: E:System.Windows.UIElement.IsKeyboardFocusWithinChanged\n  id: IsKeyboardFocusWithinChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusWithinChanged\n  nameWithType: UIElement.IsKeyboardFocusWithinChanged\n  fullName: UIElement.IsKeyboardFocusWithinChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty\n  commentId: F:System.Windows.UIElement.IsKeyboardFocusWithinProperty\n  id: IsKeyboardFocusWithinProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusWithinProperty\n  nameWithType: UIElement.IsKeyboardFocusWithinProperty\n  fullName: UIElement.IsKeyboardFocusWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsManipulationEnabled\n  commentId: P:System.Windows.UIElement.IsManipulationEnabled\n  id: IsManipulationEnabled\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsManipulationEnabled\n  nameWithType: UIElement.IsManipulationEnabled\n  fullName: UIElement.IsManipulationEnabled\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether manipulation events are enabled on this <xref href=\"System.Windows.UIElement\"></xref>.\n  remarks: 'Set this property to true if you want the <xref:System.Windows.UIElement> to receive the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationStarted>, <xref:System.Windows.UIElement.ManipulationDelta>, <xref:System.Windows.UIElement.ManipulationInertiaStarting>, <xref:System.Windows.UIElement.ManipulationBoundaryFeedback>, and <xref:System.Windows.UIElement.ManipulationCompleted> events. For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).'\n  example:\n  - \"The following example creates an application that has a red Rectangle.  The <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property of the Rectangle is set to true and the application's window subscribes to the <xref:System.Windows.UIElement.ManipulationStarting>, <xref:System.Windows.UIElement.ManipulationDelta>, and <xref:System.Windows.UIElement.ManipulationInertiaStarting> events. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-xml[BasicManipulation#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml#ui)]\"\n  syntax:\n    content: public bool IsManipulationEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if manipulation events are enabled on this <xref href=\"System.Windows.UIElement\"></xref>; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsManipulationEnabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsManipulationEnabledProperty\n  commentId: F:System.Windows.UIElement.IsManipulationEnabledProperty\n  id: IsManipulationEnabledProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsManipulationEnabledProperty\n  nameWithType: UIElement.IsManipulationEnabledProperty\n  fullName: UIElement.IsManipulationEnabledProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsManipulationEnabled\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsManipulationEnabledProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMeasureValid\n  commentId: P:System.Windows.UIElement.IsMeasureValid\n  id: IsMeasureValid\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMeasureValid\n  nameWithType: UIElement.IsMeasureValid\n  fullName: UIElement.IsMeasureValid\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether the current size returned by layout measure is valid.\n  remarks: \"You can force measurement and arrangement to be invalidated by calling <xref:System.Windows.UIElement.InvalidateMeasure%2A> on this element (or any parent element up the visual tree). This designates the layout for recomposition asynchronously, occurring at a time determined by the layout system. Alternatively, you could make an immediate call to <xref:System.Windows.UIElement.UpdateLayout%2A>. However, you should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if it is likely that no further invalidations are pending (a large number of unnecessarily forced updates will have performance consequences).  \\n  \\n If <xref:System.Windows.UIElement.IsMeasureValid%2A> is `false`, <xref:System.Windows.UIElement.IsArrangeValid%2A> must also be `false` (by the enforced logic of the layout process, arrangement cannot be valid without measurement first being valid).\"\n  syntax:\n    content: public bool IsMeasureValid { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the measure pass of layout returned a valid and current value; otherwise, `false`.'\n  overload: System.Windows.UIElement.IsMeasureValid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseCaptured\n  commentId: P:System.Windows.UIElement.IsMouseCaptured\n  id: IsMouseCaptured\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseCaptured\n  nameWithType: UIElement.IsMouseCaptured\n  fullName: UIElement.IsMouseCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether the mouse is captured to this element.  This is a dependency property.\n  remarks: \"Mouse capture state is related to in-process drag-and-drop operations.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsMouseCaptured\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsMouseCapturedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example turns the mouse capture state on or off based on whether the mouse is already captured for the element.  \\n  \\n If mouse capture is elsewhere, the mouse capture is set to that element. If the element had mouse capture, it is cleared by calling <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with a null input.  \\n  \\n [!code-csharp[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/MouseSnippetSample/CSharp/Window1.xaml.cs#ismousecaptured)]\\n [!code-vb[MouseSnippetSample#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MouseSnippetSample/visualbasic/window1.xaml.vb#ismousecaptured)]\"\n  syntax:\n    content: public bool IsMouseCaptured { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element has mouse capture; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsMouseCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseCapturedChanged\n  commentId: E:System.Windows.UIElement.IsMouseCapturedChanged\n  id: IsMouseCapturedChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseCapturedChanged\n  nameWithType: UIElement.IsMouseCapturedChanged\n  fullName: UIElement.IsMouseCapturedChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseCaptured\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseCapturedProperty\n  commentId: F:System.Windows.UIElement.IsMouseCapturedProperty\n  id: IsMouseCapturedProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseCapturedProperty\n  nameWithType: UIElement.IsMouseCapturedProperty\n  fullName: UIElement.IsMouseCapturedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsMouseCaptured\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseCaptureWithin\n  commentId: P:System.Windows.UIElement.IsMouseCaptureWithin\n  id: IsMouseCaptureWithin\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseCaptureWithin\n  nameWithType: UIElement.IsMouseCaptureWithin\n  fullName: UIElement.IsMouseCaptureWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that determines whether mouse capture is held by this element or by child elements in its visual tree. This is a dependency property.\n  remarks: \"<a name=\\\"dependencyPropertyInfo_IsMouseCaptureWithin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsMouseCaptureWithinProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsMouseCaptureWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element or a contained element has mouse capture; otherwise, `false`.'\n  overload: System.Windows.UIElement.IsMouseCaptureWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged\n  commentId: E:System.Windows.UIElement.IsMouseCaptureWithinChanged\n  id: IsMouseCaptureWithinChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseCaptureWithinChanged\n  nameWithType: UIElement.IsMouseCaptureWithinChanged\n  fullName: UIElement.IsMouseCaptureWithinChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseCaptureWithinProperty\"></xref> changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty\n  commentId: F:System.Windows.UIElement.IsMouseCaptureWithinProperty\n  id: IsMouseCaptureWithinProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseCaptureWithinProperty\n  nameWithType: UIElement.IsMouseCaptureWithinProperty\n  fullName: UIElement.IsMouseCaptureWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsMouseCaptureWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseDirectlyOver\n  commentId: P:System.Windows.UIElement.IsMouseDirectlyOver\n  id: IsMouseDirectlyOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseDirectlyOver\n  nameWithType: UIElement.IsMouseDirectlyOver\n  fullName: UIElement.IsMouseDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.  This is a dependency property.\n  remarks: \"Unlike <xref:System.Windows.UIElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsMouseOver%2A> instead.  \\n  \\n If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsMouseDirectlyOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsMouseDirectlyOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsMouseDirectlyOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsMouseDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged\n  commentId: E:System.Windows.UIElement.IsMouseDirectlyOverChanged\n  id: IsMouseDirectlyOverChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseDirectlyOverChanged\n  nameWithType: UIElement.IsMouseDirectlyOverChanged\n  fullName: UIElement.IsMouseDirectlyOverChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty\n  commentId: F:System.Windows.UIElement.IsMouseDirectlyOverProperty\n  id: IsMouseDirectlyOverProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseDirectlyOverProperty\n  nameWithType: UIElement.IsMouseDirectlyOverProperty\n  fullName: UIElement.IsMouseDirectlyOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsMouseDirectlyOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.IsMouseOver\n  commentId: P:System.Windows.UIElement.IsMouseOver\n  id: IsMouseOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseOver\n  nameWithType: UIElement.IsMouseOver\n  fullName: UIElement.IsMouseOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether the mouse pointer is located over this element (including child elements in the visual tree).  This is a dependency property.\n  remarks: \"Typically, controls are composited such that the various elements inside the control (the visual tree) will all report the mouse state for the containing control. For example, a <xref:System.Windows.Controls.ListBox> style control will report <xref:System.Windows.UIElement.IsMouseOver%2A> as `true` if the mouse is anywhere over its geometry, including any <xref:System.Windows.Controls.ListBoxItem>.  \\n  \\n Although an analogous \\\"IsMouseOverChanged\\\" event does not exist, several similar events do. For example, you can handle <xref:System.Windows.UIElement.MouseEnter>, <xref:System.Windows.UIElement.MouseMove>, and <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged>.  \\n  \\n If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.  \\n  \\n Some controls deliberately capture the mouse on certain actions that do not appear to directly involve the mouse. This can lead to <xref:System.Windows.UIElement.IsMouseOver%2A> being `true` even though the mouse has not apparently moved.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsMouseOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsMouseOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example references this property as the property type of a <xref:System.Windows.Trigger>, part of a \\\\<Style.Triggers> block. If the mouse is over the control, the control text turns blue and the cursor becomes a hand.  \\n  \\n [!code-xml[ListViewChkBox#Trigger](~/samples/snippets/csharp/VS_Snippets_Wpf/ListViewChkBox/CS/window1.xaml#trigger)]\"\n  syntax:\n    content: public bool IsMouseOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if mouse pointer is over the element or its child elements; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsMouseOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsMouseOverProperty\n  commentId: F:System.Windows.UIElement.IsMouseOverProperty\n  id: IsMouseOverProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsMouseOverProperty\n  nameWithType: UIElement.IsMouseOverProperty\n  fullName: UIElement.IsMouseOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsMouseOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.IsStylusCaptured\n  commentId: P:System.Windows.UIElement.IsStylusCaptured\n  id: IsStylusCaptured\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusCaptured\n  nameWithType: UIElement.IsStylusCaptured\n  fullName: UIElement.IsStylusCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether the stylus is captured by this element.  This is a dependency property.\n  remarks: \"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusCaptured\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsStylusCapturedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusCaptured { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element has stylus capture; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsStylusCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusCapturedChanged\n  commentId: E:System.Windows.UIElement.IsStylusCapturedChanged\n  id: IsStylusCapturedChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusCapturedChanged\n  nameWithType: UIElement.IsStylusCapturedChanged\n  fullName: UIElement.IsStylusCapturedChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusCaptured\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusCapturedProperty\n  commentId: F:System.Windows.UIElement.IsStylusCapturedProperty\n  id: IsStylusCapturedProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusCapturedProperty\n  nameWithType: UIElement.IsStylusCapturedProperty\n  fullName: UIElement.IsStylusCapturedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsStylusCaptured\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusCaptureWithin\n  commentId: P:System.Windows.UIElement.IsStylusCaptureWithin\n  id: IsStylusCaptureWithin\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusCaptureWithin\n  nameWithType: UIElement.IsStylusCaptureWithin\n  fullName: UIElement.IsStylusCaptureWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that determines whether stylus capture is held by this element, or an element within the element bounds and its visual tree. This is a dependency property.\n  remarks: \"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusCaptureWithin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsStylusCaptureWithinProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusCaptureWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element or a contained element has stylus capture; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsStylusCaptureWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged\n  commentId: E:System.Windows.UIElement.IsStylusCaptureWithinChanged\n  id: IsStylusCaptureWithinChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusCaptureWithinChanged\n  nameWithType: UIElement.IsStylusCaptureWithinChanged\n  fullName: UIElement.IsStylusCaptureWithinChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"></xref> property changes on this element.\n  remarks: This is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty\n  commentId: F:System.Windows.UIElement.IsStylusCaptureWithinProperty\n  id: IsStylusCaptureWithinProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusCaptureWithinProperty\n  nameWithType: UIElement.IsStylusCaptureWithinProperty\n  fullName: UIElement.IsStylusCaptureWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsStylusCaptureWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusDirectlyOver\n  commentId: P:System.Windows.UIElement.IsStylusDirectlyOver\n  id: IsStylusDirectlyOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusDirectlyOver\n  nameWithType: UIElement.IsStylusDirectlyOver\n  fullName: UIElement.IsStylusDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.  This is a dependency property.\n  remarks: \"Unlike <xref:System.Windows.UIElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element's deeper compositing (the visual tree), this property will be `false`.  \\n  \\n Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.UIElement.IsStylusOver%2A> instead.  \\n  \\n If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusDirectlyOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsStylusDirectlyOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusDirectlyOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stylus pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsStylusDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged\n  commentId: E:System.Windows.UIElement.IsStylusDirectlyOverChanged\n  id: IsStylusDirectlyOverChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusDirectlyOverChanged\n  nameWithType: UIElement.IsStylusDirectlyOverChanged\n  fullName: UIElement.IsStylusDirectlyOverChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty\n  commentId: F:System.Windows.UIElement.IsStylusDirectlyOverProperty\n  id: IsStylusDirectlyOverProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusDirectlyOverProperty\n  nameWithType: UIElement.IsStylusDirectlyOverProperty\n  fullName: UIElement.IsStylusDirectlyOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsStylusDirectlyOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusOver\n  commentId: P:System.Windows.UIElement.IsStylusOver\n  id: IsStylusOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusOver\n  nameWithType: UIElement.IsStylusOver\n  fullName: UIElement.IsStylusOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether the stylus cursor is located over this element (including visual child elements).  This is a dependency property.\n  remarks: \"If this element has stylus capture, this property will continue to return `true` until stylus capture is lost and the pointer is out of its bounds.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsStylusOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if stylus cursor is over the element or its child elements; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.UIElement.IsStylusOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsStylusOverProperty\n  commentId: F:System.Windows.UIElement.IsStylusOverProperty\n  id: IsStylusOverProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsStylusOverProperty\n  nameWithType: UIElement.IsStylusOverProperty\n  fullName: UIElement.IsStylusOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsStylusOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsVisible\n  commentId: P:System.Windows.UIElement.IsVisible\n  id: IsVisible\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsVisible\n  nameWithType: UIElement.IsVisible\n  fullName: UIElement.IsVisible\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value indicating whether this element is visible in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.\n  remarks: \"Determination of the <xref:System.Windows.UIElement.IsVisible%2A> value takes all factors of layout into account. In contrast, <xref:System.Windows.UIElement.Visibility%2A>, which is a settable property, only indicates the intention to programmatically make an element visible or invisible.  \\n  \\n Elements where <xref:System.Windows.UIElement.IsVisible%2A> is `false` do not participate in input events (or commands), do not influence either the measure or arrange passes of layout, are not focusable, are not in a tab sequence, and will not be reported in hit testing. In contrast, elements where <xref:System.Windows.UIElement.IsEnabled%2A> is `false` will still participate in events and commands, and hit testing, but are also not focusable.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsVisible\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.IsVisibleProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsVisible { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element is visible; otherwise, `false`.'\n  overload: System.Windows.UIElement.IsVisible*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsVisibleChanged\n  commentId: E:System.Windows.UIElement.IsVisibleChanged\n  id: IsVisibleChanged\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsVisibleChanged\n  nameWithType: UIElement.IsVisibleChanged\n  fullName: UIElement.IsVisibleChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.UIElement.IsVisible\"></xref> property changes on this element.\n  remarks: \"This event is not raised if the element is not being rendered by the layout system, for reasons other than the value of the <xref:System.Windows.UIElement.IsVisible%2A> property. For example, the element might not have an associated visual.  \\n  \\n This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\"\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.IsVisibleProperty\n  commentId: F:System.Windows.UIElement.IsVisibleProperty\n  id: IsVisibleProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: IsVisibleProperty\n  nameWithType: UIElement.IsVisibleProperty\n  fullName: UIElement.IsVisibleProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.IsVisible\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsVisibleProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.KeyDown\n  commentId: E:System.Windows.UIElement.KeyDown\n  id: KeyDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: KeyDown\n  nameWithType: UIElement.KeyDown\n  fullName: UIElement.KeyDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is pressed while focus is on this element.\n  remarks: \"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.UIElement.KeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_KeyDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.KeyDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnKeyDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler KeyDown;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.KeyDownEvent\n  commentId: F:System.Windows.UIElement.KeyDownEvent\n  id: KeyDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: KeyDownEvent\n  nameWithType: UIElement.KeyDownEvent\n  fullName: UIElement.KeyDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.KeyDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.KeyUp\n  commentId: E:System.Windows.UIElement.KeyUp\n  id: KeyUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: KeyUp\n  nameWithType: UIElement.KeyUp\n  fullName: UIElement.KeyUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is released while focus is on this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.UIElement.KeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_KeyUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.KeyUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewKeyUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnKeyUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler KeyUp;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.KeyUpEvent\n  commentId: F:System.Windows.UIElement.KeyUpEvent\n  id: KeyUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: KeyUpEvent\n  nameWithType: UIElement.KeyUpEvent\n  fullName: UIElement.KeyUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.KeyUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LayoutUpdated\n  commentId: E:System.Windows.UIElement.LayoutUpdated\n  id: LayoutUpdated\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LayoutUpdated\n  nameWithType: UIElement.LayoutUpdated\n  fullName: UIElement.LayoutUpdated\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the layout of the various visual elements associated with the current <xref href=\"System.Windows.Threading.Dispatcher\"></xref> changes.\n  remarks: \"A layout update can occur as a result of a property change, a window resize, or an explicit user request.  \\n  \\n This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\"\n  syntax:\n    content: public event EventHandler LayoutUpdated;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.LostFocus\n  commentId: E:System.Windows.UIElement.LostFocus\n  id: LostFocus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostFocus\n  nameWithType: UIElement.LostFocus\n  fullName: UIElement.LostFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses logical focus.\n  remarks: \"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.UIElement.Focus%2A> method is called still gets logical focus.  \\n  \\n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.UIElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.  \\n  \\n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \\n  \\n<a name=\\\"routedEventInfo_LostFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.LostFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \\n  \\n-   There is no corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnLostFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.RoutedEventHandler LostFocus;\n    return:\n      type: System.Windows.RoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LostFocusEvent\n  commentId: F:System.Windows.UIElement.LostFocusEvent\n  id: LostFocusEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostFocusEvent\n  nameWithType: UIElement.LostFocusEvent\n  fullName: UIElement.LostFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LostKeyboardFocus\n  commentId: E:System.Windows.UIElement.LostKeyboardFocus\n  id: LostKeyboardFocus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostKeyboardFocus\n  nameWithType: UIElement.LostKeyboardFocus\n  fullName: UIElement.LostKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is no longer focused on this element,.\n  remarks: \"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_LostKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.LostKeyboardFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewLostKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LostKeyboardFocusEvent\n  commentId: F:System.Windows.UIElement.LostKeyboardFocusEvent\n  id: LostKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostKeyboardFocusEvent\n  nameWithType: UIElement.LostKeyboardFocusEvent\n  fullName: UIElement.LostKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.LostKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LostMouseCapture\n  commentId: E:System.Windows.UIElement.LostMouseCapture\n  id: LostMouseCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostMouseCapture\n  nameWithType: UIElement.LostMouseCapture\n  fullName: UIElement.LostMouseCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses mouse capture.\n  remarks: \"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.  \\n  \\n Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_LostMouseCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.LostMouseCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LostMouseCaptureEvent\n  commentId: F:System.Windows.UIElement.LostMouseCaptureEvent\n  id: LostMouseCaptureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostMouseCaptureEvent\n  nameWithType: UIElement.LostMouseCaptureEvent\n  fullName: UIElement.LostMouseCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.LostMouseCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LostStylusCapture\n  commentId: E:System.Windows.UIElement.LostStylusCapture\n  id: LostStylusCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostStylusCapture\n  nameWithType: UIElement.LostStylusCapture\n  fullName: UIElement.LostStylusCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses stylus capture.\n  remarks: \"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \\n  \\n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_LostStylusCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.LostStylusCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.LostStylusCaptureEvent\n  commentId: F:System.Windows.UIElement.LostStylusCaptureEvent\n  id: LostStylusCaptureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostStylusCaptureEvent\n  nameWithType: UIElement.LostStylusCaptureEvent\n  fullName: UIElement.LostStylusCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.LostStylusCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.LostTouchCapture\n  commentId: E:System.Windows.UIElement.LostTouchCapture\n  id: LostTouchCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostTouchCapture\n  nameWithType: UIElement.LostTouchCapture\n  fullName: UIElement.LostTouchCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses a touch capture.\n  remarks: \"<a name=\\\"routedEventInfo_LostTouchCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.LostTouchCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.LostTouchCaptureEvent\n  commentId: F:System.Windows.UIElement.LostTouchCaptureEvent\n  id: LostTouchCaptureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: LostTouchCaptureEvent\n  nameWithType: UIElement.LostTouchCaptureEvent\n  fullName: UIElement.LostTouchCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.LostTouchCapture\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationBoundaryFeedback\n  commentId: E:System.Windows.UIElement.ManipulationBoundaryFeedback\n  id: ManipulationBoundaryFeedback\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationBoundaryFeedback\n  nameWithType: UIElement.ManipulationBoundaryFeedback\n  fullName: UIElement.ManipulationBoundaryFeedback\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the manipulation encounters a boundary.\n  remarks: \"<a name=\\\"routedEventInfo_ManipulationBoundaryFeedback\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>.|\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs> ManipulationBoundaryFeedback;\n    return:\n      type: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\n  commentId: F:System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\n  id: ManipulationBoundaryFeedbackEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationBoundaryFeedbackEvent\n  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent\n  fullName: UIElement.ManipulationBoundaryFeedbackEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ManipulationBoundaryFeedbackEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationCompleted\n  commentId: E:System.Windows.UIElement.ManipulationCompleted\n  id: ManipulationCompleted\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationCompleted\n  nameWithType: UIElement.ManipulationCompleted\n  fullName: UIElement.ManipulationCompleted\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a manipulation and inertia on the <xref href=\"System.Windows.UIElement\"></xref> object is complete.\n  remarks: \"You can use this event to get information about the manipulation when it completes.  For example, you can use the <xref:System.Windows.Input.ManipulationCompletedEventArgs.TotalManipulation%2A?displayProperty=fullName> property to determine the total amount the position of the manipulation changed.  \\n  \\n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n<a name=\\\"routedEventInfo_ManipulationCompleted\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ManipulationCompletedEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationCompletedEventArgs>.|\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.ManipulationCompletedEventArgs> ManipulationCompleted;\n    return:\n      type: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationCompletedEvent\n  commentId: F:System.Windows.UIElement.ManipulationCompletedEvent\n  id: ManipulationCompletedEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationCompletedEvent\n  nameWithType: UIElement.ManipulationCompletedEvent\n  fullName: UIElement.ManipulationCompletedEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ManipulationCompletedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.ManipulationDelta\n  commentId: E:System.Windows.UIElement.ManipulationDelta\n  id: ManipulationDelta\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationDelta\n  nameWithType: UIElement.ManipulationDelta\n  fullName: UIElement.ManipulationDelta\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input device changes position during a manipulation.\n  remarks: \"The <xref:System.Windows.UIElement.ManipulationDelta> event occurs multiple times when the user drags fingers over the screen during a manipulation and again when inertia occurs.  You can use the <xref:System.Windows.Input.ManipulationDeltaEventArgs.IsInertial%2A> property to check whether the event is occurring during inertia.  \\n  \\n The element on with <xref:System.Windows.UIElement.ManipulationDelta> event occurs is not affected in any way when the event occurs.  You must provide the logic to the element that is to be manipulated.  The <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> and <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> properties, which are of type <xref:System.Windows.Input.ManipulationDelta>, contain data about how the position of the manipulations change and interpreted as moving, resizing, or rotating an object.  You apply that information to the element that is to be manipulated.  \\n  \\n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n<a name=\\\"routedEventInfo_ManipulationDelta\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ManipulationDeltaEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationDeltaEventArgs>.|\"\n  example:\n  - \"The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>.  The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window.  If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-csharp[BasicManipulation#ManipulationDelta](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationdelta)]\\n [!code-vb[BasicManipulation#ManipulationDelta](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationdelta)]\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.ManipulationDeltaEventArgs> ManipulationDelta;\n    return:\n      type: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationDeltaEvent\n  commentId: F:System.Windows.UIElement.ManipulationDeltaEvent\n  id: ManipulationDeltaEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationDeltaEvent\n  nameWithType: UIElement.ManipulationDeltaEvent\n  fullName: UIElement.ManipulationDeltaEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ManipulationDeltaEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.ManipulationInertiaStarting\n  commentId: E:System.Windows.UIElement.ManipulationInertiaStarting\n  id: ManipulationInertiaStarting\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationInertiaStarting\n  nameWithType: UIElement.ManipulationInertiaStarting\n  fullName: UIElement.ManipulationInertiaStarting\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input device loses contact with the <xref href=\"System.Windows.UIElement\"></xref> object during a manipulation and inertia begins.\n  remarks: \"The <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs when the user lifts all of the fingers from the screen during a manipulation. For example, if a user \\\"throws\\\" a <xref:System.Windows.UIElement> across a surface, the user will touch the <xref:System.Windows.UIElement> to begin the action, move the finger across the screen for a short distance, and then release the <xref:System.Windows.UIElement>. When the user releases the element, inertia begins and the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event occurs.  The <xref:System.Windows.UIElement> continues to receive <xref:System.Windows.UIElement.ManipulationDelta> events to indicate that inertia is occurring on the element.  \\n  \\n You can use this event to specify the behavior of the inertia.  For example, you can set the initial velocity that is used when inertia begins.  You can also specify the amount of inertia by setting the desired deceleration or by setting the desired placement.  You can set these values for each type of manipulation (translation, expansion, or rotation) independently.  For more information, see <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.  \\n  \\n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n<a name=\\\"routedEventInfo_ManipulationInertiaStarting\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ManipulationInertiaStartingEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationInertiaStartingEventArgs>.|\"\n  example:\n  - \"The following example shows the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event handler and sets the desired deceleration for translation, expansion, and rotation that is used during inertia. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-csharp[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationinertiastarting)]\\n [!code-vb[BasicManipulation#ManipulationInertiaStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationinertiastarting)]\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs> ManipulationInertiaStarting;\n    return:\n      type: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent\n  commentId: F:System.Windows.UIElement.ManipulationInertiaStartingEvent\n  id: ManipulationInertiaStartingEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationInertiaStartingEvent\n  nameWithType: UIElement.ManipulationInertiaStartingEvent\n  fullName: UIElement.ManipulationInertiaStartingEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ManipulationInertiaStartingEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationStarted\n  commentId: E:System.Windows.UIElement.ManipulationStarted\n  id: ManipulationStarted\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationStarted\n  nameWithType: UIElement.ManipulationStarted\n  fullName: UIElement.ManipulationStarted\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when an input device begins a manipulation on the <xref href=\"System.Windows.UIElement\"></xref> object.\n  remarks: \"The <xref:System.Windows.UIElement.ManipulationStarted> event occurs after the <xref:System.Windows.UIElement.ManipulationStarting> event.  You can do the following with the <xref:System.Windows.Input.ManipulationStartedEventArgs>:  \\n  \\n-   Get the element that the manipulation's position is relative to by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationContainer%2A> property.  \\n  \\n-   Get the origin of the manipulation by using the <xref:System.Windows.Input.ManipulationStartedEventArgs.ManipulationOrigin%2A> property.  \\n  \\n-   Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartedEventArgs.Complete%2A> method.  \\n  \\n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n<a name=\\\"routedEventInfo_ManipulationStarted\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ManipulationStartedEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartedEventArgs>.|\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.ManipulationStartedEventArgs> ManipulationStarted;\n    return:\n      type: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ManipulationStartedEvent\n  commentId: F:System.Windows.UIElement.ManipulationStartedEvent\n  id: ManipulationStartedEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationStartedEvent\n  nameWithType: UIElement.ManipulationStartedEvent\n  fullName: UIElement.ManipulationStartedEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.ManipulationStarted\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ManipulationStartedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.ManipulationStarting\n  commentId: E:System.Windows.UIElement.ManipulationStarting\n  id: ManipulationStarting\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationStarting\n  nameWithType: UIElement.ManipulationStarting\n  fullName: UIElement.ManipulationStarting\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the manipulation processor is first created.\n  remarks: \"The <xref:System.Windows.UIElement.ManipulationStarting> event occurs on an element that has the <xref:System.Windows.UIElement.IsManipulationEnabled%2A> property set to `true` when the user puts a finger on it. By default, subsequent manipulation events report the position of the manipulation relative to the element that has <xref:System.Windows.UIElement.IsManipulationEnabled%2A> set to `true`.  You can specify that the position should be relative to another element by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> property. For example, you can make the manipulation relative to the parent of the element.  \\n  \\n You can also do the following in an event handler for <xref:System.Windows.UIElement.ManipulationStarting>:  \\n  \\n-   Specify whether the user needs more than one finger to perform the manipulations by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.IsSingleTouchEnabled%2A?displayProperty=fullName> property.  \\n  \\n-   Specify which types of manipulation are enabled by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Mode%2A?displayProperty=fullName> property to a <xref:System.Windows.Input.ManipulationModes> enumeration.  \\n  \\n-   Specify the center of a single-finger rotation by setting the <xref:System.Windows.Input.ManipulationStartingEventArgs.Pivot%2A?displayProperty=fullName> property.  \\n  \\n-   Cancel the manipulation by calling the <xref:System.Windows.Input.ManipulationStartingEventArgs.Cancel%2A?displayProperty=fullName> method.  \\n  \\n For more information about manipulations, see the [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  For an example of an application that responds to manipulations, see [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n<a name=\\\"routedEventInfo_ManipulationStarting\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.ManipulationStartingEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.ManipulationStartingEventArgs>.|\"\n  example:\n  - \"The following example shows the event handler for the <xref:System.Windows.UIElement.ManipulationStarting> event and sets the <xref:System.Windows.Input.ManipulationStartingEventArgs.ManipulationContainer%2A> to the parent element that receives the manipulation events so that the coordinates of the manipulation are relative to the parent element.  This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/docs/framework/wpf/advanced/walkthrough-creating-your-first-touch-application.md).  \\n  \\n [!code-csharp[BasicManipulation#ManipulationStarting](~/samples/snippets/csharp/VS_Snippets_Wpf/basicmanipulation/csharp/mainwindow.xaml.cs#manipulationstarting)]\\n [!code-vb[BasicManipulation#ManipulationStarting](~/samples/snippets/visualbasic/VS_Snippets_Wpf/basicmanipulation/visualbasic/mainwindow.xaml.vb#manipulationstarting)]\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.ManipulationStartingEventArgs> ManipulationStarting;\n    return:\n      type: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.ManipulationStartingEvent\n  commentId: F:System.Windows.UIElement.ManipulationStartingEvent\n  id: ManipulationStartingEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ManipulationStartingEvent\n  nameWithType: UIElement.ManipulationStartingEvent\n  fullName: UIElement.ManipulationStartingEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.ManipulationStarting\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent ManipulationStartingEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.Measure(System.Windows.Size)\n  commentId: M:System.Windows.UIElement.Measure(System.Windows.Size)\n  id: Measure(System.Windows.Size)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Measure(Size)\n  nameWithType: UIElement.Measure(Size)\n  fullName: UIElement.Measure(Size)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Updates the <xref href=\"System.Windows.UIElement.DesiredSize\"></xref> of a <xref href=\"System.Windows.UIElement\"></xref>. Parent elements call this method from their own <xref href=\"System.Windows.UIElement.MeasureCore(System.Windows.Size)\"></xref> implementations to form a recursive layout update. Calling this method constitutes the first pass (the \"Measure\" pass) of a layout update.\n  remarks: \"Computation of layout positioning in [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] is comprised of a <xref:System.Windows.UIElement.Measure%2A> call and an <xref:System.Windows.UIElement.Arrange%2A> call. During the <xref:System.Windows.UIElement.Measure%2A> call, an element determines its size requirements by using an `availableSize` input. During the <xref:System.Windows.UIElement.Arrange%2A> call, the element size is finalized.  \\n  \\n `availableSize` can be any number from zero to infinite. Elements participating in layout should return the minimum <xref:System.Windows.Size> they require for a given `availableSize`.  \\n  \\n When a layout is first instantiated, it always receives a <xref:System.Windows.UIElement.Measure%2A> call before <xref:System.Windows.UIElement.Arrange%2A>. However, after the first layout pass, it may receive an <xref:System.Windows.UIElement.Arrange%2A> call without a <xref:System.Windows.UIElement.Measure%2A>; this can happen when a property that affects only <xref:System.Windows.UIElement.Arrange%2A> is changed (such as alignment), or when the parent receives an <xref:System.Windows.UIElement.Arrange%2A> without a <xref:System.Windows.UIElement.Measure%2A>. A <xref:System.Windows.UIElement.Measure%2A> call will automatically invalidate an <xref:System.Windows.UIElement.Arrange%2A> call.  \\n  \\n Layout updates happen asynchronously, such that the main thread is not waiting for every possible layout change. Querying an element via code-behind checking of property values may not immediately reflect changes to properties that interact with the sizing or layout characteristics (the <xref:System.Windows.FrameworkElement.Width%2A> property, for example).  \\n  \\n> [!NOTE]\\n>  Layout updates can be forced by using the <xref:System.Windows.UIElement.UpdateLayout%2A> method. However, calling this method is usually unnecessary and can cause poor performance.  \\n  \\n The layout system keeps two separate queues of invalid layouts, one for <xref:System.Windows.UIElement.Measure%2A> and one for <xref:System.Windows.UIElement.Arrange%2A>. The layout queue is sorted based upon the order of elements in the visual tree of the element performing layout; elements higher in the tree are at the top of the queue, to avoid redundant layouts caused by repeated changes in parents. Duplicate entries are automatically removed from the queue, and elements are automatically removed from the queue if they are already layout-validated.  \\n  \\n When updating layout, the <xref:System.Windows.UIElement.Measure%2A> queue is emptied first, followed by the <xref:System.Windows.UIElement.Arrange%2A> queue. An element in the <xref:System.Windows.UIElement.Arrange%2A> queue will never be arranged if there is an element in the <xref:System.Windows.UIElement.Measure%2A> queue.\"\n  syntax:\n    content: public void Measure (System.Windows.Size availableSize);\n    parameters:\n    - id: availableSize\n      type: System.Windows.Size\n      description: The available space that a parent element can allocate a child element. A child element can request a larger space than what is available; the provided size might be accommodated if scrolling is possible in the content model for the current element.\n  overload: System.Windows.UIElement.Measure*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)\n  commentId: M:System.Windows.UIElement.MeasureCore(System.Windows.Size)\n  id: MeasureCore(System.Windows.Size)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MeasureCore(Size)\n  nameWithType: UIElement.MeasureCore(Size)\n  fullName: UIElement.MeasureCore(Size)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: When overridden in a derived class, provides measurement logic for sizing this element properly, with consideration of the size of any child element content.\n  remarks: \"It is more common to derive an element from <xref:System.Windows.FrameworkElement> rather than <xref:System.Windows.UIElement>. If you are deriving from <xref:System.Windows.FrameworkElement>, note that an override of <xref:System.Windows.UIElement.MeasureCore%2A> on <xref:System.Windows.FrameworkElement> seals the <xref:System.Windows.UIElement.MeasureCore%2A> method. Therefore, you only override <xref:System.Windows.UIElement.MeasureCore%2A> as a means to alter layout measure characteristics if you derive from <xref:System.Windows.UIElement> through an inheritance that does not include <xref:System.Windows.FrameworkElement>. This might be the case if you are attempting to build your own implementation on the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] core-level. Otherwise, if you are deriving from <xref:System.Windows.FrameworkElement>, then the implementation template for Measure behavior is the <xref:System.Windows.FrameworkElement> implementation of .<xref:System.Windows.FrameworkElement.MeasureOverride%2A>.  \\n  \\n A parent element with child elements must call <xref:System.Windows.UIElement.Measure%2A> on each child, otherwise these child elements are not sized or arranged and will effectively disappear from layout.\"\n  example:\n  - \"A typical override of <xref:System.Windows.UIElement.MeasureCore%2A> follows this approximate pattern (there is not a built-in collection called `VisualChildren`; `VisualChildren` is a  placeholder that represents whatever child collection your element maintains).  \\n  \\n [!code-csharp[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#uielementmeasureoverride)]\\n [!code-vb[CorePseudocode#UIElementMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#uielementmeasureoverride)]  \\n  \\n-   You must call <xref:System.Windows.UIElement.Measure%2A> on each child element.  \\n  \\n-   Generally, your implementation should cache measurement information between the <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> method calls in the same element.  \\n  \\n-   Calling base implementations of <xref:System.Windows.UIElement.MeasureCore%2A> is not required, but might be appropriate if the base implementation provides a desired layout capability.  \\n  \\n-   Calls to <xref:System.Windows.UIElement.Measure%2A> on child elements should pass either the same `availableSize` as the parent, or a subset of the area, depending on the type of layout the parent element supports. For example, it would be valid to remove the area for an element-specific border or padding, a scrollbar, or a custom control.\"\n  syntax:\n    content: protected virtual System.Windows.Size MeasureCore (System.Windows.Size availableSize);\n    parameters:\n    - id: availableSize\n      type: System.Windows.Size\n      description: The available size that the parent element can allocate for the child.\n    return:\n      type: System.Windows.Size\n      description: The desired size of this element in layout.\n  overload: System.Windows.UIElement.MeasureCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseDown\n  commentId: E:System.Windows.UIElement.MouseDown\n  id: MouseDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseDown\n  nameWithType: UIElement.MouseDown\n  fullName: UIElement.MouseDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.UIElement.MouseDown> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonDown> or <xref:System.Windows.UIElement.MouseRightButtonDown>.  \\n  \\n> [!IMPORTANT]\\n>  Some controls might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \\n  \\n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \\n  \\n-   Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \\n  \\n-   Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \\n  \\n<a name=\\\"routedEventInfo_MouseDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.MouseDownEvent\n  commentId: F:System.Windows.UIElement.MouseDownEvent\n  id: MouseDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseDownEvent\n  nameWithType: UIElement.MouseDownEvent\n  fullName: UIElement.MouseDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseEnter\n  commentId: E:System.Windows.UIElement.MouseEnter\n  id: MouseEnter\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseEnter\n  nameWithType: UIElement.MouseEnter\n  fullName: UIElement.MouseEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer enters the bounds of this element.\n  remarks: \"<xref:System.Windows.UIElement.MouseEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.UIElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n A <xref:System.Windows.Controls.Button> (or any <xref:System.Windows.Controls.Primitives.ButtonBase> derived class) has native handling for a <xref:System.Windows.UIElement.KeyDown> event when the button has focus, and the pressed key is the space bar. The native handling raises the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event with the button as the source, and also captures the mouse, even though the mouse pointer does not appear to move. As a result of the mouse capture, a <xref:System.Windows.UIElement.MouseEnter> event is also raised with the button as the source. In general, if an element captures the mouse, then <xref:System.Windows.UIElement.MouseEnter> is raised, as well as <xref:System.Windows.UIElement.GotMouseCapture> and possibly other control-specific events.  \\n  \\n<a name=\\\"routedEventInfo_MouseEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseEnterEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler MouseEnter;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseEnterEvent\n  commentId: F:System.Windows.UIElement.MouseEnterEvent\n  id: MouseEnterEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseEnterEvent\n  nameWithType: UIElement.MouseEnterEvent\n  fullName: UIElement.MouseEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseLeave\n  commentId: E:System.Windows.UIElement.MouseLeave\n  id: MouseLeave\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseLeave\n  nameWithType: UIElement.MouseLeave\n  fullName: UIElement.MouseLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer leaves the bounds of this element.\n  remarks: \"<xref:System.Windows.UIElement.MouseLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.UIElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.UIElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_MouseLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseLeaveEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler MouseLeave;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseLeaveEvent\n  commentId: F:System.Windows.UIElement.MouseLeaveEvent\n  id: MouseLeaveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseLeaveEvent\n  nameWithType: UIElement.MouseLeaveEvent\n  fullName: UIElement.MouseLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseLeftButtonDown\n  commentId: E:System.Windows.UIElement.MouseLeftButtonDown\n  id: MouseLeftButtonDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseLeftButtonDown\n  nameWithType: UIElement.MouseLeftButtonDown\n  fullName: UIElement.MouseLeftButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n> [!IMPORTANT]\\n>  Some control classes might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \\n  \\n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.UIElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \\n  \\n-   Attach handlers for the <xref:System.Windows.UIElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \\n  \\n-   Register a handler on the control procedurally by calling <xref:System.Windows.UIElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \\n  \\n<a name=\\\"routedEventInfo_MouseLeftButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseLeftButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseLeftButtonDownEvent\n  commentId: F:System.Windows.UIElement.MouseLeftButtonDownEvent\n  id: MouseLeftButtonDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseLeftButtonDownEvent\n  nameWithType: UIElement.MouseLeftButtonDownEvent\n  fullName: UIElement.MouseLeftButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseLeftButtonUp\n  commentId: E:System.Windows.UIElement.MouseLeftButtonUp\n  id: MouseLeftButtonUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseLeftButtonUp\n  nameWithType: UIElement.MouseLeftButtonUp\n  fullName: UIElement.MouseLeftButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n<a name=\\\"routedEventInfo_MouseLeftButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseLeftButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseLeftButtonUpEvent\n  commentId: F:System.Windows.UIElement.MouseLeftButtonUpEvent\n  id: MouseLeftButtonUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseLeftButtonUpEvent\n  nameWithType: UIElement.MouseLeftButtonUpEvent\n  fullName: UIElement.MouseLeftButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseMove\n  commentId: E:System.Windows.UIElement.MouseMove\n  id: MouseMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseMove\n  nameWithType: UIElement.MouseMove\n  fullName: UIElement.MouseMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer moves while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_MouseMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler MouseMove;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseMoveEvent\n  commentId: F:System.Windows.UIElement.MouseMoveEvent\n  id: MouseMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseMoveEvent\n  nameWithType: UIElement.MouseMoveEvent\n  fullName: UIElement.MouseMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseRightButtonDown\n  commentId: E:System.Windows.UIElement.MouseRightButtonDown\n  id: MouseRightButtonDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseRightButtonDown\n  nameWithType: UIElement.MouseRightButtonDown\n  fullName: UIElement.MouseRightButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.MouseDoubleClick>.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_MouseRightButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseRightButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseRightButtonDownEvent\n  commentId: F:System.Windows.UIElement.MouseRightButtonDownEvent\n  id: MouseRightButtonDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseRightButtonDownEvent\n  nameWithType: UIElement.MouseRightButtonDownEvent\n  fullName: UIElement.MouseRightButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseRightButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.MouseRightButtonUp\n  commentId: E:System.Windows.UIElement.MouseRightButtonUp\n  id: MouseRightButtonUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseRightButtonUp\n  nameWithType: UIElement.MouseRightButtonUp\n  fullName: UIElement.MouseRightButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.MouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n<a name=\\\"routedEventInfo_MouseRightButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseRightButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseRightButtonUpEvent\n  commentId: F:System.Windows.UIElement.MouseRightButtonUpEvent\n  id: MouseRightButtonUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseRightButtonUpEvent\n  nameWithType: UIElement.MouseRightButtonUpEvent\n  fullName: UIElement.MouseRightButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseRightButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.MouseUp\n  commentId: E:System.Windows.UIElement.MouseUp\n  id: MouseUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseUp\n  nameWithType: UIElement.MouseUp\n  fullName: UIElement.MouseUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is released over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.UIElement.MouseUp> event is often raised together with either <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.MouseLeftButtonUp> or <xref:System.Windows.UIElement.MouseRightButtonUp>.  \\n  \\n<a name=\\\"routedEventInfo_MouseUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseUpEvent\n  commentId: F:System.Windows.UIElement.MouseUpEvent\n  id: MouseUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseUpEvent\n  nameWithType: UIElement.MouseUpEvent\n  fullName: UIElement.MouseUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.MouseWheel\n  commentId: E:System.Windows.UIElement.MouseWheel\n  id: MouseWheel\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseWheel\n  nameWithType: UIElement.MouseWheel\n  fullName: UIElement.MouseWheel\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.\n  remarks: \"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.UIElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.MouseWheel> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_MouseWheel\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.MouseWheelEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewMouseWheel>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;\n    return:\n      type: System.Windows.Input.MouseWheelEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MouseWheelEvent\n  commentId: F:System.Windows.UIElement.MouseWheelEvent\n  id: MouseWheelEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MouseWheelEvent\n  nameWithType: UIElement.MouseWheelEvent\n  fullName: UIElement.MouseWheelEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.MouseWheel\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  commentId: M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  id: MoveFocus(System.Windows.Input.TraversalRequest)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: MoveFocus(TraversalRequest)\n  nameWithType: UIElement.MoveFocus(TraversalRequest)\n  fullName: UIElement.MoveFocus(TraversalRequest)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.\n  remarks: Make sure you check the return value of this method. A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.\n  syntax:\n    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);\n    parameters:\n    - id: request\n      type: System.Windows.Input.TraversalRequest\n      description: A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.\n    return:\n      type: System.Boolean\n      description: '`true` if the requested traversal was performed; otherwise, `false`.'\n  overload: System.Windows.UIElement.MoveFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  commentId: M:System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  id: OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnAccessKey(AccessKeyEventArgs)\n  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)\n  fullName: UIElement.OnAccessKey(AccessKeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for when an access key that is meaningful for this element is invoked.\n  remarks: There is no actual AccessKey event in the <xref:System.Windows.UIElement> class, or elsewhere, which you can raise or attach handlers for. Instead, the event is originated via a dedicated manager class, <xref:System.Windows.Input.AccessKeyManager>, which post-processes all input to search for access keys that are applicable to the entire input model.\n  syntax:\n    content: protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.AccessKeyEventArgs\n      description: The event data to the access key event. The event data reports which key was invoked, and indicate whether the <xref href=\"System.Windows.Input.AccessKeyManager\"></xref> object that controls the sending of these events also sent this access key invocation to other elements.\n  overload: System.Windows.UIElement.OnAccessKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)\n  commentId: M:System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)\n  id: OnChildDesiredSizeChanged(System.Windows.UIElement)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnChildDesiredSizeChanged(UIElement)\n  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)\n  fullName: UIElement.OnChildDesiredSizeChanged(UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Supports layout behavior when a child element is resized.\n  remarks: This method is typically not called by your application code. It is exposed so that derived element classes can make further checks on their own possibly invalid layout state. Classes could also attempt optimizations to minimize the processing time for a layout pass based on size changes to child elements. An example derived element class that implements <xref:System.Windows.UIElement.OnChildDesiredSizeChanged%2A> is the <xref:System.Windows.Controls.Grid> control.\n  syntax:\n    content: protected virtual void OnChildDesiredSizeChanged (System.Windows.UIElement child);\n    parameters:\n    - id: child\n      type: System.Windows.UIElement\n      description: The child element that is being resized.\n  overload: System.Windows.UIElement.OnChildDesiredSizeChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnCreateAutomationPeer\n  commentId: M:System.Windows.UIElement.OnCreateAutomationPeer\n  id: OnCreateAutomationPeer\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnCreateAutomationPeer()\n  nameWithType: UIElement.OnCreateAutomationPeer()\n  fullName: UIElement.OnCreateAutomationPeer()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.\n  syntax:\n    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.Peers.AutomationPeer\n      description: The type-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementation.\n  overload: System.Windows.UIElement.OnCreateAutomationPeer*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)\n  id: OnDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnDragEnter(DragEventArgs)\n  nameWithType: UIElement.OnDragEnter(DragEventArgs)\n  fullName: UIElement.OnDragEnter(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnDragEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)\n  id: OnDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnDragLeave(DragEventArgs)\n  nameWithType: UIElement.OnDragLeave(DragEventArgs)\n  fullName: UIElement.OnDragLeave(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnDragLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)\n  id: OnDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnDragOver(DragEventArgs)\n  nameWithType: UIElement.OnDragOver(DragEventArgs)\n  fullName: UIElement.OnDragOver(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnDragOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)\n  id: OnDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnDrop(DragEventArgs)\n  nameWithType: UIElement.OnDrop(DragEventArgs)\n  fullName: UIElement.OnDrop(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnDrop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  commentId: M:System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)\n  fullName: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.GiveFeedbackEventArgs\n      description: The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnGiveFeedback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  id: OnGotFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnGotFocus(RoutedEventArgs)\n  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)\n  fullName: UIElement.OnGotFocus(RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> routed event by using the event data provided.\n  remarks: \"This method, although virtual, does have a default implementation that raises the event.  \\n  \\n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. The <xref:System.Windows.UIElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.\"\n  syntax:\n    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.GotFocus\"></xref> event.\n  overload: System.Windows.UIElement.OnGotFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnGotKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnGotMouseCapture(MouseEventArgs)\n  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)\n  fullName: UIElement.OnGotMouseCapture(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnGotMouseCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnGotStylusCapture(StylusEventArgs)\n  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)\n  fullName: UIElement.OnGotStylusCapture(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnGotStylusCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnGotTouchCapture(TouchEventArgs)\n  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)\n  fullName: UIElement.OnGotTouchCapture(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.GotTouchCapture\"></xref> routed event that occurs when a touch is captured to this element.\n  remarks: The <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnGotTouchCapture%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnGotTouchCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.UIElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsKeyboardFocusedChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked just before the <xref href=\"System.Windows.UIElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> dependency property changes . The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseCapturedChanged> event is not a routed event; Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsMouseCapturedChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  syntax:\n    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.UIElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsStylusCapturedChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.UIElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.UIElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  id: OnKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnKeyDown(KeyEventArgs)\n  nameWithType: UIElement.OnKeyDown(KeyEventArgs)\n  fullName: UIElement.OnKeyDown(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyDown%2A> is not invoked.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnKeyDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  id: OnKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnKeyUp(KeyEventArgs)\n  nameWithType: UIElement.OnKeyUp(KeyEventArgs)\n  fullName: UIElement.OnKeyUp(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.UIElement.OnKeyUp%2A> is not invoked.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnKeyUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  id: OnLostFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnLostFocus(RoutedEventArgs)\n  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)\n  fullName: UIElement.OnLostFocus(RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> routed event by using the event data that is provided.\n  remarks: \"This method, although virtual, does have a default implementation that raises the event.  \\n  \\n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.\"\n  syntax:\n    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.UIElement.LostFocus\"></xref> event.\n  overload: System.Windows.UIElement.OnLostFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains event data.\n  overload: System.Windows.UIElement.OnLostKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnLostMouseCapture(MouseEventArgs)\n  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)\n  fullName: UIElement.OnLostMouseCapture(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains event data.\n  overload: System.Windows.UIElement.OnLostMouseCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnLostStylusCapture(StylusEventArgs)\n  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)\n  fullName: UIElement.OnLostStylusCapture(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains event data.\n  overload: System.Windows.UIElement.OnLostStylusCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnLostTouchCapture(TouchEventArgs)\n  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)\n  fullName: UIElement.OnLostTouchCapture(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.LostTouchCapture\"></xref> routed event that occurs when this element loses a touch capture.\n  remarks: The <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.UIElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnLostTouchCapture%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnLostTouchCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  commentId: M:System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  fullName: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Called when the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event occurs.\n  remarks: The <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationBoundaryFeedback%2A> method of the base class so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n      description: The data for the event.\n  overload: System.Windows.UIElement.OnManipulationBoundaryFeedback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  commentId: M:System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  id: OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnManipulationCompleted(ManipulationCompletedEventArgs)\n  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)\n  fullName: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Called when the <xref href=\"System.Windows.UIElement.ManipulationCompleted\"></xref> event occurs.\n  remarks: The <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationCompleted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationCompleted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationCompleted%2A> method of the base class so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnManipulationCompleted (System.Windows.Input.ManipulationCompletedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.ManipulationCompletedEventArgs\n      description: The data for the event.\n  overload: System.Windows.UIElement.OnManipulationCompleted*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  commentId: M:System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  id: OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnManipulationDelta(ManipulationDeltaEventArgs)\n  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)\n  fullName: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Called when the <xref href=\"System.Windows.UIElement.ManipulationDelta\"></xref> event occurs.\n  remarks: The <xref:System.Windows.UIElement.OnManipulationDelta%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationDelta%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationDelta> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationDelta%2A> method of the base class so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnManipulationDelta (System.Windows.Input.ManipulationDeltaEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.ManipulationDeltaEventArgs\n      description: The data for the event.\n  overload: System.Windows.UIElement.OnManipulationDelta*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  commentId: M:System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  id: OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n  fullName: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Called when the <xref href=\"System.Windows.UIElement.ManipulationInertiaStarting\"></xref> event occurs.\n  remarks: The <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationInertiaStarting> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationInertiaStarting%2A> method of the base class so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnManipulationInertiaStarting (System.Windows.Input.ManipulationInertiaStartingEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.ManipulationInertiaStartingEventArgs\n      description: The data for the event.\n  overload: System.Windows.UIElement.OnManipulationInertiaStarting*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  commentId: M:System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  id: OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnManipulationStarted(ManipulationStartedEventArgs)\n  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)\n  fullName: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Called when the <xref href=\"System.Windows.UIElement.ManipulationStarted\"></xref> event occurs.\n  remarks: The <xref:System.Windows.UIElement.OnManipulationStarted%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarted%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarted> event. Be sure to call the <xref:System.Windows.UIElement.OnManipulationStarted%2A> method of the base class so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnManipulationStarted (System.Windows.Input.ManipulationStartedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.ManipulationStartedEventArgs\n      description: The data for the event.\n  overload: System.Windows.UIElement.OnManipulationStarted*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  commentId: M:System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  id: OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnManipulationStarting(ManipulationStartingEventArgs)\n  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)\n  fullName: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.ManipulationStarting\"></xref> routed event that occurs when the manipulation processor is first created.\n  remarks: The <xref:System.Windows.UIElement.OnManipulationStarting%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnManipulationStarting%2A> in a derived class to handle the <xref:System.Windows.UIElement.ManipulationStarting> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnManipulationStarting%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnManipulationStarting (System.Windows.Input.ManipulationStartingEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.ManipulationStartingEventArgs\n      description: A <xref href=\"System.Windows.Input.ManipulationStartingEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnManipulationStarting*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseDown%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonDown> and <xref:System.Windows.UIElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.\n  overload: System.Windows.UIElement.OnMouseDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseEnter(MouseEventArgs)\n  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)\n  fullName: UIElement.OnMouseEnter(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnMouseEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseLeave(MouseEventArgs)\n  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)\n  fullName: UIElement.OnMouseLeave(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnMouseLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonDown\"></xref> routed event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonDown>. Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.\"\n  syntax:\n    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.\n  overload: System.Windows.UIElement.OnMouseLeftButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseLeftButtonUp>. Although you can mark the <xref:System.Windows.UIElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseLeftButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.\n  overload: System.Windows.UIElement.OnMouseLeftButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  id: OnMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseMove(MouseEventArgs)\n  nameWithType: UIElement.OnMouseMove(MouseEventArgs)\n  fullName: UIElement.OnMouseMove(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnMouseMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.\"\n  syntax:\n    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.\n  overload: System.Windows.UIElement.OnMouseRightButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonUp>. Although you can mark the <xref:System.Windows.UIElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnMouseRightButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.\n  overload: System.Windows.UIElement.OnMouseRightButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnMouseUp%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.MouseLeftButtonUp> and <xref:System.Windows.UIElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the mouse button was released.\n  overload: System.Windows.UIElement.OnMouseUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  commentId: M:System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnMouseWheel(MouseWheelEventArgs)\n  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)\n  fullName: UIElement.OnMouseWheel(MouseWheelEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseWheelEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnMouseWheel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  id: OnPreviewDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewDragEnter(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)\n  fullName: UIElement.OnPreviewDragEnter(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewDragEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  id: OnPreviewDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewDragLeave(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)\n  fullName: UIElement.OnPreviewDragLeave(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewDragLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  id: OnPreviewDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewDragOver(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)\n  fullName: UIElement.OnPreviewDragOver(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewDragOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  id: OnPreviewDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewDrop(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)\n  fullName: UIElement.OnPreviewDrop(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewDrop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  fullName: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.GiveFeedbackEventArgs\n      description: The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewGiveFeedback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewGotKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewKeyDown(KeyEventArgs)\n  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)\n  fullName: UIElement.OnPreviewKeyDown(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewKeyDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewKeyUp(KeyEventArgs)\n  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)\n  fullName: UIElement.OnPreviewKeyUp(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewKeyUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewLostKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were pressed.\n  overload: System.Windows.UIElement.OnPreviewMouseDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.\n  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.\n  overload: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseMove(MouseEventArgs)\n  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)\n  fullName: UIElement.OnPreviewMouseMove(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewMouseMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.\n  overload: System.Windows.UIElement.OnPreviewMouseRightButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.UIElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Although you can mark the <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.UIElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.UIElement> by overriding <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.\n  overload: System.Windows.UIElement.OnPreviewMouseRightButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.UIElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were released.\n  overload: System.Windows.UIElement.OnPreviewMouseUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewMouseWheel(MouseWheelEventArgs)\n  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n  fullName: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseWheelEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewMouseWheel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.QueryContinueDragEventArgs\n      description: The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewQueryContinueDrag*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  fullName: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  fullName: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusDown(StylusDownEventArgs)\n  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)\n  fullName: UIElement.OnPreviewStylusDown(StylusDownEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusDownEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusInAirMove(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusInAirMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusInRange(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusInRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusInRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusMove(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusOutOfRange(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusOutOfRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusSystemGestureEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusSystemGesture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewStylusUp(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusUp(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewStylusUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewTextInput(TextCompositionEventArgs)\n  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)\n  fullName: UIElement.OnPreviewTextInput(TextCompositionEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TextCompositionEventArgs\n      description: The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewTextInput*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewTouchDown(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchDown(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchDown\"></xref> routed event that occurs when a touch presses this element.\n  remarks: The <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewTouchDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewTouchMove(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchMove(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchMove\"></xref> routed event that occurs when a touch moves while inside this element.\n  remarks: The <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewTouchMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnPreviewTouchUp(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchUp(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.PreviewTouchUp\"></xref> routed event that occurs when a touch is released inside this element.\n  remarks: The <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnPreviewTouchUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  commentId: M:System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.QueryContinueDragEventArgs\n      description: The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnQueryContinueDrag*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  commentId: M:System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnQueryCursor(QueryCursorEventArgs)\n  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)\n  fullName: UIElement.OnQueryCursor(QueryCursorEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.QueryCursorEventArgs\n      description: The <xref href=\"System.Windows.Input.QueryCursorEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnQueryCursor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\n  commentId: M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\n  id: OnRender(System.Windows.Media.DrawingContext)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnRender(DrawingContext)\n  nameWithType: UIElement.OnRender(DrawingContext)\n  fullName: UIElement.OnRender(DrawingContext)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.\n  remarks: This method has no default implementation in the <xref:System.Windows.UIElement> class.\n  example:\n  - \"The following code example shows a possible implementation for a panel derived class.  \\n  \\n [!code-csharp[LightWeightCustomPanel#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LightWeightCustomPanel/CSharp/OffsetPanel.cs#1)]\\n [!code-vb[LightWeightCustomPanel#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LightWeightCustomPanel/visualbasic/offsetpanel.vb#1)]\"\n  syntax:\n    content: protected virtual void OnRender (System.Windows.Media.DrawingContext drawingContext);\n    parameters:\n    - id: drawingContext\n      type: System.Windows.Media.DrawingContext\n      description: The drawing instructions for a specific element. This context is provided to the layout system.\n  overload: System.Windows.UIElement.OnRender*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  commentId: M:System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  id: OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnRenderSizeChanged(SizeChangedInfo)\n  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)\n  fullName: UIElement.OnRenderSizeChanged(SizeChangedInfo)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: When overridden in a derived class, participates in rendering operations that are directed by the layout system. This method is invoked after layout update, and before rendering, if the element's <xref href=\"System.Windows.UIElement.RenderSize\"></xref> has changed as a result of layout update.\n  remarks: This method has no default implementation. A typical WPF framework-level element uses the override implementation from <xref:System.Windows.FrameworkElement>. The <xref:System.Windows.FrameworkElement> implementation invalidates the <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.Height%2A> properties and handles the basics of remaking the layout. Overriding <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> at the <xref:System.Windows.UIElement> level implies that your element implementation is deliberately not using the WPF framework-level implementation, and therefore your element must handle layout logic more directly, typically by writing a replacement layout system.\n  syntax:\n    content: protected virtual void OnRenderSizeChanged (System.Windows.SizeChangedInfo info);\n    parameters:\n    - id: info\n      type: System.Windows.SizeChangedInfo\n      description: The packaged parameters (<xref href=\"System.Windows.SizeChangedInfo\"></xref>), which includes old and new sizes, and which dimension actually changes.\n  overload: System.Windows.UIElement.OnRenderSizeChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)\n  fullName: UIElement.OnStylusButtonDown(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)\n  fullName: UIElement.OnStylusButtonUp(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusDown(StylusDownEventArgs)\n  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)\n  fullName: UIElement.OnStylusDown(StylusDownEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusDownEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusEnter(StylusEventArgs)\n  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)\n  fullName: UIElement.OnStylusEnter(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusInAirMove(StylusEventArgs)\n  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)\n  fullName: UIElement.OnStylusInAirMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusInAirMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusInRange(StylusEventArgs)\n  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)\n  fullName: UIElement.OnStylusInRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusInRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusLeave(StylusEventArgs)\n  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)\n  fullName: UIElement.OnStylusLeave(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  id: OnStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusMove(StylusEventArgs)\n  nameWithType: UIElement.OnStylusMove(StylusEventArgs)\n  fullName: UIElement.OnStylusMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusOutOfRange(StylusEventArgs)\n  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)\n  fullName: UIElement.OnStylusOutOfRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusOutOfRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusSystemGestureEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusSystemGesture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  id: OnStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnStylusUp(StylusEventArgs)\n  nameWithType: UIElement.OnStylusUp(StylusEventArgs)\n  fullName: UIElement.OnStylusUp(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnStylusUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  commentId: M:System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnTextInput(TextCompositionEventArgs)\n  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)\n  fullName: UIElement.OnTextInput(TextCompositionEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TextCompositionEventArgs\n      description: The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnTextInput*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  id: OnTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnTouchDown(TouchEventArgs)\n  nameWithType: UIElement.OnTouchDown(TouchEventArgs)\n  fullName: UIElement.OnTouchDown(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> routed event that occurs when a touch presses inside this element.\n  remarks: The <xref:System.Windows.UIElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchDown%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnTouchDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnTouchEnter(TouchEventArgs)\n  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)\n  fullName: UIElement.OnTouchEnter(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.TouchEnter\"></xref> routed event that occurs when a touch moves from outside to inside the bounds of this element.\n  remarks: The<xref:System.Windows.UIElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchEnter%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnTouchEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnTouchLeave(TouchEventArgs)\n  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)\n  fullName: UIElement.OnTouchLeave(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.TouchLeave\"></xref> routed event that occurs when a touch moves from inside to outside the bounds of this <xref href=\"System.Windows.UIElement\"></xref>.\n  remarks: The <xref:System.Windows.UIElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchLeave%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnTouchLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  id: OnTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnTouchMove(TouchEventArgs)\n  nameWithType: UIElement.OnTouchMove(TouchEventArgs)\n  fullName: UIElement.OnTouchMove(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> routed event that occurs when a touch moves while inside this element.\n  remarks: The <xref:System.Windows.UIElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchMove%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnTouchMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  id: OnTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnTouchUp(TouchEventArgs)\n  nameWithType: UIElement.OnTouchUp(TouchEventArgs)\n  fullName: UIElement.OnTouchUp(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> routed event that occurs when a touch is released inside this element.\n  remarks: The <xref:System.Windows.UIElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.UIElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.UIElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.UIElement.OnTouchUp%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.UIElement.OnTouchUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)\n  commentId: M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)\n  id: OnVisualParentChanged(System.Windows.DependencyObject)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OnVisualParentChanged(DependencyObject)\n  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)\n  fullName: UIElement.OnVisualParentChanged(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when the parent element of this <xref href=\"System.Windows.UIElement\"></xref> reports a change to its underlying visual parent.\n  syntax:\n    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);\n    parameters:\n    - id: oldParent\n      type: System.Windows.DependencyObject\n      description: The previous parent. This may be provided as `null` if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a parent element previously.\n  overload: System.Windows.UIElement.OnVisualParentChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.Opacity\n  commentId: P:System.Windows.UIElement.Opacity\n  id: Opacity\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Opacity\n  nameWithType: UIElement.Opacity\n  fullName: UIElement.Opacity\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets the opacity factor applied to the entire <xref href=\"System.Windows.UIElement\"></xref> when it is rendered in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  This is a dependency property.\n  remarks: \"The 1.0 default value is the default provided by the initial metadata of this dependency property on the <xref:System.Windows.UIElement> class. Other derived classes may potentially change this default value by overriding the metadata from within their class constructor.  \\n  \\n The value of <xref:System.Windows.UIElement.Opacity%2A> won't be applied to actual layout unless the element is also visible (<xref:System.Windows.UIElement.IsVisible%2A> is `true`).  \\n  \\n <xref:System.Windows.UIElement.Opacity%2A> is applied from parent elements on down the element tree to child elements, but the visible effects of the nested opacity settings aren't indicated in the property value of individual child elements. For instance, if a list has a 50% (0.5) opacity and one of its list items has its own opacity set to 20% (0.2), the net visible opacity for that list item will be rendered as if it were 10% (0.1), but the property value of the list item <xref:System.Windows.UIElement.Opacity%2A> property would still be 0.2 when queried.  \\n  \\n Even if the declared or evaluated opacity is 0, an element still participates in input events and commands, and is potentially focusable. This aspect can be useful, for instance you can use an opacity-zero object (such as a shape) for masking underlying objects with transparent elements. The opacity-zero object can then handle all the input event processing for an underlying area. However, the `Background` or `Fill` of the object or shape should be set to a value, even if it is <xref:System.Windows.Media.Brushes.Transparent%2A>, otherwise hit testing is not enabled, and no events are received.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Opacity\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.OpacityProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: >-\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]\n\n      public double Opacity { get; set; }\n    return:\n      type: System.Double\n      description: The opacity factor. Default opacity is 1.0. Expected values are between 0.0 and 1.0.\n  overload: System.Windows.UIElement.Opacity*\n  exceptions: []\n  attributes:\n  - type: System.Windows.LocalizabilityAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OpacityMask\n  commentId: P:System.Windows.UIElement.OpacityMask\n  id: OpacityMask\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OpacityMask\n  nameWithType: UIElement.OpacityMask\n  fullName: UIElement.OpacityMask\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets an opacity mask, as a <xref href=\"System.Windows.Media.Brush\"></xref> implementation that is applied to any alpha-channel masking for the rendered content of this element.  This is a dependency property.\n  remarks: \"This property only uses whatever the alpha channel value is for the supplied <xref:System.Windows.Media.Brush>. The other channels of the <xref:System.Windows.Media.Brush>'s rendered content (Red, Green, or Blue) are ignored.  \\n  \\n The most typical <xref:System.Windows.Media.Brush> for this purpose is an <xref:System.Windows.Media.ImageBrush>, which can be used for a variety of photo masking techniques such as a vignette. But any defined <xref:System.Windows.Media.Brush> (such as <xref:System.Windows.Media.LinearGradientBrush>) can be used.  \\n  \\n In [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)], this property value can use an inline syntax that is specific to each implementation of the <xref:System.Windows.Media.Brush> abstract class. For more information, see [Painting with Solid Colors and Gradients Overview](~/docs/framework/wpf/graphics-multimedia/painting-with-solid-colors-and-gradients-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_OpacityMask\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.OpacityMaskProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following markup example shows an <xref:System.Windows.Media.ImageBrush> opacity mask applied to another <xref:System.Windows.Controls.Image>.  \\n  \\n [!code-xml[OpacityMasksSnippet#UIElementOpacityMask](~/samples/snippets/csharp/VS_Snippets_Wpf/OpacityMasksSnippet/CS/ImageBrushExample.xaml#uielementopacitymask)]\"\n  syntax:\n    content: public System.Windows.Media.Brush OpacityMask { get; set; }\n    return:\n      type: System.Windows.Media.Brush\n      description: The brush to use for opacity masking.\n  overload: System.Windows.UIElement.OpacityMask*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OpacityMaskProperty\n  commentId: F:System.Windows.UIElement.OpacityMaskProperty\n  id: OpacityMaskProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OpacityMaskProperty\n  nameWithType: UIElement.OpacityMaskProperty\n  fullName: UIElement.OpacityMaskProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.OpacityMask\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty OpacityMaskProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.OpacityProperty\n  commentId: F:System.Windows.UIElement.OpacityProperty\n  id: OpacityProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: OpacityProperty\n  nameWithType: UIElement.OpacityProperty\n  fullName: UIElement.OpacityProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.Opacity\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty OpacityProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PersistId\n  commentId: P:System.Windows.UIElement.PersistId\n  id: PersistId\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PersistId\n  nameWithType: UIElement.PersistId\n  fullName: UIElement.PersistId\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that uniquely identifies this element.\n  remarks: \"<xref:System.Windows.UIElement.PersistId%2A> uniquely identifies each element. An element keeps the same <xref:System.Windows.UIElement.PersistId%2A> every time the same [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] is loaded (including binary representations). This identifier is used for internal loading, parsing and serialization requirements. It is not intended to be used by your application code.  \\n  \\n This property has no relationship to the <xref:System.Object.GetHashCode%2A> result for any given instance.\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"PersistId is an obsolete property and may be removed in a future release.  The value of this property is not defined.\")]\n\n      public int PersistId { get; }\n    return:\n      type: System.Int32\n      description: The unique identifier for this element.\n  overload: System.Windows.UIElement.PersistId*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  commentId: M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PredictFocus(FocusNavigationDirection)\n  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)\n  fullName: UIElement.PredictFocus(FocusNavigationDirection)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.\n  remarks: The default implementation of this method in this class is incomplete, and always returns `null`.\n  syntax:\n    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Input.FocusNavigationDirection\n      description: The direction of the requested focus traversal.\n    return:\n      type: System.Windows.DependencyObject\n      description: The element that would have received focus if <xref href=\"System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\"></xref> were actually invoked.\n  overload: System.Windows.UIElement.PredictFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewDragEnter\n  commentId: E:System.Windows.UIElement.PreviewDragEnter\n  id: PreviewDragEnter\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDragEnter\n  nameWithType: UIElement.PreviewDragEnter\n  fullName: UIElement.PreviewDragEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDragEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewDragEnterEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.DragEnter>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDragEnter;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewDragEnterEvent\n  commentId: F:System.Windows.UIElement.PreviewDragEnterEvent\n  id: PreviewDragEnterEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDragEnterEvent\n  nameWithType: UIElement.PreviewDragEnterEvent\n  fullName: UIElement.PreviewDragEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewDragEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewDragLeave\n  commentId: E:System.Windows.UIElement.PreviewDragLeave\n  id: PreviewDragLeave\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDragLeave\n  nameWithType: UIElement.PreviewDragLeave\n  fullName: UIElement.PreviewDragLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag origin.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDragLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewDragLeaveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.DragLeave>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDragLeave;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewDragLeaveEvent\n  commentId: F:System.Windows.UIElement.PreviewDragLeaveEvent\n  id: PreviewDragLeaveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDragLeaveEvent\n  nameWithType: UIElement.PreviewDragLeaveEvent\n  fullName: UIElement.PreviewDragLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewDragLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewDragOver\n  commentId: E:System.Windows.UIElement.PreviewDragOver\n  id: PreviewDragOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDragOver\n  nameWithType: UIElement.PreviewDragOver\n  fullName: UIElement.PreviewDragOver\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the potential drop target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDragOver\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewDragOverEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.DragOver>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDragOver;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewDragOverEvent\n  commentId: F:System.Windows.UIElement.PreviewDragOverEvent\n  id: PreviewDragOverEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDragOverEvent\n  nameWithType: UIElement.PreviewDragOverEvent\n  fullName: UIElement.PreviewDragOverEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewDragOver\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewDrop\n  commentId: E:System.Windows.UIElement.PreviewDrop\n  id: PreviewDrop\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDrop\n  nameWithType: UIElement.PreviewDrop\n  fullName: UIElement.PreviewDrop\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drop event with this element as the drop target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewDrop> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDrop\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewDropEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.Drop>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDrop;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewDropEvent\n  commentId: F:System.Windows.UIElement.PreviewDropEvent\n  id: PreviewDropEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewDropEvent\n  nameWithType: UIElement.PreviewDropEvent\n  fullName: UIElement.PreviewDropEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewDrop\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewGiveFeedback\n  commentId: E:System.Windows.UIElement.PreviewGiveFeedback\n  id: PreviewGiveFeedback\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewGiveFeedback\n  nameWithType: UIElement.PreviewGiveFeedback\n  fullName: UIElement.PreviewGiveFeedback\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a drag-and-drop operation is started.\n  remarks: \"The <xref:System.Windows.UIElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewGiveFeedback\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewGiveFeedbackEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.GiveFeedback>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;\n    return:\n      type: System.Windows.GiveFeedbackEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent\n  commentId: F:System.Windows.UIElement.PreviewGiveFeedbackEvent\n  id: PreviewGiveFeedbackEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewGiveFeedbackEvent\n  nameWithType: UIElement.PreviewGiveFeedbackEvent\n  fullName: UIElement.PreviewGiveFeedbackEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewGiveFeedback\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewGotKeyboardFocus\n  commentId: E:System.Windows.UIElement.PreviewGotKeyboardFocus\n  id: PreviewGotKeyboardFocus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewGotKeyboardFocus\n  nameWithType: UIElement.PreviewGotKeyboardFocus\n  fullName: UIElement.PreviewGotKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is focused on this element.\n  remarks: \"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewGotKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewGotKeyboardFocusEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.GotKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent\n  commentId: F:System.Windows.UIElement.PreviewGotKeyboardFocusEvent\n  id: PreviewGotKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewGotKeyboardFocusEvent\n  nameWithType: UIElement.PreviewGotKeyboardFocusEvent\n  fullName: UIElement.PreviewGotKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewGotKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewKeyDown\n  commentId: E:System.Windows.UIElement.PreviewKeyDown\n  id: PreviewKeyDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewKeyDown\n  nameWithType: UIElement.PreviewKeyDown\n  fullName: UIElement.PreviewKeyDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is pressed while focus is on this element.\n  remarks: \"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewKeyDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewKeyDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.KeyDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewKeyDownEvent\n  commentId: F:System.Windows.UIElement.PreviewKeyDownEvent\n  id: PreviewKeyDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewKeyDownEvent\n  nameWithType: UIElement.PreviewKeyDownEvent\n  fullName: UIElement.PreviewKeyDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewKeyDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewKeyUp\n  commentId: E:System.Windows.UIElement.PreviewKeyUp\n  id: PreviewKeyUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewKeyUp\n  nameWithType: UIElement.PreviewKeyUp\n  fullName: UIElement.PreviewKeyUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is released while focus is on this element.\n  remarks: \"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.UIElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewKeyUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewKeyUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.KeyUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewKeyUpEvent\n  commentId: F:System.Windows.UIElement.PreviewKeyUpEvent\n  id: PreviewKeyUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewKeyUpEvent\n  nameWithType: UIElement.PreviewKeyUpEvent\n  fullName: UIElement.PreviewKeyUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewKeyUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewLostKeyboardFocus\n  commentId: E:System.Windows.UIElement.PreviewLostKeyboardFocus\n  id: PreviewLostKeyboardFocus\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewLostKeyboardFocus\n  nameWithType: UIElement.PreviewLostKeyboardFocus\n  fullName: UIElement.PreviewLostKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is no longer focused on this element.\n  remarks: \"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewLostKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewLostKeyboardFocusEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.LostKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent\n  commentId: F:System.Windows.UIElement.PreviewLostKeyboardFocusEvent\n  id: PreviewLostKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewLostKeyboardFocusEvent\n  nameWithType: UIElement.PreviewLostKeyboardFocusEvent\n  fullName: UIElement.PreviewLostKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewLostKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseDown\n  commentId: E:System.Windows.UIElement.PreviewMouseDown\n  id: PreviewMouseDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseDown\n  nameWithType: UIElement.PreviewMouseDown\n  fullName: UIElement.PreviewMouseDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.UIElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.UIElement.PreviewMouseRightButtonDown>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseDownEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseDownEvent\n  id: PreviewMouseDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseDownEvent\n  nameWithType: UIElement.PreviewMouseDownEvent\n  fullName: UIElement.PreviewMouseDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown\n  commentId: E:System.Windows.UIElement.PreviewMouseLeftButtonDown\n  id: PreviewMouseLeftButtonDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonDown\n  nameWithType: UIElement.PreviewMouseLeftButtonDown\n  fullName: UIElement.PreviewMouseLeftButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseLeftButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\n  id: PreviewMouseLeftButtonDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonDownEvent\n  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent\n  fullName: UIElement.PreviewMouseLeftButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp\n  commentId: E:System.Windows.UIElement.PreviewMouseLeftButtonUp\n  id: PreviewMouseLeftButtonUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonUp\n  nameWithType: UIElement.PreviewMouseLeftButtonUp\n  fullName: UIElement.PreviewMouseLeftButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseLeftButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\n  id: PreviewMouseLeftButtonUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonUpEvent\n  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent\n  fullName: UIElement.PreviewMouseLeftButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseLeftButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseMove\n  commentId: E:System.Windows.UIElement.PreviewMouseMove\n  id: PreviewMouseMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseMove\n  nameWithType: UIElement.PreviewMouseMove\n  fullName: UIElement.PreviewMouseMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer moves while the mouse pointer is over this element.\n  remarks: \"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseMoveEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseMoveEvent\n  id: PreviewMouseMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseMoveEvent\n  nameWithType: UIElement.PreviewMouseMoveEvent\n  fullName: UIElement.PreviewMouseMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseRightButtonDown\n  commentId: E:System.Windows.UIElement.PreviewMouseRightButtonDown\n  id: PreviewMouseRightButtonDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonDown\n  nameWithType: UIElement.PreviewMouseRightButtonDown\n  fullName: UIElement.PreviewMouseRightButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonDown> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> handled for all further listeners along the route, and on all related events. This possibly includes class-handler generated events such as <xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseRightButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseRightButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseRightButtonDownEvent\n  id: PreviewMouseRightButtonDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonDownEvent\n  nameWithType: UIElement.PreviewMouseRightButtonDownEvent\n  fullName: UIElement.PreviewMouseRightButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseRightButtonUp\n  commentId: E:System.Windows.UIElement.PreviewMouseRightButtonUp\n  id: PreviewMouseRightButtonUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonUp\n  nameWithType: UIElement.PreviewMouseRightButtonUp\n  fullName: UIElement.PreviewMouseRightButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this  seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.UIElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The event data of this event exposes the event data of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.UIElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event. If you mark <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> handled, you are essentially marking <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> handled for all further listeners along the route, and on all related events.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.UIElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.UIElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseRightButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseRightButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseRightButtonUpEvent\n  id: PreviewMouseRightButtonUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonUpEvent\n  nameWithType: UIElement.PreviewMouseRightButtonUpEvent\n  fullName: UIElement.PreviewMouseRightButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseRightButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseUp\n  commentId: E:System.Windows.UIElement.PreviewMouseUp\n  id: PreviewMouseUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseUp\n  nameWithType: UIElement.PreviewMouseUp\n  fullName: UIElement.PreviewMouseUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is released while the mouse pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.UIElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.UIElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.UIElement.PreviewMouseRightButtonUp>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewMouseUpEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseUpEvent\n  id: PreviewMouseUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseUpEvent\n  nameWithType: UIElement.PreviewMouseUpEvent\n  fullName: UIElement.PreviewMouseUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewMouseWheel\n  commentId: E:System.Windows.UIElement.PreviewMouseWheel\n  id: PreviewMouseWheel\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseWheel\n  nameWithType: UIElement.PreviewMouseWheel\n  fullName: UIElement.PreviewMouseWheel\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.\n  remarks: \"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseWheel\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewMouseWheelEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.MouseWheel>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;\n    return:\n      type: System.Windows.Input.MouseWheelEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewMouseWheelEvent\n  commentId: F:System.Windows.UIElement.PreviewMouseWheelEvent\n  id: PreviewMouseWheelEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewMouseWheelEvent\n  nameWithType: UIElement.PreviewMouseWheelEvent\n  fullName: UIElement.PreviewMouseWheelEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewMouseWheel\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewQueryContinueDrag\n  commentId: E:System.Windows.UIElement.PreviewQueryContinueDrag\n  id: PreviewQueryContinueDrag\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewQueryContinueDrag\n  nameWithType: UIElement.PreviewQueryContinueDrag\n  fullName: UIElement.PreviewQueryContinueDrag\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.\n  remarks: \"The <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewQueryContinueDrag\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewQueryContinueDragEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.QueryContinueDrag>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;\n    return:\n      type: System.Windows.QueryContinueDragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent\n  commentId: F:System.Windows.UIElement.PreviewQueryContinueDragEvent\n  id: PreviewQueryContinueDragEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewQueryContinueDragEvent\n  nameWithType: UIElement.PreviewQueryContinueDragEvent\n  fullName: UIElement.PreviewQueryContinueDragEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewQueryContinueDrag\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusButtonDown\n  commentId: E:System.Windows.UIElement.PreviewStylusButtonDown\n  id: PreviewStylusButtonDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonDown\n  nameWithType: UIElement.PreviewStylusButtonDown\n  fullName: UIElement.PreviewStylusButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Touch Input Support in Windows Vista](http://msdn.microsoft.com/en-us/63f1d71f-03d8-4d83-a174-e3dc7c57bad0) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusButtonDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusButtonDownEvent\n  id: PreviewStylusButtonDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonDownEvent\n  nameWithType: UIElement.PreviewStylusButtonDownEvent\n  fullName: UIElement.PreviewStylusButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusButtonUp\n  commentId: E:System.Windows.UIElement.PreviewStylusButtonUp\n  id: PreviewStylusButtonUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonUp\n  nameWithType: UIElement.PreviewStylusButtonUp\n  fullName: UIElement.PreviewStylusButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is released while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusButtonUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusButtonUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusButtonUpEvent\n  id: PreviewStylusButtonUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonUpEvent\n  nameWithType: UIElement.PreviewStylusButtonUpEvent\n  fullName: UIElement.PreviewStylusButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusDown\n  commentId: E:System.Windows.UIElement.PreviewStylusDown\n  id: PreviewStylusDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusDown\n  nameWithType: UIElement.PreviewStylusDown\n  fullName: UIElement.PreviewStylusDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus touches the digitizer while it is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;\n    return:\n      type: System.Windows.Input.StylusDownEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusDownEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusDownEvent\n  id: PreviewStylusDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusDownEvent\n  nameWithType: UIElement.PreviewStylusDownEvent\n  fullName: UIElement.PreviewStylusDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusInAirMove\n  commentId: E:System.Windows.UIElement.PreviewStylusInAirMove\n  id: PreviewStylusInAirMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusInAirMove\n  nameWithType: UIElement.PreviewStylusInAirMove\n  fullName: UIElement.PreviewStylusInAirMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves over an element without actually touching the digitizer.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusInAirMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusInAirMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInAirMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusInAirMoveEvent\n  id: PreviewStylusInAirMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusInAirMoveEvent\n  nameWithType: UIElement.PreviewStylusInAirMoveEvent\n  fullName: UIElement.PreviewStylusInAirMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusInRange\n  commentId: E:System.Windows.UIElement.PreviewStylusInRange\n  id: PreviewStylusInRange\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusInRange\n  nameWithType: UIElement.PreviewStylusInRange\n  fullName: UIElement.PreviewStylusInRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is close enough to the digitizer to be detected, while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusInRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusInRangeEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusInRange>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewStylusInRangeEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusInRangeEvent\n  id: PreviewStylusInRangeEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusInRangeEvent\n  nameWithType: UIElement.PreviewStylusInRangeEvent\n  fullName: UIElement.PreviewStylusInRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusInRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusMove\n  commentId: E:System.Windows.UIElement.PreviewStylusMove\n  id: PreviewStylusMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusMove\n  nameWithType: UIElement.PreviewStylusMove\n  fullName: UIElement.PreviewStylusMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves while over the element. The stylus must move while being detected by the digitizer to raise this event, otherwise, <xref href=\"System.Windows.UIElement.PreviewStylusInAirMove\"></xref> is raised instead.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusMoveEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusMoveEvent\n  id: PreviewStylusMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusMoveEvent\n  nameWithType: UIElement.PreviewStylusMoveEvent\n  fullName: UIElement.PreviewStylusMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewStylusOutOfRange\n  commentId: E:System.Windows.UIElement.PreviewStylusOutOfRange\n  id: PreviewStylusOutOfRange\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusOutOfRange\n  nameWithType: UIElement.PreviewStylusOutOfRange\n  fullName: UIElement.PreviewStylusOutOfRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is too far from the digitizer to be detected.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusOutOfRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusOutOfRangeEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusOutOfRange>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusOutOfRangeEvent\n  id: PreviewStylusOutOfRangeEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusOutOfRangeEvent\n  nameWithType: UIElement.PreviewStylusOutOfRangeEvent\n  fullName: UIElement.PreviewStylusOutOfRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusOutOfRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusSystemGesture\n  commentId: E:System.Windows.UIElement.PreviewStylusSystemGesture\n  id: PreviewStylusSystemGesture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusSystemGesture\n  nameWithType: UIElement.PreviewStylusSystemGesture\n  fullName: UIElement.PreviewStylusSystemGesture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a user performs one of several stylus gestures.\n  remarks: \"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusSystemGesture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusSystemGestureEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusSystemGesture>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;\n    return:\n      type: System.Windows.Input.StylusSystemGestureEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusSystemGestureEvent\n  id: PreviewStylusSystemGestureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusSystemGestureEvent\n  nameWithType: UIElement.PreviewStylusSystemGestureEvent\n  fullName: UIElement.PreviewStylusSystemGestureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusSystemGesture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusUp\n  commentId: E:System.Windows.UIElement.PreviewStylusUp\n  id: PreviewStylusUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusUp\n  nameWithType: UIElement.PreviewStylusUp\n  fullName: UIElement.PreviewStylusUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user raises the stylus off the digitizer while the stylus is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewStylusUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.StylusUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewStylusUpEvent\n  commentId: F:System.Windows.UIElement.PreviewStylusUpEvent\n  id: PreviewStylusUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewStylusUpEvent\n  nameWithType: UIElement.PreviewStylusUpEvent\n  fullName: UIElement.PreviewStylusUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewStylusUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewTextInput\n  commentId: E:System.Windows.UIElement.PreviewTextInput\n  id: PreviewTextInput\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTextInput\n  nameWithType: UIElement.PreviewTextInput\n  fullName: UIElement.PreviewTextInput\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element gets text in a device-independent manner.\n  remarks: \"The <xref:System.Windows.UIElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.UIElement.PreviewTextInput>.  \\n  \\n Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewTextInput\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewTextInputEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TextInput>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;\n    return:\n      type: System.Windows.Input.TextCompositionEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewTextInputEvent\n  commentId: F:System.Windows.UIElement.PreviewTextInputEvent\n  id: PreviewTextInputEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTextInputEvent\n  nameWithType: UIElement.PreviewTextInputEvent\n  fullName: UIElement.PreviewTextInputEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewTextInput\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewTouchDown\n  commentId: E:System.Windows.UIElement.PreviewTouchDown\n  id: PreviewTouchDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTouchDown\n  nameWithType: UIElement.PreviewTouchDown\n  fullName: UIElement.PreviewTouchDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger touches the screen while the finger is over this element.\n  remarks: \"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \\n  \\n To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \\n  \\n<a name=\\\"routedEventInfo_PreviewTouchDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewTouchDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TouchDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewTouchDownEvent\n  commentId: F:System.Windows.UIElement.PreviewTouchDownEvent\n  id: PreviewTouchDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTouchDownEvent\n  nameWithType: UIElement.PreviewTouchDownEvent\n  fullName: UIElement.PreviewTouchDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchDown\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewTouchMove\n  commentId: E:System.Windows.UIElement.PreviewTouchMove\n  id: PreviewTouchMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTouchMove\n  nameWithType: UIElement.PreviewTouchMove\n  fullName: UIElement.PreviewTouchMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger moves on the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_PreviewTouchMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewTouchMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TouchMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewTouchMoveEvent\n  commentId: F:System.Windows.UIElement.PreviewTouchMoveEvent\n  id: PreviewTouchMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTouchMoveEvent\n  nameWithType: UIElement.PreviewTouchMoveEvent\n  fullName: UIElement.PreviewTouchMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchMove\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.PreviewTouchUp\n  commentId: E:System.Windows.UIElement.PreviewTouchUp\n  id: PreviewTouchUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTouchUp\n  nameWithType: UIElement.PreviewTouchUp\n  fullName: UIElement.PreviewTouchUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger is raised off of the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_PreviewTouchUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.PreviewTouchUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.UIElement.TouchUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.PreviewTouchUpEvent\n  commentId: F:System.Windows.UIElement.PreviewTouchUpEvent\n  id: PreviewTouchUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: PreviewTouchUpEvent\n  nameWithType: UIElement.PreviewTouchUpEvent\n  fullName: UIElement.PreviewTouchUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.PreviewTouchUp\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.QueryContinueDrag\n  commentId: E:System.Windows.UIElement.QueryContinueDrag\n  id: QueryContinueDrag\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: QueryContinueDrag\n  nameWithType: UIElement.QueryContinueDrag\n  fullName: UIElement.QueryContinueDrag\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.\n  remarks: \"The <xref:System.Windows.UIElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_QueryContinueDrag\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.QueryContinueDragEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewQueryContinueDrag>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;\n    return:\n      type: System.Windows.QueryContinueDragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.QueryContinueDragEvent\n  commentId: F:System.Windows.UIElement.QueryContinueDragEvent\n  id: QueryContinueDragEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: QueryContinueDragEvent\n  nameWithType: UIElement.QueryContinueDragEvent\n  fullName: UIElement.QueryContinueDragEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.QueryContinueDrag\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.QueryCursor\n  commentId: E:System.Windows.UIElement.QueryCursor\n  id: QueryCursor\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: QueryCursor\n  nameWithType: UIElement.QueryCursor\n  fullName: UIElement.QueryCursor\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.QueryCursor> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming. That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.  \\n  \\n Listening for the <xref:System.Windows.UIElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.UIElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.UIElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.  \\n  \\n<a name=\\\"routedEventInfo_QueryCursor\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.QueryCursorEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;\n    return:\n      type: System.Windows.Input.QueryCursorEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.QueryCursorEvent\n  commentId: F:System.Windows.UIElement.QueryCursorEvent\n  id: QueryCursorEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: QueryCursorEvent\n  nameWithType: UIElement.QueryCursorEvent\n  fullName: UIElement.QueryCursorEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.QueryCursor\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  id: RaiseEvent(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: RaiseEvent(RoutedEventArgs)\n  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)\n  fullName: UIElement.RaiseEvent(RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Raises a specific routed event. The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data).\n  remarks: \"The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.  \\n  \\n <xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.\"\n  example:\n  - \"The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \\n  \\n [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]\\n [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]\"\n  syntax:\n    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data and also identifies the event to raise.\n  overload: System.Windows.UIElement.RaiseEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.ReleaseAllTouchCaptures\n  commentId: M:System.Windows.UIElement.ReleaseAllTouchCaptures\n  id: ReleaseAllTouchCaptures\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ReleaseAllTouchCaptures()\n  nameWithType: UIElement.ReleaseAllTouchCaptures()\n  fullName: UIElement.ReleaseAllTouchCaptures()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Releases all captured touch devices from this element.\n  syntax:\n    content: public void ReleaseAllTouchCaptures ();\n    parameters: []\n  overload: System.Windows.UIElement.ReleaseAllTouchCaptures*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ReleaseMouseCapture\n  commentId: M:System.Windows.UIElement.ReleaseMouseCapture\n  id: ReleaseMouseCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ReleaseMouseCapture()\n  nameWithType: UIElement.ReleaseMouseCapture()\n  fullName: UIElement.ReleaseMouseCapture()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Releases the mouse capture, if this element held the capture.\n  remarks: If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsMouseCaptured%2A> before you call this method.\n  example:\n  - \"The following example is the parallel to the example given for <xref:System.Windows.UIElement.CaptureMouse%2A>: it handles mouse button up to release mouse capture and re-enable moving the mouse.  \\n  \\n [!code-csharp[CubeAnimation#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Trackball.cs#uielementmousecapture)]\\n [!code-vb[CubeAnimation#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/trackball.vb#uielementmousecapture)]\"\n  syntax:\n    content: public void ReleaseMouseCapture ();\n    parameters: []\n  overload: System.Windows.UIElement.ReleaseMouseCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ReleaseStylusCapture\n  commentId: M:System.Windows.UIElement.ReleaseStylusCapture\n  id: ReleaseStylusCapture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ReleaseStylusCapture()\n  nameWithType: UIElement.ReleaseStylusCapture()\n  fullName: UIElement.ReleaseStylusCapture()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Releases the stylus device capture, if this element held the capture.\n  remarks: If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.UIElement.IsStylusCaptured%2A> before you call this method.\n  syntax:\n    content: public void ReleaseStylusCapture ();\n    parameters: []\n  overload: System.Windows.UIElement.ReleaseStylusCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  commentId: M:System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ReleaseTouchCapture(TouchDevice)\n  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)\n  fullName: UIElement.ReleaseTouchCapture(TouchDevice)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to release the specified touch device from this element.\n  syntax:\n    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);\n    parameters:\n    - id: touchDevice\n      type: System.Windows.Input.TouchDevice\n      description: The device to release.\n    return:\n      type: System.Boolean\n      description: '`true` if the touch device is released; otherwise, `false`.'\n  overload: System.Windows.UIElement.ReleaseTouchCapture*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>touchDevice</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  commentId: M:System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: RemoveHandler(RoutedEvent, Delegate)\n  nameWithType: UIElement.RemoveHandler(RoutedEvent, Delegate)\n  fullName: UIElement.RemoveHandler(RoutedEvent, Delegate)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Removes the specified routed event handler from this element.\n  remarks: \"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \\\"wrapper\\\" event that is associated with a custom routed event, specifically when you implement the \\\"remove\\\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level. The example that follows this remarks section illustrates this scenario.  \\n  \\n Calling this method has no effect if there were no handlers registered with criteria that matches the input parameters for the method call.  \\n  \\n If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.  \\n  \\n Neither `routedEvent` nor `handler` may be `null`. Attempting to provide either value as `null` will raise an exception.  \\n  \\n This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events. Either type of handler is removed.\"\n  example:\n  - \"The following example uses <xref:System.Windows.UIElement.RemoveHandler%2A> as part of an event wrapper definition.  \\n  \\n [!code-csharp[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#addremovehandler)]\\n [!code-vb[RoutedEventCustom#AddRemoveHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#addremovehandler)]\"\n  syntax:\n    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);\n    parameters:\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: The identifier of the routed event for which the handler is attached.\n    - id: handler\n      type: System.Delegate\n      description: The specific handler implementation to remove from the event handler collection on this element.\n  overload: System.Windows.UIElement.RemoveHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.RenderSize\n  commentId: P:System.Windows.UIElement.RenderSize\n  id: RenderSize\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: RenderSize\n  nameWithType: UIElement.RenderSize\n  fullName: UIElement.RenderSize\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets (or sets) the final render size of this element.\n  remarks: \"> [!IMPORTANT]\\n>  Do not attempt to set this property, either in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] or in code, if using the WPF framework-level layout system. Nearly all typical application scenarios will use this layout system. The layout system will not respect sizes set in the <xref:System.Windows.UIElement.RenderSize%2A> property directly. The <xref:System.Windows.UIElement.RenderSize%2A> property is declared writable only to enable certain WPF core-level bridging cases that deliberately circumvent the typical layout protocols, such as support for the <xref:System.Windows.Documents.Adorner> class.  \\n  \\n This property can be used for checking the applicable render size within layout system overrides such as <xref:System.Windows.UIElement.OnRender%2A> or <xref:System.Windows.UIElement.GetLayoutClip%2A>.  \\n  \\n A more common scenario is handling the <xref:System.Windows.FrameworkElement.SizeChanged> event with the class handler override or the <xref:System.Windows.UIElement.OnRenderSizeChanged%2A> event.  \\n  \\n<a name=\\\"xamlTextUsage_RenderSize\\\"></a>   \\n## XAML Text Usage\"\n  example:\n  - \"The following example shows how a custom adorner uses the <xref:System.Windows.UIElement.RenderSize%2A> value in order to create and size the rectangle graphic that defines the adorner, as part of its <xref:System.Windows.UIElement.OnRender%2A>implementation.  \\n  \\n [!code-csharp[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/csharp/VS_Snippets_Wpf/AdornersMiscCode/CSharp/Window1.xaml.cs#uielementdesiredsize)]\\n [!code-vb[AdornersMiscCode#UIElementDesiredSize](~/samples/snippets/visualbasic/VS_Snippets_Wpf/AdornersMiscCode/visualbasic/window1.xaml.vb#uielementdesiredsize)]\"\n  syntax:\n    content: public System.Windows.Size RenderSize { get; set; }\n    return:\n      type: System.Windows.Size\n      description: The rendered size for this element.\n  overload: System.Windows.UIElement.RenderSize*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.RenderTransform\n  commentId: P:System.Windows.UIElement.RenderTransform\n  id: RenderTransform\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: RenderTransform\n  nameWithType: UIElement.RenderTransform\n  fullName: UIElement.RenderTransform\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets transform information that affects the rendering position of this element.  This is a dependency property.\n  remarks: \"A render transform does not regenerate layout size or render size information. Render transforms are typically intended for animating or applying a temporary effect to an element. For example, the element might zoom when focused or moused over, or might jitter on load to draw the eye to that part of the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].  \\n  \\n<a name=\\\"dependencyPropertyInfo_RenderTransform\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.RenderTransformProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public System.Windows.Media.Transform RenderTransform { get; set; }\n    return:\n      type: System.Windows.Media.Transform\n      description: Describes the specifics of the desired render transform. The default is <xref href=\"System.Windows.Media.Transform.Identity\"></xref>.\n  overload: System.Windows.UIElement.RenderTransform*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.RenderTransformOrigin\n  commentId: P:System.Windows.UIElement.RenderTransformOrigin\n  id: RenderTransformOrigin\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: RenderTransformOrigin\n  nameWithType: UIElement.RenderTransformOrigin\n  fullName: UIElement.RenderTransformOrigin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets the center point of any possible render transform declared by <xref href=\"System.Windows.UIElement.RenderTransform\"></xref>, relative to the bounds of the element.  This is a dependency property.\n  remarks: \"<xref:System.Windows.UIElement.RenderTransformOrigin%2A> has a somewhat nonstandard use of the <xref:System.Windows.Point> structure value, in that the <xref:System.Windows.Point> does not represent an absolute location in a coordinate system. Instead, values between 0 and 1 are interpreted as a factor for the range of the current element in each x,y axis. For example, (0.5,0.5) will cause the render transform to be centered on the element, or (1,1) would place the render transform at the bottom right corner of the element. <xref:System.Double.NaN> is not an accepted value.  \\n  \\n Values beyond 0 and 1 are also accepted, and will result in more unconventional transform effects. For instance, if you set <xref:System.Windows.UIElement.RenderTransformOrigin%2A> to be (5,5), and then apply a <xref:System.Windows.Media.RotateTransform>, the rotation point will be well outside the bounds of the element itself. The transform will spin your element around in a big circle that originates beyond bottom right. The origin might be somewhere inside its parent element and could possibly be possibly out of frame or view. Negative point values are similar, these will go beyond the top left bounds.  \\n  \\n Render transforms do not affect layout, and are typically used to animate or apply a temporary effect to an element.  \\n  \\n<a name=\\\"xamlAttributeUsage_RenderTransformOrigin\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object RenderTransformOrigin=\\\"xOrigin, yOrigin\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlPropertyElementUsage_RenderTransformOrigin\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.RenderTransformOrigin>  \\n    <Point X=\\\" xOrigin \\\" Y=\\\" yOrigin \\\"/>  \\n  </object.RenderTransformOrigin>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_RenderTransformOrigin\\\"></a>   \\n## XAML Values  \\n *xOrigin*  \\n The horizontal origin factor. This is typically given as a value between 0 and 1. See Remarks.  \\n  \\n *yOrigin*  \\n The vertical origin factor. This is typically given as a value between 0 and 1. See Remarks.  \\n  \\n<a name=\\\"dependencyPropertyInfo_RenderTransformOrigin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.RenderTransformOriginProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example builds up elements in code, applies a <xref:System.Windows.UIElement.RenderTransformOrigin%2A>, and then applies a  <xref:System.Windows.UIElement.RenderTransform%2A>.  \\n  \\n [!code-csharp[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/csharp/VS_Snippets_Wpf/transformanimations_snip/CSharp/RotateAboutCenterExample.cs#uielementrendertransformorigin)]\\n [!code-vb[transformanimations_snip#UIElementRenderTransformOrigin](~/samples/snippets/visualbasic/VS_Snippets_Wpf/transformanimations_snip/visualbasic/rotateaboutcenterexample.vb#uielementrendertransformorigin)]\"\n  syntax:\n    content: public System.Windows.Point RenderTransformOrigin { get; set; }\n    return:\n      type: System.Windows.Point\n      description: The value that declares the render transform. The default value is a <xref href=\"System.Windows.Point\"></xref> with coordinates (0,0).\n  overload: System.Windows.UIElement.RenderTransformOrigin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.RenderTransformOriginProperty\n  commentId: F:System.Windows.UIElement.RenderTransformOriginProperty\n  id: RenderTransformOriginProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: RenderTransformOriginProperty\n  nameWithType: UIElement.RenderTransformOriginProperty\n  fullName: UIElement.RenderTransformOriginProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.RenderTransformOrigin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty RenderTransformOriginProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.RenderTransformProperty\n  commentId: F:System.Windows.UIElement.RenderTransformProperty\n  id: RenderTransformProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: RenderTransformProperty\n  nameWithType: UIElement.RenderTransformProperty\n  fullName: UIElement.RenderTransformProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.RenderTransform\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty RenderTransformProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ShouldSerializeCommandBindings\n  commentId: M:System.Windows.UIElement.ShouldSerializeCommandBindings\n  id: ShouldSerializeCommandBindings\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ShouldSerializeCommandBindings()\n  nameWithType: UIElement.ShouldSerializeCommandBindings()\n  fullName: UIElement.ShouldSerializeCommandBindings()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.UIElement.CommandBindings\"></xref> property on instances of this class.\n  remarks: \"This will return `true` if <xref:System.Windows.UIElement.CommandBindings%2A> is locally set.  \\n  \\n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \\n  \\n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).\"\n  syntax:\n    content: public bool ShouldSerializeCommandBindings ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.UIElement.CommandBindings\"></xref> property value should be serialized; otherwise, `false`.'\n  overload: System.Windows.UIElement.ShouldSerializeCommandBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.ShouldSerializeInputBindings\n  commentId: M:System.Windows.UIElement.ShouldSerializeInputBindings\n  id: ShouldSerializeInputBindings\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: ShouldSerializeInputBindings()\n  nameWithType: UIElement.ShouldSerializeInputBindings()\n  fullName: UIElement.ShouldSerializeInputBindings()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.UIElement.InputBindings\"></xref> property on instances of this class.\n  remarks: \"This will return `true` if <xref:System.Windows.UIElement.InputBindings%2A> is locally set.  \\n  \\n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \\n  \\n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).\"\n  syntax:\n    content: public bool ShouldSerializeInputBindings ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.UIElement.InputBindings\"></xref> property value should be serialized; otherwise, `false`.'\n  overload: System.Windows.UIElement.ShouldSerializeInputBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.SnapsToDevicePixels\n  commentId: P:System.Windows.UIElement.SnapsToDevicePixels\n  id: SnapsToDevicePixels\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: SnapsToDevicePixels\n  nameWithType: UIElement.SnapsToDevicePixels\n  fullName: UIElement.SnapsToDevicePixels\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value that determines whether rendering for this element should use device-specific pixel settings during rendering.  This is a dependency property.\n  remarks: \"You can set this property to `true` on your root element to enable pixel snap rendering throughout the UI. For devices operating at greater than 96 [!INCLUDE[TLA#tla_dpi](~/includes/tlasharptla-dpi-md.md)], pixel snap rendering can minimize anti-aliasing visual artifacts in the vicinity of single-unit solid lines.  \\n  \\n When inherited by <xref:System.Windows.FrameworkElement> or any possible derived classes, <xref:System.Windows.FrameworkElement> overrides the metadata for this dependency property to set the <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> metadata property to `true`. What this achieves is that only the outermost element in a subtree needs to specify <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true`, and all child elements of that subtree will then report <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> as `true` and will have the <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> visual effect.  \\n  \\n<a name=\\\"dependencyPropertyInfo_SnapsToDevicePixels\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.SnapsToDevicePixelsProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool SnapsToDevicePixels { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element should render in accordance to device pixels; otherwise, `false`. The default as declared on <xref href=\"System.Windows.UIElement\"></xref> is `false`.'\n  overload: System.Windows.UIElement.SnapsToDevicePixels*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty\n  commentId: F:System.Windows.UIElement.SnapsToDevicePixelsProperty\n  id: SnapsToDevicePixelsProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: SnapsToDevicePixelsProperty\n  nameWithType: UIElement.SnapsToDevicePixelsProperty\n  fullName: UIElement.SnapsToDevicePixelsProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.SnapsToDevicePixels\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty SnapsToDevicePixelsProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusButtonDown\n  commentId: E:System.Windows.UIElement.StylusButtonDown\n  id: StylusButtonDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusButtonDown\n  nameWithType: UIElement.StylusButtonDown\n  fullName: UIElement.StylusButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusButtonDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusButtonDownEvent\n  commentId: F:System.Windows.UIElement.StylusButtonDownEvent\n  id: StylusButtonDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusButtonDownEvent\n  nameWithType: UIElement.StylusButtonDownEvent\n  fullName: UIElement.StylusButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusButtonUp\n  commentId: E:System.Windows.UIElement.StylusButtonUp\n  id: StylusButtonUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusButtonUp\n  nameWithType: UIElement.StylusButtonUp\n  fullName: UIElement.StylusButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is released while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusButtonUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusButtonUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.StylusButtonUpEvent\n  commentId: F:System.Windows.UIElement.StylusButtonUpEvent\n  id: StylusButtonUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusButtonUpEvent\n  nameWithType: UIElement.StylusButtonUpEvent\n  fullName: UIElement.StylusButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusDown\n  commentId: E:System.Windows.UIElement.StylusDown\n  id: StylusDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusDown\n  nameWithType: UIElement.StylusDown\n  fullName: UIElement.StylusDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus touches the digitizer while the stylus is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusDown> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;\n    return:\n      type: System.Windows.Input.StylusDownEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusDownEvent\n  commentId: F:System.Windows.UIElement.StylusDownEvent\n  id: StylusDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusDownEvent\n  nameWithType: UIElement.StylusDownEvent\n  fullName: UIElement.StylusDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusEnter\n  commentId: E:System.Windows.UIElement.StylusEnter\n  id: StylusEnter\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusEnter\n  nameWithType: UIElement.StylusEnter\n  fullName: UIElement.StylusEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus enters the bounds of this element.\n  remarks: \"<xref:System.Windows.UIElement.StylusEnter> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.UIElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusEnter> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusEnterEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusEnter;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusEnterEvent\n  commentId: F:System.Windows.UIElement.StylusEnterEvent\n  id: StylusEnterEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusEnterEvent\n  nameWithType: UIElement.StylusEnterEvent\n  fullName: UIElement.StylusEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusInAirMove\n  commentId: E:System.Windows.UIElement.StylusInAirMove\n  id: StylusInAirMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusInAirMove\n  nameWithType: UIElement.StylusInAirMove\n  fullName: UIElement.StylusInAirMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves over an element without actually touching the digitizer.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusInAirMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusInAirMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInAirMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.StylusInAirMoveEvent\n  commentId: F:System.Windows.UIElement.StylusInAirMoveEvent\n  id: StylusInAirMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusInAirMoveEvent\n  nameWithType: UIElement.StylusInAirMoveEvent\n  fullName: UIElement.StylusInAirMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusInAirMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.StylusInRange\n  commentId: E:System.Windows.UIElement.StylusInRange\n  id: StylusInRange\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusInRange\n  nameWithType: UIElement.StylusInRange\n  fullName: UIElement.StylusInRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is close enough to the digitizer to be detected, while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusInRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusInRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusInRangeEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusInRange>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusInRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusInRangeEvent\n  commentId: F:System.Windows.UIElement.StylusInRangeEvent\n  id: StylusInRangeEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusInRangeEvent\n  nameWithType: UIElement.StylusInRangeEvent\n  fullName: UIElement.StylusInRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusInRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusLeave\n  commentId: E:System.Windows.UIElement.StylusLeave\n  id: StylusLeave\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusLeave\n  nameWithType: UIElement.StylusLeave\n  fullName: UIElement.StylusLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus leaves the bounds of the element.\n  remarks: \"<xref:System.Windows.UIElement.StylusLeave> is a  that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.UIElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.UIElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusLeave> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusLeaveEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusLeave;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusLeaveEvent\n  commentId: F:System.Windows.UIElement.StylusLeaveEvent\n  id: StylusLeaveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusLeaveEvent\n  nameWithType: UIElement.StylusLeaveEvent\n  fullName: UIElement.StylusLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusMove\n  commentId: E:System.Windows.UIElement.StylusMove\n  id: StylusMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusMove\n  nameWithType: UIElement.StylusMove\n  fullName: UIElement.StylusMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <xref href=\"System.Windows.UIElement.StylusInAirMove\"></xref> is raised instead.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusMove> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.StylusMoveEvent\n  commentId: F:System.Windows.UIElement.StylusMoveEvent\n  id: StylusMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusMoveEvent\n  nameWithType: UIElement.StylusMoveEvent\n  fullName: UIElement.StylusMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusOutOfRange\n  commentId: E:System.Windows.UIElement.StylusOutOfRange\n  id: StylusOutOfRange\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusOutOfRange\n  nameWithType: UIElement.StylusOutOfRange\n  fullName: UIElement.StylusOutOfRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is too far from the digitizer to be detected, while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusOutOfRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusOutOfRangeEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusOutOfRange>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.StylusOutOfRangeEvent\n  commentId: F:System.Windows.UIElement.StylusOutOfRangeEvent\n  id: StylusOutOfRangeEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusOutOfRangeEvent\n  nameWithType: UIElement.StylusOutOfRangeEvent\n  fullName: UIElement.StylusOutOfRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusOutOfRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusPlugIns\n  commentId: P:System.Windows.UIElement.StylusPlugIns\n  id: StylusPlugIns\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusPlugIns\n  nameWithType: UIElement.StylusPlugIns\n  fullName: UIElement.StylusPlugIns\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a collection of all stylus plug-in (customization) objects associated with this element.\n  remarks: \"An example of a control that populates this collection is <xref:System.Windows.Controls.InkCanvas>. <xref:System.Windows.Controls.InkCanvas> adds the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> as a collection item, which enables the <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> to interact with stylus input and produce the unique rendering in response to stylus driven events.  \\n  \\n For information on creating custom plug-ins that can receive and interpret stylus input, see [Intercepting Input from the Stylus](~/docs/framework/wpf/advanced/intercepting-input-from-the-stylus.md).\"\n  example:\n  - \"The following example creates a <xref:System.Windows.Input.StylusPlugIns.DynamicRenderer> instance and adds it to the <xref:System.Windows.UIElement.StylusPlugIns%2A> collection for a custom ink handling control.  \\n  \\n [!code-csharp[StylusPluginSamples#3](~/samples/snippets/csharp/VS_Snippets_Wpf/StylusPluginSamples/CSharp/StylusControl.cs#3)]\\n [!code-vb[StylusPluginSamples#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StylusPluginSamples/VisualBasic/StylusControl.vb#3)]\"\n  syntax:\n    content: protected System.Windows.Input.StylusPlugIns.StylusPlugInCollection StylusPlugIns { get; }\n    return:\n      type: System.Windows.Input.StylusPlugIns.StylusPlugInCollection\n      description: The collection of stylus plug-ins, as a specialized collection.\n  overload: System.Windows.UIElement.StylusPlugIns*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.StylusSystemGesture\n  commentId: E:System.Windows.UIElement.StylusSystemGesture\n  id: StylusSystemGesture\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusSystemGesture\n  nameWithType: UIElement.StylusSystemGesture\n  fullName: UIElement.StylusSystemGesture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a user performs one of several stylus gestures.\n  remarks: \"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusSystemGesture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusSystemGestureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusSystemGesture>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;\n    return:\n      type: System.Windows.Input.StylusSystemGestureEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusSystemGestureEvent\n  commentId: F:System.Windows.UIElement.StylusSystemGestureEvent\n  id: StylusSystemGestureEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusSystemGestureEvent\n  nameWithType: UIElement.StylusSystemGestureEvent\n  fullName: UIElement.StylusSystemGestureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusSystemGesture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusUp\n  commentId: E:System.Windows.UIElement.StylusUp\n  id: StylusUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusUp\n  nameWithType: UIElement.StylusUp\n  fullName: UIElement.StylusUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user raises the stylus off the digitizer while it is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.StylusUp> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.StylusUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewStylusUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnStylusUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusUp;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.StylusUpEvent\n  commentId: F:System.Windows.UIElement.StylusUpEvent\n  id: StylusUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: StylusUpEvent\n  nameWithType: UIElement.StylusUpEvent\n  fullName: UIElement.StylusUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.StylusUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TextInput\n  commentId: E:System.Windows.UIElement.TextInput\n  id: TextInput\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TextInput\n  nameWithType: UIElement.TextInput\n  fullName: UIElement.TextInput\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element gets text in a device-independent manner.\n  remarks: \"> [!IMPORTANT]\\n>  This event might already be marked as handled by the internal implementations of composited controls. See Remark below.  \\n  \\n The <xref:System.Windows.UIElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.UIElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.UIElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.  \\n  \\n The <xref:System.Windows.UIElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.UIElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.UIElement.TextInput>.  \\n  \\n Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.UIElement.TextInput> is part of the class members list when <xref:System.Windows.UIElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.UIElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_TextInput\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.TextInputEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTextInput>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnTextInput%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;\n    return:\n      type: System.Windows.Input.TextCompositionEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TextInputEvent\n  commentId: F:System.Windows.UIElement.TextInputEvent\n  id: TextInputEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TextInputEvent\n  nameWithType: UIElement.TextInputEvent\n  fullName: UIElement.TextInputEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.TextInput\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TextInputEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchDown\n  commentId: E:System.Windows.UIElement.TouchDown\n  id: TouchDown\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchDown\n  nameWithType: UIElement.TouchDown\n  fullName: UIElement.TouchDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger touches the screen while the finger is over this element.\n  remarks: \"By default, the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \\n  \\n To cause the <xref:System.Windows.UIElement.PreviewTouchDown> and <xref:System.Windows.UIElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \\n  \\n<a name=\\\"routedEventInfo_TouchDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.TouchDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchDown>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnTouchDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchDownEvent\n  commentId: F:System.Windows.UIElement.TouchDownEvent\n  id: TouchDownEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchDownEvent\n  nameWithType: UIElement.TouchDownEvent\n  fullName: UIElement.TouchDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.TouchDown\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.TouchEnter\n  commentId: E:System.Windows.UIElement.TouchEnter\n  id: TouchEnter\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchEnter\n  nameWithType: UIElement.TouchEnter\n  fullName: UIElement.TouchEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a touch moves from outside to inside the bounds of this element.\n  remarks: \"This event is always raised, whether or not the touch device is captured to this element.  \\n  \\n<a name=\\\"routedEventInfo_TouchEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.TouchEnterEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchEnterEvent\n  commentId: F:System.Windows.UIElement.TouchEnterEvent\n  id: TouchEnterEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchEnterEvent\n  nameWithType: UIElement.TouchEnterEvent\n  fullName: UIElement.TouchEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.TouchEnter\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchesCaptured\n  commentId: P:System.Windows.UIElement.TouchesCaptured\n  id: TouchesCaptured\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchesCaptured\n  nameWithType: UIElement.TouchesCaptured\n  fullName: UIElement.TouchesCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are captured to this element.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element.\n  overload: System.Windows.UIElement.TouchesCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchesCapturedWithin\n  commentId: P:System.Windows.UIElement.TouchesCapturedWithin\n  id: TouchesCapturedWithin\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchesCapturedWithin\n  nameWithType: UIElement.TouchesCapturedWithin\n  fullName: UIElement.TouchesCapturedWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are captured to this element or any child elements in its visual tree.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element or any child elements in its visual tree.\n  overload: System.Windows.UIElement.TouchesCapturedWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchesDirectlyOver\n  commentId: P:System.Windows.UIElement.TouchesDirectlyOver\n  id: TouchesDirectlyOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchesDirectlyOver\n  nameWithType: UIElement.TouchesDirectlyOver\n  fullName: UIElement.TouchesDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are over this element.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element.\n  overload: System.Windows.UIElement.TouchesDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchesOver\n  commentId: P:System.Windows.UIElement.TouchesOver\n  id: TouchesOver\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchesOver\n  nameWithType: UIElement.TouchesOver\n  fullName: UIElement.TouchesOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are over this element or any child elements in its visual tree.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element or any child elements in its visual tree.\n  overload: System.Windows.UIElement.TouchesOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchLeave\n  commentId: E:System.Windows.UIElement.TouchLeave\n  id: TouchLeave\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchLeave\n  nameWithType: UIElement.TouchLeave\n  fullName: UIElement.TouchLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a touch moves from inside to outside the bounds of this element.\n  remarks: \"This event is always raised, whether or not the touch device is captured to this element.  \\n  \\n<a name=\\\"routedEventInfo_TouchLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.TouchLeaveEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.UIElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchLeaveEvent\n  commentId: F:System.Windows.UIElement.TouchLeaveEvent\n  id: TouchLeaveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchLeaveEvent\n  nameWithType: UIElement.TouchLeaveEvent\n  fullName: UIElement.TouchLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.TouchLeave\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchMove\n  commentId: E:System.Windows.UIElement.TouchMove\n  id: TouchMove\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchMove\n  nameWithType: UIElement.TouchMove\n  fullName: UIElement.TouchMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger moves on the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_TouchMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.TouchMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchMove>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnTouchMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchMoveEvent\n  commentId: F:System.Windows.UIElement.TouchMoveEvent\n  id: TouchMoveEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchMoveEvent\n  nameWithType: UIElement.TouchMoveEvent\n  fullName: UIElement.TouchMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.TouchMove\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchUp\n  commentId: E:System.Windows.UIElement.TouchUp\n  id: TouchUp\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchUp\n  nameWithType: UIElement.TouchUp\n  fullName: UIElement.TouchUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger is raised off of the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_TouchUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.TouchUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.UIElement.PreviewTouchUp>.  \\n  \\n-   Override <xref:System.Windows.UIElement.OnTouchUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TouchUpEvent\n  commentId: F:System.Windows.UIElement.TouchUpEvent\n  id: TouchUpEvent\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TouchUpEvent\n  nameWithType: UIElement.TouchUpEvent\n  fullName: UIElement.TouchUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.TouchUp\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  commentId: M:System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  id: TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: TranslatePoint(Point, UIElement)\n  nameWithType: UIElement.TranslatePoint(Point, UIElement)\n  fullName: UIElement.TranslatePoint(Point, UIElement)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Translates a point relative to this element to coordinates that are relative to the specified element.\n  remarks: \"Passing `null` for `relativeTo` is permitted, and indicates that coordinates should be relative to the root element in the logical tree that this element belongs to.  \\n  \\n This method is used for translating hit test point values. Calling this method is mainly relevant if you are authoring a control and need to process input at a lower level. If you are using existing controls, you can generally assume that completed controls will report correctly translated hit test results.\"\n  syntax:\n    content: public System.Windows.Point TranslatePoint (System.Windows.Point point, System.Windows.UIElement relativeTo);\n    parameters:\n    - id: point\n      type: System.Windows.Point\n      description: The point value, as relative to this element.\n    - id: relativeTo\n      type: System.Windows.UIElement\n      description: The element to translate the given point into.\n    return:\n      type: System.Windows.Point\n      description: A point value, now relative to the target element rather than this source element.\n  overload: System.Windows.UIElement.TranslatePoint*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.Uid\n  commentId: P:System.Windows.UIElement.Uid\n  id: Uid\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Uid\n  nameWithType: UIElement.Uid\n  fullName: UIElement.Uid\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets the unique identifier (for localization) for this element. This is a dependency property.\n  remarks: \"Used by designers to get the `x:Uid` value (see [WPF Globalization and Localization Overview](~/docs/framework/wpf/advanced/wpf-globalization-and-localization-overview.md) for more information).  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowWindowStyle\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.UidProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public string Uid { get; set; }\n    return:\n      type: System.String\n      description: A string that is the unique identifier for this element.\n  overload: System.Windows.UIElement.Uid*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.UIElement.UidProperty\n  commentId: F:System.Windows.UIElement.UidProperty\n  id: UidProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: UidProperty\n  nameWithType: UIElement.UidProperty\n  fullName: UIElement.UidProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.Uid\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty UidProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.UpdateLayout\n  commentId: M:System.Windows.UIElement.UpdateLayout\n  id: UpdateLayout\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: UpdateLayout()\n  nameWithType: UIElement.UpdateLayout()\n  fullName: UIElement.UpdateLayout()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Ensures that all visual child elements of this element are properly updated for layout.\n  remarks: \"When you call this method, elements with <xref:System.Windows.UIElement.IsMeasureValid%2A>`false` or <xref:System.Windows.UIElement.IsArrangeValid%2A>`false` will call element-specific <xref:System.Windows.UIElement.MeasureCore%2A> and <xref:System.Windows.UIElement.ArrangeCore%2A> methods, which forces layout update, and all computed sizes will be validated.  \\n  \\n Calling this method has no effect if layout is unchanged, or if neither arrangement nor measurement state of a layout is invalid. However, if layout is invalid in either respect, the <xref:System.Windows.UIElement.UpdateLayout%2A> call will redo the entire layout. Therefore, you should avoid calling <xref:System.Windows.UIElement.UpdateLayout%2A> after each incremental and minor change in the element tree. The layout system will perform element layout in a deferred manner, using an algorithm that balances performance and currency, and with a weighting strategy to defer changes to roots until all child elements are valid. You should only call <xref:System.Windows.UIElement.UpdateLayout%2A> if you absolutely need updated sizes and positions, and only after you are certain that all changes to properties that you control and that may affect layout are completed.\"\n  syntax:\n    content: public void UpdateLayout ();\n    parameters: []\n  overload: System.Windows.UIElement.UpdateLayout*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.Visibility\n  commentId: P:System.Windows.UIElement.Visibility\n  id: Visibility\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: Visibility\n  nameWithType: UIElement.Visibility\n  fullName: UIElement.Visibility\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] visibility of this element.  This is a dependency property.\n  remarks: \"Setting this property affects the value of <xref:System.Windows.UIElement.IsVisible%2A>, which in turn may raise the <xref:System.Windows.UIElement.IsVisibleChanged> event. However, <xref:System.Windows.UIElement.IsVisible%2A> has other factors that influence it, for instance the visibility settings of parents that contain it.  \\n  \\n Elements where <xref:System.Windows.UIElement.Visibility%2A> is not <xref:System.Windows.Visibility.Visible> do not participate in input events (or commands), do not influence either the Measure or Arrange passes of layout, are not in a tab sequence, and will not be reported in hit testing.  \\n  \\n When inherited by <xref:System.Windows.Window> or its derived classes, <xref:System.Windows.Window> redefines the default value of this property to be <xref:System.Windows.Visibility.Collapsed>. This has the effect of not running the Measure pass of layout on an initially created <xref:System.Windows.Window>, and <xref:System.Windows.UIElement.RenderSize%2A> returns (0,0). For details, see <xref:System.Windows.Window>. <xref:System.Windows.Controls.Primitives.Popup> also redefines the default value to be <xref:System.Windows.Visibility.Collapsed>, with similar resulting behavior for <xref:System.Windows.Controls.Primitives.Popup> and its derived classes.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Visibility\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.UIElement.VisibilityProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example implements a handler that references two different named buttons that are intended to be a mutually exclusive pair in the user interface. Prior to running the actual program logic associated with the button, the button itself is set to be <xref:System.Windows.Visibility?displayProperty=fullName>, and the other button in the pair is set to <xref:System.Windows.Visibility?displayProperty=fullName>.  \\n  \\n [!code-csharp[MediaElement_snip#UIElementVisibility](~/samples/snippets/csharp/VS_Snippets_Wpf/MediaElement_snip/CSharp/PlaybackExample.cs#uielementvisibility)]\\n [!code-vb[MediaElement_snip#UIElementVisibility](~/samples/snippets/visualbasic/VS_Snippets_Wpf/MediaElement_snip/VB/PlaybackExample.vb#uielementvisibility)]\"\n  syntax:\n    content: >-\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]\n\n      public System.Windows.Visibility Visibility { get; set; }\n    return:\n      type: System.Windows.Visibility\n      description: A value of the enumeration. The default value is <xref href=\"System.Windows.Visibility.Visible\"></xref>.\n  overload: System.Windows.UIElement.Visibility*\n  exceptions: []\n  attributes:\n  - type: System.Windows.LocalizabilityAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.UIElement.VisibilityProperty\n  commentId: F:System.Windows.UIElement.VisibilityProperty\n  id: VisibilityProperty\n  parent: System.Windows.UIElement\n  langs:\n  - csharp\n  name: VisibilityProperty\n  nameWithType: UIElement.VisibilityProperty\n  fullName: UIElement.VisibilityProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.UIElement.Visibility\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty VisibilityProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Media.Visual\n  parent: System.Windows.Media\n  isExternal: false\n  name: Visual\n  nameWithType: Visual\n  fullName: System.Windows.Media.Visual\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Windows.UIElement.#ctor\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: UIElement()\n  nameWithType: UIElement.UIElement()\n  fullName: UIElement.UIElement()\n- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddHandler(RoutedEvent, Delegate)\n  nameWithType: UIElement.AddHandler(RoutedEvent, Delegate)\n  fullName: UIElement.AddHandler(RoutedEvent, Delegate)\n- uid: System.Windows.RoutedEvent\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddHandler(RoutedEvent, Delegate, Boolean)\n  nameWithType: UIElement.AddHandler(RoutedEvent, Delegate, Boolean)\n  fullName: UIElement.AddHandler(RoutedEvent, Delegate, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddToEventRoute(EventRoute, RoutedEventArgs)\n  nameWithType: UIElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n  fullName: UIElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n- uid: System.Windows.EventRoute\n  parent: System.Windows\n  isExternal: false\n  name: EventRoute\n  nameWithType: EventRoute\n  fullName: System.Windows.EventRoute\n- uid: System.Windows.RoutedEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEventArgs\n  nameWithType: RoutedEventArgs\n  fullName: System.Windows.RoutedEventArgs\n- uid: System.Windows.UIElement.AllowDrop\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AllowDrop\n  nameWithType: UIElement.AllowDrop\n  fullName: UIElement.AllowDrop\n- uid: System.Windows.UIElement.AllowDropProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AllowDropProperty\n  nameWithType: UIElement.AllowDropProperty\n  fullName: UIElement.AllowDropProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock)\n  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  fullName: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n- uid: System.Windows.Media.Animation.AnimationClock\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: AnimationClock\n  nameWithType: AnimationClock\n  fullName: System.Windows.Media.Animation.AnimationClock\n- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  fullName: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n- uid: System.Windows.Media.Animation.HandoffBehavior\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: HandoffBehavior\n  nameWithType: HandoffBehavior\n  fullName: System.Windows.Media.Animation.HandoffBehavior\n- uid: System.Windows.UIElement.AreAnyTouchesCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCaptured\n  nameWithType: UIElement.AreAnyTouchesCaptured\n  fullName: UIElement.AreAnyTouchesCaptured\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCapturedProperty\n  nameWithType: UIElement.AreAnyTouchesCapturedProperty\n  fullName: UIElement.AreAnyTouchesCapturedProperty\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithin\n  nameWithType: UIElement.AreAnyTouchesCapturedWithin\n  fullName: UIElement.AreAnyTouchesCapturedWithin\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithinProperty\n  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty\n  fullName: UIElement.AreAnyTouchesCapturedWithinProperty\n- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOver\n  nameWithType: UIElement.AreAnyTouchesDirectlyOver\n  fullName: UIElement.AreAnyTouchesDirectlyOver\n- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOverProperty\n  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty\n  fullName: UIElement.AreAnyTouchesDirectlyOverProperty\n- uid: System.Windows.UIElement.AreAnyTouchesOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesOver\n  nameWithType: UIElement.AreAnyTouchesOver\n  fullName: UIElement.AreAnyTouchesOver\n- uid: System.Windows.UIElement.AreAnyTouchesOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesOverProperty\n  nameWithType: UIElement.AreAnyTouchesOverProperty\n  fullName: UIElement.AreAnyTouchesOverProperty\n- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Arrange(Rect)\n  nameWithType: UIElement.Arrange(Rect)\n  fullName: UIElement.Arrange(Rect)\n- uid: System.Windows.Rect\n  parent: System.Windows\n  isExternal: false\n  name: Rect\n  nameWithType: Rect\n  fullName: System.Windows.Rect\n- uid: System.Windows.UIElement.ArrangeCore(System.Windows.Rect)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ArrangeCore(Rect)\n  nameWithType: UIElement.ArrangeCore(Rect)\n  fullName: UIElement.ArrangeCore(Rect)\n- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline)\n  nameWithType: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n  fullName: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n- uid: System.Windows.Media.Animation.AnimationTimeline\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: AnimationTimeline\n  nameWithType: AnimationTimeline\n  fullName: System.Windows.Media.Animation.AnimationTimeline\n- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  nameWithType: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  fullName: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n- uid: System.Windows.UIElement.BitmapEffect\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffect\n  nameWithType: UIElement.BitmapEffect\n  fullName: UIElement.BitmapEffect\n- uid: System.Windows.Media.Effects.BitmapEffect\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: BitmapEffect\n  nameWithType: BitmapEffect\n  fullName: System.Windows.Media.Effects.BitmapEffect\n- uid: System.Windows.UIElement.BitmapEffectInput\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffectInput\n  nameWithType: UIElement.BitmapEffectInput\n  fullName: UIElement.BitmapEffectInput\n- uid: System.Windows.Media.Effects.BitmapEffectInput\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: BitmapEffectInput\n  nameWithType: BitmapEffectInput\n  fullName: System.Windows.Media.Effects.BitmapEffectInput\n- uid: System.Windows.UIElement.BitmapEffectInputProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffectInputProperty\n  nameWithType: UIElement.BitmapEffectInputProperty\n  fullName: UIElement.BitmapEffectInputProperty\n- uid: System.Windows.UIElement.BitmapEffectProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffectProperty\n  nameWithType: UIElement.BitmapEffectProperty\n  fullName: UIElement.BitmapEffectProperty\n- uid: System.Windows.UIElement.CacheMode\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CacheMode\n  nameWithType: UIElement.CacheMode\n  fullName: UIElement.CacheMode\n- uid: System.Windows.Media.CacheMode\n  parent: System.Windows.Media\n  isExternal: false\n  name: CacheMode\n  nameWithType: CacheMode\n  fullName: System.Windows.Media.CacheMode\n- uid: System.Windows.UIElement.CacheModeProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CacheModeProperty\n  nameWithType: UIElement.CacheModeProperty\n  fullName: UIElement.CacheModeProperty\n- uid: System.Windows.UIElement.CaptureMouse\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureMouse()\n  nameWithType: UIElement.CaptureMouse()\n  fullName: UIElement.CaptureMouse()\n- uid: System.Windows.UIElement.CaptureStylus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureStylus()\n  nameWithType: UIElement.CaptureStylus()\n  fullName: UIElement.CaptureStylus()\n- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureTouch(TouchDevice)\n  nameWithType: UIElement.CaptureTouch(TouchDevice)\n  fullName: UIElement.CaptureTouch(TouchDevice)\n- uid: System.Windows.Input.TouchDevice\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchDevice\n  nameWithType: TouchDevice\n  fullName: System.Windows.Input.TouchDevice\n- uid: System.Windows.UIElement.Clip\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Clip\n  nameWithType: UIElement.Clip\n  fullName: UIElement.Clip\n- uid: System.Windows.Media.Geometry\n  parent: System.Windows.Media\n  isExternal: false\n  name: Geometry\n  nameWithType: Geometry\n  fullName: System.Windows.Media.Geometry\n- uid: System.Windows.UIElement.ClipProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ClipProperty\n  nameWithType: UIElement.ClipProperty\n  fullName: UIElement.ClipProperty\n- uid: System.Windows.UIElement.ClipToBounds\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ClipToBounds\n  nameWithType: UIElement.ClipToBounds\n  fullName: UIElement.ClipToBounds\n- uid: System.Windows.UIElement.ClipToBoundsProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ClipToBoundsProperty\n  nameWithType: UIElement.ClipToBoundsProperty\n  fullName: UIElement.ClipToBoundsProperty\n- uid: System.Windows.UIElement.CommandBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CommandBindings\n  nameWithType: UIElement.CommandBindings\n  fullName: UIElement.CommandBindings\n- uid: System.Windows.Input.CommandBindingCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: CommandBindingCollection\n  nameWithType: CommandBindingCollection\n  fullName: System.Windows.Input.CommandBindingCollection\n- uid: System.Windows.UIElement.DesiredSize\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DesiredSize\n  nameWithType: UIElement.DesiredSize\n  fullName: UIElement.DesiredSize\n- uid: System.Windows.Size\n  parent: System.Windows\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: System.Windows.Size\n- uid: System.Windows.UIElement.DragEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragEnter\n  nameWithType: UIElement.DragEnter\n  fullName: UIElement.DragEnter\n- uid: System.Windows.DragEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: DragEventHandler\n  nameWithType: DragEventHandler\n  fullName: System.Windows.DragEventHandler\n- uid: System.Windows.UIElement.DragEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragEnterEvent\n  nameWithType: UIElement.DragEnterEvent\n  fullName: UIElement.DragEnterEvent\n- uid: System.Windows.UIElement.DragLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragLeave\n  nameWithType: UIElement.DragLeave\n  fullName: UIElement.DragLeave\n- uid: System.Windows.UIElement.DragLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragLeaveEvent\n  nameWithType: UIElement.DragLeaveEvent\n  fullName: UIElement.DragLeaveEvent\n- uid: System.Windows.UIElement.DragOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragOver\n  nameWithType: UIElement.DragOver\n  fullName: UIElement.DragOver\n- uid: System.Windows.UIElement.DragOverEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragOverEvent\n  nameWithType: UIElement.DragOverEvent\n  fullName: UIElement.DragOverEvent\n- uid: System.Windows.UIElement.Drop\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Drop\n  nameWithType: UIElement.Drop\n  fullName: UIElement.Drop\n- uid: System.Windows.UIElement.DropEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DropEvent\n  nameWithType: UIElement.DropEvent\n  fullName: UIElement.DropEvent\n- uid: System.Windows.UIElement.Effect\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Effect\n  nameWithType: UIElement.Effect\n  fullName: UIElement.Effect\n- uid: System.Windows.Media.Effects.Effect\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: Effect\n  nameWithType: Effect\n  fullName: System.Windows.Media.Effects.Effect\n- uid: System.Windows.UIElement.EffectProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: EffectProperty\n  nameWithType: UIElement.EffectProperty\n  fullName: UIElement.EffectProperty\n- uid: System.Windows.UIElement.Focus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Focus()\n  nameWithType: UIElement.Focus()\n  fullName: UIElement.Focus()\n- uid: System.Windows.UIElement.Focusable\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Focusable\n  nameWithType: UIElement.Focusable\n  fullName: UIElement.Focusable\n- uid: System.Windows.UIElement.FocusableChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: FocusableChanged\n  nameWithType: UIElement.FocusableChanged\n  fullName: UIElement.FocusableChanged\n- uid: System.Windows.DependencyPropertyChangedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: DependencyPropertyChangedEventHandler\n  nameWithType: DependencyPropertyChangedEventHandler\n  fullName: System.Windows.DependencyPropertyChangedEventHandler\n- uid: System.Windows.UIElement.FocusableProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: FocusableProperty\n  nameWithType: UIElement.FocusableProperty\n  fullName: UIElement.FocusableProperty\n- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GetAnimationBaseValue(DependencyProperty)\n  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)\n  fullName: UIElement.GetAnimationBaseValue(DependencyProperty)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.UIElement.GetLayoutClip(System.Windows.Size)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GetLayoutClip(Size)\n  nameWithType: UIElement.GetLayoutClip(Size)\n  fullName: UIElement.GetLayoutClip(Size)\n- uid: System.Windows.UIElement.GetUIParentCore\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GetUIParentCore()\n  nameWithType: UIElement.GetUIParentCore()\n  fullName: UIElement.GetUIParentCore()\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.UIElement.GiveFeedback\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GiveFeedback\n  nameWithType: UIElement.GiveFeedback\n  fullName: UIElement.GiveFeedback\n- uid: System.Windows.GiveFeedbackEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: GiveFeedbackEventHandler\n  nameWithType: GiveFeedbackEventHandler\n  fullName: System.Windows.GiveFeedbackEventHandler\n- uid: System.Windows.UIElement.GiveFeedbackEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GiveFeedbackEvent\n  nameWithType: UIElement.GiveFeedbackEvent\n  fullName: UIElement.GiveFeedbackEvent\n- uid: System.Windows.UIElement.GotFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotFocus\n  nameWithType: UIElement.GotFocus\n  fullName: UIElement.GotFocus\n- uid: System.Windows.RoutedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEventHandler\n  nameWithType: RoutedEventHandler\n  fullName: System.Windows.RoutedEventHandler\n- uid: System.Windows.UIElement.GotFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotFocusEvent\n  nameWithType: UIElement.GotFocusEvent\n  fullName: UIElement.GotFocusEvent\n- uid: System.Windows.UIElement.GotKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotKeyboardFocus\n  nameWithType: UIElement.GotKeyboardFocus\n  fullName: UIElement.GotKeyboardFocus\n- uid: System.Windows.Input.KeyboardFocusChangedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyboardFocusChangedEventHandler\n  nameWithType: KeyboardFocusChangedEventHandler\n  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler\n- uid: System.Windows.UIElement.GotKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotKeyboardFocusEvent\n  nameWithType: UIElement.GotKeyboardFocusEvent\n  fullName: UIElement.GotKeyboardFocusEvent\n- uid: System.Windows.UIElement.GotMouseCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotMouseCapture\n  nameWithType: UIElement.GotMouseCapture\n  fullName: UIElement.GotMouseCapture\n- uid: System.Windows.Input.MouseEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseEventHandler\n  nameWithType: MouseEventHandler\n  fullName: System.Windows.Input.MouseEventHandler\n- uid: System.Windows.UIElement.GotMouseCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotMouseCaptureEvent\n  nameWithType: UIElement.GotMouseCaptureEvent\n  fullName: UIElement.GotMouseCaptureEvent\n- uid: System.Windows.UIElement.GotStylusCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotStylusCapture\n  nameWithType: UIElement.GotStylusCapture\n  fullName: UIElement.GotStylusCapture\n- uid: System.Windows.Input.StylusEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusEventHandler\n  nameWithType: StylusEventHandler\n  fullName: System.Windows.Input.StylusEventHandler\n- uid: System.Windows.UIElement.GotStylusCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotStylusCaptureEvent\n  nameWithType: UIElement.GotStylusCaptureEvent\n  fullName: UIElement.GotStylusCaptureEvent\n- uid: System.Windows.UIElement.GotTouchCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotTouchCapture\n  nameWithType: UIElement.GotTouchCapture\n  fullName: UIElement.GotTouchCapture\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Windows.Input.TouchEventArgs\n  name: TouchEventArgs\n  nameWithType: TouchEventArgs\n  fullName: System.Windows.Input.TouchEventArgs\n- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<TouchEventArgs>\n  nameWithType: EventHandler<TouchEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.TouchEventArgs\n    name: TouchEventArgs\n    nameWithType: TouchEventArgs\n    fullName: System.Windows.Input.TouchEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.GotTouchCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotTouchCaptureEvent\n  nameWithType: UIElement.GotTouchCaptureEvent\n  fullName: UIElement.GotTouchCaptureEvent\n- uid: System.Windows.UIElement.HasAnimatedProperties\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HasAnimatedProperties\n  nameWithType: UIElement.HasAnimatedProperties\n  fullName: UIElement.HasAnimatedProperties\n- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HasEffectiveKeyboardFocus\n  nameWithType: UIElement.HasEffectiveKeyboardFocus\n  fullName: UIElement.HasEffectiveKeyboardFocus\n- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HitTestCore(GeometryHitTestParameters)\n  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)\n  fullName: UIElement.HitTestCore(GeometryHitTestParameters)\n- uid: System.Windows.Media.GeometryHitTestResult\n  parent: System.Windows.Media\n  isExternal: false\n  name: GeometryHitTestResult\n  nameWithType: GeometryHitTestResult\n  fullName: System.Windows.Media.GeometryHitTestResult\n- uid: System.Windows.Media.GeometryHitTestParameters\n  parent: System.Windows.Media\n  isExternal: false\n  name: GeometryHitTestParameters\n  nameWithType: GeometryHitTestParameters\n  fullName: System.Windows.Media.GeometryHitTestParameters\n- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HitTestCore(PointHitTestParameters)\n  nameWithType: UIElement.HitTestCore(PointHitTestParameters)\n  fullName: UIElement.HitTestCore(PointHitTestParameters)\n- uid: System.Windows.Media.HitTestResult\n  parent: System.Windows.Media\n  isExternal: false\n  name: HitTestResult\n  nameWithType: HitTestResult\n  fullName: System.Windows.Media.HitTestResult\n- uid: System.Windows.Media.PointHitTestParameters\n  parent: System.Windows.Media\n  isExternal: false\n  name: PointHitTestParameters\n  nameWithType: PointHitTestParameters\n  fullName: System.Windows.Media.PointHitTestParameters\n- uid: System.Windows.UIElement.InputBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InputBindings\n  nameWithType: UIElement.InputBindings\n  fullName: UIElement.InputBindings\n- uid: System.Windows.Input.InputBindingCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputBindingCollection\n  nameWithType: InputBindingCollection\n  fullName: System.Windows.Input.InputBindingCollection\n- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InputHitTest(Point)\n  nameWithType: UIElement.InputHitTest(Point)\n  fullName: UIElement.InputHitTest(Point)\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Point\n  parent: System.Windows\n  isExternal: false\n  name: Point\n  nameWithType: Point\n  fullName: System.Windows.Point\n- uid: System.Windows.UIElement.InvalidateArrange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateArrange()\n  nameWithType: UIElement.InvalidateArrange()\n  fullName: UIElement.InvalidateArrange()\n- uid: System.Windows.UIElement.InvalidateMeasure\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateMeasure()\n  nameWithType: UIElement.InvalidateMeasure()\n  fullName: UIElement.InvalidateMeasure()\n- uid: System.Windows.UIElement.InvalidateVisual\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateVisual()\n  nameWithType: UIElement.InvalidateVisual()\n  fullName: UIElement.InvalidateVisual()\n- uid: System.Windows.UIElement.IsArrangeValid\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsArrangeValid\n  nameWithType: UIElement.IsArrangeValid\n  fullName: UIElement.IsArrangeValid\n- uid: System.Windows.UIElement.IsEnabled\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabled\n  nameWithType: UIElement.IsEnabled\n  fullName: UIElement.IsEnabled\n- uid: System.Windows.UIElement.IsEnabledChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabledChanged\n  nameWithType: UIElement.IsEnabledChanged\n  fullName: UIElement.IsEnabledChanged\n- uid: System.Windows.UIElement.IsEnabledCore\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabledCore\n  nameWithType: UIElement.IsEnabledCore\n  fullName: UIElement.IsEnabledCore\n- uid: System.Windows.UIElement.IsEnabledProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabledProperty\n  nameWithType: UIElement.IsEnabledProperty\n  fullName: UIElement.IsEnabledProperty\n- uid: System.Windows.UIElement.IsFocused\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsFocused\n  nameWithType: UIElement.IsFocused\n  fullName: UIElement.IsFocused\n- uid: System.Windows.UIElement.IsFocusedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsFocusedProperty\n  nameWithType: UIElement.IsFocusedProperty\n  fullName: UIElement.IsFocusedProperty\n- uid: System.Windows.UIElement.IsHitTestVisible\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsHitTestVisible\n  nameWithType: UIElement.IsHitTestVisible\n  fullName: UIElement.IsHitTestVisible\n- uid: System.Windows.UIElement.IsHitTestVisibleChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsHitTestVisibleChanged\n  nameWithType: UIElement.IsHitTestVisibleChanged\n  fullName: UIElement.IsHitTestVisibleChanged\n- uid: System.Windows.UIElement.IsHitTestVisibleProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsHitTestVisibleProperty\n  nameWithType: UIElement.IsHitTestVisibleProperty\n  fullName: UIElement.IsHitTestVisibleProperty\n- uid: System.Windows.UIElement.IsInputMethodEnabled\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsInputMethodEnabled\n  nameWithType: UIElement.IsInputMethodEnabled\n  fullName: UIElement.IsInputMethodEnabled\n- uid: System.Windows.UIElement.IsKeyboardFocused\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocused\n  nameWithType: UIElement.IsKeyboardFocused\n  fullName: UIElement.IsKeyboardFocused\n- uid: System.Windows.UIElement.IsKeyboardFocusedChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusedChanged\n  nameWithType: UIElement.IsKeyboardFocusedChanged\n  fullName: UIElement.IsKeyboardFocusedChanged\n- uid: System.Windows.UIElement.IsKeyboardFocusedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusedProperty\n  nameWithType: UIElement.IsKeyboardFocusedProperty\n  fullName: UIElement.IsKeyboardFocusedProperty\n- uid: System.Windows.UIElement.IsKeyboardFocusWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusWithin\n  nameWithType: UIElement.IsKeyboardFocusWithin\n  fullName: UIElement.IsKeyboardFocusWithin\n- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusWithinChanged\n  nameWithType: UIElement.IsKeyboardFocusWithinChanged\n  fullName: UIElement.IsKeyboardFocusWithinChanged\n- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusWithinProperty\n  nameWithType: UIElement.IsKeyboardFocusWithinProperty\n  fullName: UIElement.IsKeyboardFocusWithinProperty\n- uid: System.Windows.UIElement.IsManipulationEnabled\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsManipulationEnabled\n  nameWithType: UIElement.IsManipulationEnabled\n  fullName: UIElement.IsManipulationEnabled\n- uid: System.Windows.UIElement.IsManipulationEnabledProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsManipulationEnabledProperty\n  nameWithType: UIElement.IsManipulationEnabledProperty\n  fullName: UIElement.IsManipulationEnabledProperty\n- uid: System.Windows.UIElement.IsMeasureValid\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMeasureValid\n  nameWithType: UIElement.IsMeasureValid\n  fullName: UIElement.IsMeasureValid\n- uid: System.Windows.UIElement.IsMouseCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptured\n  nameWithType: UIElement.IsMouseCaptured\n  fullName: UIElement.IsMouseCaptured\n- uid: System.Windows.UIElement.IsMouseCapturedChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCapturedChanged\n  nameWithType: UIElement.IsMouseCapturedChanged\n  fullName: UIElement.IsMouseCapturedChanged\n- uid: System.Windows.UIElement.IsMouseCapturedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCapturedProperty\n  nameWithType: UIElement.IsMouseCapturedProperty\n  fullName: UIElement.IsMouseCapturedProperty\n- uid: System.Windows.UIElement.IsMouseCaptureWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptureWithin\n  nameWithType: UIElement.IsMouseCaptureWithin\n  fullName: UIElement.IsMouseCaptureWithin\n- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptureWithinChanged\n  nameWithType: UIElement.IsMouseCaptureWithinChanged\n  fullName: UIElement.IsMouseCaptureWithinChanged\n- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptureWithinProperty\n  nameWithType: UIElement.IsMouseCaptureWithinProperty\n  fullName: UIElement.IsMouseCaptureWithinProperty\n- uid: System.Windows.UIElement.IsMouseDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseDirectlyOver\n  nameWithType: UIElement.IsMouseDirectlyOver\n  fullName: UIElement.IsMouseDirectlyOver\n- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseDirectlyOverChanged\n  nameWithType: UIElement.IsMouseDirectlyOverChanged\n  fullName: UIElement.IsMouseDirectlyOverChanged\n- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseDirectlyOverProperty\n  nameWithType: UIElement.IsMouseDirectlyOverProperty\n  fullName: UIElement.IsMouseDirectlyOverProperty\n- uid: System.Windows.UIElement.IsMouseOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseOver\n  nameWithType: UIElement.IsMouseOver\n  fullName: UIElement.IsMouseOver\n- uid: System.Windows.UIElement.IsMouseOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseOverProperty\n  nameWithType: UIElement.IsMouseOverProperty\n  fullName: UIElement.IsMouseOverProperty\n- uid: System.Windows.UIElement.IsStylusCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptured\n  nameWithType: UIElement.IsStylusCaptured\n  fullName: UIElement.IsStylusCaptured\n- uid: System.Windows.UIElement.IsStylusCapturedChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCapturedChanged\n  nameWithType: UIElement.IsStylusCapturedChanged\n  fullName: UIElement.IsStylusCapturedChanged\n- uid: System.Windows.UIElement.IsStylusCapturedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCapturedProperty\n  nameWithType: UIElement.IsStylusCapturedProperty\n  fullName: UIElement.IsStylusCapturedProperty\n- uid: System.Windows.UIElement.IsStylusCaptureWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptureWithin\n  nameWithType: UIElement.IsStylusCaptureWithin\n  fullName: UIElement.IsStylusCaptureWithin\n- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptureWithinChanged\n  nameWithType: UIElement.IsStylusCaptureWithinChanged\n  fullName: UIElement.IsStylusCaptureWithinChanged\n- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptureWithinProperty\n  nameWithType: UIElement.IsStylusCaptureWithinProperty\n  fullName: UIElement.IsStylusCaptureWithinProperty\n- uid: System.Windows.UIElement.IsStylusDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusDirectlyOver\n  nameWithType: UIElement.IsStylusDirectlyOver\n  fullName: UIElement.IsStylusDirectlyOver\n- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusDirectlyOverChanged\n  nameWithType: UIElement.IsStylusDirectlyOverChanged\n  fullName: UIElement.IsStylusDirectlyOverChanged\n- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusDirectlyOverProperty\n  nameWithType: UIElement.IsStylusDirectlyOverProperty\n  fullName: UIElement.IsStylusDirectlyOverProperty\n- uid: System.Windows.UIElement.IsStylusOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusOver\n  nameWithType: UIElement.IsStylusOver\n  fullName: UIElement.IsStylusOver\n- uid: System.Windows.UIElement.IsStylusOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusOverProperty\n  nameWithType: UIElement.IsStylusOverProperty\n  fullName: UIElement.IsStylusOverProperty\n- uid: System.Windows.UIElement.IsVisible\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsVisible\n  nameWithType: UIElement.IsVisible\n  fullName: UIElement.IsVisible\n- uid: System.Windows.UIElement.IsVisibleChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsVisibleChanged\n  nameWithType: UIElement.IsVisibleChanged\n  fullName: UIElement.IsVisibleChanged\n- uid: System.Windows.UIElement.IsVisibleProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsVisibleProperty\n  nameWithType: UIElement.IsVisibleProperty\n  fullName: UIElement.IsVisibleProperty\n- uid: System.Windows.UIElement.KeyDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyDown\n  nameWithType: UIElement.KeyDown\n  fullName: UIElement.KeyDown\n- uid: System.Windows.Input.KeyEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyEventHandler\n  nameWithType: KeyEventHandler\n  fullName: System.Windows.Input.KeyEventHandler\n- uid: System.Windows.UIElement.KeyDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyDownEvent\n  nameWithType: UIElement.KeyDownEvent\n  fullName: UIElement.KeyDownEvent\n- uid: System.Windows.UIElement.KeyUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyUp\n  nameWithType: UIElement.KeyUp\n  fullName: UIElement.KeyUp\n- uid: System.Windows.UIElement.KeyUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyUpEvent\n  nameWithType: UIElement.KeyUpEvent\n  fullName: UIElement.KeyUpEvent\n- uid: System.Windows.UIElement.LayoutUpdated\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LayoutUpdated\n  nameWithType: UIElement.LayoutUpdated\n  fullName: UIElement.LayoutUpdated\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.UIElement.LostFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostFocus\n  nameWithType: UIElement.LostFocus\n  fullName: UIElement.LostFocus\n- uid: System.Windows.UIElement.LostFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostFocusEvent\n  nameWithType: UIElement.LostFocusEvent\n  fullName: UIElement.LostFocusEvent\n- uid: System.Windows.UIElement.LostKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostKeyboardFocus\n  nameWithType: UIElement.LostKeyboardFocus\n  fullName: UIElement.LostKeyboardFocus\n- uid: System.Windows.UIElement.LostKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostKeyboardFocusEvent\n  nameWithType: UIElement.LostKeyboardFocusEvent\n  fullName: UIElement.LostKeyboardFocusEvent\n- uid: System.Windows.UIElement.LostMouseCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostMouseCapture\n  nameWithType: UIElement.LostMouseCapture\n  fullName: UIElement.LostMouseCapture\n- uid: System.Windows.UIElement.LostMouseCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostMouseCaptureEvent\n  nameWithType: UIElement.LostMouseCaptureEvent\n  fullName: UIElement.LostMouseCaptureEvent\n- uid: System.Windows.UIElement.LostStylusCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostStylusCapture\n  nameWithType: UIElement.LostStylusCapture\n  fullName: UIElement.LostStylusCapture\n- uid: System.Windows.UIElement.LostStylusCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostStylusCaptureEvent\n  nameWithType: UIElement.LostStylusCaptureEvent\n  fullName: UIElement.LostStylusCaptureEvent\n- uid: System.Windows.UIElement.LostTouchCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostTouchCapture\n  nameWithType: UIElement.LostTouchCapture\n  fullName: UIElement.LostTouchCapture\n- uid: System.Windows.UIElement.LostTouchCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostTouchCaptureEvent\n  nameWithType: UIElement.LostTouchCaptureEvent\n  fullName: UIElement.LostTouchCaptureEvent\n- uid: System.Windows.UIElement.ManipulationBoundaryFeedback\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationBoundaryFeedback\n  nameWithType: UIElement.ManipulationBoundaryFeedback\n  fullName: UIElement.ManipulationBoundaryFeedback\n- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n  name: ManipulationBoundaryFeedbackEventArgs\n  nameWithType: ManipulationBoundaryFeedbackEventArgs\n  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n- uid: System.EventHandler{System.Windows.Input.ManipulationBoundaryFeedbackEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ManipulationBoundaryFeedbackEventArgs>\n  nameWithType: EventHandler<ManipulationBoundaryFeedbackEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.ManipulationBoundaryFeedbackEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n    name: ManipulationBoundaryFeedbackEventArgs\n    nameWithType: ManipulationBoundaryFeedbackEventArgs\n    fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationBoundaryFeedbackEvent\n  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent\n  fullName: UIElement.ManipulationBoundaryFeedbackEvent\n- uid: System.Windows.UIElement.ManipulationCompleted\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationCompleted\n  nameWithType: UIElement.ManipulationCompleted\n  fullName: UIElement.ManipulationCompleted\n- uid: System.Windows.Input.ManipulationCompletedEventArgs\n  name: ManipulationCompletedEventArgs\n  nameWithType: ManipulationCompletedEventArgs\n  fullName: System.Windows.Input.ManipulationCompletedEventArgs\n- uid: System.EventHandler{System.Windows.Input.ManipulationCompletedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ManipulationCompletedEventArgs>\n  nameWithType: EventHandler<ManipulationCompletedEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.ManipulationCompletedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.ManipulationCompletedEventArgs\n    name: ManipulationCompletedEventArgs\n    nameWithType: ManipulationCompletedEventArgs\n    fullName: System.Windows.Input.ManipulationCompletedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.ManipulationCompletedEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationCompletedEvent\n  nameWithType: UIElement.ManipulationCompletedEvent\n  fullName: UIElement.ManipulationCompletedEvent\n- uid: System.Windows.UIElement.ManipulationDelta\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationDelta\n  nameWithType: UIElement.ManipulationDelta\n  fullName: UIElement.ManipulationDelta\n- uid: System.Windows.Input.ManipulationDeltaEventArgs\n  name: ManipulationDeltaEventArgs\n  nameWithType: ManipulationDeltaEventArgs\n  fullName: System.Windows.Input.ManipulationDeltaEventArgs\n- uid: System.EventHandler{System.Windows.Input.ManipulationDeltaEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ManipulationDeltaEventArgs>\n  nameWithType: EventHandler<ManipulationDeltaEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.ManipulationDeltaEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.ManipulationDeltaEventArgs\n    name: ManipulationDeltaEventArgs\n    nameWithType: ManipulationDeltaEventArgs\n    fullName: System.Windows.Input.ManipulationDeltaEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.ManipulationDeltaEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationDeltaEvent\n  nameWithType: UIElement.ManipulationDeltaEvent\n  fullName: UIElement.ManipulationDeltaEvent\n- uid: System.Windows.UIElement.ManipulationInertiaStarting\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationInertiaStarting\n  nameWithType: UIElement.ManipulationInertiaStarting\n  fullName: UIElement.ManipulationInertiaStarting\n- uid: System.Windows.Input.ManipulationInertiaStartingEventArgs\n  name: ManipulationInertiaStartingEventArgs\n  nameWithType: ManipulationInertiaStartingEventArgs\n  fullName: System.Windows.Input.ManipulationInertiaStartingEventArgs\n- uid: System.EventHandler{System.Windows.Input.ManipulationInertiaStartingEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ManipulationInertiaStartingEventArgs>\n  nameWithType: EventHandler<ManipulationInertiaStartingEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.ManipulationInertiaStartingEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.ManipulationInertiaStartingEventArgs\n    name: ManipulationInertiaStartingEventArgs\n    nameWithType: ManipulationInertiaStartingEventArgs\n    fullName: System.Windows.Input.ManipulationInertiaStartingEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationInertiaStartingEvent\n  nameWithType: UIElement.ManipulationInertiaStartingEvent\n  fullName: UIElement.ManipulationInertiaStartingEvent\n- uid: System.Windows.UIElement.ManipulationStarted\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStarted\n  nameWithType: UIElement.ManipulationStarted\n  fullName: UIElement.ManipulationStarted\n- uid: System.Windows.Input.ManipulationStartedEventArgs\n  name: ManipulationStartedEventArgs\n  nameWithType: ManipulationStartedEventArgs\n  fullName: System.Windows.Input.ManipulationStartedEventArgs\n- uid: System.EventHandler{System.Windows.Input.ManipulationStartedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ManipulationStartedEventArgs>\n  nameWithType: EventHandler<ManipulationStartedEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.ManipulationStartedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.ManipulationStartedEventArgs\n    name: ManipulationStartedEventArgs\n    nameWithType: ManipulationStartedEventArgs\n    fullName: System.Windows.Input.ManipulationStartedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.ManipulationStartedEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStartedEvent\n  nameWithType: UIElement.ManipulationStartedEvent\n  fullName: UIElement.ManipulationStartedEvent\n- uid: System.Windows.UIElement.ManipulationStarting\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStarting\n  nameWithType: UIElement.ManipulationStarting\n  fullName: UIElement.ManipulationStarting\n- uid: System.Windows.Input.ManipulationStartingEventArgs\n  name: ManipulationStartingEventArgs\n  nameWithType: ManipulationStartingEventArgs\n  fullName: System.Windows.Input.ManipulationStartingEventArgs\n- uid: System.EventHandler{System.Windows.Input.ManipulationStartingEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ManipulationStartingEventArgs>\n  nameWithType: EventHandler<ManipulationStartingEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.ManipulationStartingEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.ManipulationStartingEventArgs\n    name: ManipulationStartingEventArgs\n    nameWithType: ManipulationStartingEventArgs\n    fullName: System.Windows.Input.ManipulationStartingEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.ManipulationStartingEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStartingEvent\n  nameWithType: UIElement.ManipulationStartingEvent\n  fullName: UIElement.ManipulationStartingEvent\n- uid: System.Windows.UIElement.Measure(System.Windows.Size)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Measure(Size)\n  nameWithType: UIElement.Measure(Size)\n  fullName: UIElement.Measure(Size)\n- uid: System.Windows.UIElement.MeasureCore(System.Windows.Size)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MeasureCore(Size)\n  nameWithType: UIElement.MeasureCore(Size)\n  fullName: UIElement.MeasureCore(Size)\n- uid: System.Windows.UIElement.MouseDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseDown\n  nameWithType: UIElement.MouseDown\n  fullName: UIElement.MouseDown\n- uid: System.Windows.Input.MouseButtonEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButtonEventHandler\n  nameWithType: MouseButtonEventHandler\n  fullName: System.Windows.Input.MouseButtonEventHandler\n- uid: System.Windows.UIElement.MouseDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseDownEvent\n  nameWithType: UIElement.MouseDownEvent\n  fullName: UIElement.MouseDownEvent\n- uid: System.Windows.UIElement.MouseEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseEnter\n  nameWithType: UIElement.MouseEnter\n  fullName: UIElement.MouseEnter\n- uid: System.Windows.UIElement.MouseEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseEnterEvent\n  nameWithType: UIElement.MouseEnterEvent\n  fullName: UIElement.MouseEnterEvent\n- uid: System.Windows.UIElement.MouseLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeave\n  nameWithType: UIElement.MouseLeave\n  fullName: UIElement.MouseLeave\n- uid: System.Windows.UIElement.MouseLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeaveEvent\n  nameWithType: UIElement.MouseLeaveEvent\n  fullName: UIElement.MouseLeaveEvent\n- uid: System.Windows.UIElement.MouseLeftButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonDown\n  nameWithType: UIElement.MouseLeftButtonDown\n  fullName: UIElement.MouseLeftButtonDown\n- uid: System.Windows.UIElement.MouseLeftButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonDownEvent\n  nameWithType: UIElement.MouseLeftButtonDownEvent\n  fullName: UIElement.MouseLeftButtonDownEvent\n- uid: System.Windows.UIElement.MouseLeftButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonUp\n  nameWithType: UIElement.MouseLeftButtonUp\n  fullName: UIElement.MouseLeftButtonUp\n- uid: System.Windows.UIElement.MouseLeftButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonUpEvent\n  nameWithType: UIElement.MouseLeftButtonUpEvent\n  fullName: UIElement.MouseLeftButtonUpEvent\n- uid: System.Windows.UIElement.MouseMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseMove\n  nameWithType: UIElement.MouseMove\n  fullName: UIElement.MouseMove\n- uid: System.Windows.UIElement.MouseMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseMoveEvent\n  nameWithType: UIElement.MouseMoveEvent\n  fullName: UIElement.MouseMoveEvent\n- uid: System.Windows.UIElement.MouseRightButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonDown\n  nameWithType: UIElement.MouseRightButtonDown\n  fullName: UIElement.MouseRightButtonDown\n- uid: System.Windows.UIElement.MouseRightButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonDownEvent\n  nameWithType: UIElement.MouseRightButtonDownEvent\n  fullName: UIElement.MouseRightButtonDownEvent\n- uid: System.Windows.UIElement.MouseRightButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonUp\n  nameWithType: UIElement.MouseRightButtonUp\n  fullName: UIElement.MouseRightButtonUp\n- uid: System.Windows.UIElement.MouseRightButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonUpEvent\n  nameWithType: UIElement.MouseRightButtonUpEvent\n  fullName: UIElement.MouseRightButtonUpEvent\n- uid: System.Windows.UIElement.MouseUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseUp\n  nameWithType: UIElement.MouseUp\n  fullName: UIElement.MouseUp\n- uid: System.Windows.UIElement.MouseUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseUpEvent\n  nameWithType: UIElement.MouseUpEvent\n  fullName: UIElement.MouseUpEvent\n- uid: System.Windows.UIElement.MouseWheel\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseWheel\n  nameWithType: UIElement.MouseWheel\n  fullName: UIElement.MouseWheel\n- uid: System.Windows.Input.MouseWheelEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseWheelEventHandler\n  nameWithType: MouseWheelEventHandler\n  fullName: System.Windows.Input.MouseWheelEventHandler\n- uid: System.Windows.UIElement.MouseWheelEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseWheelEvent\n  nameWithType: UIElement.MouseWheelEvent\n  fullName: UIElement.MouseWheelEvent\n- uid: System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MoveFocus(TraversalRequest)\n  nameWithType: UIElement.MoveFocus(TraversalRequest)\n  fullName: UIElement.MoveFocus(TraversalRequest)\n- uid: System.Windows.Input.TraversalRequest\n  parent: System.Windows.Input\n  isExternal: false\n  name: TraversalRequest\n  nameWithType: TraversalRequest\n  fullName: System.Windows.Input.TraversalRequest\n- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnAccessKey(AccessKeyEventArgs)\n  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)\n  fullName: UIElement.OnAccessKey(AccessKeyEventArgs)\n- uid: System.Windows.Input.AccessKeyEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: AccessKeyEventArgs\n  nameWithType: AccessKeyEventArgs\n  fullName: System.Windows.Input.AccessKeyEventArgs\n- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnChildDesiredSizeChanged(UIElement)\n  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)\n  fullName: UIElement.OnChildDesiredSizeChanged(UIElement)\n- uid: System.Windows.UIElement\n  parent: System.Windows\n  isExternal: false\n  name: UIElement\n  nameWithType: UIElement\n  fullName: System.Windows.UIElement\n- uid: System.Windows.UIElement.OnCreateAutomationPeer\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnCreateAutomationPeer()\n  nameWithType: UIElement.OnCreateAutomationPeer()\n  fullName: UIElement.OnCreateAutomationPeer()\n- uid: System.Windows.Automation.Peers.AutomationPeer\n  parent: System.Windows.Automation.Peers\n  isExternal: false\n  name: AutomationPeer\n  nameWithType: AutomationPeer\n  fullName: System.Windows.Automation.Peers.AutomationPeer\n- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragEnter(DragEventArgs)\n  nameWithType: UIElement.OnDragEnter(DragEventArgs)\n  fullName: UIElement.OnDragEnter(DragEventArgs)\n- uid: System.Windows.DragEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: DragEventArgs\n  nameWithType: DragEventArgs\n  fullName: System.Windows.DragEventArgs\n- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragLeave(DragEventArgs)\n  nameWithType: UIElement.OnDragLeave(DragEventArgs)\n  fullName: UIElement.OnDragLeave(DragEventArgs)\n- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragOver(DragEventArgs)\n  nameWithType: UIElement.OnDragOver(DragEventArgs)\n  fullName: UIElement.OnDragOver(DragEventArgs)\n- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDrop(DragEventArgs)\n  nameWithType: UIElement.OnDrop(DragEventArgs)\n  fullName: UIElement.OnDrop(DragEventArgs)\n- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)\n  fullName: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)\n- uid: System.Windows.GiveFeedbackEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: GiveFeedbackEventArgs\n  nameWithType: GiveFeedbackEventArgs\n  fullName: System.Windows.GiveFeedbackEventArgs\n- uid: System.Windows.UIElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotFocus(RoutedEventArgs)\n  nameWithType: UIElement.OnGotFocus(RoutedEventArgs)\n  fullName: UIElement.OnGotFocus(RoutedEventArgs)\n- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.Input.KeyboardFocusChangedEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyboardFocusChangedEventArgs\n  nameWithType: KeyboardFocusChangedEventArgs\n  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs\n- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotMouseCapture(MouseEventArgs)\n  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)\n  fullName: UIElement.OnGotMouseCapture(MouseEventArgs)\n- uid: System.Windows.Input.MouseEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseEventArgs\n  nameWithType: MouseEventArgs\n  fullName: System.Windows.Input.MouseEventArgs\n- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotStylusCapture(StylusEventArgs)\n  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)\n  fullName: UIElement.OnGotStylusCapture(StylusEventArgs)\n- uid: System.Windows.Input.StylusEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusEventArgs\n  nameWithType: StylusEventArgs\n  fullName: System.Windows.Input.StylusEventArgs\n- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotTouchCapture(TouchEventArgs)\n  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)\n  fullName: UIElement.OnGotTouchCapture(TouchEventArgs)\n- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyPropertyChangedEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: DependencyPropertyChangedEventArgs\n  nameWithType: DependencyPropertyChangedEventArgs\n  fullName: System.Windows.DependencyPropertyChangedEventArgs\n- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnKeyDown(KeyEventArgs)\n  nameWithType: UIElement.OnKeyDown(KeyEventArgs)\n  fullName: UIElement.OnKeyDown(KeyEventArgs)\n- uid: System.Windows.Input.KeyEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyEventArgs\n  nameWithType: KeyEventArgs\n  fullName: System.Windows.Input.KeyEventArgs\n- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnKeyUp(KeyEventArgs)\n  nameWithType: UIElement.OnKeyUp(KeyEventArgs)\n  fullName: UIElement.OnKeyUp(KeyEventArgs)\n- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostFocus(RoutedEventArgs)\n  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)\n  fullName: UIElement.OnLostFocus(RoutedEventArgs)\n- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostMouseCapture(MouseEventArgs)\n  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)\n  fullName: UIElement.OnLostMouseCapture(MouseEventArgs)\n- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostStylusCapture(StylusEventArgs)\n  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)\n  fullName: UIElement.OnLostStylusCapture(StylusEventArgs)\n- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostTouchCapture(TouchEventArgs)\n  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)\n  fullName: UIElement.OnLostTouchCapture(TouchEventArgs)\n- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  nameWithType: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  fullName: UIElement.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationCompleted(ManipulationCompletedEventArgs)\n  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)\n  fullName: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)\n- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationDelta(ManipulationDeltaEventArgs)\n  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)\n  fullName: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)\n- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n  fullName: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationStarted(ManipulationStartedEventArgs)\n  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)\n  fullName: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)\n- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationStarting(ManipulationStartingEventArgs)\n  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)\n  fullName: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)\n- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseDown(MouseButtonEventArgs)\n- uid: System.Windows.Input.MouseButtonEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButtonEventArgs\n  nameWithType: MouseButtonEventArgs\n  fullName: System.Windows.Input.MouseButtonEventArgs\n- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseEnter(MouseEventArgs)\n  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)\n  fullName: UIElement.OnMouseEnter(MouseEventArgs)\n- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeave(MouseEventArgs)\n  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)\n  fullName: UIElement.OnMouseLeave(MouseEventArgs)\n- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseMove(MouseEventArgs)\n  nameWithType: UIElement.OnMouseMove(MouseEventArgs)\n  fullName: UIElement.OnMouseMove(MouseEventArgs)\n- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseWheel(MouseWheelEventArgs)\n  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)\n  fullName: UIElement.OnMouseWheel(MouseWheelEventArgs)\n- uid: System.Windows.Input.MouseWheelEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseWheelEventArgs\n  nameWithType: MouseWheelEventArgs\n  fullName: System.Windows.Input.MouseWheelEventArgs\n- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragEnter(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)\n  fullName: UIElement.OnPreviewDragEnter(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragLeave(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)\n  fullName: UIElement.OnPreviewDragLeave(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragOver(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)\n  fullName: UIElement.OnPreviewDragOver(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDrop(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)\n  fullName: UIElement.OnPreviewDrop(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  fullName: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewKeyDown(KeyEventArgs)\n  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)\n  fullName: UIElement.OnPreviewKeyDown(KeyEventArgs)\n- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewKeyUp(KeyEventArgs)\n  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)\n  fullName: UIElement.OnPreviewKeyUp(KeyEventArgs)\n- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseMove(MouseEventArgs)\n  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)\n  fullName: UIElement.OnPreviewMouseMove(MouseEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseWheel(MouseWheelEventArgs)\n  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n  fullName: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n- uid: System.Windows.QueryContinueDragEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: QueryContinueDragEventArgs\n  nameWithType: QueryContinueDragEventArgs\n  fullName: System.Windows.QueryContinueDragEventArgs\n- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  fullName: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n- uid: System.Windows.Input.StylusButtonEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusButtonEventArgs\n  nameWithType: StylusButtonEventArgs\n  fullName: System.Windows.Input.StylusButtonEventArgs\n- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  fullName: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusDown(StylusDownEventArgs)\n  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)\n  fullName: UIElement.OnPreviewStylusDown(StylusDownEventArgs)\n- uid: System.Windows.Input.StylusDownEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusDownEventArgs\n  nameWithType: StylusDownEventArgs\n  fullName: System.Windows.Input.StylusDownEventArgs\n- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusInAirMove(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusInRange(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusInRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusMove(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusOutOfRange(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n- uid: System.Windows.Input.StylusSystemGestureEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusSystemGestureEventArgs\n  nameWithType: StylusSystemGestureEventArgs\n  fullName: System.Windows.Input.StylusSystemGestureEventArgs\n- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusUp(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusUp(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTextInput(TextCompositionEventArgs)\n  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)\n  fullName: UIElement.OnPreviewTextInput(TextCompositionEventArgs)\n- uid: System.Windows.Input.TextCompositionEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: TextCompositionEventArgs\n  nameWithType: TextCompositionEventArgs\n  fullName: System.Windows.Input.TextCompositionEventArgs\n- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchDown(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchDown(TouchEventArgs)\n- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchMove(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchMove(TouchEventArgs)\n- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchUp(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchUp(TouchEventArgs)\n- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnQueryCursor(QueryCursorEventArgs)\n  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)\n  fullName: UIElement.OnQueryCursor(QueryCursorEventArgs)\n- uid: System.Windows.Input.QueryCursorEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: QueryCursorEventArgs\n  nameWithType: QueryCursorEventArgs\n  fullName: System.Windows.Input.QueryCursorEventArgs\n- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnRender(DrawingContext)\n  nameWithType: UIElement.OnRender(DrawingContext)\n  fullName: UIElement.OnRender(DrawingContext)\n- uid: System.Windows.Media.DrawingContext\n  parent: System.Windows.Media\n  isExternal: false\n  name: DrawingContext\n  nameWithType: DrawingContext\n  fullName: System.Windows.Media.DrawingContext\n- uid: System.Windows.UIElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnRenderSizeChanged(SizeChangedInfo)\n  nameWithType: UIElement.OnRenderSizeChanged(SizeChangedInfo)\n  fullName: UIElement.OnRenderSizeChanged(SizeChangedInfo)\n- uid: System.Windows.SizeChangedInfo\n  parent: System.Windows\n  isExternal: false\n  name: SizeChangedInfo\n  nameWithType: SizeChangedInfo\n  fullName: System.Windows.SizeChangedInfo\n- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)\n  fullName: UIElement.OnStylusButtonDown(StylusButtonEventArgs)\n- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)\n  fullName: UIElement.OnStylusButtonUp(StylusButtonEventArgs)\n- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusDown(StylusDownEventArgs)\n  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)\n  fullName: UIElement.OnStylusDown(StylusDownEventArgs)\n- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusEnter(StylusEventArgs)\n  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)\n  fullName: UIElement.OnStylusEnter(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusInAirMove(StylusEventArgs)\n  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)\n  fullName: UIElement.OnStylusInAirMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusInRange(StylusEventArgs)\n  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)\n  fullName: UIElement.OnStylusInRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusLeave(StylusEventArgs)\n  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)\n  fullName: UIElement.OnStylusLeave(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusMove(StylusEventArgs)\n  nameWithType: UIElement.OnStylusMove(StylusEventArgs)\n  fullName: UIElement.OnStylusMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusOutOfRange(StylusEventArgs)\n  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)\n  fullName: UIElement.OnStylusOutOfRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusUp(StylusEventArgs)\n  nameWithType: UIElement.OnStylusUp(StylusEventArgs)\n  fullName: UIElement.OnStylusUp(StylusEventArgs)\n- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTextInput(TextCompositionEventArgs)\n  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)\n  fullName: UIElement.OnTextInput(TextCompositionEventArgs)\n- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchDown(TouchEventArgs)\n  nameWithType: UIElement.OnTouchDown(TouchEventArgs)\n  fullName: UIElement.OnTouchDown(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchEnter(TouchEventArgs)\n  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)\n  fullName: UIElement.OnTouchEnter(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchLeave(TouchEventArgs)\n  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)\n  fullName: UIElement.OnTouchLeave(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchMove(TouchEventArgs)\n  nameWithType: UIElement.OnTouchMove(TouchEventArgs)\n  fullName: UIElement.OnTouchMove(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchUp(TouchEventArgs)\n  nameWithType: UIElement.OnTouchUp(TouchEventArgs)\n  fullName: UIElement.OnTouchUp(TouchEventArgs)\n- uid: System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnVisualParentChanged(DependencyObject)\n  nameWithType: UIElement.OnVisualParentChanged(DependencyObject)\n  fullName: UIElement.OnVisualParentChanged(DependencyObject)\n- uid: System.Windows.UIElement.Opacity\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Opacity\n  nameWithType: UIElement.Opacity\n  fullName: UIElement.Opacity\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.UIElement.OpacityMask\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OpacityMask\n  nameWithType: UIElement.OpacityMask\n  fullName: UIElement.OpacityMask\n- uid: System.Windows.Media.Brush\n  parent: System.Windows.Media\n  isExternal: false\n  name: Brush\n  nameWithType: Brush\n  fullName: System.Windows.Media.Brush\n- uid: System.Windows.UIElement.OpacityMaskProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OpacityMaskProperty\n  nameWithType: UIElement.OpacityMaskProperty\n  fullName: UIElement.OpacityMaskProperty\n- uid: System.Windows.UIElement.OpacityProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OpacityProperty\n  nameWithType: UIElement.OpacityProperty\n  fullName: UIElement.OpacityProperty\n- uid: System.Windows.UIElement.PersistId\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PersistId\n  nameWithType: UIElement.PersistId\n  fullName: UIElement.PersistId\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PredictFocus(FocusNavigationDirection)\n  nameWithType: UIElement.PredictFocus(FocusNavigationDirection)\n  fullName: UIElement.PredictFocus(FocusNavigationDirection)\n- uid: System.Windows.Input.FocusNavigationDirection\n  parent: System.Windows.Input\n  isExternal: false\n  name: FocusNavigationDirection\n  nameWithType: FocusNavigationDirection\n  fullName: System.Windows.Input.FocusNavigationDirection\n- uid: System.Windows.UIElement.PreviewDragEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragEnter\n  nameWithType: UIElement.PreviewDragEnter\n  fullName: UIElement.PreviewDragEnter\n- uid: System.Windows.UIElement.PreviewDragEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragEnterEvent\n  nameWithType: UIElement.PreviewDragEnterEvent\n  fullName: UIElement.PreviewDragEnterEvent\n- uid: System.Windows.UIElement.PreviewDragLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragLeave\n  nameWithType: UIElement.PreviewDragLeave\n  fullName: UIElement.PreviewDragLeave\n- uid: System.Windows.UIElement.PreviewDragLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragLeaveEvent\n  nameWithType: UIElement.PreviewDragLeaveEvent\n  fullName: UIElement.PreviewDragLeaveEvent\n- uid: System.Windows.UIElement.PreviewDragOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragOver\n  nameWithType: UIElement.PreviewDragOver\n  fullName: UIElement.PreviewDragOver\n- uid: System.Windows.UIElement.PreviewDragOverEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragOverEvent\n  nameWithType: UIElement.PreviewDragOverEvent\n  fullName: UIElement.PreviewDragOverEvent\n- uid: System.Windows.UIElement.PreviewDrop\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDrop\n  nameWithType: UIElement.PreviewDrop\n  fullName: UIElement.PreviewDrop\n- uid: System.Windows.UIElement.PreviewDropEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDropEvent\n  nameWithType: UIElement.PreviewDropEvent\n  fullName: UIElement.PreviewDropEvent\n- uid: System.Windows.UIElement.PreviewGiveFeedback\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGiveFeedback\n  nameWithType: UIElement.PreviewGiveFeedback\n  fullName: UIElement.PreviewGiveFeedback\n- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGiveFeedbackEvent\n  nameWithType: UIElement.PreviewGiveFeedbackEvent\n  fullName: UIElement.PreviewGiveFeedbackEvent\n- uid: System.Windows.UIElement.PreviewGotKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGotKeyboardFocus\n  nameWithType: UIElement.PreviewGotKeyboardFocus\n  fullName: UIElement.PreviewGotKeyboardFocus\n- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGotKeyboardFocusEvent\n  nameWithType: UIElement.PreviewGotKeyboardFocusEvent\n  fullName: UIElement.PreviewGotKeyboardFocusEvent\n- uid: System.Windows.UIElement.PreviewKeyDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyDown\n  nameWithType: UIElement.PreviewKeyDown\n  fullName: UIElement.PreviewKeyDown\n- uid: System.Windows.UIElement.PreviewKeyDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyDownEvent\n  nameWithType: UIElement.PreviewKeyDownEvent\n  fullName: UIElement.PreviewKeyDownEvent\n- uid: System.Windows.UIElement.PreviewKeyUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyUp\n  nameWithType: UIElement.PreviewKeyUp\n  fullName: UIElement.PreviewKeyUp\n- uid: System.Windows.UIElement.PreviewKeyUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyUpEvent\n  nameWithType: UIElement.PreviewKeyUpEvent\n  fullName: UIElement.PreviewKeyUpEvent\n- uid: System.Windows.UIElement.PreviewLostKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewLostKeyboardFocus\n  nameWithType: UIElement.PreviewLostKeyboardFocus\n  fullName: UIElement.PreviewLostKeyboardFocus\n- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewLostKeyboardFocusEvent\n  nameWithType: UIElement.PreviewLostKeyboardFocusEvent\n  fullName: UIElement.PreviewLostKeyboardFocusEvent\n- uid: System.Windows.UIElement.PreviewMouseDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseDown\n  nameWithType: UIElement.PreviewMouseDown\n  fullName: UIElement.PreviewMouseDown\n- uid: System.Windows.UIElement.PreviewMouseDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseDownEvent\n  nameWithType: UIElement.PreviewMouseDownEvent\n  fullName: UIElement.PreviewMouseDownEvent\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonDown\n  nameWithType: UIElement.PreviewMouseLeftButtonDown\n  fullName: UIElement.PreviewMouseLeftButtonDown\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonDownEvent\n  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent\n  fullName: UIElement.PreviewMouseLeftButtonDownEvent\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonUp\n  nameWithType: UIElement.PreviewMouseLeftButtonUp\n  fullName: UIElement.PreviewMouseLeftButtonUp\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonUpEvent\n  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent\n  fullName: UIElement.PreviewMouseLeftButtonUpEvent\n- uid: System.Windows.UIElement.PreviewMouseMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseMove\n  nameWithType: UIElement.PreviewMouseMove\n  fullName: UIElement.PreviewMouseMove\n- uid: System.Windows.UIElement.PreviewMouseMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseMoveEvent\n  nameWithType: UIElement.PreviewMouseMoveEvent\n  fullName: UIElement.PreviewMouseMoveEvent\n- uid: System.Windows.UIElement.PreviewMouseRightButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonDown\n  nameWithType: UIElement.PreviewMouseRightButtonDown\n  fullName: UIElement.PreviewMouseRightButtonDown\n- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonDownEvent\n  nameWithType: UIElement.PreviewMouseRightButtonDownEvent\n  fullName: UIElement.PreviewMouseRightButtonDownEvent\n- uid: System.Windows.UIElement.PreviewMouseRightButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonUp\n  nameWithType: UIElement.PreviewMouseRightButtonUp\n  fullName: UIElement.PreviewMouseRightButtonUp\n- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonUpEvent\n  nameWithType: UIElement.PreviewMouseRightButtonUpEvent\n  fullName: UIElement.PreviewMouseRightButtonUpEvent\n- uid: System.Windows.UIElement.PreviewMouseUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseUp\n  nameWithType: UIElement.PreviewMouseUp\n  fullName: UIElement.PreviewMouseUp\n- uid: System.Windows.UIElement.PreviewMouseUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseUpEvent\n  nameWithType: UIElement.PreviewMouseUpEvent\n  fullName: UIElement.PreviewMouseUpEvent\n- uid: System.Windows.UIElement.PreviewMouseWheel\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseWheel\n  nameWithType: UIElement.PreviewMouseWheel\n  fullName: UIElement.PreviewMouseWheel\n- uid: System.Windows.UIElement.PreviewMouseWheelEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseWheelEvent\n  nameWithType: UIElement.PreviewMouseWheelEvent\n  fullName: UIElement.PreviewMouseWheelEvent\n- uid: System.Windows.UIElement.PreviewQueryContinueDrag\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewQueryContinueDrag\n  nameWithType: UIElement.PreviewQueryContinueDrag\n  fullName: UIElement.PreviewQueryContinueDrag\n- uid: System.Windows.QueryContinueDragEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: QueryContinueDragEventHandler\n  nameWithType: QueryContinueDragEventHandler\n  fullName: System.Windows.QueryContinueDragEventHandler\n- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewQueryContinueDragEvent\n  nameWithType: UIElement.PreviewQueryContinueDragEvent\n  fullName: UIElement.PreviewQueryContinueDragEvent\n- uid: System.Windows.UIElement.PreviewStylusButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonDown\n  nameWithType: UIElement.PreviewStylusButtonDown\n  fullName: UIElement.PreviewStylusButtonDown\n- uid: System.Windows.Input.StylusButtonEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusButtonEventHandler\n  nameWithType: StylusButtonEventHandler\n  fullName: System.Windows.Input.StylusButtonEventHandler\n- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonDownEvent\n  nameWithType: UIElement.PreviewStylusButtonDownEvent\n  fullName: UIElement.PreviewStylusButtonDownEvent\n- uid: System.Windows.UIElement.PreviewStylusButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonUp\n  nameWithType: UIElement.PreviewStylusButtonUp\n  fullName: UIElement.PreviewStylusButtonUp\n- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonUpEvent\n  nameWithType: UIElement.PreviewStylusButtonUpEvent\n  fullName: UIElement.PreviewStylusButtonUpEvent\n- uid: System.Windows.UIElement.PreviewStylusDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusDown\n  nameWithType: UIElement.PreviewStylusDown\n  fullName: UIElement.PreviewStylusDown\n- uid: System.Windows.Input.StylusDownEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusDownEventHandler\n  nameWithType: StylusDownEventHandler\n  fullName: System.Windows.Input.StylusDownEventHandler\n- uid: System.Windows.UIElement.PreviewStylusDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusDownEvent\n  nameWithType: UIElement.PreviewStylusDownEvent\n  fullName: UIElement.PreviewStylusDownEvent\n- uid: System.Windows.UIElement.PreviewStylusInAirMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInAirMove\n  nameWithType: UIElement.PreviewStylusInAirMove\n  fullName: UIElement.PreviewStylusInAirMove\n- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInAirMoveEvent\n  nameWithType: UIElement.PreviewStylusInAirMoveEvent\n  fullName: UIElement.PreviewStylusInAirMoveEvent\n- uid: System.Windows.UIElement.PreviewStylusInRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInRange\n  nameWithType: UIElement.PreviewStylusInRange\n  fullName: UIElement.PreviewStylusInRange\n- uid: System.Windows.UIElement.PreviewStylusInRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInRangeEvent\n  nameWithType: UIElement.PreviewStylusInRangeEvent\n  fullName: UIElement.PreviewStylusInRangeEvent\n- uid: System.Windows.UIElement.PreviewStylusMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusMove\n  nameWithType: UIElement.PreviewStylusMove\n  fullName: UIElement.PreviewStylusMove\n- uid: System.Windows.UIElement.PreviewStylusMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusMoveEvent\n  nameWithType: UIElement.PreviewStylusMoveEvent\n  fullName: UIElement.PreviewStylusMoveEvent\n- uid: System.Windows.UIElement.PreviewStylusOutOfRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusOutOfRange\n  nameWithType: UIElement.PreviewStylusOutOfRange\n  fullName: UIElement.PreviewStylusOutOfRange\n- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusOutOfRangeEvent\n  nameWithType: UIElement.PreviewStylusOutOfRangeEvent\n  fullName: UIElement.PreviewStylusOutOfRangeEvent\n- uid: System.Windows.UIElement.PreviewStylusSystemGesture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusSystemGesture\n  nameWithType: UIElement.PreviewStylusSystemGesture\n  fullName: UIElement.PreviewStylusSystemGesture\n- uid: System.Windows.Input.StylusSystemGestureEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusSystemGestureEventHandler\n  nameWithType: StylusSystemGestureEventHandler\n  fullName: System.Windows.Input.StylusSystemGestureEventHandler\n- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusSystemGestureEvent\n  nameWithType: UIElement.PreviewStylusSystemGestureEvent\n  fullName: UIElement.PreviewStylusSystemGestureEvent\n- uid: System.Windows.UIElement.PreviewStylusUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusUp\n  nameWithType: UIElement.PreviewStylusUp\n  fullName: UIElement.PreviewStylusUp\n- uid: System.Windows.UIElement.PreviewStylusUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusUpEvent\n  nameWithType: UIElement.PreviewStylusUpEvent\n  fullName: UIElement.PreviewStylusUpEvent\n- uid: System.Windows.UIElement.PreviewTextInput\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTextInput\n  nameWithType: UIElement.PreviewTextInput\n  fullName: UIElement.PreviewTextInput\n- uid: System.Windows.Input.TextCompositionEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: TextCompositionEventHandler\n  nameWithType: TextCompositionEventHandler\n  fullName: System.Windows.Input.TextCompositionEventHandler\n- uid: System.Windows.UIElement.PreviewTextInputEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTextInputEvent\n  nameWithType: UIElement.PreviewTextInputEvent\n  fullName: UIElement.PreviewTextInputEvent\n- uid: System.Windows.UIElement.PreviewTouchDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchDown\n  nameWithType: UIElement.PreviewTouchDown\n  fullName: UIElement.PreviewTouchDown\n- uid: System.Windows.UIElement.PreviewTouchDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchDownEvent\n  nameWithType: UIElement.PreviewTouchDownEvent\n  fullName: UIElement.PreviewTouchDownEvent\n- uid: System.Windows.UIElement.PreviewTouchMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchMove\n  nameWithType: UIElement.PreviewTouchMove\n  fullName: UIElement.PreviewTouchMove\n- uid: System.Windows.UIElement.PreviewTouchMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchMoveEvent\n  nameWithType: UIElement.PreviewTouchMoveEvent\n  fullName: UIElement.PreviewTouchMoveEvent\n- uid: System.Windows.UIElement.PreviewTouchUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchUp\n  nameWithType: UIElement.PreviewTouchUp\n  fullName: UIElement.PreviewTouchUp\n- uid: System.Windows.UIElement.PreviewTouchUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchUpEvent\n  nameWithType: UIElement.PreviewTouchUpEvent\n  fullName: UIElement.PreviewTouchUpEvent\n- uid: System.Windows.UIElement.QueryContinueDrag\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryContinueDrag\n  nameWithType: UIElement.QueryContinueDrag\n  fullName: UIElement.QueryContinueDrag\n- uid: System.Windows.UIElement.QueryContinueDragEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryContinueDragEvent\n  nameWithType: UIElement.QueryContinueDragEvent\n  fullName: UIElement.QueryContinueDragEvent\n- uid: System.Windows.UIElement.QueryCursor\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryCursor\n  nameWithType: UIElement.QueryCursor\n  fullName: UIElement.QueryCursor\n- uid: System.Windows.Input.QueryCursorEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: QueryCursorEventHandler\n  nameWithType: QueryCursorEventHandler\n  fullName: System.Windows.Input.QueryCursorEventHandler\n- uid: System.Windows.UIElement.QueryCursorEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryCursorEvent\n  nameWithType: UIElement.QueryCursorEvent\n  fullName: UIElement.QueryCursorEvent\n- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RaiseEvent(RoutedEventArgs)\n  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)\n  fullName: UIElement.RaiseEvent(RoutedEventArgs)\n- uid: System.Windows.UIElement.ReleaseAllTouchCaptures\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseAllTouchCaptures()\n  nameWithType: UIElement.ReleaseAllTouchCaptures()\n  fullName: UIElement.ReleaseAllTouchCaptures()\n- uid: System.Windows.UIElement.ReleaseMouseCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseMouseCapture()\n  nameWithType: UIElement.ReleaseMouseCapture()\n  fullName: UIElement.ReleaseMouseCapture()\n- uid: System.Windows.UIElement.ReleaseStylusCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseStylusCapture()\n  nameWithType: UIElement.ReleaseStylusCapture()\n  fullName: UIElement.ReleaseStylusCapture()\n- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseTouchCapture(TouchDevice)\n  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)\n  fullName: UIElement.ReleaseTouchCapture(TouchDevice)\n- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RemoveHandler(RoutedEvent, Delegate)\n  nameWithType: UIElement.RemoveHandler(RoutedEvent, Delegate)\n  fullName: UIElement.RemoveHandler(RoutedEvent, Delegate)\n- uid: System.Windows.UIElement.RenderSize\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderSize\n  nameWithType: UIElement.RenderSize\n  fullName: UIElement.RenderSize\n- uid: System.Windows.UIElement.RenderTransform\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransform\n  nameWithType: UIElement.RenderTransform\n  fullName: UIElement.RenderTransform\n- uid: System.Windows.Media.Transform\n  parent: System.Windows.Media\n  isExternal: false\n  name: Transform\n  nameWithType: Transform\n  fullName: System.Windows.Media.Transform\n- uid: System.Windows.UIElement.RenderTransformOrigin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransformOrigin\n  nameWithType: UIElement.RenderTransformOrigin\n  fullName: UIElement.RenderTransformOrigin\n- uid: System.Windows.UIElement.RenderTransformOriginProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransformOriginProperty\n  nameWithType: UIElement.RenderTransformOriginProperty\n  fullName: UIElement.RenderTransformOriginProperty\n- uid: System.Windows.UIElement.RenderTransformProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransformProperty\n  nameWithType: UIElement.RenderTransformProperty\n  fullName: UIElement.RenderTransformProperty\n- uid: System.Windows.UIElement.ShouldSerializeCommandBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ShouldSerializeCommandBindings()\n  nameWithType: UIElement.ShouldSerializeCommandBindings()\n  fullName: UIElement.ShouldSerializeCommandBindings()\n- uid: System.Windows.UIElement.ShouldSerializeInputBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ShouldSerializeInputBindings()\n  nameWithType: UIElement.ShouldSerializeInputBindings()\n  fullName: UIElement.ShouldSerializeInputBindings()\n- uid: System.Windows.UIElement.SnapsToDevicePixels\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: SnapsToDevicePixels\n  nameWithType: UIElement.SnapsToDevicePixels\n  fullName: UIElement.SnapsToDevicePixels\n- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: SnapsToDevicePixelsProperty\n  nameWithType: UIElement.SnapsToDevicePixelsProperty\n  fullName: UIElement.SnapsToDevicePixelsProperty\n- uid: System.Windows.UIElement.StylusButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonDown\n  nameWithType: UIElement.StylusButtonDown\n  fullName: UIElement.StylusButtonDown\n- uid: System.Windows.UIElement.StylusButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonDownEvent\n  nameWithType: UIElement.StylusButtonDownEvent\n  fullName: UIElement.StylusButtonDownEvent\n- uid: System.Windows.UIElement.StylusButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonUp\n  nameWithType: UIElement.StylusButtonUp\n  fullName: UIElement.StylusButtonUp\n- uid: System.Windows.UIElement.StylusButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonUpEvent\n  nameWithType: UIElement.StylusButtonUpEvent\n  fullName: UIElement.StylusButtonUpEvent\n- uid: System.Windows.UIElement.StylusDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusDown\n  nameWithType: UIElement.StylusDown\n  fullName: UIElement.StylusDown\n- uid: System.Windows.UIElement.StylusDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusDownEvent\n  nameWithType: UIElement.StylusDownEvent\n  fullName: UIElement.StylusDownEvent\n- uid: System.Windows.UIElement.StylusEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusEnter\n  nameWithType: UIElement.StylusEnter\n  fullName: UIElement.StylusEnter\n- uid: System.Windows.UIElement.StylusEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusEnterEvent\n  nameWithType: UIElement.StylusEnterEvent\n  fullName: UIElement.StylusEnterEvent\n- uid: System.Windows.UIElement.StylusInAirMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInAirMove\n  nameWithType: UIElement.StylusInAirMove\n  fullName: UIElement.StylusInAirMove\n- uid: System.Windows.UIElement.StylusInAirMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInAirMoveEvent\n  nameWithType: UIElement.StylusInAirMoveEvent\n  fullName: UIElement.StylusInAirMoveEvent\n- uid: System.Windows.UIElement.StylusInRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInRange\n  nameWithType: UIElement.StylusInRange\n  fullName: UIElement.StylusInRange\n- uid: System.Windows.UIElement.StylusInRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInRangeEvent\n  nameWithType: UIElement.StylusInRangeEvent\n  fullName: UIElement.StylusInRangeEvent\n- uid: System.Windows.UIElement.StylusLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusLeave\n  nameWithType: UIElement.StylusLeave\n  fullName: UIElement.StylusLeave\n- uid: System.Windows.UIElement.StylusLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusLeaveEvent\n  nameWithType: UIElement.StylusLeaveEvent\n  fullName: UIElement.StylusLeaveEvent\n- uid: System.Windows.UIElement.StylusMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusMove\n  nameWithType: UIElement.StylusMove\n  fullName: UIElement.StylusMove\n- uid: System.Windows.UIElement.StylusMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusMoveEvent\n  nameWithType: UIElement.StylusMoveEvent\n  fullName: UIElement.StylusMoveEvent\n- uid: System.Windows.UIElement.StylusOutOfRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusOutOfRange\n  nameWithType: UIElement.StylusOutOfRange\n  fullName: UIElement.StylusOutOfRange\n- uid: System.Windows.UIElement.StylusOutOfRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusOutOfRangeEvent\n  nameWithType: UIElement.StylusOutOfRangeEvent\n  fullName: UIElement.StylusOutOfRangeEvent\n- uid: System.Windows.UIElement.StylusPlugIns\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusPlugIns\n  nameWithType: UIElement.StylusPlugIns\n  fullName: UIElement.StylusPlugIns\n- uid: System.Windows.Input.StylusPlugIns.StylusPlugInCollection\n  parent: System.Windows.Input.StylusPlugIns\n  isExternal: false\n  name: StylusPlugInCollection\n  nameWithType: StylusPlugInCollection\n  fullName: System.Windows.Input.StylusPlugIns.StylusPlugInCollection\n- uid: System.Windows.UIElement.StylusSystemGesture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusSystemGesture\n  nameWithType: UIElement.StylusSystemGesture\n  fullName: UIElement.StylusSystemGesture\n- uid: System.Windows.UIElement.StylusSystemGestureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusSystemGestureEvent\n  nameWithType: UIElement.StylusSystemGestureEvent\n  fullName: UIElement.StylusSystemGestureEvent\n- uid: System.Windows.UIElement.StylusUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusUp\n  nameWithType: UIElement.StylusUp\n  fullName: UIElement.StylusUp\n- uid: System.Windows.UIElement.StylusUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusUpEvent\n  nameWithType: UIElement.StylusUpEvent\n  fullName: UIElement.StylusUpEvent\n- uid: System.Windows.UIElement.TextInput\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TextInput\n  nameWithType: UIElement.TextInput\n  fullName: UIElement.TextInput\n- uid: System.Windows.UIElement.TextInputEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TextInputEvent\n  nameWithType: UIElement.TextInputEvent\n  fullName: UIElement.TextInputEvent\n- uid: System.Windows.UIElement.TouchDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchDown\n  nameWithType: UIElement.TouchDown\n  fullName: UIElement.TouchDown\n- uid: System.Windows.UIElement.TouchDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchDownEvent\n  nameWithType: UIElement.TouchDownEvent\n  fullName: UIElement.TouchDownEvent\n- uid: System.Windows.UIElement.TouchEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchEnter\n  nameWithType: UIElement.TouchEnter\n  fullName: UIElement.TouchEnter\n- uid: System.Windows.UIElement.TouchEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchEnterEvent\n  nameWithType: UIElement.TouchEnterEvent\n  fullName: UIElement.TouchEnterEvent\n- uid: System.Windows.UIElement.TouchesCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesCaptured\n  nameWithType: UIElement.TouchesCaptured\n  fullName: UIElement.TouchesCaptured\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TouchDevice>\n  nameWithType: IEnumerable<TouchDevice>\n  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.TouchDevice\n    name: TouchDevice\n    nameWithType: TouchDevice\n    fullName: System.Windows.Input.TouchDevice\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.UIElement.TouchesCapturedWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesCapturedWithin\n  nameWithType: UIElement.TouchesCapturedWithin\n  fullName: UIElement.TouchesCapturedWithin\n- uid: System.Windows.UIElement.TouchesDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesDirectlyOver\n  nameWithType: UIElement.TouchesDirectlyOver\n  fullName: UIElement.TouchesDirectlyOver\n- uid: System.Windows.UIElement.TouchesOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesOver\n  nameWithType: UIElement.TouchesOver\n  fullName: UIElement.TouchesOver\n- uid: System.Windows.UIElement.TouchLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchLeave\n  nameWithType: UIElement.TouchLeave\n  fullName: UIElement.TouchLeave\n- uid: System.Windows.UIElement.TouchLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchLeaveEvent\n  nameWithType: UIElement.TouchLeaveEvent\n  fullName: UIElement.TouchLeaveEvent\n- uid: System.Windows.UIElement.TouchMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchMove\n  nameWithType: UIElement.TouchMove\n  fullName: UIElement.TouchMove\n- uid: System.Windows.UIElement.TouchMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchMoveEvent\n  nameWithType: UIElement.TouchMoveEvent\n  fullName: UIElement.TouchMoveEvent\n- uid: System.Windows.UIElement.TouchUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchUp\n  nameWithType: UIElement.TouchUp\n  fullName: UIElement.TouchUp\n- uid: System.Windows.UIElement.TouchUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchUpEvent\n  nameWithType: UIElement.TouchUpEvent\n  fullName: UIElement.TouchUpEvent\n- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TranslatePoint(Point, UIElement)\n  nameWithType: UIElement.TranslatePoint(Point, UIElement)\n  fullName: UIElement.TranslatePoint(Point, UIElement)\n- uid: System.Windows.UIElement.Uid\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Uid\n  nameWithType: UIElement.Uid\n  fullName: UIElement.Uid\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.UIElement.UidProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: UidProperty\n  nameWithType: UIElement.UidProperty\n  fullName: UIElement.UidProperty\n- uid: System.Windows.UIElement.UpdateLayout\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: UpdateLayout()\n  nameWithType: UIElement.UpdateLayout()\n  fullName: UIElement.UpdateLayout()\n- uid: System.Windows.UIElement.Visibility\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Visibility\n  nameWithType: UIElement.Visibility\n  fullName: UIElement.Visibility\n- uid: System.Windows.Visibility\n  parent: System.Windows\n  isExternal: false\n  name: Visibility\n  nameWithType: Visibility\n  fullName: System.Windows.Visibility\n- uid: System.Windows.UIElement.VisibilityProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: VisibilityProperty\n  nameWithType: UIElement.VisibilityProperty\n  fullName: UIElement.VisibilityProperty\n- uid: System.Windows.UIElement.ApplyAnimationClock*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ApplyAnimationClock\n  nameWithType: UIElement.ApplyAnimationClock\n  fullName: UIElement.ApplyAnimationClock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.#ctor*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: UIElement\n  nameWithType: UIElement.UIElement\n  fullName: UIElement.UIElement\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.AddHandler*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddHandler\n  nameWithType: UIElement.AddHandler\n  fullName: UIElement.AddHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.AddToEventRoute*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddToEventRoute\n  nameWithType: UIElement.AddToEventRoute\n  fullName: UIElement.AddToEventRoute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.AllowDrop*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AllowDrop\n  nameWithType: UIElement.AllowDrop\n  fullName: UIElement.AllowDrop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.AreAnyTouchesCaptured*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCaptured\n  nameWithType: UIElement.AreAnyTouchesCaptured\n  fullName: UIElement.AreAnyTouchesCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithin\n  nameWithType: UIElement.AreAnyTouchesCapturedWithin\n  fullName: UIElement.AreAnyTouchesCapturedWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOver\n  nameWithType: UIElement.AreAnyTouchesDirectlyOver\n  fullName: UIElement.AreAnyTouchesDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.AreAnyTouchesOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesOver\n  nameWithType: UIElement.AreAnyTouchesOver\n  fullName: UIElement.AreAnyTouchesOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Arrange*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Arrange\n  nameWithType: UIElement.Arrange\n  fullName: UIElement.Arrange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ArrangeCore*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ArrangeCore\n  nameWithType: UIElement.ArrangeCore\n  fullName: UIElement.ArrangeCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.BeginAnimation*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BeginAnimation\n  nameWithType: UIElement.BeginAnimation\n  fullName: UIElement.BeginAnimation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.BitmapEffect*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffect\n  nameWithType: UIElement.BitmapEffect\n  fullName: UIElement.BitmapEffect\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.BitmapEffectInput*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffectInput\n  nameWithType: UIElement.BitmapEffectInput\n  fullName: UIElement.BitmapEffectInput\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.CacheMode*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CacheMode\n  nameWithType: UIElement.CacheMode\n  fullName: UIElement.CacheMode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.CaptureMouse*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureMouse\n  nameWithType: UIElement.CaptureMouse\n  fullName: UIElement.CaptureMouse\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.CaptureStylus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureStylus\n  nameWithType: UIElement.CaptureStylus\n  fullName: UIElement.CaptureStylus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.CaptureTouch*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureTouch\n  nameWithType: UIElement.CaptureTouch\n  fullName: UIElement.CaptureTouch\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Clip*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Clip\n  nameWithType: UIElement.Clip\n  fullName: UIElement.Clip\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ClipToBounds*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ClipToBounds\n  nameWithType: UIElement.ClipToBounds\n  fullName: UIElement.ClipToBounds\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.CommandBindings*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CommandBindings\n  nameWithType: UIElement.CommandBindings\n  fullName: UIElement.CommandBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.DesiredSize*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DesiredSize\n  nameWithType: UIElement.DesiredSize\n  fullName: UIElement.DesiredSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Effect*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Effect\n  nameWithType: UIElement.Effect\n  fullName: UIElement.Effect\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Focus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Focus\n  nameWithType: UIElement.Focus\n  fullName: UIElement.Focus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Focusable*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Focusable\n  nameWithType: UIElement.Focusable\n  fullName: UIElement.Focusable\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.GetAnimationBaseValue*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GetAnimationBaseValue\n  nameWithType: UIElement.GetAnimationBaseValue\n  fullName: UIElement.GetAnimationBaseValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.GetLayoutClip*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GetLayoutClip\n  nameWithType: UIElement.GetLayoutClip\n  fullName: UIElement.GetLayoutClip\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.GetUIParentCore*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GetUIParentCore\n  nameWithType: UIElement.GetUIParentCore\n  fullName: UIElement.GetUIParentCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.HasAnimatedProperties*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HasAnimatedProperties\n  nameWithType: UIElement.HasAnimatedProperties\n  fullName: UIElement.HasAnimatedProperties\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HasEffectiveKeyboardFocus\n  nameWithType: UIElement.HasEffectiveKeyboardFocus\n  fullName: UIElement.HasEffectiveKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.HitTestCore*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HitTestCore\n  nameWithType: UIElement.HitTestCore\n  fullName: UIElement.HitTestCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.InputBindings*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InputBindings\n  nameWithType: UIElement.InputBindings\n  fullName: UIElement.InputBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.InputHitTest*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InputHitTest\n  nameWithType: UIElement.InputHitTest\n  fullName: UIElement.InputHitTest\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.InvalidateArrange*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateArrange\n  nameWithType: UIElement.InvalidateArrange\n  fullName: UIElement.InvalidateArrange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.InvalidateMeasure*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateMeasure\n  nameWithType: UIElement.InvalidateMeasure\n  fullName: UIElement.InvalidateMeasure\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.InvalidateVisual*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateVisual\n  nameWithType: UIElement.InvalidateVisual\n  fullName: UIElement.InvalidateVisual\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsArrangeValid*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsArrangeValid\n  nameWithType: UIElement.IsArrangeValid\n  fullName: UIElement.IsArrangeValid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsEnabled*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabled\n  nameWithType: UIElement.IsEnabled\n  fullName: UIElement.IsEnabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsEnabledCore*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabledCore\n  nameWithType: UIElement.IsEnabledCore\n  fullName: UIElement.IsEnabledCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsFocused*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsFocused\n  nameWithType: UIElement.IsFocused\n  fullName: UIElement.IsFocused\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsHitTestVisible*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsHitTestVisible\n  nameWithType: UIElement.IsHitTestVisible\n  fullName: UIElement.IsHitTestVisible\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsInputMethodEnabled*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsInputMethodEnabled\n  nameWithType: UIElement.IsInputMethodEnabled\n  fullName: UIElement.IsInputMethodEnabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsKeyboardFocused*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocused\n  nameWithType: UIElement.IsKeyboardFocused\n  fullName: UIElement.IsKeyboardFocused\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsKeyboardFocusWithin*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusWithin\n  nameWithType: UIElement.IsKeyboardFocusWithin\n  fullName: UIElement.IsKeyboardFocusWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsManipulationEnabled*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsManipulationEnabled\n  nameWithType: UIElement.IsManipulationEnabled\n  fullName: UIElement.IsManipulationEnabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsMeasureValid*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMeasureValid\n  nameWithType: UIElement.IsMeasureValid\n  fullName: UIElement.IsMeasureValid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsMouseCaptured*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptured\n  nameWithType: UIElement.IsMouseCaptured\n  fullName: UIElement.IsMouseCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsMouseCaptureWithin*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptureWithin\n  nameWithType: UIElement.IsMouseCaptureWithin\n  fullName: UIElement.IsMouseCaptureWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsMouseDirectlyOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseDirectlyOver\n  nameWithType: UIElement.IsMouseDirectlyOver\n  fullName: UIElement.IsMouseDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsMouseOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseOver\n  nameWithType: UIElement.IsMouseOver\n  fullName: UIElement.IsMouseOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsStylusCaptured*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptured\n  nameWithType: UIElement.IsStylusCaptured\n  fullName: UIElement.IsStylusCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsStylusCaptureWithin*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptureWithin\n  nameWithType: UIElement.IsStylusCaptureWithin\n  fullName: UIElement.IsStylusCaptureWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsStylusDirectlyOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusDirectlyOver\n  nameWithType: UIElement.IsStylusDirectlyOver\n  fullName: UIElement.IsStylusDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsStylusOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusOver\n  nameWithType: UIElement.IsStylusOver\n  fullName: UIElement.IsStylusOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.IsVisible*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsVisible\n  nameWithType: UIElement.IsVisible\n  fullName: UIElement.IsVisible\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Measure*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Measure\n  nameWithType: UIElement.Measure\n  fullName: UIElement.Measure\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.MeasureCore*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MeasureCore\n  nameWithType: UIElement.MeasureCore\n  fullName: UIElement.MeasureCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.MoveFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MoveFocus\n  nameWithType: UIElement.MoveFocus\n  fullName: UIElement.MoveFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnAccessKey*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnAccessKey\n  nameWithType: UIElement.OnAccessKey\n  fullName: UIElement.OnAccessKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnChildDesiredSizeChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnChildDesiredSizeChanged\n  nameWithType: UIElement.OnChildDesiredSizeChanged\n  fullName: UIElement.OnChildDesiredSizeChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnCreateAutomationPeer*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnCreateAutomationPeer\n  nameWithType: UIElement.OnCreateAutomationPeer\n  fullName: UIElement.OnCreateAutomationPeer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnDragEnter*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragEnter\n  nameWithType: UIElement.OnDragEnter\n  fullName: UIElement.OnDragEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnDragLeave*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragLeave\n  nameWithType: UIElement.OnDragLeave\n  fullName: UIElement.OnDragLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnDragOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragOver\n  nameWithType: UIElement.OnDragOver\n  fullName: UIElement.OnDragOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnDrop*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDrop\n  nameWithType: UIElement.OnDrop\n  fullName: UIElement.OnDrop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnGiveFeedback*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGiveFeedback\n  nameWithType: UIElement.OnGiveFeedback\n  fullName: UIElement.OnGiveFeedback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnGotFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotFocus\n  nameWithType: UIElement.OnGotFocus\n  fullName: UIElement.OnGotFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnGotKeyboardFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotKeyboardFocus\n  nameWithType: UIElement.OnGotKeyboardFocus\n  fullName: UIElement.OnGotKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnGotMouseCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotMouseCapture\n  nameWithType: UIElement.OnGotMouseCapture\n  fullName: UIElement.OnGotMouseCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnGotStylusCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotStylusCapture\n  nameWithType: UIElement.OnGotStylusCapture\n  fullName: UIElement.OnGotStylusCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnGotTouchCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotTouchCapture\n  nameWithType: UIElement.OnGotTouchCapture\n  fullName: UIElement.OnGotTouchCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsKeyboardFocusedChanged\n  nameWithType: UIElement.OnIsKeyboardFocusedChanged\n  fullName: UIElement.OnIsKeyboardFocusedChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsKeyboardFocusWithinChanged\n  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged\n  fullName: UIElement.OnIsKeyboardFocusWithinChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsMouseCapturedChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseCapturedChanged\n  nameWithType: UIElement.OnIsMouseCapturedChanged\n  fullName: UIElement.OnIsMouseCapturedChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseCaptureWithinChanged\n  nameWithType: UIElement.OnIsMouseCaptureWithinChanged\n  fullName: UIElement.OnIsMouseCaptureWithinChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseDirectlyOverChanged\n  nameWithType: UIElement.OnIsMouseDirectlyOverChanged\n  fullName: UIElement.OnIsMouseDirectlyOverChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsStylusCapturedChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusCapturedChanged\n  nameWithType: UIElement.OnIsStylusCapturedChanged\n  fullName: UIElement.OnIsStylusCapturedChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusCaptureWithinChanged\n  nameWithType: UIElement.OnIsStylusCaptureWithinChanged\n  fullName: UIElement.OnIsStylusCaptureWithinChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusDirectlyOverChanged\n  nameWithType: UIElement.OnIsStylusDirectlyOverChanged\n  fullName: UIElement.OnIsStylusDirectlyOverChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnKeyDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnKeyDown\n  nameWithType: UIElement.OnKeyDown\n  fullName: UIElement.OnKeyDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnKeyUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnKeyUp\n  nameWithType: UIElement.OnKeyUp\n  fullName: UIElement.OnKeyUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnLostFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostFocus\n  nameWithType: UIElement.OnLostFocus\n  fullName: UIElement.OnLostFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnLostKeyboardFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostKeyboardFocus\n  nameWithType: UIElement.OnLostKeyboardFocus\n  fullName: UIElement.OnLostKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnLostMouseCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostMouseCapture\n  nameWithType: UIElement.OnLostMouseCapture\n  fullName: UIElement.OnLostMouseCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnLostStylusCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostStylusCapture\n  nameWithType: UIElement.OnLostStylusCapture\n  fullName: UIElement.OnLostStylusCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnLostTouchCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostTouchCapture\n  nameWithType: UIElement.OnLostTouchCapture\n  fullName: UIElement.OnLostTouchCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnManipulationBoundaryFeedback*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationBoundaryFeedback\n  nameWithType: UIElement.OnManipulationBoundaryFeedback\n  fullName: UIElement.OnManipulationBoundaryFeedback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnManipulationCompleted*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationCompleted\n  nameWithType: UIElement.OnManipulationCompleted\n  fullName: UIElement.OnManipulationCompleted\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnManipulationDelta*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationDelta\n  nameWithType: UIElement.OnManipulationDelta\n  fullName: UIElement.OnManipulationDelta\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnManipulationInertiaStarting*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationInertiaStarting\n  nameWithType: UIElement.OnManipulationInertiaStarting\n  fullName: UIElement.OnManipulationInertiaStarting\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnManipulationStarted*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationStarted\n  nameWithType: UIElement.OnManipulationStarted\n  fullName: UIElement.OnManipulationStarted\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnManipulationStarting*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationStarting\n  nameWithType: UIElement.OnManipulationStarting\n  fullName: UIElement.OnManipulationStarting\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseDown\n  nameWithType: UIElement.OnMouseDown\n  fullName: UIElement.OnMouseDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseEnter*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseEnter\n  nameWithType: UIElement.OnMouseEnter\n  fullName: UIElement.OnMouseEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseLeave*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeave\n  nameWithType: UIElement.OnMouseLeave\n  fullName: UIElement.OnMouseLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseLeftButtonDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeftButtonDown\n  nameWithType: UIElement.OnMouseLeftButtonDown\n  fullName: UIElement.OnMouseLeftButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseLeftButtonUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeftButtonUp\n  nameWithType: UIElement.OnMouseLeftButtonUp\n  fullName: UIElement.OnMouseLeftButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseMove\n  nameWithType: UIElement.OnMouseMove\n  fullName: UIElement.OnMouseMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseRightButtonDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseRightButtonDown\n  nameWithType: UIElement.OnMouseRightButtonDown\n  fullName: UIElement.OnMouseRightButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseRightButtonUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseRightButtonUp\n  nameWithType: UIElement.OnMouseRightButtonUp\n  fullName: UIElement.OnMouseRightButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseUp\n  nameWithType: UIElement.OnMouseUp\n  fullName: UIElement.OnMouseUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnMouseWheel*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseWheel\n  nameWithType: UIElement.OnMouseWheel\n  fullName: UIElement.OnMouseWheel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewDragEnter*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragEnter\n  nameWithType: UIElement.OnPreviewDragEnter\n  fullName: UIElement.OnPreviewDragEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewDragLeave*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragLeave\n  nameWithType: UIElement.OnPreviewDragLeave\n  fullName: UIElement.OnPreviewDragLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewDragOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragOver\n  nameWithType: UIElement.OnPreviewDragOver\n  fullName: UIElement.OnPreviewDragOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewDrop*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDrop\n  nameWithType: UIElement.OnPreviewDrop\n  fullName: UIElement.OnPreviewDrop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewGiveFeedback*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewGiveFeedback\n  nameWithType: UIElement.OnPreviewGiveFeedback\n  fullName: UIElement.OnPreviewGiveFeedback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewGotKeyboardFocus\n  nameWithType: UIElement.OnPreviewGotKeyboardFocus\n  fullName: UIElement.OnPreviewGotKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewKeyDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewKeyDown\n  nameWithType: UIElement.OnPreviewKeyDown\n  fullName: UIElement.OnPreviewKeyDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewKeyUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewKeyUp\n  nameWithType: UIElement.OnPreviewKeyUp\n  fullName: UIElement.OnPreviewKeyUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewLostKeyboardFocus\n  nameWithType: UIElement.OnPreviewLostKeyboardFocus\n  fullName: UIElement.OnPreviewLostKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseDown\n  nameWithType: UIElement.OnPreviewMouseDown\n  fullName: UIElement.OnPreviewMouseDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonDown\n  nameWithType: UIElement.OnPreviewMouseLeftButtonDown\n  fullName: UIElement.OnPreviewMouseLeftButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonUp\n  nameWithType: UIElement.OnPreviewMouseLeftButtonUp\n  fullName: UIElement.OnPreviewMouseLeftButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseMove\n  nameWithType: UIElement.OnPreviewMouseMove\n  fullName: UIElement.OnPreviewMouseMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonDown\n  nameWithType: UIElement.OnPreviewMouseRightButtonDown\n  fullName: UIElement.OnPreviewMouseRightButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonUp\n  nameWithType: UIElement.OnPreviewMouseRightButtonUp\n  fullName: UIElement.OnPreviewMouseRightButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseUp\n  nameWithType: UIElement.OnPreviewMouseUp\n  fullName: UIElement.OnPreviewMouseUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewMouseWheel*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseWheel\n  nameWithType: UIElement.OnPreviewMouseWheel\n  fullName: UIElement.OnPreviewMouseWheel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewQueryContinueDrag\n  nameWithType: UIElement.OnPreviewQueryContinueDrag\n  fullName: UIElement.OnPreviewQueryContinueDrag\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusButtonDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusButtonDown\n  nameWithType: UIElement.OnPreviewStylusButtonDown\n  fullName: UIElement.OnPreviewStylusButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusButtonUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusButtonUp\n  nameWithType: UIElement.OnPreviewStylusButtonUp\n  fullName: UIElement.OnPreviewStylusButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusDown\n  nameWithType: UIElement.OnPreviewStylusDown\n  fullName: UIElement.OnPreviewStylusDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusInAirMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusInAirMove\n  nameWithType: UIElement.OnPreviewStylusInAirMove\n  fullName: UIElement.OnPreviewStylusInAirMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusInRange*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusInRange\n  nameWithType: UIElement.OnPreviewStylusInRange\n  fullName: UIElement.OnPreviewStylusInRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusMove\n  nameWithType: UIElement.OnPreviewStylusMove\n  fullName: UIElement.OnPreviewStylusMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusOutOfRange\n  nameWithType: UIElement.OnPreviewStylusOutOfRange\n  fullName: UIElement.OnPreviewStylusOutOfRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusSystemGesture\n  nameWithType: UIElement.OnPreviewStylusSystemGesture\n  fullName: UIElement.OnPreviewStylusSystemGesture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewStylusUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusUp\n  nameWithType: UIElement.OnPreviewStylusUp\n  fullName: UIElement.OnPreviewStylusUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewTextInput*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTextInput\n  nameWithType: UIElement.OnPreviewTextInput\n  fullName: UIElement.OnPreviewTextInput\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewTouchDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchDown\n  nameWithType: UIElement.OnPreviewTouchDown\n  fullName: UIElement.OnPreviewTouchDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewTouchMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchMove\n  nameWithType: UIElement.OnPreviewTouchMove\n  fullName: UIElement.OnPreviewTouchMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnPreviewTouchUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchUp\n  nameWithType: UIElement.OnPreviewTouchUp\n  fullName: UIElement.OnPreviewTouchUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnQueryContinueDrag*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnQueryContinueDrag\n  nameWithType: UIElement.OnQueryContinueDrag\n  fullName: UIElement.OnQueryContinueDrag\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnQueryCursor*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnQueryCursor\n  nameWithType: UIElement.OnQueryCursor\n  fullName: UIElement.OnQueryCursor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnRender*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnRender\n  nameWithType: UIElement.OnRender\n  fullName: UIElement.OnRender\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnRenderSizeChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnRenderSizeChanged\n  nameWithType: UIElement.OnRenderSizeChanged\n  fullName: UIElement.OnRenderSizeChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusButtonDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusButtonDown\n  nameWithType: UIElement.OnStylusButtonDown\n  fullName: UIElement.OnStylusButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusButtonUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusButtonUp\n  nameWithType: UIElement.OnStylusButtonUp\n  fullName: UIElement.OnStylusButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusDown\n  nameWithType: UIElement.OnStylusDown\n  fullName: UIElement.OnStylusDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusEnter*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusEnter\n  nameWithType: UIElement.OnStylusEnter\n  fullName: UIElement.OnStylusEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusInAirMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusInAirMove\n  nameWithType: UIElement.OnStylusInAirMove\n  fullName: UIElement.OnStylusInAirMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusInRange*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusInRange\n  nameWithType: UIElement.OnStylusInRange\n  fullName: UIElement.OnStylusInRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusLeave*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusLeave\n  nameWithType: UIElement.OnStylusLeave\n  fullName: UIElement.OnStylusLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusMove\n  nameWithType: UIElement.OnStylusMove\n  fullName: UIElement.OnStylusMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusOutOfRange*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusOutOfRange\n  nameWithType: UIElement.OnStylusOutOfRange\n  fullName: UIElement.OnStylusOutOfRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusSystemGesture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusSystemGesture\n  nameWithType: UIElement.OnStylusSystemGesture\n  fullName: UIElement.OnStylusSystemGesture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnStylusUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusUp\n  nameWithType: UIElement.OnStylusUp\n  fullName: UIElement.OnStylusUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnTextInput*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTextInput\n  nameWithType: UIElement.OnTextInput\n  fullName: UIElement.OnTextInput\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnTouchDown*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchDown\n  nameWithType: UIElement.OnTouchDown\n  fullName: UIElement.OnTouchDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnTouchEnter*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchEnter\n  nameWithType: UIElement.OnTouchEnter\n  fullName: UIElement.OnTouchEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnTouchLeave*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchLeave\n  nameWithType: UIElement.OnTouchLeave\n  fullName: UIElement.OnTouchLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnTouchMove*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchMove\n  nameWithType: UIElement.OnTouchMove\n  fullName: UIElement.OnTouchMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnTouchUp*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchUp\n  nameWithType: UIElement.OnTouchUp\n  fullName: UIElement.OnTouchUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OnVisualParentChanged*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnVisualParentChanged\n  nameWithType: UIElement.OnVisualParentChanged\n  fullName: UIElement.OnVisualParentChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Opacity*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Opacity\n  nameWithType: UIElement.Opacity\n  fullName: UIElement.Opacity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.OpacityMask*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OpacityMask\n  nameWithType: UIElement.OpacityMask\n  fullName: UIElement.OpacityMask\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.PersistId*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PersistId\n  nameWithType: UIElement.PersistId\n  fullName: UIElement.PersistId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.PredictFocus*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PredictFocus\n  nameWithType: UIElement.PredictFocus\n  fullName: UIElement.PredictFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.RaiseEvent*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RaiseEvent\n  nameWithType: UIElement.RaiseEvent\n  fullName: UIElement.RaiseEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ReleaseAllTouchCaptures*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseAllTouchCaptures\n  nameWithType: UIElement.ReleaseAllTouchCaptures\n  fullName: UIElement.ReleaseAllTouchCaptures\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ReleaseMouseCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseMouseCapture\n  nameWithType: UIElement.ReleaseMouseCapture\n  fullName: UIElement.ReleaseMouseCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ReleaseStylusCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseStylusCapture\n  nameWithType: UIElement.ReleaseStylusCapture\n  fullName: UIElement.ReleaseStylusCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ReleaseTouchCapture*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseTouchCapture\n  nameWithType: UIElement.ReleaseTouchCapture\n  fullName: UIElement.ReleaseTouchCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.RemoveHandler*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: UIElement.RemoveHandler\n  fullName: UIElement.RemoveHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.RenderSize*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderSize\n  nameWithType: UIElement.RenderSize\n  fullName: UIElement.RenderSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.RenderTransform*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransform\n  nameWithType: UIElement.RenderTransform\n  fullName: UIElement.RenderTransform\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.RenderTransformOrigin*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransformOrigin\n  nameWithType: UIElement.RenderTransformOrigin\n  fullName: UIElement.RenderTransformOrigin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ShouldSerializeCommandBindings*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ShouldSerializeCommandBindings\n  nameWithType: UIElement.ShouldSerializeCommandBindings\n  fullName: UIElement.ShouldSerializeCommandBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.ShouldSerializeInputBindings*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ShouldSerializeInputBindings\n  nameWithType: UIElement.ShouldSerializeInputBindings\n  fullName: UIElement.ShouldSerializeInputBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.SnapsToDevicePixels*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: SnapsToDevicePixels\n  nameWithType: UIElement.SnapsToDevicePixels\n  fullName: UIElement.SnapsToDevicePixels\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.StylusPlugIns*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusPlugIns\n  nameWithType: UIElement.StylusPlugIns\n  fullName: UIElement.StylusPlugIns\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.TouchesCaptured*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesCaptured\n  nameWithType: UIElement.TouchesCaptured\n  fullName: UIElement.TouchesCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.TouchesCapturedWithin*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesCapturedWithin\n  nameWithType: UIElement.TouchesCapturedWithin\n  fullName: UIElement.TouchesCapturedWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.TouchesDirectlyOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesDirectlyOver\n  nameWithType: UIElement.TouchesDirectlyOver\n  fullName: UIElement.TouchesDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.TouchesOver*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesOver\n  nameWithType: UIElement.TouchesOver\n  fullName: UIElement.TouchesOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.TranslatePoint*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TranslatePoint\n  nameWithType: UIElement.TranslatePoint\n  fullName: UIElement.TranslatePoint\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Uid*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Uid\n  nameWithType: UIElement.Uid\n  fullName: UIElement.Uid\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.UpdateLayout*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: UpdateLayout\n  nameWithType: UIElement.UpdateLayout\n  fullName: UIElement.UpdateLayout\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.UIElement.Visibility*\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Visibility\n  nameWithType: UIElement.Visibility\n  fullName: UIElement.Visibility\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/UIElement.xml\n- uid: System.Windows.DependencyObject.Equals(System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: DependencyObject.Equals(Object)\n  fullName: DependencyObject.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Windows.DependencyObject.GetHashCode\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: DependencyObject.GetHashCode()\n  fullName: DependencyObject.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyProperty)\n  nameWithType: DependencyObject.ClearValue(DependencyProperty)\n  fullName: DependencyObject.ClearValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyPropertyKey)\n  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)\n  fullName: DependencyObject.ClearValue(DependencyPropertyKey)\n- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: CoerceValue(DependencyProperty)\n  nameWithType: DependencyObject.CoerceValue(DependencyProperty)\n  fullName: DependencyObject.CoerceValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.DependencyObjectType\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: DependencyObjectType\n  nameWithType: DependencyObject.DependencyObjectType\n  fullName: DependencyObject.DependencyObjectType\n- uid: System.Windows.DependencyObject.GetLocalValueEnumerator\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetLocalValueEnumerator()\n  nameWithType: DependencyObject.GetLocalValueEnumerator()\n  fullName: DependencyObject.GetLocalValueEnumerator()\n- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: InvalidateProperty(DependencyProperty)\n  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)\n  fullName: DependencyObject.InvalidateProperty(DependencyProperty)\n- uid: System.Windows.DependencyObject.IsSealed\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: IsSealed\n  nameWithType: DependencyObject.IsSealed\n  fullName: DependencyObject.IsSealed\n- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ReadLocalValue(DependencyProperty)\n  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)\n  fullName: DependencyObject.ReadLocalValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetCurrentValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyPropertyKey, Object)\n  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)\n  fullName: DependencyObject.SetValue(DependencyPropertyKey, Object)\n- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ShouldSerializeProperty(DependencyProperty)\n  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n  fullName: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n- uid: System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: AddVisualChild(Visual)\n  nameWithType: Visual.AddVisualChild(Visual)\n  fullName: Visual.AddVisualChild(Visual)\n- uid: System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: FindCommonVisualAncestor(DependencyObject)\n  nameWithType: Visual.FindCommonVisualAncestor(DependencyObject)\n  fullName: Visual.FindCommonVisualAncestor(DependencyObject)\n- uid: System.Windows.Media.Visual.GetVisualChild(System.Int32)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: GetVisualChild(Int32)\n  nameWithType: Visual.GetVisualChild(Int32)\n  fullName: Visual.GetVisualChild(Int32)\n- uid: System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: IsAncestorOf(DependencyObject)\n  nameWithType: Visual.IsAncestorOf(DependencyObject)\n  fullName: Visual.IsAncestorOf(DependencyObject)\n- uid: System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: IsDescendantOf(DependencyObject)\n  nameWithType: Visual.IsDescendantOf(DependencyObject)\n  fullName: Visual.IsDescendantOf(DependencyObject)\n- uid: System.Windows.Media.Visual.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: OnDpiChanged(DpiScale, DpiScale)\n  nameWithType: Visual.OnDpiChanged(DpiScale, DpiScale)\n  fullName: Visual.OnDpiChanged(DpiScale, DpiScale)\n- uid: System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: OnVisualChildrenChanged(DependencyObject, DependencyObject)\n  nameWithType: Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject)\n  fullName: Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject)\n- uid: System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: PointFromScreen(Point)\n  nameWithType: Visual.PointFromScreen(Point)\n  fullName: Visual.PointFromScreen(Point)\n- uid: System.Windows.Media.Visual.PointToScreen(System.Windows.Point)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: PointToScreen(Point)\n  nameWithType: Visual.PointToScreen(Point)\n  fullName: Visual.PointToScreen(Point)\n- uid: System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: RemoveVisualChild(Visual)\n  nameWithType: Visual.RemoveVisualChild(Visual)\n  fullName: Visual.RemoveVisualChild(Visual)\n- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToAncestor(Visual3D)\n  nameWithType: Visual.TransformToAncestor(Visual3D)\n  fullName: Visual.TransformToAncestor(Visual3D)\n- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToAncestor(Visual)\n  nameWithType: Visual.TransformToAncestor(Visual)\n  fullName: Visual.TransformToAncestor(Visual)\n- uid: System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToDescendant(Visual)\n  nameWithType: Visual.TransformToDescendant(Visual)\n  fullName: Visual.TransformToDescendant(Visual)\n- uid: System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToVisual(Visual)\n  nameWithType: Visual.TransformToVisual(Visual)\n  fullName: Visual.TransformToVisual(Visual)\n- uid: System.Windows.Media.Visual.VisualBitmapEffect\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualBitmapEffect\n  nameWithType: Visual.VisualBitmapEffect\n  fullName: Visual.VisualBitmapEffect\n- uid: System.Windows.Media.Visual.VisualBitmapEffectInput\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualBitmapEffectInput\n  nameWithType: Visual.VisualBitmapEffectInput\n  fullName: Visual.VisualBitmapEffectInput\n- uid: System.Windows.Media.Visual.VisualBitmapScalingMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualBitmapScalingMode\n  nameWithType: Visual.VisualBitmapScalingMode\n  fullName: Visual.VisualBitmapScalingMode\n- uid: System.Windows.Media.Visual.VisualCacheMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualCacheMode\n  nameWithType: Visual.VisualCacheMode\n  fullName: Visual.VisualCacheMode\n- uid: System.Windows.Media.Visual.VisualChildrenCount\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualChildrenCount\n  nameWithType: Visual.VisualChildrenCount\n  fullName: Visual.VisualChildrenCount\n- uid: System.Windows.Media.Visual.VisualClearTypeHint\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualClearTypeHint\n  nameWithType: Visual.VisualClearTypeHint\n  fullName: Visual.VisualClearTypeHint\n- uid: System.Windows.Media.Visual.VisualClip\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualClip\n  nameWithType: Visual.VisualClip\n  fullName: Visual.VisualClip\n- uid: System.Windows.Media.Visual.VisualEdgeMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualEdgeMode\n  nameWithType: Visual.VisualEdgeMode\n  fullName: Visual.VisualEdgeMode\n- uid: System.Windows.Media.Visual.VisualEffect\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualEffect\n  nameWithType: Visual.VisualEffect\n  fullName: Visual.VisualEffect\n- uid: System.Windows.Media.Visual.VisualOffset\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualOffset\n  nameWithType: Visual.VisualOffset\n  fullName: Visual.VisualOffset\n- uid: System.Windows.Media.Visual.VisualOpacity\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualOpacity\n  nameWithType: Visual.VisualOpacity\n  fullName: Visual.VisualOpacity\n- uid: System.Windows.Media.Visual.VisualOpacityMask\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualOpacityMask\n  nameWithType: Visual.VisualOpacityMask\n  fullName: Visual.VisualOpacityMask\n- uid: System.Windows.Media.Visual.VisualParent\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualParent\n  nameWithType: Visual.VisualParent\n  fullName: Visual.VisualParent\n- uid: System.Windows.Media.Visual.VisualScrollableAreaClip\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualScrollableAreaClip\n  nameWithType: Visual.VisualScrollableAreaClip\n  fullName: Visual.VisualScrollableAreaClip\n- uid: System.Windows.Media.Visual.VisualTextHintingMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualTextHintingMode\n  nameWithType: Visual.VisualTextHintingMode\n  fullName: Visual.VisualTextHintingMode\n- uid: System.Windows.Media.Visual.VisualTextRenderingMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualTextRenderingMode\n  nameWithType: Visual.VisualTextRenderingMode\n  fullName: Visual.VisualTextRenderingMode\n- uid: System.Windows.Media.Visual.VisualTransform\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualTransform\n  nameWithType: Visual.VisualTransform\n  fullName: Visual.VisualTransform\n- uid: System.Windows.Media.Visual.VisualXSnappingGuidelines\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualXSnappingGuidelines\n  nameWithType: Visual.VisualXSnappingGuidelines\n  fullName: Visual.VisualXSnappingGuidelines\n- uid: System.Windows.Media.Visual.VisualYSnappingGuidelines\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualYSnappingGuidelines\n  nameWithType: Visual.VisualYSnappingGuidelines\n  fullName: Visual.VisualYSnappingGuidelines\n- uid: System.Windows.Media.Animation.IAnimatable\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: IAnimatable\n  nameWithType: IAnimatable\n  fullName: System.Windows.Media.Animation.IAnimatable\n"}