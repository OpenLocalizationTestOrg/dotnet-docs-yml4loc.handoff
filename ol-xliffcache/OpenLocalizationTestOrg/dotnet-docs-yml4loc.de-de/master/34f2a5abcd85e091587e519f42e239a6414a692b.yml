### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HashAlgorithm
  commentId: T:System.Security.Cryptography.HashAlgorithm
  id: HashAlgorithm
  children:
  - System.Security.Cryptography.HashAlgorithm.#ctor
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.Create
  - System.Security.Cryptography.HashAlgorithm.Create(System.String)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.Initialize
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
  type: Class
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Represents the base class from which all implementations of cryptographic hash algorithms must derive.
  remarks: "Hash functions are fundamental to modern cryptography. These functions map binary strings of an arbitrary length to small binary strings of a fixed length, known as hash values. A cryptographic hash function has the property that it is computationally infeasible to find two distinct inputs that hash to the same value. Hash functions are commonly used with digital signatures and for data integrity.  \n  \n The hash is used as a unique value of fixed size representing a large amount of data. Hashes of two sets of data should match if the corresponding data also matches. Small changes to the data result in large unpredictable changes in the hash."
  example:
  - "The following code example computes the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> hash for an array. This example assumes that there is a predefined byte array `dataArray[]`. <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> is a derived class of <xref:System.Security.Cryptography.HashAlgorithm>.  \n  \n [!code-cpp[Classic HashAlgorithm Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/CPP/source.cpp#1)]\n [!code-csharp[Classic HashAlgorithm Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/CS/source.cs#1)]\n [!code-vb[Classic HashAlgorithm Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic HashAlgorithm Example/VB/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HashAlgorithm : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  derivedClasses:
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.MD5
  - System.Security.Cryptography.RIPEMD160
  - System.Security.Cryptography.SHA1
  - System.Security.Cryptography.SHA256
  - System.Security.Cryptography.SHA384
  - System.Security.Cryptography.SHA512
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  commentId: M:System.Security.Cryptography.HashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashAlgorithm()
  nameWithType: HashAlgorithm.HashAlgorithm()
  fullName: HashAlgorithm.HashAlgorithm()
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.HashAlgorithm"></xref> class.
  remarks: You cannot create an instance of an abstract class. Application code creates a new instance of a derived class.
  syntax:
    content: protected HashAlgorithm ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  commentId: P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: HashAlgorithm.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a value indicating whether the current transform can be reused.
  syntax:
    content: public virtual bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: Always `true`.
  overload: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  commentId: P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: HashAlgorithm.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, gets a value indicating whether multiple blocks can be transformed.
  syntax:
    content: public virtual bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: '`true` if multiple blocks can be transformed; otherwise, `false`.'
  overload: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  commentId: M:System.Security.Cryptography.HashAlgorithm.Clear
  id: Clear
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: HashAlgorithm.Clear()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Releases all resources used by the <xref href="System.Security.Cryptography.HashAlgorithm"></xref> class.
  remarks: "This method is a simple call to the <xref:System.IDisposable.Dispose%2A?displayProperty=fullName> method.  \n  \n Calling `Dispose` allows the resources used by the <xref:System.Security.Cryptography.HashAlgorithm> class to be reallocated for other purposes. For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Clear*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  id: ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: HashAlgorithm.ComputeHash(Byte[])
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified byte array.
  remarks: ''
  example:
  - "The following example computes the <xref:System.Security.Cryptography.MD5> hash value of a string and returns the hash as a 32-character, hexadecimal-formatted string.  The hash string created by this code example is compatible with any MD5 hash function (on any platform) that creates a 32-character, hexadecimal-formatted hash string.  \n  \n [!code-csharp[Security.Cryptography.MD5#1](~/samples/snippets/csharp/VS_Snippets_CLR/Security.Cryptography.MD5/cs/example.cs#1)]\n [!code-vb[Security.Cryptography.MD5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Security.Cryptography.MD5/vb/example.vb#1)]"
  syntax:
    content: public byte[] ComputeHash (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    return:
      type: System.Byte[]
      description: The computed hash code.
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  id: ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: HashAlgorithm.ComputeHash(Stream)
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified <xref href="System.IO.Stream"></xref> object.
  remarks: ''
  example:
  - "The following example calculates the <xref:System.Security.Cryptography.RIPEMD160> hash for all files in a directory.  \n  \n [!code-cpp[RIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/RIPEMD160/CPP/ripemd160.cpp#1)]\n [!code-csharp[RIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/RIPEMD160/CS/ripemd160.cs#1)]\n [!code-vb[RIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RIPEMD160/vb/ripemd160.vb#1)]"
  syntax:
    content: public byte[] ComputeHash (System.IO.Stream inputStream);
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: The input to compute the hash code for.
    return:
      type: System.Byte[]
      description: The computed hash code.
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  id: ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: ComputeHash(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified region of the specified byte array.
  syntax:
    content: public byte[] ComputeHash (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: offset
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: count
      type: System.Int32
      description: The number of bytes in the array to use as data.
    return:
      type: System.Byte[]
      description: The computed hash code.
  overload: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>count</code> is an invalid value.  \n  \n -or-  \n  \n <code>buffer</code> length is invalid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>buffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>offset</code> is out of range. This parameter requires a non-negative number.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.Create
  commentId: M:System.Security.Cryptography.HashAlgorithm.Create
  id: Create
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Create()
  nameWithType: HashAlgorithm.Create()
  fullName: HashAlgorithm.Create()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Creates an instance of the default implementation of a hash algorithm.
  remarks: By default, this overload uses the <xref:System.Security.Cryptography.SHA1CryptoServiceProvider> implementation of a hash algorithm. If you want to specify a different implementation, use the <xref:System.Security.Cryptography.HashAlgorithm.Create%28System.String%29> overload, which lets you specify an algorithm name, instead. The cryptography configuration system defines the default implementation of <xref:System.Security.Cryptography.HashAlgorithm>.
  syntax:
    content: public static System.Security.Cryptography.HashAlgorithm Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: A new <xref href="System.Security.Cryptography.SHA1CryptoServiceProvider"></xref> instance, unless the default settings have been changed using the .
  overload: System.Security.Cryptography.HashAlgorithm.Create*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  commentId: M:System.Security.Cryptography.HashAlgorithm.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Create(String)
  nameWithType: HashAlgorithm.Create(String)
  fullName: HashAlgorithm.Create(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Creates an instance of the specified implementation of a hash algorithm.
  syntax:
    content: public static System.Security.Cryptography.HashAlgorithm Create (string hashName);
    parameters:
    - id: hashName
      type: System.String
      description: "The hash algorithm implementation to use. The following table shows the valid values for the <code>hashName</code> parameter and the algorithms they map to.  \n  \n <table><thead><tr><th> Parameter value  \n  \n </th><th> Implements  \n  \n </th></tr></thead><tbody><tr><td> SHA  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> SHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA1  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> System.Security.Cryptography.HashAlgorithm  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA1CryptoServiceProvider\"></xref></td></tr><tr><td> MD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.MD5CryptoServiceProvider\"></xref></td></tr><tr><td> System.Security.Cryptography.MD5  \n  \n </td><td><xref href=\"System.Security.Cryptography.MD5CryptoServiceProvider\"></xref></td></tr><tr><td> SHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA256Managed\"></xref></td></tr><tr><td> SHA-256  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA256Managed\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA256  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA256Managed\"></xref></td></tr><tr><td> SHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA384Managed\"></xref></td></tr><tr><td> SHA-384  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA384Managed\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA384  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA384Managed\"></xref></td></tr><tr><td> SHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA512Managed\"></xref></td></tr><tr><td> SHA-512  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA512Managed\"></xref></td></tr><tr><td> System.Security.Cryptography.SHA512  \n  \n </td><td><xref href=\"System.Security.Cryptography.SHA512Managed\"></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.HashAlgorithm
      description: A new instance of the specified hash algorithm, or `null` if <code>hashName</code> is not a valid hash algorithm.
  overload: System.Security.Cryptography.HashAlgorithm.Create*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: HashAlgorithm.Dispose()
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Releases all resources used by the current instance of the <xref href="System.Security.Cryptography.HashAlgorithm"></xref> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Security.Cryptography.HashAlgorithm>. The `Dispose` method leaves the <xref:System.Security.Cryptography.HashAlgorithm> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Security.Cryptography.HashAlgorithm> so the garbage collector can reclaim the memory that the <xref:System.Security.Cryptography.HashAlgorithm> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Security.Cryptography.HashAlgorithm>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.Cryptography.HashAlgorithm> object's `Finalize` method."
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HashAlgorithm.Dispose(Boolean)
  fullName: HashAlgorithm.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the <xref href="System.Security.Cryptography.HashAlgorithm"></xref> and optionally releases the managed resources.
  remarks: "This method is called by the public `Dispose()` method and the `Finalize` method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. `Finalize` invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Security.Cryptography.HashAlgorithm> references. This method invokes the `Dispose()` method of each referenced object."
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'
  overload: System.Security.Cryptography.HashAlgorithm.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  commentId: P:System.Security.Cryptography.HashAlgorithm.Hash
  id: Hash
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: HashAlgorithm.Hash
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets the value of the computed hash code.
  remarks: The <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property is a byte array; the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property is a value that represent bits. Therefore, the number of elements in <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> is one-eighth the size of <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A>.
  syntax:
    content: public virtual byte[] Hash { get; }
    return:
      type: System.Byte[]
      description: The current value of the computed hash code.
  overload: System.Security.Cryptography.HashAlgorithm.Hash*
  exceptions:
  - type: System.Security.Cryptography.CryptographicUnexpectedOperationException
    commentId: T:System.Security.Cryptography.CryptographicUnexpectedOperationException
    description: <xref href="System.Security.Cryptography.HashAlgorithm.HashValue"></xref> is `null`.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashCore(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.HashCore(Byte[], Int32, Int32)
  fullName: HashAlgorithm.HashCore(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
  remarks: "This method is not called by application code.  \n  \n This abstract method performs the hash computation. Every write to the cryptographic stream object passes the data through this method. For each block of data, this method updates the state of the hash object so a correct hash value is returned at the end of the data stream."
  syntax:
    content: protected abstract void HashCore (byte[] array, int ibStart, int cbSize);
    parameters:
    - id: array
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: ibStart
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: cbSize
      type: System.Int32
      description: The number of bytes in the byte array to use as data.
  overload: System.Security.Cryptography.HashAlgorithm.HashCore*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  commentId: M:System.Security.Cryptography.HashAlgorithm.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HashAlgorithm.HashFinal()
  fullName: HashAlgorithm.HashFinal()
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
  remarks: This method finalizes any partial computation and returns the correct hash value for the data stream.
  syntax:
    content: protected abstract byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: The computed hash code.
  overload: System.Security.Cryptography.HashAlgorithm.HashFinal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
  fullName: HashAlgorithm.HashSize
  type: Property
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Gets the size, in bits, of the computed hash code.
  syntax:
    content: public virtual int HashSize { get; }
    return:
      type: System.Int32
      description: The size, in bits, of the computed hash code.
  overload: System.Security.Cryptography.HashAlgorithm.HashSize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  commentId: F:System.Security.Cryptography.HashAlgorithm.HashSizeValue
  id: HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: HashAlgorithm.HashSizeValue
  type: Field
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the size, in bits, of the computed hash code.
  remarks: "The hash algorithm specifies the size of the hash code. For example, <xref:System.Security.Cryptography.SHA1> uses a hash size of 160 bits.  \n  \n This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.HashSize%2A> property."
  syntax:
    content: protected int HashSizeValue;
    return:
      type: System.Int32
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  commentId: F:System.Security.Cryptography.HashAlgorithm.HashValue
  id: HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: HashAlgorithm.HashValue
  type: Field
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the value of the computed hash code.
  remarks: This field is accessed through the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.
  syntax:
    content: protected byte[] HashValue;
    return:
      type: System.Byte[]
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  commentId: M:System.Security.Cryptography.HashAlgorithm.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: Initialize()
  nameWithType: HashAlgorithm.Initialize()
  fullName: HashAlgorithm.Initialize()
  type: Method
  assemblies:
  - System.Security.Cryptography.Primitives
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes an implementation of the <xref href="System.Security.Cryptography.HashAlgorithm"></xref> class.
  syntax:
    content: public abstract void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HashAlgorithm.Initialize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: HashAlgorithm.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, gets the input block size.
  remarks: Unless overridden, this property returns the value 1.
  syntax:
    content: public virtual int InputBlockSize { get; }
    return:
      type: System.Int32
      description: The input block size.
  overload: System.Security.Cryptography.HashAlgorithm.InputBlockSize*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: HashAlgorithm.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, gets the output block size.
  remarks: Unless overridden, this property returns the value 1.
  syntax:
    content: public virtual int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: The output block size.
  overload: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.State
  commentId: F:System.Security.Cryptography.HashAlgorithm.State
  id: State
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: State
  nameWithType: HashAlgorithm.State
  fullName: HashAlgorithm.State
  type: Field
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the state of the hash computation.
  remarks: This field is used to prevent users from changing the key of a keyed hash algorithm during a hash operation. When a key change is legitimate, the value of this field is zero both before and after a hash operation. When a key change is not legitimate, the value of this field is nonzero.
  syntax:
    content: protected int State;
    return:
      type: System.Int32
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified region of the input byte array and copies the specified region of the input byte array to the specified region of the output byte array.
  remarks: "You must call the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method before calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method. You must call both methods before you retrieve the final hash value.  \n  \n To retrieve the final hash value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained within the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property.  \n  \n Calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method with different input and output arrays results in an <xref:System.IO.IOException>."
  example:
  - "The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.  \n  \n [!code-csharp[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/CS/sample.cs#1)]\n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/vb/sample.vb#1)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: inputOffset
      type: System.Int32
      description: The offset into the input byte array from which to begin using data.
    - id: inputCount
      type: System.Int32
      description: The number of bytes in the input byte array to use as data.
    - id: outputBuffer
      type: System.Byte[]
      description: A copy of the part of the input array used to compute the hash code.
    - id: outputOffset
      type: System.Int32
      description: The offset into the output byte array from which to begin writing data.
    return:
      type: System.Int32
      description: The number of bytes written.
  overload: System.Security.Cryptography.HashAlgorithm.TransformBlock*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputCount</code> uses an invalid value.  \n  \n -or-  \n  \n <code>inputBuffer</code> has an invalid length."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inputBuffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>inputOffset</code> is out of range. This parameter requires a non-negative number.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  name: TransformFinalBlock(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified region of the specified byte array.
  remarks: "You must call the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method but before you retrieve the final hash value.  \n  \n Note that the return value of this method is not the hash value, but only a copy of the hashed part of the input data.  To retrieve the final hashed value after calling the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method, get the byte array contained in the <xref:System.Security.Cryptography.HashAlgorithm.Hash%2A> property."
  example:
  - "The following code examples use the <xref:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock%2A> method with the <xref:System.Security.Cryptography.HashAlgorithm.TransformBlock%2A> method to hash a string.  \n  \n [!code-csharp[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/csharp/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/CS/sample.cs#1)]\n [!code-vb[Cryptography.HashAlgorithm.TransformFinalBlock#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Cryptography.HashAlgorithm.TransformFinalBlock/vb/sample.vb#1)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: The input to compute the hash code for.
    - id: inputOffset
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: inputCount
      type: System.Int32
      description: The number of bytes in the byte array to use as data.
    return:
      type: System.Byte[]
      description: An array that is a copy of the part of the input that is hashed.
  overload: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>inputCount</code> uses an invalid value.  \n  \n -or-  \n  \n <code>inputBuffer</code> has an invalid offset length."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>inputBuffer</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>inputOffset</code> is out of range. This parameter requires a non-negative number.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicUnexpectedOperationException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicUnexpectedOperationException
  nameWithType: CryptographicUnexpectedOperationException
  fullName: System.Security.Cryptography.CryptographicUnexpectedOperationException
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashAlgorithm()
  nameWithType: HashAlgorithm.HashAlgorithm()
  fullName: HashAlgorithm.HashAlgorithm()
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: HashAlgorithm.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: HashAlgorithm.Clear()
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: HashAlgorithm.ComputeHash(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: HashAlgorithm.ComputeHash(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HashAlgorithm.Create
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create()
  nameWithType: HashAlgorithm.Create()
  fullName: HashAlgorithm.Create()
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create(String)
  nameWithType: HashAlgorithm.Create(String)
  fullName: HashAlgorithm.Create(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: HashAlgorithm.Dispose()
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HashAlgorithm.Dispose(Boolean)
  fullName: HashAlgorithm.Dispose(Boolean)
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashCore(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.HashCore(Byte[], Int32, Int32)
  fullName: HashAlgorithm.HashCore(Byte[], Int32, Int32)
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashFinal()
  nameWithType: HashAlgorithm.HashFinal()
  fullName: HashAlgorithm.HashFinal()
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
  fullName: HashAlgorithm.HashSize
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: HashAlgorithm.HashSizeValue
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: HashAlgorithm.HashValue
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Initialize()
  nameWithType: HashAlgorithm.Initialize()
  fullName: HashAlgorithm.Initialize()
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.State
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: State
  nameWithType: HashAlgorithm.State
  fullName: HashAlgorithm.State
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
- uid: System.Security.Cryptography.HashAlgorithm.#ctor*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashAlgorithm
  nameWithType: HashAlgorithm.HashAlgorithm
  fullName: HashAlgorithm.HashAlgorithm
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: HashAlgorithm.CanReuseTransform
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: HashAlgorithm.CanTransformMultipleBlocks
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.Clear*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear
  nameWithType: HashAlgorithm.Clear
  fullName: HashAlgorithm.Clear
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash
  nameWithType: HashAlgorithm.ComputeHash
  fullName: HashAlgorithm.ComputeHash
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.Create*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Create
  nameWithType: HashAlgorithm.Create
  fullName: HashAlgorithm.Create
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.Dispose*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose
  nameWithType: HashAlgorithm.Dispose
  fullName: HashAlgorithm.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.Hash*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: HashAlgorithm.Hash
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.HashCore*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashCore
  nameWithType: HashAlgorithm.HashCore
  fullName: HashAlgorithm.HashCore
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashFinal
  nameWithType: HashAlgorithm.HashFinal
  fullName: HashAlgorithm.HashFinal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.HashSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSize
  nameWithType: HashAlgorithm.HashSize
  fullName: HashAlgorithm.HashSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.Initialize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Initialize
  nameWithType: HashAlgorithm.Initialize
  fullName: HashAlgorithm.Initialize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: HashAlgorithm.InputBlockSize
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: HashAlgorithm.OutputBlockSize
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock
  nameWithType: HashAlgorithm.TransformBlock
  fullName: HashAlgorithm.TransformBlock
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock*
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock
  nameWithType: HashAlgorithm.TransformFinalBlock
  fullName: HashAlgorithm.TransformFinalBlock
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HashAlgorithm.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  nameWithType: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
