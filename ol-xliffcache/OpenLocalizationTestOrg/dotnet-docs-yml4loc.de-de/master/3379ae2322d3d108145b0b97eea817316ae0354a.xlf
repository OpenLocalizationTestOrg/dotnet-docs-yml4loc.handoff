<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3379ae2322d3d108145b0b97eea817316ae0354a</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Diagnostics.ProcessStartInfo.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0c191242edbef0db3cb7d57bc5b79938e19afa56</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">66e0674d1786300fed237facf18ec39102a53eac</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies a set of values that are used when you start a process.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> is used together with the <ph id="ph2">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you start a process using the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> class, you have access to process information in addition to that available when attaching to a running process.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> class for better control over the process you start.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must at least set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property, either manually or using the constructor.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name is any application or document.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Here a document is defined to be any file type that has an open or default action associated with it.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can view registered file types and their associated applications for your computer by using the <bpt id="p1">**</bpt>Folder Options<ept id="p1">**</ept> dialog box, which is available through the operating system.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you can set other properties that define actions to take with that file.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can specify a value specific to the type of the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property for the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can specify "print" for a document type.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Additionally, you can specify <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> property values to be command-line arguments to pass to the file's open procedure.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, if you specify a text editor application in the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property, you can use the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> property to specify a text file to be opened by the editor.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Standard input is usually the keyboard, and standard output and standard error are usually the monitor screen.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, you can use the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A&gt;</ph> properties to cause the process to get input from or return output to a file or other device.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> properties on the <ph id="ph4">&lt;xref:System.Diagnostics.Process&gt;</ph> component, you must first set the corresponding value on the <ph id="ph5">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, the system throws an exception when you read or write to the stream.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>Set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> to specify whether to start the process by using the operating system shell.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the value of any <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> property up to the time that the process starts.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you start the process, changing these values has no effect.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class contains a link demand at the class level that applies to all members.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the immediate caller does not have full-trust permission.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo"&gt;&lt;/xref&gt;</ph> class without specifying a file name with which to start the process.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set at least the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property before you start the process.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name is any application or document.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, a document is defined to be any file type that has an open or default action associated with it.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can view registered file types and their associated applications for your computer by using the <bpt id="p1">**</bpt>Folder Options<ept id="p1">**</ept> dialog box, which is available through the operating system.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Optionally, you can also set other properties before you start the process.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> property supplies actions to take, such as "print", with the file indicated in the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> property supplies a way to pass command-line arguments to the file when the system opens it.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo"&gt;&lt;/xref&gt;</ph> class and specifies a file name such as an application or document with which to start the process.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name is any application or document.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, a document is defined to be any file type that has an open or default action associated with it.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can view registered file types and their associated applications for your computer by using the <bpt id="p1">**</bpt>Folder Options<ept id="p1">**</ept> dialog box, which is available through the operating system.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property after you call this constructor, up to the time that the process starts.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you start the process, changing these values has no effect.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>An application or document with which to start a process.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo"&gt;&lt;/xref&gt;</ph> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name is any application or document.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, a document is defined to be any file type that has an open or default action associated with it.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can view registered file types and their associated applications for your computer by using the <bpt id="p1">**</bpt>Folder Options<ept id="p1">**</ept> dialog box, which is available through the operating system.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can change the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.Arguments%2A&gt;</ph> properties after you call this constructor, up to the time that the process starts.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>After you start the process, changing these values has no effect.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>An application with which to start a process.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Command-line arguments to pass to the application when the process starts.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Gets or sets the set of command-line arguments to use when starting the application.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>A single string containing the arguments to pass to the target application specified in the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.FileName"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>On Windows 7 and later versions, the length must be less than 32699.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Arguments are parsed and interpreted by the target application, so must align with the expectations of that application.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>In include quotation marks in the final parsed argument, triple-escape each mark.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to start the process in a new window.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> property is <ph id="ph2">`true`</ph> or the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph> and <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph> properties are not <ph id="ph5">`null`</ph>, the <ph id="ph6">&lt;xref:System.Diagnostics.ProcessStartInfo.CreateNoWindow%2A&gt;</ph> property value is ignored and a new window is created.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the process should be started without creating a new window to contain it; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that identifies the domain to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The Active Directory domain to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The domain property is primarily of interest to users within enterprise environments that use Active Directory.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Gets the environment variables that apply to this process and its child processes.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>The environment variables contain search paths for files, directories for temporary files, application-specific options, and other similar information.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you cannot directly set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Environment%2A&gt;</ph> property, you can modify the generic dictionary returned by the property.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code adds a TempPath environment variable: <ph id="ph1">`myProcess.StartInfo.Environment.Add("TempPath", "C:\\Temp")`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> property to <ph id="ph2">`false`</ph> to start the process after changing the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Environment%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when the <ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT">
          <source>On .NET Framework applications, using the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Environment%2A&gt;</ph> property is the same as using the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.EnvironmentVariables%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>A generic dictionary containing the environment variables that apply to this process and its child processes.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Gets search paths for files, directories for temporary files, application-specific options, and other similar information.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT">
          <source>Although you cannot set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.EnvironmentVariables%2A&gt;</ph> property, you can modify the <ph id="ph2">&lt;xref:System.Collections.Specialized.StringDictionary&gt;</ph> returned by the property.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following code adds a TempPath environment variable: <ph id="ph1">`myProcess.StartInfo.EnvironmentVariables.Add("TempPath", "C:\\Temp")`</ph>.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> property to <ph id="ph2">`false`</ph> to start the process after changing the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.EnvironmentVariables%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph>, an <ph id="ph3">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown when the <ph id="ph4">&lt;xref:System.Diagnostics.Process.Start%2A&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>A string dictionary that provides environment variables that apply to this process and child processes.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether an error dialog box is displayed to the user if the process cannot be started.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> must be <ph id="ph2">`true`</ph> if you want to set <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if an error dialog box should be displayed on the screen if the process cannot be started; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>Gets or sets the window handle to use when an error dialog box is shown for a process that cannot be started.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle%2A&gt;</ph> property specifies the parent window for the dialog box that is shown.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>It is useful to specify a parent to keep the dialog box in front of the application.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>A pointer to the handle of the error dialog box that results from a process start failure.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>Gets or sets the application or document to start.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set at least the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property before you start the process.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name is any application or document.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT">
          <source>A document is defined to be any file type that has an open or default action associated with it.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can view registered file types and their associated applications for your computer by using the <bpt id="p1">**</bpt>Folder Options<ept id="p1">**</ept> dialog box, which is available through the operating system.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>Advanced<ept id="p1">**</ept> button leads to a dialog box that shows whether there is an open action associated with a specific registered file type.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>The set of file types available to you depends in part on the value of the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph>, you can start any document and perform operations on the file, such as printing, with the <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`false`</ph>, you can start only executables with the <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> component.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can start a ClickOnce application by setting the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property to the location (for example, a Web address) from which you originally installed the application.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not start a ClickOnce application by specifying its installed location on your hard disk.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is referenced if the process is being started by using the user name, password, and domain.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value is <ph id="ph1">`true`</ph>, the user's profile in the <ph id="ph2">`HKEY_USERS`</ph> registry key is loaded.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT">
          <source>Loading the profile can be time-consuming.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT">
          <source>Therefore, it is best to use this value only if you must access the information in the <ph id="ph1">`HKEY_CURRENT_USER`</ph> registry key.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Windows Server 2003 and Windows 2000, the profile is unloaded after the new process has been terminated, regardless of whether the process has created child processes.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT">
          <source>In Windows XP, the profile is unloaded after the new process and all child processes it has created have been terminated.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the Windows user profile should be loaded; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Gets or sets a secure string that contains the user password to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property must be set if <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph> are provided.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the property is not set, the default working directory is %SYSTEMROOT%\system32.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Domain%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph>, and the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph> properties in a <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo&gt;</ph> object is the recommended practice for starting a process with user credentials.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is like a <ph id="ph2">&lt;xref:System.String&gt;</ph> object in that it has a text value.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>However, the value of a <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> object is automatically encrypted, it can be modified until your application marks it as read-only, and it can be deleted from computer memory by either your application or the .NET Framework garbage collector.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about secure strings and an example of how to obtain a password to set this property, see the <ph id="ph1">&lt;xref:System.Security.SecureString&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you provide a value for the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph> property, the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> property must be <ph id="ph3">`false`</ph>, or an <ph id="ph4">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown when the <ph id="ph5">&lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The user password to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Gets or sets the user password in clear text to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>The user password in clear text.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the error output of an application is written to the <ph id="ph1">&lt;xref href="System.Diagnostics.Process.StandardError"&gt;&lt;/xref&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes text to its standard error stream, that text is typically displayed on the console.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, you can manipulate or suppress the error output of a process.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> to <ph id="ph2">`false`</ph> if you want to set <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardError%2A&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream throws an exception.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>The redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream can be read synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the error output stream of the process.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream, or closes the stream.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginErrorReadLine%2A&gt;</ph> starts asynchronous read operations on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables a designated event handler for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application that is processing the asynchronous output should call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> method to ensure that the output buffer has been flushed.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronous read operations introduce a dependency between the caller reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream and the child process writing to that stream.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>These dependencies can cause deadlock conditions.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the caller reads from the redirected stream of a child process, it is dependent on the child.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller waits for the read operation until the child writes to the stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process waits for the next write operation until the parent reads from the full stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can avoid deadlocks by evaluating dependencies between the caller and child process.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code example avoids a deadlock condition by calling <ph id="ph1">`p.StandardError.ReadToEnd`</ph> before <ph id="ph2">`p.WaitForExit`</ph>.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition can result if the parent process calls <ph id="ph1">`p.WaitForExit`</ph> before <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a similar issue when you read all text from both the standard output and standard error streams.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# code performs a read operation on both streams.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code example avoids the deadlock condition by performing asynchronous read operations on the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition results if the parent process calls <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to close its <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if error output should be written to <ph id="ph2">&lt;xref href="System.Diagnostics.Process.StandardError"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether the input for an application is read from the <ph id="ph1">&lt;xref href="System.Diagnostics.Process.StandardInput"&gt;&lt;/xref&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT">
          <source>A <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> can read input text from its standard input stream, typically the keyboard.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT">
          <source>By redirecting the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> stream, you can programmatically specify the input of a process.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, instead of using keyboard input, you can provide text from the contents of a designated file or output from another application.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> to <ph id="ph2">`false`</ph> if you want to set <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardInput%2A&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, writing to the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardInput%2A&gt;</ph> stream throws an exception.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if input should be read from <ph id="ph2">&lt;xref href="System.Diagnostics.Process.StandardInput"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether the textual output of an application is written to the <ph id="ph1">&lt;xref href="System.Diagnostics.Process.StandardOutput"&gt;&lt;/xref&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>When a <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes text to its standard stream, that text is typically displayed on the console.</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>By setting <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A&gt;</ph> to <ph id="ph2">`true`</ph> to redirect the <ph id="ph3">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, you can manipulate or suppress the output of a process.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can filter the text, format it differently, or write the output to both the console and a designated log file.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>You must set <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> to <ph id="ph2">`false`</ph> if you want to set <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput%2A&gt;</ph> to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT">
          <source>Otherwise, reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream throws an exception.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT">
          <source>The redirected <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream can be read synchronously or asynchronously.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT">
          <source>Methods such as <ph id="ph1">&lt;xref:System.IO.StreamReader.Read%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.IO.StreamReader.ReadLine%2A&gt;</ph>, and <ph id="ph3">&lt;xref:System.IO.StreamReader.ReadToEnd%2A&gt;</ph> perform synchronous read operations on the output stream of the process.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT">
          <source>These synchronous read operations do not complete until the associated <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> writes to its <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream, or closes the stream.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>In contrast, <ph id="ph1">&lt;xref:System.Diagnostics.Process.BeginOutputReadLine%2A&gt;</ph> starts asynchronous read operations on the <ph id="ph2">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables a designated event handler (see <ph id="ph1">&lt;xref:System.Diagnostics.Process.OutputDataReceived&gt;</ph>) for the stream output and immediately returns to the caller, which can perform other work while the stream output is directed to the event handler.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application that is processing the asynchronous output should call the <ph id="ph1">&lt;xref:System.Diagnostics.Process.WaitForExit%2A&gt;</ph> method to ensure that the output buffer has been flushed.</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>Synchronous read operations introduce a dependency between the caller reading from the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream and the child process writing to that stream.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>These dependencies can cause deadlock conditions.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the caller reads from the redirected stream of a child process, it is dependent on the child.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT">
          <source>The caller waits for the read operation until the child writes to the stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the child process writes enough data to fill its redirected stream, it is dependent on the parent.</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process waits for the next write operation until the parent reads from the full stream or closes the stream.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT">
          <source>The deadlock condition results when the caller and child process wait for each other to complete an operation, and neither can continue.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can avoid deadlocks by evaluating dependencies between the caller and child process.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# code shows how to read from a redirected stream and wait for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code example avoids a deadlock condition by calling <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> before <ph id="ph2">`p.WaitForExit`</ph>.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition can result if the parent process calls <ph id="ph1">`p.WaitForExit`</ph> before <ph id="ph2">`p.StandardOutput.ReadToEnd`</ph> and the child process writes enough text to fill the redirected stream.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to exit.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is a similar issue when you read all text from both the standard output and standard error streams.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the following C# code performs a read operation on both streams.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>The code example avoids the deadlock condition by performing asynchronous read operations on the <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>A deadlock condition results if the parent process calls <ph id="ph1">`p.StandardOutput.ReadToEnd`</ph> followed by <ph id="ph2">`p.StandardError.ReadToEnd`</ph> and the child process writes enough text to fill its error stream.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The parent process would wait indefinitely for the child process to close its <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardOutput%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>The child process would wait indefinitely for the parent to read from the full <ph id="ph1">&lt;xref:System.Diagnostics.Process.StandardError%2A&gt;</ph> stream.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use asynchronous read operations to avoid these dependencies and their deadlock potential.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternately, you can avoid the deadlock condition by creating two threads and reading the output of each stream on a separate thread.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if output should be written to <ph id="ph2">&lt;xref href="System.Diagnostics.Process.StandardOutput"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>Gets or sets the preferred encoding for error output.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the process uses the default standard error encoding for error output.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding%2A&gt;</ph> property must be set before the process is started.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property does not guarantee that the process will use the specified encoding; the process will use only those encodings that it supports.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application should be tested to determine which encodings are supported.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>An object that represents the preferred encoding for error output.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>Gets or sets the preferred encoding for standard output.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the value of the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding%2A&gt;</ph> property is <ph id="ph2">`null`</ph>, the process uses the default standard output encoding for the standard output.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding%2A&gt;</ph> property must be set before the process is started.</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property does not guarantee that the process will use the specified encoding.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>The application should be tested to determine which encodings the process supports.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>An object that represents the preferred encoding for standard output.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Gets or sets the user name to be used when starting the process.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property must be set if <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph> are provided.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the property is not set, the default working directory is %SYSTEMROOT%\system32.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph> property is not <ph id="ph2">`null`</ph> or an empty string, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> property must be <ph id="ph4">`false`</ph>, or an <ph id="ph5">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown when the <ph id="ph6">&lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The user name to use when starting the process.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>Gets or sets a value indicating whether to use the operating system shell to start the process.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT">
          <source>Setting this property to <ph id="ph1">`false`</ph> enables you to redirect input, output, and error streams.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> must be <ph id="ph2">`false`</ph> if the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph> property is not <ph id="ph4">`null`</ph> or an empty string, or an <ph id="ph5">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown when the <ph id="ph6">&lt;xref:System.Diagnostics.Process.Start%28System.Diagnostics.ProcessStartInfo%29?displayProperty=fullName&gt;</ph> method is called.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the operating system shell to start processes, you can start any document (which is any registered file type associated with an executable that has a default open action) and perform operations on the file, such as printing, by using the <ph id="ph1">&lt;xref:System.Diagnostics.Process&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`false`</ph>, you can start only executables by using the <ph id="ph3">&lt;xref:System.Diagnostics.Process&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> must be <ph id="ph2">`true`</ph> if you set the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.ErrorDialog%2A&gt;</ph> property to <ph id="ph4">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property behaves differently depending on the value of the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property specifies the location of the executable.</source>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> is an empty string, it is assumed that the current directory contains the executable.</source>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property is not used to find the executable.</source>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, it is used only by the process that is started and has meaning only within the context of the new process.</source>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property can be either a fully qualified path to the executable, or a simple executable name that the system will attempt to find within folders specified by the PATH environment variable.</source>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the shell should be used when starting the process; <ph id="ph2">`false`</ph> if the process should be created directly from the executable file.</source>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>Gets or sets the verb to use when opening the application or document specified by the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.FileName"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each file name extension has its own set of verbs, which can be obtained by using the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, the "<ph id="ph1">`print`</ph>" verb will print a document specified by using <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default verb can be specified by using an empty string ("").</source>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of verbs are "Edit", "Open", "OpenAsReadOnly", "Print", and "Printto".</source>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should use only verbs that appear in the set of verbs returned by the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> property, you must include the file name extension when you set the value of the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name does not need to have an extension if you manually enter a value for the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>The action to take with the file that the process opens.</source>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>The default is an empty string (""), which signifies no action.</source>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>Gets the set of verbs associated with the type of file specified by the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.FileName"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt;</ph> property enables you to determine the verbs that can be used with the file specified by the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can set the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verb%2A&gt;</ph> property to the value of any verb in the set.</source>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT">
          <source>Examples of verbs are "Edit", "Open", "OpenAsReadOnly", "Print", and "Printto".</source>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you use the <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.Verbs%2A&gt;</ph> property, you must include the file name extension when you set the value of the <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.FileName%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT">
          <source>The file name extension determines the set of possible verbs.</source>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>The actions that the system can apply to the file indicated by the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.FileName"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Gets or sets the window state to use when the process is started.</source>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>One of the enumeration values that indicates whether the process is started in a window that is maximized, minimized, normal (neither maximized nor minimized), or not visible.</source>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`Normal`</ph>.</source>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>The window style is not one of the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessWindowStyle"&gt;&lt;/xref&gt;</ph> enumeration members.</source>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`false`</ph>, gets or sets the working directory for the process to be started.</source>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`true`</ph>, gets or sets the directory that contains the process to be started.</source>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property must be set if <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UserName%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.Password%2A&gt;</ph> are provided.</source>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the property is not set, the default working directory is %SYSTEMROOT%\system32.</source>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the directory is already part of the system path variable, you do not have to repeat the directory's location in this property.</source>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property behaves differently when <ph id="ph2">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph3">`true`</ph> than when <ph id="ph4">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph5">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property specifies the location of the executable.</source>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> is an empty string, the current directory is understood to contain the executable.</source>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`true`</ph>, the working directory of the application that starts the executable is also the working directory of the executable.</source>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT">
          <source>When <ph id="ph1">&lt;xref:System.Diagnostics.ProcessStartInfo.UseShellExecute%2A&gt;</ph> is <ph id="ph2">`false`</ph>, the <ph id="ph3">&lt;xref:System.Diagnostics.ProcessStartInfo.WorkingDirectory%2A&gt;</ph> property is not used to find the executable.</source>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT">
          <source>Instead, its value applies to the process that is started and only has meaning within the context of the new process.</source>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>When <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute"&gt;&lt;/xref&gt;</ph> is <ph id="ph2">`true`</ph>, the fully qualified name of the directory that contains the process to be started.</source>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>When the <ph id="ph1">&lt;xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute"&gt;&lt;/xref&gt;</ph> property is <ph id="ph2">`false`</ph>, the working directory for the process to be started.</source>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>The default is an empty string ("").</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>