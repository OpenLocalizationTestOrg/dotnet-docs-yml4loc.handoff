### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskFactory`1
  commentId: T:System.Threading.Tasks.TaskFactory`1
  id: TaskFactory`1
  children:
  - System.Threading.Tasks.TaskFactory`1.#ctor
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CancellationToken
  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.CreationOptions
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.Scheduler
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  langs:
  - csharp
  name: TaskFactory<TResult>
  nameWithType: TaskFactory<TResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  type: Class
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Provides support for creating and scheduling <xref href="System.Threading.Tasks.Task`1"></xref> objects.
  remarks: "The .NET Framework provides two factories for creating and scheduling tasks:  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory> class, which creates <xref:System.Threading.Tasks.Task> and <xref:System.Threading.Tasks.Task%601> objects.  \n  \n-   The <xref:System.Threading.Tasks.TaskFactory%601> class, which creates <xref:System.Threading.Tasks.Task%601> objects.  \n  \n The <xref:System.Threading.Tasks.TaskFactory%601> class allows you to do the following:  \n  \n-   Create a task and start it immediately by calling the <xref:System.Threading.Tasks.TaskFactory.StartNew%2A> method. You can call the overloads of this method to create and execute a task that requires non-default arguments.  \n  \n    > [!WARNING]\n    >  Starting with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <xref:System.Threading.Tasks.Task.Run%2A?displayProperty=fullName> method provides the easiest way to create a task with default configuration values and start it immediately.  \n  \n-   Create a task that starts when any one of the tasks in an array has completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> or   <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAny%2A> method.  \n  \n-   Create a task that starts when all the tasks in an array have completed by calling the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> or <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%2A> method.  \n  \n The static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property returns a default <xref:System.Threading.Tasks.TaskFactory%601> object. You can also call one of the <xref:System.Threading.Tasks.TaskFactory%601> class constructors to configure the <xref:System.Threading.Tasks.Task%601> objects that  the <xref:System.Threading.Tasks.TaskFactory%601> class creates. The following example configures a new <xref:System.Threading.Tasks.TaskFactory%601> object to create tasks that have a specified cancellation token, task creation options, continuation options, and a customized task scheduler.  \n  \n [!code-csharp[TPL_Factories#2](~/samples/snippets/csharp/VS_Snippets_Misc/tpl_factories/cs/factoriestresult.cs#2)]\n [!code-vb[TPL_Factories#2](~/samples/snippets/visualbasic/VS_Snippets_Misc/tpl_factories/vb/factoriestresult.vb#2)]  \n  \n In most cases, you do not have to instantiate a new <xref:System.Threading.Tasks.TaskFactory%601> instance. Instead, you can use the static <xref:System.Threading.Tasks.Task%601.Factory%2A?displayProperty=fullName> property, which returns a factory object that uses default values. You can then call its methods to start new tasks or define task continuations. For an illustration, see the example."
  example:
  - "The following example uses the static <xref:System.Threading.Tasks.Task%601.Factory%2A> property to make two calls to the <xref:System.Threading.Tasks.TaskFactory%601.StartNew%2A?displayProperty=fullName> method. The first task returns a string array that is populated with the names of files in the user's MyDocuments directory, while the second returns a string array that is populated with the names of subdirectories of the user's MyDocuments directory. It then calls the <xref:System.Threading.Tasks.TaskFactory.ContinueWhenAll%28System.Threading.Tasks.Task%5B%5D%2CSystem.Action%7BSystem.Threading.Tasks.Task%5B%5D%7D%29?displayProperty=fullName> method, which displays information about the number of files and directories in the arrays returned by the two tasks after they have completed execution.  \n  \n [!code-csharp[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.task.factory/cs/factory2.cs#2)]\n [!code-vb[System.Threading.Tasks.Task.Factory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.task.factory/vb/factory2.vb#2)]"
  syntax:
    content: public class TaskFactory<TResult>
    typeParameters:
    - id: TResult
      description: The return value of the <xref href="System.Threading.Tasks.Task`1"></xref> objects that the methods of this class create.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory<TResult>()
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>()
  fullName: TaskFactory<TResult>.TaskFactory<TResult>()
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory`1"></xref> instance with the default configuration.
  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory ();
    parameters: []
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory<TResult>(CancellationToken)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory`1"></xref> instance with the default configuration.
  remarks: This constructor creates a <xref:System.Threading.Tasks.TaskFactory%601> instance with a default configuration. The <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The default cancellation token that will be assigned to tasks created by this <xref href="System.Threading.Tasks.TaskFactory"></xref> unless another cancellation token is explicitly specified when calling the factory methods.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory<TResult>(TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory`1"></xref> instance with the specified configuration.
  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to <xref:System.Threading.Tasks.TaskCreationOptions.None>, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to <xref:System.Threading.Tasks.TaskContinuationOptions.None>, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler to use to schedule any tasks created with this <xref href="System.Threading.Tasks.TaskFactory`1"></xref>. A null value indicates that the current <xref href="System.Threading.Tasks.TaskScheduler"></xref> should be used.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory`1"></xref> instance with the specified configuration.
  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default options to use when creating tasks with this <xref href="System.Threading.Tasks.TaskFactory`1"></xref>.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default options to use when creating continuation tasks with this <xref href="System.Threading.Tasks.TaskFactory`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  type: Constructor
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Initializes a <xref href="System.Threading.Tasks.TaskFactory`1"></xref> instance with the specified configuration.
  remarks: With this constructor, the <xref:System.Threading.Tasks.TaskCreationOptions> property is initialized to `creationOptions`, the <xref:System.Threading.Tasks.TaskContinuationOptions> property is initialized to `continuationOptions`, and the <xref:System.Threading.Tasks.TaskScheduler> property is initialized to `scheduler`, unless it's `null`, in which case the property is initialized to the current scheduler (see <xref:System.Threading.Tasks.TaskScheduler.Current%2A>).
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The default cancellation token that will be assigned to tasks created by this <xref href="System.Threading.Tasks.TaskFactory"></xref> unless another cancellation token is explicitly specified when calling the factory methods.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The default options to use when creating tasks with this <xref href="System.Threading.Tasks.TaskFactory`1"></xref>.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: The default options to use when creating continuation tasks with this <xref href="System.Threading.Tasks.TaskFactory`1"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The default scheduler to use to schedule any tasks created with this <xref href="System.Threading.Tasks.TaskFactory`1"></xref>. A null value indicates that <xref href="System.Threading.Tasks.TaskScheduler.Current"></xref> should be used.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>creationOptions</code> or <code>continuationOptions</code> specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  commentId: P:System.Threading.Tasks.TaskFactory`1.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  fullName: TaskFactory<TResult>.CancellationToken
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the default cancellation token for this task factory.
  remarks: This property returns the default cancellation token that will be assigned to all tasks created by this factory unless another cancellation token value is explicitly specified during the call to the task factory methods.
  syntax:
    content: public System.Threading.CancellationToken CancellationToken { get; }
    return:
      type: System.Threading.CancellationToken
      description: The default cancellation token for this task factory.
  overload: System.Threading.Tasks.TaskFactory`1.CancellationToken*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  commentId: P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  fullName: TaskFactory<TResult>.ContinuationOptions
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> enumeration value for this task factory.
  remarks: This property returns the default continuation options for this factory. They will be used to create all continuation tasks unless other options are explicitly specified during calls to this factory's methods.
  syntax:
    content: public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that specifies the default continuation options for this task factory.
  overload: System.Threading.Tasks.TaskFactory`1.ContinuationOptions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided Tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler that is used to schedule the created continuation task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>continuationOptions</code> specifies an invalid value.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided Tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Func<Task[],TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n <code>continuationFunction</code> is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of a set of provided tasks.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: The function delegate to execute asynchronously when all tasks in the <code>tasks</code> array have completed.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler that is used to schedule the created continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid value.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the created continuation task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid <xref href="System.Threading.Tasks.TaskContinuationOptions"></xref> value.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Func<Task,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>tasks</code> array contains a null value or is empty.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is null.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid enumeration value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler"></xref> that is used to schedule the created continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid TaskContinuationOptions value.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: One of the enumeration values that controls the behavior of the created continuation task. The `NotOn*` or `OnlyOn*` values are not valid.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>continuationOptions</code> argument specifies an invalid enumeration value.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One of the elements in the <code>tasks</code> array has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a continuation task that will be started upon the completion of any task in the provided set.
  remarks: 'After completion, a task is in one of these states: <xref:System.Threading.Tasks.TaskStatus.RanToCompletion>, <xref:System.Threading.Tasks.TaskStatus.Faulted>, or <xref:System.Threading.Tasks.TaskStatus.Canceled> states.'
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: The array of tasks from which to continue when one task completes.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: The function delegate to execute asynchronously when one task in the <code>tasks</code> array completes.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new continuation task.
    typeParameters:
    - id: TAntecedentResult
      description: The type of the result of the antecedent <code>tasks</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: The new continuation task.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "One of the elements in the <code>tasks</code> array has been disposed.  \n  \n -or-  \n  \n The <xref href=\"System.Threading.CancellationTokenSource\"></xref> that created <code>cancellationToken</code> has already been disposed."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>tasks</code> array is `null`.  \n  \n -or-  \n  \n The <code>continuationFunction</code> argument is `null`."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>tasks</code> array contains a null value.  \n  \n -or-  \n  \n The <code>tasks</code> array is empty."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  commentId: P:System.Threading.Tasks.TaskFactory`1.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  fullName: TaskFactory<TResult>.CreationOptions
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the <xref href="System.Threading.Tasks.TaskCreationOptions"></xref> enumeration value for this task factory.
  remarks: This property returns the default creation options for this factory. They will be used to create all tasks unless other options are explicitly specified during calls to this factory's methods.
  syntax:
    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that specifies the default creation options for this task factory.
  overload: System.Threading.Tasks.TaskFactory`1.CreationOptions*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)
  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that executes an end method function when a specified <xref href="System.IAsyncResult"></xref> completes.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The function delegate that processes the completed <code>asyncResult</code>.
    return:
      type: System.Threading.Tasks.Task`1
      description: A <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that executes an end method function when a specified <xref href="System.IAsyncResult"></xref> completes.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The function delegate that processes the completed <code>asyncResult</code>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: A task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> argument specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> argument specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that executes an end method function when a specified <xref href="System.IAsyncResult"></xref> completes.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: The <xref href="System.IAsyncResult"></xref> whose completion should trigger the processing of the <code>endMethod</code>.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The function delegate that processes the completed <code>asyncResult</code>.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the task that executes the end method.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>asyncResult</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: arg3
      type: TArg3
      description: The third argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: An object that controls the behavior of the created task.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the third argument passed to <code>beginMethod</code> delegate.
    - id: TArg3
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: arg3
      type: TArg3
      description: The third argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the third argument passed to <code>beginMethod</code> delegate.
    - id: TArg3
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: An object that controls the behavior of the created <xref href="System.Threading.Tasks.Task`1"></xref>.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: arg2
      type: TArg2
      description: The second argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the second argument passed to <code>beginMethod</code> delegate.
    - id: TArg2
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.
  remarks: This method throws any exceptions thrown by the `beginMethod`. Exceptions for `endmethod` are thrown when waiting on the returned task.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: The delegate that begins the asynchronous operation.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: The delegate that ends the asynchronous operation.
    - id: arg1
      type: TArg1
      description: The first argument passed to the <code>beginMethod</code> delegate.
    - id: state
      type: System.Object
      description: An object containing data to be used by the <code>beginMethod</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    typeParameters:
    - id: TArg1
      description: The type of the first argument passed to the <code>beginMethod</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The created task that represents the asynchronous operation.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>beginMethod</code> argument is `null`.  \n  \n -or-  \n  \n The <code>endMethod</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  commentId: P:System.Threading.Tasks.TaskFactory`1.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  fullName: TaskFactory<TResult>.Scheduler
  type: Property
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Gets the task scheduler for this task factory.
  remarks: "This property returns the default scheduler for this factory. It will be used to schedule all tasks unless another scheduler is explicitly specified during calls to this factory's methods.  \n  \n If this property returns `null`, <xref:System.Threading.Tasks.TaskScheduler.Current%2A> will be used."
  syntax:
    content: public System.Threading.Tasks.TaskScheduler Scheduler { get; }
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler for this task factory.
  overload: System.Threading.Tasks.TaskFactory`1.Scheduler*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>, Object, CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the <code>function</code> delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the <code>function</code> delegate.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started <xref href="System.Threading.Tasks.Task`1"></xref>.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>function</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  id: StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>, Object)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the <code>function</code> delegate.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  id: StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors, and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  id: StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func`1
      description: A function delegate that returns the future result to be available through the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>function</code> argument is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  type: Method
  assemblies:
  - System.Threading.Tasks
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Threading.Tasks
  summary: Creates and starts a task.
  remarks: "Calling `StartNew` is functionally equivalent to creating a task by using one of the <xref:System.Threading.Tasks.Task%601> constructors and then calling the <xref:System.Threading.Tasks.Task.Start%2A> method to schedule it for execution.  \n  \n However, unless creation and scheduling must be separated, `StartNew` is the recommended approach for both simplicity and performance."
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: A function delegate that returns the future result to be available through the task.
    - id: state
      type: System.Object
      description: An object that contains data to be used by the <code>function</code> delegate.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token that will be assigned to the new task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: One of the enumeration values that controls the behavior of the created task.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The task scheduler that is used to schedule the created task.
    return:
      type: System.Threading.Tasks.Task`1
      description: The started task.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The cancellation token source that created <code>cancellationToken</code> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>function</code> argument is `null`.  \n  \n -or-  \n  \n The <code>scheduler</code> argument is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <code>creationOptions</code> parameter specifies an invalid value.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ObjectDisposedException
  parent: System
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory<TResult>()
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>()
  fullName: TaskFactory<TResult>.TaskFactory<TResult>()
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory<TResult>(CancellationToken)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory<TResult>(TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(TaskCreationOptions, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.TaskFactory<TResult>(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  fullName: TaskFactory<TResult>.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  fullName: TaskFactory<TResult>.ContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task[]
  parent: System.Threading.Tasks
  isExternal: false
  name: Task[]
  nameWithType: Task[]
  fullName: System.Threading.Tasks.Task[]
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func{System.Threading.Tasks.Task[],TResult}
  parent: System
  isExternal: false
  name: Func<Task[],TResult>
  nameWithType: Func<Task[],TResult>
  fullName: System.Func<System.Threading.Tasks.Task[],TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[], Func<Task[],TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[],TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>)
- uid: TAntecedentResult
  name: TAntecedentResult
  nameWithType: TAntecedentResult
  fullName: TAntecedentResult
- uid: System.Threading.Tasks.Task{TAntecedentResult}[]
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TAntecedentResult>[]
  nameWithType: Task<TAntecedentResult>[]
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
  parent: System
  isExternal: false
  name: Func<Task<TAntecedentResult>[],TResult>
  nameWithType: Func<Task<TAntecedentResult>[],TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[],TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[], Func<Task,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task,TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
  parent: System
  isExternal: false
  name: Func<Task<TAntecedentResult>,TResult>
  nameWithType: Func<Task<TAntecedentResult>,TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>,TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  fullName: TaskFactory<TResult>.CreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)
  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Func{System.IAsyncResult,TResult}
  parent: System
  isExternal: false
  name: Func<IAsyncResult,TResult>
  nameWithType: Func<IAsyncResult,TResult>
  fullName: System.Func<System.IAsyncResult,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object)
- uid: System.Func`3
  name: Func<T1,T2,TResult>
  nameWithType: Func<T1,T2,TResult>
  fullName: System.Func<T1,T2,TResult>
- uid: System.AsyncCallback
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult,TResult>, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Func`6
  name: Func<T1,T2,T3,T4,T5,TResult>
  nameWithType: Func<T1,T2,T3,T4,T5,TResult>
  fullName: System.Func<T1,T2,T3,T4,T5,TResult>
- uid: TArg1
  name: TArg1
  nameWithType: TArg1
  fullName: TArg1
- uid: TArg2
  name: TArg2
  nameWithType: TArg2
  fullName: TArg2
- uid: TArg3
  name: TArg3
  nameWithType: TArg3
  fullName: TArg3
- uid: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg3
    name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Func`5
  name: Func<T1,T2,T3,T4,TResult>
  nameWithType: Func<T1,T2,T3,T4,TResult>
  fullName: System.Func<T1,T2,T3,T4,TResult>
- uid: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object)
- uid: System.Func`4
  name: Func<T1,T2,T3,TResult>
  nameWithType: Func<T1,T2,T3,TResult>
  fullName: System.Func<T1,T2,T3,TResult>
- uid: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1,AsyncCallback,Object,IAsyncResult>, Func<IAsyncResult,TResult>, TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  fullName: TaskFactory<TResult>.Scheduler
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>, Object, CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken)
- uid: System.Func{System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Object,TResult>
  nameWithType: Func<Object,TResult>
  fullName: System.Func<System.Object,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>, TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>, Object)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>, CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)
  fullName: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: TaskFactory<TResult>.StartNew(Func<Object,TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory<TResult>
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>
  fullName: TaskFactory<TResult>.TaskFactory<TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  fullName: TaskFactory<TResult>.CancellationToken
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  fullName: TaskFactory<TResult>.ContinuationOptions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
  fullName: TaskFactory<TResult>.ContinueWhenAll
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  fullName: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
  fullName: TaskFactory<TResult>.ContinueWhenAny
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  fullName: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  fullName: TaskFactory<TResult>.CreationOptions
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
  fullName: TaskFactory<TResult>.FromAsync
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  fullName: TaskFactory<TResult>.FromAsync<TArg1,TArg2>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>
  fullName: TaskFactory<TResult>.FromAsync<TArg1>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  fullName: TaskFactory<TResult>.Scheduler
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Threading.Tasks.TaskFactory`1.StartNew*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
  fullName: TaskFactory<TResult>.StartNew
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks/TaskFactory`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
