{"nodes":[{"content":"Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.","nodes":[{"pos":[0,127],"content":"Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.","nodes":[{"content":"Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.","pos":[0,127]}]}],"pos":[1971,2099],"yaml":true},{"content":"Typically, this class is only used by the infrastructure to transform XML using a symmetric key.","nodes":[{"pos":[0,96],"content":"Typically, this class is only used by the infrastructure to transform XML using a symmetric key.","nodes":[{"content":"Typically, this class is only used by the infrastructure to transform XML using a symmetric key.","pos":[0,96]}]}],"pos":[2110,2207],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key.","nodes":[{"pos":[0,152],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"&gt;&lt;/xref&gt;</ph> class using the specified symmetric key.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key."}],"pos":[3952,4105],"yaml":true},{"content":"<code>key</code> is `null`.","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>key</code> is `null`."}],"pos":[4457,4485],"yaml":true},{"content":"<code>key</code> is zero length.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is zero length.","source":"<code>key</code> is zero length."}],"pos":[4579,4612],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key and a value that indicates whether the binary data must be cloned.","nodes":[{"pos":[0,218],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"&gt;&lt;/xref&gt;</ph> class using the specified symmetric key and a value that indicates whether the binary data must be cloned.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key and a value that indicates whether the binary data must be cloned."}],"pos":[5870,6089],"yaml":true},{"content":"<code>symmetricKey</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;symmetricKey&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>symmetricKey</code> is `null`."}],"pos":[6524,6561],"yaml":true},{"content":"<code>symmetricKey</code> is zero length.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;symmetricKey&lt;/code&gt;</ph> is zero length.","source":"<code>symmetricKey</code> is zero length."}],"pos":[6655,6697],"yaml":true},{"content":"Decrypts the specified encrypted key.","nodes":[{"pos":[0,37],"content":"Decrypts the specified encrypted key.","nodes":[{"content":"Decrypts the specified encrypted key.","pos":[0,37]}]}],"pos":[7903,7941],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[7952,8067],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm that was used to encrypt the key.","nodes":[{"pos":[0,61],"content":"The cryptographic algorithm that was used to encrypt the key.","nodes":[{"content":"The cryptographic algorithm that was used to encrypt the key.","pos":[0,61]}]}],"pos":[8241,8303],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the encrypted key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key."}],"pos":[8366,8444],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the decrypted key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the decrypted key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the decrypted key."}],"pos":[8501,8579],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.","nodes":[{"pos":[0,408],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"&gt;&lt;/xref&gt;</ph>.","pos":[41,408],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>."}]}],"pos":[8784,9193],"yaml":true},{"content":"Encrypts the specified key.","nodes":[{"pos":[0,27],"content":"Encrypts the specified key.","nodes":[{"content":"Encrypts the specified key.","pos":[0,27]}]}],"pos":[10399,10427],"yaml":true},{"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,114],"content":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the static fields of the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,114],"source":"Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[10438,10553],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm to encrypt the key with.","nodes":[{"pos":[0,52],"content":"The cryptographic algorithm to encrypt the key with.","nodes":[{"content":"The cryptographic algorithm to encrypt the key with.","pos":[0,52]}]}],"pos":[10727,10780],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the key.","nodes":[{"pos":[0,67],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the key."}],"pos":[10843,10911],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the encrypted key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key."}],"pos":[10968,11046],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.","nodes":[{"pos":[0,407],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"&gt;&lt;/xref&gt;</ph>.","pos":[41,407],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>."}]}],"pos":[11251,11659],"yaml":true},{"content":"Generates a derived key using the specified cryptographic algorithm and parameters for the current key.","nodes":[{"pos":[0,103],"content":"Generates a derived key using the specified cryptographic algorithm and parameters for the current key.","nodes":[{"content":"Generates a derived key using the specified cryptographic algorithm and parameters for the current key.","pos":[0,103]}]}],"pos":[13099,13203],"yaml":true},{"content":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.","nodes":[{"pos":[0,137],"content":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.","nodes":[{"content":"To specify P-SHA1 as the cryptographic algorithm, use the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation&gt;</ph> field.","pos":[0,137],"source":"To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field."}]}],"pos":[13214,13352],"yaml":true,"extradata":"MT"},{"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","nodes":[{"pos":[0,85],"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","nodes":[{"content":"A URI that represents the cryptographic algorithm to use to generate the derived key.","pos":[0,85]}]}],"pos":[13580,13666],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the label parameter for the cryptographic algorithm.","nodes":[{"pos":[0,111],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the label parameter for the cryptographic algorithm.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the label parameter for the cryptographic algorithm."}],"pos":[13727,13839],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the nonce that is used to create a derived key.","nodes":[{"pos":[0,106],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the nonce that is used to create a derived key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the nonce that is used to create a derived key."}],"pos":[13900,14007],"yaml":true},{"content":"The size of the derived key.","nodes":[{"pos":[0,28],"content":"The size of the derived key.","nodes":[{"content":"The size of the derived key.","pos":[0,28]}]}],"pos":[14078,14107],"yaml":true},{"content":"The position at which the derived key is located in the byte array that is returned from this method.","nodes":[{"pos":[0,101],"content":"The position at which the derived key is located in the byte array that is returned from this method.","nodes":[{"content":"The position at which the derived key is located in the byte array that is returned from this method.","pos":[0,101]}]}],"pos":[14168,14270],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the derived key.","nodes":[{"pos":[0,75],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the derived key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the derived key."}],"pos":[14327,14403],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"></xref>.","nodes":[{"pos":[0,156],"content":"<code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms is <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"&gt;&lt;/xref&gt;</ph>.","pos":[41,156],"source":" The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"></xref>."}]}],"pos":[14616,14773],"yaml":true},{"content":"Gets a transform that decrypts cipher text using the specified cryptographic algorithm.","nodes":[{"pos":[0,87],"content":"Gets a transform that decrypts cipher text using the specified cryptographic algorithm.","nodes":[{"content":"Gets a transform that decrypts cipher text using the specified cryptographic algorithm.","pos":[0,87]}]}],"pos":[16051,16139],"yaml":true},{"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,144],"content":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the fields that represent decryption algorithms in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[16150,16295],"yaml":true,"extradata":"MT"},{"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","nodes":[{"pos":[0,75],"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","nodes":[{"content":"A cryptographic algorithm that decrypts cipher text, such as encrypted XML.","pos":[0,75]}]}],"pos":[16515,16591],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.","nodes":[{"pos":[0,120],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the initialization vector (<ph id=\"ph2\">`IV`</ph>) for the specified algorithm.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm."}],"pos":[16649,16770],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform.","nodes":[{"pos":[0,111],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;&lt;/xref&gt;</ph> that represents the decryption transform.","source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform."}],"pos":[16859,16971],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","nodes":[{"pos":[0,420],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;&lt;/xref&gt;</ph>.","pos":[41,420],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>."}]}],"pos":[17188,17609],"yaml":true},{"content":"Gets a transform that encrypts XML using the specified cryptographic algorithm.","nodes":[{"pos":[0,79],"content":"Gets a transform that encrypts XML using the specified cryptographic algorithm.","nodes":[{"content":"Gets a transform that encrypts XML using the specified cryptographic algorithm.","pos":[0,79]}]}],"pos":[18887,18967],"yaml":true},{"content":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,144],"content":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the fields that represent encryption algorithms in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[18978,19123],"yaml":true,"extradata":"MT"},{"content":"A cryptographic algorithm that encrypts XML.","nodes":[{"pos":[0,44],"content":"A cryptographic algorithm that encrypts XML.","nodes":[{"content":"A cryptographic algorithm that encrypts XML.","pos":[0,44]}]}],"pos":[19343,19388],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.","nodes":[{"pos":[0,120],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the initialization vector (<ph id=\"ph2\">`IV`</ph>) for the specified algorithm.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm."}],"pos":[19446,19567],"yaml":true},{"content":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform.","nodes":[{"pos":[0,111],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.ICryptoTransform\"&gt;&lt;/xref&gt;</ph> that represents the encryption transform.","source":"An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform."}],"pos":[19656,19768],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","nodes":[{"pos":[0,420],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;&lt;/xref&gt;</ph>.","pos":[41,420],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>."}]}],"pos":[19985,20406],"yaml":true},{"content":"Gets the size, in bits, of the initialization vector (`IV`) that is required for the specified cryptographic algorithm.","nodes":[{"pos":[0,119],"content":"Gets the size, in bits, of the initialization vector (<ph id=\"ph1\">`IV`</ph>) that is required for the specified cryptographic algorithm.","source":"Gets the size, in bits, of the initialization vector (`IV`) that is required for the specified cryptographic algorithm."}],"pos":[21540,21660],"yaml":true},{"content":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"pos":[0,144],"content":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.","nodes":[{"content":"Use the fields that represent encryption algorithms in the <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.SecurityAlgorithms&gt;</ph> class to specify the algorithm.","pos":[0,144],"source":"Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm."}]}],"pos":[21671,21816],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm to get the size of the initialization vector (`IV`).","nodes":[{"pos":[0,80],"content":"The cryptographic algorithm to get the size of the initialization vector (<ph id=\"ph1\">`IV`</ph>).","source":"The cryptographic algorithm to get the size of the initialization vector (`IV`)."}],"pos":[21970,22051],"yaml":true},{"content":"The size, in bits, of the initialization vector (`IV`) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter.","nodes":[{"pos":[0,154],"content":"The size, in bits, of the initialization vector (<ph id=\"ph1\">`IV`</ph>) that is required for the cryptographic algorithm specified in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">algorithm</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The size, in bits, of the initialization vector (`IV`) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter."}],"pos":[22107,22262],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","nodes":[{"pos":[0,420],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;&lt;/xref&gt;</ph>.","pos":[41,420],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>."}]}],"pos":[22466,22887],"yaml":true},{"content":"Gets an instance of the specified keyed hash algorithm.","nodes":[{"pos":[0,55],"content":"Gets an instance of the specified keyed hash algorithm.","nodes":[{"content":"Gets an instance of the specified keyed hash algorithm.","pos":[0,55]}]}],"pos":[24093,24149],"yaml":true},{"content":"The keyed hash algorithm to get an instance of.","nodes":[{"pos":[0,47],"content":"The keyed hash algorithm to get an instance of.","nodes":[{"content":"The keyed hash algorithm to get an instance of.","pos":[0,47]}]}],"pos":[24359,24407],"yaml":true},{"content":"A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"&gt;&lt;/xref&gt;</ph> that represents the keyed hash algorithm.","source":"A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm."}],"pos":[24498,24611],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"></xref>.","nodes":[{"pos":[0,155],"content":"<code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"></xref>.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms is <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"&gt;&lt;/xref&gt;</ph>.","pos":[41,155],"source":" The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"></xref>."}]}],"pos":[24827,24983],"yaml":true},{"content":"Gets an instance of the specified symmetric algorithm.","nodes":[{"pos":[0,54],"content":"Gets an instance of the specified symmetric algorithm.","nodes":[{"content":"Gets an instance of the specified symmetric algorithm.","pos":[0,54]}]}],"pos":[26189,26244],"yaml":true},{"content":"The symmetric algorithm to get an instance of.","nodes":[{"pos":[0,46],"content":"The symmetric algorithm to get an instance of.","nodes":[{"content":"The symmetric algorithm to get an instance of.","pos":[0,46]}]}],"pos":[26454,26501],"yaml":true},{"content":"A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm.","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"&gt;&lt;/xref&gt;</ph> that represents the symmetric algorithm.","source":"A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm."}],"pos":[26592,26704],"yaml":true},{"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>,  <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>","nodes":[{"pos":[0,755],"content":"<code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>,  <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;algorithm&lt;/code&gt;</ph> is not supported.","pos":[0,40],"source":"<code>algorithm</code> is not supported."},{"content":"The supported algorithms are <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"&gt;&lt;/xref&gt;</ph>,  <ph id=\"ph4\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph5\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph6\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph7\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph8\">&lt;xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"&gt;&lt;/xref&gt;</ph>","pos":[41,755],"source":" The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>,  <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>"}]}],"pos":[26920,27676],"yaml":true},{"content":"Gets the bytes that represent the symmetric key.","nodes":[{"pos":[0,48],"content":"Gets the bytes that represent the symmetric key.","nodes":[{"content":"Gets the bytes that represent the symmetric key.","pos":[0,48]}]}],"pos":[28783,28832],"yaml":true},{"content":"An array of <xref href=\"System.Byte\"></xref> that contains the symmetric key.","nodes":[{"pos":[0,77],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> that contains the symmetric key.","source":"An array of <xref href=\"System.Byte\"></xref> that contains the symmetric key."}],"pos":[28974,29052],"yaml":true},{"content":"Gets a value that indicates whether the specified algorithm uses asymmetric keys.","nodes":[{"pos":[0,81],"content":"Gets a value that indicates whether the specified algorithm uses asymmetric keys.","nodes":[{"content":"Gets a value that indicates whether the specified algorithm uses asymmetric keys.","pos":[0,81]}]}],"pos":[30361,30443],"yaml":true},{"content":"The cryptographic algorithm.","nodes":[{"pos":[0,28],"content":"The cryptographic algorithm.","nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]}],"pos":[30610,30639],"yaml":true},{"content":"`true` when the specified algorithm uses asymmetric keys; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> when the specified algorithm uses asymmetric keys; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when the specified algorithm uses asymmetric keys; otherwise, `false`."}],"pos":[30697,30777],"yaml":true},{"content":"Gets a value that indicates whether the specified algorithm is supported by this class.","nodes":[{"pos":[0,87],"content":"Gets a value that indicates whether the specified algorithm is supported by this class.","nodes":[{"content":"Gets a value that indicates whether the specified algorithm is supported by this class.","pos":[0,87]}]}],"pos":[32086,32174],"yaml":true},{"content":"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>  \n  \n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>","nodes":[{"pos":[0,113],"content":"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:","nodes":[{"content":"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:","pos":[0,113]}]},{"pos":[123,194],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>","nodes":[]},{"pos":[204,276],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>","nodes":[]},{"pos":[286,356],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>","nodes":[]},{"pos":[366,433],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>","nodes":[]},{"pos":[443,513],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>","nodes":[]},{"pos":[523,590],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>","nodes":[]},{"pos":[600,670],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>","nodes":[]},{"pos":[680,747],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>","nodes":[]},{"pos":[757,830],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>","nodes":[]},{"pos":[840,910],"content":"<xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>","nodes":[]}],"pos":[32185,33118],"yaml":true,"extradata":"MT"},{"content":"The cryptographic algorithm.","nodes":[{"pos":[0,28],"content":"The cryptographic algorithm.","nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]}],"pos":[33284,33313],"yaml":true},{"content":"`true` when the specified algorithm is supported by this class; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> when the specified algorithm is supported by this class; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when the specified algorithm is supported by this class; otherwise, `false`."}],"pos":[33371,33457],"yaml":true},{"content":"Gets a value that indicates whether the specified algorithm uses symmetric keys.","nodes":[{"pos":[0,80],"content":"Gets a value that indicates whether the specified algorithm uses symmetric keys.","nodes":[{"content":"Gets a value that indicates whether the specified algorithm uses symmetric keys.","pos":[0,80]}]}],"pos":[34765,34846],"yaml":true},{"content":"The cryptographic algorithm.","nodes":[{"pos":[0,28],"content":"The cryptographic algorithm.","nodes":[{"content":"The cryptographic algorithm.","pos":[0,28]}]}],"pos":[35012,35041],"yaml":true},{"content":"`true` when the specified algorithm uses symmetric keys; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> when the specified algorithm uses symmetric keys; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` when the specified algorithm uses symmetric keys; otherwise, `false`."}],"pos":[35099,35178],"yaml":true},{"content":"Gets the size, in bits, of the key.","nodes":[{"pos":[0,35],"content":"Gets the size, in bits, of the key.","nodes":[{"content":"Gets the size, in bits, of the key.","pos":[0,35]}]}],"pos":[36341,36377],"yaml":true},{"content":"The size, in bits, of the key.","nodes":[{"pos":[0,30],"content":"The size, in bits, of the key.","nodes":[{"content":"The size, in bits, of the key.","pos":[0,30]}]}],"pos":[36493,36524],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  commentId: T:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  id: InMemorySymmetricSecurityKey\n  children:\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)\n  - System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  langs:\n  - csharp\n  name: InMemorySymmetricSecurityKey\n  nameWithType: InMemorySymmetricSecurityKey\n  fullName: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Represents keys that are generated using symmetric algorithms and are only stored in the local computer's random access memory.\n  remarks: Typically, this class is only used by the infrastructure to transform XML using a symmetric key.\n  syntax:\n    content: 'public class InMemorySymmetricSecurityKey : System.IdentityModel.Tokens.SymmetricSecurityKey'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SecurityKey\n  - System.IdentityModel.Tokens.SymmetricSecurityKey\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: InMemorySymmetricSecurityKey(Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key.\n  syntax:\n    content: public InMemorySymmetricSecurityKey (byte[] key);\n    parameters:\n    - id: symmetricKey\n      type: System.Byte[]\n      description: ''\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>key</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>key</code> is zero length.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)\n  id: '#ctor(System.Byte[],System.Boolean)'\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: InMemorySymmetricSecurityKey(Byte[], Boolean)\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)\n  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\"></xref> class using the specified symmetric key and a value that indicates whether the binary data must be cloned.\n  syntax:\n    content: public InMemorySymmetricSecurityKey (byte[] key, bool clone);\n    parameters:\n    - id: symmetricKey\n      type: System.Byte[]\n      description: ''\n    - id: cloneBuffer\n      type: System.Boolean\n      description: ''\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>symmetricKey</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>symmetricKey</code> is zero length.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])\n  id: DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: DecryptKey(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Decrypts the specified encrypted key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override byte[] DecryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm that was used to encrypt the key.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the decrypted key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])\n  id: EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: EncryptKey(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Encrypts the specified key.\n  remarks: Use the static fields of the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override byte[] EncryptKey (string algorithm, byte[] keyData);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to encrypt the key with.\n    - id: keyData\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the key.\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the encrypted key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, or <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  id: GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  fullName: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Generates a derived key using the specified cryptographic algorithm and parameters for the current key.\n  remarks: To specify P-SHA1 as the cryptographic algorithm, use the <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation> field.\n  syntax:\n    content: public override byte[] GenerateDerivedKey (string algorithm, byte[] label, byte[] nonce, int derivedKeyLength, int offset);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A URI that represents the cryptographic algorithm to use to generate the derived key.\n    - id: label\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the label parameter for the cryptographic algorithm.\n    - id: nonce\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the nonce that is used to create a derived key.\n    - id: derivedKeyLength\n      type: System.Int32\n      description: The size of the derived key.\n    - id: offset\n      type: System.Int32\n      description: The position at which the derived key is located in the byte array that is returned from this method.\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the derived key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  id: GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetDecryptionTransform(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a transform that decrypts cipher text using the specified cryptographic algorithm.\n  remarks: Use the fields that represent decryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.ICryptoTransform GetDecryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that decrypts cipher text, such as encrypted XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the decryption transform.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  id: GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetEncryptionTransform(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a transform that encrypts XML using the specified cryptographic algorithm.\n  remarks: Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.ICryptoTransform GetEncryptionTransform (string algorithm, byte[] iv);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: A cryptographic algorithm that encrypts XML.\n    - id: iv\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the initialization vector (`IV`) for the specified algorithm.\n    return:\n      type: System.Security.Cryptography.ICryptoTransform\n      description: An <xref href=\"System.Security.Cryptography.ICryptoTransform\"></xref> that represents the encryption transform.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)\n  id: GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetIVSize(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)\n  fullName: InMemorySymmetricSecurityKey.GetIVSize(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the size, in bits, of the initialization vector (`IV`) that is required for the specified cryptographic algorithm.\n  remarks: Use the fields that represent encryption algorithms in the <xref:System.IdentityModel.Tokens.SecurityAlgorithms> class to specify the algorithm.\n  syntax:\n    content: public override int GetIVSize (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm to get the size of the initialization vector (`IV`).\n    return:\n      type: System.Int32\n      description: The size, in bits, of the initialization vector (`IV`) that is required for the cryptographic algorithm specified in the <code>algorithm</code> parameter.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  id: GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets an instance of the specified keyed hash algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.KeyedHashAlgorithm GetKeyedHashAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The keyed hash algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.KeyedHashAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.KeyedHashAlgorithm\"></xref> that represents the keyed hash algorithm.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms is <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  id: GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets an instance of the specified symmetric algorithm.\n  syntax:\n    content: public override System.Security.Cryptography.SymmetricAlgorithm GetSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The symmetric algorithm to get an instance of.\n    return:\n      type: System.Security.Cryptography.SymmetricAlgorithm\n      description: A <xref href=\"System.Security.Cryptography.SymmetricAlgorithm\"></xref> that represents the symmetric algorithm.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <code>algorithm</code> is not supported. The supported algorithms are <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption\"></xref>,  <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap\"></xref>, <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap\"></xref>, and <xref href=\"System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap\"></xref>\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey\n  id: GetSymmetricKey\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: GetSymmetricKey()\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()\n  fullName: InMemorySymmetricSecurityKey.GetSymmetricKey()\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the bytes that represent the symmetric key.\n  syntax:\n    content: public override byte[] GetSymmetricKey ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: An array of <xref href=\"System.Byte\"></xref> that contains the symmetric key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)\n  id: IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm uses asymmetric keys.\n  syntax:\n    content: public override bool IsAsymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: '`true` when the specified algorithm uses asymmetric keys; otherwise, `false`.'\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)\n  id: IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: IsSupportedAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm is supported by this class.\n  remarks: \"The symmetric algorithms that are supported by this class are the algorithms represented by the following fields:  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.HmacSha1Signature>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Psha1KeyDerivation>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesEncryption>  \\n  \\n-   <xref:System.IdentityModel.Tokens.SecurityAlgorithms.TripleDesKeyWrap>\"\n  syntax:\n    content: public override bool IsSupportedAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: '`true` when the specified algorithm is supported by this class; otherwise, `false`.'\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)\n  commentId: M:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)\n  id: IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets a value that indicates whether the specified algorithm uses symmetric keys.\n  syntax:\n    content: public override bool IsSymmetricAlgorithm (string algorithm);\n    parameters:\n    - id: algorithm\n      type: System.String\n      description: The cryptographic algorithm.\n    return:\n      type: System.Boolean\n      description: '`true` when the specified algorithm uses symmetric keys; otherwise, `false`.'\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  commentId: P:System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  id: KeySize\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  langs:\n  - csharp\n  name: KeySize\n  nameWithType: InMemorySymmetricSecurityKey.KeySize\n  fullName: InMemorySymmetricSecurityKey.KeySize\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the size, in bits, of the key.\n  syntax:\n    content: public override int KeySize { get; }\n    return:\n      type: System.Int32\n      description: The size, in bits, of the key.\n  overload: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.IdentityModel.Tokens.SymmetricSecurityKey\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SymmetricSecurityKey\n  nameWithType: SymmetricSecurityKey\n  fullName: System.IdentityModel.Tokens.SymmetricSecurityKey\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: InMemorySymmetricSecurityKey(Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor(System.Byte[],System.Boolean)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: InMemorySymmetricSecurityKey(Byte[], Boolean)\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)\n  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey(Byte[], Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: DecryptKey(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.DecryptKey(String, Byte[])\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: EncryptKey(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.EncryptKey(String, Byte[])\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey(System.String,System.Byte[],System.Byte[],System.Int32,System.Int32)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n  fullName: InMemorySymmetricSecurityKey.GenerateDerivedKey(String, Byte[], Byte[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.GetDecryptionTransform(String, Byte[])\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  nameWithType: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform(System.String,System.Byte[])\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform(String, Byte[])\n  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n  fullName: InMemorySymmetricSecurityKey.GetEncryptionTransform(String, Byte[])\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetIVSize(String)\n  fullName: InMemorySymmetricSecurityKey.GetIVSize(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm(String)\n- uid: System.Security.Cryptography.KeyedHashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: KeyedHashAlgorithm\n  nameWithType: KeyedHashAlgorithm\n  fullName: System.Security.Cryptography.KeyedHashAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm(String)\n- uid: System.Security.Cryptography.SymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SymmetricAlgorithm\n  nameWithType: SymmetricAlgorithm\n  fullName: System.Security.Cryptography.SymmetricAlgorithm\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey()\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey()\n  fullName: InMemorySymmetricSecurityKey.GetSymmetricKey()\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.IsSupportedAlgorithm(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(System.String)\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm(String)\n  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n  fullName: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm(String)\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: InMemorySymmetricSecurityKey.KeySize\n  fullName: InMemorySymmetricSecurityKey.KeySize\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.#ctor*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: InMemorySymmetricSecurityKey\n  nameWithType: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey\n  fullName: InMemorySymmetricSecurityKey.InMemorySymmetricSecurityKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.DecryptKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: DecryptKey\n  nameWithType: InMemorySymmetricSecurityKey.DecryptKey\n  fullName: InMemorySymmetricSecurityKey.DecryptKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.EncryptKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: EncryptKey\n  nameWithType: InMemorySymmetricSecurityKey.EncryptKey\n  fullName: InMemorySymmetricSecurityKey.EncryptKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GenerateDerivedKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GenerateDerivedKey\n  nameWithType: InMemorySymmetricSecurityKey.GenerateDerivedKey\n  fullName: InMemorySymmetricSecurityKey.GenerateDerivedKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetDecryptionTransform*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetDecryptionTransform\n  nameWithType: InMemorySymmetricSecurityKey.GetDecryptionTransform\n  fullName: InMemorySymmetricSecurityKey.GetDecryptionTransform\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetEncryptionTransform*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetEncryptionTransform\n  nameWithType: InMemorySymmetricSecurityKey.GetEncryptionTransform\n  fullName: InMemorySymmetricSecurityKey.GetEncryptionTransform\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetIVSize*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetIVSize\n  nameWithType: InMemorySymmetricSecurityKey.GetIVSize\n  fullName: InMemorySymmetricSecurityKey.GetIVSize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetKeyedHashAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm\n  fullName: InMemorySymmetricSecurityKey.GetKeyedHashAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm\n  fullName: InMemorySymmetricSecurityKey.GetSymmetricAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.GetSymmetricKey*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: GetSymmetricKey\n  nameWithType: InMemorySymmetricSecurityKey.GetSymmetricKey\n  fullName: InMemorySymmetricSecurityKey.GetSymmetricKey\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsAsymmetricAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm\n  fullName: InMemorySymmetricSecurityKey.IsAsymmetricAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSupportedAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSupportedAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.IsSupportedAlgorithm\n  fullName: InMemorySymmetricSecurityKey.IsSupportedAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.IsSymmetricAlgorithm*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: IsSymmetricAlgorithm\n  nameWithType: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm\n  fullName: InMemorySymmetricSecurityKey.IsSymmetricAlgorithm\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey.KeySize*\n  parent: System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n  isExternal: false\n  name: KeySize\n  nameWithType: InMemorySymmetricSecurityKey.KeySize\n  fullName: InMemorySymmetricSecurityKey.KeySize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/InMemorySymmetricSecurityKey.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}