{"nodes":[{"content":"Defines and creates new instances of classes during run time.","nodes":[{"pos":[0,61],"content":"Defines and creates new instances of classes during run time.","nodes":[{"content":"Defines and creates new instances of classes during run time.","pos":[0,61]}]}],"pos":[12014,12076],"yaml":true},{"content":"<xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime. It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module. A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.  \n  \n Reflection emit provides the following options for defining types:  \n  \n-   Define a class or interface with the given name.  \n  \n-   Define a class or interface with the given name and attributes.  \n  \n-   Define a class with the given name, attributes, and base class.  \n  \n-   Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.  \n  \n-   Define a class with the given name, attributes, base class, and packing size.  \n  \n-   Define a class with the given name, attributes, base class, and the class size as a whole.  \n  \n-   Define a class with the given name, attributes, base class, packing size, and the class size as a whole.  \n  \n To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively.  \n  \n Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> method must be called. **CreateType** completes the creation of the type. Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method. It is an error to invoke methods that change the implementation of a type after **CreateType** has been called. For example, the common language runtime throws an exception if the caller tries to add new members to a type.  \n  \n A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=fullName> method. **DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object.  \n  \n Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=fullName> methods.  \n  \n## Attributes  \n The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:  \n  \n-   Interfaces are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attributes.  \n  \n-   Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attribute.  \n  \n-   Several attributes determine type visibility. See the description of the <xref:System.Reflection.TypeAttributes> enumeration.  \n  \n-   If <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified, the class loader lays out fields in the order they are read from metadata. The class loader considers the specified packing size but ignores any specified field offsets. The metadata preserves the order in which the field definitions are emitted. Even across a merge, the metadata will not reorder the field definitions. The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified.  \n  \n## Known Issues  \n  \n-   Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface. However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.  \n  \n-   Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class. Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception. The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and reflecting on the retrieved type.","nodes":[{"pos":[0,505],"content":"<xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime. It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module. A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.","nodes":[{"content":"<xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime. It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module. A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.","pos":[0,505],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> is the root class used to control the creation of dynamic classes in the runtime.","pos":[0,123],"source":"<xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime."},{"content":"It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module.","pos":[124,248]},{"content":"A new <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> can be created from a dynamic module by calling the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=fullName&gt;</ph> method, which returns a <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[249,505],"source":" A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object."}]}]},{"pos":[512,578],"content":"Reflection emit provides the following options for defining types:","nodes":[{"content":"Reflection emit provides the following options for defining types:","pos":[0,66]}]},{"pos":[588,636],"content":"Define a class or interface with the given name.","nodes":[{"content":"Define a class or interface with the given name.","pos":[0,48]}]},{"pos":[646,709],"content":"Define a class or interface with the given name and attributes.","nodes":[{"content":"Define a class or interface with the given name and attributes.","pos":[0,63]}]},{"pos":[719,782],"content":"Define a class with the given name, attributes, and base class.","nodes":[{"content":"Define a class with the given name, attributes, and base class.","pos":[0,63]}]},{"pos":[792,904],"content":"Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.","nodes":[{"content":"Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.","pos":[0,112]}]},{"pos":[914,991],"content":"Define a class with the given name, attributes, base class, and packing size.","nodes":[{"content":"Define a class with the given name, attributes, base class, and packing size.","pos":[0,77]}]},{"pos":[1001,1091],"content":"Define a class with the given name, attributes, base class, and the class size as a whole.","nodes":[{"content":"Define a class with the given name, attributes, base class, and the class size as a whole.","pos":[0,90]}]},{"pos":[1101,1205],"content":"Define a class with the given name, attributes, base class, packing size, and the class size as a whole.","nodes":[{"content":"Define a class with the given name, attributes, base class, packing size, and the class size as a whole.","pos":[0,104]}]},{"pos":[1212,1590],"content":"To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively.","nodes":[{"content":"To create an array type, pointer type, or byref type for an incomplete type that is represented by a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object, use the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A&gt;</ph> method, <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A&gt;</ph> method, or <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A&gt;</ph> method, respectively.","pos":[0,378],"source":"To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively."}]},{"pos":[1597,2275],"content":"Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> method must be called. **CreateType** completes the creation of the type. Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method. It is an error to invoke methods that change the implementation of a type after **CreateType** has been called. For example, the common language runtime throws an exception if the caller tries to add new members to a type.","nodes":[{"content":"Before a type is used, the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName&gt;</ph> method must be called.","pos":[0,130],"source":"Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> method must be called."},{"content":"<bpt id=\"p1\">**</bpt>CreateType<ept id=\"p1\">**</ept> completes the creation of the type.","pos":[131,181],"source":"**CreateType** completes the creation of the type."},{"content":"Following the call to <bpt id=\"p1\">**</bpt>CreateType<ept id=\"p1\">**</ept>, the caller can instantiate the type by using the <ph id=\"ph1\">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=fullName&gt;</ph> method, and invoke members of the type by using the <ph id=\"ph2\">&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;</ph> method.","pos":[182,455],"source":" Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method."},{"content":"It is an error to invoke methods that change the implementation of a type after <bpt id=\"p1\">**</bpt>CreateType<ept id=\"p1\">**</ept> has been called.","pos":[456,567],"source":" It is an error to invoke methods that change the implementation of a type after **CreateType** has been called."},{"content":"For example, the common language runtime throws an exception if the caller tries to add new members to a type.","pos":[568,678]}]},{"pos":[2282,2518],"content":"A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=fullName> method. **DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object.","nodes":[{"content":"A class initializer is created by using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,143],"source":"A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=fullName> method."},{"content":"<bpt id=\"p1\">**</bpt>DefineTypeInitializer<ept id=\"p1\">**</ept> returns a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> object.","pos":[144,236],"source":"**DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object."}]},{"pos":[2525,2667],"content":"Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=fullName> methods.","nodes":[{"content":"Nested types are defined by calling one of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=fullName&gt;</ph> methods.","pos":[0,142],"source":"Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=fullName> methods."}]},{"pos":[2676,2686],"content":"Attributes","linkify":"Attributes","nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[2690,2868],"content":"The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class uses the <ph id=\"ph2\">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> enumeration to further specify the characteristics of the type to be created:","pos":[0,178],"source":"The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:"}]},{"pos":[2878,3058],"content":"Interfaces are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attributes.","nodes":[{"content":"Interfaces are specified using the <ph id=\"ph1\">&lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;</ph> attributes.","pos":[0,180],"source":"Interfaces are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attributes."}]},{"pos":[3068,3218],"content":"Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attribute.","nodes":[{"content":"Concrete classes (classes that cannot be extended) are specified using the <ph id=\"ph1\">&lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;</ph> attribute.","pos":[0,150],"source":"Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attribute."}]},{"pos":[3228,3353],"content":"Several attributes determine type visibility. See the description of the <xref:System.Reflection.TypeAttributes> enumeration.","nodes":[{"content":"Several attributes determine type visibility. See the description of the <xref:System.Reflection.TypeAttributes> enumeration.","pos":[0,125],"nodes":[{"content":"Several attributes determine type visibility.","pos":[0,45]},{"content":"See the description of the <ph id=\"ph1\">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> enumeration.","pos":[46,125],"source":" See the description of the <xref:System.Reflection.TypeAttributes> enumeration."}]}]},{"pos":[3363,3902],"content":"If <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified, the class loader lays out fields in the order they are read from metadata. The class loader considers the specified packing size but ignores any specified field offsets. The metadata preserves the order in which the field definitions are emitted. Even across a merge, the metadata will not reorder the field definitions. The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified.","nodes":[{"content":"If <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified, the class loader lays out fields in the order they are read from metadata. The class loader considers the specified packing size but ignores any specified field offsets. The metadata preserves the order in which the field definitions are emitted. Even across a merge, the metadata will not reorder the field definitions. The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified.","pos":[0,539],"nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;</ph> is specified, the class loader lays out fields in the order they are read from metadata.","pos":[0,156],"source":"If <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified, the class loader lays out fields in the order they are read from metadata."},{"content":"The class loader considers the specified packing size but ignores any specified field offsets.","pos":[157,251]},{"content":"The metadata preserves the order in which the field definitions are emitted.","pos":[252,328]},{"content":"Even across a merge, the metadata will not reorder the field definitions.","pos":[329,402]},{"content":"The loader will honor the specified field offsets only if <ph id=\"ph1\">&lt;xref:System.Reflection.TypeAttributes?displayProperty=fullName&gt;</ph> is specified.","pos":[403,539],"source":" The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified."}]}]},{"pos":[3911,3923],"content":"Known Issues","linkify":"Known Issues","nodes":[{"content":"Known Issues","pos":[0,12]}]},{"pos":[3933,4201],"content":"Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface. However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.","nodes":[{"content":"Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface. However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.","pos":[0,268],"nodes":[{"content":"Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface.","pos":[0,148]},{"content":"However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.","pos":[149,268]}]}]},{"pos":[4211,4817],"content":"Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class. Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception. The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and reflecting on the retrieved type.","nodes":[{"content":"Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class. Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception. The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and reflecting on the retrieved type.","pos":[0,606],"nodes":[{"content":"Although <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> is derived from <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph>, some of the abstract methods defined in the <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> class are not fully implemented in the <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class.","pos":[0,237],"source":"Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class."},{"content":"Calls to these <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> methods throw a <ph id=\"ph2\">&lt;xref:System.NotSupportedException&gt;</ph> exception.","pos":[238,357],"source":" Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception."},{"content":"The desired functionality can be obtained by retrieving the created type using the <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and reflecting on the retrieved type.","pos":[358,606],"source":" The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and reflecting on the retrieved type."}]}]}],"pos":[12087,16948],"yaml":true,"extradata":"MT"},{"content":"Adds declarative security to this type.","nodes":[{"pos":[0,39],"content":"Adds declarative security to this type.","nodes":[{"content":"Adds declarative security to this type.","pos":[0,39]}]}],"pos":[29663,29703],"yaml":true},{"content":"`AddDeclarativeSecurity` may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.  \n  \n> [!NOTE]\n>  In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.","nodes":[{"pos":[0,181],"content":"<ph id=\"ph1\">`AddDeclarativeSecurity`</ph> may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.","source":"`AddDeclarativeSecurity` may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action."},{"pos":[189,367],"content":"[!NOTE]\n In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.","leadings":["","> "],"nodes":[{"content":"In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.","pos":[9,176]}]}],"pos":[29714,30087],"yaml":true,"extradata":"MT"},{"content":"The security action to be taken such as Demand, Assert, and so on.","nodes":[{"pos":[0,66],"content":"The security action to be taken such as Demand, Assert, and so on.","nodes":[{"content":"The security action to be taken such as Demand, Assert, and so on.","pos":[0,66]}]}],"pos":[31521,31588],"yaml":true},{"content":"The set of permissions the action applies to.","nodes":[{"pos":[0,45],"content":"The set of permissions the action applies to.","nodes":[{"content":"The set of permissions the action applies to.","pos":[0,45]}]}],"pos":[31664,31710],"yaml":true},{"content":"The <code>action</code> is invalid (`RequestMinimum`, `RequestOptional`, and `RequestRefuse` are invalid).","nodes":[{"pos":[0,106],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">action</ph><ept id=\"p1\">&lt;/code&gt;</ept> is invalid (<ph id=\"ph2\">`RequestMinimum`</ph>, <ph id=\"ph3\">`RequestOptional`</ph>, and <ph id=\"ph4\">`RequestRefuse`</ph> are invalid).","source":"The <code>action</code> is invalid (`RequestMinimum`, `RequestOptional`, and `RequestRefuse` are invalid)."}],"pos":[31909,32016],"yaml":true},{"content":"The containing type has been created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n The permission set <code>pset</code> contains an action that was added earlier by `AddDeclarativeSecurity`.","nodes":[{"pos":[0,110],"content":"The containing type has been created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type has been created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[117,121],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[128,235],"content":"The permission set <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pset</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an action that was added earlier by <ph id=\"ph2\">`AddDeclarativeSecurity`</ph>.","source":"The permission set <code>pset</code> contains an action that was added earlier by `AddDeclarativeSecurity`."}],"pos":[32126,32370],"yaml":true},{"content":"<code>pset</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;pset&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>pset</code> is `null`."}],"pos":[32472,32501],"yaml":true},{"content":"Adds an interface that this type implements.","nodes":[{"pos":[0,44],"content":"Adds an interface that this type implements.","nodes":[{"content":"Adds an interface that this type implements.","pos":[0,44]}]}],"pos":[33678,33723],"yaml":true},{"content":"The interface that this type implements.","nodes":[{"pos":[0,40],"content":"The interface that this type implements.","nodes":[{"content":"The interface that this type implements.","pos":[0,40]}]}],"pos":[34532,34573],"yaml":true},{"content":"<code>interfaceType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;interfaceType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>interfaceType</code> is `null`."}],"pos":[34764,34802],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[34912,35018],"yaml":true},{"content":"Retrieves the dynamic assembly that contains this type definition.","nodes":[{"pos":[0,66],"content":"Retrieves the dynamic assembly that contains this type definition.","nodes":[{"content":"Retrieves the dynamic assembly that contains this type definition.","pos":[0,66]}]}],"pos":[36243,36310],"yaml":true},{"content":"Read-only. Retrieves the dynamic assembly that contains this type definition.","nodes":[{"pos":[0,77],"content":"Read-only. Retrieves the dynamic assembly that contains this type definition.","nodes":[{"content":"Read-only. Retrieves the dynamic assembly that contains this type definition.","pos":[0,77],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the dynamic assembly that contains this type definition.","pos":[11,77]}]}]}],"pos":[36464,36542],"yaml":true},{"content":"Returns the full name of this type qualified by the display name of the assembly.","nodes":[{"pos":[0,81],"content":"Returns the full name of this type qualified by the display name of the assembly.","nodes":[{"content":"Returns the full name of this type qualified by the display name of the assembly.","pos":[0,81]}]}],"pos":[37844,37926],"yaml":true},{"content":"The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=fullName>), separated by a comma and a space.  \n  \n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \n  \n## Version Information  \n In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.","nodes":[{"pos":[0,288],"content":"The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=fullName>), separated by a comma and a space.","nodes":[{"content":"The format of the returned string is the concatenation of the full name of the type (<ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.FullName%2A&gt;</ph>) and the display name of the assembly (<ph id=\"ph2\">&lt;xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=fullName&gt;</ph>), separated by a comma and a space.","pos":[0,288],"source":"The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=fullName>), separated by a comma and a space."}]},{"pos":[295,404],"content":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.","nodes":[{"content":"See <ph id=\"ph1\">&lt;xref:System.Reflection.AssemblyName&gt;</ph> for a description of the format of the display name of an assembly.","pos":[0,109],"source":"See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly."}]},{"pos":[413,432],"content":"Version Information","linkify":"Version Information","nodes":[{"content":"Version Information","pos":[0,19]}]},{"pos":[436,550],"content":"In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.","nodes":[{"content":"In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.","pos":[0,114]}]}],"pos":[37937,38495],"yaml":true,"extradata":"MT"},{"content":"Read-only. The full name of this type qualified by the display name of the assembly.","nodes":[{"pos":[0,84],"content":"Read-only. The full name of this type qualified by the display name of the assembly.","nodes":[{"content":"Read-only. The full name of this type qualified by the display name of the assembly.","pos":[0,84],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The full name of this type qualified by the display name of the assembly.","pos":[11,84]}]}]}],"pos":[38629,38714],"yaml":true},{"content":"Retrieves the base type of this type.","nodes":[{"pos":[0,37],"content":"Retrieves the base type of this type.","nodes":[{"content":"Retrieves the base type of this type.","pos":[0,37]}]}],"pos":[40773,40811],"yaml":true},{"content":"Read-only. Retrieves the base type of this type.","nodes":[{"pos":[0,48],"content":"Read-only. Retrieves the base type of this type.","nodes":[{"content":"Read-only. Retrieves the base type of this type.","pos":[0,48],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the base type of this type.","pos":[11,48]}]}]}],"pos":[40928,40977],"yaml":true},{"content":"Creates a <xref href=\"System.Type\"></xref> object for the class. After defining fields and methods on the class, `CreateType` is called in order to load its `Type` object.","nodes":[{"pos":[0,171],"content":"Creates a <xref href=\"System.Type\"></xref> object for the class. After defining fields and methods on the class, `CreateType` is called in order to load its `Type` object.","nodes":[{"content":"Creates a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object for the class.","pos":[0,64],"source":"Creates a <xref href=\"System.Type\"></xref> object for the class."},{"content":"After defining fields and methods on the class, <ph id=\"ph1\">`CreateType`</ph> is called in order to load its <ph id=\"ph2\">`Type`</ph> object.","pos":[65,171],"source":" After defining fields and methods on the class, `CreateType` is called in order to load its `Type` object."}]}],"pos":[43210,43382],"yaml":true},{"content":"If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type.  \n  \n If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type.  \n  \n If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=fullName> event. This is because the loader cannot determine the size of the enclosing type until the nested type has been completed. The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type. The code example for this topic shows how to define such an event handler.  \n  \n A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called. All calls return the same <xref:System.Type> object.","nodes":[{"pos":[0,174],"content":"If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type.","nodes":[{"content":"If this type is a nested type, the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method must be called on the enclosing type before it is called on the nested type.","pos":[0,174],"source":"If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type."}]},{"pos":[181,423],"content":"If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type.","nodes":[{"content":"If the current type derives from an incomplete type or implements incomplete interfaces, call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method on the parent type and the interface types before calling it on the current type.","pos":[0,242],"source":"If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type."}]},{"pos":[430,1246],"content":"If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=fullName> event. This is because the loader cannot determine the size of the enclosing type until the nested type has been completed. The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type. The code example for this topic shows how to define such an event handler.","nodes":[{"content":"If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=fullName> event. This is because the loader cannot determine the size of the enclosing type until the nested type has been completed. The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type. The code example for this topic shows how to define such an event handler.","pos":[0,816],"nodes":[{"content":"If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method on the enclosing type will generate a <ph id=\"ph2\">&lt;xref:System.AppDomain.TypeResolve?displayProperty=fullName&gt;</ph> event.","pos":[0,337],"source":"If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=fullName> event."},{"content":"This is because the loader cannot determine the size of the enclosing type until the nested type has been completed.","pos":[338,454]},{"content":"The caller should define a handler for the <ph id=\"ph1\">&lt;xref:System.AppDomain.TypeResolve&gt;</ph> event to complete the definition of the nested type by calling <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> on the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object that represents the nested type.","pos":[455,741],"source":" The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type."},{"content":"The code example for this topic shows how to define such an event handler.","pos":[742,816]}]}]},{"pos":[1253,1437],"content":"A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called. All calls return the same <xref:System.Type> object.","nodes":[{"content":"A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called. All calls return the same <xref:System.Type> object.","pos":[0,184],"nodes":[{"content":"A type is created only once, no matter how many times the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method is called.","pos":[0,131],"source":"A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called."},{"content":"All calls return the same <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object.","pos":[132,184],"source":" All calls return the same <xref:System.Type> object."}]}]}],"pos":[43393,44839],"yaml":true,"extradata":"MT"},{"content":"Returns the new <xref href=\"System.Type\"></xref> object for this class.","nodes":[{"pos":[0,71],"content":"Returns the new <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object for this class.","source":"Returns the new <xref href=\"System.Type\"></xref> object for this class."}],"pos":[45908,45980],"yaml":true},{"content":"The enclosing type has not been created.  \n  \n -or-  \n  \n This type is non-abstract and contains an abstract method.  \n  \n -or-  \n  \n This type is not an abstract class or an interface and has a method without a method body.","nodes":[{"pos":[0,40],"content":"The enclosing type has not been created.","nodes":[{"content":"The enclosing type has not been created.","pos":[0,40]}]},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,116],"content":"This type is non-abstract and contains an abstract method.","nodes":[{"content":"This type is non-abstract and contains an abstract method.","pos":[0,58]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,224],"content":"This type is not an abstract class or an interface and has a method without a method body.","nodes":[{"content":"This type is not an abstract class or an interface and has a method without a method body.","pos":[0,90]}]}],"pos":[46163,46398],"yaml":true},{"content":"The type contains invalid Microsoft intermediate language (MSIL) code.  \n  \n -or-  \n  \n The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.","nodes":[{"pos":[0,70],"content":"The type contains invalid Microsoft intermediate language (MSIL) code.","nodes":[{"content":"The type contains invalid Microsoft intermediate language (MSIL) code.","pos":[0,70]}]},{"pos":[77,81],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[88,213],"content":"The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.","nodes":[{"content":"The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.","pos":[0,125]}]}],"pos":[46500,46720],"yaml":true},{"content":"The type cannot be loaded. For example, it contains a `static` method that has the calling convention <xref href=\"System.Reflection.CallingConventions.HasThis\"></xref>.","nodes":[{"pos":[0,168],"content":"The type cannot be loaded. For example, it contains a `static` method that has the calling convention <xref href=\"System.Reflection.CallingConventions.HasThis\"></xref>.","nodes":[{"content":"The type cannot be loaded.","pos":[0,26]},{"content":"For example, it contains a <ph id=\"ph1\">`static`</ph> method that has the calling convention <ph id=\"ph2\">&lt;xref href=\"System.Reflection.CallingConventions.HasThis\"&gt;&lt;/xref&gt;</ph>.","pos":[27,168],"source":" For example, it contains a `static` method that has the calling convention <xref href=\"System.Reflection.CallingConventions.HasThis\"></xref>."}]}],"pos":[46814,46983],"yaml":true},{"content":"Gets a <xref href=\"System.Reflection.TypeInfo\"></xref> object that represents this type.","nodes":[{"pos":[0,88],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.TypeInfo\"&gt;&lt;/xref&gt;</ph> object that represents this type.","source":"Gets a <xref href=\"System.Reflection.TypeInfo\"></xref> object that represents this type."}],"pos":[48069,48158],"yaml":true},{"content":"An object that represents this type.","nodes":[{"pos":[0,36],"content":"An object that represents this type.","nodes":[{"content":"An object that represents this type.","pos":[0,36]}]}],"pos":[48323,48360],"yaml":true},{"content":"Gets the method that declared the current generic type parameter.","nodes":[{"pos":[0,65],"content":"Gets the method that declared the current generic type parameter.","nodes":[{"content":"Gets the method that declared the current generic type parameter.","pos":[0,65]}]}],"pos":[49632,49698],"yaml":true},{"content":"> [!NOTE]\n>  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.","nodes":[{"pos":[2,209],"content":"[!NOTE]\n When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.","leadings":["","> "],"nodes":[{"content":"When emitting code, a generic type parameter is represented by a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object rather than by a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[9,205],"source":" When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object."}]}],"pos":[49709,49931],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.MethodBase\"></xref> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, `null`.","nodes":[{"pos":[0,178],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodBase\"&gt;&lt;/xref&gt;</ph> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"A <xref href=\"System.Reflection.MethodBase\"></xref> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, `null`."}],"pos":[50096,50275],"yaml":true},{"content":"Returns the type that declared this type.","nodes":[{"pos":[0,41],"content":"Returns the type that declared this type.","nodes":[{"content":"Returns the type that declared this type.","pos":[0,41]}]}],"pos":[51496,51538],"yaml":true},{"content":"Read-only. The type that declared this type.","nodes":[{"pos":[0,44],"content":"Read-only. The type that declared this type.","nodes":[{"content":"Read-only. The type that declared this type.","pos":[0,44],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The type that declared this type.","pos":[11,44]}]}]}],"pos":[51660,51705],"yaml":true},{"content":"Adds a new constructor to the type, with the given attributes and signature.","nodes":[{"pos":[0,76],"content":"Adds a new constructor to the type, with the given attributes and signature.","nodes":[{"content":"Adds a new constructor to the type, with the given attributes and signature.","pos":[0,76]}]}],"pos":[53345,53422],"yaml":true},{"content":"If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.  \n  \n If you define a constructor for your dynamic type, a default constructor is not provided. You have the following options for providing a default constructor in addition to the constructor you defined:  \n  \n-   If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it). Do not provide an implementation for this default constructor. If you do, an exception is thrown when you try to use the constructor. No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.  \n  \n-   If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=fullName> method to create one, and provide your own implementation.","nodes":[{"pos":[0,162],"content":"If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.","nodes":[{"content":"If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.","pos":[0,162]}]},{"pos":[169,369],"content":"If you define a constructor for your dynamic type, a default constructor is not provided. You have the following options for providing a default constructor in addition to the constructor you defined:","nodes":[{"content":"If you define a constructor for your dynamic type, a default constructor is not provided. You have the following options for providing a default constructor in addition to the constructor you defined:","pos":[0,200],"nodes":[{"content":"If you define a constructor for your dynamic type, a default constructor is not provided.","pos":[0,89]},{"content":"You have the following options for providing a default constructor in addition to the constructor you defined:","pos":[90,200]}]}]},{"pos":[379,860],"content":"If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it). Do not provide an implementation for this default constructor. If you do, an exception is thrown when you try to use the constructor. No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.","nodes":[{"content":"If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it). Do not provide an implementation for this default constructor. If you do, an exception is thrown when you try to use the constructor. No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.","pos":[0,481],"nodes":[{"content":"If you want a default constructor that simply calls the default constructor of the base class, you can use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A&gt;</ph> method to create one (and optionally restrict access to it).","pos":[0,241],"source":"If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it)."},{"content":"Do not provide an implementation for this default constructor.","pos":[242,304]},{"content":"If you do, an exception is thrown when you try to use the constructor.","pos":[305,375]},{"content":"No exception is thrown when the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method is called.","pos":[376,481],"source":" No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called."}]}]},{"pos":[870,1246],"content":"If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=fullName> method to create one, and provide your own implementation.","nodes":[{"content":"If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=fullName&gt;</ph> method to create one, and provide your own implementation.","pos":[0,376],"source":"If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=fullName> method to create one, and provide your own implementation."}]}],"pos":[53433,54688],"yaml":true,"extradata":"MT"},{"content":"The attributes of the constructor.","nodes":[{"pos":[0,34],"content":"The attributes of the constructor.","nodes":[{"content":"The attributes of the constructor.","pos":[0,34]}]}],"pos":[55741,55776],"yaml":true},{"content":"The calling convention of the constructor.","nodes":[{"pos":[0,42],"content":"The calling convention of the constructor.","nodes":[{"content":"The calling convention of the constructor.","pos":[0,42]}]}],"pos":[55872,55915],"yaml":true},{"content":"The parameter types of the constructor.","nodes":[{"pos":[0,39],"content":"The parameter types of the constructor.","nodes":[{"content":"The parameter types of the constructor.","pos":[0,39]}]}],"pos":[55985,56025],"yaml":true},{"content":"The defined constructor.","nodes":[{"pos":[0,24],"content":"The defined constructor.","nodes":[{"content":"The defined constructor.","pos":[0,24]}]}],"pos":[56110,56135],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[56325,56431],"yaml":true},{"content":"Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.","nodes":[{"pos":[0,95],"content":"Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.","nodes":[{"content":"Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.","pos":[0,95]}]}],"pos":[58263,58359],"yaml":true},{"content":"This overload is provided for designers of managed compilers.  \n  \n> [!NOTE]\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,61],"content":"This overload is provided for designers of managed compilers.","nodes":[{"content":"This overload is provided for designers of managed compilers.","pos":[0,61]}]},{"pos":[69,468],"content":"[!NOTE]\n For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,397],"nodes":[{"content":"For more information on custom modifiers, see the ECMA Partition II Metadata documentation.","pos":[1,92]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[93,389],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[58370,58844],"yaml":true,"extradata":"MT"},{"content":"The attributes of the constructor.","nodes":[{"pos":[0,34],"content":"The attributes of the constructor.","nodes":[{"content":"The attributes of the constructor.","pos":[0,34]}]}],"pos":[59299,59334],"yaml":true},{"content":"The calling convention of the constructor.","nodes":[{"pos":[0,42],"content":"The calling convention of the constructor.","nodes":[{"content":"The calling convention of the constructor.","pos":[0,42]}]}],"pos":[59430,59473],"yaml":true},{"content":"The parameter types of the constructor.","nodes":[{"pos":[0,39],"content":"The parameter types of the constructor.","nodes":[{"content":"The parameter types of the constructor.","pos":[0,39]}]}],"pos":[59543,59583],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[59664,60066],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[60147,60549],"yaml":true},{"content":"The defined constructor.","nodes":[{"pos":[0,24],"content":"The defined constructor.","nodes":[{"content":"The defined constructor.","pos":[0,24]}]}],"pos":[60634,60659],"yaml":true},{"content":"The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.","nodes":[{"pos":[0,144],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requiredCustomModifiers</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">optionalCustomModifiers</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not equal the size of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">parameterTypes</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>."}],"pos":[60833,60978],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[61088,61456],"yaml":true},{"content":"Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.","nodes":[{"pos":[0,117],"content":"Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.","nodes":[{"content":"Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.","pos":[0,117],"nodes":[{"content":"Defines the default constructor.","pos":[0,32]},{"content":"The constructor defined here will simply call the default constructor of the parent.","pos":[33,117]}]}]}],"pos":[62937,63055],"yaml":true},{"content":"Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:  \n  \n-   You have defined another constructor and you also want a default constructor that simply calls the base class constructor.  \n  \n-   You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>.","nodes":[{"pos":[0,127],"content":"Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:","nodes":[{"content":"Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:","pos":[0,127]}]},{"pos":[137,259],"content":"You have defined another constructor and you also want a default constructor that simply calls the base class constructor.","nodes":[{"content":"You have defined another constructor and you also want a default constructor that simply calls the base class constructor.","pos":[0,122]}]},{"pos":[269,625],"content":"You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>.","nodes":[{"content":"You want to set the attributes on the default constructor to something other than <ph id=\"ph1\">&lt;xref:System.Reflection.MethodAttributes.PrivateScope&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.MethodAttributes.Public&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Reflection.MethodAttributes.HideBySig&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Reflection.MethodAttributes.SpecialName&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Reflection.MethodAttributes.RTSpecialName&gt;</ph>.","pos":[0,356],"source":"You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>."}]}],"pos":[63066,63698],"yaml":true,"extradata":"MT"},{"content":"A `MethodAttributes` object representing the attributes to be applied to the constructor.","nodes":[{"pos":[0,89],"content":"A <ph id=\"ph1\">`MethodAttributes`</ph> object representing the attributes to be applied to the constructor.","source":"A `MethodAttributes` object representing the attributes to be applied to the constructor."}],"pos":[64679,64769],"yaml":true},{"content":"Returns the constructor.","nodes":[{"pos":[0,24],"content":"Returns the constructor.","nodes":[{"content":"Returns the constructor.","pos":[0,24]}]}],"pos":[64854,64879],"yaml":true},{"content":"The parent type (base type) does not have a default constructor.","nodes":[{"pos":[0,64],"content":"The parent type (base type) does not have a default constructor.","nodes":[{"content":"The parent type (base type) does not have a default constructor.","pos":[0,64]}]}],"pos":[65068,65133],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[65243,65611],"yaml":true},{"content":"Adds a new event to the type, with the given name, attributes and event type.","nodes":[{"pos":[0,77],"content":"Adds a new event to the type, with the given name, attributes and event type.","nodes":[{"content":"Adds a new event to the type, with the given name, attributes and event type.","pos":[0,77]}]}],"pos":[67128,67206],"yaml":true},{"content":"The name of the event. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,71],"content":"The name of the event. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the event.","pos":[0,22]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[23,71],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[67437,67509],"yaml":true},{"content":"The attributes of the event.","nodes":[{"pos":[0,28],"content":"The attributes of the event.","nodes":[{"content":"The attributes of the event.","pos":[0,28]}]}],"pos":[67595,67624],"yaml":true},{"content":"The type of the event.","nodes":[{"pos":[0,22],"content":"The type of the event.","nodes":[{"content":"The type of the event.","pos":[0,22]}]}],"pos":[67687,67710],"yaml":true},{"content":"The defined event.","nodes":[{"pos":[0,18],"content":"The defined event.","nodes":[{"content":"The defined event.","pos":[0,18]}]}],"pos":[67789,67808],"yaml":true},{"content":"The length of <code>name</code> is zero.","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."}],"pos":[67976,68017],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n <code>eventtype</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,79],"content":"<ph id=\"ph1\">&lt;code&gt;eventtype&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>eventtype</code> is `null`."}],"pos":[68119,68205],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[68315,68421],"yaml":true},{"content":"Adds a new field to the type, with the given name, attributes, and field type.","nodes":[{"pos":[0,78],"content":"Adds a new field to the type, with the given name, attributes, and field type.","nodes":[{"content":"Adds a new field to the type, with the given name, attributes, and field type.","pos":[0,78]}]}],"pos":[69863,69942],"yaml":true},{"content":"The name of the field. <code>fieldName</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The name of the field. <code>fieldName</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the field.","pos":[0,22]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[23,76],"source":"<code>fieldName</code> cannot contain embedded nulls."}]}],"pos":[70178,70255],"yaml":true},{"content":"The type of the field","nodes":[{"pos":[0,21],"content":"The type of the field","nodes":[{"content":"The type of the field","pos":[0,21]}]}],"pos":[70313,70335],"yaml":true},{"content":"The attributes of the field.","nodes":[{"pos":[0,28],"content":"The attributes of the field.","nodes":[{"content":"The attributes of the field.","pos":[0,28]}]}],"pos":[70421,70450],"yaml":true},{"content":"The defined field.","nodes":[{"pos":[0,18],"content":"The defined field.","nodes":[{"content":"The defined field.","pos":[0,18]}]}],"pos":[70529,70548],"yaml":true},{"content":"The length of <code>fieldName</code> is zero.  \n  \n -or-  \n  \n <code>type</code> is System.Void.  \n  \n -or-  \n  \n A total size was specified for the parent class of this field.","nodes":[{"pos":[0,45],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>fieldName</code> is zero."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,96],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is System.Void.","source":"<code>type</code> is System.Void."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,176],"content":"A total size was specified for the parent class of this field.","nodes":[{"content":"A total size was specified for the parent class of this field.","pos":[0,62]}]}],"pos":[70716,70903],"yaml":true},{"content":"<code>fieldName</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;fieldName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>fieldName</code> is `null`."}],"pos":[71005,71039],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[71149,71255],"yaml":true},{"content":"Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.","nodes":[{"pos":[0,96],"content":"Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.","nodes":[{"content":"Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.","pos":[0,96]}]}],"pos":[72829,72926],"yaml":true},{"content":"This overload is provided for designers of managed compilers.","nodes":[{"pos":[0,61],"content":"This overload is provided for designers of managed compilers.","nodes":[{"content":"This overload is provided for designers of managed compilers.","pos":[0,61]}]}],"pos":[72937,72999],"yaml":true,"extradata":"MT"},{"content":"The name of the field. <code>fieldName</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The name of the field. <code>fieldName</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the field.","pos":[0,22]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[23,76],"source":"<code>fieldName</code> cannot contain embedded nulls."}]}],"pos":[73299,73376],"yaml":true},{"content":"The type of the field","nodes":[{"pos":[0,21],"content":"The type of the field","nodes":[{"content":"The type of the field","pos":[0,21]}]}],"pos":[73434,73456],"yaml":true},{"content":"An array of types representing the required custom modifiers for the field, such as <xref href=\"Microsoft.VisualC.IsConstModifier\"></xref>.","nodes":[{"pos":[0,139],"content":"An array of types representing the required custom modifiers for the field, such as <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.IsConstModifier\"&gt;&lt;/xref&gt;</ph>.","source":"An array of types representing the required custom modifiers for the field, such as <xref href=\"Microsoft.VisualC.IsConstModifier\"></xref>."}],"pos":[73535,73675],"yaml":true},{"content":"An array of types representing the optional custom modifiers for the field, such as <xref href=\"Microsoft.VisualC.IsConstModifier\"></xref>.","nodes":[{"pos":[0,139],"content":"An array of types representing the optional custom modifiers for the field, such as <ph id=\"ph1\">&lt;xref href=\"Microsoft.VisualC.IsConstModifier\"&gt;&lt;/xref&gt;</ph>.","source":"An array of types representing the optional custom modifiers for the field, such as <xref href=\"Microsoft.VisualC.IsConstModifier\"></xref>."}],"pos":[73754,73894],"yaml":true},{"content":"The attributes of the field.","nodes":[{"pos":[0,28],"content":"The attributes of the field.","nodes":[{"content":"The attributes of the field.","pos":[0,28]}]}],"pos":[73980,74009],"yaml":true},{"content":"The defined field.","nodes":[{"pos":[0,18],"content":"The defined field.","nodes":[{"content":"The defined field.","pos":[0,18]}]}],"pos":[74088,74107],"yaml":true},{"content":"The length of <code>fieldName</code> is zero.  \n  \n -or-  \n  \n <code>type</code> is System.Void.  \n  \n -or-  \n  \n A total size was specified for the parent class of this field.","nodes":[{"pos":[0,45],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">fieldName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>fieldName</code> is zero."},{"pos":[52,56],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[63,96],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is System.Void.","source":"<code>type</code> is System.Void."},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,176],"content":"A total size was specified for the parent class of this field.","nodes":[{"content":"A total size was specified for the parent class of this field.","pos":[0,62]}]}],"pos":[74275,74462],"yaml":true},{"content":"<code>fieldName</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;fieldName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>fieldName</code> is `null`."}],"pos":[74564,74598],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[74708,74814],"yaml":true},{"content":"Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to set their constraints.","nodes":[{"pos":[0,245],"content":"Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> objects that can be used to set their constraints.","source":"Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to set their constraints."}],"pos":[76133,76379],"yaml":true},{"content":"Calling this method makes the current type a generic type. If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"pos":[0,160],"content":"Calling this method makes the current type a generic type. If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"Calling this method makes the current type a generic type. If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.","pos":[0,160],"nodes":[{"content":"Calling this method makes the current type a generic type.","pos":[0,58]},{"content":"If the method is called again on the same type, an <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[59,160],"source":" If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown."}]}]}],"pos":[76390,76551],"yaml":true,"extradata":"MT"},{"content":"An array of names for the generic type parameters.","nodes":[{"pos":[0,50],"content":"An array of names for the generic type parameters.","nodes":[{"content":"An array of names for the generic type parameters.","pos":[0,50]}]}],"pos":[77608,77659],"yaml":true},{"content":"An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to define the constraints of the generic type parameters for the current type.","nodes":[{"pos":[0,187],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"&gt;&lt;/xref&gt;</ph> objects that can be used to define the constraints of the generic type parameters for the current type.","source":"An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to define the constraints of the generic type parameters for the current type."}],"pos":[77755,77943],"yaml":true},{"content":"Generic type parameters have already been defined for this type.","nodes":[{"pos":[0,64],"content":"Generic type parameters have already been defined for this type.","nodes":[{"content":"Generic type parameters have already been defined for this type.","pos":[0,64]}]}],"pos":[78139,78204],"yaml":true},{"content":"<code>names</code> is `null`.  \n  \n -or-  \n  \n An element of <code>names</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;names&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>names</code> is `null`."},{"pos":[36,40],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[47,90],"content":"An element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">names</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"An element of <code>names</code> is `null`."}],"pos":[78306,78403],"yaml":true},{"content":"<code>names</code> is an empty array.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;names&lt;/code&gt;</ph> is an empty array.","source":"<code>names</code> is an empty array."}],"pos":[78497,78535],"yaml":true},{"content":"Defines initialized data field in the .sdata section of the portable executable (PE) file.","nodes":[{"pos":[0,90],"content":"Defines initialized data field in the .sdata section of the portable executable (PE) file.","nodes":[{"content":"Defines initialized data field in the .sdata section of the portable executable (PE) file.","pos":[0,90]}]}],"pos":[80049,80140],"yaml":true},{"content":"The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.","nodes":[{"pos":[0,143],"content":"The field that you create with this method will be <ph id=\"ph1\">`static`</ph>, even if you do not include <ph id=\"ph2\">`FieldAttributes.Static`</ph> in the <ph id=\"ph3\">`attributes`</ph> parameter.","source":"The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter."}],"pos":[80151,80295],"yaml":true,"extradata":"MT"},{"content":"The name used to refer to the data. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,84],"content":"The name used to refer to the data. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name used to refer to the data.","pos":[0,35]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[36,84],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[80533,80618],"yaml":true},{"content":"The blob of data.","nodes":[{"pos":[0,17],"content":"The blob of data.","nodes":[{"content":"The blob of data.","pos":[0,17]}]}],"pos":[80678,80696],"yaml":true},{"content":"The attributes for the field.","nodes":[{"pos":[0,29],"content":"The attributes for the field.","nodes":[{"content":"The attributes for the field.","pos":[0,29]}]}],"pos":[80782,80812],"yaml":true},{"content":"A field to reference the data.","nodes":[{"pos":[0,30],"content":"A field to reference the data.","nodes":[{"content":"A field to reference the data.","pos":[0,30]}]}],"pos":[80891,80922],"yaml":true},{"content":"Length of <code>name</code> is zero.  \n  \n -or-  \n  \n The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.","nodes":[{"pos":[0,36],"content":"Length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"Length of <code>name</code> is zero."},{"pos":[43,47],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[54,143],"content":"The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.","nodes":[{"content":"The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.","pos":[0,89]}]}],"pos":[81100,81250],"yaml":true},{"content":"<code>name</code> or <code>data</code> is `null`.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;data&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>name</code> or <code>data</code> is `null`."}],"pos":[81352,81402],"yaml":true},{"content":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been previously called.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> has been previously called.","source":"<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been previously called."}],"pos":[81512,81607],"yaml":true},{"content":"Adds a new method to the type, with the specified name and method attributes.","nodes":[{"pos":[0,77],"content":"Adds a new method to the type, with the specified name and method attributes.","nodes":[{"content":"Adds a new method to the type, with the specified name and method attributes.","pos":[0,77]}]}],"pos":[83007,83085],"yaml":true},{"content":"Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.  \n  \n This method overload defines a method with <xref:System.Reflection.CallingConventions?displayProperty=fullName>. If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.","nodes":[{"pos":[0,462],"content":"Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.","nodes":[{"content":"Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.","pos":[0,462],"nodes":[{"content":"Use this method overload when you do not know the method signature at the time you define the method.","pos":[0,101]},{"content":"For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.","pos":[102,297]},{"content":"The parameters and return type of the method can be set later using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName&gt;</ph> method.","pos":[298,462],"source":" The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method."}]}]},{"pos":[469,845],"content":"This method overload defines a method with <xref:System.Reflection.CallingConventions?displayProperty=fullName>. If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.","nodes":[{"content":"This method overload defines a method with <xref:System.Reflection.CallingConventions?displayProperty=fullName>. If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.","pos":[0,376],"nodes":[{"content":"This method overload defines a method with <ph id=\"ph1\">&lt;xref:System.Reflection.CallingConventions?displayProperty=fullName&gt;</ph>.","pos":[0,112],"source":"This method overload defines a method with <xref:System.Reflection.CallingConventions?displayProperty=fullName>."},{"content":"If you need to define a method without a signature, with a different calling convention, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29&gt;</ph> method overload.","pos":[113,376],"source":" If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload."}]}]}],"pos":[83096,83946],"yaml":true,"extradata":"MT"},{"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,72],"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the method.","pos":[0,23]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[24,72],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[85883,85956],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[86043,86073],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> representing the newly defined method.","source":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method."}],"pos":[86153,86252],"yaml":true},{"content":"The length of <code>name</code> is zero.  \n  \n -or-  \n  \n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,176],"content":"The type of the parent of this method is an interface, and this method is not virtual (<ph id=\"ph1\">`Overridable`</ph> in Visual Basic).","source":"The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic)."}],"pos":[86421,86604],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[86706,86735],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[86845,87213],"yaml":true},{"content":"Adds a new method to the type, with the specified name, method attributes, and calling convention.","nodes":[{"pos":[0,98],"content":"Adds a new method to the type, with the specified name, method attributes, and calling convention.","nodes":[{"content":"Adds a new method to the type, with the specified name, method attributes, and calling convention.","pos":[0,98]}]}],"pos":[88784,88883],"yaml":true},{"content":"Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.","nodes":[{"pos":[0,462],"content":"Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.","nodes":[{"content":"Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.","pos":[0,462],"nodes":[{"content":"Use this method overload when you do not know the method signature at the time you define the method.","pos":[0,101]},{"content":"For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type.","pos":[102,297]},{"content":"The parameters and return type of the method can be set later using the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName&gt;</ph> method.","pos":[298,462],"source":" The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method."}]}]}],"pos":[88894,89357],"yaml":true,"extradata":"MT"},{"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,72],"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the method.","pos":[0,23]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[24,72],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[89631,89704],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[89791,89821],"yaml":true},{"content":"The calling convention of the method.","nodes":[{"pos":[0,37],"content":"The calling convention of the method.","nodes":[{"content":"The calling convention of the method.","pos":[0,37]}]}],"pos":[89917,89955],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> representing the newly defined method.","source":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method."}],"pos":[90035,90134],"yaml":true},{"content":"The length of <code>name</code> is zero.  \n  \n -or-  \n  \n The type of the parent of this method is an interface and this method is not virtual (`Overridable` in Visual Basic).","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,175],"content":"The type of the parent of this method is an interface and this method is not virtual (<ph id=\"ph1\">`Overridable`</ph> in Visual Basic).","source":"The type of the parent of this method is an interface and this method is not virtual (`Overridable` in Visual Basic)."}],"pos":[90303,90485],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[90587,90616],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[90726,91094],"yaml":true},{"content":"Adds a new method to the type, with the specified name, method attributes, and method signature.","nodes":[{"pos":[0,96],"content":"Adds a new method to the type, with the specified name, method attributes, and method signature.","nodes":[{"content":"Adds a new method to the type, with the specified name, method attributes, and method signature.","pos":[0,96]}]}],"pos":[92614,92711],"yaml":true},{"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,72],"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the method.","pos":[0,23]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[24,72],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[93723,93796],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[93883,93913],"yaml":true},{"content":"The return type of the method.","nodes":[{"pos":[0,30],"content":"The return type of the method.","nodes":[{"content":"The return type of the method.","pos":[0,30]}]}],"pos":[93977,94008],"yaml":true},{"content":"The types of the parameters of the method.","nodes":[{"pos":[0,42],"content":"The types of the parameters of the method.","nodes":[{"content":"The types of the parameters of the method.","pos":[0,42]}]}],"pos":[94078,94121],"yaml":true},{"content":"The defined method.","nodes":[{"pos":[0,19],"content":"The defined method.","nodes":[{"content":"The defined method.","pos":[0,19]}]}],"pos":[94201,94221],"yaml":true},{"content":"The length of <code>name</code> is zero.  \n  \n -or-  \n  \n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,176],"content":"The type of the parent of this method is an interface, and this method is not virtual (<ph id=\"ph1\">`Overridable`</ph> in Visual Basic).","source":"The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic)."}],"pos":[94390,94573],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[94675,94704],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[94814,95182],"yaml":true},{"content":"Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.","nodes":[{"pos":[0,116],"content":"Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.","nodes":[{"content":"Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.","pos":[0,116]}]}],"pos":[96873,96990],"yaml":true},{"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,72],"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the method.","pos":[0,23]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[24,72],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[98058,98131],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[98218,98248],"yaml":true},{"content":"The calling convention of the method.","nodes":[{"pos":[0,37],"content":"The calling convention of the method.","nodes":[{"content":"The calling convention of the method.","pos":[0,37]}]}],"pos":[98344,98382],"yaml":true},{"content":"The return type of the method.","nodes":[{"pos":[0,30],"content":"The return type of the method.","nodes":[{"content":"The return type of the method.","pos":[0,30]}]}],"pos":[98446,98477],"yaml":true},{"content":"The types of the parameters of the method.","nodes":[{"pos":[0,42],"content":"The types of the parameters of the method.","nodes":[{"content":"The types of the parameters of the method.","pos":[0,42]}]}],"pos":[98547,98590],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method.","nodes":[{"pos":[0,98],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> representing the newly defined method.","source":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method."}],"pos":[98670,98769],"yaml":true},{"content":"The length of <code>name</code> is zero.  \n  \n -or-  \n  \n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,176],"content":"The type of the parent of this method is an interface, and this method is not virtual (<ph id=\"ph1\">`Overridable`</ph> in Visual Basic).","source":"The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic)."}],"pos":[98938,99121],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[99223,99252],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[99362,99730],"yaml":true},{"content":"Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.","nodes":[{"pos":[0,134],"content":"Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.","nodes":[{"content":"Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.","pos":[0,134]}]}],"pos":[101709,101844],"yaml":true},{"content":"Use this overload if you need to specify custom modifiers. If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method to define the parameter and return types with custom modifiers.  \n  \n> [!NOTE]\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,741],"content":"Use this overload if you need to specify custom modifiers. If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method to define the parameter and return types with custom modifiers.","nodes":[{"content":"Use this overload if you need to specify custom modifiers. If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method to define the parameter and return types with custom modifiers.","pos":[0,741],"nodes":[{"content":"Use this overload if you need to specify custom modifiers.","pos":[0,58]},{"content":"If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29&gt;</ph> method overloads to define the method and then use the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName&gt;</ph> method to define the parameter and return types with custom modifiers.","pos":[59,741],"source":" If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method to define the parameter and return types with custom modifiers."}]}]},{"pos":[749,1148],"content":"[!NOTE]\n For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,397],"nodes":[{"content":"For more information on custom modifiers, see the ECMA Partition II Metadata documentation.","pos":[1,92]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[93,389],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[101855,103009],"yaml":true,"extradata":"MT"},{"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,72],"content":"The name of the method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the method.","pos":[0,23]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[24,72],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[103501,103574],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[103661,103691],"yaml":true},{"content":"The calling convention of the method.","nodes":[{"pos":[0,37],"content":"The calling convention of the method.","nodes":[{"content":"The calling convention of the method.","pos":[0,37]}]}],"pos":[103787,103825],"yaml":true},{"content":"The return type of the method.","nodes":[{"pos":[0,30],"content":"The return type of the method.","nodes":[{"content":"The return type of the method.","pos":[0,30]}]}],"pos":[103889,103920],"yaml":true},{"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,235],"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the method.","pos":[0,166],"source":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method."},{"content":"If the return type has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[167,235],"source":" If the return type has no required custom modifiers, specify `null`."}]}],"pos":[104009,104245],"yaml":true},{"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,235],"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the method.","pos":[0,166],"source":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method."},{"content":"If the return type has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[167,235],"source":" If the return type has no optional custom modifiers, specify `null`."}]}],"pos":[104334,104570],"yaml":true},{"content":"The types of the parameters of the method.","nodes":[{"pos":[0,42],"content":"The types of the parameters of the method.","nodes":[{"content":"The types of the parameters of the method.","pos":[0,42]}]}],"pos":[104640,104683],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[104777,105179],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[105273,105675],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object representing the newly added method.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> object representing the newly added method.","source":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object representing the newly added method."}],"pos":[105755,105859],"yaml":true},{"content":"The length of <code>name</code> is zero.  \n  \n -or-  \n  \n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).  \n  \n -or-  \n  \n The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."},{"pos":[47,51],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[58,176],"content":"The type of the parent of this method is an interface, and this method is not virtual (<ph id=\"ph1\">`Overridable`</ph> in Visual Basic).","source":"The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic)."},{"pos":[183,187],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[194,364],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypeRequiredCustomModifiers</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">parameterTypeOptionalCustomModifiers</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not equal the size of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">parameterTypes</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>."}],"pos":[106028,106403],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[106505,106534],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[106644,107012],"yaml":true},{"content":"Specifies a given method body that implements a given method declaration, potentially with a different name.","nodes":[{"pos":[0,108],"content":"Specifies a given method body that implements a given method declaration, potentially with a different name.","nodes":[{"content":"Specifies a given method body that implements a given method declaration, potentially with a different name.","pos":[0,108]}]}],"pos":[108481,108590],"yaml":true},{"content":"Do not use this method to emit method overrides or interface implementations. To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.  \n  \n The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names. For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.  \n  \n `DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens. One token points to an implementation, and the other token points to a declaration that the body implements. The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic). The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type. If the declaration is on an interface only, the slot defined for the interface is altered. If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced. The overridden method cannot be the actual method that is declared. If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.  \n  \n> [!NOTE]\n>  For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n> [!IMPORTANT]\n>  After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed. For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method. If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.","nodes":[{"pos":[0,294],"content":"Do not use this method to emit method overrides or interface implementations. To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.","nodes":[{"content":"Do not use this method to emit method overrides or interface implementations. To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.","pos":[0,294],"nodes":[{"content":"Do not use this method to emit method overrides or interface implementations.","pos":[0,77]},{"content":"To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.","pos":[78,294]}]}]},{"pos":[301,631],"content":"The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names. For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.","nodes":[{"content":"The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names. For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.","pos":[0,330],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A&gt;</ph> method is used when a method body and a method declaration have different names.","pos":[0,150],"source":"The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names."},{"content":"For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.","pos":[151,330]}]}]},{"pos":[638,1551],"content":"`DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens. One token points to an implementation, and the other token points to a declaration that the body implements. The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic). The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type. If the declaration is on an interface only, the slot defined for the interface is altered. If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced. The overridden method cannot be the actual method that is declared. If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.","nodes":[{"content":"<ph id=\"ph1\">`DefineMethodOverride`</ph> defines a <ph id=\"ph2\">`methodimpl`</ph>, which consists of a pair of metadata tokens.","pos":[0,91],"source":"`DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens."},{"content":"One token points to an implementation, and the other token points to a declaration that the body implements.","pos":[92,200]},{"content":"The body must be defined on the type the method impl is defined on, and the body must be virtual (<ph id=\"ph1\">`Overridable`</ph> in Visual Basic).","pos":[201,330],"source":" The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic)."},{"content":"The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type.","pos":[331,481]},{"content":"If the declaration is on an interface only, the slot defined for the interface is altered.","pos":[482,572]},{"content":"If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced.","pos":[573,729]},{"content":"The overridden method cannot be the actual method that is declared.","pos":[730,797]},{"content":"If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.","pos":[798,913]}]},{"pos":[1559,1973],"content":"[!NOTE]\n For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,412],"nodes":[{"content":"For more information about method impls, see <ph id=\"ph1\">`MethodImpl`</ph> in the ECMA Partition II Metadata documentation.","pos":[1,107],"source":" For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[108,404],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]},{"pos":[1981,2511],"content":"[!IMPORTANT]\n After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed. For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method. If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.","leadings":["","> "],"nodes":[{"content":" After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed. For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method. If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.","pos":[13,528],"nodes":[{"content":"After the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A&gt;</ph> method is called, some features of <ph id=\"ph2\">`methodInfoBody`</ph> cannot be changed.","pos":[1,147],"source":" After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed."},{"content":"For example, you cannot apply an attribute to a generic type parameter of <ph id=\"ph1\">`methodInfoBody`</ph> by using the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A&gt;</ph> method.","pos":[148,350],"source":" For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method."},{"content":"If you must use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A&gt;</ph> method, do so after all characteristics of <ph id=\"ph2\">`methodInfoBody`</ph> have been defined.","pos":[351,515],"source":" If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined."}]}]}],"pos":[108601,111125],"yaml":true,"extradata":"MT"},{"content":"The method body to be used. This should be a `MethodBuilder` object.","nodes":[{"pos":[0,68],"content":"The method body to be used. This should be a `MethodBuilder` object.","nodes":[{"content":"The method body to be used.","pos":[0,27]},{"content":"This should be a <ph id=\"ph1\">`MethodBuilder`</ph> object.","pos":[28,68],"source":" This should be a `MethodBuilder` object."}]}],"pos":[112958,113027],"yaml":true},{"content":"The method whose declaration is to be used.","nodes":[{"pos":[0,43],"content":"The method whose declaration is to be used.","nodes":[{"content":"The method whose declaration is to be used.","pos":[0,43]}]}],"pos":[113119,113163],"yaml":true},{"content":"<code>methodInfoBody</code> does not belong to this class.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;methodInfoBody&lt;/code&gt;</ph> does not belong to this class.","source":"<code>methodInfoBody</code> does not belong to this class."}],"pos":[113340,113399],"yaml":true},{"content":"<code>methodInfoBody</code> or <code>methodInfoDeclaration</code> is `null`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">&lt;code&gt;methodInfoBody&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;methodInfoDeclaration&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>methodInfoBody</code> or <code>methodInfoDeclaration</code> is `null`."}],"pos":[113501,113578],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n The declaring type of <code>methodInfoBody</code> is not the type represented by this <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,265],"content":"The declaring type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">methodInfoBody</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not the type represented by this <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"The declaring type of <code>methodInfoBody</code> is not the type represented by this <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>."}],"pos":[113688,113964],"yaml":true},{"content":"Defines a nested type, given its name, attributes, size, and the type that it extends.","nodes":[{"pos":[0,86],"content":"Defines a nested type, given its name, attributes, size, and the type that it extends.","nodes":[{"content":"Defines a nested type, given its name, attributes, size, and the type that it extends.","pos":[0,86]}]}],"pos":[115634,115721],"yaml":true},{"content":"The short name of the type. <code>name</code> cannot contain embedded null values.","nodes":[{"pos":[0,82],"content":"The short name of the type. <code>name</code> cannot contain embedded null values.","nodes":[{"content":"The short name of the type.","pos":[0,27]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded null values.","pos":[28,82],"source":"<code>name</code> cannot contain embedded null values."}]}],"pos":[116005,116088],"yaml":true},{"content":"The attributes of the type.","nodes":[{"pos":[0,27],"content":"The attributes of the type.","nodes":[{"content":"The attributes of the type.","pos":[0,27]}]}],"pos":[116167,116195],"yaml":true},{"content":"The type that the nested type extends.","nodes":[{"pos":[0,38],"content":"The type that the nested type extends.","nodes":[{"content":"The type that the nested type extends.","pos":[0,38]}]}],"pos":[116255,116294],"yaml":true},{"content":"The packing size of the type.","nodes":[{"pos":[0,29],"content":"The packing size of the type.","nodes":[{"content":"The packing size of the type.","pos":[0,29]}]}],"pos":[116379,116409],"yaml":true},{"content":"The total size of the type.","nodes":[{"pos":[0,27],"content":"The total size of the type.","nodes":[{"content":"The total size of the type.","pos":[0,27]}]}],"pos":[116472,116500],"yaml":true},{"content":"The defined nested type.","nodes":[{"pos":[0,24],"content":"The defined nested type.","nodes":[{"content":"The defined nested type.","pos":[0,24]}]}],"pos":[116578,116603],"yaml":true},{"content":"Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.","nodes":[{"pos":[0,115],"content":"Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.","nodes":[{"content":"Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.","pos":[0,115]}]}],"pos":[118217,118333],"yaml":true},{"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \n  \n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \n  \n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \n  \n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"pos":[0,163],"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.","nodes":[{"content":"This method can be used to create nested types even after the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method has been called on the enclosing type.","pos":[0,163],"source":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type."}]},{"pos":[170,353],"content":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.","nodes":[{"content":"The nested type needs to be complete before you can reflect on it using <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Type.GetNestedType%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Type.GetNestedTypes%2A&gt;</ph>.","pos":[0,183],"source":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>."}]},{"pos":[360,513],"content":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.","nodes":[{"content":"See the description of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> for the order in which nested types and nesting types should be completed.","pos":[0,153],"source":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed."}]},{"pos":[520,741],"content":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"content":"A duplicate name is not necessarily created if <ph id=\"ph1\">`name`</ph> is identical to the name of a previously defined type or nested type.","pos":[0,123],"source":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type."},{"content":"To be duplicates, the full names must be the same, including the namespace and all nesting types.","pos":[124,221]}]}],"pos":[118344,119094],"yaml":true,"extradata":"MT"},{"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The short name of the type.","pos":[0,27]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[28,76],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[119404,119481],"yaml":true},{"content":"The attributes of the type.","nodes":[{"pos":[0,27],"content":"The attributes of the type.","nodes":[{"content":"The attributes of the type.","pos":[0,27]}]}],"pos":[119560,119588],"yaml":true},{"content":"The type that the nested type extends.","nodes":[{"pos":[0,38],"content":"The type that the nested type extends.","nodes":[{"content":"The type that the nested type extends.","pos":[0,38]}]}],"pos":[119648,119687],"yaml":true},{"content":"The interfaces that the nested type implements.","nodes":[{"pos":[0,47],"content":"The interfaces that the nested type implements.","nodes":[{"content":"The interfaces that the nested type implements.","pos":[0,47]}]}],"pos":[119753,119801],"yaml":true},{"content":"The defined nested type.","nodes":[{"pos":[0,24],"content":"The defined nested type.","nodes":[{"content":"The defined nested type.","pos":[0,24]}]}],"pos":[119879,119904],"yaml":true},{"content":"The nested attribute is not specified.  \n  \n -or-  \n  \n This type is sealed.  \n  \n -or-  \n  \n This type is an array.  \n  \n -or-  \n  \n This type is an interface, but the nested type is not an interface.  \n  \n -or-  \n  \n The length of <code>name</code> is zero or greater than 1023.  \n  \n -or-  \n  \n This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly.","nodes":[{"pos":[0,38],"content":"The nested attribute is not specified.","nodes":[{"content":"The nested attribute is not specified.","pos":[0,38]}]},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,76],"content":"This type is sealed.","nodes":[{"content":"This type is sealed.","pos":[0,20]}]},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,116],"content":"This type is an array.","nodes":[{"content":"This type is an array.","pos":[0,22]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,201],"content":"This type is an interface, but the nested type is not an interface.","nodes":[{"content":"This type is an interface, but the nested type is not an interface.","pos":[0,67]}]},{"pos":[208,212],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[219,280],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero or greater than 1023.","source":"The length of <code>name</code> is zero or greater than 1023."},{"pos":[287,291],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[298,439],"content":"This operation would create a type with a duplicate <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"&gt;&lt;/xref&gt;</ph> in the current assembly.","source":"This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly."}],"pos":[120077,120541],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n An element of the <code>interfaces</code> array is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,104],"content":"An element of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">interfaces</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"An element of the <code>interfaces</code> array is `null`."}],"pos":[120643,120754],"yaml":true},{"content":"Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.","nodes":[{"pos":[0,108],"content":"Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.","nodes":[{"content":"Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.","pos":[0,108]}]}],"pos":[122355,122464],"yaml":true},{"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \n  \n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \n  \n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \n  \n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"pos":[0,163],"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.","nodes":[{"content":"This method can be used to create nested types even after the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method has been called on the enclosing type.","pos":[0,163],"source":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type."}]},{"pos":[170,353],"content":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.","nodes":[{"content":"The nested type needs to be complete before you can reflect on it using <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Type.GetNestedType%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Type.GetNestedTypes%2A&gt;</ph>.","pos":[0,183],"source":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>."}]},{"pos":[360,513],"content":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.","nodes":[{"content":"See the description of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> for the order in which nested types and nesting types should be completed.","pos":[0,153],"source":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed."}]},{"pos":[520,741],"content":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"content":"A duplicate name is not necessarily created if <ph id=\"ph1\">`name`</ph> is identical to the name of a previously defined type or nested type.","pos":[0,123],"source":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type."},{"content":"To be duplicates, the full names must be the same, including the namespace and all nesting types.","pos":[124,221]}]}],"pos":[122475,123225],"yaml":true,"extradata":"MT"},{"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The short name of the type.","pos":[0,27]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[28,76],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[123464,123541],"yaml":true},{"content":"The attributes of the type.","nodes":[{"pos":[0,27],"content":"The attributes of the type.","nodes":[{"content":"The attributes of the type.","pos":[0,27]}]}],"pos":[123620,123648],"yaml":true},{"content":"The type that the nested type extends.","nodes":[{"pos":[0,38],"content":"The type that the nested type extends.","nodes":[{"content":"The type that the nested type extends.","pos":[0,38]}]}],"pos":[123708,123747],"yaml":true},{"content":"The total size of the type.","nodes":[{"pos":[0,27],"content":"The total size of the type.","nodes":[{"content":"The total size of the type.","pos":[0,27]}]}],"pos":[123810,123838],"yaml":true},{"content":"The defined nested type.","nodes":[{"pos":[0,24],"content":"The defined nested type.","nodes":[{"content":"The defined nested type.","pos":[0,24]}]}],"pos":[123916,123941],"yaml":true},{"content":"The nested attribute is not specified.  \n  \n -or-  \n  \n This type is sealed.  \n  \n -or-  \n  \n This type is an array.  \n  \n -or-  \n  \n This type is an interface, but the nested type is not an interface.  \n  \n -or-  \n  \n The length of <code>name</code> is zero or greater than 1023.  \n  \n -or-  \n  \n This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly.","nodes":[{"pos":[0,38],"content":"The nested attribute is not specified.","nodes":[{"content":"The nested attribute is not specified.","pos":[0,38]}]},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,76],"content":"This type is sealed.","nodes":[{"content":"This type is sealed.","pos":[0,20]}]},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,116],"content":"This type is an array.","nodes":[{"content":"This type is an array.","pos":[0,22]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,201],"content":"This type is an interface, but the nested type is not an interface.","nodes":[{"content":"This type is an interface, but the nested type is not an interface.","pos":[0,67]}]},{"pos":[208,212],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[219,280],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero or greater than 1023.","source":"The length of <code>name</code> is zero or greater than 1023."},{"pos":[287,291],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[298,439],"content":"This operation would create a type with a duplicate <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"&gt;&lt;/xref&gt;</ph> in the current assembly.","source":"This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly."}],"pos":[124114,124578],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[124680,124709],"yaml":true},{"content":"Defines a nested type, given its name, attributes, the type that it extends, and the packing size.","nodes":[{"pos":[0,98],"content":"Defines a nested type, given its name, attributes, the type that it extends, and the packing size.","nodes":[{"content":"Defines a nested type, given its name, attributes, the type that it extends, and the packing size.","pos":[0,98]}]}],"pos":[126319,126418],"yaml":true},{"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \n  \n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \n  \n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \n  \n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"pos":[0,163],"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.","nodes":[{"content":"This method can be used to create nested types even after the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method has been called on the enclosing type.","pos":[0,163],"source":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type."}]},{"pos":[170,353],"content":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.","nodes":[{"content":"The nested type needs to be complete before you can reflect on it using <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Type.GetNestedType%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Type.GetNestedTypes%2A&gt;</ph>.","pos":[0,183],"source":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>."}]},{"pos":[360,513],"content":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.","nodes":[{"content":"See the description of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> for the order in which nested types and nesting types should be completed.","pos":[0,153],"source":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed."}]},{"pos":[520,741],"content":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"content":"A duplicate name is not necessarily created if <ph id=\"ph1\">`name`</ph> is identical to the name of a previously defined type or nested type.","pos":[0,123],"source":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type."},{"content":"To be duplicates, the full names must be the same, including the namespace and all nesting types.","pos":[124,221]}]}],"pos":[126429,127179],"yaml":true,"extradata":"MT"},{"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The short name of the type.","pos":[0,27]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[28,76],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[127449,127526],"yaml":true},{"content":"The attributes of the type.","nodes":[{"pos":[0,27],"content":"The attributes of the type.","nodes":[{"content":"The attributes of the type.","pos":[0,27]}]}],"pos":[127605,127633],"yaml":true},{"content":"The type that the nested type extends.","nodes":[{"pos":[0,38],"content":"The type that the nested type extends.","nodes":[{"content":"The type that the nested type extends.","pos":[0,38]}]}],"pos":[127693,127732],"yaml":true},{"content":"The packing size of the type.","nodes":[{"pos":[0,29],"content":"The packing size of the type.","nodes":[{"content":"The packing size of the type.","pos":[0,29]}]}],"pos":[127817,127847],"yaml":true},{"content":"The defined nested type.","nodes":[{"pos":[0,24],"content":"The defined nested type.","nodes":[{"content":"The defined nested type.","pos":[0,24]}]}],"pos":[127925,127950],"yaml":true},{"content":"The nested attribute is not specified.  \n  \n -or-  \n  \n This type is sealed.  \n  \n -or-  \n  \n This type is an array.  \n  \n -or-  \n  \n This type is an interface, but the nested type is not an interface.  \n  \n -or-  \n  \n The length of <code>name</code> is zero or greater than 1023.  \n  \n -or-  \n  \n This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly.","nodes":[{"pos":[0,38],"content":"The nested attribute is not specified.","nodes":[{"content":"The nested attribute is not specified.","pos":[0,38]}]},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,76],"content":"This type is sealed.","nodes":[{"content":"This type is sealed.","pos":[0,20]}]},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,116],"content":"This type is an array.","nodes":[{"content":"This type is an array.","pos":[0,22]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,201],"content":"This type is an interface, but the nested type is not an interface.","nodes":[{"content":"This type is an interface, but the nested type is not an interface.","pos":[0,67]}]},{"pos":[208,212],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[219,280],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero or greater than 1023.","source":"The length of <code>name</code> is zero or greater than 1023."},{"pos":[287,291],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[298,439],"content":"This operation would create a type with a duplicate <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"&gt;&lt;/xref&gt;</ph> in the current assembly.","source":"This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly."}],"pos":[128123,128587],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[128689,128718],"yaml":true},{"content":"Defines a nested type, given its name and attributes.","nodes":[{"pos":[0,53],"content":"Defines a nested type, given its name and attributes.","nodes":[{"content":"Defines a nested type, given its name and attributes.","pos":[0,53]}]}],"pos":[130130,130184],"yaml":true},{"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \n  \n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \n  \n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \n  \n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"pos":[0,163],"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.","nodes":[{"content":"This method can be used to create nested types even after the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method has been called on the enclosing type.","pos":[0,163],"source":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type."}]},{"pos":[170,353],"content":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.","nodes":[{"content":"The nested type needs to be complete before you can reflect on it using <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Type.GetNestedType%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Type.GetNestedTypes%2A&gt;</ph>.","pos":[0,183],"source":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>."}]},{"pos":[360,513],"content":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.","nodes":[{"content":"See the description of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> for the order in which nested types and nesting types should be completed.","pos":[0,153],"source":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed."}]},{"pos":[520,741],"content":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"content":"A duplicate name is not necessarily created if <ph id=\"ph1\">`name`</ph> is identical to the name of a previously defined type or nested type.","pos":[0,123],"source":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type."},{"content":"To be duplicates, the full names must be the same, including the namespace and all nesting types.","pos":[124,221]}]}],"pos":[130195,130945],"yaml":true,"extradata":"MT"},{"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The short name of the type.","pos":[0,27]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[28,76],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[131157,131234],"yaml":true},{"content":"The attributes of the type.","nodes":[{"pos":[0,27],"content":"The attributes of the type.","nodes":[{"content":"The attributes of the type.","pos":[0,27]}]}],"pos":[131313,131341],"yaml":true},{"content":"The defined nested type.","nodes":[{"pos":[0,24],"content":"The defined nested type.","nodes":[{"content":"The defined nested type.","pos":[0,24]}]}],"pos":[131419,131444],"yaml":true},{"content":"The nested attribute is not specified.  \n  \n -or-  \n  \n This type is sealed.  \n  \n -or-  \n  \n This type is an array.  \n  \n -or-  \n  \n This type is an interface, but the nested type is not an interface.  \n  \n -or-  \n  \n The length of <code>name</code> is zero or greater than 1023.  \n  \n -or-  \n  \n This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly.","nodes":[{"pos":[0,38],"content":"The nested attribute is not specified.","nodes":[{"content":"The nested attribute is not specified.","pos":[0,38]}]},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,76],"content":"This type is sealed.","nodes":[{"content":"This type is sealed.","pos":[0,20]}]},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,116],"content":"This type is an array.","nodes":[{"content":"This type is an array.","pos":[0,22]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,201],"content":"This type is an interface, but the nested type is not an interface.","nodes":[{"content":"This type is an interface, but the nested type is not an interface.","pos":[0,67]}]},{"pos":[208,212],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[219,280],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero or greater than 1023.","source":"The length of <code>name</code> is zero or greater than 1023."},{"pos":[287,291],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[298,439],"content":"This operation would create a type with a duplicate <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"&gt;&lt;/xref&gt;</ph> in the current assembly.","source":"This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly."}],"pos":[131617,132081],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[132183,132212],"yaml":true},{"content":"Defines a nested type, given its name.","nodes":[{"pos":[0,38],"content":"Defines a nested type, given its name.","nodes":[{"content":"Defines a nested type, given its name.","pos":[0,38]}]}],"pos":[133477,133516],"yaml":true},{"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \n  \n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \n  \n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \n  \n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"pos":[0,163],"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.","nodes":[{"content":"This method can be used to create nested types even after the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method has been called on the enclosing type.","pos":[0,163],"source":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type."}]},{"pos":[170,353],"content":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.","nodes":[{"content":"The nested type needs to be complete before you can reflect on it using <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Type.GetNestedType%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Type.GetNestedTypes%2A&gt;</ph>.","pos":[0,183],"source":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>."}]},{"pos":[360,513],"content":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.","nodes":[{"content":"See the description of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> for the order in which nested types and nesting types should be completed.","pos":[0,153],"source":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed."}]},{"pos":[520,741],"content":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"content":"A duplicate name is not necessarily created if <ph id=\"ph1\">`name`</ph> is identical to the name of a previously defined type or nested type.","pos":[0,123],"source":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type."},{"content":"To be duplicates, the full names must be the same, including the namespace and all nesting types.","pos":[124,221]}]}],"pos":[133527,134277],"yaml":true,"extradata":"MT"},{"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The short name of the type.","pos":[0,27]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[28,76],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[134450,134527],"yaml":true},{"content":"The defined nested type.","nodes":[{"pos":[0,24],"content":"The defined nested type.","nodes":[{"content":"The defined nested type.","pos":[0,24]}]}],"pos":[134605,134630],"yaml":true},{"content":"Length of <code>name</code> is zero or greater than 1023.  \n  \n -or-  \n  \n This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly.","nodes":[{"pos":[0,57],"content":"Length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero or greater than 1023.","source":"Length of <code>name</code> is zero or greater than 1023."},{"pos":[64,68],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[75,216],"content":"This operation would create a type with a duplicate <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"&gt;&lt;/xref&gt;</ph> in the current assembly.","source":"This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly."}],"pos":[134803,135028],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[135130,135159],"yaml":true},{"content":"Defines a nested type, given its name, attributes, and the type that it extends.","nodes":[{"pos":[0,80],"content":"Defines a nested type, given its name, attributes, and the type that it extends.","nodes":[{"content":"Defines a nested type, given its name, attributes, and the type that it extends.","pos":[0,80]}]}],"pos":[136625,136706],"yaml":true},{"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \n  \n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \n  \n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \n  \n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"pos":[0,163],"content":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.","nodes":[{"content":"This method can be used to create nested types even after the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method has been called on the enclosing type.","pos":[0,163],"source":"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type."}]},{"pos":[170,353],"content":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.","nodes":[{"content":"The nested type needs to be complete before you can reflect on it using <ph id=\"ph1\">&lt;xref:System.Type.GetMembers%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Type.GetNestedType%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Type.GetNestedTypes%2A&gt;</ph>.","pos":[0,183],"source":"The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>."}]},{"pos":[360,513],"content":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.","nodes":[{"content":"See the description of <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> for the order in which nested types and nesting types should be completed.","pos":[0,153],"source":"See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed."}]},{"pos":[520,741],"content":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.","nodes":[{"content":"A duplicate name is not necessarily created if <ph id=\"ph1\">`name`</ph> is identical to the name of a previously defined type or nested type.","pos":[0,123],"source":"A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type."},{"content":"To be duplicates, the full names must be the same, including the namespace and all nesting types.","pos":[124,221]}]}],"pos":[136717,137467],"yaml":true,"extradata":"MT"},{"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,76],"content":"The short name of the type. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The short name of the type.","pos":[0,27]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[28,76],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[137692,137769],"yaml":true},{"content":"The attributes of the type.","nodes":[{"pos":[0,27],"content":"The attributes of the type.","nodes":[{"content":"The attributes of the type.","pos":[0,27]}]}],"pos":[137848,137876],"yaml":true},{"content":"The type that the nested type extends.","nodes":[{"pos":[0,38],"content":"The type that the nested type extends.","nodes":[{"content":"The type that the nested type extends.","pos":[0,38]}]}],"pos":[137936,137975],"yaml":true},{"content":"The defined nested type.","nodes":[{"pos":[0,24],"content":"The defined nested type.","nodes":[{"content":"The defined nested type.","pos":[0,24]}]}],"pos":[138053,138078],"yaml":true},{"content":"The nested attribute is not specified.  \n  \n -or-  \n  \n This type is sealed.  \n  \n -or-  \n  \n This type is an array.  \n  \n -or-  \n  \n This type is an interface, but the nested type is not an interface.  \n  \n -or-  \n  \n The length of <code>name</code> is zero or greater than 1023.  \n  \n -or-  \n  \n This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly.","nodes":[{"pos":[0,38],"content":"The nested attribute is not specified.","nodes":[{"content":"The nested attribute is not specified.","pos":[0,38]}]},{"pos":[45,49],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[56,76],"content":"This type is sealed.","nodes":[{"content":"This type is sealed.","pos":[0,20]}]},{"pos":[83,87],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[94,116],"content":"This type is an array.","nodes":[{"content":"This type is an array.","pos":[0,22]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,201],"content":"This type is an interface, but the nested type is not an interface.","nodes":[{"content":"This type is an interface, but the nested type is not an interface.","pos":[0,67]}]},{"pos":[208,212],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[219,280],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero or greater than 1023.","source":"The length of <code>name</code> is zero or greater than 1023."},{"pos":[287,291],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[298,439],"content":"This operation would create a type with a duplicate <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"&gt;&lt;/xref&gt;</ph> in the current assembly.","source":"This operation would create a type with a duplicate <xref href=\"System.Reflection.Emit.TypeBuilder.FullName\"></xref> in the current assembly."}],"pos":[138251,138715],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[138817,138846],"yaml":true},{"content":"Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags.","nodes":[{"pos":[0,261],"content":"Defines a <ph id=\"ph1\">`PInvoke`</ph> method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <ph id=\"ph2\">`PInvoke`</ph> flags.","source":"Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags."}],"pos":[140966,141228],"yaml":true},{"content":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.","nodes":[{"pos":[0,384],"content":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.","nodes":[{"content":"Some DLL import attributes (see the description of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>) cannot be specified as arguments to this method.","pos":[0,157],"source":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method."},{"content":"For example, the DLL import attribute <ph id=\"ph1\">&lt;xref:System.Reflection.MethodImplAttributes?displayProperty=fullName&gt;</ph> must be added after the <ph id=\"ph2\">`PInvoke`</ph> method is created, if the method returns a value.","pos":[158,350],"source":" For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value."},{"content":"The example shows how to do this.","pos":[351,384]}]}],"pos":[141239,141624],"yaml":true,"extradata":"MT"},{"content":"The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,82],"content":"The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the <ph id=\"ph1\">`PInvoke`</ph> method.","pos":[0,33],"source":"The name of the `PInvoke` method."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[34,82],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[144013,144096],"yaml":true},{"content":"The name of the DLL in which the `PInvoke` method is defined.","nodes":[{"pos":[0,61],"content":"The name of the DLL in which the <ph id=\"ph1\">`PInvoke`</ph> method is defined.","source":"The name of the DLL in which the `PInvoke` method is defined."}],"pos":[144159,144221],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[144308,144338],"yaml":true},{"content":"The method's calling convention.","nodes":[{"pos":[0,32],"content":"The method's calling convention.","nodes":[{"content":"The method's calling convention.","pos":[0,32]}]}],"pos":[144434,144467],"yaml":true},{"content":"The method's return type.","nodes":[{"pos":[0,25],"content":"The method's return type.","nodes":[{"content":"The method's return type.","pos":[0,25]}]}],"pos":[144531,144557],"yaml":true},{"content":"The types of the method's parameters.","nodes":[{"pos":[0,37],"content":"The types of the method's parameters.","nodes":[{"content":"The types of the method's parameters.","pos":[0,37]}]}],"pos":[144627,144665],"yaml":true},{"content":"The native calling convention.","nodes":[{"pos":[0,30],"content":"The native calling convention.","nodes":[{"content":"The native calling convention.","pos":[0,30]}]}],"pos":[144770,144801],"yaml":true},{"content":"The method's native character set.","nodes":[{"pos":[0,34],"content":"The method's native character set.","nodes":[{"content":"The method's native character set.","pos":[0,34]}]}],"pos":[144895,144930],"yaml":true},{"content":"The defined `PInvoke` method.","nodes":[{"pos":[0,29],"content":"The defined <ph id=\"ph1\">`PInvoke`</ph> method.","source":"The defined `PInvoke` method."}],"pos":[145010,145040],"yaml":true},{"content":"The method is not static.  \n  \n -or-  \n  \n The parent type is an interface.  \n  \n -or-  \n  \n The method is abstract.  \n  \n -or-  \n  \n The method was previously defined.  \n  \n -or-  \n  \n The length of <code>name</code> or <code>dllName</code> is zero.","nodes":[{"pos":[0,25],"content":"The method is not static.","nodes":[{"content":"The method is not static.","pos":[0,25]}]},{"pos":[32,36],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[43,75],"content":"The parent type is an interface.","nodes":[{"content":"The parent type is an interface.","pos":[0,32]}]},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,116],"content":"The method is abstract.","nodes":[{"content":"The method is abstract.","pos":[0,23]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,168],"content":"The method was previously defined.","nodes":[{"content":"The method was previously defined.","pos":[0,34]}]},{"pos":[175,179],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[186,250],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">dllName</ph><ept id=\"p2\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> or <code>dllName</code> is zero."}],"pos":[145216,145485],"yaml":true},{"content":"<code>name</code> or <code>dllName</code> is `null`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;dllName&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>name</code> or <code>dllName</code> is `null`."}],"pos":[145587,145640],"yaml":true},{"content":"The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,121],"content":"The containing type has been previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[145750,145872],"yaml":true},{"content":"Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags.","nodes":[{"pos":[0,290],"content":"Defines a <ph id=\"ph1\">`PInvoke`</ph> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the <ph id=\"ph2\">`PInvoke`</ph> flags.","source":"Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags."}],"pos":[147922,148213],"yaml":true},{"content":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.","nodes":[{"pos":[0,384],"content":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.","nodes":[{"content":"Some DLL import attributes (see the description of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>) cannot be specified as arguments to this method.","pos":[0,157],"source":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method."},{"content":"For example, the DLL import attribute <ph id=\"ph1\">&lt;xref:System.Reflection.MethodImplAttributes?displayProperty=fullName&gt;</ph> must be added after the <ph id=\"ph2\">`PInvoke`</ph> method is created, if the method returns a value.","pos":[158,350],"source":" For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value."},{"content":"The example shows how to do this.","pos":[351,384]}]}],"pos":[148224,148609],"yaml":true,"extradata":"MT"},{"content":"The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,82],"content":"The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the <ph id=\"ph1\">`PInvoke`</ph> method.","pos":[0,33],"source":"The name of the `PInvoke` method."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[34,82],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[151021,151104],"yaml":true},{"content":"The name of the DLL in which the `PInvoke` method is defined.","nodes":[{"pos":[0,61],"content":"The name of the DLL in which the <ph id=\"ph1\">`PInvoke`</ph> method is defined.","source":"The name of the DLL in which the `PInvoke` method is defined."}],"pos":[151167,151229],"yaml":true},{"content":"The name of the entry point in the DLL.","nodes":[{"pos":[0,39],"content":"The name of the entry point in the DLL.","nodes":[{"content":"The name of the entry point in the DLL.","pos":[0,39]}]}],"pos":[151294,151334],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[151421,151451],"yaml":true},{"content":"The method's calling convention.","nodes":[{"pos":[0,32],"content":"The method's calling convention.","nodes":[{"content":"The method's calling convention.","pos":[0,32]}]}],"pos":[151547,151580],"yaml":true},{"content":"The method's return type.","nodes":[{"pos":[0,25],"content":"The method's return type.","nodes":[{"content":"The method's return type.","pos":[0,25]}]}],"pos":[151644,151670],"yaml":true},{"content":"The types of the method's parameters.","nodes":[{"pos":[0,37],"content":"The types of the method's parameters.","nodes":[{"content":"The types of the method's parameters.","pos":[0,37]}]}],"pos":[151740,151778],"yaml":true},{"content":"The native calling convention.","nodes":[{"pos":[0,30],"content":"The native calling convention.","nodes":[{"content":"The native calling convention.","pos":[0,30]}]}],"pos":[151883,151914],"yaml":true},{"content":"The method's native character set.","nodes":[{"pos":[0,34],"content":"The method's native character set.","nodes":[{"content":"The method's native character set.","pos":[0,34]}]}],"pos":[152008,152043],"yaml":true},{"content":"The defined `PInvoke` method.","nodes":[{"pos":[0,29],"content":"The defined <ph id=\"ph1\">`PInvoke`</ph> method.","source":"The defined `PInvoke` method."}],"pos":[152123,152153],"yaml":true},{"content":"The method is not static.  \n  \n -or-  \n  \n The parent type is an interface.  \n  \n -or-  \n  \n The method is abstract.  \n  \n -or-  \n  \n The method was previously defined.  \n  \n -or-  \n  \n The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero.","nodes":[{"pos":[0,25],"content":"The method is not static.","nodes":[{"content":"The method is not static.","pos":[0,25]}]},{"pos":[32,36],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[43,75],"content":"The parent type is an interface.","nodes":[{"content":"The parent type is an interface.","pos":[0,32]}]},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,116],"content":"The method is abstract.","nodes":[{"content":"The method is abstract.","pos":[0,23]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,168],"content":"The method was previously defined.","nodes":[{"content":"The method was previously defined.","pos":[0,34]}]},{"pos":[175,179],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[186,275],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">dllName</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">entryName</ph><ept id=\"p3\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero."}],"pos":[152329,152623],"yaml":true},{"content":"<code>name</code>, <code>dllName</code>, or <code>entryName</code> is `null`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;dllName&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;entryName&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>name</code>, <code>dllName</code>, or <code>entryName</code> is `null`."}],"pos":[152725,152803],"yaml":true},{"content":"The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,121],"content":"The containing type has been previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[152913,153035],"yaml":true},{"content":"Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the `PInvoke` flags, and custom modifiers for the parameters and return type.","nodes":[{"pos":[0,343],"content":"Defines a <ph id=\"ph1\">`PInvoke`</ph> method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the <ph id=\"ph2\">`PInvoke`</ph> flags, and custom modifiers for the parameters and return type.","source":"Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the `PInvoke` flags, and custom modifiers for the parameters and return type."}],"pos":[155373,155717],"yaml":true},{"content":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.  \n  \n> [!NOTE]\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,384],"content":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.","nodes":[{"content":"Some DLL import attributes (see the description of <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph>) cannot be specified as arguments to this method.","pos":[0,157],"source":"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method."},{"content":"For example, the DLL import attribute <ph id=\"ph1\">&lt;xref:System.Reflection.MethodImplAttributes?displayProperty=fullName&gt;</ph> must be added after the <ph id=\"ph2\">`PInvoke`</ph> method is created, if the method returns a value.","pos":[158,350],"source":" For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value."},{"content":"The example shows how to do this.","pos":[351,384]}]},{"pos":[392,791],"content":"[!NOTE]\n For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,397],"nodes":[{"content":"For more information on custom modifiers, see the ECMA Partition II Metadata documentation.","pos":[1,92]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[93,389],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[155728,156525],"yaml":true,"extradata":"MT"},{"content":"The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,82],"content":"The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the <ph id=\"ph1\">`PInvoke`</ph> method.","pos":[0,33],"source":"The name of the `PInvoke` method."},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[34,82],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[159355,159438],"yaml":true},{"content":"The name of the DLL in which the `PInvoke` method is defined.","nodes":[{"pos":[0,61],"content":"The name of the DLL in which the <ph id=\"ph1\">`PInvoke`</ph> method is defined.","source":"The name of the DLL in which the `PInvoke` method is defined."}],"pos":[159501,159563],"yaml":true},{"content":"The name of the entry point in the DLL.","nodes":[{"pos":[0,39],"content":"The name of the entry point in the DLL.","nodes":[{"content":"The name of the entry point in the DLL.","pos":[0,39]}]}],"pos":[159628,159668],"yaml":true},{"content":"The attributes of the method.","nodes":[{"pos":[0,29],"content":"The attributes of the method.","nodes":[{"content":"The attributes of the method.","pos":[0,29]}]}],"pos":[159755,159785],"yaml":true},{"content":"The method's calling convention.","nodes":[{"pos":[0,32],"content":"The method's calling convention.","nodes":[{"content":"The method's calling convention.","pos":[0,32]}]}],"pos":[159881,159914],"yaml":true},{"content":"The method's return type.","nodes":[{"pos":[0,25],"content":"The method's return type.","nodes":[{"content":"The method's return type.","pos":[0,25]}]}],"pos":[159978,160004],"yaml":true},{"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,235],"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the method.","pos":[0,166],"source":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method."},{"content":"If the return type has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[167,235],"source":" If the return type has no required custom modifiers, specify `null`."}]}],"pos":[160093,160329],"yaml":true},{"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,235],"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the method.","pos":[0,166],"source":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method."},{"content":"If the return type has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[167,235],"source":" If the return type has no optional custom modifiers, specify `null`."}]}],"pos":[160418,160654],"yaml":true},{"content":"The types of the method's parameters.","nodes":[{"pos":[0,37],"content":"The types of the method's parameters.","nodes":[{"content":"The types of the method's parameters.","pos":[0,37]}]}],"pos":[160724,160762],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[160856,161258],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[161352,161754],"yaml":true},{"content":"The native calling convention.","nodes":[{"pos":[0,30],"content":"The native calling convention.","nodes":[{"content":"The native calling convention.","pos":[0,30]}]}],"pos":[161859,161890],"yaml":true},{"content":"The method's native character set.","nodes":[{"pos":[0,34],"content":"The method's native character set.","nodes":[{"content":"The method's native character set.","pos":[0,34]}]}],"pos":[161984,162019],"yaml":true},{"content":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the defined `PInvoke` method.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.MethodBuilder\"&gt;&lt;/xref&gt;</ph> representing the defined <ph id=\"ph2\">`PInvoke`</ph> method.","source":"A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the defined `PInvoke` method."}],"pos":[162099,162202],"yaml":true},{"content":"The method is not static.  \n  \n -or-  \n  \n The parent type is an interface.  \n  \n -or-  \n  \n The method is abstract.  \n  \n -or-  \n  \n The method was previously defined.  \n  \n -or-  \n  \n The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero.  \n  \n -or-  \n  \n The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.","nodes":[{"pos":[0,25],"content":"The method is not static.","nodes":[{"content":"The method is not static.","pos":[0,25]}]},{"pos":[32,36],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[43,75],"content":"The parent type is an interface.","nodes":[{"content":"The parent type is an interface.","pos":[0,32]}]},{"pos":[82,86],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[93,116],"content":"The method is abstract.","nodes":[{"content":"The method is abstract.","pos":[0,23]}]},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,168],"content":"The method was previously defined.","nodes":[{"content":"The method was previously defined.","pos":[0,34]}]},{"pos":[175,179],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[186,275],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">dllName</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">entryName</ph><ept id=\"p3\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero."},{"pos":[282,286],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[293,463],"content":"The size of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypeRequiredCustomModifiers</ph><ept id=\"p1\">&lt;/code&gt;</ept> or <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">parameterTypeOptionalCustomModifiers</ph><ept id=\"p2\">&lt;/code&gt;</ept> does not equal the size of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">parameterTypes</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>."}],"pos":[162378,162864],"yaml":true},{"content":"<code>name</code>, <code>dllName</code>, or <code>entryName</code> is `null`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;dllName&lt;/code&gt;</ph>, or <ph id=\"ph3\">&lt;code&gt;entryName&lt;/code&gt;</ph> is <ph id=\"ph4\">`null`</ph>.","source":"<code>name</code>, <code>dllName</code>, or <code>entryName</code> is `null`."}],"pos":[162966,163044],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,355],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[163154,163522],"yaml":true},{"content":"Adds a new property to the type, with the given name and property signature.","nodes":[{"pos":[0,76],"content":"Adds a new property to the type, with the given name and property signature.","nodes":[{"content":"Adds a new property to the type, with the given name and property signature.","pos":[0,76]}]}],"pos":[164930,165007],"yaml":true},{"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,74],"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the property.","pos":[0,25]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[26,74],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[166146,166221],"yaml":true},{"content":"The attributes of the property.","nodes":[{"pos":[0,31],"content":"The attributes of the property.","nodes":[{"content":"The attributes of the property.","pos":[0,31]}]}],"pos":[166310,166342],"yaml":true},{"content":"The return type of the property.","nodes":[{"pos":[0,32],"content":"The return type of the property.","nodes":[{"content":"The return type of the property.","pos":[0,32]}]}],"pos":[166406,166439],"yaml":true},{"content":"The types of the parameters of the property.","nodes":[{"pos":[0,44],"content":"The types of the parameters of the property.","nodes":[{"content":"The types of the parameters of the property.","pos":[0,44]}]}],"pos":[166509,166554],"yaml":true},{"content":"The defined property.","nodes":[{"pos":[0,21],"content":"The defined property.","nodes":[{"content":"The defined property.","pos":[0,21]}]}],"pos":[166636,166658],"yaml":true},{"content":"The length of <code>name</code> is zero.","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."}],"pos":[166829,166870],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n Any of the elements of the <code>parameterTypes</code> array is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,117],"content":"Any of the elements of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"Any of the elements of the <code>parameterTypes</code> array is `null`."}],"pos":[166972,167096],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[167206,167312],"yaml":true},{"content":"Adds a new property to the type, with the given name, attributes, calling convention, and property signature.","nodes":[{"pos":[0,109],"content":"Adds a new property to the type, with the given name, attributes, calling convention, and property signature.","nodes":[{"content":"Adds a new property to the type, with the given name, attributes, calling convention, and property signature.","pos":[0,109]}]}],"pos":[169027,169137],"yaml":true},{"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,74],"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the property.","pos":[0,25]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[26,74],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[169457,169532],"yaml":true},{"content":"The attributes of the property.","nodes":[{"pos":[0,31],"content":"The attributes of the property.","nodes":[{"content":"The attributes of the property.","pos":[0,31]}]}],"pos":[169621,169653],"yaml":true},{"content":"The calling convention of the property accessors.","nodes":[{"pos":[0,49],"content":"The calling convention of the property accessors.","nodes":[{"content":"The calling convention of the property accessors.","pos":[0,49]}]}],"pos":[169749,169799],"yaml":true},{"content":"The return type of the property.","nodes":[{"pos":[0,32],"content":"The return type of the property.","nodes":[{"content":"The return type of the property.","pos":[0,32]}]}],"pos":[169863,169896],"yaml":true},{"content":"The types of the parameters of the property.","nodes":[{"pos":[0,44],"content":"The types of the parameters of the property.","nodes":[{"content":"The types of the parameters of the property.","pos":[0,44]}]}],"pos":[169966,170011],"yaml":true},{"content":"The defined property.","nodes":[{"pos":[0,21],"content":"The defined property.","nodes":[{"content":"The defined property.","pos":[0,21]}]}],"pos":[170093,170115],"yaml":true},{"content":"The length of <code>name</code> is zero.","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."}],"pos":[170286,170327],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n Any of the elements of the <code>parameterTypes</code> array is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,117],"content":"Any of the elements of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"Any of the elements of the <code>parameterTypes</code> array is `null`."}],"pos":[170429,170553],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[170663,170769],"yaml":true},{"content":"Adds a new property to the type, with the given name, property signature, and custom modifiers.","nodes":[{"pos":[0,95],"content":"Adds a new property to the type, with the given name, property signature, and custom modifiers.","nodes":[{"content":"Adds a new property to the type, with the given name, property signature, and custom modifiers.","pos":[0,95]}]}],"pos":[172601,172697],"yaml":true},{"content":"This overload is provided for designers of managed compilers.  \n  \n> [!NOTE]\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,61],"content":"This overload is provided for designers of managed compilers.","nodes":[{"content":"This overload is provided for designers of managed compilers.","pos":[0,61]}]},{"pos":[69,468],"content":"[!NOTE]\n For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,397],"nodes":[{"content":"For more information on custom modifiers, see the ECMA Partition II Metadata documentation.","pos":[1,92]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[93,389],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[172708,173182],"yaml":true,"extradata":"MT"},{"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,74],"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the property.","pos":[0,25]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[26,74],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[173624,173699],"yaml":true},{"content":"The attributes of the property.","nodes":[{"pos":[0,31],"content":"The attributes of the property.","nodes":[{"content":"The attributes of the property.","pos":[0,31]}]}],"pos":[173788,173820],"yaml":true},{"content":"The return type of the property.","nodes":[{"pos":[0,32],"content":"The return type of the property.","nodes":[{"content":"The return type of the property.","pos":[0,32]}]}],"pos":[173884,173917],"yaml":true},{"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,237],"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the property.","pos":[0,168],"source":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property."},{"content":"If the return type has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[169,237],"source":" If the return type has no required custom modifiers, specify `null`."}]}],"pos":[174006,174244],"yaml":true},{"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,237],"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the property.","pos":[0,168],"source":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property."},{"content":"If the return type has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[169,237],"source":" If the return type has no optional custom modifiers, specify `null`."}]}],"pos":[174333,174571],"yaml":true},{"content":"The types of the parameters of the property.","nodes":[{"pos":[0,44],"content":"The types of the parameters of the property.","nodes":[{"content":"The types of the parameters of the property.","pos":[0,44]}]}],"pos":[174641,174686],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[174780,175182],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[175276,175678],"yaml":true},{"content":"The defined property.","nodes":[{"pos":[0,21],"content":"The defined property.","nodes":[{"content":"The defined property.","pos":[0,21]}]}],"pos":[175760,175782],"yaml":true},{"content":"The length of <code>name</code> is zero.","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."}],"pos":[175953,175994],"yaml":true},{"content":"<code>name</code> is `null`  \n  \n -or-  \n  \n Any of the elements of the <code>parameterTypes</code> array is `null`","nodes":[{"pos":[0,27],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>","source":"<code>name</code> is `null`"},{"pos":[34,38],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[45,115],"content":"Any of the elements of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>","source":"Any of the elements of the <code>parameterTypes</code> array is `null`"}],"pos":[176096,176218],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[176328,176434],"yaml":true},{"content":"Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.","nodes":[{"pos":[0,115],"content":"Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.","nodes":[{"content":"Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.","pos":[0,115]}]}],"pos":[178437,178553],"yaml":true},{"content":"This overload is provided for designers of managed compilers.  \n  \n> [!NOTE]\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,61],"content":"This overload is provided for designers of managed compilers.","nodes":[{"content":"This overload is provided for designers of managed compilers.","pos":[0,61]}]},{"pos":[69,468],"content":"[!NOTE]\n For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,397],"nodes":[{"content":"For more information on custom modifiers, see the ECMA Partition II Metadata documentation.","pos":[1,92]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[93,389],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]},{"pos":[475,582],"content":"This method overload is introduced in the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","source":"This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}],"pos":[178564,179154],"yaml":true,"extradata":"MT"},{"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,74],"content":"The name of the property. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name of the property.","pos":[0,25]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[26,74],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[179652,179727],"yaml":true},{"content":"The attributes of the property.","nodes":[{"pos":[0,31],"content":"The attributes of the property.","nodes":[{"content":"The attributes of the property.","pos":[0,31]}]}],"pos":[179816,179848],"yaml":true},{"content":"The calling convention of the property accessors.","nodes":[{"pos":[0,49],"content":"The calling convention of the property accessors.","nodes":[{"content":"The calling convention of the property accessors.","pos":[0,49]}]}],"pos":[179944,179994],"yaml":true},{"content":"The return type of the property.","nodes":[{"pos":[0,32],"content":"The return type of the property.","nodes":[{"content":"The return type of the property.","pos":[0,32]}]}],"pos":[180058,180091],"yaml":true},{"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify `null`.","nodes":[{"pos":[0,237],"content":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the required custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the property.","pos":[0,168],"source":"An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property."},{"content":"If the return type has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[169,237],"source":" If the return type has no required custom modifiers, specify `null`."}]}],"pos":[180180,180418],"yaml":true},{"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"pos":[0,237],"content":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify `null`.","nodes":[{"content":"An array of types representing the optional custom modifiers, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>, for the return type of the property.","pos":[0,168],"source":"An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property."},{"content":"If the return type has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph>.","pos":[169,237],"source":" If the return type has no optional custom modifiers, specify `null`."}]}],"pos":[180507,180745],"yaml":true},{"content":"The types of the parameters of the property.","nodes":[{"pos":[0,44],"content":"The types of the parameters of the property.","nodes":[{"content":"The types of the parameters of the property.","pos":[0,44]}]}],"pos":[180815,180860],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the required custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no required custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have required custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[180954,181356],"yaml":true},{"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"pos":[0,401],"content":"An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.","nodes":[{"content":"An array of arrays of types.","pos":[0,28]},{"content":"Each array of types represents the optional custom modifiers for the corresponding parameter, such as <ph id=\"ph1\">&lt;xref href=\"System.Runtime.CompilerServices.IsConst\"&gt;&lt;/xref&gt;</ph>.","pos":[29,192],"source":" Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>."},{"content":"If a particular parameter has no optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of types.","pos":[193,297],"source":" If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types."},{"content":"If none of the parameters have optional custom modifiers, specify <ph id=\"ph1\">`null`</ph> instead of an array of arrays.","pos":[298,401],"source":" If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays."}]}],"pos":[181450,181852],"yaml":true},{"content":"The defined property.","nodes":[{"pos":[0,21],"content":"The defined property.","nodes":[{"content":"The defined property.","pos":[0,21]}]}],"pos":[181934,181956],"yaml":true},{"content":"The length of <code>name</code> is zero.","nodes":[{"pos":[0,40],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"The length of <code>name</code> is zero."}],"pos":[182127,182168],"yaml":true},{"content":"<code>name</code> is `null`.  \n  \n -or-  \n  \n Any of the elements of the <code>parameterTypes</code> array is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,117],"content":"Any of the elements of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">parameterTypes</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is <ph id=\"ph2\">`null`</ph>.","source":"Any of the elements of the <code>parameterTypes</code> array is `null`."}],"pos":[182270,182394],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[182504,182610],"yaml":true},{"content":"Defines the initializer for this type.","nodes":[{"pos":[0,38],"content":"Defines the initializer for this type.","nodes":[{"content":"Defines the initializer for this type.","pos":[0,38]}]}],"pos":[183842,183881],"yaml":true},{"content":"The initializer created is always public.","nodes":[{"pos":[0,41],"content":"The initializer created is always public.","nodes":[{"content":"The initializer created is always public.","pos":[0,41]}]}],"pos":[183892,183934],"yaml":true,"extradata":"MT"},{"content":"Returns a type initializer.","nodes":[{"pos":[0,27],"content":"Returns a type initializer.","nodes":[{"content":"Returns a type initializer.","pos":[0,27]}]}],"pos":[184762,184790],"yaml":true},{"content":"The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,121],"content":"The containing type has been previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[184984,185106],"yaml":true},{"content":"Defines an uninitialized data field in the `.sdata` section of the portable executable (PE) file.","nodes":[{"pos":[0,97],"content":"Defines an uninitialized data field in the <ph id=\"ph1\">`.sdata`</ph> section of the portable executable (PE) file.","source":"Defines an uninitialized data field in the `.sdata` section of the portable executable (PE) file."}],"pos":[186701,186799],"yaml":true},{"content":"The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.","nodes":[{"pos":[0,143],"content":"The field that you create with this method will be <ph id=\"ph1\">`static`</ph>, even if you do not include <ph id=\"ph2\">`FieldAttributes.Static`</ph> in the <ph id=\"ph3\">`attributes`</ph> parameter.","source":"The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter."}],"pos":[186810,186954],"yaml":true,"extradata":"MT"},{"content":"The name used to refer to the data. <code>name</code> cannot contain embedded nulls.","nodes":[{"pos":[0,84],"content":"The name used to refer to the data. <code>name</code> cannot contain embedded nulls.","nodes":[{"content":"The name used to refer to the data.","pos":[0,35]},{"content":"<bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot contain embedded nulls.","pos":[36,84],"source":"<code>name</code> cannot contain embedded nulls."}]}],"pos":[187881,187966],"yaml":true},{"content":"The size of the data field.","nodes":[{"pos":[0,27],"content":"The size of the data field.","nodes":[{"content":"The size of the data field.","pos":[0,27]}]}],"pos":[188025,188053],"yaml":true},{"content":"The attributes for the field.","nodes":[{"pos":[0,29],"content":"The attributes for the field.","nodes":[{"content":"The attributes for the field.","pos":[0,29]}]}],"pos":[188139,188169],"yaml":true},{"content":"A field to reference the data.","nodes":[{"pos":[0,30],"content":"A field to reference the data.","nodes":[{"content":"A field to reference the data.","pos":[0,30]}]}],"pos":[188248,188279],"yaml":true},{"content":"Length of <code>name</code> is zero.  \n  \n -or-  \n  \n <code>size</code> is less than or equal to zero, or greater than or equal to 0x003f0000.","nodes":[{"pos":[0,36],"content":"Length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> is zero.","source":"Length of <code>name</code> is zero."},{"pos":[43,47],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[54,142],"content":"<ph id=\"ph1\">&lt;code&gt;size&lt;/code&gt;</ph> is less than or equal to zero, or greater than or equal to 0x003f0000.","source":"<code>size</code> is less than or equal to zero, or greater than or equal to 0x003f0000."}],"pos":[188459,188608],"yaml":true},{"content":"<code>name</code> is `null`.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>name</code> is `null`."}],"pos":[188710,188739],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[188849,188955],"yaml":true},{"content":"Retrieves the full path of this type.","nodes":[{"pos":[0,37],"content":"Retrieves the full path of this type.","nodes":[{"content":"Retrieves the full path of this type.","pos":[0,37]}]}],"pos":[190105,190143],"yaml":true},{"content":"The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.","nodes":[{"pos":[0,115],"content":"The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.","nodes":[{"content":"The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.","pos":[0,115]}]}],"pos":[190154,190270],"yaml":true,"extradata":"MT"},{"content":"Read-only. Retrieves the full path of this type.","nodes":[{"pos":[0,48],"content":"Read-only. Retrieves the full path of this type.","nodes":[{"content":"Read-only. Retrieves the full path of this type.","pos":[0,48],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the full path of this type.","pos":[11,48]}]}]}],"pos":[190391,190440],"yaml":true},{"content":"Gets a value that indicates the covariance and special constraints of the current generic type parameter.","nodes":[{"pos":[0,105],"content":"Gets a value that indicates the covariance and special constraints of the current generic type parameter.","nodes":[{"content":"Gets a value that indicates the covariance and special constraints of the current generic type parameter.","pos":[0,105]}]}],"pos":[191772,191878],"yaml":true},{"content":"> [!NOTE]\n>  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.","nodes":[{"pos":[2,209],"content":"[!NOTE]\n When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.","leadings":["","> "],"nodes":[{"content":"When emitting code, a generic type parameter is represented by a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object rather than by a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[9,205],"source":" When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object."}]}],"pos":[191889,192111],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> values that describes the covariance and special constraints of the current generic type parameter.","nodes":[{"pos":[0,190],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.GenericParameterAttributes\"&gt;&lt;/xref&gt;</ph> values that describes the covariance and special constraints of the current generic type parameter.","source":"A bitwise combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> values that describes the covariance and special constraints of the current generic type parameter."}],"pos":[192319,192510],"yaml":true},{"content":"Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.","nodes":[{"pos":[0,113],"content":"Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.","nodes":[{"content":"Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.","pos":[0,113]}]}],"pos":[193808,193922],"yaml":true},{"content":"> [!NOTE]\n>  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.  \n  \n If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined. Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.","nodes":[{"pos":[2,209],"content":"[!NOTE]\n When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.","leadings":["","> "],"nodes":[{"content":"When emitting code, a generic type parameter is represented by a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object rather than by a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[9,205],"source":" When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object."}]},{"pos":[216,546],"content":"If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined. Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.","nodes":[{"content":"If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined. Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.","pos":[0,330],"nodes":[{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> does not represent a generic type parameter, the value of this property is undefined.","pos":[0,142],"source":"If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A&gt;</ph> property to determine whether the current <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> represents a generic type parameter.","pos":[143,330],"source":" Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter."}]}]}],"pos":[193933,194485],"yaml":true,"extradata":"MT"},{"content":"If the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.","nodes":[{"pos":[0,247],"content":"If the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.","source":"If the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined."}],"pos":[194618,194866],"yaml":true},{"content":"Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.","nodes":[{"pos":[0,143],"content":"Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.","nodes":[{"content":"Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.","pos":[0,143]}]}],"pos":[199280,199424],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.  \n  \n For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`. In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type — in other words, that creates an instance of `G<U>`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`. The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call. The code example demonstrates this scenario.","nodes":[{"pos":[0,302],"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A&gt;</ph> method provides a way to get a <ph id=\"ph2\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[0,302],"source":"The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object."}]},{"pos":[309,1723],"content":"For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`. In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type — in other words, that creates an instance of `G<U>`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`. The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call. The code example demonstrates this scenario.","nodes":[{"content":"For example, suppose you have a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object that represents the type <ph id=\"ph2\">`G&lt;T&gt;`</ph> in C# syntax (<ph id=\"ph3\">`G(Of T)`</ph> in Visual Basic, <ph id=\"ph4\">`generic &lt;T&gt; ref class G`</ph> in C++) and a <ph id=\"ph5\">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> object that represents a constructor of <ph id=\"ph6\">`G&lt;T&gt;`</ph>.","pos":[0,290],"source":"For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`."},{"content":"Suppose that <ph id=\"ph1\">`G&lt;T&gt;`</ph> has a generic method with type parameter <ph id=\"ph2\">`U`</ph> that creates an instance of the constructed type <ph id=\"ph3\">`G&lt;U&gt;`</ph>.","pos":[291,412],"source":" Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`."},{"content":"In order to emit the code to create an instance of the constructed type, you need a <ph id=\"ph1\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object that represents the constructor of this constructed type — in other words, that creates an instance of <ph id=\"ph2\">`G&lt;U&gt;`</ph>.","pos":[413,655],"source":" In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type — in other words, that creates an instance of `G<U>`."},{"content":"To do this, first call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method on the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object, specifying the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object that represents <ph id=\"ph4\">`U`</ph> as the type argument.","pos":[656,929],"source":" To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument."},{"content":"Then call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A&gt;</ph> method with the return value of the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method as parameter <ph id=\"ph3\">`type`</ph> and the <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.ConstructorBuilder&gt;</ph> object that represents the constructor of <ph id=\"ph5\">`G&lt;U&gt;`</ph> as parameter <ph id=\"ph6\">`constructor`</ph>.","pos":[930,1261],"source":" Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`."},{"content":"The return value is the <ph id=\"ph1\">&lt;xref:System.Reflection.ConstructorInfo&gt;</ph> object you need to emit the function call.","pos":[1262,1369],"source":" The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call."},{"content":"The code example demonstrates this scenario.","pos":[1370,1414]}]}],"pos":[199435,201163],"yaml":true,"extradata":"MT"},{"content":"The constructed generic type whose constructor is returned.","nodes":[{"pos":[0,59],"content":"The constructed generic type whose constructor is returned.","nodes":[{"content":"The constructed generic type whose constructor is returned.","pos":[0,59]}]}],"pos":[204566,204626],"yaml":true},{"content":"A constructor on the generic type definition of <code>type</code>, which specifies which constructor of <code>type</code> to return.","nodes":[{"pos":[0,132],"content":"A constructor on the generic type definition of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which specifies which constructor of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept> to return.","source":"A constructor on the generic type definition of <code>type</code>, which specifies which constructor of <code>type</code> to return."}],"pos":[204713,204846],"yaml":true},{"content":"A <xref href=\"System.Reflection.ConstructorInfo\"></xref> object that represents the constructor of <code>type</code> corresponding to <code>constructor</code>, which specifies a constructor belonging to the generic type definition of <code>type</code>.","nodes":[{"pos":[0,252],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> object that represents the constructor of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> corresponding to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">constructor</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which specifies a constructor belonging to the generic type definition of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">type</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Reflection.ConstructorInfo\"></xref> object that represents the constructor of <code>type</code> corresponding to <code>constructor</code>, which specifies a constructor belonging to the generic type definition of <code>type</code>."}],"pos":[204923,205176],"yaml":true},{"content":"<code>type</code> does not represent a generic type.  \n  \n -or-  \n  \n <code>type</code> is not of type <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n The declaring type of <code>constructor</code> is not a generic type definition.  \n  \n -or-  \n  \n The declaring type of <code>constructor</code> is not the generic type definition of <code>type</code>.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not represent a generic type.","source":"<code>type</code> does not represent a generic type."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,159],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not of type <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> is not of type <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>."},{"pos":[166,170],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[177,257],"content":"The declaring type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">constructor</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a generic type definition.","source":"The declaring type of <code>constructor</code> is not a generic type definition."},{"pos":[264,268],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[275,378],"content":"The declaring type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">constructor</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not the generic type definition of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The declaring type of <code>constructor</code> is not the generic type definition of <code>type</code>."}],"pos":[205347,205742],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the public and non-public constructors defined for this class, as specified.","nodes":[{"pos":[0,172],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public constructors defined for this class, as specified.","source":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the public and non-public constructors defined for this class, as specified."}],"pos":[209602,209775],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[209786,209980],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,126],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> as in <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on."}],"pos":[210283,210410],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.","nodes":[{"pos":[0,206],"content":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> objects representing the specified constructors defined for this class.","pos":[0,146],"source":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class."},{"content":"If no constructors are defined, an empty array is returned.","pos":[147,206]}]}],"pos":[210489,210696],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[210876,210929],"yaml":true},{"content":"Returns all the custom attributes defined for this type.","nodes":[{"pos":[0,56],"content":"Returns all the custom attributes defined for this type.","nodes":[{"content":"Returns all the custom attributes defined for this type.","pos":[0,56]}]}],"pos":[212189,212246],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[212410,212494],"yaml":true},{"content":"Returns an array of objects representing all the custom attributes of this type.","nodes":[{"pos":[0,80],"content":"Returns an array of objects representing all the custom attributes of this type.","nodes":[{"content":"Returns an array of objects representing all the custom attributes of this type.","pos":[0,80]}]}],"pos":[212553,212634],"yaml":true},{"content":"This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.","nodes":[{"pos":[0,270],"content":"This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.","nodes":[{"content":"This method is not currently supported for incomplete types.","pos":[0,60]},{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetType\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>.","pos":[61,270],"source":" Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>."}]}],"pos":[212818,213089],"yaml":true},{"content":"Returns all the custom attributes of the current type that are assignable to a specified type.","nodes":[{"pos":[0,94],"content":"Returns all the custom attributes of the current type that are assignable to a specified type.","nodes":[{"content":"Returns all the custom attributes of the current type that are assignable to a specified type.","pos":[0,94]}]}],"pos":[214328,214423],"yaml":true},{"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","nodes":[{"pos":[0,99],"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","nodes":[{"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","pos":[0,99],"nodes":[{"content":"The type of attribute to search for.","pos":[0,36]},{"content":"Only attributes that are assignable to this type are returned.","pos":[37,99]}]}]}],"pos":[214610,214710],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[214774,214858],"yaml":true},{"content":"An array of custom attributes defined on the current type.","nodes":[{"pos":[0,58],"content":"An array of custom attributes defined on the current type.","nodes":[{"content":"An array of custom attributes defined on the current type.","pos":[0,58]}]}],"pos":[214917,214976],"yaml":true},{"content":"This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.","nodes":[{"pos":[0,270],"content":"This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.","nodes":[{"content":"This method is not currently supported for incomplete types.","pos":[0,60]},{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetType\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>.","pos":[61,270],"source":" Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>."}]}],"pos":[215160,215431],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[215533,215571],"yaml":true},{"content":"The type must be a type provided by the underlying runtime system.","nodes":[{"pos":[0,66],"content":"The type must be a type provided by the underlying runtime system.","nodes":[{"content":"The type must be a type provided by the underlying runtime system.","pos":[0,66]}]}],"pos":[215665,215732],"yaml":true},{"content":"Calling this method always throws <xref href=\"System.NotSupportedException\"></xref>.","nodes":[{"pos":[0,84],"content":"Calling this method always throws <ph id=\"ph1\">&lt;xref href=\"System.NotSupportedException\"&gt;&lt;/xref&gt;</ph>.","source":"Calling this method always throws <xref href=\"System.NotSupportedException\"></xref>."}],"pos":[216818,216903],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[216914,217108],"yaml":true,"extradata":"MT"},{"content":"This method is not supported. No value is returned.","nodes":[{"pos":[0,51],"content":"This method is not supported. No value is returned.","nodes":[{"content":"This method is not supported. No value is returned.","pos":[0,51],"nodes":[{"content":"This method is not supported.","pos":[0,29]},{"content":"No value is returned.","pos":[30,51]}]}]}],"pos":[217245,217297],"yaml":true},{"content":"This method is not supported.","nodes":[{"pos":[0,29],"content":"This method is not supported.","nodes":[{"content":"This method is not supported.","pos":[0,29]}]}],"pos":[217476,217506],"yaml":true},{"content":"Returns the event with the specified name.","nodes":[{"pos":[0,42],"content":"Returns the event with the specified name.","nodes":[{"content":"Returns the event with the specified name.","pos":[0,42]}]}],"pos":[218858,218901],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[218912,219106],"yaml":true,"extradata":"MT"},{"content":"The name of the event to search for.","nodes":[{"pos":[0,36],"content":"The name of the event to search for.","nodes":[{"content":"The name of the event to search for.","pos":[0,36]}]}],"pos":[219317,219354],"yaml":true},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limits the search.","nodes":[{"pos":[0,107],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values that limits the search.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limits the search."}],"pos":[219438,219546],"yaml":true},{"content":"An <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name, or `null` if there are no matches.","nodes":[{"pos":[0,176],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> object representing the event declared or inherited by this type with the specified name, or <ph id=\"ph2\">`null`</ph> if there are no matches.","source":"An <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name, or `null` if there are no matches."}],"pos":[219617,219794],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[219967,220020],"yaml":true},{"content":"Returns the public events declared or inherited by this type.","nodes":[{"pos":[0,61],"content":"Returns the public events declared or inherited by this type.","nodes":[{"content":"Returns the public events declared or inherited by this type.","pos":[0,61]}]}],"pos":[221076,221138],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.","nodes":[{"pos":[0,143],"content":"Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A&gt;</ph> and use reflection on the retrieved type.","pos":[0,143],"source":"Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type."}]}],"pos":[221149,221293],"yaml":true,"extradata":"MT"},{"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.","nodes":[{"pos":[0,201],"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public events declared or inherited by this type.","pos":[0,143],"source":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type."},{"content":"An empty array is returned if there are no public events.","pos":[144,201]}]}],"pos":[221468,221670],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[221844,221897],"yaml":true},{"content":"Returns the public and non-public events that are declared by this type.","nodes":[{"pos":[0,72],"content":"Returns the public and non-public events that are declared by this type.","nodes":[{"content":"Returns the public and non-public events that are declared by this type.","pos":[0,72]}]}],"pos":[223085,223158],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[223169,223363],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limits the search.","nodes":[{"pos":[0,107],"content":"A bitwise combination of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> values that limits the search.","source":"A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limits the search."}],"pos":[223588,223696],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.","nodes":[{"pos":[0,235],"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects representing the events declared or inherited by this type that match the specified binding flags.","pos":[0,175],"source":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the events declared or inherited by this type that match the specified binding flags."},{"content":"An empty array is returned if there are no matching events.","pos":[176,235]}]}],"pos":[223769,224005],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[224179,224232],"yaml":true},{"content":"Returns the field specified by the given name.","nodes":[{"pos":[0,46],"content":"Returns the field specified by the given name.","nodes":[{"content":"Returns the field specified by the given name.","pos":[0,46]}]}],"pos":[225480,225527],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[225538,225732],"yaml":true,"extradata":"MT"},{"content":"The name of the field to get.","nodes":[{"pos":[0,29],"content":"The name of the field to get.","nodes":[{"content":"The name of the field to get.","pos":[0,29]}]}],"pos":[225943,225973],"yaml":true},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,126],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> as in <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on."}],"pos":[226057,226184],"yaml":true},{"content":"Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then `null` is returned.","nodes":[{"pos":[0,233],"content":"Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then `null` is returned.","nodes":[{"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object representing the field declared or inherited by this type with the specified name and public or non-public modifier.","pos":[0,184],"source":"Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier."},{"content":"If there are no matches then <ph id=\"ph1\">`null`</ph> is returned.","pos":[185,233],"source":" If there are no matches then `null` is returned."}]}],"pos":[226255,226489],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[226662,226715],"yaml":true},{"content":"Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.","nodes":[{"pos":[0,131],"content":"Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.","nodes":[{"content":"Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.","pos":[0,131]}]}],"pos":[227933,228065],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.  \n  \n For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance. In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type — in other words, that is of type `U` rather than type `T`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`. The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call. The code example demonstrates this scenario.","nodes":[{"pos":[0,284],"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetField%2A&gt;</ph> method provides a way to get a <ph id=\"ph2\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object that represents a field of a constructed generic type whose generic type definition is represented by a <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[0,284],"source":"The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object."}]},{"pos":[291,1732],"content":"For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance. In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type — in other words, that is of type `U` rather than type `T`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`. The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call. The code example demonstrates this scenario.","nodes":[{"content":"For example, suppose you have a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object that represents the type <ph id=\"ph2\">`G&lt;T&gt;`</ph> in C# syntax (<ph id=\"ph3\">`G(Of T)`</ph> in Visual Basic, <ph id=\"ph4\">`generic &lt;T&gt; ref class G`</ph> in C++) and a <ph id=\"ph5\">&lt;xref:System.Reflection.Emit.FieldBuilder&gt;</ph> object that represents a field <ph id=\"ph6\">`public T F`</ph> in C# syntax (<ph id=\"ph7\">`Public F As T`</ph> in Visual Basic, <ph id=\"ph8\">`public: T F`</ph> in C++) that is defined by <ph id=\"ph9\">`G&lt;T&gt;`</ph>.","pos":[0,376],"source":"For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`."},{"content":"Suppose that <ph id=\"ph1\">`G&lt;T&gt;`</ph> has a generic method with type parameter <ph id=\"ph2\">`U`</ph> that creates an instance of the constructed type <ph id=\"ph3\">`G&lt;U&gt;`</ph> and calls field <ph id=\"ph4\">`F`</ph> on that instance.","pos":[377,535],"source":" Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance."},{"content":"In order to emit the function call, you need a <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object that represents <ph id=\"ph2\">`F`</ph> on the constructed type — in other words, that is of type <ph id=\"ph3\">`U`</ph> rather than type <ph id=\"ph4\">`T`</ph>.","pos":[536,728],"source":" In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type — in other words, that is of type `U` rather than type `T`."},{"content":"To do this, first call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method on the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object, specifying the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object that represents <ph id=\"ph4\">`U`</ph> as the type argument.","pos":[729,1002],"source":" To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument."},{"content":"Then call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetField%2A&gt;</ph> method with the return value of the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method as parameter <ph id=\"ph3\">`type`</ph> and the <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.FieldBuilder&gt;</ph> object that represents <ph id=\"ph5\">`F`</ph> as parameter <ph id=\"ph6\">`field`</ph>.","pos":[1003,1294],"source":" Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`."},{"content":"The return value is the <ph id=\"ph1\">&lt;xref:System.Reflection.FieldInfo&gt;</ph> object you need to emit the function call.","pos":[1295,1396],"source":" The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call."},{"content":"The code example demonstrates this scenario.","pos":[1397,1441]}]}],"pos":[228076,229813],"yaml":true,"extradata":"MT"},{"content":"The constructed generic type whose field is returned.","nodes":[{"pos":[0,53],"content":"The constructed generic type whose field is returned.","nodes":[{"content":"The constructed generic type whose field is returned.","pos":[0,53]}]}],"pos":[233206,233260],"yaml":true},{"content":"A field on the generic type definition of <code>type</code>, which specifies which field of <code>type</code> to return.","nodes":[{"pos":[0,120],"content":"A field on the generic type definition of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which specifies which field of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept> to return.","source":"A field on the generic type definition of <code>type</code>, which specifies which field of <code>type</code> to return."}],"pos":[233335,233456],"yaml":true},{"content":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object that represents the field of <code>type</code> corresponding to <code>field</code>, which specifies a field belonging to the generic type definition of <code>type</code>.","nodes":[{"pos":[0,228],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object that represents the field of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> corresponding to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">field</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which specifies a field belonging to the generic type definition of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">type</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Reflection.FieldInfo\"></xref> object that represents the field of <code>type</code> corresponding to <code>field</code>, which specifies a field belonging to the generic type definition of <code>type</code>."}],"pos":[233527,233756],"yaml":true},{"content":"<code>type</code> does not represent a generic type.  \n  \n -or-  \n  \n <code>type</code> is not of type <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n The declaring type of <code>field</code> is not a generic type definition.  \n  \n -or-  \n  \n The declaring type of <code>field</code> is not the generic type definition of <code>type</code>.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not represent a generic type.","source":"<code>type</code> does not represent a generic type."},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,159],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not of type <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> is not of type <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>."},{"pos":[166,170],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[177,251],"content":"The declaring type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">field</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a generic type definition.","source":"The declaring type of <code>field</code> is not a generic type definition."},{"pos":[258,262],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[269,366],"content":"The declaring type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">field</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not the generic type definition of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The declaring type of <code>field</code> is not the generic type definition of <code>type</code>."}],"pos":[233921,234304],"yaml":true},{"content":"Returns the public and non-public fields that are declared by this type.","nodes":[{"pos":[0,72],"content":"Returns the public and non-public fields that are declared by this type.","nodes":[{"content":"Returns the public and non-public fields that are declared by this type.","pos":[0,72]}]}],"pos":[235596,235669],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.  \n  \n Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,252],"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[0,252],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.","pos":[0,154],"source":"The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order."},{"content":"Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[155,252]}]}]},{"pos":[259,452],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[235680,236137],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,122],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}],"pos":[236362,236487],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.","nodes":[{"pos":[0,223],"content":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public fields declared or inherited by this type.","pos":[0,158],"source":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type."},{"content":"An empty array is returned if there are no fields, as specified.","pos":[159,223]}]}],"pos":[236560,236784],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[236958,237011],"yaml":true},{"content":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the type arguments of a generic type or the type parameters of a generic type definition.","nodes":[{"pos":[0,163],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the type arguments of a generic type or the type parameters of a generic type definition.","source":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the type arguments of a generic type or the type parameters of a generic type definition."}],"pos":[238127,238291],"yaml":true},{"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.  \n  \n A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.  \n  \n For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,136],"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.","nodes":[{"content":"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.","pos":[0,136]}]},{"pos":[143,499],"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.","nodes":[{"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.","pos":[0,356],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object represents a generic type definition if the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A&gt;</ph> method has been used to give it generic type parameters.","pos":[0,220],"source":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters."},{"content":"This method retrieves the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> objects that represent the generic type parameters.","pos":[221,356],"source":" This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters."}]}]},{"pos":[506,713],"content":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,207],"source":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}],"pos":[238302,239022],"yaml":true,"extradata":"MT"},{"content":"An array of <xref href=\"System.Type\"></xref> objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.","nodes":[{"pos":[0,179],"content":"An array of <xref href=\"System.Type\"></xref> objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.","nodes":[{"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects.","pos":[0,53],"source":"An array of <xref href=\"System.Type\"></xref> objects."},{"content":"The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.","pos":[54,179]}]}],"pos":[239168,239348],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents a generic type definition from which the current type can be obtained.","nodes":[{"pos":[0,136],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a generic type definition from which the current type can be obtained.","source":"Returns a <xref href=\"System.Type\"></xref> object that represents a generic type definition from which the current type can be obtained."}],"pos":[241534,241671],"yaml":true},{"content":"If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance. A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition.  \n  \n If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition.","nodes":[{"pos":[0,469],"content":"If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance. A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition.","nodes":[{"content":"If you call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A&gt;</ph> method on a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object for which the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A&gt;</ph> property returns <ph id=\"ph4\">`true`</ph>, the <ph id=\"ph5\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A&gt;</ph> property returns the current instance.","pos":[0,357],"source":"If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> that represents a generic type is always a generic type definition.","pos":[358,469],"source":" A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition."}]},{"pos":[476,907],"content":"If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition.","nodes":[{"content":"If you used the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method to construct a generic type from a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object that represents a generic type definition, using the <ph id=\"ph3\">&lt;xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName&gt;</ph> method on the constructed type gets back the <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object that represents the generic type definition.","pos":[0,431],"source":"If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition."}]}],"pos":[241682,242594],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object representing a generic type definition from which the current type can be obtained.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing a generic type definition from which the current type can be obtained.","source":"A <xref href=\"System.Type\"></xref> object representing a generic type definition from which the current type can be obtained."}],"pos":[242741,242867],"yaml":true},{"content":"The current type is not generic. That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> returns `false`.","nodes":[{"pos":[0,128],"content":"The current type is not generic. That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> returns `false`.","nodes":[{"content":"The current type is not generic.","pos":[0,32]},{"content":"That is, <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph2\">`false`</ph>.","pos":[33,128],"source":" That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> returns `false`."}]}],"pos":[243064,243193],"yaml":true},{"content":"Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.","nodes":[{"pos":[0,137],"content":"Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.","nodes":[{"content":"Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.","pos":[0,137]}]}],"pos":[244466,244604],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[244615,244809],"yaml":true,"extradata":"MT"},{"content":"The name of the interface.","nodes":[{"pos":[0,26],"content":"The name of the interface.","nodes":[{"content":"The name of the interface.","pos":[0,26]}]}],"pos":[244974,245001],"yaml":true},{"content":"If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.","nodes":[{"pos":[0,84],"content":"If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.","nodes":[{"content":"If <ph id=\"ph1\">`true`</ph>, the search is case-insensitive.","pos":[0,42],"source":"If `true`, the search is case-insensitive."},{"content":"If <ph id=\"ph1\">`false`</ph>, the search is case-sensitive.","pos":[43,84],"source":" If `false`, the search is case-sensitive."}]}],"pos":[245068,245153],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface. Returns null if no interface matching name is found.","nodes":[{"pos":[0,142],"content":"Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface. Returns null if no interface matching name is found.","nodes":[{"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the implemented interface.","pos":[0,89],"source":"Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface."},{"content":"Returns null if no interface matching name is found.","pos":[90,142]}]}],"pos":[245208,245351],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[245528,245581],"yaml":true},{"content":"Returns an interface mapping for the requested interface.","nodes":[{"pos":[0,57],"content":"Returns an interface mapping for the requested interface.","nodes":[{"content":"Returns an interface mapping for the requested interface.","pos":[0,57]}]}],"pos":[246724,246782],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[246793,246987],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of the interface for which the mapping is to be retrieved.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the interface for which the mapping is to be retrieved.","source":"The <xref href=\"System.Type\"></xref> of the interface for which the mapping is to be retrieved."}],"pos":[247248,247344],"yaml":true},{"content":"Returns the requested interface mapping.","nodes":[{"pos":[0,40],"content":"Returns the requested interface mapping.","nodes":[{"content":"Returns the requested interface mapping.","pos":[0,40]}]}],"pos":[247422,247463],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[247643,247696],"yaml":true},{"content":"Returns an array of all the interfaces implemented on this type and its base types.","nodes":[{"pos":[0,83],"content":"Returns an array of all the interfaces implemented on this type and its base types.","nodes":[{"content":"Returns an array of all the interfaces implemented on this type and its base types.","pos":[0,83]}]}],"pos":[248851,248935],"yaml":true},{"content":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces. If none are defined, an empty array is returned.","nodes":[{"pos":[0,150],"content":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces. If none are defined, an empty array is returned.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing the implemented interfaces.","pos":[0,101],"source":"Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces."},{"content":"If none are defined, an empty array is returned.","pos":[102,150]}]}],"pos":[249075,249226],"yaml":true},{"content":"Returns all the public and non-public members declared or inherited by this type, as specified.","nodes":[{"pos":[0,95],"content":"Returns all the public and non-public members declared or inherited by this type, as specified.","nodes":[{"content":"Returns all the public and non-public members declared or inherited by this type, as specified.","pos":[0,95]}]}],"pos":[250688,250784],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[250795,250989],"yaml":true,"extradata":"MT"},{"content":"The name of the member.","nodes":[{"pos":[0,23],"content":"The name of the member.","nodes":[{"content":"The name of the member.","pos":[0,23]}]}],"pos":[251240,251264],"yaml":true},{"content":"The type of the member to return.","nodes":[{"pos":[0,33],"content":"The type of the member to return.","nodes":[{"content":"The type of the member to return.","pos":[0,33]}]}],"pos":[251340,251374],"yaml":true},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, as in `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,127],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>, as in <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, as in `InvokeMethod`, `NonPublic`, and so on."}],"pos":[251458,251586],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned.","nodes":[{"pos":[0,229],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public members defined on this type if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is used; otherwise, only the public members are returned.","source":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned."}],"pos":[251660,251890],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[252064,252117],"yaml":true},{"content":"Returns the members for the public and non-public members declared or inherited by this type.","nodes":[{"pos":[0,93],"content":"Returns the members for the public and non-public members declared or inherited by this type.","nodes":[{"content":"Returns the members for the public and non-public members declared or inherited by this type.","pos":[0,93]}]}],"pos":[253311,253405],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[253416,253610],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,129],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>, such as <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on."}],"pos":[253837,253967],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.","nodes":[{"pos":[0,221],"content":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.","nodes":[{"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MemberInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public members declared or inherited by this type.","pos":[0,160],"source":"Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type."},{"content":"An empty array is returned if there are no matching members.","pos":[161,221]}]}],"pos":[254041,254263],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[254438,254491],"yaml":true},{"content":"Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.","nodes":[{"pos":[0,133],"content":"Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.","nodes":[{"content":"Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.","pos":[0,133]}]}],"pos":[255721,255855],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.  \n  \n For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance. In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type — in other words, that returns type `U` rather than type `T`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`. The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call. The code example demonstrates a scenario similar to this.","nodes":[{"pos":[0,287],"content":"The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A&gt;</ph> method provides a way to get a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents a method of a constructed generic type whose generic type definition is represented by a <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[0,287],"source":"The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object."}]},{"pos":[294,1755],"content":"For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance. In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type — in other words, that returns type `U` rather than type `T`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`. The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call. The code example demonstrates a scenario similar to this.","nodes":[{"content":"For example, suppose you have a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object that represents the type <ph id=\"ph2\">`G&lt;T&gt;`</ph> in C# syntax (<ph id=\"ph3\">`G(Of T)`</ph> in Visual Basic, <ph id=\"ph4\">`generic &lt;T&gt; ref class G`</ph> in C++) and a <ph id=\"ph5\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> object that represents a method <ph id=\"ph6\">`T M()`</ph> in C# syntax (<ph id=\"ph7\">`Function M() As T`</ph> in Visual Basic, <ph id=\"ph8\">`T M()`</ph> in C++) that is defined by <ph id=\"ph9\">`G&lt;T&gt;`</ph>.","pos":[0,371],"source":"For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`."},{"content":"Suppose that <ph id=\"ph1\">`G&lt;T&gt;`</ph> has a generic method with type parameter <ph id=\"ph2\">`U`</ph> that creates an instance of the constructed type <ph id=\"ph3\">`G&lt;U&gt;`</ph> and calls method <ph id=\"ph4\">`M`</ph> on that instance.","pos":[372,531],"source":" Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance."},{"content":"In order to emit the function call, you need a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object that represents <ph id=\"ph2\">`M`</ph> on the constructed type — in other words, that returns type <ph id=\"ph3\">`U`</ph> rather than type <ph id=\"ph4\">`T`</ph>.","pos":[532,727],"source":" In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type — in other words, that returns type `U` rather than type `T`."},{"content":"To do this, first call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method on the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object, specifying the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object that represents <ph id=\"ph4\">`U`</ph> as the type argument.","pos":[728,1001],"source":" To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument."},{"content":"Then call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A&gt;</ph> method with the return value of the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method as parameter <ph id=\"ph3\">`type`</ph> and the <ph id=\"ph4\">&lt;xref:System.Reflection.Emit.MethodBuilder&gt;</ph> object that represents <ph id=\"ph5\">`T M()`</ph> as parameter <ph id=\"ph6\">`method`</ph>.","pos":[1002,1300],"source":" Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`."},{"content":"The return value is the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> object you need to emit the function call.","pos":[1301,1403],"source":" The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call."},{"content":"The code example demonstrates a scenario similar to this.","pos":[1404,1461]}]}],"pos":[255866,257626],"yaml":true,"extradata":"MT"},{"content":"The constructed generic type whose method is returned.","nodes":[{"pos":[0,54],"content":"The constructed generic type whose method is returned.","nodes":[{"content":"The constructed generic type whose method is returned.","pos":[0,54]}]}],"pos":[261051,261106],"yaml":true},{"content":"A method on the generic type definition of <code>type</code>, which specifies which method of <code>type</code> to return.","nodes":[{"pos":[0,122],"content":"A method on the generic type definition of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept>, which specifies which method of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept> to return.","source":"A method on the generic type definition of <code>type</code>, which specifies which method of <code>type</code> to return."}],"pos":[261183,261306],"yaml":true},{"content":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents the method of <code>type</code> corresponding to <code>method</code>, which specifies a method belonging to the generic type definition of <code>type</code>.","nodes":[{"pos":[0,232],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> object that represents the method of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p1\">&lt;/code&gt;</ept> corresponding to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">method</ph><ept id=\"p2\">&lt;/code&gt;</ept>, which specifies a method belonging to the generic type definition of <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">type</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"A <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents the method of <code>type</code> corresponding to <code>method</code>, which specifies a method belonging to the generic type definition of <code>type</code>."}],"pos":[261378,261611],"yaml":true},{"content":"<code>method</code> is a generic method that is not a generic method definition.  \n  \n -or-  \n  \n <code>type</code> does not represent a generic type.  \n  \n -or-  \n  \n <code>type</code> is not of type <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>.  \n  \n -or-  \n  \n The declaring type of <code>method</code> is not a generic type definition.  \n  \n -or-  \n  \n The declaring type of <code>method</code> is not the generic type definition of <code>type</code>.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">&lt;code&gt;method&lt;/code&gt;</ph> is a generic method that is not a generic method definition.","source":"<code>method</code> is a generic method that is not a generic method definition."},{"pos":[87,91],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[98,150],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> does not represent a generic type.","source":"<code>type</code> does not represent a generic type."},{"pos":[157,161],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[168,257],"content":"<ph id=\"ph1\">&lt;code&gt;type&lt;/code&gt;</ph> is not of type <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph>.","source":"<code>type</code> is not of type <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref>."},{"pos":[264,268],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[275,350],"content":"The declaring type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not a generic type definition.","source":"The declaring type of <code>method</code> is not a generic type definition."},{"pos":[357,361],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[368,466],"content":"The declaring type of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">method</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not the generic type definition of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The declaring type of <code>method</code> is not the generic type definition of <code>type</code>."}],"pos":[261777,262264],"yaml":true},{"content":"Returns all the public and non-public methods declared or inherited by this type, as specified.","nodes":[{"pos":[0,95],"content":"Returns all the public and non-public methods declared or inherited by this type, as specified.","nodes":[{"content":"Returns all the public and non-public methods declared or inherited by this type, as specified.","pos":[0,95]}]}],"pos":[266186,266282],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[266293,266487],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,126],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> as in <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on."}],"pos":[266714,266841],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned.","nodes":[{"pos":[0,229],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> objects representing the public and non-public methods defined on this type if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is used; otherwise, only the public methods are returned.","source":"Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned."}],"pos":[266915,267145],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[267320,267373],"yaml":true},{"content":"Returns the public and non-public nested types that are declared by this type.","nodes":[{"pos":[0,78],"content":"Returns the public and non-public nested types that are declared by this type.","nodes":[{"content":"Returns the public and non-public nested types that are declared by this type.","pos":[0,78]}]}],"pos":[268651,268730],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \n  \n If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]},{"pos":[200,432],"content":"If this type is complete, for example, if <ph id=\"ph1\">`CreateType`</ph> has been called on this type, but there are nested types that are not complete, then <ph id=\"ph2\">`GetNestedTypes`</ph> will only return those nested types for which <ph id=\"ph3\">`CreateType`</ph> has been called.","source":"If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called."}],"pos":[268741,269178],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the name of the nested type to get.","nodes":[{"pos":[0,85],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the name of the nested type to get.","source":"The <xref href=\"System.String\"></xref> containing the name of the nested type to get."}],"pos":[269371,269457],"yaml":true},{"content":"A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted.  \n  \n -or-  \n  \n Zero, to conduct a case-sensitive search for public methods.","nodes":[{"pos":[0,128],"content":"A bitmask comprised of one or more <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> that specify how the search is conducted.","source":"A bitmask comprised of one or more <xref href=\"System.Reflection.BindingFlags\"></xref> that specify how the search is conducted."},{"pos":[135,139],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[146,206],"content":"Zero, to conduct a case-sensitive search for public methods.","nodes":[{"content":"Zero, to conduct a case-sensitive search for public methods.","pos":[0,60]}]}],"pos":[269541,269756],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object representing the nested type that matches the specified requirements, if found; otherwise, `null`.","nodes":[{"pos":[0,140],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing the nested type that matches the specified requirements, if found; otherwise, <ph id=\"ph2\">`null`</ph>.","source":"A <xref href=\"System.Type\"></xref> object representing the nested type that matches the specified requirements, if found; otherwise, `null`."}],"pos":[269811,269952],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[270130,270183],"yaml":true},{"content":"Returns the public and non-public nested types that are declared or inherited by this type.","nodes":[{"pos":[0,91],"content":"Returns the public and non-public nested types that are declared or inherited by this type.","nodes":[{"content":"Returns the public and non-public nested types that are declared or inherited by this type.","pos":[0,91]}]}],"pos":[271401,271493],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \n  \n If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]},{"pos":[200,432],"content":"If this type is complete, for example, if <ph id=\"ph1\">`CreateType`</ph> has been called on this type, but there are nested types that are not complete, then <ph id=\"ph2\">`GetNestedTypes`</ph> will only return those nested types for which <ph id=\"ph3\">`CreateType`</ph> has been called.","source":"If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called."}],"pos":[271504,271941],"yaml":true,"extradata":"MT"},{"content":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, as in `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,127],"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>, as in <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","source":"This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, as in `InvokeMethod`, `NonPublic`, and so on."}],"pos":[272148,272276],"yaml":true},{"content":"An array of <xref href=\"System.Type\"></xref> objects representing all the types nested within the current <xref href=\"System.Type\"></xref> that match the specified binding constraints.  \n  \n An empty array of type <xref href=\"System.Type\"></xref>, if no types are nested within the current <xref href=\"System.Type\"></xref>, or if none of the nested types match the binding constraints.","nodes":[{"pos":[0,184],"content":"An array of <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> objects representing all the types nested within the current <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that match the specified binding constraints.","source":"An array of <xref href=\"System.Type\"></xref> objects representing all the types nested within the current <xref href=\"System.Type\"></xref> that match the specified binding constraints."},{"pos":[191,385],"content":"An empty array of type <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>, if no types are nested within the current <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>, or if none of the nested types match the binding constraints.","source":"An empty array of type <xref href=\"System.Type\"></xref>, if no types are nested within the current <xref href=\"System.Type\"></xref>, or if none of the nested types match the binding constraints."}],"pos":[272333,272731],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[272910,272963],"yaml":true},{"content":"Returns all the public and non-public properties declared or inherited by this type, as specified.","nodes":[{"pos":[0,98],"content":"Returns all the public and non-public properties declared or inherited by this type, as specified.","nodes":[{"content":"Returns all the public and non-public properties declared or inherited by this type, as specified.","pos":[0,98]}]}],"pos":[274175,274274],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[274285,274479],"yaml":true,"extradata":"MT"},{"content":"This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"pos":[0,149],"content":"This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.","nodes":[{"content":"This invocation attribute.","pos":[0,26]},{"content":"This must be a bit flag from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`NonPublic`</ph>, and so on.","pos":[27,149],"source":" This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on."}]}],"pos":[274711,274863],"yaml":true},{"content":"Returns an array of `PropertyInfo` objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned.","nodes":[{"pos":[0,200],"content":"Returns an array of <ph id=\"ph1\">`PropertyInfo`</ph> objects representing the public and non-public properties defined on this type if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">nonPublic</ph><ept id=\"p1\">&lt;/code&gt;</ept> is used; otherwise, only the public properties are returned.","source":"Returns an array of `PropertyInfo` objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned."}],"pos":[274939,275140],"yaml":true},{"content":"This method is not implemented for incomplete types.","nodes":[{"pos":[0,52],"content":"This method is not implemented for incomplete types.","nodes":[{"content":"This method is not implemented for incomplete types.","pos":[0,52]}]}],"pos":[275318,275371],"yaml":true},{"content":"Retrieves the GUID of this type.","nodes":[{"pos":[0,32],"content":"Retrieves the GUID of this type.","nodes":[{"content":"Retrieves the GUID of this type.","pos":[0,32]}]}],"pos":[278855,278888],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[278899,279093],"yaml":true,"extradata":"MT"},{"content":"Read-only. Retrieves the GUID of this type","nodes":[{"pos":[0,42],"content":"Read-only. Retrieves the GUID of this type","nodes":[{"content":"Read-only. Retrieves the GUID of this type","pos":[0,42],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the GUID of this type","pos":[11,42]}]}]}],"pos":[279206,279249],"yaml":true},{"content":"This method is not currently supported for incomplete types.","nodes":[{"pos":[0,60],"content":"This method is not currently supported for incomplete types.","nodes":[{"content":"This method is not currently supported for incomplete types.","pos":[0,60]}]}],"pos":[279418,279479],"yaml":true},{"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","nodes":[{"pos":[0,224],"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","nodes":[{"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","pos":[0,224],"nodes":[{"content":"Invokes the specified member.","pos":[0,29]},{"content":"The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","pos":[30,224]}]}]}],"pos":[282727,282952],"yaml":true},{"content":"A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.  \n  \n The binder will find all of the matching methods. These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder. After the method is selected, it will be invoked. Accessibility is checked at that point. The search can control which set of methods are searched based upon the accessibility attribute associated with the method. The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked. The default binder selects the most specific match.  \n  \n> [!NOTE]\n>  Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.  \n  \n This method is not currently supported. You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,232],"content":"A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.","nodes":[{"content":"A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.","pos":[0,232]}]},{"pos":[239,893],"content":"The binder will find all of the matching methods. These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder. After the method is selected, it will be invoked. Accessibility is checked at that point. The search can control which set of methods are searched based upon the accessibility attribute associated with the method. The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked. The default binder selects the most specific match.","nodes":[{"content":"The binder will find all of the matching methods.","pos":[0,49]},{"content":"These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.).","pos":[50,181]},{"content":"The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.","pos":[182,299]},{"content":"After the method is selected, it will be invoked.","pos":[300,349]},{"content":"Accessibility is checked at that point.","pos":[350,389]},{"content":"The search can control which set of methods are searched based upon the accessibility attribute associated with the method.","pos":[390,513]},{"content":"The <ph id=\"ph1\">`IBinder.BindToMethod`</ph> method is responsible for selecting the method to be invoked.","pos":[514,602],"source":" The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked."},{"content":"The default binder selects the most specific match.","pos":[603,654]}]},{"pos":[901,1111],"content":"[!NOTE]\n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.","leadings":["","> "],"nodes":[{"content":" Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.","pos":[8,208],"nodes":[{"content":"Access restrictions are ignored for fully trusted code.","pos":[1,56]},{"content":"That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.","pos":[57,200]}]}]},{"pos":[1118,1359],"content":"This method is not currently supported. You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"This method is not currently supported. You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","pos":[0,241],"nodes":[{"content":"This method is not currently supported.","pos":[0,39]},{"content":"You can retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[40,241],"source":" You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}]}],"pos":[282963,284332],"yaml":true,"extradata":"MT"},{"content":"The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","nodes":[{"pos":[0,258],"content":"The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","nodes":[{"content":"The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","pos":[0,258],"nodes":[{"content":"The name of the member to invoke.","pos":[0,33]},{"content":"This can be a constructor, method, property, or field.","pos":[34,88]},{"content":"A suitable invocation attribute must be specified.","pos":[89,139]},{"content":"Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.","pos":[140,258]}]}]}],"pos":[284705,284964],"yaml":true},{"content":"The invocation attribute. This must be a bit flag from `BindingFlags`.","nodes":[{"pos":[0,70],"content":"The invocation attribute. This must be a bit flag from `BindingFlags`.","nodes":[{"content":"The invocation attribute.","pos":[0,25]},{"content":"This must be a bit flag from <ph id=\"ph1\">`BindingFlags`</ph>.","pos":[26,70],"source":" This must be a bit flag from `BindingFlags`."}]}],"pos":[285047,285118],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"pos":[0,242],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects using reflection.","pos":[0,142],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection."},{"content":"If binder is <ph id=\"ph1\">`null`</ph>, the default binder is used.","pos":[143,191],"source":" If binder is `null`, the default binder is used."},{"content":"See <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph>.","pos":[192,242],"source":" See <xref href=\"System.Reflection.Binder\"></xref>."}]}],"pos":[285191,285434],"yaml":true},{"content":"The object on which to invoke the specified member. If the member is static, this parameter is ignored.","nodes":[{"pos":[0,103],"content":"The object on which to invoke the specified member. If the member is static, this parameter is ignored.","nodes":[{"content":"The object on which to invoke the specified member. If the member is static, this parameter is ignored.","pos":[0,103],"nodes":[{"content":"The object on which to invoke the specified member.","pos":[0,51]},{"content":"If the member is static, this parameter is ignored.","pos":[52,103]}]}]}],"pos":[285496,285600],"yaml":true},{"content":"An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.","nodes":[{"pos":[0,182],"content":"An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.","nodes":[{"content":"An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.","pos":[0,182],"nodes":[{"content":"An argument list.","pos":[0,17]},{"content":"This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked.","pos":[18,134]},{"content":"If there are no parameters this should be null.","pos":[135,182]}]}]}],"pos":[285662,285845],"yaml":true},{"content":"An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.","nodes":[{"pos":[0,307],"content":"An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.","nodes":[{"content":"An array of the same length as <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> with elements that represent the attributes associated with the arguments of the member to be invoked.","pos":[0,151],"source":"An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked."},{"content":"A parameter has attributes associated with it in the metadata.","pos":[152,214]},{"content":"They are used by various interoperability services.","pos":[215,266]},{"content":"See the metadata specs for more details.","pos":[267,307]}]}],"pos":[285934,286242],"yaml":true},{"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is null, the `CultureInfo` for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)","nodes":[{"pos":[0,298],"content":"An instance of `CultureInfo` used to govern the coercion of types. If this is null, the `CultureInfo` for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)","nodes":[{"content":"An instance of <ph id=\"ph1\">`CultureInfo`</ph> used to govern the coercion of types.","pos":[0,66],"source":"An instance of `CultureInfo` used to govern the coercion of types."},{"content":"If this is null, the <ph id=\"ph1\">`CultureInfo`</ph> for the current thread is used.","pos":[67,133],"source":" If this is null, the `CultureInfo` for the current thread is used."},{"content":"(Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)","pos":[134,298]}]}],"pos":[286324,286623],"yaml":true},{"content":"Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.","nodes":[{"pos":[0,278],"content":"Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.","nodes":[{"content":"Each parameter in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">namedParameters</ph><ept id=\"p1\">&lt;/code&gt;</ept> array gets the value in the corresponding element in the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p2\">&lt;/code&gt;</ept> array.","pos":[0,132],"source":"Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array."},{"content":"If the length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than the length of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">namedParameters</ph><ept id=\"p2\">&lt;/code&gt;</ept>, the remaining argument values are passed in order.","pos":[133,278],"source":" If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order."}]}],"pos":[286696,286975],"yaml":true},{"content":"Returns the return value of the invoked member.","nodes":[{"pos":[0,47],"content":"Returns the return value of the invoked member.","nodes":[{"content":"Returns the return value of the invoked member.","pos":[0,47]}]}],"pos":[287032,287080],"yaml":true},{"content":"This method is not currently supported for incomplete types.","nodes":[{"pos":[0,60],"content":"This method is not currently supported for incomplete types.","nodes":[{"content":"This method is not currently supported for incomplete types.","pos":[0,60]}]}],"pos":[287257,287318],"yaml":true},{"content":"Gets a value that indicates whether a specified <xref href=\"System.Reflection.TypeInfo\"></xref> object can be assigned to this object.","nodes":[{"pos":[0,134],"content":"Gets a value that indicates whether a specified <ph id=\"ph1\">&lt;xref href=\"System.Reflection.TypeInfo\"&gt;&lt;/xref&gt;</ph> object can be assigned to this object.","source":"Gets a value that indicates whether a specified <xref href=\"System.Reflection.TypeInfo\"></xref> object can be assigned to this object."}],"pos":[289704,289839],"yaml":true},{"content":"The object to test.","nodes":[{"pos":[0,19],"content":"The object to test.","nodes":[{"content":"The object to test.","pos":[0,19]}]}],"pos":[290032,290052],"yaml":true},{"content":"`true` if <code>typeInfo</code> can be assigned to this object; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeInfo</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be assigned to this object; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>typeInfo</code> can be assigned to this object; otherwise, `false`."}],"pos":[290110,290196],"yaml":true},{"content":"Gets a value that indicates whether a specified <xref href=\"System.Type\"></xref> can be assigned to this object.","nodes":[{"pos":[0,112],"content":"Gets a value that indicates whether a specified <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> can be assigned to this object.","source":"Gets a value that indicates whether a specified <xref href=\"System.Type\"></xref> can be assigned to this object."}],"pos":[291459,291572],"yaml":true},{"content":"The object to test.","nodes":[{"pos":[0,19],"content":"The object to test.","nodes":[{"content":"The object to test.","pos":[0,19]}]}],"pos":[291714,291734],"yaml":true},{"content":"`true` if the <code>c</code> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <code>c</code>, or if the current type is an interface that <code>c</code> supports. `false` if none of these conditions are valid, or if <code>c</code> is `null`.","nodes":[{"pos":[0,306],"content":"`true` if the <code>c</code> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <code>c</code>, or if the current type is an interface that <code>c</code> supports. `false` if none of these conditions are valid, or if <code>c</code> is `null`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">c</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">c</ph><ept id=\"p2\">&lt;/code&gt;</ept>, or if the current type is an interface that <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">c</ph><ept id=\"p3\">&lt;/code&gt;</ept> supports.","pos":[0,227],"source":"`true` if the <code>c</code> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <code>c</code>, or if the current type is an interface that <code>c</code> supports."},{"content":"<ph id=\"ph1\">`false`</ph> if none of these conditions are valid, or if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">c</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","pos":[228,306],"source":"`false` if none of these conditions are valid, or if <code>c</code> is `null`."}]}],"pos":[291792,292101],"yaml":true},{"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"pos":[0,86],"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"content":"Gets a value that indicates whether this object represents a constructed generic type.","pos":[0,86]}]}],"pos":[295717,295804],"yaml":true},{"content":"`true` if this object represents a constructed generic type; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if this object represents a constructed generic type; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this object represents a constructed generic type; otherwise, `false`."}],"pos":[295940,296023],"yaml":true},{"content":"Returns a value that indicates whether the current dynamic type has been created.","nodes":[{"pos":[0,81],"content":"Returns a value that indicates whether the current dynamic type has been created.","nodes":[{"content":"Returns a value that indicates whether the current dynamic type has been created.","pos":[0,81]}]}],"pos":[297169,297251],"yaml":true},{"content":"After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete. Exceptions are thrown on any further attempts to add members or change other characteristics of the type.","nodes":[{"pos":[0,285],"content":"After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete. Exceptions are thrown on any further attempts to add members or change other characteristics of the type.","nodes":[{"content":"After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete. Exceptions are thrown on any further attempts to add members or change other characteristics of the type.","pos":[0,285],"nodes":[{"content":"After the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method has been called, the type represented by the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object is complete.","pos":[0,179],"source":"After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete."},{"content":"Exceptions are thrown on any further attempts to add members or change other characteristics of the type.","pos":[180,285]}]}]}],"pos":[297262,297548],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method has been called; otherwise, `false`.","nodes":[{"pos":[0,124],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> method has been called; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method has been called; otherwise, `false`."}],"pos":[297674,297801],"yaml":true},{"content":"Determines whether a custom attribute is applied to the current type.","nodes":[{"pos":[0,69],"content":"Determines whether a custom attribute is applied to the current type.","nodes":[{"content":"Determines whether a custom attribute is applied to the current type.","pos":[0,69]}]}],"pos":[299159,299229],"yaml":true},{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,262],"content":"This method is not supported for incomplete generic type parameters. Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"This method is not supported for incomplete generic type parameters. Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","pos":[0,262],"nodes":[{"content":"This method is not supported for incomplete generic type parameters.","pos":[0,68]},{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[69,262],"source":" Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}]}],"pos":[299240,299503],"yaml":true,"extradata":"MT"},{"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","nodes":[{"pos":[0,99],"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","nodes":[{"content":"The type of attribute to search for. Only attributes that are assignable to this type are returned.","pos":[0,99],"nodes":[{"content":"The type of attribute to search for.","pos":[0,36]},{"content":"Only attributes that are assignable to this type are returned.","pos":[37,99]}]}]}],"pos":[299676,299776],"yaml":true},{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"pos":[0,83],"content":"Specifies whether to search this member's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this member's inheritance chain to find the attributes.","pos":[0,83]}]}],"pos":[299840,299924],"yaml":true},{"content":"`true` if one or more instances of <code>attributeType</code>, or an attribute derived from <code>attributeType</code>, is defined on this type; otherwise, `false`.","nodes":[{"pos":[0,164],"content":"<ph id=\"ph1\">`true`</ph> if one or more instances of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or an attribute derived from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">attributeType</ph><ept id=\"p2\">&lt;/code&gt;</ept>, is defined on this type; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if one or more instances of <code>attributeType</code>, or an attribute derived from <code>attributeType</code>, is defined on this type; otherwise, `false`."}],"pos":[299982,300149],"yaml":true},{"content":"This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.","nodes":[{"pos":[0,272],"content":"This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.","nodes":[{"content":"This method is not currently supported for incomplete types.","pos":[0,60]},{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref href=\"System.Type.GetType\"&gt;&lt;/xref&gt;</ph> and call <ph id=\"ph2\">&lt;xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"&gt;&lt;/xref&gt;</ph> on the returned <ph id=\"ph3\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph>.","pos":[61,272],"source":" Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>."}]}],"pos":[300323,300596],"yaml":true},{"content":"<code>attributeType</code> is not defined.","nodes":[{"pos":[0,42],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is not defined.","source":"<code>attributeType</code> is not defined."}],"pos":[300690,300733],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[300835,300873],"yaml":true},{"content":"Gets a value indicating whether the current type is a generic type parameter.","nodes":[{"pos":[0,77],"content":"Gets a value indicating whether the current type is a generic type parameter.","nodes":[{"content":"Gets a value indicating whether the current type is a generic type parameter.","pos":[0,77]}]}],"pos":[302723,302801],"yaml":true},{"content":"> [!NOTE]\n>  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.","nodes":[{"pos":[2,209],"content":"[!NOTE]\n When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.","leadings":["","> "],"nodes":[{"content":"When emitting code, a generic type parameter is represented by a <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.GenericTypeParameterBuilder&gt;</ph> object rather than by a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object.","pos":[9,205],"source":" When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object."}]}],"pos":[302812,303034],"yaml":true,"extradata":"MT"},{"content":"`true` if the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type parameter; otherwise, `false`.","nodes":[{"pos":[0,141],"content":"<ph id=\"ph1\">`true`</ph> if the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> object represents a generic type parameter; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type parameter; otherwise, `false`."}],"pos":[303164,303308],"yaml":true},{"content":"Gets a value indicating whether the current type is a generic type.","nodes":[{"pos":[0,67],"content":"Gets a value indicating whether the current type is a generic type.","nodes":[{"content":"Gets a value indicating whether the current type is a generic type.","pos":[0,67]}]}],"pos":[304532,304600],"yaml":true},{"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.  \n  \n For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,340],"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.","nodes":[{"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.","pos":[0,340],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object represents a generic type definition if the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A&gt;</ph> method has been used to give it generic type parameters.","pos":[0,220],"source":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters."},{"content":"An instance of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class that is generic is always a generic type definition.","pos":[221,340],"source":" An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition."}]}]},{"pos":[347,554],"content":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,207],"source":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}],"pos":[304611,305170],"yaml":true,"extradata":"MT"},{"content":"`true` if the type represented by the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object is generic; otherwise, `false`.","nodes":[{"pos":[0,140],"content":"<ph id=\"ph1\">`true`</ph> if the type represented by the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> object is generic; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the type represented by the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object is generic; otherwise, `false`."}],"pos":[305295,305438],"yaml":true},{"content":"Gets a value indicating whether the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> represents a generic type definition from which other generic types can be constructed.","nodes":[{"pos":[0,187],"content":"Gets a value indicating whether the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> represents a generic type definition from which other generic types can be constructed.","source":"Gets a value indicating whether the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> represents a generic type definition from which other generic types can be constructed."}],"pos":[306717,306905],"yaml":true},{"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.  \n  \n A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types. To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.  \n  \n For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,340],"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.","nodes":[{"content":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.","pos":[0,340],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> object represents a generic type definition if the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A&gt;</ph> method has been used to give it generic type parameters.","pos":[0,220],"source":"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters."},{"content":"An instance of the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> class that is generic is always a generic type definition.","pos":[221,340],"source":" An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition."}]}]},{"pos":[347,674],"content":"A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types. To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.","nodes":[{"content":"A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types. To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.","pos":[0,327],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> can be used to build generic type definitions, but not constructed generic types.","pos":[0,125],"source":"A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types."},{"content":"To get a constructed generic type, call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method on a <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> that represents a generic type definition.","pos":[126,327],"source":" To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition."}]}]},{"pos":[681,888],"content":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.","nodes":[{"content":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <ph id=\"ph1\">&lt;xref:System.Type.IsGenericType%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,207],"source":"For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property."}]}],"pos":[306916,307811],"yaml":true,"extradata":"MT"},{"content":"`true` if this <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type definition; otherwise, `false`.","nodes":[{"pos":[0,135],"content":"<ph id=\"ph1\">`true`</ph> if this <ph id=\"ph2\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder\"&gt;&lt;/xref&gt;</ph> object represents a generic type definition; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if this <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type definition; otherwise, `false`."}],"pos":[307946,308084],"yaml":true},{"content":"Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.","nodes":[{"pos":[0,147],"content":"Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.","nodes":[{"content":"Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.","pos":[0,147]}]}],"pos":[311751,311899],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe-critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  \n  \n By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  \n  \n> [!NOTE]\n>  Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,385],"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,385],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the type, as determined by the common language runtime (CLR).","pos":[0,314],"source":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[315,385]}]}]},{"pos":[392,406],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[407,425],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[426,448],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[449,470],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[582,590],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[618,631],"content":"Safe-critical","nodes":[{"content":"Safe-critical","pos":[0,13]}]},{"pos":[658,669],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[700,891],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,191]}]},{"pos":[898,1094],"content":"The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","nodes":[{"content":"The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","pos":[0,196],"nodes":[{"content":"The runtime begins evaluating transparency levels at the assembly.","pos":[0,66]},{"content":"For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","pos":[67,196]}]}]},{"pos":[1101,2510],"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","nodes":[{"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","pos":[0,1409],"nodes":[{"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it.","pos":[0,87]},{"content":"You can override this default by using the <ph id=\"ph1\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph> method overload and specifying security attributes.","pos":[88,1121],"source":" You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes."},{"content":"You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.","pos":[1122,1259]},{"content":"Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","pos":[1260,1409]}]}]},{"pos":[2518,2725],"content":"[!NOTE]\n Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.","leadings":["","> "],"nodes":[{"content":" Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.","pos":[8,205],"nodes":[{"content":"Default inheritance is limited to the runtime's evaluation of transparency.","pos":[1,76]},{"content":"No attributes are applied to the dynamic assembly.","pos":[77,127]},{"content":"If you want to add security attributes, you must apply them yourself.","pos":[128,197]}]}]},{"pos":[2732,3020],"content":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection emit and transparency, see <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.","pos":[0,181],"source":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[182,288],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[311910,314950],"yaml":true,"extradata":"MT"},{"content":"`true` if the current type is security-critical or security-safe-critical; `false` if it is transparent.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if the current type is security-critical or security-safe-critical; <ph id=\"ph2\">`false`</ph> if it is transparent.","source":"`true` if the current type is security-critical or security-safe-critical; `false` if it is transparent."}],"pos":[315080,315187],"yaml":true},{"content":"The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.","nodes":[{"pos":[0,135],"content":"The current dynamic type has not been created by calling the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> method.","source":"The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method."}],"pos":[315370,315506],"yaml":true},{"content":"Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.","nodes":[{"pos":[0,172],"content":"Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.","nodes":[{"content":"Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.","pos":[0,172]}]}],"pos":[316552,316725],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe-critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  \n  \n By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  \n  \n> [!NOTE]\n>  Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,385],"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,385],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the type, as determined by the common language runtime (CLR).","pos":[0,314],"source":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[315,385]}]}]},{"pos":[392,406],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[407,425],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[426,448],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[449,470],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[582,590],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[618,631],"content":"Safe-critical","nodes":[{"content":"Safe-critical","pos":[0,13]}]},{"pos":[658,669],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[700,891],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,191]}]},{"pos":[898,1094],"content":"The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","nodes":[{"content":"The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","pos":[0,196],"nodes":[{"content":"The runtime begins evaluating transparency levels at the assembly.","pos":[0,66]},{"content":"For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","pos":[67,196]}]}]},{"pos":[1101,2510],"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","nodes":[{"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","pos":[0,1409],"nodes":[{"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it.","pos":[0,87]},{"content":"You can override this default by using the <ph id=\"ph1\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph> method overload and specifying security attributes.","pos":[88,1121],"source":" You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes."},{"content":"You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.","pos":[1122,1259]},{"content":"Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","pos":[1260,1409]}]}]},{"pos":[2518,2725],"content":"[!NOTE]\n Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.","leadings":["","> "],"nodes":[{"content":" Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.","pos":[8,205],"nodes":[{"content":"Default inheritance is limited to the runtime's evaluation of transparency.","pos":[1,76]},{"content":"No attributes are applied to the dynamic assembly.","pos":[77,127]},{"content":"If you want to add security attributes, you must apply them yourself.","pos":[128,197]}]}]},{"pos":[2732,3020],"content":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection emit and transparency, see <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.","pos":[0,181],"source":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[182,288],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[316736,319776],"yaml":true,"extradata":"MT"},{"content":"`true` if the current type is security-safe-critical; `false` if it is security-critical or transparent.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if the current type is security-safe-critical; <ph id=\"ph2\">`false`</ph> if it is security-critical or transparent.","source":"`true` if the current type is security-safe-critical; `false` if it is security-critical or transparent."}],"pos":[319910,320017],"yaml":true},{"content":"The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.","nodes":[{"pos":[0,135],"content":"The current dynamic type has not been created by calling the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> method.","source":"The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method."}],"pos":[320204,320340],"yaml":true},{"content":"Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.","nodes":[{"pos":[0,118],"content":"Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.","nodes":[{"content":"Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.","pos":[0,118]}]}],"pos":[321380,321499],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \n  \n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \n|--------------------|------------------------|----------------------------|---------------------------|  \n|Critical|`true`|`false`|`false`|  \n|Safe-critical|`true`|`true`|`false`|  \n|Transparent|`false`|`false`|`true`|  \n  \n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \n  \n The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  \n  \n By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  \n  \n> [!NOTE]\n>  Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  \n  \n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"pos":[0,385],"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","nodes":[{"content":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:","pos":[0,385],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A&gt;</ph> properties report the transparency level of the type, as determined by the common language runtime (CLR).","pos":[0,314],"source":"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR)."},{"content":"The combinations of these properties are shown in the following table:","pos":[315,385]}]}]},{"pos":[392,406],"content":"Security level","nodes":[{"content":"Security level","pos":[0,14]}]},{"pos":[407,425],"content":"IsSecurityCritical","nodes":[{"content":"IsSecurityCritical","pos":[0,18]}]},{"pos":[426,448],"content":"IsSecuritySafeCritical","nodes":[{"content":"IsSecuritySafeCritical","pos":[0,22]}]},{"pos":[449,470],"content":"IsSecurityTransparent","nodes":[{"content":"IsSecurityTransparent","pos":[0,21]}]},{"pos":[582,590],"content":"Critical","nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[618,631],"content":"Safe-critical","nodes":[{"content":"Safe-critical","pos":[0,13]}]},{"pos":[658,669],"content":"Transparent","nodes":[{"content":"Transparent","pos":[0,11]}]},{"pos":[700,891],"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","nodes":[{"content":"Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.","pos":[0,191]}]},{"pos":[898,1094],"content":"The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","nodes":[{"content":"The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","pos":[0,196],"nodes":[{"content":"The runtime begins evaluating transparency levels at the assembly.","pos":[0,66]},{"content":"For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.","pos":[67,196]}]}]},{"pos":[1101,2510],"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","nodes":[{"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","pos":[0,1409],"nodes":[{"content":"By default, a dynamic assembly inherits the transparency of the assembly that emits it.","pos":[0,87]},{"content":"You can override this default by using the <ph id=\"ph1\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName&gt;</ph> method overload and specifying security attributes.","pos":[88,1121],"source":" You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes."},{"content":"You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code.","pos":[1122,1259]},{"content":"Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.","pos":[1260,1409]}]}]},{"pos":[2518,2725],"content":"[!NOTE]\n Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.","leadings":["","> "],"nodes":[{"content":" Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.","pos":[8,205],"nodes":[{"content":"Default inheritance is limited to the runtime's evaluation of transparency.","pos":[1,76]},{"content":"No attributes are applied to the dynamic assembly.","pos":[77,127]},{"content":"If you want to add security attributes, you must apply them yourself.","pos":[128,197]}]}]},{"pos":[2732,3020],"content":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).","nodes":[{"content":"For more information about reflection emit and transparency, see <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.","pos":[0,181],"source":"For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)."},{"content":"For information about transparency, see <bpt id=\"p1\">[</bpt>Security Changes<ept id=\"p1\">](~/docs/framework/security/security-changes.md)</ept>.","pos":[182,288],"source":" For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md)."}]}],"pos":[321510,324550],"yaml":true,"extradata":"MT"},{"content":"`true` if the type is security-transparent; otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> if the type is security-transparent; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the type is security-transparent; otherwise, `false`."}],"pos":[324683,324749],"yaml":true},{"content":"The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.","nodes":[{"pos":[0,135],"content":"The current dynamic type has not been created by calling the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph> method.","source":"The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method."}],"pos":[324935,325071],"yaml":true},{"content":"Determines whether this type is derived from a specified type.","nodes":[{"pos":[0,62],"content":"Determines whether this type is derived from a specified type.","nodes":[{"content":"Determines whether this type is derived from a specified type.","pos":[0,62]}]}],"pos":[326920,326983],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> that is to be checked.","nodes":[{"pos":[0,57],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that is to be checked.","source":"A <xref href=\"System.Type\"></xref> that is to be checked."}],"pos":[327187,327245],"yaml":true},{"content":"Read-only. Returns `true` if this type is the same as the type <code>c</code>, or is a subtype of type <code>c</code>; otherwise, `false`.","nodes":[{"pos":[0,138],"content":"Read-only. Returns `true` if this type is the same as the type <code>c</code>, or is a subtype of type <code>c</code>; otherwise, `false`.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Returns <ph id=\"ph1\">`true`</ph> if this type is the same as the type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">c</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or is a subtype of type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">c</ph><ept id=\"p2\">&lt;/code&gt;</ept>; otherwise, <ph id=\"ph4\">`false`</ph>.","pos":[11,138],"source":" Returns `true` if this type is the same as the type <code>c</code>, or is a subtype of type <code>c</code>; otherwise, `false`."}]}],"pos":[327303,327442],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents a one-dimensional array of the current type, with a lower bound of zero.","nodes":[{"pos":[0,138],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a one-dimensional array of the current type, with a lower bound of zero.","source":"Returns a <xref href=\"System.Type\"></xref> object that represents a one-dimensional array of the current type, with a lower bound of zero."}],"pos":[331870,332009],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.","nodes":[{"pos":[0,167],"content":"The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A&gt;</ph> method provides a way to generate an array type with any possible element type, including generic types.","pos":[0,167],"source":"The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types."}]}],"pos":[332020,332188],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.","nodes":[{"pos":[0,151],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.","source":"A <xref href=\"System.Type\"></xref> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero."}],"pos":[333070,333222],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents an array of the current type, with the specified number of dimensions.","nodes":[{"pos":[0,136],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents an array of the current type, with the specified number of dimensions.","source":"Returns a <xref href=\"System.Type\"></xref> object that represents an array of the current type, with the specified number of dimensions."}],"pos":[334502,334639],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.","nodes":[{"pos":[0,167],"content":"The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A&gt;</ph> method provides a way to generate an array type with any possible element type, including generic types.","pos":[0,167],"source":"The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types."}]}],"pos":[334650,334818],"yaml":true,"extradata":"MT"},{"content":"The number of dimensions for the array.","nodes":[{"pos":[0,39],"content":"The number of dimensions for the array.","nodes":[{"content":"The number of dimensions for the array.","pos":[0,39]}]}],"pos":[335709,335749],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> object that represents a one-dimensional array of the current type.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents a one-dimensional array of the current type.","source":"A <xref href=\"System.Type\"></xref> object that represents a one-dimensional array of the current type."}],"pos":[335804,335907],"yaml":true},{"content":"<code>rank</code> is not a valid array dimension.","nodes":[{"pos":[0,49],"content":"<ph id=\"ph1\">&lt;code&gt;rank&lt;/code&gt;</ph> is not a valid array dimension.","source":"<code>rank</code> is not a valid array dimension."}],"pos":[336091,336141],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` in Visual Basic).","nodes":[{"pos":[0,142],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the current type when passed as a <ph id=\"ph2\">`ref`</ph> parameter (<ph id=\"ph3\">`ByRef`</ph> in Visual Basic).","source":"Returns a <xref href=\"System.Type\"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` in Visual Basic)."}],"pos":[337285,337428],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.  \n  \n> [!NOTE]\n>  Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`.","nodes":[{"pos":[0,155],"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A&gt;</ph> method provides a way to generate <ph id=\"ph2\">`ref`</ph> types (<ph id=\"ph3\">`ByRef`</ph> in Visual Basic) for parameter lists.","source":"The <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists."},{"pos":[163,362],"content":"[!NOTE]\n Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`.","leadings":["","> "],"nodes":[{"content":"Using Microsoft intermediate language (MSIL) syntax, if the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> represents <ph id=\"ph2\">`MyType`</ph>, then the type returned by this method would be <ph id=\"ph3\">`MyType&amp;`</ph>.","pos":[9,197],"source":" Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`."}]}],"pos":[337439,337807],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` in Visual Basic).","nodes":[{"pos":[0,134],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the current type when passed as a <ph id=\"ph2\">`ref`</ph> parameter (<ph id=\"ph3\">`ByRef`</ph> in Visual Basic).","source":"A <xref href=\"System.Type\"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` in Visual Basic)."}],"pos":[338689,338824],"yaml":true},{"content":"Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.","nodes":[{"pos":[0,153],"content":"Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.","nodes":[{"content":"Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.","pos":[0,153]}]}],"pos":[340122,340276],"yaml":true},{"content":"Use this method when your emitted code requires a type constructed from the current generic type definition. It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition. If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.  \n  \n The object returned by this method functions as a placeholder for a constructed generic type in your emitted code. It is an instance of a class derived from <xref:System.Type> that has limited capabilities. In particular:  \n  \n-   To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads.  \n  \n-   Two instances that represent the same constructed type do not compare as equal. For example, in the following code `t1.Equals(t2)` returns `false`:  \n  \n [!code-cpp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)]\n [!code-csharp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)]\n [!code-vb[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)]","nodes":[{"pos":[0,544],"content":"Use this method when your emitted code requires a type constructed from the current generic type definition. It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition. If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.","nodes":[{"content":"Use this method when your emitted code requires a type constructed from the current generic type definition. It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition. If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.","pos":[0,544],"nodes":[{"content":"Use this method when your emitted code requires a type constructed from the current generic type definition.","pos":[0,108]},{"content":"It is not necessary to call the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method before calling the <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A&gt;</ph> method on a <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> that represents a generic type definition.","pos":[109,380],"source":" It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition."},{"content":"If the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> does not represent the definition of a generic type, an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph> is thrown.","pos":[381,544],"source":" If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown."}]}]},{"pos":[551,772],"content":"The object returned by this method functions as a placeholder for a constructed generic type in your emitted code. It is an instance of a class derived from <xref:System.Type> that has limited capabilities. In particular:","nodes":[{"content":"The object returned by this method functions as a placeholder for a constructed generic type in your emitted code. It is an instance of a class derived from <xref:System.Type> that has limited capabilities. In particular:","pos":[0,221],"nodes":[{"content":"The object returned by this method functions as a placeholder for a constructed generic type in your emitted code.","pos":[0,114]},{"content":"It is an instance of a class derived from <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> that has limited capabilities.","pos":[115,206],"source":" It is an instance of a class derived from <xref:System.Type> that has limited capabilities."},{"content":"In particular:","pos":[207,221]}]}]},{"pos":[782,1199],"content":"To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads.","nodes":[{"content":"To get methods, fields, and constructors for these constructed generic types, use the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29&gt;</ph> method overloads.","pos":[0,417],"source":"To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads."}]},{"pos":[1209,1356],"content":"Two instances that represent the same constructed type do not compare as equal. For example, in the following code `t1.Equals(t2)` returns `false`:","nodes":[{"content":"Two instances that represent the same constructed type do not compare as equal.","pos":[0,79]},{"content":"For example, in the following code <ph id=\"ph1\">`t1.Equals(t2)`</ph> returns <ph id=\"ph2\">`false`</ph>:","pos":[80,147],"source":" For example, in the following code `t1.Equals(t2)` returns `false`:"}]},{"pos":[1363,1919],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Reflection.Emit.TypeBuilder.MakeGenericType#1<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Reflection.Emit.TypeBuilder.MakeGenericType#1<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Reflection.Emit.TypeBuilder.MakeGenericType#1<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)</ept><ept id=\"p5\">]</ept>","leadings":[""," "," "],"source":"[!code-cpp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)]\n[!code-csharp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)]\n[!code-vb[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)]"}],"pos":[340287,342219],"yaml":true,"extradata":"MT"},{"content":"An array of types to be substituted for the type parameters of the current generic type definition.","nodes":[{"pos":[0,99],"content":"An array of types to be substituted for the type parameters of the current generic type definition.","nodes":[{"content":"An array of types to be substituted for the type parameters of the current generic type definition.","pos":[0,99]}]}],"pos":[342388,342488],"yaml":true},{"content":"A <xref href=\"System.Type\"></xref> representing the constructed type formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic type.","nodes":[{"pos":[0,187],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> representing the constructed type formed by substituting the elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> for the type parameters of the current generic type.","source":"A <xref href=\"System.Type\"></xref> representing the constructed type formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic type."}],"pos":[342543,342731],"yaml":true},{"content":"The current type does not represent the definition of a generic type. That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> returns `false`.","nodes":[{"pos":[0,175],"content":"The current type does not represent the definition of a generic type. That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> returns `false`.","nodes":[{"content":"The current type does not represent the definition of a generic type.","pos":[0,69]},{"content":"That is, <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> returns <ph id=\"ph2\">`false`</ph>.","pos":[70,175],"source":" That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> returns `false`."}]}],"pos":[342919,343095],"yaml":true},{"content":"<code>typeArguments</code> is `null`.  \n  \n -or-  \n  \n Any element of <code>typeArguments</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;typeArguments&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>typeArguments</code> is `null`."},{"pos":[44,48],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[55,107],"content":"Any element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"Any element of <code>typeArguments</code> is `null`."}],"pos":[343197,343311],"yaml":true},{"content":"The <xref href=\"System.Type.Module\"></xref> property of any element of <code>typeArguments</code> is `null`.  \n  \n -or-  \n  \n The <xref href=\"System.Reflection.Module.Assembly\"></xref> property of the module of any element of <code>typeArguments</code> is `null`.","nodes":[{"pos":[0,108],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type.Module\"&gt;&lt;/xref&gt;</ph> property of any element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"The <xref href=\"System.Type.Module\"></xref> property of any element of <code>typeArguments</code> is `null`."},{"pos":[115,119],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[126,263],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module.Assembly\"&gt;&lt;/xref&gt;</ph> property of the module of any element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">typeArguments</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph3\">`null`</ph>.","source":"The <xref href=\"System.Reflection.Module.Assembly\"></xref> property of the module of any element of <code>typeArguments</code> is `null`."}],"pos":[343405,343679],"yaml":true},{"content":"Returns a <xref href=\"System.Type\"></xref> object that represents the type of an unmanaged pointer to the current type.","nodes":[{"pos":[0,119],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of an unmanaged pointer to the current type.","source":"Returns a <xref href=\"System.Type\"></xref> object that represents the type of an unmanaged pointer to the current type."}],"pos":[344835,344955],"yaml":true},{"content":"The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.  \n  \n> [!NOTE]\n>  Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`.","nodes":[{"pos":[0,133],"content":"The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A&gt;</ph> method provides a way to generate pointer types for parameter lists.","pos":[0,133],"source":"The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists."}]},{"pos":[141,340],"content":"[!NOTE]\n Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`.","leadings":["","> "],"nodes":[{"content":"Using Microsoft intermediate language (MSIL) syntax, if the current <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder&gt;</ph> represents <ph id=\"ph2\">`MyType`</ph>, then the type returned by this method would be <ph id=\"ph3\">`MyType*`</ph>.","pos":[9,197],"source":" Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`."}]}],"pos":[344966,345312],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents the type of an unmanaged pointer to the current type.","nodes":[{"pos":[0,111],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents the type of an unmanaged pointer to the current type.","source":"A <xref href=\"System.Type\"></xref> object that represents the type of an unmanaged pointer to the current type."}],"pos":[346196,346308],"yaml":true},{"content":"Retrieves the dynamic module that contains this type definition.","nodes":[{"pos":[0,64],"content":"Retrieves the dynamic module that contains this type definition.","nodes":[{"content":"Retrieves the dynamic module that contains this type definition.","pos":[0,64]}]}],"pos":[347487,347552],"yaml":true},{"content":"Read-only. Retrieves the dynamic module that contains this type definition.","nodes":[{"pos":[0,75],"content":"Read-only. Retrieves the dynamic module that contains this type definition.","nodes":[{"content":"Read-only. Retrieves the dynamic module that contains this type definition.","pos":[0,75],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the dynamic module that contains this type definition.","pos":[11,75]}]}]}],"pos":[347700,347776],"yaml":true},{"content":"Retrieves the name of this type.","nodes":[{"pos":[0,32],"content":"Retrieves the name of this type.","nodes":[{"content":"Retrieves the name of this type.","pos":[0,32]}]}],"pos":[348974,349007],"yaml":true},{"content":"Read-only. Retrieves the <xref href=\"System.String\"></xref> name of this type.","nodes":[{"pos":[0,78],"content":"Read-only. Retrieves the <xref href=\"System.String\"></xref> name of this type.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> name of this type.","pos":[11,78],"source":" Retrieves the <xref href=\"System.String\"></xref> name of this type."}]}],"pos":[349124,349203],"yaml":true},{"content":"Retrieves the namespace where this `TypeBuilder` is defined.","nodes":[{"pos":[0,60],"content":"Retrieves the namespace where this <ph id=\"ph1\">`TypeBuilder`</ph> is defined.","source":"Retrieves the namespace where this `TypeBuilder` is defined."}],"pos":[350429,350490],"yaml":true},{"content":"Read-only. Retrieves the namespace where this `TypeBuilder` is defined.","nodes":[{"pos":[0,71],"content":"Read-only. Retrieves the namespace where this `TypeBuilder` is defined.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the namespace where this <ph id=\"ph1\">`TypeBuilder`</ph> is defined.","pos":[11,71],"source":" Retrieves the namespace where this `TypeBuilder` is defined."}]}],"pos":[350612,350684],"yaml":true},{"content":"Retrieves the packing size of this type.","nodes":[{"pos":[0,40],"content":"Retrieves the packing size of this type.","nodes":[{"content":"Retrieves the packing size of this type.","pos":[0,40]}]}],"pos":[351927,351968],"yaml":true},{"content":"Read-only. Retrieves the packing size of this type.","nodes":[{"pos":[0,51],"content":"Read-only. Retrieves the packing size of this type.","nodes":[{"content":"Read-only. Retrieves the packing size of this type.","pos":[0,51],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves the packing size of this type.","pos":[11,51]}]}]}],"pos":[352132,352184],"yaml":true},{"content":"Returns the type that was used to obtain this type.","nodes":[{"pos":[0,51],"content":"Returns the type that was used to obtain this type.","nodes":[{"content":"Returns the type that was used to obtain this type.","pos":[0,51]}]}],"pos":[353441,353493],"yaml":true},{"content":"Read-only. The type that was used to obtain this type.","nodes":[{"pos":[0,54],"content":"Read-only. The type that was used to obtain this type.","nodes":[{"content":"Read-only. The type that was used to obtain this type.","pos":[0,54],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The type that was used to obtain this type.","pos":[11,54]}]}]}],"pos":[353615,353670],"yaml":true},{"content":"Set a custom attribute using a custom attribute builder.","nodes":[{"pos":[0,56],"content":"Set a custom attribute using a custom attribute builder.","nodes":[{"content":"Set a custom attribute using a custom attribute builder.","pos":[0,56]}]}],"pos":[355066,355123],"yaml":true},{"content":"> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[2,531],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[355134,355678],"yaml":true,"extradata":"MT"},{"content":"An instance of a helper class to define the custom attribute.","nodes":[{"pos":[0,61],"content":"An instance of a helper class to define the custom attribute.","nodes":[{"content":"An instance of a helper class to define the custom attribute.","pos":[0,61]}]}],"pos":[355912,355974],"yaml":true},{"content":"<code>customBuilder</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;customBuilder&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>customBuilder</code> is `null`."}],"pos":[356157,356195],"yaml":true},{"content":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,232],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[356305,356538],"yaml":true},{"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"pos":[0,64],"content":"Sets a custom attribute using a specified custom attribute blob.","nodes":[{"content":"Sets a custom attribute using a specified custom attribute blob.","pos":[0,64]}]}],"pos":[357968,358033],"yaml":true},{"content":"For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \n  \n> [!NOTE]\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","nodes":[{"pos":[0,475],"content":"For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"content":"For more information on how to format <ph id=\"ph1\">`binaryAttribute`</ph>, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\".","pos":[0,178],"source":"For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\"."},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[179,475],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]},{"pos":[483,1012],"content":"[!NOTE]\n Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","leadings":["","> "],"nodes":[{"content":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.","pos":[8,527],"nodes":[{"content":"Starting with the <ph id=\"ph1\">[!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)]</ph>, this member no longer requires <ph id=\"ph2\">&lt;xref:System.Security.Permissions.ReflectionPermission&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName&gt;</ph> flag.","pos":[1,268],"source":" Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag."},{"content":"(See <bpt id=\"p1\">[</bpt>Security Issues in Reflection Emit<ept id=\"p1\">](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md)</ept>.) To use this functionality, your application should target the <ph id=\"ph1\">[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]</ph> or later.","pos":[269,519],"source":" (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later."}]}]}],"pos":[358044,359064],"yaml":true,"extradata":"MT"},{"content":"The constructor for the custom attribute.","nodes":[{"pos":[0,41],"content":"The constructor for the custom attribute.","nodes":[{"content":"The constructor for the custom attribute.","pos":[0,41]}]}],"pos":[359344,359386],"yaml":true},{"content":"A byte blob representing the attributes.","nodes":[{"pos":[0,40],"content":"A byte blob representing the attributes.","nodes":[{"content":"A byte blob representing the attributes.","pos":[0,40]}]}],"pos":[359457,359498],"yaml":true},{"content":"<code>con</code> or <code>binaryAttribute</code> is `null`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;con&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;binaryAttribute&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>con</code> or <code>binaryAttribute</code> is `null`."}],"pos":[359681,359741],"yaml":true},{"content":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,232],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[359851,360084],"yaml":true},{"content":"Sets the base type of the type currently under construction.","nodes":[{"pos":[0,60],"content":"Sets the base type of the type currently under construction.","nodes":[{"content":"Sets the base type of the type currently under construction.","pos":[0,60]}]}],"pos":[361370,361431],"yaml":true},{"content":"If `parent` is `null`, <xref:System.Object> is used as the base type.  \n  \n In the .NET Framework versions 1.0 and 1.1, no exception is thrown if `parent` is an interface type, but a <xref:System.TypeLoadException> is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.  \n  \n The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types. For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type. In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.","nodes":[{"pos":[0,69],"content":"If <ph id=\"ph1\">`parent`</ph> is <ph id=\"ph2\">`null`</ph>, <ph id=\"ph3\">&lt;xref:System.Object&gt;</ph> is used as the base type.","source":"If `parent` is `null`, <xref:System.Object> is used as the base type."},{"pos":[76,307],"content":"In the .NET Framework versions 1.0 and 1.1, no exception is thrown if <ph id=\"ph1\">`parent`</ph> is an interface type, but a <ph id=\"ph2\">&lt;xref:System.TypeLoadException&gt;</ph> is thrown when the <ph id=\"ph3\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method is called.","source":"In the .NET Framework versions 1.0 and 1.1, no exception is thrown if `parent` is an interface type, but a <xref:System.TypeLoadException> is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called."},{"pos":[314,754],"content":"The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types. For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type. In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.","nodes":[{"content":"The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types. For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type. In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.","pos":[0,440],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.SetParent%2A&gt;</ph> method does not check for most invalid parent types.","pos":[0,111],"source":"The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types."},{"content":"For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <ph id=\"ph1\">&lt;xref:System.Delegate&gt;</ph> type.","pos":[112,327],"source":" For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type."},{"content":"In all these cases, exceptions are thrown by the <ph id=\"ph1\">&lt;xref:System.Reflection.Emit.TypeBuilder.CreateType%2A&gt;</ph> method.","pos":[328,440],"source":" In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method."}]}]}],"pos":[361442,362203],"yaml":true,"extradata":"MT"},{"content":"The new base type.","nodes":[{"pos":[0,18],"content":"The new base type.","nodes":[{"content":"The new base type.","pos":[0,18]}]}],"pos":[362339,362358],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.  \n  \n -or-  \n  \n <code>parent</code> is `null`, and the current instance represents an interface whose attributes do not include <xref href=\"System.Reflection.TypeAttributes.Abstract\"></xref>.  \n  \n -or-  \n  \n For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."},{"pos":[112,116],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[123,298],"content":"<ph id=\"ph1\">&lt;code&gt;parent&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>, and the current instance represents an interface whose attributes do not include <ph id=\"ph3\">&lt;xref href=\"System.Reflection.TypeAttributes.Abstract\"&gt;&lt;/xref&gt;</ph>.","source":"<code>parent</code> is `null`, and the current instance represents an interface whose attributes do not include <xref href=\"System.Reflection.TypeAttributes.Abstract\"></xref>."},{"pos":[305,309],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[316,548],"content":"For the current dynamic type, the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`true`</ph>, but the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">`false`</ph>.","source":"For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`."}],"pos":[362540,363107],"yaml":true},{"content":"<code>parent</code> is an interface. This exception condition is new in the .NET Framework version 2.0.","nodes":[{"pos":[0,103],"content":"<code>parent</code> is an interface. This exception condition is new in the .NET Framework version 2.0.","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;parent&lt;/code&gt;</ph> is an interface.","pos":[0,36],"source":"<code>parent</code> is an interface."},{"content":"This exception condition is new in the .NET Framework version 2.0.","pos":[37,103]}]}],"pos":[363201,363305],"yaml":true},{"content":"Retrieves the total size of a type.","nodes":[{"pos":[0,35],"content":"Retrieves the total size of a type.","nodes":[{"content":"Retrieves the total size of a type.","pos":[0,35]}]}],"pos":[364431,364467],"yaml":true},{"content":"Read-only. Retrieves this type’s total size.","nodes":[{"pos":[0,44],"content":"Read-only. Retrieves this type’s total size.","nodes":[{"content":"Read-only. Retrieves this type’s total size.","pos":[0,44],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Retrieves this type’s total size.","pos":[11,44]}]}]}],"pos":[364571,364616],"yaml":true},{"content":"Returns the name of the type excluding the namespace.","nodes":[{"pos":[0,53],"content":"Returns the name of the type excluding the namespace.","nodes":[{"content":"Returns the name of the type excluding the namespace.","pos":[0,53]}]}],"pos":[365840,365894],"yaml":true},{"content":"Read-only. The name of the type excluding the namespace.","nodes":[{"pos":[0,56],"content":"Read-only. The name of the type excluding the namespace.","nodes":[{"content":"Read-only. The name of the type excluding the namespace.","pos":[0,56],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"The name of the type excluding the namespace.","pos":[11,56]}]}]}],"pos":[366029,366086],"yaml":true},{"content":"Not supported in dynamic modules.","nodes":[{"pos":[0,33],"content":"Not supported in dynamic modules.","nodes":[{"content":"Not supported in dynamic modules.","pos":[0,33]}]}],"pos":[367282,367316],"yaml":true},{"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"pos":[0,193],"content":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.","nodes":[{"content":"Retrieve the type using <ph id=\"ph1\">&lt;xref:System.Type.GetType%2A?displayProperty=fullName&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName&gt;</ph> and use reflection on the retrieved type.","pos":[0,193],"source":"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type."}]}],"pos":[367327,367521],"yaml":true,"extradata":"MT"},{"content":"Read-only.","nodes":[{"pos":[0,10],"content":"Read-only.","nodes":[{"content":"Read-only.","pos":[0,10]}]}],"pos":[367666,367677],"yaml":true},{"content":"Not supported in dynamic modules.","nodes":[{"pos":[0,33],"content":"Not supported in dynamic modules.","nodes":[{"content":"Not supported in dynamic modules.","pos":[0,33]}]}],"pos":[367852,367886],"yaml":true},{"content":"Returns the type token of this type.","nodes":[{"pos":[0,36],"content":"Returns the type token of this type.","nodes":[{"content":"Returns the type token of this type.","pos":[0,36]}]}],"pos":[368911,368948],"yaml":true},{"content":"Read-only. Returns the `TypeToken` of this type.","nodes":[{"pos":[0,48],"content":"Read-only. Returns the `TypeToken` of this type.","nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Returns the <ph id=\"ph1\">`TypeToken`</ph> of this type.","pos":[11,48],"source":" Returns the `TypeToken` of this type."}]}],"pos":[369106,369155],"yaml":true},{"content":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.","nodes":[{"pos":[0,105],"content":"The type was previously created using <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"&gt;&lt;/xref&gt;</ph>.","source":"The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>."}],"pos":[369337,369443],"yaml":true},{"content":"Returns the underlying system type for this `TypeBuilder`.","nodes":[{"pos":[0,58],"content":"Returns the underlying system type for this <ph id=\"ph1\">`TypeBuilder`</ph>.","source":"Returns the underlying system type for this `TypeBuilder`."}],"pos":[370529,370588],"yaml":true},{"content":"Read-only. Returns the underlying system type.","nodes":[{"pos":[0,46],"content":"Read-only. Returns the underlying system type.","nodes":[{"content":"Read-only. Returns the underlying system type.","pos":[0,46],"nodes":[{"content":"Read-only.","pos":[0,10]},{"content":"Returns the underlying system type.","pos":[11,46]}]}]}],"pos":[370717,370764],"yaml":true},{"content":"This type is an enumeration, but there is no underlying system type.","nodes":[{"pos":[0,68],"content":"This type is an enumeration, but there is no underlying system type.","nodes":[{"content":"This type is an enumeration, but there is no underlying system type.","pos":[0,68]}]}],"pos":[370957,371026],"yaml":true},{"content":"Represents that total size for the type is not specified.","nodes":[{"pos":[0,57],"content":"Represents that total size for the type is not specified.","nodes":[{"content":"Represents that total size for the type is not specified.","pos":[0,57]}]}],"pos":[372135,372193],"yaml":true},{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"pos":[0,67],"content":"Maps a set of names to a corresponding set of dispatch identifiers.","nodes":[{"content":"Maps a set of names to a corresponding set of dispatch identifiers.","pos":[0,67]}]}],"pos":[373994,374062],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"pos":[0,186],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetIDsOfNames`</ph>, see the MSDN Library.","pos":[110,186],"source":" For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library."}]}],"pos":[374073,374260],"yaml":true,"extradata":"MT"},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[374465,374508],"yaml":true},{"content":"Passed-in array of names to be mapped.","nodes":[{"pos":[0,38],"content":"Passed-in array of names to be mapped.","nodes":[{"content":"Passed-in array of names to be mapped.","pos":[0,38]}]}],"pos":[374573,374612],"yaml":true},{"content":"Count of the names to be mapped.","nodes":[{"pos":[0,32],"content":"Count of the names to be mapped.","nodes":[{"content":"Count of the names to be mapped.","pos":[0,32]}]}],"pos":[374674,374707],"yaml":true},{"content":"The locale context in which to interpret the names.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret the names.","nodes":[{"content":"The locale context in which to interpret the names.","pos":[0,51]}]}],"pos":[374767,374819],"yaml":true},{"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"pos":[0,73],"content":"Caller-allocated array which receives the IDs corresponding to the names.","nodes":[{"content":"Caller-allocated array which receives the IDs corresponding to the names.","pos":[0,73]}]}],"pos":[374883,374957],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[375183,375266],"yaml":true},{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"pos":[0,114],"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","nodes":[{"content":"Retrieves the type information for an object, which can then be used to get the type information for an interface.","pos":[0,114]}]}],"pos":[376655,376770],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"pos":[0,184],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfo`</ph>, see the MSDN Library.","pos":[110,184],"source":" For more information about `IDispatch::GetTypeInfo`, see the MSDN Library."}]}],"pos":[376781,376966],"yaml":true,"extradata":"MT"},{"content":"The type information to return.","nodes":[{"pos":[0,31],"content":"The type information to return.","nodes":[{"content":"The type information to return.","pos":[0,31]}]}],"pos":[377139,377171],"yaml":true},{"content":"The locale identifier for the type information.","nodes":[{"pos":[0,47],"content":"The locale identifier for the type information.","nodes":[{"content":"The locale identifier for the type information.","pos":[0,47]}]}],"pos":[377231,377279],"yaml":true},{"content":"Receives a pointer to the requested type information object.","nodes":[{"pos":[0,60],"content":"Receives a pointer to the requested type information object.","nodes":[{"content":"Receives a pointer to the requested type information object.","pos":[0,60]}]}],"pos":[377342,377403],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[377627,377710],"yaml":true},{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"pos":[0,92],"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","nodes":[{"content":"Retrieves the number of type information interfaces that an object provides (either 0 or 1).","pos":[0,92]}]}],"pos":[379000,379093],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"pos":[0,189],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::GetTypeInfoCount`</ph>, see the MSDN Library.","pos":[110,189],"source":" For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library."}]}],"pos":[379104,379294],"yaml":true,"extradata":"MT"},{"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"pos":[0,100],"content":"Points to a location that receives the number of type information interfaces provided by the object.","nodes":[{"content":"Points to a location that receives the number of type information interfaces provided by the object.","pos":[0,100]}]}],"pos":[379451,379552],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[379781,379864],"yaml":true},{"content":"Provides access to properties and methods exposed by an object.","nodes":[{"pos":[0,63],"content":"Provides access to properties and methods exposed by an object.","nodes":[{"content":"Provides access to properties and methods exposed by an object.","pos":[0,63]}]}],"pos":[381538,381602],"yaml":true},{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"pos":[0,179],"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.","nodes":[{"content":"This method is for access to managed classes from unmanaged code, and should not be called from managed code.","pos":[0,109]},{"content":"For more information about <ph id=\"ph1\">`IDispatch::Invoke`</ph>, see the MSDN Library.","pos":[110,179],"source":" For more information about `IDispatch::Invoke`, see the MSDN Library."}]}],"pos":[381613,381793],"yaml":true,"extradata":"MT"},{"content":"Identifies the member.","nodes":[{"pos":[0,22],"content":"Identifies the member.","nodes":[{"content":"Identifies the member.","pos":[0,22]}]}],"pos":[382061,382084],"yaml":true},{"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"pos":[0,42],"content":"Reserved for future use. Must be IID_NULL.","nodes":[{"content":"Reserved for future use. Must be IID_NULL.","pos":[0,42],"nodes":[{"content":"Reserved for future use.","pos":[0,24]},{"content":"Must be IID_NULL.","pos":[25,42]}]}]}],"pos":[382142,382185],"yaml":true},{"content":"The locale context in which to interpret arguments.","nodes":[{"pos":[0,51],"content":"The locale context in which to interpret arguments.","nodes":[{"content":"The locale context in which to interpret arguments.","pos":[0,51]}]}],"pos":[382245,382297],"yaml":true},{"content":"Flags describing the context of the call.","nodes":[{"pos":[0,41],"content":"Flags describing the context of the call.","nodes":[{"content":"Flags describing the context of the call.","pos":[0,41]}]}],"pos":[382358,382400],"yaml":true},{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"pos":[0,159],"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","nodes":[{"content":"Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.","pos":[0,159]}]}],"pos":[382467,382627],"yaml":true},{"content":"Pointer to the location where the result is to be stored.","nodes":[{"pos":[0,57],"content":"Pointer to the location where the result is to be stored.","nodes":[{"content":"Pointer to the location where the result is to be stored.","pos":[0,57]}]}],"pos":[382693,382751],"yaml":true},{"content":"Pointer to a structure that contains exception information.","nodes":[{"pos":[0,59],"content":"Pointer to a structure that contains exception information.","nodes":[{"content":"Pointer to a structure that contains exception information.","pos":[0,59]}]}],"pos":[382817,382877],"yaml":true},{"content":"The index of the first argument that has an error.","nodes":[{"pos":[0,50],"content":"The index of the first argument that has an error.","nodes":[{"content":"The index of the first argument that has an error.","pos":[0,50]}]}],"pos":[382941,382992],"yaml":true},{"content":"Late-bound access using the COM <code>IDispatch</code> interface is not supported.","nodes":[{"pos":[0,82],"content":"Late-bound access using the COM <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">IDispatch</ph><ept id=\"p1\">&lt;/code&gt;</ept> interface is not supported.","source":"Late-bound access using the COM <code>IDispatch</code> interface is not supported."}],"pos":[383211,383294],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.Emit.TypeBuilder\n  commentId: T:System.Reflection.Emit.TypeBuilder\n  id: TypeBuilder\n  children:\n  - System.Reflection.Emit.TypeBuilder.#ctor\n  - System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  - System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)\n  - System.Reflection.Emit.TypeBuilder.Assembly\n  - System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName\n  - System.Reflection.Emit.TypeBuilder.Attributes\n  - System.Reflection.Emit.TypeBuilder.BaseType\n  - System.Reflection.Emit.TypeBuilder.ContainsGenericParameters\n  - System.Reflection.Emit.TypeBuilder.CreateType\n  - System.Reflection.Emit.TypeBuilder.CreateTypeInfo\n  - System.Reflection.Emit.TypeBuilder.DeclaringMethod\n  - System.Reflection.Emit.TypeBuilder.DeclaringType\n  - System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])\n  - System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)\n  - System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)\n  - System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)\n  - System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)\n  - System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])\n  - System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)\n  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)\n  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)\n  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])\n  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  - System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)\n  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])\n  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)\n  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)\n  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)\n  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)\n  - System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)\n  - System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  - System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  - System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])\n  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  - System.Reflection.Emit.TypeBuilder.DefineTypeInitializer\n  - System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)\n  - System.Reflection.Emit.TypeBuilder.FullName\n  - System.Reflection.Emit.TypeBuilder.GenericParameterAttributes\n  - System.Reflection.Emit.TypeBuilder.GenericParameterPosition\n  - System.Reflection.Emit.TypeBuilder.GenericTypeArguments\n  - System.Reflection.Emit.TypeBuilder.GetArrayRank\n  - System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl\n  - System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)\n  - System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)\n  - System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.Emit.TypeBuilder.GetElementType\n  - System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetEvents\n  - System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)\n  - System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetGenericArguments\n  - System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints\n  - System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition\n  - System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)\n  - System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)\n  - System.Reflection.Emit.TypeBuilder.GetInterfaces\n  - System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)\n  - System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)\n  - System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.Emit.TypeBuilder.GUID\n  - System.Reflection.Emit.TypeBuilder.HasElementTypeImpl\n  - System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  - System.Reflection.Emit.TypeBuilder.IsArrayImpl\n  - System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  - System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)\n  - System.Reflection.Emit.TypeBuilder.IsByRefImpl\n  - System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl\n  - System.Reflection.Emit.TypeBuilder.IsConstructedGenericType\n  - System.Reflection.Emit.TypeBuilder.IsCreated\n  - System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.Emit.TypeBuilder.IsEnum\n  - System.Reflection.Emit.TypeBuilder.IsGenericParameter\n  - System.Reflection.Emit.TypeBuilder.IsGenericType\n  - System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\n  - System.Reflection.Emit.TypeBuilder.IsPointerImpl\n  - System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl\n  - System.Reflection.Emit.TypeBuilder.IsSecurityCritical\n  - System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical\n  - System.Reflection.Emit.TypeBuilder.IsSecurityTransparent\n  - System.Reflection.Emit.TypeBuilder.IsSerializable\n  - System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)\n  - System.Reflection.Emit.TypeBuilder.IsSZArray\n  - System.Reflection.Emit.TypeBuilder.IsTypeDefinition\n  - System.Reflection.Emit.TypeBuilder.IsValueTypeImpl\n  - System.Reflection.Emit.TypeBuilder.IsVariableBoundArray\n  - System.Reflection.Emit.TypeBuilder.MakeArrayType\n  - System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)\n  - System.Reflection.Emit.TypeBuilder.MakeByRefType\n  - System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])\n  - System.Reflection.Emit.TypeBuilder.MakePointerType\n  - System.Reflection.Emit.TypeBuilder.Module\n  - System.Reflection.Emit.TypeBuilder.Name\n  - System.Reflection.Emit.TypeBuilder.Namespace\n  - System.Reflection.Emit.TypeBuilder.PackingSize\n  - System.Reflection.Emit.TypeBuilder.ReflectedType\n  - System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  - System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  - System.Reflection.Emit.TypeBuilder.SetParent(System.Type)\n  - System.Reflection.Emit.TypeBuilder.Size\n  - System.Reflection.Emit.TypeBuilder.ToString\n  - System.Reflection.Emit.TypeBuilder.TypeHandle\n  - System.Reflection.Emit.TypeBuilder.TypeToken\n  - System.Reflection.Emit.TypeBuilder.UnderlyingSystemType\n  - System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize\n  - System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  langs:\n  - csharp\n  name: TypeBuilder\n  nameWithType: TypeBuilder\n  fullName: System.Reflection.Emit.TypeBuilder\n  type: Class\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines and creates new instances of classes during run time.\n  remarks: \"<xref:System.Reflection.Emit.TypeBuilder> is the root class used to control the creation of dynamic classes in the runtime. It provides a set of routines that are used to define classes, add methods and fields, and create the class inside a module. A new <xref:System.Reflection.Emit.TypeBuilder> can be created from a dynamic module by calling the <xref:System.Reflection.Emit.ModuleBuilder.DefineType%2A?displayProperty=fullName> method, which returns a <xref:System.Reflection.Emit.TypeBuilder> object.  \\n  \\n Reflection emit provides the following options for defining types:  \\n  \\n-   Define a class or interface with the given name.  \\n  \\n-   Define a class or interface with the given name and attributes.  \\n  \\n-   Define a class with the given name, attributes, and base class.  \\n  \\n-   Define a class with the given name, attributes, base class, and the set of interfaces that the class implements.  \\n  \\n-   Define a class with the given name, attributes, base class, and packing size.  \\n  \\n-   Define a class with the given name, attributes, base class, and the class size as a whole.  \\n  \\n-   Define a class with the given name, attributes, base class, packing size, and the class size as a whole.  \\n  \\n To create an array type, pointer type, or byref type for an incomplete type that is represented by a <xref:System.Reflection.Emit.TypeBuilder> object, use the <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method, <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method, or <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method, respectively.  \\n  \\n Before a type is used, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A?displayProperty=fullName> method must be called. **CreateType** completes the creation of the type. Following the call to **CreateType**, the caller can instantiate the type by using the <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> method, and invoke members of the type by using the <xref:System.Type.InvokeMember%2A?displayProperty=fullName> method. It is an error to invoke methods that change the implementation of a type after **CreateType** has been called. For example, the common language runtime throws an exception if the caller tries to add new members to a type.  \\n  \\n A class initializer is created by using the <xref:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer%2A?displayProperty=fullName> method. **DefineTypeInitializer** returns a <xref:System.Reflection.Emit.ConstructorBuilder> object.  \\n  \\n Nested types are defined by calling one of the <xref:System.Reflection.Emit.TypeBuilder.DefineNestedType%2A?displayProperty=fullName> methods.  \\n  \\n## Attributes  \\n The <xref:System.Reflection.Emit.TypeBuilder> class uses the <xref:System.Reflection.TypeAttributes> enumeration to further specify the characteristics of the type to be created:  \\n  \\n-   Interfaces are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> and <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attributes.  \\n  \\n-   Concrete classes (classes that cannot be extended) are specified using the <xref:System.Reflection.TypeAttributes?displayProperty=fullName> attribute.  \\n  \\n-   Several attributes determine type visibility. See the description of the <xref:System.Reflection.TypeAttributes> enumeration.  \\n  \\n-   If <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified, the class loader lays out fields in the order they are read from metadata. The class loader considers the specified packing size but ignores any specified field offsets. The metadata preserves the order in which the field definitions are emitted. Even across a merge, the metadata will not reorder the field definitions. The loader will honor the specified field offsets only if <xref:System.Reflection.TypeAttributes?displayProperty=fullName> is specified.  \\n  \\n## Known Issues  \\n  \\n-   Reflection emit does not verify whether a non-abstract class that implements an interface has implemented all the methods declared in the interface. However, if the class does not implement all the methods declared in an interface, the runtime does not load the class.  \\n  \\n-   Although <xref:System.Reflection.Emit.TypeBuilder> is derived from <xref:System.Type>, some of the abstract methods defined in the <xref:System.Type> class are not fully implemented in the <xref:System.Reflection.Emit.TypeBuilder> class. Calls to these <xref:System.Reflection.Emit.TypeBuilder> methods throw a <xref:System.NotSupportedException> exception. The desired functionality can be obtained by retrieving the created type using the <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and reflecting on the retrieved type.\"\n  example:\n  - \"This section contains two code examples. The first example shows how to create a dynamic type with a field, constructor, property, and method. The second example builds a method dynamically from user input.  \\n  \\n **Example one**  \\n  \\n The following code example shows how to define a dynamic assembly with one module. The module in the example assembly contains one type, `MyDynamicType`, which has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result.  \\n  \\n The <xref:System.Reflection.Emit.AssemblyBuilderAccess?displayProperty=fullName> field is specified when the assembly is created. The assembly code is used immediately, and the assembly is also saved to disk so that it can be examined with [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) or used in another program.  \\n  \\n [!code-cpp[AssemblyBuilderClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyBuilderClass/cpp/24895.cpp#1)]\\n [!code-csharp[AssemblyBuilderClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyBuilderClass/cs/24895.cs#1)]\\n [!code-vb[AssemblyBuilderClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyBuilderClass/vb/24895.vb#1)]  \\n  \\n **Example two**  \\n  \\n The following code sample demonstrates how to build a dynamic type by using `TypeBuilder`.  \\n  \\n [!code-cpp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit ILGenerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit ILGenerator Example/VB/source.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]\n\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class TypeBuilder : System.Reflection.TypeInfo, System.Runtime.InteropServices._TypeBuilder\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.TypeInfo\n  implements:\n  - System.Runtime.InteropServices._TypeBuilder\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.Equals(System.Object)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.GetHashCode\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.TypeInfo.AsType\n  - System.Reflection.TypeInfo.DeclaredConstructors\n  - System.Reflection.TypeInfo.DeclaredEvents\n  - System.Reflection.TypeInfo.DeclaredFields\n  - System.Reflection.TypeInfo.DeclaredMembers\n  - System.Reflection.TypeInfo.DeclaredMethods\n  - System.Reflection.TypeInfo.DeclaredNestedTypes\n  - System.Reflection.TypeInfo.DeclaredProperties\n  - System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  - System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  - System.Reflection.TypeInfo.GenericTypeParameters\n  - System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  - System.Reflection.TypeInfo.GetConstructors\n  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  - System.Reflection.TypeInfo.GetDefaultMembers\n  - System.Reflection.TypeInfo.GetEnumName(System.Object)\n  - System.Reflection.TypeInfo.GetEnumNames\n  - System.Reflection.TypeInfo.GetEnumUnderlyingType\n  - System.Reflection.TypeInfo.GetEnumValues\n  - System.Reflection.TypeInfo.GetEvent(System.String)\n  - System.Reflection.TypeInfo.GetField(System.String)\n  - System.Reflection.TypeInfo.GetFields\n  - System.Reflection.TypeInfo.GetInterface(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMembers\n  - System.Reflection.TypeInfo.GetMethod(System.String)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetMethods\n  - System.Reflection.TypeInfo.GetNestedType(System.String)\n  - System.Reflection.TypeInfo.GetNestedTypes\n  - System.Reflection.TypeInfo.GetProperties\n  - System.Reflection.TypeInfo.GetProperty(System.String)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  - System.Reflection.TypeInfo.HasElementType\n  - System.Reflection.TypeInfo.ImplementedInterfaces\n  - System.Reflection.TypeInfo.IsAbstract\n  - System.Reflection.TypeInfo.IsAnsiClass\n  - System.Reflection.TypeInfo.IsArray\n  - System.Reflection.TypeInfo.IsAutoClass\n  - System.Reflection.TypeInfo.IsAutoLayout\n  - System.Reflection.TypeInfo.IsByRef\n  - System.Reflection.TypeInfo.IsClass\n  - System.Reflection.TypeInfo.IsCOMObject\n  - System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  - System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  - System.Reflection.TypeInfo.IsExplicitLayout\n  - System.Reflection.TypeInfo.IsImport\n  - System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  - System.Reflection.TypeInfo.IsInterface\n  - System.Reflection.TypeInfo.IsLayoutSequential\n  - System.Reflection.TypeInfo.IsMarshalByRef\n  - System.Reflection.TypeInfo.IsNested\n  - System.Reflection.TypeInfo.IsNestedAssembly\n  - System.Reflection.TypeInfo.IsNestedFamANDAssem\n  - System.Reflection.TypeInfo.IsNestedFamily\n  - System.Reflection.TypeInfo.IsNestedFamORAssem\n  - System.Reflection.TypeInfo.IsNestedPrivate\n  - System.Reflection.TypeInfo.IsNestedPublic\n  - System.Reflection.TypeInfo.IsNotPublic\n  - System.Reflection.TypeInfo.IsPointer\n  - System.Reflection.TypeInfo.IsPrimitive\n  - System.Reflection.TypeInfo.IsPublic\n  - System.Reflection.TypeInfo.IsSealed\n  - System.Reflection.TypeInfo.IsSpecialName\n  - System.Reflection.TypeInfo.IsUnicodeClass\n  - System.Reflection.TypeInfo.IsValueType\n  - System.Reflection.TypeInfo.IsVisible\n  - System.Reflection.TypeInfo.MemberType\n  - System.Reflection.TypeInfo.StructLayoutAttribute\n  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  - System.Reflection.TypeInfo.TypeInitializer\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  attributes:\n  - type: System.Runtime.InteropServices.ClassInterfaceAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.#ctor\n  commentId: M:System.Reflection.Emit.TypeBuilder.#ctor\n  id: '#ctor'\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: TypeBuilder()\n  nameWithType: TypeBuilder.TypeBuilder()\n  fullName: TypeBuilder.TypeBuilder()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected TypeBuilder ();\n    parameters: []\n  overload: System.Reflection.Emit.TypeBuilder.#ctor*\n  exceptions: []\n  version:\n  - xamarinios-10.8\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  commentId: M:System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  id: AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  nameWithType: TypeBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  fullName: TypeBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds declarative security to this type.\n  remarks: \"`AddDeclarativeSecurity` may be called several times with each call specifying a security action (such as Demand, Assert, or Deny) and a set of permissions that apply to the action.  \\n  \\n> [!NOTE]\\n>  In the .NET Framework versions 1.0, 1.1, and 2.0, the declarative security attributes applied to a type by using this method are stored in the old XML metadata format.\"\n  example:\n  - \"The following example demonstrates the use of the `AddDeclarativeSecurity` method to add a security demand for <xref:System.Security.Permissions.SecurityPermission> with the <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName> flag to a dynamic type named `MyDynamicClass`, in an assembly named EmittedExample.dll. The example produces no console output; after you run it, you can use [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine EmittedExample.dll. In `MyDynamicClass`, open the `.class public auto ansi` statement to see the declarative permission.  \\n  \\n [!code-cpp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CPP/typebuilder_adddeclarativesecurity.cpp#1)]\\n [!code-csharp[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/CS/typebuilder_adddeclarativesecurity.cs#1)]\\n [!code-vb[TypeBuilder_AddDeclarativeSecurity#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_AddDeclarativeSecurity/VB/typebuilder_adddeclarativesecurity.vb#1)]\"\n  syntax:\n    content: public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);\n    parameters:\n    - id: action\n      type: System.Security.Permissions.SecurityAction\n      description: The security action to be taken such as Demand, Assert, and so on.\n    - id: pset\n      type: System.Security.PermissionSet\n      description: The set of permissions the action applies to.\n  overload: System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>action</code> is invalid (`RequestMinimum`, `RequestOptional`, and `RequestRefuse` are invalid).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The containing type has been created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n The permission set <code>pset</code> contains an action that was added earlier by `AddDeclarativeSecurity`.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>pset</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)\n  commentId: M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)\n  id: AddInterfaceImplementation(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: AddInterfaceImplementation(Type)\n  nameWithType: TypeBuilder.AddInterfaceImplementation(Type)\n  fullName: TypeBuilder.AddInterfaceImplementation(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds an interface that this type implements.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the implementation of an interface on a dynamically created type using `AddInterfaceImplementation`.  \\n  \\n [!code-cpp[TypeBuilder_Sample_4#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#3)]\\n [!code-csharp[TypeBuilder_Sample_4#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#3)]\\n [!code-vb[TypeBuilder_Sample_4#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public void AddInterfaceImplementation (Type interfaceType);\n    parameters:\n    - id: interfaceType\n      type: System.Type\n      description: The interface that this type implements.\n  overload: System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>interfaceType</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.Assembly\n  commentId: P:System.Reflection.Emit.TypeBuilder.Assembly\n  id: Assembly\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: Assembly\n  nameWithType: TypeBuilder.Assembly\n  fullName: TypeBuilder.Assembly\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the dynamic assembly that contains this type definition.\n  syntax:\n    content: public override System.Reflection.Assembly Assembly { get; }\n    return:\n      type: System.Reflection.Assembly\n      description: Read-only. Retrieves the dynamic assembly that contains this type definition.\n  overload: System.Reflection.Emit.TypeBuilder.Assembly*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName\n  commentId: P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName\n  id: AssemblyQualifiedName\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: AssemblyQualifiedName\n  nameWithType: TypeBuilder.AssemblyQualifiedName\n  fullName: TypeBuilder.AssemblyQualifiedName\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the full name of this type qualified by the display name of the assembly.\n  remarks: \"The format of the returned string is the concatenation of the full name of the type (<xref:System.Reflection.Emit.TypeBuilder.FullName%2A>) and the display name of the assembly (<xref:System.Reflection.AssemblyName.FullName%2A?displayProperty=fullName>), separated by a comma and a space.  \\n  \\n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \\n  \\n## Version Information  \\n In the .NET Framework versions 1.0 and 1.1, the value of this property does not include the culture or public key.\"\n  syntax:\n    content: public override string AssemblyQualifiedName { get; }\n    return:\n      type: System.String\n      description: Read-only. The full name of this type qualified by the display name of the assembly.\n  overload: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.Attributes\n  commentId: P:System.Reflection.Emit.TypeBuilder.Attributes\n  id: Attributes\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: Attributes\n  nameWithType: TypeBuilder.Attributes\n  fullName: TypeBuilder.Attributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override System.Reflection.TypeAttributes Attributes { get; }\n    return:\n      type: System.Reflection.TypeAttributes\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.Attributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.BaseType\n  commentId: P:System.Reflection.Emit.TypeBuilder.BaseType\n  id: BaseType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: BaseType\n  nameWithType: TypeBuilder.BaseType\n  fullName: TypeBuilder.BaseType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the base type of this type.\n  syntax:\n    content: public override Type BaseType { get; }\n    return:\n      type: System.Type\n      description: Read-only. Retrieves the base type of this type.\n  overload: System.Reflection.Emit.TypeBuilder.BaseType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.ContainsGenericParameters\n  commentId: P:System.Reflection.Emit.TypeBuilder.ContainsGenericParameters\n  id: ContainsGenericParameters\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: ContainsGenericParameters\n  nameWithType: TypeBuilder.ContainsGenericParameters\n  fullName: TypeBuilder.ContainsGenericParameters\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool ContainsGenericParameters { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.ContainsGenericParameters*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.CreateType\n  commentId: M:System.Reflection.Emit.TypeBuilder.CreateType\n  id: CreateType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: CreateType()\n  nameWithType: TypeBuilder.CreateType()\n  fullName: TypeBuilder.CreateType()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Creates a <xref href=\"System.Type\"></xref> object for the class. After defining fields and methods on the class, `CreateType` is called in order to load its `Type` object.\n  remarks: \"If this type is a nested type, the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method must be called on the enclosing type before it is called on the nested type.  \\n  \\n If the current type derives from an incomplete type or implements incomplete interfaces, call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the parent type and the interface types before calling it on the current type.  \\n  \\n If the enclosing type contains a field that is a value type defined as a nested type (for example, a field that is an enumeration defined as a nested type), calling the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on the enclosing type will generate a <xref:System.AppDomain.TypeResolve?displayProperty=fullName> event. This is because the loader cannot determine the size of the enclosing type until the nested type has been completed. The caller should define a handler for the <xref:System.AppDomain.TypeResolve> event to complete the definition of the nested type by calling <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> on the <xref:System.Reflection.Emit.TypeBuilder> object that represents the nested type. The code example for this topic shows how to define such an event handler.  \\n  \\n A type is created only once, no matter how many times the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called. All calls return the same <xref:System.Type> object.\"\n  example:\n  - \"The following code example shows how to define an event handler for the <xref:System.AppDomain.TypeResolve?displayProperty=fullName> event, in order to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method on a nested type during a <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> call on the enclosing type.  \\n  \\n [!code-cpp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CPP/nestedenum.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/CS/nestedenum.cs#1)]\\n [!code-vb[System.Reflection.Emit.TypeBuilder.CreateType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.TypeBuilder.CreateType Example/VB/nestedenum.vb#1)]\"\n  syntax:\n    content: public Type CreateType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: Returns the new <xref href=\"System.Type\"></xref> object for this class.\n  overload: System.Reflection.Emit.TypeBuilder.CreateType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The enclosing type has not been created.  \\n  \\n -or-  \\n  \\n This type is non-abstract and contains an abstract method.  \\n  \\n -or-  \\n  \\n This type is not an abstract class or an interface and has a method without a method body.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The type contains invalid Microsoft intermediate language (MSIL) code.  \\n  \\n -or-  \\n  \\n The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: The type cannot be loaded. For example, it contains a `static` method that has the calling convention <xref href=\"System.Reflection.CallingConventions.HasThis\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.CreateTypeInfo\n  commentId: M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo\n  id: CreateTypeInfo\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: CreateTypeInfo()\n  nameWithType: TypeBuilder.CreateTypeInfo()\n  fullName: TypeBuilder.CreateTypeInfo()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a <xref href=\"System.Reflection.TypeInfo\"></xref> object that represents this type.\n  syntax:\n    content: public System.Reflection.TypeInfo CreateTypeInfo ();\n    parameters: []\n    return:\n      type: System.Reflection.TypeInfo\n      description: An object that represents this type.\n  overload: System.Reflection.Emit.TypeBuilder.CreateTypeInfo*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DeclaringMethod\n  commentId: P:System.Reflection.Emit.TypeBuilder.DeclaringMethod\n  id: DeclaringMethod\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DeclaringMethod\n  nameWithType: TypeBuilder.DeclaringMethod\n  fullName: TypeBuilder.DeclaringMethod\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the method that declared the current generic type parameter.\n  remarks: >-\n    > [!NOTE]\n\n    >  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.\n  syntax:\n    content: public override System.Reflection.MethodBase DeclaringMethod { get; }\n    return:\n      type: System.Reflection.MethodBase\n      description: A <xref href=\"System.Reflection.MethodBase\"></xref> that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, `null`.\n  overload: System.Reflection.Emit.TypeBuilder.DeclaringMethod*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DeclaringType\n  commentId: P:System.Reflection.Emit.TypeBuilder.DeclaringType\n  id: DeclaringType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DeclaringType\n  nameWithType: TypeBuilder.DeclaringType\n  fullName: TypeBuilder.DeclaringType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the type that declared this type.\n  syntax:\n    content: public override Type DeclaringType { get; }\n    return:\n      type: System.Type\n      description: Read-only. The type that declared this type.\n  overload: System.Reflection.Emit.TypeBuilder.DeclaringType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])\n  id: DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineConstructor(MethodAttributes, CallingConventions, Type[])\n  nameWithType: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[])\n  fullName: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new constructor to the type, with the given attributes and signature.\n  remarks: \"If you do not define a constructor for your dynamic type, a default constructor is provided automatically, and it calls the default constructor of the base class.  \\n  \\n If you define a constructor for your dynamic type, a default constructor is not provided. You have the following options for providing a default constructor in addition to the constructor you defined:  \\n  \\n-   If you want a default constructor that simply calls the default constructor of the base class, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor%2A> method to create one (and optionally restrict access to it). Do not provide an implementation for this default constructor. If you do, an exception is thrown when you try to use the constructor. No exception is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.  \\n  \\n-   If you want a default constructor that does something more than simply calling the default constructor of the base class, or that calls another constructor of the base class, or that does something else entirely, you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A?displayProperty=fullName> method to create one, and provide your own implementation.\"\n  example:\n  - \"The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.  \\n  \\n [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]\\n [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]\\n [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes);\n    parameters:\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the constructor.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the constructor.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The parameter types of the constructor.\n    return:\n      type: System.Reflection.Emit.ConstructorBuilder\n      description: The defined constructor.\n  overload: System.Reflection.Emit.TypeBuilder.DefineConstructor*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])\n  id: DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineConstructor(MethodAttributes, CallingConventions, Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.\n  remarks: \"This overload is provided for designers of managed compilers.  \\n  \\n> [!NOTE]\\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);\n    parameters:\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the constructor.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the constructor.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The parameter types of the constructor.\n    - id: requiredCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: optionalCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.\n    return:\n      type: System.Reflection.Emit.ConstructorBuilder\n      description: The defined constructor.\n  overload: System.Reflection.Emit.TypeBuilder.DefineConstructor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The size of <code>requiredCustomModifiers</code> or <code>optionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)\n  id: DefineDefaultConstructor(System.Reflection.MethodAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineDefaultConstructor(MethodAttributes)\n  nameWithType: TypeBuilder.DefineDefaultConstructor(MethodAttributes)\n  fullName: TypeBuilder.DefineDefaultConstructor(MethodAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines the default constructor. The constructor defined here will simply call the default constructor of the parent.\n  remarks: \"Because the default constructor is automatically defined, it is necessary to call this method only in the following situations:  \\n  \\n-   You have defined another constructor and you also want a default constructor that simply calls the base class constructor.  \\n  \\n-   You want to set the attributes on the default constructor to something other than <xref:System.Reflection.MethodAttributes.PrivateScope>, <xref:System.Reflection.MethodAttributes.Public>, <xref:System.Reflection.MethodAttributes.HideBySig>, <xref:System.Reflection.MethodAttributes.SpecialName>, and <xref:System.Reflection.MethodAttributes.RTSpecialName>.\"\n  example:\n  - \"The following code sample demonstrates the use of `DefineConstructor` to set a constructor's particular signature and attributes on a dynamic type and return a corresponding <xref:System.Reflection.Emit.ConstructorBuilder> for MSIL population.  \\n  \\n [!code-cpp[TypeBuilder_Sample_4#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Sample_4/CPP/typebuilder_sample_4.cpp#2)]\\n [!code-csharp[TypeBuilder_Sample_4#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Sample_4/CS/typebuilder_sample_4.cs#2)]\\n [!code-vb[TypeBuilder_Sample_4#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Sample_4/VB/typebuilder_sample_4.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor (System.Reflection.MethodAttributes attributes);\n    parameters:\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: A `MethodAttributes` object representing the attributes to be applied to the constructor.\n    return:\n      type: System.Reflection.Emit.ConstructorBuilder\n      description: Returns the constructor.\n  overload: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The parent type (base type) does not have a default constructor.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)\n  id: DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineEvent(String, EventAttributes, Type)\n  nameWithType: TypeBuilder.DefineEvent(String, EventAttributes, Type)\n  fullName: TypeBuilder.DefineEvent(String, EventAttributes, Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new event to the type, with the given name, attributes and event type.\n  syntax:\n    content: public System.Reflection.Emit.EventBuilder DefineEvent (string name, System.Reflection.EventAttributes attributes, Type eventtype);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the event. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.EventAttributes\n      description: The attributes of the event.\n    - id: eventtype\n      type: System.Type\n      description: The type of the event.\n    return:\n      type: System.Reflection.Emit.EventBuilder\n      description: The defined event.\n  overload: System.Reflection.Emit.TypeBuilder.DefineEvent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>name</code> is zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n <code>eventtype</code> is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)\n  id: DefineField(System.String,System.Type,System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineField(String, Type, FieldAttributes)\n  nameWithType: TypeBuilder.DefineField(String, Type, FieldAttributes)\n  fullName: TypeBuilder.DefineField(String, Type, FieldAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new field to the type, with the given name, attributes, and field type.\n  syntax:\n    content: public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, System.Reflection.FieldAttributes attributes);\n    parameters:\n    - id: fieldName\n      type: System.String\n      description: The name of the field. <code>fieldName</code> cannot contain embedded nulls.\n    - id: type\n      type: System.Type\n      description: The type of the field\n    - id: attributes\n      type: System.Reflection.FieldAttributes\n      description: The attributes of the field.\n    return:\n      type: System.Reflection.Emit.FieldBuilder\n      description: The defined field.\n  overload: System.Reflection.Emit.TypeBuilder.DefineField*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>fieldName</code> is zero.  \\n  \\n -or-  \\n  \\n <code>type</code> is System.Void.  \\n  \\n -or-  \\n  \\n A total size was specified for the parent class of this field.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>fieldName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)\n  id: DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineField(String, Type, Type[], Type[], FieldAttributes)\n  nameWithType: TypeBuilder.DefineField(String, Type, Type[], Type[], FieldAttributes)\n  fullName: TypeBuilder.DefineField(String, Type, Type[], Type[], FieldAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.\n  remarks: This overload is provided for designers of managed compilers.\n  syntax:\n    content: public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes);\n    parameters:\n    - id: fieldName\n      type: System.String\n      description: The name of the field. <code>fieldName</code> cannot contain embedded nulls.\n    - id: type\n      type: System.Type\n      description: The type of the field\n    - id: requiredCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers for the field, such as <xref href=\"Microsoft.VisualC.IsConstModifier\"></xref>.\n    - id: optionalCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers for the field, such as <xref href=\"Microsoft.VisualC.IsConstModifier\"></xref>.\n    - id: attributes\n      type: System.Reflection.FieldAttributes\n      description: The attributes of the field.\n    return:\n      type: System.Reflection.Emit.FieldBuilder\n      description: The defined field.\n  overload: System.Reflection.Emit.TypeBuilder.DefineField*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>fieldName</code> is zero.  \\n  \\n -or-  \\n  \\n <code>type</code> is System.Void.  \\n  \\n -or-  \\n  \\n A total size was specified for the parent class of this field.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>fieldName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])\n  id: DefineGenericParameters(System.String[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineGenericParameters(String[])\n  nameWithType: TypeBuilder.DefineGenericParameters(String[])\n  fullName: TypeBuilder.DefineGenericParameters(String[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to set their constraints.\n  remarks: Calling this method makes the current type a generic type. If the method is called again on the same type, an <xref:System.InvalidOperationException> is thrown.\n  example:\n  - \"The following code example creates a generic type with two type parameters and saves them in the assembly GenericEmitExample1.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to view the generated types. For a more detailed explanation of the steps involved in defining a dynamic generic type, see [How to: Define a Generic Type with Reflection Emit](~/docs/framework/reflection-and-codedom/how-to-define-a-generic-type-with-reflection-emit.md).  \\n  \\n [!code-cpp[EmitGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR/EmitGenericType/CPP/source.cpp#1)]\\n [!code-csharp[EmitGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR/EmitGenericType/CS/source.cs#1)]\\n [!code-vb[EmitGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EmitGenericType/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (string[] names);\n    parameters:\n    - id: names\n      type: System.String[]\n      description: An array of names for the generic type parameters.\n    return:\n      type: System.Reflection.Emit.GenericTypeParameterBuilder[]\n      description: An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\"></xref> objects that can be used to define the constraints of the generic type parameters for the current type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineGenericParameters*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Generic type parameters have already been defined for this type.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>names</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of <code>names</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>names</code> is an empty array.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)\n  id: DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineInitializedData(String, Byte[], FieldAttributes)\n  nameWithType: TypeBuilder.DefineInitializedData(String, Byte[], FieldAttributes)\n  fullName: TypeBuilder.DefineInitializedData(String, Byte[], FieldAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines initialized data field in the .sdata section of the portable executable (PE) file.\n  remarks: The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.\n  syntax:\n    content: public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name used to refer to the data. <code>name</code> cannot contain embedded nulls.\n    - id: data\n      type: System.Byte[]\n      description: The blob of data.\n    - id: attributes\n      type: System.Reflection.FieldAttributes\n      description: The attributes for the field.\n    return:\n      type: System.Reflection.Emit.FieldBuilder\n      description: A field to reference the data.\n  overload: System.Reflection.Emit.TypeBuilder.DefineInitializedData*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Length of <code>name</code> is zero.  \\n  \\n -or-  \\n  \\n The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> or <code>data</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> has been previously called.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)\n  id: DefineMethod(System.String,System.Reflection.MethodAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineMethod(String, MethodAttributes)\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes)\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new method to the type, with the specified name and method attributes.\n  remarks: \"Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.  \\n  \\n This method overload defines a method with <xref:System.Reflection.CallingConventions?displayProperty=fullName>. If you need to define a method without a signature, with a different calling convention, use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overload.\"\n  example:\n  - \"The following code example defines a generic method named `DemoMethod` whose parameter type and return type are specified by its generic type parameters. The method is defined without a signature, using the standard calling convention. The <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method is used to make `DemoMethod` a generic method, and the newly defined type parameters are then used for the signature and return type.  \\n  \\n This code example is part of a larger example provided for the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A> method.  \\n  \\n [!code-cpp[GenericMethodBuilder#4](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#4)]\\n [!code-csharp[GenericMethodBuilder#4](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#4)]\\n [!code-vb[GenericMethodBuilder#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#4)]  \\n[!code-cpp[GenericMethodBuilder#3](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#3)]\\n[!code-csharp[GenericMethodBuilder#3](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#3)]\\n[!code-vb[GenericMethodBuilder#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#3)]  \\n[!code-cpp[GenericMethodBuilder#5](~/samples/snippets/cpp/VS_Snippets_CLR/GenericMethodBuilder/cpp/source.cpp#5)]\\n[!code-csharp[GenericMethodBuilder#5](~/samples/snippets/csharp/VS_Snippets_CLR/GenericMethodBuilder/CS/source.cs#5)]\\n[!code-vb[GenericMethodBuilder#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GenericMethodBuilder/VB/source.vb#5)]\"\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the method. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method.\n  overload: System.Reflection.Emit.TypeBuilder.DefineMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>name</code> is zero.  \\n  \\n -or-  \\n  \\n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)\n  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineMethod(String, MethodAttributes, CallingConventions)\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions)\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new method to the type, with the specified name, method attributes, and calling convention.\n  remarks: Use this method overload when you do not know the method signature at the time you define the method. For example, the parameter types and return type of a generic method might be specified by the method's generic type parameters, which must be defined after the method has been added to the type. The parameters and return type of the method can be set later using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method.\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the method. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the method.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method.\n  overload: System.Reflection.Emit.TypeBuilder.DefineMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>name</code> is zero.  \\n  \\n -or-  \\n  \\n The type of the parent of this method is an interface and this method is not virtual (`Overridable` in Visual Basic).\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])\n  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineMethod(String, MethodAttributes, Type, Type[])\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, Type, Type[])\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, Type, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new method to the type, with the specified name, method attributes, and method signature.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.  \\n  \\n [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]\\n [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]\\n [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]\"\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the method. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the method.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: The defined method.\n  overload: System.Reflection.Emit.TypeBuilder.DefineMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>name</code> is zero.  \\n  \\n -or-  \\n  \\n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates the use of `DefineMethod` to set a constructor's particular signature and attributes on a dynamic type and to return a corresponding <xref:System.Reflection.Emit.MethodBuilder> for MSIL population.  \\n  \\n [!code-cpp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CPP/typebuilder_definenestedtype1.cpp#2)]\\n [!code-csharp[TypeBuilder_DefineNestedType1#2](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/CS/typebuilder_definenestedtype1.cs#2)]\\n [!code-vb[TypeBuilder_DefineNestedType1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineNestedType1/VB/typebuilder_definenestedtype1.vb#2)]\"\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the method. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the method.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the method.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the newly defined method.\n  overload: System.Reflection.Emit.TypeBuilder.DefineMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>name</code> is zero.  \\n  \\n -or-  \\n  \\n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.\n  remarks: \"Use this overload if you need to specify custom modifiers. If you need to specify custom modifiers after the method has been created, as you would, for example, with a generic method whose parameter types are specified by its generic type parameters, you can use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%29> or <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%28System.String%2CSystem.Reflection.MethodAttributes%2CSystem.Reflection.CallingConventions%29> method overloads to define the method and then use the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method to define the parameter and return types with custom modifiers.  \\n  \\n> [!NOTE]\\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the method. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the method.\n    - id: returnType\n      type: System.Type\n      description: The return type of the method.\n    - id: returnTypeRequiredCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.\n    - id: returnTypeOptionalCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the method.\n    - id: parameterTypeRequiredCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: parameterTypeOptionalCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> object representing the newly added method.\n  overload: System.Reflection.Emit.TypeBuilder.DefineMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The length of <code>name</code> is zero.  \\n  \\n -or-  \\n  \\n The type of the parent of this method is an interface, and this method is not virtual (`Overridable` in Visual Basic).  \\n  \\n -or-  \\n  \\n The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  id: DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineMethodOverride(MethodInfo, MethodInfo)\n  nameWithType: TypeBuilder.DefineMethodOverride(MethodInfo, MethodInfo)\n  fullName: TypeBuilder.DefineMethodOverride(MethodInfo, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Specifies a given method body that implements a given method declaration, potentially with a different name.\n  remarks: \"Do not use this method to emit method overrides or interface implementations. To override a method of a base class or to implement a method of an interface, simply emit a method with the same name and signature as the method to be overridden or implemented, as demonstrated in the code example.  \\n  \\n The <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is used when a method body and a method declaration have different names. For example, a class might override a base class method and also provide a separate implementation for an interface member with the same name, as demonstrated in the code example.  \\n  \\n `DefineMethodOverride` defines a `methodimpl`, which consists of a pair of metadata tokens. One token points to an implementation, and the other token points to a declaration that the body implements. The body must be defined on the type the method impl is defined on, and the body must be virtual (`Overridable` in Visual Basic). The declaration can be made to a method defined on an interface implemented by the type, a method on a derived class, or a method defined in the type. If the declaration is on an interface only, the slot defined for the interface is altered. If the declaration is made to a method on a base type, the slot for the method is overridden and any duplicates for the overridden method are also replaced. The overridden method cannot be the actual method that is declared. If the method is on the same type, the slot is replaced and any duplicates for the replaced methods are overridden.  \\n  \\n> [!NOTE]\\n>  For more information about method impls, see `MethodImpl` in the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n> [!IMPORTANT]\\n>  After the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method is called, some features of `methodInfoBody` cannot be changed. For example, you cannot apply an attribute to a generic type parameter of `methodInfoBody` by using the <xref:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes%2A> method. If you must use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method, do so after all characteristics of `methodInfoBody` have been defined.\"\n  example:\n  - \"The following code example contains an interface `I` with a method `M()`, a base class `A` that implements the interface, and a derived class `C` that overrides the base class implementation of `M()` and also provides a separate explicit implementation of `I.M()`.  \\n  \\n The `main()` method of the code example shows how to emit the derived class `C`. The override of `A.M()` is accomplished simply by emitting a method `M()` with the same signature. However, to provide a separate implementation of `I.M()`, you must define a method body and then use the <xref:System.Reflection.Emit.TypeBuilder.DefineMethodOverride%2A> method to associate that method body with a <xref:System.Reflection.MethodInfo> representing `I.M()`. The name of the method body does not matter.  \\n  \\n The code example creates an instance of the emitted class. It obtains a <xref:System.Reflection.MethodInfo> object for `I.M()`, and uses it to invoke the emitted class's explicit interface implementation. It then obtains a <xref:System.Reflection.MethodInfo> object for `A.M()`, and uses it to invoke the emitted class's override of that method.  \\n  \\n [!code-cpp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cpp/source.cpp#1)]\\n [!code-csharp[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/cs/source.cs#1)]\\n [!code-vb[TypeBuilder.DefineMethodOverride#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.DefineMethodOverride/vb/source.vb#1)]\"\n  syntax:\n    content: public void DefineMethodOverride (System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration);\n    parameters:\n    - id: methodInfoBody\n      type: System.Reflection.MethodInfo\n      description: The method body to be used. This should be a `MethodBuilder` object.\n    - id: methodInfoDeclaration\n      type: System.Reflection.MethodInfo\n      description: The method whose declaration is to be used.\n  overload: System.Reflection.Emit.TypeBuilder.DefineMethodOverride*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>methodInfoBody</code> does not belong to this class.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>methodInfoBody</code> or <code>methodInfoDeclaration</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n The declaring type of <code>methodInfoBody</code> is not the type represented by this <xref href=\\\"System.Reflection.Emit.TypeBuilder\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)\n  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineNestedType(String, TypeAttributes, Type, PackingSize, Int32)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize, Int32)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize, Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a nested type, given its name, attributes, size, and the type that it extends.\n  syntax:\n    content: public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize, int typeSize);\n    parameters:\n    - id: name\n      type: System.String\n      description: The short name of the type. <code>name</code> cannot contain embedded null values.\n    - id: attr\n      type: System.Reflection.TypeAttributes\n      description: The attributes of the type.\n    - id: parent\n      type: System.Type\n      description: The type that the nested type extends.\n    - id: packSize\n      type: System.Reflection.Emit.PackingSize\n      description: The packing size of the type.\n    - id: typeSize\n      type: System.Int32\n      description: The total size of the type.\n    return:\n      type: System.Reflection.Emit.TypeBuilder\n      description: The defined nested type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])\n  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineNestedType(String, TypeAttributes, Type, Type[])\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Type[])\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.\n  remarks: \"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \\n  \\n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \\n  \\n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \\n  \\n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);\n    parameters:\n    - id: name\n      type: System.String\n      description: The short name of the type. <code>name</code> cannot contain embedded nulls.\n    - id: attr\n      type: System.Reflection.TypeAttributes\n      description: The attributes of the type.\n    - id: parent\n      type: System.Type\n      description: The type that the nested type extends.\n    - id: interfaces\n      type: System.Type[]\n      description: The interfaces that the nested type implements.\n    return:\n      type: System.Reflection.Emit.TypeBuilder\n      description: The defined nested type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The nested attribute is not specified.  \\n  \\n -or-  \\n  \\n This type is sealed.  \\n  \\n -or-  \\n  \\n This type is an array.  \\n  \\n -or-  \\n  \\n This type is an interface, but the nested type is not an interface.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> is zero or greater than 1023.  \\n  \\n -or-  \\n  \\n This operation would create a type with a duplicate <xref href=\\\"System.Reflection.Emit.TypeBuilder.FullName\\\"></xref> in the current assembly.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n An element of the <code>interfaces</code> array is `null`.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)\n  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineNestedType(String, TypeAttributes, Type, Int32)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Int32)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.\n  remarks: \"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \\n  \\n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \\n  \\n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \\n  \\n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.\"\n  syntax:\n    content: public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, int typeSize);\n    parameters:\n    - id: name\n      type: System.String\n      description: The short name of the type. <code>name</code> cannot contain embedded nulls.\n    - id: attr\n      type: System.Reflection.TypeAttributes\n      description: The attributes of the type.\n    - id: parent\n      type: System.Type\n      description: The type that the nested type extends.\n    - id: typeSize\n      type: System.Int32\n      description: The total size of the type.\n    return:\n      type: System.Reflection.Emit.TypeBuilder\n      description: The defined nested type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The nested attribute is not specified.  \\n  \\n -or-  \\n  \\n This type is sealed.  \\n  \\n -or-  \\n  \\n This type is an array.  \\n  \\n -or-  \\n  \\n This type is an interface, but the nested type is not an interface.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> is zero or greater than 1023.  \\n  \\n -or-  \\n  \\n This operation would create a type with a duplicate <xref href=\\\"System.Reflection.Emit.TypeBuilder.FullName\\\"></xref> in the current assembly.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)\n  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineNestedType(String, TypeAttributes, Type, PackingSize)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a nested type, given its name, attributes, the type that it extends, and the packing size.\n  remarks: \"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \\n  \\n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \\n  \\n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \\n  \\n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.\"\n  syntax:\n    content: public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize);\n    parameters:\n    - id: name\n      type: System.String\n      description: The short name of the type. <code>name</code> cannot contain embedded nulls.\n    - id: attr\n      type: System.Reflection.TypeAttributes\n      description: The attributes of the type.\n    - id: parent\n      type: System.Type\n      description: The type that the nested type extends.\n    - id: packSize\n      type: System.Reflection.Emit.PackingSize\n      description: The packing size of the type.\n    return:\n      type: System.Reflection.Emit.TypeBuilder\n      description: The defined nested type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The nested attribute is not specified.  \\n  \\n -or-  \\n  \\n This type is sealed.  \\n  \\n -or-  \\n  \\n This type is an array.  \\n  \\n -or-  \\n  \\n This type is an interface, but the nested type is not an interface.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> is zero or greater than 1023.  \\n  \\n -or-  \\n  \\n This operation would create a type with a duplicate <xref href=\\\"System.Reflection.Emit.TypeBuilder.FullName\\\"></xref> in the current assembly.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)\n  id: DefineNestedType(System.String,System.Reflection.TypeAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineNestedType(String, TypeAttributes)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a nested type, given its name and attributes.\n  remarks: \"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \\n  \\n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \\n  \\n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \\n  \\n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.\"\n  syntax:\n    content: public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The short name of the type. <code>name</code> cannot contain embedded nulls.\n    - id: attr\n      type: System.Reflection.TypeAttributes\n      description: The attributes of the type.\n    return:\n      type: System.Reflection.Emit.TypeBuilder\n      description: The defined nested type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The nested attribute is not specified.  \\n  \\n -or-  \\n  \\n This type is sealed.  \\n  \\n -or-  \\n  \\n This type is an array.  \\n  \\n -or-  \\n  \\n This type is an interface, but the nested type is not an interface.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> is zero or greater than 1023.  \\n  \\n -or-  \\n  \\n This operation would create a type with a duplicate <xref href=\\\"System.Reflection.Emit.TypeBuilder.FullName\\\"></xref> in the current assembly.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)\n  id: DefineNestedType(System.String)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineNestedType(String)\n  nameWithType: TypeBuilder.DefineNestedType(String)\n  fullName: TypeBuilder.DefineNestedType(String)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a nested type, given its name.\n  remarks: \"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \\n  \\n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \\n  \\n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \\n  \\n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.\"\n  syntax:\n    content: public System.Reflection.Emit.TypeBuilder DefineNestedType (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The short name of the type. <code>name</code> cannot contain embedded nulls.\n    return:\n      type: System.Reflection.Emit.TypeBuilder\n      description: The defined nested type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Length of <code>name</code> is zero or greater than 1023.  \\n  \\n -or-  \\n  \\n This operation would create a type with a duplicate <xref href=\\\"System.Reflection.Emit.TypeBuilder.FullName\\\"></xref> in the current assembly.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)\n  id: DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineNestedType(String, TypeAttributes, Type)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a nested type, given its name, attributes, and the type that it extends.\n  remarks: \"This method can be used to create nested types even after the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called on the enclosing type.  \\n  \\n The nested type needs to be complete before you can reflect on it using <xref:System.Type.GetMembers%2A>, <xref:System.Type.GetNestedType%2A>, or <xref:System.Type.GetNestedTypes%2A>.  \\n  \\n See the description of <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> for the order in which nested types and nesting types should be completed.  \\n  \\n A duplicate name is not necessarily created if `name` is identical to the name of a previously defined type or nested type. To be duplicates, the full names must be the same, including the namespace and all nesting types.\"\n  syntax:\n    content: public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent);\n    parameters:\n    - id: name\n      type: System.String\n      description: The short name of the type. <code>name</code> cannot contain embedded nulls.\n    - id: attr\n      type: System.Reflection.TypeAttributes\n      description: The attributes of the type.\n    - id: parent\n      type: System.Type\n      description: The type that the nested type extends.\n    return:\n      type: System.Reflection.Emit.TypeBuilder\n      description: The defined nested type.\n  overload: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The nested attribute is not specified.  \\n  \\n -or-  \\n  \\n This type is sealed.  \\n  \\n -or-  \\n  \\n This type is an array.  \\n  \\n -or-  \\n  \\n This type is an interface, but the nested type is not an interface.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> is zero or greater than 1023.  \\n  \\n -or-  \\n  \\n This operation would create a type with a duplicate <xref href=\\\"System.Reflection.Emit.TypeBuilder.FullName\\\"></xref> in the current assembly.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  id: DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  nameWithType: TypeBuilder.DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  fullName: TypeBuilder.DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags.\n  remarks: Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=fullName> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=fullName> methods.  \\n  \\n> [!IMPORTANT]\\n>  To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag.  \\n  \\n The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method. The `PInvoke` method represents the Win32 `GetTickCount` function.  \\n  \\n When the example is run, it executes the `PInvoke` method. It also saves the dynamic assembly as PInvokeTest.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains. You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.  \\n  \\n [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]\\n [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]\\n [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.\n    - id: dllName\n      type: System.String\n      description: The name of the DLL in which the `PInvoke` method is defined.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The method's calling convention.\n    - id: returnType\n      type: System.Type\n      description: The method's return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the method's parameters.\n    - id: nativeCallConv\n      type: System.Runtime.InteropServices.CallingConvention\n      description: The native calling convention.\n    - id: nativeCharSet\n      type: System.Runtime.InteropServices.CharSet\n      description: The method's native character set.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: The defined `PInvoke` method.\n  overload: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The method is not static.  \\n  \\n -or-  \\n  \\n The parent type is an interface.  \\n  \\n -or-  \\n  \\n The method is abstract.  \\n  \\n -or-  \\n  \\n The method was previously defined.  \\n  \\n -or-  \\n  \\n The length of <code>name</code> or <code>dllName</code> is zero.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> or <code>dllName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  id: DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  nameWithType: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  fullName: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the `PInvoke` flags.\n  remarks: Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=fullName> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=fullName> methods.  \\n  \\n> [!IMPORTANT]\\n>  To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag.  \\n  \\n The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method. The `PInvoke` method represents the Win32 `GetTickCount` function.  \\n  \\n When the example is run, it executes the `PInvoke` method. It also saves the dynamic assembly as PInvokeTest.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains. You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.  \\n  \\n [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]\\n [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]\\n [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.\n    - id: dllName\n      type: System.String\n      description: The name of the DLL in which the `PInvoke` method is defined.\n    - id: entryName\n      type: System.String\n      description: The name of the entry point in the DLL.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The method's calling convention.\n    - id: returnType\n      type: System.Type\n      description: The method's return type.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the method's parameters.\n    - id: nativeCallConv\n      type: System.Runtime.InteropServices.CallingConvention\n      description: The native calling convention.\n    - id: nativeCharSet\n      type: System.Runtime.InteropServices.CharSet\n      description: The method's native character set.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: The defined `PInvoke` method.\n  overload: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The method is not static.  \\n  \\n -or-  \\n  \\n The parent type is an interface.  \\n  \\n -or-  \\n  \\n The method is abstract.  \\n  \\n -or-  \\n  \\n The method was previously defined.  \\n  \\n -or-  \\n  \\n The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code>, <code>dllName</code>, or <code>entryName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  id: DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][], CallingConvention, CharSet)\n  nameWithType: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][], CallingConvention, CharSet)\n  fullName: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][], CallingConvention, CharSet)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines a `PInvoke` method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the `PInvoke` flags, and custom modifiers for the parameters and return type.\n  remarks: \"Some DLL import attributes (see the description of <xref:System.Runtime.InteropServices.DllImportAttribute>) cannot be specified as arguments to this method. For example, the DLL import attribute <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> must be added after the `PInvoke` method is created, if the method returns a value. The example shows how to do this.  \\n  \\n> [!NOTE]\\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  example:\n  - \"The following code example demonstrates how to use the [\\\\], Type\\\\[\\\\], Type\\\\[\\\\], Type\\\\[\\\\]\\\\[\\\\], Type\\\\[\\\\]\\\\<xref:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod%2A> method to create a `PInvoke` method, and how to add the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag to the method implementation flags after you create the <xref:System.Reflection.Emit.MethodBuilder>, by using the <xref:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags%2A?displayProperty=fullName> and <xref:System.Reflection.Emit.MethodBuilder.SetImplementationFlags%2A?displayProperty=fullName> methods.  \\n  \\n The example creates a dynamic assembly with one dynamic module and a single type, `MyType`, that contains the `PInvoke` method. The `PInvoke` method represents the Win32 `GetTickCount` function.  \\n  \\n> [!IMPORTANT]\\n>  To get a non-zero return value, you must add the <xref:System.Reflection.MethodImplAttributes?displayProperty=fullName> flag.  \\n  \\n> [!NOTE]\\n>  The example uses an overload that does not specify custom modifiers. To specify custom modifiers, change the example code to use this method overload instead.  \\n  \\n When the example is run, it executes the `PInvoke` method. It also saves the dynamic assembly as PInvokeTest.dll. You can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to examine the `MyType` class and the `static` (`Shared` in Visual Basic) `PInvoke` method it contains. You can compile a Visual Basic or C# program that uses the static `MyType.GetTickCount` method by including a reference to the DLL when you run csc.exe or vbc.exe; for example, `/r:PInvokeTest.dll`.  \\n  \\n [!code-cpp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/cpp/100656_fix.cpp#1)]\\n [!code-csharp[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/CS/100656_fix.cs#1)]\\n [!code-vb[TypeBuilder_DefinePInvokeMethod_Fix#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefinePInvokeMethod_Fix/VB/100656_fix.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the `PInvoke` method. <code>name</code> cannot contain embedded nulls.\n    - id: dllName\n      type: System.String\n      description: The name of the DLL in which the `PInvoke` method is defined.\n    - id: entryName\n      type: System.String\n      description: The name of the entry point in the DLL.\n    - id: attributes\n      type: System.Reflection.MethodAttributes\n      description: The attributes of the method.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The method's calling convention.\n    - id: returnType\n      type: System.Type\n      description: The method's return type.\n    - id: returnTypeRequiredCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify `null`.\n    - id: returnTypeOptionalCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify `null`.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the method's parameters.\n    - id: parameterTypeRequiredCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: parameterTypeOptionalCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.\n    - id: nativeCallConv\n      type: System.Runtime.InteropServices.CallingConvention\n      description: The native calling convention.\n    - id: nativeCharSet\n      type: System.Runtime.InteropServices.CharSet\n      description: The method's native character set.\n    return:\n      type: System.Reflection.Emit.MethodBuilder\n      description: A <xref href=\"System.Reflection.Emit.MethodBuilder\"></xref> representing the defined `PInvoke` method.\n  overload: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The method is not static.  \\n  \\n -or-  \\n  \\n The parent type is an interface.  \\n  \\n -or-  \\n  \\n The method is abstract.  \\n  \\n -or-  \\n  \\n The method was previously defined.  \\n  \\n -or-  \\n  \\n The length of <code>name</code>, <code>dllName</code>, or <code>entryName</code> is zero.  \\n  \\n -or-  \\n  \\n The size of <code>parameterTypeRequiredCustomModifiers</code> or <code>parameterTypeOptionalCustomModifiers</code> does not equal the size of <code>parameterTypes</code>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code>, <code>dllName</code>, or <code>entryName</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])\n  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineProperty(String, PropertyAttributes, Type, Type[])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new property to the type, with the given name and property signature.\n  remarks: ''\n  example:\n  - \"The following code sample demonstrates how to define a dynamic property and obtain a <xref:System.Reflection.Emit.PropertyBuilder> for specification. Note that a `PropertyBuilder` must also have a corresponding <xref:System.Reflection.Emit.MethodBuilder>, which will house the IL logic for the property.  \\n  \\n [!code-cpp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CPP/source.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/CS/source.cs#1)]\\n [!code-vb[System.Reflection.Emit.PropertyBuilder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Emit.PropertyBuilder Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.PropertyAttributes\n      description: The attributes of the property.\n    - id: returnType\n      type: System.Type\n      description: The return type of the property.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the property.\n    return:\n      type: System.Reflection.Emit.PropertyBuilder\n      description: The defined property.\n  overload: System.Reflection.Emit.TypeBuilder.DefineProperty*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>name</code> is zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n Any of the elements of the <code>parameterTypes</code> array is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new property to the type, with the given name, attributes, calling convention, and property signature.\n  syntax:\n    content: public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.PropertyAttributes\n      description: The attributes of the property.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the property accessors.\n    - id: returnType\n      type: System.Type\n      description: The return type of the property.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the property.\n    return:\n      type: System.Reflection.Emit.PropertyBuilder\n      description: The defined property.\n  overload: System.Reflection.Emit.TypeBuilder.DefineProperty*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>name</code> is zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n Any of the elements of the <code>parameterTypes</code> array is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineProperty(String, PropertyAttributes, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[], Type[], Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new property to the type, with the given name, property signature, and custom modifiers.\n  remarks: \"This overload is provided for designers of managed compilers.  \\n  \\n> [!NOTE]\\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.PropertyAttributes\n      description: The attributes of the property.\n    - id: returnType\n      type: System.Type\n      description: The return type of the property.\n    - id: returnTypeRequiredCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify `null`.\n    - id: returnTypeOptionalCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify `null`.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the property.\n    - id: parameterTypeRequiredCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: parameterTypeOptionalCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.\n    return:\n      type: System.Reflection.Emit.PropertyBuilder\n      description: The defined property.\n  overload: System.Reflection.Emit.TypeBuilder.DefineProperty*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>name</code> is zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`  \\n  \\n -or-  \\n  \\n Any of the elements of the <code>parameterTypes</code> array is `null`\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  id: DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.\n  remarks: \"This overload is provided for designers of managed compilers.  \\n  \\n> [!NOTE]\\n>  For more information on custom modifiers, see the ECMA Partition II Metadata documentation. The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n This method overload is introduced in the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the property. <code>name</code> cannot contain embedded nulls.\n    - id: attributes\n      type: System.Reflection.PropertyAttributes\n      description: The attributes of the property.\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: The calling convention of the property accessors.\n    - id: returnType\n      type: System.Type\n      description: The return type of the property.\n    - id: returnTypeRequiredCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no required custom modifiers, specify `null`.\n    - id: returnTypeOptionalCustomModifiers\n      type: System.Type[]\n      description: An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>, for the return type of the property. If the return type has no optional custom modifiers, specify `null`.\n    - id: parameterTypes\n      type: System.Type[]\n      description: The types of the parameters of the property.\n    - id: parameterTypeRequiredCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no required custom modifiers, specify `null` instead of an array of types. If none of the parameters have required custom modifiers, specify `null` instead of an array of arrays.\n    - id: parameterTypeOptionalCustomModifiers\n      type: System.Type[][]\n      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\"></xref>. If a particular parameter has no optional custom modifiers, specify `null` instead of an array of types. If none of the parameters have optional custom modifiers, specify `null` instead of an array of arrays.\n    return:\n      type: System.Reflection.Emit.PropertyBuilder\n      description: The defined property.\n  overload: System.Reflection.Emit.TypeBuilder.DefineProperty*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of <code>name</code> is zero.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>name</code> is `null`.  \\n  \\n -or-  \\n  \\n Any of the elements of the <code>parameterTypes</code> array is `null`.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineTypeInitializer\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer\n  id: DefineTypeInitializer\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineTypeInitializer()\n  nameWithType: TypeBuilder.DefineTypeInitializer()\n  fullName: TypeBuilder.DefineTypeInitializer()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines the initializer for this type.\n  remarks: The initializer created is always public.\n  example:\n  - \"The following code sample demonstrates how to create an initialization constructor using `DefineTypeInitializer`.  \\n  \\n [!code-cpp[TypeBuilder_Properties1#3](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_Properties1/CPP/typebuilder_properties.cpp#3)]\\n [!code-csharp[TypeBuilder_Properties1#3](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_Properties1/CS/typebuilder_properties.cs#3)]\\n [!code-vb[TypeBuilder_Properties1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_Properties1/VB/typebuilder_properties.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer ();\n    parameters: []\n    return:\n      type: System.Reflection.Emit.ConstructorBuilder\n      description: Returns a type initializer.\n  overload: System.Reflection.Emit.TypeBuilder.DefineTypeInitializer*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The containing type has been previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)\n  commentId: M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)\n  id: DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: DefineUninitializedData(String, Int32, FieldAttributes)\n  nameWithType: TypeBuilder.DefineUninitializedData(String, Int32, FieldAttributes)\n  fullName: TypeBuilder.DefineUninitializedData(String, Int32, FieldAttributes)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Defines an uninitialized data field in the `.sdata` section of the portable executable (PE) file.\n  remarks: The field that you create with this method will be `static`, even if you do not include `FieldAttributes.Static` in the `attributes` parameter.\n  example:\n  - \"The following code sample demonstrates the use of `DefineUninitializedData` to create an uninitialized data field in a dynamic type:  \\n  \\n [!code-cpp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/cpp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CPP/typebuilder_defineuninitializeddata.cpp#1)]\\n [!code-csharp[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/CS/typebuilder_defineuninitializeddata.cs#1)]\\n [!code-vb[TypeBuilder_DefineUninitializedData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder_DefineUninitializedData/VB/typebuilder_defineuninitializeddata.vb#1)]\"\n  syntax:\n    content: public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name used to refer to the data. <code>name</code> cannot contain embedded nulls.\n    - id: size\n      type: System.Int32\n      description: The size of the data field.\n    - id: attributes\n      type: System.Reflection.FieldAttributes\n      description: The attributes for the field.\n    return:\n      type: System.Reflection.Emit.FieldBuilder\n      description: A field to reference the data.\n  overload: System.Reflection.Emit.TypeBuilder.DefineUninitializedData*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"Length of <code>name</code> is zero.  \\n  \\n -or-  \\n  \\n <code>size</code> is less than or equal to zero, or greater than or equal to 0x003f0000.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>name</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.FullName\n  commentId: P:System.Reflection.Emit.TypeBuilder.FullName\n  id: FullName\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: FullName\n  nameWithType: TypeBuilder.FullName\n  fullName: TypeBuilder.FullName\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the full path of this type.\n  remarks: The returned format is \"enclosingTypeFullName+nestedTypeName\" for nested types and \"typeName\" for non-nested types.\n  syntax:\n    content: public override string FullName { get; }\n    return:\n      type: System.String\n      description: Read-only. Retrieves the full path of this type.\n  overload: System.Reflection.Emit.TypeBuilder.FullName*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GenericParameterAttributes\n  commentId: P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes\n  id: GenericParameterAttributes\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GenericParameterAttributes\n  nameWithType: TypeBuilder.GenericParameterAttributes\n  fullName: TypeBuilder.GenericParameterAttributes\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates the covariance and special constraints of the current generic type parameter.\n  remarks: >-\n    > [!NOTE]\n\n    >  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.\n  syntax:\n    content: public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }\n    return:\n      type: System.Reflection.GenericParameterAttributes\n      description: A bitwise combination of <xref href=\"System.Reflection.GenericParameterAttributes\"></xref> values that describes the covariance and special constraints of the current generic type parameter.\n  overload: System.Reflection.Emit.TypeBuilder.GenericParameterAttributes*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GenericParameterPosition\n  commentId: P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition\n  id: GenericParameterPosition\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GenericParameterPosition\n  nameWithType: TypeBuilder.GenericParameterPosition\n  fullName: TypeBuilder.GenericParameterPosition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.\n  remarks: \"> [!NOTE]\\n>  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.  \\n  \\n If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent a generic type parameter, the value of this property is undefined. Use the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property to determine whether the current <xref:System.Reflection.Emit.TypeBuilder> represents a generic type parameter.\"\n  syntax:\n    content: public override int GenericParameterPosition { get; }\n    return:\n      type: System.Int32\n      description: If the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.\n  overload: System.Reflection.Emit.TypeBuilder.GenericParameterPosition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GenericTypeArguments\n  commentId: P:System.Reflection.Emit.TypeBuilder.GenericTypeArguments\n  id: GenericTypeArguments\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GenericTypeArguments\n  nameWithType: TypeBuilder.GenericTypeArguments\n  fullName: TypeBuilder.GenericTypeArguments\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type[] GenericTypeArguments { get; }\n    return:\n      type: System.Type[]\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.GenericTypeArguments*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetArrayRank\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetArrayRank\n  id: GetArrayRank\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetArrayRank()\n  nameWithType: TypeBuilder.GetArrayRank()\n  fullName: TypeBuilder.GetArrayRank()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override int GetArrayRank ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.GetArrayRank*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl\n  id: GetAttributeFlagsImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetAttributeFlagsImpl()\n  nameWithType: TypeBuilder.GetAttributeFlagsImpl()\n  fullName: TypeBuilder.GetAttributeFlagsImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();\n    parameters: []\n    return:\n      type: System.Reflection.TypeAttributes\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)\n  id: GetConstructor(System.Type,System.Reflection.ConstructorInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetConstructor(Type, ConstructorInfo)\n  nameWithType: TypeBuilder.GetConstructor(Type, ConstructorInfo)\n  fullName: TypeBuilder.GetConstructor(Type, ConstructorInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method provides a way to get a <xref:System.Reflection.ConstructorInfo> object that represents a constructor of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.  \\n  \\n For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.ConstructorBuilder> object that represents a constructor of `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>`. In order to emit the code to create an instance of the constructed type, you need a <xref:System.Reflection.ConstructorInfo> object that represents the constructor of this constructed type — in other words, that creates an instance of `G<U>`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.ConstructorBuilder> object that represents the constructor of `G<U>` as parameter `constructor`. The return value is the <xref:System.Reflection.ConstructorInfo> object you need to emit the function call. The code example demonstrates this scenario.\"\n  example:\n  - \"The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`. The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`. Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`. This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.  \\n  \\n The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method to emit generic code. The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`. A default constructor and a field named `Field`, of type `T`, are added to class `Sample`. A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method. The type parameter of `GM` is named `U`. After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method. There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter. The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`. The <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%2A> method is used to create a <xref:System.Reflection.ConstructorInfo> that represents the default constructor of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Newobj?displayProperty=fullName> instruction that creates the instance.  \\n  \\n A dummy type is defined to hold the entry-point method `Main`. In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.  \\n  \\n When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.  \\n  \\n [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]\\n [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Reflection.ConstructorInfo GetConstructor (Type type, System.Reflection.ConstructorInfo constructor);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The constructed generic type whose constructor is returned.\n    - id: constructor\n      type: System.Reflection.ConstructorInfo\n      description: A constructor on the generic type definition of <code>type</code>, which specifies which constructor of <code>type</code> to return.\n    return:\n      type: System.Reflection.ConstructorInfo\n      description: A <xref href=\"System.Reflection.ConstructorInfo\"></xref> object that represents the constructor of <code>type</code> corresponding to <code>constructor</code>, which specifies a constructor belonging to the generic type definition of <code>type</code>.\n  overload: System.Reflection.Emit.TypeBuilder.GetConstructor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not represent a generic type.  \\n  \\n -or-  \\n  \\n <code>type</code> is not of type <xref href=\\\"System.Reflection.Emit.TypeBuilder\\\"></xref>.  \\n  \\n -or-  \\n  \\n The declaring type of <code>constructor</code> is not a generic type definition.  \\n  \\n -or-  \\n  \\n The declaring type of <code>constructor</code> is not the generic type definition of <code>type</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.ConstructorInfo\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.GetConstructorImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)\n  id: GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetConstructors(BindingFlags)\n  nameWithType: TypeBuilder.GetConstructors(BindingFlags)\n  fullName: TypeBuilder.GetConstructors(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the public and non-public constructors defined for this class, as specified.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Reflection.ConstructorInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.\n  overload: System.Reflection.Emit.TypeBuilder.GetConstructors*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: TypeBuilder.GetCustomAttributes(Boolean)\n  fullName: TypeBuilder.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the custom attributes defined for this type.\n  syntax:\n    content: public override object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: Returns an array of objects representing all the custom attributes of this type.\n  overload: System.Reflection.Emit.TypeBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: TypeBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: TypeBuilder.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the custom attributes of the current type that are assignable to a specified type.\n  syntax:\n    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The type of attribute to search for. Only attributes that are assignable to this type are returned.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: An array of custom attributes defined on the current type.\n  overload: System.Reflection.Emit.TypeBuilder.GetCustomAttributes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributeType</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The type must be a type provided by the underlying runtime system.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetElementType\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetElementType\n  id: GetElementType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetElementType()\n  nameWithType: TypeBuilder.GetElementType()\n  fullName: TypeBuilder.GetElementType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Calling this method always throws <xref href=\"System.NotSupportedException\"></xref>.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override Type GetElementType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: This method is not supported. No value is returned.\n  overload: System.Reflection.Emit.TypeBuilder.GetElementType*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not supported.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  id: GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetEvent(String, BindingFlags)\n  nameWithType: TypeBuilder.GetEvent(String, BindingFlags)\n  fullName: TypeBuilder.GetEvent(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the event with the specified name.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the event to search for.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limits the search.\n    return:\n      type: System.Reflection.EventInfo\n      description: An <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name, or `null` if there are no matches.\n  overload: System.Reflection.Emit.TypeBuilder.GetEvent*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetEvents\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetEvents\n  id: GetEvents\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetEvents()\n  nameWithType: TypeBuilder.GetEvents()\n  fullName: TypeBuilder.GetEvents()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public events declared or inherited by this type.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A> or <xref:System.Reflection.Assembly.GetType%2A> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents ();\n    parameters: []\n    return:\n      type: System.Reflection.EventInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.\n  overload: System.Reflection.Emit.TypeBuilder.GetEvents*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)\n  id: GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetEvents(BindingFlags)\n  nameWithType: TypeBuilder.GetEvents(BindingFlags)\n  fullName: TypeBuilder.GetEvents(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public events that are declared by this type.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitwise combination of <xref href=\"System.Reflection.BindingFlags\"></xref> values that limits the search.\n    return:\n      type: System.Reflection.EventInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.\n  overload: System.Reflection.Emit.TypeBuilder.GetEvents*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  id: GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetField(String, BindingFlags)\n  nameWithType: TypeBuilder.GetField(String, BindingFlags)\n  fullName: TypeBuilder.GetField(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the field specified by the given name.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the field to get.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Reflection.FieldInfo\n      description: Returns the <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then `null` is returned.\n  overload: System.Reflection.Emit.TypeBuilder.GetField*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)\n  id: GetField(System.Type,System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetField(Type, FieldInfo)\n  nameWithType: TypeBuilder.GetField(Type, FieldInfo)\n  fullName: TypeBuilder.GetField(Type, FieldInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method provides a way to get a <xref:System.Reflection.FieldInfo> object that represents a field of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.  \\n  \\n For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.FieldBuilder> object that represents a field `public T F` in C# syntax (`Public F As T` in Visual Basic, `public: T F` in C++) that is defined by `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls field `F` on that instance. In order to emit the function call, you need a <xref:System.Reflection.FieldInfo> object that represents `F` on the constructed type — in other words, that is of type `U` rather than type `T`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.FieldBuilder> object that represents `F` as parameter `field`. The return value is the <xref:System.Reflection.FieldInfo> object you need to emit the function call. The code example demonstrates this scenario.\"\n  example:\n  - \"The following code example contains source code for a generic class named Sample that has a type parameter named `T`. The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`. Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`. This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.  \\n  \\n The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method to emit generic code. The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample`, and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`. A default constructor and a field named `Field`, of type `T`, are added to class `Sample`. A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method. The type parameter of `GM` is named `U`. After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method. There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter. The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`. The <xref:System.Reflection.Emit.TypeBuilder.GetField%2A> method is used to create a <xref:System.Reflection.FieldInfo> that represents the field of the constructed generic type `Sample<U>` in the <xref:System.Reflection.Emit.OpCodes.Stfld?displayProperty=fullName> and <xref:System.Reflection.Emit.OpCodes.Ldfld?displayProperty=fullName> instructions.  \\n  \\n A dummy type is defined to hold the entry-point method `Main`. In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`.  \\n  \\n When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.  \\n  \\n [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]\\n [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Reflection.FieldInfo GetField (Type type, System.Reflection.FieldInfo field);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The constructed generic type whose field is returned.\n    - id: field\n      type: System.Reflection.FieldInfo\n      description: A field on the generic type definition of <code>type</code>, which specifies which field of <code>type</code> to return.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A <xref href=\"System.Reflection.FieldInfo\"></xref> object that represents the field of <code>type</code> corresponding to <code>field</code>, which specifies a field belonging to the generic type definition of <code>type</code>.\n  overload: System.Reflection.Emit.TypeBuilder.GetField*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>type</code> does not represent a generic type.  \\n  \\n -or-  \\n  \\n <code>type</code> is not of type <xref href=\\\"System.Reflection.Emit.TypeBuilder\\\"></xref>.  \\n  \\n -or-  \\n  \\n The declaring type of <code>field</code> is not a generic type definition.  \\n  \\n -or-  \\n  \\n The declaring type of <code>field</code> is not the generic type definition of <code>type</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)\n  id: GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetFields(BindingFlags)\n  nameWithType: TypeBuilder.GetFields(BindingFlags)\n  fullName: TypeBuilder.GetFields(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public fields that are declared by this type.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.  \\n  \\n Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\"\n  syntax:\n    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.\n  overload: System.Reflection.Emit.TypeBuilder.GetFields*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericArguments\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetGenericArguments()\n  nameWithType: TypeBuilder.GetGenericArguments()\n  fullName: TypeBuilder.GetGenericArguments()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of <xref href=\"System.Type\"></xref> objects representing the type arguments of a generic type or the type parameters of a generic type definition.\n  remarks: \"The elements of the returned array are in the order in which they appear in the list of type parameters for the generic type definition.  \\n  \\n A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. This method retrieves the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> objects that represent the generic type parameters.  \\n  \\n For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public override Type[] GetGenericArguments ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of <xref href=\"System.Type\"></xref> objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.\n  overload: System.Reflection.Emit.TypeBuilder.GetGenericArguments*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints\n  id: GetGenericParameterConstraints\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetGenericParameterConstraints()\n  nameWithType: TypeBuilder.GetGenericParameterConstraints()\n  fullName: TypeBuilder.GetGenericParameterConstraints()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override Type[] GetGenericParameterConstraints ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition\n  id: GetGenericTypeDefinition\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetGenericTypeDefinition()\n  nameWithType: TypeBuilder.GetGenericTypeDefinition()\n  fullName: TypeBuilder.GetGenericTypeDefinition()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents a generic type definition from which the current type can be obtained.\n  remarks: \"If you call the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> object for which the <xref:System.Reflection.Emit.TypeBuilder.IsGenericType%2A> property returns `true`, the <xref:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition%2A> property returns the current instance. A <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type is always a generic type definition.  \\n  \\n If you used the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method to construct a generic type from a <xref:System.Reflection.Emit.TypeBuilder> object that represents a generic type definition, using the <xref:System.Type.GetGenericTypeDefinition%2A?displayProperty=fullName> method on the constructed type gets back the <xref:System.Reflection.Emit.TypeBuilder> object that represents the generic type definition.\"\n  syntax:\n    content: public override Type GetGenericTypeDefinition ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing a generic type definition from which the current type can be obtained.\n  overload: System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current type is not generic. That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> returns `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)\n  id: GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetInterface(String, Boolean)\n  nameWithType: TypeBuilder.GetInterface(String, Boolean)\n  fullName: TypeBuilder.GetInterface(String, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override Type GetInterface (string name, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the interface.\n    - id: ignoreCase\n      type: System.Boolean\n      description: If `true`, the search is case-insensitive. If `false`, the search is case-sensitive.\n    return:\n      type: System.Type\n      description: Returns a <xref href=\"System.Type\"></xref> object representing the implemented interface. Returns null if no interface matching name is found.\n  overload: System.Reflection.Emit.TypeBuilder.GetInterface*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)\n  id: GetInterfaceMap(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetInterfaceMap(Type)\n  nameWithType: TypeBuilder.GetInterfaceMap(Type)\n  fullName: TypeBuilder.GetInterfaceMap(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an interface mapping for the requested interface.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);\n    parameters:\n    - id: interfaceType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the interface for which the mapping is to be retrieved.\n    return:\n      type: System.Reflection.InterfaceMapping\n      description: Returns the requested interface mapping.\n  overload: System.Reflection.Emit.TypeBuilder.GetInterfaceMap*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetInterfaces\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetInterfaces\n  id: GetInterfaces\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetInterfaces()\n  nameWithType: TypeBuilder.GetInterfaces()\n  fullName: TypeBuilder.GetInterfaces()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns an array of all the interfaces implemented on this type and its base types.\n  syntax:\n    content: public override Type[] GetInterfaces ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: Returns an array of <xref href=\"System.Type\"></xref> objects representing the implemented interfaces. If none are defined, an empty array is returned.\n  overload: System.Reflection.Emit.TypeBuilder.GetInterfaces*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: TypeBuilder.GetMember(String, MemberTypes, BindingFlags)\n  fullName: TypeBuilder.GetMember(String, MemberTypes, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the public and non-public members declared or inherited by this type, as specified.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the member.\n    - id: type\n      type: System.Reflection.MemberTypes\n      description: The type of the member to return.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, as in `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members defined on this type if <code>nonPublic</code> is used; otherwise, only the public members are returned.\n  overload: System.Reflection.Emit.TypeBuilder.GetMember*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)\n  id: GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetMembers(BindingFlags)\n  nameWithType: TypeBuilder.GetMembers(BindingFlags)\n  fullName: TypeBuilder.GetMembers(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the members for the public and non-public members declared or inherited by this type.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, such as `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.MemberInfo\"></xref> objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.\n  overload: System.Reflection.Emit.TypeBuilder.GetMembers*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)\n  id: GetMethod(System.Type,System.Reflection.MethodInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetMethod(Type, MethodInfo)\n  nameWithType: TypeBuilder.GetMethod(Type, MethodInfo)\n  fullName: TypeBuilder.GetMethod(Type, MethodInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method provides a way to get a <xref:System.Reflection.MethodInfo> object that represents a method of a constructed generic type whose generic type definition is represented by a <xref:System.Reflection.Emit.TypeBuilder> object.  \\n  \\n For example, suppose you have a <xref:System.Reflection.Emit.TypeBuilder> object that represents the type `G<T>` in C# syntax (`G(Of T)` in Visual Basic, `generic <T> ref class G` in C++) and a <xref:System.Reflection.Emit.MethodBuilder> object that represents a method `T M()` in C# syntax (`Function M() As T` in Visual Basic, `T M()` in C++) that is defined by `G<T>`. Suppose that `G<T>` has a generic method with type parameter `U` that creates an instance of the constructed type `G<U>` and calls method `M` on that instance. In order to emit the function call, you need a <xref:System.Reflection.MethodInfo> object that represents `M` on the constructed type — in other words, that returns type `U` rather than type `T`. To do this, first call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on the <xref:System.Reflection.Emit.TypeBuilder> object, specifying the <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object that represents `U` as the type argument. Then call the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method with the return value of the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method as parameter `type` and the <xref:System.Reflection.Emit.MethodBuilder> object that represents `T M()` as parameter `method`. The return value is the <xref:System.Reflection.MethodInfo> object you need to emit the function call. The code example demonstrates a scenario similar to this.\"\n  example:\n  - \"The following code example contains source code for a generic class named `Sample` that has a type parameter named `T`. The class has a field named `Field`, of type `T`, and a generic method named `GM` with its own type parameter, named `U`. Method `GM` creates an instance of `Sample`, substituting its own type parameter `U` for the type parameter of `Sample`, and stores its input parameter in `Field`. This source code is compiled but not used; you can view it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) and compare it to the code emitted by class `Example`.  \\n  \\n The code in class `Example` demonstrates the use of the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method to emit generic code. The `Main` method of class `Example` creates a dynamic assembly containing a class named `Sample` and uses the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method to make it generic by adding a type parameter named `T`. A default constructor and a field named `Field`, of type `T`, are added to class `Sample`. A method `GM` is added and turned into a generic method by using the <xref:System.Reflection.Emit.MethodBuilder.DefineGenericParameters%2A?displayProperty=fullName> method. The type parameter of `GM` is named `U`. After the type parameter is defined, the signature of `GM` is added by using the <xref:System.Reflection.Emit.MethodBuilder.SetSignature%2A?displayProperty=fullName> method. There is no return type and no required or custom modifiers, so all the parameters of this method are `null` except `parameterTypes`; `parameterTypes` sets the type of the method's only parameter to `U`, the method's generic type parameter. The body of the method creates an instance of the constructed type `Sample<U>` (`Sample(Of U)` in Visual Basic), assigns the method's parameter to `Field`, and then prints the value of `Field`. A dummy type is defined to hold the entry-point method `Main`. In the body of `Main`, the static `GM` method is invoked on the constructed generic type `Sample<int>` (`Sample(Of Integer)` in Visual Basic), with type <xref:System.String> substituted for `U`. The <xref:System.Reflection.Emit.TypeBuilder.GetMethod%2A> method is used to create a <xref:System.Reflection.MethodInfo> for the static `GM` method of the constructed generic type `Sample<U>`, and the <xref:System.Reflection.MethodInfo.MakeGenericMethod%2A?displayProperty=fullName> method is then used to create a <xref:System.Reflection.MethodInfo> that can emitted in a method call.  \\n  \\n When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md) to compare the emitted code with the code for the `Sample` class that is compiled into the code example itself.  \\n  \\n [!code-csharp[TypeBuilder.GetField_Generic#1](~/samples/snippets/csharp/VS_Snippets_CLR/TypeBuilder.GetField_Generic/cs/source.cs#1)]\\n [!code-vb[TypeBuilder.GetField_Generic#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeBuilder.GetField_Generic/VB/source.vb#1)]\"\n  syntax:\n    content: public static System.Reflection.MethodInfo GetMethod (Type type, System.Reflection.MethodInfo method);\n    parameters:\n    - id: type\n      type: System.Type\n      description: The constructed generic type whose method is returned.\n    - id: method\n      type: System.Reflection.MethodInfo\n      description: A method on the generic type definition of <code>type</code>, which specifies which method of <code>type</code> to return.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A <xref href=\"System.Reflection.MethodInfo\"></xref> object that represents the method of <code>type</code> corresponding to <code>method</code>, which specifies a method belonging to the generic type definition of <code>type</code>.\n  overload: System.Reflection.Emit.TypeBuilder.GetMethod*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>method</code> is a generic method that is not a generic method definition.  \\n  \\n -or-  \\n  \\n <code>type</code> does not represent a generic type.  \\n  \\n -or-  \\n  \\n <code>type</code> is not of type <xref href=\\\"System.Reflection.Emit.TypeBuilder\\\"></xref>.  \\n  \\n -or-  \\n  \\n The declaring type of <code>method</code> is not a generic type definition.  \\n  \\n -or-  \\n  \\n The declaring type of <code>method</code> is not the generic type definition of <code>type</code>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: ''\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.MethodInfo\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.GetMethodImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)\n  id: GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetMethods(BindingFlags)\n  nameWithType: TypeBuilder.GetMethods(BindingFlags)\n  fullName: TypeBuilder.GetMethods(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the public and non-public methods declared or inherited by this type, as specified.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> as in `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing the public and non-public methods defined on this type if <code>nonPublic</code> is used; otherwise, only the public methods are returned.\n  overload: System.Reflection.Emit.TypeBuilder.GetMethods*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  id: GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: TypeBuilder.GetNestedType(String, BindingFlags)\n  fullName: TypeBuilder.GetNestedType(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public nested types that are declared by this type.\n  remarks: \"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \\n  \\n If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.\"\n  syntax:\n    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the name of the nested type to get.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: \"A bitmask comprised of one or more <xref href=\\\"System.Reflection.BindingFlags\\\"></xref> that specify how the search is conducted.  \\n  \\n -or-  \\n  \\n Zero, to conduct a case-sensitive search for public methods.\"\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing the nested type that matches the specified requirements, if found; otherwise, `null`.\n  overload: System.Reflection.Emit.TypeBuilder.GetNestedType*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  id: GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: TypeBuilder.GetNestedTypes(BindingFlags)\n  fullName: TypeBuilder.GetNestedTypes(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the public and non-public nested types that are declared or inherited by this type.\n  remarks: \"Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.  \\n  \\n If this type is complete, for example, if `CreateType` has been called on this type, but there are nested types that are not complete, then `GetNestedTypes` will only return those nested types for which `CreateType` has been called.\"\n  syntax:\n    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref>, as in `InvokeMethod`, `NonPublic`, and so on.\n    return:\n      type: System.Type[]\n      description: \"An array of <xref href=\\\"System.Type\\\"></xref> objects representing all the types nested within the current <xref href=\\\"System.Type\\\"></xref> that match the specified binding constraints.  \\n  \\n An empty array of type <xref href=\\\"System.Type\\\"></xref>, if no types are nested within the current <xref href=\\\"System.Type\\\"></xref>, or if none of the nested types match the binding constraints.\"\n  overload: System.Reflection.Emit.TypeBuilder.GetNestedTypes*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)\n  id: GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetProperties(BindingFlags)\n  nameWithType: TypeBuilder.GetProperties(BindingFlags)\n  fullName: TypeBuilder.GetProperties(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns all the public and non-public properties declared or inherited by this type, as specified.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: 'This invocation attribute. This must be a bit flag from <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `NonPublic`, and so on.'\n    return:\n      type: System.Reflection.PropertyInfo[]\n      description: Returns an array of `PropertyInfo` objects representing the public and non-public properties defined on this type if <code>nonPublic</code> is used; otherwise, only the public properties are returned.\n  overload: System.Reflection.Emit.TypeBuilder.GetProperties*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not implemented for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: TypeBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: TypeBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: ''\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: ''\n    - id: binder\n      type: System.Reflection.Binder\n      description: ''\n    - id: returnType\n      type: System.Type\n      description: ''\n    - id: types\n      type: System.Type[]\n      description: ''\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: ''\n    return:\n      type: System.Reflection.PropertyInfo\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.GetPropertyImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GUID\n  commentId: P:System.Reflection.Emit.TypeBuilder.GUID\n  id: GUID\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: GUID\n  nameWithType: TypeBuilder.GUID\n  fullName: TypeBuilder.GUID\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the GUID of this type.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override Guid GUID { get; }\n    return:\n      type: System.Guid\n      description: Read-only. Retrieves the GUID of this type\n  overload: System.Reflection.Emit.TypeBuilder.GUID*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported for incomplete types.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.HasElementTypeImpl\n  id: HasElementTypeImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: HasElementTypeImpl()\n  nameWithType: TypeBuilder.HasElementTypeImpl()\n  fullName: TypeBuilder.HasElementTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool HasElementTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: TypeBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: TypeBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.\n  remarks: \"A method will be invoked if the number of parameters in the method declaration equals the number of arguments in the specified argument list, and the type of each argument can be converted by the binder to the type of the parameter.  \\n  \\n The binder will find all of the matching methods. These methods are found based on the type of binding requested (BindingFlags.InvokeMethod, BindingFlags.GetProperties, and so on.). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder. After the method is selected, it will be invoked. Accessibility is checked at that point. The search can control which set of methods are searched based upon the accessibility attribute associated with the method. The `IBinder.BindToMethod` method is responsible for selecting the method to be invoked. The default binder selects the most specific match.  \\n  \\n> [!NOTE]\\n>  Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using Reflection whenever the code is fully trusted.  \\n  \\n This method is not currently supported. You can retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\"\n  syntax:\n    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: The invocation attribute. This must be a bit flag from `BindingFlags`.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If binder is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.\n    - id: target\n      type: System.Object\n      description: The object on which to invoke the specified member. If the member is static, this parameter is ignored.\n    - id: args\n      type: System.Object[]\n      description: An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of the same length as <code>args</code> with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An instance of `CultureInfo` used to govern the coercion of types. If this is null, the `CultureInfo` for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)\n    - id: namedParameters\n      type: System.String[]\n      description: Each parameter in the <code>namedParameters</code> array gets the value in the corresponding element in the <code>args</code> array. If the length of <code>args</code> is greater than the length of <code>namedParameters</code>, the remaining argument values are passed in order.\n    return:\n      type: System.Object\n      description: Returns the return value of the invoked member.\n  overload: System.Reflection.Emit.TypeBuilder.InvokeMember*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported for incomplete types.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsArrayImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsArrayImpl\n  id: IsArrayImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsArrayImpl()\n  nameWithType: TypeBuilder.IsArrayImpl()\n  fullName: TypeBuilder.IsArrayImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsArrayImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsArrayImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  id: IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: TypeBuilder.IsAssignableFrom(TypeInfo)\n  fullName: TypeBuilder.IsAssignableFrom(TypeInfo)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether a specified <xref href=\"System.Reflection.TypeInfo\"></xref> object can be assigned to this object.\n  syntax:\n    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);\n    parameters:\n    - id: typeInfo\n      type: System.Reflection.TypeInfo\n      description: The object to test.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>typeInfo</code> can be assigned to this object; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsAssignableFrom*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)\n  id: IsAssignableFrom(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsAssignableFrom(Type)\n  nameWithType: TypeBuilder.IsAssignableFrom(Type)\n  fullName: TypeBuilder.IsAssignableFrom(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether a specified <xref href=\"System.Type\"></xref> can be assigned to this object.\n  syntax:\n    content: public override bool IsAssignableFrom (Type c);\n    parameters:\n    - id: c\n      type: System.Type\n      description: The object to test.\n    return:\n      type: System.Boolean\n      description: '`true` if the <code>c</code> parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of <code>c</code>, or if the current type is an interface that <code>c</code> supports. `false` if none of these conditions are valid, or if <code>c</code> is `null`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsAssignableFrom*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsByRefImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsByRefImpl\n  id: IsByRefImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsByRefImpl()\n  nameWithType: TypeBuilder.IsByRefImpl()\n  fullName: TypeBuilder.IsByRefImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsByRefImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsByRefImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl\n  id: IsCOMObjectImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsCOMObjectImpl()\n  nameWithType: TypeBuilder.IsCOMObjectImpl()\n  fullName: TypeBuilder.IsCOMObjectImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsCOMObjectImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsConstructedGenericType\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType\n  id: IsConstructedGenericType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsConstructedGenericType\n  nameWithType: TypeBuilder.IsConstructedGenericType\n  fullName: TypeBuilder.IsConstructedGenericType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether this object represents a constructed generic type.\n  syntax:\n    content: public override bool IsConstructedGenericType { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this object represents a constructed generic type; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsConstructedGenericType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsCreated\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsCreated\n  id: IsCreated\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsCreated()\n  nameWithType: TypeBuilder.IsCreated()\n  fullName: TypeBuilder.IsCreated()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a value that indicates whether the current dynamic type has been created.\n  remarks: After the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method has been called, the type represented by the <xref:System.Reflection.Emit.TypeBuilder> object is complete. Exceptions are thrown on any further attempts to add members or change other characteristics of the type.\n  syntax:\n    content: public bool IsCreated ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method has been called; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsCreated*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: TypeBuilder.IsDefined(Type, Boolean)\n  fullName: TypeBuilder.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Determines whether a custom attribute is applied to the current type.\n  remarks: This method is not supported for incomplete generic type parameters. Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: The type of attribute to search for. Only attributes that are assignable to this type are returned.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this member's inheritance chain to find the attributes.\n    return:\n      type: System.Boolean\n      description: '`true` if one or more instances of <code>attributeType</code>, or an attribute derived from <code>attributeType</code>, is defined on this type; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsDefined*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: This method is not currently supported for incomplete types. Retrieve the type using <xref href=\"System.Type.GetType\"></xref> and call <xref href=\"System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)\"></xref> on the returned <xref href=\"System.Type\"></xref>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>attributeType</code> is not defined.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>attributeType</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsEnum\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsEnum\n  id: IsEnum\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsEnum\n  nameWithType: TypeBuilder.IsEnum\n  fullName: TypeBuilder.IsEnum\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsEnum { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsEnum*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericParameter\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsGenericParameter\n  id: IsGenericParameter\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsGenericParameter\n  nameWithType: TypeBuilder.IsGenericParameter\n  fullName: TypeBuilder.IsGenericParameter\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the current type is a generic type parameter.\n  remarks: >-\n    > [!NOTE]\n\n    >  When emitting code, a generic type parameter is represented by a <xref:System.Reflection.Emit.GenericTypeParameterBuilder> object rather than by a <xref:System.Reflection.Emit.TypeBuilder> object.\n  syntax:\n    content: public override bool IsGenericParameter { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type parameter; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsGenericParameter*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericType\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsGenericType\n  id: IsGenericType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsGenericType\n  nameWithType: TypeBuilder.IsGenericType\n  fullName: TypeBuilder.IsGenericType\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the current type is a generic type.\n  remarks: \"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.  \\n  \\n For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public override bool IsGenericType { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the type represented by the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object is generic; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsGenericType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\n  id: IsGenericTypeDefinition\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsGenericTypeDefinition\n  nameWithType: TypeBuilder.IsGenericTypeDefinition\n  fullName: TypeBuilder.IsGenericTypeDefinition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Gets a value indicating whether the current <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> represents a generic type definition from which other generic types can be constructed.\n  remarks: \"A <xref:System.Reflection.Emit.TypeBuilder> object represents a generic type definition if the <xref:System.Reflection.Emit.TypeBuilder.DefineGenericParameters%2A> method has been used to give it generic type parameters. An instance of the <xref:System.Reflection.Emit.TypeBuilder> class that is generic is always a generic type definition.  \\n  \\n A <xref:System.Reflection.Emit.TypeBuilder> can be used to build generic type definitions, but not constructed generic types. To get a constructed generic type, call the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition.  \\n  \\n For more information on generic types in reflection and a list of the invariant conditions for terms used in generic reflection, see the <xref:System.Type.IsGenericType%2A?displayProperty=fullName> property.\"\n  syntax:\n    content: public override bool IsGenericTypeDefinition { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this <xref href=\"System.Reflection.Emit.TypeBuilder\"></xref> object represents a generic type definition; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsPointerImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsPointerImpl\n  id: IsPointerImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsPointerImpl()\n  nameWithType: TypeBuilder.IsPointerImpl()\n  fullName: TypeBuilder.IsPointerImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsPointerImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsPointerImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl\n  id: IsPrimitiveImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsPrimitiveImpl()\n  nameWithType: TypeBuilder.IsPrimitiveImpl()\n  fullName: TypeBuilder.IsPrimitiveImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsPrimitiveImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSecurityCritical\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical\n  id: IsSecurityCritical\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsSecurityCritical\n  nameWithType: TypeBuilder.IsSecurityCritical\n  fullName: TypeBuilder.IsSecurityCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe-critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  \\n  \\n By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  \\n  \\n> [!NOTE]\\n>  Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  \\n  \\n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public override bool IsSecurityCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current type is security-critical or security-safe-critical; `false` if it is transparent.'\n  overload: System.Reflection.Emit.TypeBuilder.IsSecurityCritical*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical\n  id: IsSecuritySafeCritical\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsSecuritySafeCritical\n  nameWithType: TypeBuilder.IsSecuritySafeCritical\n  fullName: TypeBuilder.IsSecuritySafeCritical\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe-critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  \\n  \\n By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  \\n  \\n> [!NOTE]\\n>  Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  \\n  \\n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public override bool IsSecuritySafeCritical { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current type is security-safe-critical; `false` if it is security-critical or transparent.'\n  overload: System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsSecurityTransparent\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent\n  id: IsSecurityTransparent\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsSecurityTransparent\n  nameWithType: TypeBuilder.IsSecurityTransparent\n  fullName: TypeBuilder.IsSecurityTransparent\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.IsSecurityCritical%2A>, <xref:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical%2A>, and <xref:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent%2A> properties report the transparency level of the type, as determined by the common language runtime (CLR). The combinations of these properties are shown in the following table:  \\n  \\n|Security level|IsSecurityCritical|IsSecuritySafeCritical|IsSecurityTransparent|  \\n|--------------------|------------------------|----------------------------|---------------------------|  \\n|Critical|`true`|`false`|`false`|  \\n|Safe-critical|`true`|`true`|`false`|  \\n|Transparent|`false`|`false`|`true`|  \\n  \\n Using these properties is much simpler than examining the security annotations of an assembly and its types, checking the current trust level, and attempting to duplicate the runtime's rules.  \\n  \\n The runtime begins evaluating transparency levels at the assembly. For example, if the dynamic assembly is security-critical, annotations on types are ignored, and all types are security-critical.  \\n  \\n By default, a dynamic assembly inherits the transparency of the assembly that emits it. You can override this default by using the <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName>, or <xref:System.AppDomain.DefineDynamicAssembly%28System.Reflection.AssemblyName%2CSystem.Reflection.Emit.AssemblyBuilderAccess%2CSystem.String%2CSystem.Security.Policy.Evidence%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Security.PermissionSet%2CSystem.Boolean%2CSystem.Collections.Generic.IEnumerable%7BSystem.Reflection.Emit.CustomAttributeBuilder%7D%29?displayProperty=fullName> method overload and specifying security attributes. You cannot elevate security levels by doing this; that is, transparent code cannot emit security-critical or security-safe-critical code. Attributes must be specified when the dynamic assembly is created, or they do not take effect until the assembly has been saved to disk and reloaded.  \\n  \\n> [!NOTE]\\n>  Default inheritance is limited to the runtime's evaluation of transparency. No attributes are applied to the dynamic assembly. If you want to add security attributes, you must apply them yourself.  \\n  \\n For more information about reflection emit and transparency, see [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md). For information about transparency, see [Security Changes](~/docs/framework/security/security-changes.md).\"\n  syntax:\n    content: public override bool IsSecurityTransparent { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the type is security-transparent; otherwise, `false`.'\n  overload: System.Reflection.Emit.TypeBuilder.IsSecurityTransparent*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The current dynamic type has not been created by calling the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref> method.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsSerializable\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsSerializable\n  id: IsSerializable\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsSerializable\n  nameWithType: TypeBuilder.IsSerializable\n  fullName: TypeBuilder.IsSerializable\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsSerializable { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsSerializable*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)\n  id: IsSubclassOf(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsSubclassOf(Type)\n  nameWithType: TypeBuilder.IsSubclassOf(Type)\n  fullName: TypeBuilder.IsSubclassOf(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Determines whether this type is derived from a specified type.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override bool IsSubclassOf (Type c);\n    parameters:\n    - id: c\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> that is to be checked.\n    return:\n      type: System.Boolean\n      description: Read-only. Returns `true` if this type is the same as the type <code>c</code>, or is a subtype of type <code>c</code>; otherwise, `false`.\n  overload: System.Reflection.Emit.TypeBuilder.IsSubclassOf*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.IsSZArray\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsSZArray\n  id: IsSZArray\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsSZArray\n  nameWithType: TypeBuilder.IsSZArray\n  fullName: TypeBuilder.IsSZArray\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsSZArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsSZArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsTypeDefinition\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition\n  id: IsTypeDefinition\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsTypeDefinition\n  nameWithType: TypeBuilder.IsTypeDefinition\n  fullName: TypeBuilder.IsTypeDefinition\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsTypeDefinition { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsValueTypeImpl\n  commentId: M:System.Reflection.Emit.TypeBuilder.IsValueTypeImpl\n  id: IsValueTypeImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsValueTypeImpl()\n  nameWithType: TypeBuilder.IsValueTypeImpl()\n  fullName: TypeBuilder.IsValueTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  syntax:\n    content: protected override bool IsValueTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsValueTypeImpl*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsVariableBoundArray\n  commentId: P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray\n  id: IsVariableBoundArray\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: IsVariableBoundArray\n  nameWithType: TypeBuilder.IsVariableBoundArray\n  fullName: TypeBuilder.IsVariableBoundArray\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  syntax:\n    content: public override bool IsVariableBoundArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.Emit.TypeBuilder.IsVariableBoundArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.MakeArrayType\n  commentId: M:System.Reflection.Emit.TypeBuilder.MakeArrayType\n  id: MakeArrayType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: MakeArrayType()\n  nameWithType: TypeBuilder.MakeArrayType()\n  fullName: TypeBuilder.MakeArrayType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents a one-dimensional array of the current type, with a lower bound of zero.\n  remarks: The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.\n  example:\n  - \"The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`. It returns a two-dimensional array of type `Sample`. The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).  \\n  \\n [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakeArrayType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.\n  overload: System.Reflection.Emit.TypeBuilder.MakeArrayType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)\n  commentId: M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)\n  id: MakeArrayType(System.Int32)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: MakeArrayType(Int32)\n  nameWithType: TypeBuilder.MakeArrayType(Int32)\n  fullName: TypeBuilder.MakeArrayType(Int32)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents an array of the current type, with the specified number of dimensions.\n  remarks: The <xref:System.Reflection.Emit.TypeBuilder.MakeArrayType%2A> method provides a way to generate an array type with any possible element type, including generic types.\n  example:\n  - \"The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`. It returns a two-dimensional array of type `Sample`. The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).  \\n  \\n [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakeArrayType (int rank);\n    parameters:\n    - id: rank\n      type: System.Int32\n      description: The number of dimensions for the array.\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents a one-dimensional array of the current type.\n  overload: System.Reflection.Emit.TypeBuilder.MakeArrayType*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: <code>rank</code> is not a valid array dimension.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.MakeByRefType\n  commentId: M:System.Reflection.Emit.TypeBuilder.MakeByRefType\n  id: MakeByRefType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: MakeByRefType()\n  nameWithType: TypeBuilder.MakeByRefType()\n  fullName: TypeBuilder.MakeByRefType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` in Visual Basic).\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.MakeByRefType%2A> method provides a way to generate `ref` types (`ByRef` in Visual Basic) for parameter lists.  \\n  \\n> [!NOTE]\\n>  Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType&`.\"\n  example:\n  - \"The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`. It returns a two-dimensional array of type `Sample`. The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).  \\n  \\n [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakeByRefType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the current type when passed as a `ref` parameter (`ByRef` in Visual Basic).\n  overload: System.Reflection.Emit.TypeBuilder.MakeByRefType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])\n  id: MakeGenericType(System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: MakeGenericType(Type[])\n  nameWithType: TypeBuilder.MakeGenericType(Type[])\n  fullName: TypeBuilder.MakeGenericType(Type[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.\n  remarks: \"Use this method when your emitted code requires a type constructed from the current generic type definition. It is not necessary to call the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method before calling the <xref:System.Reflection.Emit.TypeBuilder.MakeGenericType%2A> method on a <xref:System.Reflection.Emit.TypeBuilder> that represents a generic type definition. If the current <xref:System.Reflection.Emit.TypeBuilder> does not represent the definition of a generic type, an <xref:System.InvalidOperationException> is thrown.  \\n  \\n The object returned by this method functions as a placeholder for a constructed generic type in your emitted code. It is an instance of a class derived from <xref:System.Type> that has limited capabilities. In particular:  \\n  \\n-   To get methods, fields, and constructors for these constructed generic types, use the <xref:System.Reflection.Emit.TypeBuilder.GetMethod%28System.Type%2CSystem.Reflection.MethodInfo%29>, <xref:System.Reflection.Emit.TypeBuilder.GetField%28System.Type%2CSystem.Reflection.FieldInfo%29>, and <xref:System.Reflection.Emit.TypeBuilder.GetConstructor%28System.Type%2CSystem.Reflection.ConstructorInfo%29> method overloads.  \\n  \\n-   Two instances that represent the same constructed type do not compare as equal. For example, in the following code `t1.Equals(t2)` returns `false`:  \\n  \\n [!code-cpp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cpp/remarks.cpp#1)]\\n [!code-csharp[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/cs/remarks.cs#1)]\\n [!code-vb[System.Reflection.Emit.TypeBuilder.MakeGenericType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.emit.typebuilder.makegenerictype/vb/remarks.vb#1)]\"\n  syntax:\n    content: public override Type MakeGenericType (Type[] typeArguments);\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n      description: An array of types to be substituted for the type parameters of the current generic type definition.\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> representing the constructed type formed by substituting the elements of <code>typeArguments</code> for the type parameters of the current generic type.\n  overload: System.Reflection.Emit.TypeBuilder.MakeGenericType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current type does not represent the definition of a generic type. That is, <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> returns `false`.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>typeArguments</code> is `null`.  \\n  \\n -or-  \\n  \\n Any element of <code>typeArguments</code> is `null`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <xref href=\\\"System.Type.Module\\\"></xref> property of any element of <code>typeArguments</code> is `null`.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Reflection.Module.Assembly\\\"></xref> property of the module of any element of <code>typeArguments</code> is `null`.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.MakePointerType\n  commentId: M:System.Reflection.Emit.TypeBuilder.MakePointerType\n  id: MakePointerType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: MakePointerType()\n  nameWithType: TypeBuilder.MakePointerType()\n  fullName: TypeBuilder.MakePointerType()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns a <xref href=\"System.Type\"></xref> object that represents the type of an unmanaged pointer to the current type.\n  remarks: \"The <xref:System.Reflection.Emit.TypeBuilder.MakePointerType%2A> method provides a way to generate pointer types for parameter lists.  \\n  \\n> [!NOTE]\\n>  Using Microsoft intermediate language (MSIL) syntax, if the current <xref:System.Reflection.Emit.TypeBuilder> represents `MyType`, then the type returned by this method would be `MyType*`.\"\n  example:\n  - \"The following code example creates a dynamic module, an abstract type named `Sample`, and an abstract method named `TestMethod`. `TestMethod` takes a `ref` parameter (`ByRef` in Visual Basic) of type `Sample`, a pointer to type `Sample`, and an array of type `Sample`. It returns a two-dimensional array of type `Sample`. The code example saves the dynamic module to disk, so you can examine it with the [Ildasm.exe (IL Disassembler)](~/docs/framework/tools/ildasm-exe-il-disassembler.md).  \\n  \\n [!code-csharp[MakeXxxTypeBuilder#1](~/samples/snippets/csharp/VS_Snippets_CLR/MakeXxxTypeBuilder/CS/source.cs#1)]\\n [!code-vb[MakeXxxTypeBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MakeXxxTypeBuilder/VB/source.vb#1)]\"\n  syntax:\n    content: public override Type MakePointerType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents the type of an unmanaged pointer to the current type.\n  overload: System.Reflection.Emit.TypeBuilder.MakePointerType*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.Module\n  commentId: P:System.Reflection.Emit.TypeBuilder.Module\n  id: Module\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: Module\n  nameWithType: TypeBuilder.Module\n  fullName: TypeBuilder.Module\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the dynamic module that contains this type definition.\n  syntax:\n    content: public override System.Reflection.Module Module { get; }\n    return:\n      type: System.Reflection.Module\n      description: Read-only. Retrieves the dynamic module that contains this type definition.\n  overload: System.Reflection.Emit.TypeBuilder.Module*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.Name\n  commentId: P:System.Reflection.Emit.TypeBuilder.Name\n  id: Name\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: Name\n  nameWithType: TypeBuilder.Name\n  fullName: TypeBuilder.Name\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the name of this type.\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: Read-only. Retrieves the <xref href=\"System.String\"></xref> name of this type.\n  overload: System.Reflection.Emit.TypeBuilder.Name*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.Namespace\n  commentId: P:System.Reflection.Emit.TypeBuilder.Namespace\n  id: Namespace\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: TypeBuilder.Namespace\n  fullName: TypeBuilder.Namespace\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the namespace where this `TypeBuilder` is defined.\n  syntax:\n    content: public override string Namespace { get; }\n    return:\n      type: System.String\n      description: Read-only. Retrieves the namespace where this `TypeBuilder` is defined.\n  overload: System.Reflection.Emit.TypeBuilder.Namespace*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.PackingSize\n  commentId: P:System.Reflection.Emit.TypeBuilder.PackingSize\n  id: PackingSize\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: PackingSize\n  nameWithType: TypeBuilder.PackingSize\n  fullName: TypeBuilder.PackingSize\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the packing size of this type.\n  syntax:\n    content: public System.Reflection.Emit.PackingSize PackingSize { get; }\n    return:\n      type: System.Reflection.Emit.PackingSize\n      description: Read-only. Retrieves the packing size of this type.\n  overload: System.Reflection.Emit.TypeBuilder.PackingSize*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.ReflectedType\n  commentId: P:System.Reflection.Emit.TypeBuilder.ReflectedType\n  id: ReflectedType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: ReflectedType\n  nameWithType: TypeBuilder.ReflectedType\n  fullName: TypeBuilder.ReflectedType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the type that was used to obtain this type.\n  syntax:\n    content: public override Type ReflectedType { get; }\n    return:\n      type: System.Type\n      description: Read-only. The type that was used to obtain this type.\n  overload: System.Reflection.Emit.TypeBuilder.ReflectedType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  commentId: M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: TypeBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: TypeBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Set a custom attribute using a custom attribute builder.\n  remarks: >-\n    > [!NOTE]\n\n    >  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\n  syntax:\n    content: public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);\n    parameters:\n    - id: customBuilder\n      type: System.Reflection.Emit.CustomAttributeBuilder\n      description: An instance of a helper class to define the custom attribute.\n  overload: System.Reflection.Emit.TypeBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>customBuilder</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  commentId: M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: TypeBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: TypeBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets a custom attribute using a specified custom attribute blob.\n  remarks: \"For more information on how to format `binaryAttribute`, see the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.  \\n  \\n> [!NOTE]\\n>  Starting with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)], this member no longer requires <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag. (See [Security Issues in Reflection Emit](~/docs/framework/reflection-and-codedom/security-issues-in-reflection-emit.md).) To use this functionality, your application should target the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] or later.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);\n    parameters:\n    - id: con\n      type: System.Reflection.ConstructorInfo\n      description: The constructor for the custom attribute.\n    - id: binaryAttribute\n      type: System.Byte[]\n      description: A byte blob representing the attributes.\n  overload: System.Reflection.Emit.TypeBuilder.SetCustomAttribute*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>con</code> or <code>binaryAttribute</code> is `null`.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: For the current dynamic type, the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericType\"></xref> property is `true`, but the <xref href=\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\"></xref> property is `false`.\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.SetParent(System.Type)\n  commentId: M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)\n  id: SetParent(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: SetParent(Type)\n  nameWithType: TypeBuilder.SetParent(Type)\n  fullName: TypeBuilder.SetParent(Type)\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Sets the base type of the type currently under construction.\n  remarks: \"If `parent` is `null`, <xref:System.Object> is used as the base type.  \\n  \\n In the .NET Framework versions 1.0 and 1.1, no exception is thrown if `parent` is an interface type, but a <xref:System.TypeLoadException> is thrown when the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method is called.  \\n  \\n The <xref:System.Reflection.Emit.TypeBuilder.SetParent%2A> method does not check for most invalid parent types. For example, it does not reject a parent type that has no default constructor when the current type has a default constructor, it does not reject sealed types, and it does not reject the <xref:System.Delegate> type. In all these cases, exceptions are thrown by the <xref:System.Reflection.Emit.TypeBuilder.CreateType%2A> method.\"\n  syntax:\n    content: public void SetParent (Type parent);\n    parameters:\n    - id: parent\n      type: System.Type\n      description: The new base type.\n  overload: System.Reflection.Emit.TypeBuilder.SetParent*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The type was previously created using <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>parent</code> is `null`, and the current instance represents an interface whose attributes do not include <xref href=\\\"System.Reflection.TypeAttributes.Abstract\\\"></xref>.  \\n  \\n -or-  \\n  \\n For the current dynamic type, the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericType\\\"></xref> property is `true`, but the <xref href=\\\"System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\\\"></xref> property is `false`.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>parent</code> is an interface. This exception condition is new in the .NET Framework version 2.0.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.Size\n  commentId: P:System.Reflection.Emit.TypeBuilder.Size\n  id: Size\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: Size\n  nameWithType: TypeBuilder.Size\n  fullName: TypeBuilder.Size\n  type: Property\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the total size of a type.\n  syntax:\n    content: public int Size { get; }\n    return:\n      type: System.Int32\n      description: Read-only. Retrieves this type’s total size.\n  overload: System.Reflection.Emit.TypeBuilder.Size*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.ToString\n  commentId: M:System.Reflection.Emit.TypeBuilder.ToString\n  id: ToString\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: TypeBuilder.ToString()\n  fullName: TypeBuilder.ToString()\n  type: Method\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the name of the type excluding the namespace.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: Read-only. The name of the type excluding the namespace.\n  overload: System.Reflection.Emit.TypeBuilder.ToString*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.TypeHandle\n  commentId: P:System.Reflection.Emit.TypeBuilder.TypeHandle\n  id: TypeHandle\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: TypeHandle\n  nameWithType: TypeBuilder.TypeHandle\n  fullName: TypeBuilder.TypeHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Not supported in dynamic modules.\n  remarks: Retrieve the type using <xref:System.Type.GetType%2A?displayProperty=fullName> or <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName> and use reflection on the retrieved type.\n  syntax:\n    content: public override RuntimeTypeHandle TypeHandle { get; }\n    return:\n      type: System.RuntimeTypeHandle\n      description: Read-only.\n  overload: System.Reflection.Emit.TypeBuilder.TypeHandle*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: Not supported in dynamic modules.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.TypeToken\n  commentId: P:System.Reflection.Emit.TypeBuilder.TypeToken\n  id: TypeToken\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: TypeToken\n  nameWithType: TypeBuilder.TypeToken\n  fullName: TypeBuilder.TypeToken\n  type: Property\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Returns the type token of this type.\n  syntax:\n    content: public System.Reflection.Emit.TypeToken TypeToken { get; }\n    return:\n      type: System.Reflection.Emit.TypeToken\n      description: Read-only. Returns the `TypeToken` of this type.\n  overload: System.Reflection.Emit.TypeBuilder.TypeToken*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType\n  commentId: P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType\n  id: UnderlyingSystemType\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: UnderlyingSystemType\n  nameWithType: TypeBuilder.UnderlyingSystemType\n  fullName: TypeBuilder.UnderlyingSystemType\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Reflection.Emit\n  namespace: System.Reflection.Emit\n  summary: Returns the underlying system type for this `TypeBuilder`.\n  syntax:\n    content: public override Type UnderlyingSystemType { get; }\n    return:\n      type: System.Type\n      description: Read-only. Returns the underlying system type.\n  overload: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This type is an enumeration, but there is no underlying system type.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize\n  commentId: F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize\n  id: UnspecifiedTypeSize\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: UnspecifiedTypeSize\n  nameWithType: TypeBuilder.UnspecifiedTypeSize\n  fullName: TypeBuilder.UnspecifiedTypeSize\n  type: Field\n  assemblies:\n  - System.Reflection.Emit\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Represents that total size for the type is not specified.\n  syntax:\n    content: public const int UnspecifiedTypeSize = 0;\n    return:\n      type: System.Int32\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: _TypeBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: TypeBuilder._TypeBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: TypeBuilder._TypeBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Maps a set of names to a corresponding set of dispatch identifiers.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.\n  syntax:\n    content: void _TypeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);\n    parameters:\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: rgszNames\n      type: System.IntPtr\n      description: Passed-in array of names to be mapped.\n    - id: cNames\n      type: System.UInt32\n      description: Count of the names to be mapped.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret the names.\n    - id: rgDispId\n      type: System.IntPtr\n      description: Caller-allocated array which receives the IDs corresponding to the names.\n  overload: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  commentId: M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  id: System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: _TypeBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: TypeBuilder._TypeBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: TypeBuilder._TypeBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the type information for an object, which can then be used to get the type information for an interface.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.\n  syntax:\n    content: void _TypeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);\n    parameters:\n    - id: iTInfo\n      type: System.UInt32\n      description: The type information to return.\n    - id: lcid\n      type: System.UInt32\n      description: The locale identifier for the type information.\n    - id: ppTInfo\n      type: System.IntPtr\n      description: Receives a pointer to the requested type information object.\n  overload: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)\n  commentId: M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)\n  id: System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)\n  isEii: true\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: _TypeBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: TypeBuilder._TypeBuilder.GetTypeInfoCount(UInt32)\n  fullName: TypeBuilder._TypeBuilder.GetTypeInfoCount(UInt32)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Retrieves the number of type information interfaces that an object provides (either 0 or 1).\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.\n  syntax:\n    content: void _TypeBuilder.GetTypeInfoCount (out uint pcTInfo);\n    parameters:\n    - id: pcTInfo\n      type: System.UInt32\n      description: Points to a location that receives the number of type information interfaces provided by the object.\n  overload: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  commentId: M:System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  id: System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  isEii: true\n  parent: System.Reflection.Emit.TypeBuilder\n  langs:\n  - csharp\n  name: _TypeBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: TypeBuilder._TypeBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: TypeBuilder._TypeBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Reflection.Emit\n  summary: Provides access to properties and methods exposed by an object.\n  remarks: This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.\n  syntax:\n    content: void _TypeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);\n    parameters:\n    - id: dispIdMember\n      type: System.UInt32\n      description: Identifies the member.\n    - id: riid\n      type: System.Guid\n      description: Reserved for future use. Must be IID_NULL.\n    - id: lcid\n      type: System.UInt32\n      description: The locale context in which to interpret arguments.\n    - id: wFlags\n      type: System.Int16\n      description: Flags describing the context of the call.\n    - id: pDispParams\n      type: System.IntPtr\n      description: Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.\n    - id: pVarResult\n      type: System.IntPtr\n      description: Pointer to the location where the result is to be stored.\n    - id: pExcepInfo\n      type: System.IntPtr\n      description: Pointer to a structure that contains exception information.\n    - id: puArgErr\n      type: System.IntPtr\n      description: The index of the first argument that has an error.\n  overload: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke*\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: Late-bound access using the COM <code>IDispatch</code> interface is not supported.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.TypeInfo\n  parent: System.Reflection\n  isExternal: false\n  name: TypeInfo\n  nameWithType: TypeInfo\n  fullName: System.Reflection.TypeInfo\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  nameWithType: TypeLoadException\n  fullName: System.TypeLoadException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.NotImplementedException\n  parent: System\n  isExternal: false\n  name: NotImplementedException\n  nameWithType: NotImplementedException\n  fullName: System.NotImplementedException\n- uid: System.Reflection.Emit.TypeBuilder.#ctor\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: TypeBuilder()\n  nameWithType: TypeBuilder.TypeBuilder()\n  fullName: TypeBuilder.TypeBuilder()\n- uid: System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction,System.Security.PermissionSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  nameWithType: TypeBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n  fullName: TypeBuilder.AddDeclarativeSecurity(SecurityAction, PermissionSet)\n- uid: System.Security.Permissions.SecurityAction\n  parent: System.Security.Permissions\n  isExternal: false\n  name: SecurityAction\n  nameWithType: SecurityAction\n  fullName: System.Security.Permissions.SecurityAction\n- uid: System.Security.PermissionSet\n  parent: System.Security\n  isExternal: false\n  name: PermissionSet\n  nameWithType: PermissionSet\n  fullName: System.Security.PermissionSet\n- uid: System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: AddInterfaceImplementation(Type)\n  nameWithType: TypeBuilder.AddInterfaceImplementation(Type)\n  fullName: TypeBuilder.AddInterfaceImplementation(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.Emit.TypeBuilder.Assembly\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Assembly\n  nameWithType: TypeBuilder.Assembly\n  fullName: TypeBuilder.Assembly\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: TypeBuilder.AssemblyQualifiedName\n  fullName: TypeBuilder.AssemblyQualifiedName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.Emit.TypeBuilder.Attributes\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: TypeBuilder.Attributes\n  fullName: TypeBuilder.Attributes\n- uid: System.Reflection.TypeAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: TypeAttributes\n  nameWithType: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n- uid: System.Reflection.Emit.TypeBuilder.BaseType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: BaseType\n  nameWithType: TypeBuilder.BaseType\n  fullName: TypeBuilder.BaseType\n- uid: System.Reflection.Emit.TypeBuilder.ContainsGenericParameters\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: TypeBuilder.ContainsGenericParameters\n  fullName: TypeBuilder.ContainsGenericParameters\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.Emit.TypeBuilder.CreateType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: CreateType()\n  nameWithType: TypeBuilder.CreateType()\n  fullName: TypeBuilder.CreateType()\n- uid: System.Reflection.Emit.TypeBuilder.CreateTypeInfo\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: CreateTypeInfo()\n  nameWithType: TypeBuilder.CreateTypeInfo()\n  fullName: TypeBuilder.CreateTypeInfo()\n- uid: System.Reflection.Emit.TypeBuilder.DeclaringMethod\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DeclaringMethod\n  nameWithType: TypeBuilder.DeclaringMethod\n  fullName: TypeBuilder.DeclaringMethod\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  nameWithType: MethodBase\n  fullName: System.Reflection.MethodBase\n- uid: System.Reflection.Emit.TypeBuilder.DeclaringType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: TypeBuilder.DeclaringType\n  fullName: TypeBuilder.DeclaringType\n- uid: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineConstructor(MethodAttributes, CallingConventions, Type[])\n  nameWithType: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[])\n  fullName: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[])\n- uid: System.Reflection.Emit.ConstructorBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: ConstructorBuilder\n  nameWithType: ConstructorBuilder\n  fullName: System.Reflection.Emit.ConstructorBuilder\n- uid: System.Reflection.MethodAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodAttributes\n  nameWithType: MethodAttributes\n  fullName: System.Reflection.MethodAttributes\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineConstructor(MethodAttributes, CallingConventions, Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineConstructor(MethodAttributes, CallingConventions, Type[], Type[][], Type[][])\n- uid: System.Type[][]\n  parent: System\n  isExternal: false\n  name: Type[][]\n  nameWithType: Type[][]\n  fullName: System.Type[][]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineDefaultConstructor(MethodAttributes)\n  nameWithType: TypeBuilder.DefineDefaultConstructor(MethodAttributes)\n  fullName: TypeBuilder.DefineDefaultConstructor(MethodAttributes)\n- uid: System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineEvent(String, EventAttributes, Type)\n  nameWithType: TypeBuilder.DefineEvent(String, EventAttributes, Type)\n  fullName: TypeBuilder.DefineEvent(String, EventAttributes, Type)\n- uid: System.Reflection.Emit.EventBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: EventBuilder\n  nameWithType: EventBuilder\n  fullName: System.Reflection.Emit.EventBuilder\n- uid: System.Reflection.EventAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: EventAttributes\n  nameWithType: EventAttributes\n  fullName: System.Reflection.EventAttributes\n- uid: System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineField(String, Type, FieldAttributes)\n  nameWithType: TypeBuilder.DefineField(String, Type, FieldAttributes)\n  fullName: TypeBuilder.DefineField(String, Type, FieldAttributes)\n- uid: System.Reflection.Emit.FieldBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: FieldBuilder\n  nameWithType: FieldBuilder\n  fullName: System.Reflection.Emit.FieldBuilder\n- uid: System.Reflection.FieldAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: FieldAttributes\n  nameWithType: FieldAttributes\n  fullName: System.Reflection.FieldAttributes\n- uid: System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineField(String, Type, Type[], Type[], FieldAttributes)\n  nameWithType: TypeBuilder.DefineField(String, Type, Type[], Type[], FieldAttributes)\n  fullName: TypeBuilder.DefineField(String, Type, Type[], Type[], FieldAttributes)\n- uid: System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineGenericParameters(String[])\n  nameWithType: TypeBuilder.DefineGenericParameters(String[])\n  fullName: TypeBuilder.DefineGenericParameters(String[])\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder\n  name: GenericTypeParameterBuilder\n  nameWithType: GenericTypeParameterBuilder\n  fullName: System.Reflection.Emit.GenericTypeParameterBuilder\n- uid: System.Reflection.Emit.GenericTypeParameterBuilder[]\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: GenericTypeParameterBuilder[]\n  nameWithType: GenericTypeParameterBuilder[]\n  fullName: System.Reflection.Emit.GenericTypeParameterBuilder[]\n  spec.csharp:\n  - uid: System.Reflection.Emit.GenericTypeParameterBuilder\n    name: GenericTypeParameterBuilder\n    nameWithType: GenericTypeParameterBuilder\n    fullName: System.Reflection.Emit.GenericTypeParameterBuilder\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineInitializedData(String, Byte[], FieldAttributes)\n  nameWithType: TypeBuilder.DefineInitializedData(String, Byte[], FieldAttributes)\n  fullName: TypeBuilder.DefineInitializedData(String, Byte[], FieldAttributes)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethod(String, MethodAttributes)\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes)\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes)\n- uid: System.Reflection.Emit.MethodBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: MethodBuilder\n  nameWithType: MethodBuilder\n  fullName: System.Reflection.Emit.MethodBuilder\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethod(String, MethodAttributes, CallingConventions)\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions)\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions)\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethod(String, MethodAttributes, Type, Type[])\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, Type, Type[])\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, Type, Type[])\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[])\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethodOverride(MethodInfo, MethodInfo)\n  nameWithType: TypeBuilder.DefineMethodOverride(MethodInfo, MethodInfo)\n  fullName: TypeBuilder.DefineMethodOverride(MethodInfo, MethodInfo)\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType(String, TypeAttributes, Type, PackingSize, Int32)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize, Int32)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize, Int32)\n- uid: System.Reflection.Emit.TypeBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: TypeBuilder\n  nameWithType: TypeBuilder\n  fullName: System.Reflection.Emit.TypeBuilder\n- uid: System.Reflection.Emit.PackingSize\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: PackingSize\n  nameWithType: PackingSize\n  fullName: System.Reflection.Emit.PackingSize\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType(String, TypeAttributes, Type, Type[])\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Type[])\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Type[])\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType(String, TypeAttributes, Type, Int32)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Int32)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, Int32)\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType(String, TypeAttributes, Type, PackingSize)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type, PackingSize)\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType(String, TypeAttributes)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes)\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType(String)\n  nameWithType: TypeBuilder.DefineNestedType(String)\n  fullName: TypeBuilder.DefineNestedType(String)\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType(String, TypeAttributes, Type)\n  nameWithType: TypeBuilder.DefineNestedType(String, TypeAttributes, Type)\n  fullName: TypeBuilder.DefineNestedType(String, TypeAttributes, Type)\n- uid: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  nameWithType: TypeBuilder.DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  fullName: TypeBuilder.DefinePInvokeMethod(String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n- uid: System.Runtime.InteropServices.CallingConvention\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CallingConvention\n  nameWithType: CallingConvention\n  fullName: System.Runtime.InteropServices.CallingConvention\n- uid: System.Runtime.InteropServices.CharSet\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CharSet\n  nameWithType: CharSet\n  fullName: System.Runtime.InteropServices.CharSet\n- uid: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  nameWithType: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n  fullName: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], CallingConvention, CharSet)\n- uid: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][], CallingConvention, CharSet)\n  nameWithType: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][], CallingConvention, CharSet)\n  fullName: TypeBuilder.DefinePInvokeMethod(String, String, String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][], CallingConvention, CharSet)\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineProperty(String, PropertyAttributes, Type, Type[])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[])\n- uid: System.Reflection.Emit.PropertyBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: PropertyBuilder\n  nameWithType: PropertyBuilder\n  fullName: System.Reflection.Emit.PropertyBuilder\n- uid: System.Reflection.PropertyAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyAttributes\n  nameWithType: PropertyAttributes\n  fullName: System.Reflection.PropertyAttributes\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[])\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineProperty(String, PropertyAttributes, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, Type, Type[], Type[], Type[], Type[][], Type[][])\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  nameWithType: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n  fullName: TypeBuilder.DefineProperty(String, PropertyAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])\n- uid: System.Reflection.Emit.TypeBuilder.DefineTypeInitializer\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineTypeInitializer()\n  nameWithType: TypeBuilder.DefineTypeInitializer()\n  fullName: TypeBuilder.DefineTypeInitializer()\n- uid: System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineUninitializedData(String, Int32, FieldAttributes)\n  nameWithType: TypeBuilder.DefineUninitializedData(String, Int32, FieldAttributes)\n  fullName: TypeBuilder.DefineUninitializedData(String, Int32, FieldAttributes)\n- uid: System.Reflection.Emit.TypeBuilder.FullName\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: FullName\n  nameWithType: TypeBuilder.FullName\n  fullName: TypeBuilder.FullName\n- uid: System.Reflection.Emit.TypeBuilder.GenericParameterAttributes\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: TypeBuilder.GenericParameterAttributes\n  fullName: TypeBuilder.GenericParameterAttributes\n- uid: System.Reflection.GenericParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: GenericParameterAttributes\n  fullName: System.Reflection.GenericParameterAttributes\n- uid: System.Reflection.Emit.TypeBuilder.GenericParameterPosition\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GenericParameterPosition\n  nameWithType: TypeBuilder.GenericParameterPosition\n  fullName: TypeBuilder.GenericParameterPosition\n- uid: System.Reflection.Emit.TypeBuilder.GenericTypeArguments\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GenericTypeArguments\n  nameWithType: TypeBuilder.GenericTypeArguments\n  fullName: TypeBuilder.GenericTypeArguments\n- uid: System.Reflection.Emit.TypeBuilder.GetArrayRank\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetArrayRank()\n  nameWithType: TypeBuilder.GetArrayRank()\n  fullName: TypeBuilder.GetArrayRank()\n- uid: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetAttributeFlagsImpl()\n  nameWithType: TypeBuilder.GetAttributeFlagsImpl()\n  fullName: TypeBuilder.GetAttributeFlagsImpl()\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetConstructor(Type, ConstructorInfo)\n  nameWithType: TypeBuilder.GetConstructor(Type, ConstructorInfo)\n  fullName: TypeBuilder.GetConstructor(Type, ConstructorInfo)\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeBuilder.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Reflection.ParameterModifier\n  name: ParameterModifier\n  nameWithType: ParameterModifier\n  fullName: System.Reflection.ParameterModifier\n- uid: System.Reflection.ParameterModifier[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterModifier[]\n  nameWithType: ParameterModifier[]\n  fullName: System.Reflection.ParameterModifier[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    nameWithType: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetConstructors(BindingFlags)\n  nameWithType: TypeBuilder.GetConstructors(BindingFlags)\n  fullName: TypeBuilder.GetConstructors(BindingFlags)\n- uid: System.Reflection.ConstructorInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo[]\n  nameWithType: ConstructorInfo[]\n  fullName: System.Reflection.ConstructorInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    nameWithType: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: TypeBuilder.GetCustomAttributes(Boolean)\n  fullName: TypeBuilder.GetCustomAttributes(Boolean)\n- uid: System.Object\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: TypeBuilder.GetCustomAttributes(Type, Boolean)\n  fullName: TypeBuilder.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.Emit.TypeBuilder.GetElementType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetElementType()\n  nameWithType: TypeBuilder.GetElementType()\n  fullName: TypeBuilder.GetElementType()\n- uid: System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetEvent(String, BindingFlags)\n  nameWithType: TypeBuilder.GetEvent(String, BindingFlags)\n  fullName: TypeBuilder.GetEvent(String, BindingFlags)\n- uid: System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n- uid: System.Reflection.Emit.TypeBuilder.GetEvents\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetEvents()\n  nameWithType: TypeBuilder.GetEvents()\n  fullName: TypeBuilder.GetEvents()\n- uid: System.Reflection.EventInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo[]\n  nameWithType: EventInfo[]\n  fullName: System.Reflection.EventInfo[]\n  spec.csharp:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    nameWithType: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetEvents(BindingFlags)\n  nameWithType: TypeBuilder.GetEvents(BindingFlags)\n  fullName: TypeBuilder.GetEvents(BindingFlags)\n- uid: System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetField(String, BindingFlags)\n  nameWithType: TypeBuilder.GetField(String, BindingFlags)\n  fullName: TypeBuilder.GetField(String, BindingFlags)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetField(Type, FieldInfo)\n  nameWithType: TypeBuilder.GetField(Type, FieldInfo)\n  fullName: TypeBuilder.GetField(Type, FieldInfo)\n- uid: System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetFields(BindingFlags)\n  nameWithType: TypeBuilder.GetFields(BindingFlags)\n  fullName: TypeBuilder.GetFields(BindingFlags)\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo[]\n  nameWithType: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericArguments\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: TypeBuilder.GetGenericArguments()\n  fullName: TypeBuilder.GetGenericArguments()\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetGenericParameterConstraints()\n  nameWithType: TypeBuilder.GetGenericParameterConstraints()\n  fullName: TypeBuilder.GetGenericParameterConstraints()\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetGenericTypeDefinition()\n  nameWithType: TypeBuilder.GetGenericTypeDefinition()\n  fullName: TypeBuilder.GetGenericTypeDefinition()\n- uid: System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetInterface(String, Boolean)\n  nameWithType: TypeBuilder.GetInterface(String, Boolean)\n  fullName: TypeBuilder.GetInterface(String, Boolean)\n- uid: System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetInterfaceMap(Type)\n  nameWithType: TypeBuilder.GetInterfaceMap(Type)\n  fullName: TypeBuilder.GetInterfaceMap(Type)\n- uid: System.Reflection.InterfaceMapping\n  parent: System.Reflection\n  isExternal: false\n  name: InterfaceMapping\n  nameWithType: InterfaceMapping\n  fullName: System.Reflection.InterfaceMapping\n- uid: System.Reflection.Emit.TypeBuilder.GetInterfaces\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetInterfaces()\n  nameWithType: TypeBuilder.GetInterfaces()\n  fullName: TypeBuilder.GetInterfaces()\n- uid: System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: TypeBuilder.GetMember(String, MemberTypes, BindingFlags)\n  fullName: TypeBuilder.GetMember(String, MemberTypes, BindingFlags)\n- uid: System.Reflection.MemberInfo\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Reflection.MemberInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo[]\n  nameWithType: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMembers(BindingFlags)\n  nameWithType: TypeBuilder.GetMembers(BindingFlags)\n  fullName: TypeBuilder.GetMembers(BindingFlags)\n- uid: System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMethod(Type, MethodInfo)\n  nameWithType: TypeBuilder.GetMethod(Type, MethodInfo)\n  fullName: TypeBuilder.GetMethod(Type, MethodInfo)\n- uid: System.Reflection.Emit.TypeBuilder.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeBuilder.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMethods(BindingFlags)\n  nameWithType: TypeBuilder.GetMethods(BindingFlags)\n  fullName: TypeBuilder.GetMethods(BindingFlags)\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: TypeBuilder.GetNestedType(String, BindingFlags)\n  fullName: TypeBuilder.GetNestedType(String, BindingFlags)\n- uid: System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: TypeBuilder.GetNestedTypes(BindingFlags)\n  fullName: TypeBuilder.GetNestedTypes(BindingFlags)\n- uid: System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetProperties(BindingFlags)\n  nameWithType: TypeBuilder.GetProperties(BindingFlags)\n  fullName: TypeBuilder.GetProperties(BindingFlags)\n- uid: System.Reflection.PropertyInfo\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.PropertyInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo[]\n  nameWithType: PropertyInfo[]\n  fullName: System.Reflection.PropertyInfo[]\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.Emit.TypeBuilder.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: TypeBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: TypeBuilder.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.Emit.TypeBuilder.GUID\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GUID\n  nameWithType: TypeBuilder.GUID\n  fullName: TypeBuilder.GUID\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: HasElementTypeImpl()\n  nameWithType: TypeBuilder.HasElementTypeImpl()\n  fullName: TypeBuilder.HasElementTypeImpl()\n- uid: System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: TypeBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: TypeBuilder.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Reflection.Emit.TypeBuilder.IsArrayImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsArrayImpl()\n  nameWithType: TypeBuilder.IsArrayImpl()\n  fullName: TypeBuilder.IsArrayImpl()\n- uid: System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: TypeBuilder.IsAssignableFrom(TypeInfo)\n  fullName: TypeBuilder.IsAssignableFrom(TypeInfo)\n- uid: System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsAssignableFrom(Type)\n  nameWithType: TypeBuilder.IsAssignableFrom(Type)\n  fullName: TypeBuilder.IsAssignableFrom(Type)\n- uid: System.Reflection.Emit.TypeBuilder.IsByRefImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsByRefImpl()\n  nameWithType: TypeBuilder.IsByRefImpl()\n  fullName: TypeBuilder.IsByRefImpl()\n- uid: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsCOMObjectImpl()\n  nameWithType: TypeBuilder.IsCOMObjectImpl()\n  fullName: TypeBuilder.IsCOMObjectImpl()\n- uid: System.Reflection.Emit.TypeBuilder.IsConstructedGenericType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: TypeBuilder.IsConstructedGenericType\n  fullName: TypeBuilder.IsConstructedGenericType\n- uid: System.Reflection.Emit.TypeBuilder.IsCreated\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsCreated()\n  nameWithType: TypeBuilder.IsCreated()\n  fullName: TypeBuilder.IsCreated()\n- uid: System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: TypeBuilder.IsDefined(Type, Boolean)\n  fullName: TypeBuilder.IsDefined(Type, Boolean)\n- uid: System.Reflection.Emit.TypeBuilder.IsEnum\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsEnum\n  nameWithType: TypeBuilder.IsEnum\n  fullName: TypeBuilder.IsEnum\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericParameter\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsGenericParameter\n  nameWithType: TypeBuilder.IsGenericParameter\n  fullName: TypeBuilder.IsGenericParameter\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsGenericType\n  nameWithType: TypeBuilder.IsGenericType\n  fullName: TypeBuilder.IsGenericType\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsGenericTypeDefinition\n  nameWithType: TypeBuilder.IsGenericTypeDefinition\n  fullName: TypeBuilder.IsGenericTypeDefinition\n- uid: System.Reflection.Emit.TypeBuilder.IsPointerImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsPointerImpl()\n  nameWithType: TypeBuilder.IsPointerImpl()\n  fullName: TypeBuilder.IsPointerImpl()\n- uid: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsPrimitiveImpl()\n  nameWithType: TypeBuilder.IsPrimitiveImpl()\n  fullName: TypeBuilder.IsPrimitiveImpl()\n- uid: System.Reflection.Emit.TypeBuilder.IsSecurityCritical\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: TypeBuilder.IsSecurityCritical\n  fullName: TypeBuilder.IsSecurityCritical\n- uid: System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: TypeBuilder.IsSecuritySafeCritical\n  fullName: TypeBuilder.IsSecuritySafeCritical\n- uid: System.Reflection.Emit.TypeBuilder.IsSecurityTransparent\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: TypeBuilder.IsSecurityTransparent\n  fullName: TypeBuilder.IsSecurityTransparent\n- uid: System.Reflection.Emit.TypeBuilder.IsSerializable\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSerializable\n  nameWithType: TypeBuilder.IsSerializable\n  fullName: TypeBuilder.IsSerializable\n- uid: System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSubclassOf(Type)\n  nameWithType: TypeBuilder.IsSubclassOf(Type)\n  fullName: TypeBuilder.IsSubclassOf(Type)\n- uid: System.Reflection.Emit.TypeBuilder.IsSZArray\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSZArray\n  nameWithType: TypeBuilder.IsSZArray\n  fullName: TypeBuilder.IsSZArray\n- uid: System.Reflection.Emit.TypeBuilder.IsTypeDefinition\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: TypeBuilder.IsTypeDefinition\n  fullName: TypeBuilder.IsTypeDefinition\n- uid: System.Reflection.Emit.TypeBuilder.IsValueTypeImpl\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsValueTypeImpl()\n  nameWithType: TypeBuilder.IsValueTypeImpl()\n  fullName: TypeBuilder.IsValueTypeImpl()\n- uid: System.Reflection.Emit.TypeBuilder.IsVariableBoundArray\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: TypeBuilder.IsVariableBoundArray\n  fullName: TypeBuilder.IsVariableBoundArray\n- uid: System.Reflection.Emit.TypeBuilder.MakeArrayType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakeArrayType()\n  nameWithType: TypeBuilder.MakeArrayType()\n  fullName: TypeBuilder.MakeArrayType()\n- uid: System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakeArrayType(Int32)\n  nameWithType: TypeBuilder.MakeArrayType(Int32)\n  fullName: TypeBuilder.MakeArrayType(Int32)\n- uid: System.Reflection.Emit.TypeBuilder.MakeByRefType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakeByRefType()\n  nameWithType: TypeBuilder.MakeByRefType()\n  fullName: TypeBuilder.MakeByRefType()\n- uid: System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakeGenericType(Type[])\n  nameWithType: TypeBuilder.MakeGenericType(Type[])\n  fullName: TypeBuilder.MakeGenericType(Type[])\n- uid: System.Reflection.Emit.TypeBuilder.MakePointerType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakePointerType()\n  nameWithType: TypeBuilder.MakePointerType()\n  fullName: TypeBuilder.MakePointerType()\n- uid: System.Reflection.Emit.TypeBuilder.Module\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Module\n  nameWithType: TypeBuilder.Module\n  fullName: TypeBuilder.Module\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.Emit.TypeBuilder.Name\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Name\n  nameWithType: TypeBuilder.Name\n  fullName: TypeBuilder.Name\n- uid: System.Reflection.Emit.TypeBuilder.Namespace\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Namespace\n  nameWithType: TypeBuilder.Namespace\n  fullName: TypeBuilder.Namespace\n- uid: System.Reflection.Emit.TypeBuilder.PackingSize\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: PackingSize\n  nameWithType: TypeBuilder.PackingSize\n  fullName: TypeBuilder.PackingSize\n- uid: System.Reflection.Emit.TypeBuilder.ReflectedType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: TypeBuilder.ReflectedType\n  fullName: TypeBuilder.ReflectedType\n- uid: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: SetCustomAttribute(CustomAttributeBuilder)\n  nameWithType: TypeBuilder.SetCustomAttribute(CustomAttributeBuilder)\n  fullName: TypeBuilder.SetCustomAttribute(CustomAttributeBuilder)\n- uid: System.Reflection.Emit.CustomAttributeBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: CustomAttributeBuilder\n  nameWithType: CustomAttributeBuilder\n  fullName: System.Reflection.Emit.CustomAttributeBuilder\n- uid: System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: SetCustomAttribute(ConstructorInfo, Byte[])\n  nameWithType: TypeBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n  fullName: TypeBuilder.SetCustomAttribute(ConstructorInfo, Byte[])\n- uid: System.Reflection.Emit.TypeBuilder.SetParent(System.Type)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: SetParent(Type)\n  nameWithType: TypeBuilder.SetParent(Type)\n  fullName: TypeBuilder.SetParent(Type)\n- uid: System.Reflection.Emit.TypeBuilder.Size\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Size\n  nameWithType: TypeBuilder.Size\n  fullName: TypeBuilder.Size\n- uid: System.Reflection.Emit.TypeBuilder.ToString\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: ToString()\n  nameWithType: TypeBuilder.ToString()\n  fullName: TypeBuilder.ToString()\n- uid: System.Reflection.Emit.TypeBuilder.TypeHandle\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: TypeHandle\n  nameWithType: TypeBuilder.TypeHandle\n  fullName: TypeBuilder.TypeHandle\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.Emit.TypeBuilder.TypeToken\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: TypeToken\n  nameWithType: TypeBuilder.TypeToken\n  fullName: TypeBuilder.TypeToken\n- uid: System.Reflection.Emit.TypeToken\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: TypeToken\n  nameWithType: TypeToken\n  fullName: System.Reflection.Emit.TypeToken\n- uid: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: TypeBuilder.UnderlyingSystemType\n  fullName: TypeBuilder.UnderlyingSystemType\n- uid: System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: UnspecifiedTypeSize\n  nameWithType: TypeBuilder.UnspecifiedTypeSize\n  fullName: TypeBuilder.UnspecifiedTypeSize\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: _TypeBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: TypeBuilder._TypeBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: TypeBuilder._TypeBuilder.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  nameWithType: UInt32\n  fullName: System.UInt32\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: _TypeBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: TypeBuilder._TypeBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: TypeBuilder._TypeBuilder.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: _TypeBuilder.GetTypeInfoCount(UInt32)\n  nameWithType: TypeBuilder._TypeBuilder.GetTypeInfoCount(UInt32)\n  fullName: TypeBuilder._TypeBuilder.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: _TypeBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: TypeBuilder._TypeBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: TypeBuilder._TypeBuilder.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  nameWithType: Int16\n  fullName: System.Int16\n- uid: System.Reflection.Emit.TypeBuilder.#ctor*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: TypeBuilder\n  nameWithType: TypeBuilder.TypeBuilder\n  fullName: TypeBuilder.TypeBuilder\n  monikers:\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: AddDeclarativeSecurity\n  nameWithType: TypeBuilder.AddDeclarativeSecurity\n  fullName: TypeBuilder.AddDeclarativeSecurity\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: AddInterfaceImplementation\n  nameWithType: TypeBuilder.AddInterfaceImplementation\n  fullName: TypeBuilder.AddInterfaceImplementation\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.Assembly*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Assembly\n  nameWithType: TypeBuilder.Assembly\n  fullName: TypeBuilder.Assembly\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: TypeBuilder.AssemblyQualifiedName\n  fullName: TypeBuilder.AssemblyQualifiedName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.Attributes*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Attributes\n  nameWithType: TypeBuilder.Attributes\n  fullName: TypeBuilder.Attributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.BaseType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: BaseType\n  nameWithType: TypeBuilder.BaseType\n  fullName: TypeBuilder.BaseType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.ContainsGenericParameters*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: TypeBuilder.ContainsGenericParameters\n  fullName: TypeBuilder.ContainsGenericParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.CreateType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: CreateType\n  nameWithType: TypeBuilder.CreateType\n  fullName: TypeBuilder.CreateType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.CreateTypeInfo*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: CreateTypeInfo\n  nameWithType: TypeBuilder.CreateTypeInfo\n  fullName: TypeBuilder.CreateTypeInfo\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DeclaringMethod*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DeclaringMethod\n  nameWithType: TypeBuilder.DeclaringMethod\n  fullName: TypeBuilder.DeclaringMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DeclaringType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DeclaringType\n  nameWithType: TypeBuilder.DeclaringType\n  fullName: TypeBuilder.DeclaringType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineConstructor*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineConstructor\n  nameWithType: TypeBuilder.DefineConstructor\n  fullName: TypeBuilder.DefineConstructor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineDefaultConstructor\n  nameWithType: TypeBuilder.DefineDefaultConstructor\n  fullName: TypeBuilder.DefineDefaultConstructor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineEvent*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineEvent\n  nameWithType: TypeBuilder.DefineEvent\n  fullName: TypeBuilder.DefineEvent\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineField*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineField\n  nameWithType: TypeBuilder.DefineField\n  fullName: TypeBuilder.DefineField\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineGenericParameters*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineGenericParameters\n  nameWithType: TypeBuilder.DefineGenericParameters\n  fullName: TypeBuilder.DefineGenericParameters\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineInitializedData*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineInitializedData\n  nameWithType: TypeBuilder.DefineInitializedData\n  fullName: TypeBuilder.DefineInitializedData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethod*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethod\n  nameWithType: TypeBuilder.DefineMethod\n  fullName: TypeBuilder.DefineMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineMethodOverride*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineMethodOverride\n  nameWithType: TypeBuilder.DefineMethodOverride\n  fullName: TypeBuilder.DefineMethodOverride\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineNestedType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineNestedType\n  nameWithType: TypeBuilder.DefineNestedType\n  fullName: TypeBuilder.DefineNestedType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefinePInvokeMethod\n  nameWithType: TypeBuilder.DefinePInvokeMethod\n  fullName: TypeBuilder.DefinePInvokeMethod\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineProperty*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineProperty\n  nameWithType: TypeBuilder.DefineProperty\n  fullName: TypeBuilder.DefineProperty\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineTypeInitializer*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineTypeInitializer\n  nameWithType: TypeBuilder.DefineTypeInitializer\n  fullName: TypeBuilder.DefineTypeInitializer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.DefineUninitializedData*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: DefineUninitializedData\n  nameWithType: TypeBuilder.DefineUninitializedData\n  fullName: TypeBuilder.DefineUninitializedData\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.FullName*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: FullName\n  nameWithType: TypeBuilder.FullName\n  fullName: TypeBuilder.FullName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GenericParameterAttributes*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: TypeBuilder.GenericParameterAttributes\n  fullName: TypeBuilder.GenericParameterAttributes\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GenericParameterPosition*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GenericParameterPosition\n  nameWithType: TypeBuilder.GenericParameterPosition\n  fullName: TypeBuilder.GenericParameterPosition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GenericTypeArguments*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GenericTypeArguments\n  nameWithType: TypeBuilder.GenericTypeArguments\n  fullName: TypeBuilder.GenericTypeArguments\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetArrayRank*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetArrayRank\n  nameWithType: TypeBuilder.GetArrayRank\n  fullName: TypeBuilder.GetArrayRank\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetAttributeFlagsImpl\n  nameWithType: TypeBuilder.GetAttributeFlagsImpl\n  fullName: TypeBuilder.GetAttributeFlagsImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructor*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetConstructor\n  nameWithType: TypeBuilder.GetConstructor\n  fullName: TypeBuilder.GetConstructor\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructorImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetConstructorImpl\n  nameWithType: TypeBuilder.GetConstructorImpl\n  fullName: TypeBuilder.GetConstructorImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetConstructors*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetConstructors\n  nameWithType: TypeBuilder.GetConstructors\n  fullName: TypeBuilder.GetConstructors\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetCustomAttributes*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: TypeBuilder.GetCustomAttributes\n  fullName: TypeBuilder.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetElementType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetElementType\n  nameWithType: TypeBuilder.GetElementType\n  fullName: TypeBuilder.GetElementType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetEvent*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetEvent\n  nameWithType: TypeBuilder.GetEvent\n  fullName: TypeBuilder.GetEvent\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetEvents*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetEvents\n  nameWithType: TypeBuilder.GetEvents\n  fullName: TypeBuilder.GetEvents\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetField*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetField\n  nameWithType: TypeBuilder.GetField\n  fullName: TypeBuilder.GetField\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetFields*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetFields\n  nameWithType: TypeBuilder.GetFields\n  fullName: TypeBuilder.GetFields\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericArguments*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetGenericArguments\n  nameWithType: TypeBuilder.GetGenericArguments\n  fullName: TypeBuilder.GetGenericArguments\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericParameterConstraints*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetGenericParameterConstraints\n  nameWithType: TypeBuilder.GetGenericParameterConstraints\n  fullName: TypeBuilder.GetGenericParameterConstraints\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetGenericTypeDefinition\n  nameWithType: TypeBuilder.GetGenericTypeDefinition\n  fullName: TypeBuilder.GetGenericTypeDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetInterface*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetInterface\n  nameWithType: TypeBuilder.GetInterface\n  fullName: TypeBuilder.GetInterface\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetInterfaceMap*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetInterfaceMap\n  nameWithType: TypeBuilder.GetInterfaceMap\n  fullName: TypeBuilder.GetInterfaceMap\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetInterfaces*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetInterfaces\n  nameWithType: TypeBuilder.GetInterfaces\n  fullName: TypeBuilder.GetInterfaces\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetMember*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMember\n  nameWithType: TypeBuilder.GetMember\n  fullName: TypeBuilder.GetMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetMembers*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMembers\n  nameWithType: TypeBuilder.GetMembers\n  fullName: TypeBuilder.GetMembers\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetMethod*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMethod\n  nameWithType: TypeBuilder.GetMethod\n  fullName: TypeBuilder.GetMethod\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetMethodImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMethodImpl\n  nameWithType: TypeBuilder.GetMethodImpl\n  fullName: TypeBuilder.GetMethodImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetMethods*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetMethods\n  nameWithType: TypeBuilder.GetMethods\n  fullName: TypeBuilder.GetMethods\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetNestedType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetNestedType\n  nameWithType: TypeBuilder.GetNestedType\n  fullName: TypeBuilder.GetNestedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetNestedTypes*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetNestedTypes\n  nameWithType: TypeBuilder.GetNestedTypes\n  fullName: TypeBuilder.GetNestedTypes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetProperties*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetProperties\n  nameWithType: TypeBuilder.GetProperties\n  fullName: TypeBuilder.GetProperties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GetPropertyImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GetPropertyImpl\n  nameWithType: TypeBuilder.GetPropertyImpl\n  fullName: TypeBuilder.GetPropertyImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.GUID*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: GUID\n  nameWithType: TypeBuilder.GUID\n  fullName: TypeBuilder.GUID\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.HasElementTypeImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: HasElementTypeImpl\n  nameWithType: TypeBuilder.HasElementTypeImpl\n  fullName: TypeBuilder.HasElementTypeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.InvokeMember*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: InvokeMember\n  nameWithType: TypeBuilder.InvokeMember\n  fullName: TypeBuilder.InvokeMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsArrayImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsArrayImpl\n  nameWithType: TypeBuilder.IsArrayImpl\n  fullName: TypeBuilder.IsArrayImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsAssignableFrom*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsAssignableFrom\n  nameWithType: TypeBuilder.IsAssignableFrom\n  fullName: TypeBuilder.IsAssignableFrom\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsByRefImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsByRefImpl\n  nameWithType: TypeBuilder.IsByRefImpl\n  fullName: TypeBuilder.IsByRefImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsCOMObjectImpl\n  nameWithType: TypeBuilder.IsCOMObjectImpl\n  fullName: TypeBuilder.IsCOMObjectImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsConstructedGenericType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: TypeBuilder.IsConstructedGenericType\n  fullName: TypeBuilder.IsConstructedGenericType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsCreated*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsCreated\n  nameWithType: TypeBuilder.IsCreated\n  fullName: TypeBuilder.IsCreated\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsDefined*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsDefined\n  nameWithType: TypeBuilder.IsDefined\n  fullName: TypeBuilder.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsEnum*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsEnum\n  nameWithType: TypeBuilder.IsEnum\n  fullName: TypeBuilder.IsEnum\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericParameter*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsGenericParameter\n  nameWithType: TypeBuilder.IsGenericParameter\n  fullName: TypeBuilder.IsGenericParameter\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsGenericType\n  nameWithType: TypeBuilder.IsGenericType\n  fullName: TypeBuilder.IsGenericType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsGenericTypeDefinition\n  nameWithType: TypeBuilder.IsGenericTypeDefinition\n  fullName: TypeBuilder.IsGenericTypeDefinition\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsPointerImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsPointerImpl\n  nameWithType: TypeBuilder.IsPointerImpl\n  fullName: TypeBuilder.IsPointerImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsPrimitiveImpl\n  nameWithType: TypeBuilder.IsPrimitiveImpl\n  fullName: TypeBuilder.IsPrimitiveImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSecurityCritical*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSecurityCritical\n  nameWithType: TypeBuilder.IsSecurityCritical\n  fullName: TypeBuilder.IsSecurityCritical\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSecuritySafeCritical\n  nameWithType: TypeBuilder.IsSecuritySafeCritical\n  fullName: TypeBuilder.IsSecuritySafeCritical\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSecurityTransparent*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSecurityTransparent\n  nameWithType: TypeBuilder.IsSecurityTransparent\n  fullName: TypeBuilder.IsSecurityTransparent\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSerializable*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSerializable\n  nameWithType: TypeBuilder.IsSerializable\n  fullName: TypeBuilder.IsSerializable\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSubclassOf*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSubclassOf\n  nameWithType: TypeBuilder.IsSubclassOf\n  fullName: TypeBuilder.IsSubclassOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsSZArray*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsSZArray\n  nameWithType: TypeBuilder.IsSZArray\n  fullName: TypeBuilder.IsSZArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsTypeDefinition*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: TypeBuilder.IsTypeDefinition\n  fullName: TypeBuilder.IsTypeDefinition\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsValueTypeImpl*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsValueTypeImpl\n  nameWithType: TypeBuilder.IsValueTypeImpl\n  fullName: TypeBuilder.IsValueTypeImpl\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.IsVariableBoundArray*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: TypeBuilder.IsVariableBoundArray\n  fullName: TypeBuilder.IsVariableBoundArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.MakeArrayType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakeArrayType\n  nameWithType: TypeBuilder.MakeArrayType\n  fullName: TypeBuilder.MakeArrayType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.MakeByRefType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakeByRefType\n  nameWithType: TypeBuilder.MakeByRefType\n  fullName: TypeBuilder.MakeByRefType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.MakeGenericType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakeGenericType\n  nameWithType: TypeBuilder.MakeGenericType\n  fullName: TypeBuilder.MakeGenericType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.MakePointerType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: MakePointerType\n  nameWithType: TypeBuilder.MakePointerType\n  fullName: TypeBuilder.MakePointerType\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.Module*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Module\n  nameWithType: TypeBuilder.Module\n  fullName: TypeBuilder.Module\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.Name*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Name\n  nameWithType: TypeBuilder.Name\n  fullName: TypeBuilder.Name\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.Namespace*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Namespace\n  nameWithType: TypeBuilder.Namespace\n  fullName: TypeBuilder.Namespace\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.PackingSize*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: PackingSize\n  nameWithType: TypeBuilder.PackingSize\n  fullName: TypeBuilder.PackingSize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.ReflectedType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: ReflectedType\n  nameWithType: TypeBuilder.ReflectedType\n  fullName: TypeBuilder.ReflectedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.SetCustomAttribute*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: SetCustomAttribute\n  nameWithType: TypeBuilder.SetCustomAttribute\n  fullName: TypeBuilder.SetCustomAttribute\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.SetParent*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: SetParent\n  nameWithType: TypeBuilder.SetParent\n  fullName: TypeBuilder.SetParent\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.Size*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: Size\n  nameWithType: TypeBuilder.Size\n  fullName: TypeBuilder.Size\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.ToString*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: ToString\n  nameWithType: TypeBuilder.ToString\n  fullName: TypeBuilder.ToString\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.TypeHandle*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: TypeHandle\n  nameWithType: TypeBuilder.TypeHandle\n  fullName: TypeBuilder.TypeHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.TypeToken*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: TypeToken\n  nameWithType: TypeBuilder.TypeToken\n  fullName: TypeBuilder.TypeToken\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.UnderlyingSystemType*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: TypeBuilder.UnderlyingSystemType\n  fullName: TypeBuilder.UnderlyingSystemType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetIDsOfNames*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames\n  nameWithType: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames\n  fullName: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfo*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._TypeBuilder.GetTypeInfo\n  nameWithType: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetTypeInfo\n  fullName: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetTypeInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#GetTypeInfoCount*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount\n  nameWithType: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount\n  fullName: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.Emit.TypeBuilder.System#Runtime#InteropServices#_TypeBuilder#Invoke*\n  parent: System.Reflection.Emit.TypeBuilder\n  isExternal: false\n  name: System.Runtime.InteropServices._TypeBuilder.Invoke\n  nameWithType: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.Invoke\n  fullName: TypeBuilder.System.Runtime.InteropServices._TypeBuilder.Invoke\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection.Emit/TypeBuilder.xml\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: MemberInfo.Equals(Object)\n  fullName: MemberInfo.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: MemberInfo.GetHashCode()\n  fullName: MemberInfo.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.TypeInfo.MemberType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: TypeInfo.MemberType\n  fullName: TypeInfo.MemberType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  fullName: MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.TypeInfo.AsType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: AsType()\n  nameWithType: TypeInfo.AsType()\n  fullName: TypeInfo.AsType()\n- uid: System.Reflection.TypeInfo.DeclaredConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredConstructors\n  nameWithType: TypeInfo.DeclaredConstructors\n  fullName: TypeInfo.DeclaredConstructors\n- uid: System.Reflection.TypeInfo.DeclaredEvents\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredEvents\n  nameWithType: TypeInfo.DeclaredEvents\n  fullName: TypeInfo.DeclaredEvents\n- uid: System.Reflection.TypeInfo.DeclaredFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredFields\n  nameWithType: TypeInfo.DeclaredFields\n  fullName: TypeInfo.DeclaredFields\n- uid: System.Reflection.TypeInfo.DeclaredMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMembers\n  nameWithType: TypeInfo.DeclaredMembers\n  fullName: TypeInfo.DeclaredMembers\n- uid: System.Reflection.TypeInfo.DeclaredMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMethods\n  nameWithType: TypeInfo.DeclaredMethods\n  fullName: TypeInfo.DeclaredMethods\n- uid: System.Reflection.TypeInfo.DeclaredNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredNestedTypes\n  nameWithType: TypeInfo.DeclaredNestedTypes\n  fullName: TypeInfo.DeclaredNestedTypes\n- uid: System.Reflection.TypeInfo.DeclaredProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredProperties\n  nameWithType: TypeInfo.DeclaredProperties\n  fullName: TypeInfo.DeclaredProperties\n- uid: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindInterfaces(TypeFilter, Object)\n  nameWithType: TypeInfo.FindInterfaces(TypeFilter, Object)\n  fullName: TypeInfo.FindInterfaces(TypeFilter, Object)\n- uid: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  nameWithType: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  fullName: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n- uid: System.Reflection.TypeInfo.GenericTypeParameters\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GenericTypeParameters\n  nameWithType: TypeInfo.GenericTypeParameters\n  fullName: TypeInfo.GenericTypeParameters\n- uid: System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructor(Type[])\n  nameWithType: TypeInfo.GetConstructor(Type[])\n  fullName: TypeInfo.GetConstructor(Type[])\n- uid: System.Reflection.TypeInfo.GetConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructors()\n  nameWithType: TypeInfo.GetConstructors()\n  fullName: TypeInfo.GetConstructors()\n- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredEvent(String)\n  nameWithType: TypeInfo.GetDeclaredEvent(String)\n  fullName: TypeInfo.GetDeclaredEvent(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredField(String)\n  nameWithType: TypeInfo.GetDeclaredField(String)\n  fullName: TypeInfo.GetDeclaredField(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethod(String)\n  nameWithType: TypeInfo.GetDeclaredMethod(String)\n  fullName: TypeInfo.GetDeclaredMethod(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethods(String)\n  nameWithType: TypeInfo.GetDeclaredMethods(String)\n  fullName: TypeInfo.GetDeclaredMethods(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredNestedType(String)\n  nameWithType: TypeInfo.GetDeclaredNestedType(String)\n  fullName: TypeInfo.GetDeclaredNestedType(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredProperty(String)\n  nameWithType: TypeInfo.GetDeclaredProperty(String)\n  fullName: TypeInfo.GetDeclaredProperty(String)\n- uid: System.Reflection.TypeInfo.GetDefaultMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDefaultMembers()\n  nameWithType: TypeInfo.GetDefaultMembers()\n  fullName: TypeInfo.GetDefaultMembers()\n- uid: System.Reflection.TypeInfo.GetEnumName(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumName(Object)\n  nameWithType: TypeInfo.GetEnumName(Object)\n  fullName: TypeInfo.GetEnumName(Object)\n- uid: System.Reflection.TypeInfo.GetEnumNames\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumNames()\n  nameWithType: TypeInfo.GetEnumNames()\n  fullName: TypeInfo.GetEnumNames()\n- uid: System.Reflection.TypeInfo.GetEnumUnderlyingType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumUnderlyingType()\n  nameWithType: TypeInfo.GetEnumUnderlyingType()\n  fullName: TypeInfo.GetEnumUnderlyingType()\n- uid: System.Reflection.TypeInfo.GetEnumValues\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumValues()\n  nameWithType: TypeInfo.GetEnumValues()\n  fullName: TypeInfo.GetEnumValues()\n- uid: System.Reflection.TypeInfo.GetEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEvent(String)\n  nameWithType: TypeInfo.GetEvent(String)\n  fullName: TypeInfo.GetEvent(String)\n- uid: System.Reflection.TypeInfo.GetField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetField(String)\n  nameWithType: TypeInfo.GetField(String)\n  fullName: TypeInfo.GetField(String)\n- uid: System.Reflection.TypeInfo.GetFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetFields()\n  nameWithType: TypeInfo.GetFields()\n  fullName: TypeInfo.GetFields()\n- uid: System.Reflection.TypeInfo.GetInterface(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetInterface(String)\n  nameWithType: TypeInfo.GetInterface(String)\n  fullName: TypeInfo.GetInterface(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String)\n  nameWithType: TypeInfo.GetMember(String)\n  fullName: TypeInfo.GetMember(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String, BindingFlags)\n  nameWithType: TypeInfo.GetMember(String, BindingFlags)\n  fullName: TypeInfo.GetMember(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMembers()\n  nameWithType: TypeInfo.GetMembers()\n  fullName: TypeInfo.GetMembers()\n- uid: System.Reflection.TypeInfo.GetMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String)\n  nameWithType: TypeInfo.GetMethod(String)\n  fullName: TypeInfo.GetMethod(String)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, BindingFlags)\n  nameWithType: TypeInfo.GetMethod(String, BindingFlags)\n  fullName: TypeInfo.GetMethod(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[])\n  nameWithType: TypeInfo.GetMethod(String, Type[])\n  fullName: TypeInfo.GetMethod(String, Type[])\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.GetMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethods()\n  nameWithType: TypeInfo.GetMethods()\n  fullName: TypeInfo.GetMethods()\n- uid: System.Reflection.TypeInfo.GetNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedType(String)\n  nameWithType: TypeInfo.GetNestedType(String)\n  fullName: TypeInfo.GetNestedType(String)\n- uid: System.Reflection.TypeInfo.GetNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedTypes()\n  nameWithType: TypeInfo.GetNestedTypes()\n  fullName: TypeInfo.GetNestedTypes()\n- uid: System.Reflection.TypeInfo.GetProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperties()\n  nameWithType: TypeInfo.GetProperties()\n  fullName: TypeInfo.GetProperties()\n- uid: System.Reflection.TypeInfo.GetProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String)\n  nameWithType: TypeInfo.GetProperty(String)\n  fullName: TypeInfo.GetProperty(String)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, BindingFlags)\n  nameWithType: TypeInfo.GetProperty(String, BindingFlags)\n  fullName: TypeInfo.GetProperty(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type)\n  nameWithType: TypeInfo.GetProperty(String, Type)\n  fullName: TypeInfo.GetProperty(String, Type)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type[])\n  fullName: TypeInfo.GetProperty(String, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.HasElementType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: HasElementType\n  nameWithType: TypeInfo.HasElementType\n  fullName: TypeInfo.HasElementType\n- uid: System.Reflection.TypeInfo.ImplementedInterfaces\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: ImplementedInterfaces\n  nameWithType: TypeInfo.ImplementedInterfaces\n  fullName: TypeInfo.ImplementedInterfaces\n- uid: System.Reflection.TypeInfo.IsAbstract\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAbstract\n  nameWithType: TypeInfo.IsAbstract\n  fullName: TypeInfo.IsAbstract\n- uid: System.Reflection.TypeInfo.IsAnsiClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAnsiClass\n  nameWithType: TypeInfo.IsAnsiClass\n  fullName: TypeInfo.IsAnsiClass\n- uid: System.Reflection.TypeInfo.IsArray\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsArray\n  nameWithType: TypeInfo.IsArray\n  fullName: TypeInfo.IsArray\n- uid: System.Reflection.TypeInfo.IsAutoClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoClass\n  nameWithType: TypeInfo.IsAutoClass\n  fullName: TypeInfo.IsAutoClass\n- uid: System.Reflection.TypeInfo.IsAutoLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoLayout\n  nameWithType: TypeInfo.IsAutoLayout\n  fullName: TypeInfo.IsAutoLayout\n- uid: System.Reflection.TypeInfo.IsByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsByRef\n  nameWithType: TypeInfo.IsByRef\n  fullName: TypeInfo.IsByRef\n- uid: System.Reflection.TypeInfo.IsClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsClass\n  nameWithType: TypeInfo.IsClass\n  fullName: TypeInfo.IsClass\n- uid: System.Reflection.TypeInfo.IsCOMObject\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsCOMObject\n  nameWithType: TypeInfo.IsCOMObject\n  fullName: TypeInfo.IsCOMObject\n- uid: System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEnumDefined(Object)\n  nameWithType: TypeInfo.IsEnumDefined(Object)\n  fullName: TypeInfo.IsEnumDefined(Object)\n- uid: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEquivalentTo(Type)\n  nameWithType: TypeInfo.IsEquivalentTo(Type)\n  fullName: TypeInfo.IsEquivalentTo(Type)\n- uid: System.Reflection.TypeInfo.IsExplicitLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsExplicitLayout\n  nameWithType: TypeInfo.IsExplicitLayout\n  fullName: TypeInfo.IsExplicitLayout\n- uid: System.Reflection.TypeInfo.IsImport\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsImport\n  nameWithType: TypeInfo.IsImport\n  fullName: TypeInfo.IsImport\n- uid: System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsInstanceOfType(Object)\n  nameWithType: TypeInfo.IsInstanceOfType(Object)\n  fullName: TypeInfo.IsInstanceOfType(Object)\n- uid: System.Reflection.TypeInfo.IsInterface\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsInterface\n  nameWithType: TypeInfo.IsInterface\n  fullName: TypeInfo.IsInterface\n- uid: System.Reflection.TypeInfo.IsLayoutSequential\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsLayoutSequential\n  nameWithType: TypeInfo.IsLayoutSequential\n  fullName: TypeInfo.IsLayoutSequential\n- uid: System.Reflection.TypeInfo.IsMarshalByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsMarshalByRef\n  nameWithType: TypeInfo.IsMarshalByRef\n  fullName: TypeInfo.IsMarshalByRef\n- uid: System.Reflection.TypeInfo.IsNested\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNested\n  nameWithType: TypeInfo.IsNested\n  fullName: TypeInfo.IsNested\n- uid: System.Reflection.TypeInfo.IsNestedAssembly\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedAssembly\n  nameWithType: TypeInfo.IsNestedAssembly\n  fullName: TypeInfo.IsNestedAssembly\n- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamANDAssem\n  nameWithType: TypeInfo.IsNestedFamANDAssem\n  fullName: TypeInfo.IsNestedFamANDAssem\n- uid: System.Reflection.TypeInfo.IsNestedFamily\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamily\n  nameWithType: TypeInfo.IsNestedFamily\n  fullName: TypeInfo.IsNestedFamily\n- uid: System.Reflection.TypeInfo.IsNestedFamORAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamORAssem\n  nameWithType: TypeInfo.IsNestedFamORAssem\n  fullName: TypeInfo.IsNestedFamORAssem\n- uid: System.Reflection.TypeInfo.IsNestedPrivate\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPrivate\n  nameWithType: TypeInfo.IsNestedPrivate\n  fullName: TypeInfo.IsNestedPrivate\n- uid: System.Reflection.TypeInfo.IsNestedPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPublic\n  nameWithType: TypeInfo.IsNestedPublic\n  fullName: TypeInfo.IsNestedPublic\n- uid: System.Reflection.TypeInfo.IsNotPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNotPublic\n  nameWithType: TypeInfo.IsNotPublic\n  fullName: TypeInfo.IsNotPublic\n- uid: System.Reflection.TypeInfo.IsPointer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPointer\n  nameWithType: TypeInfo.IsPointer\n  fullName: TypeInfo.IsPointer\n- uid: System.Reflection.TypeInfo.IsPrimitive\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPrimitive\n  nameWithType: TypeInfo.IsPrimitive\n  fullName: TypeInfo.IsPrimitive\n- uid: System.Reflection.TypeInfo.IsPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPublic\n  nameWithType: TypeInfo.IsPublic\n  fullName: TypeInfo.IsPublic\n- uid: System.Reflection.TypeInfo.IsSealed\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSealed\n  nameWithType: TypeInfo.IsSealed\n  fullName: TypeInfo.IsSealed\n- uid: System.Reflection.TypeInfo.IsSpecialName\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: TypeInfo.IsSpecialName\n  fullName: TypeInfo.IsSpecialName\n- uid: System.Reflection.TypeInfo.IsUnicodeClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsUnicodeClass\n  nameWithType: TypeInfo.IsUnicodeClass\n  fullName: TypeInfo.IsUnicodeClass\n- uid: System.Reflection.TypeInfo.IsValueType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsValueType\n  nameWithType: TypeInfo.IsValueType\n  fullName: TypeInfo.IsValueType\n- uid: System.Reflection.TypeInfo.IsVisible\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsVisible\n  nameWithType: TypeInfo.IsVisible\n  fullName: TypeInfo.IsVisible\n- uid: System.Reflection.TypeInfo.StructLayoutAttribute\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: StructLayoutAttribute\n  nameWithType: TypeInfo.StructLayoutAttribute\n  fullName: TypeInfo.StructLayoutAttribute\n- uid: System.Reflection.TypeInfo.TypeInitializer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: TypeInitializer\n  nameWithType: TypeInfo.TypeInitializer\n  fullName: TypeInfo.TypeInitializer\n- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IReflectableType.GetTypeInfo()\n  nameWithType: TypeInfo.IReflectableType.GetTypeInfo()\n  fullName: TypeInfo.IReflectableType.GetTypeInfo()\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetRuntimeInterfaceMap(TypeInfo, Type)\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n  fullName: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n- uid: System.Runtime.InteropServices._TypeBuilder\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: _TypeBuilder\n  nameWithType: _TypeBuilder\n  fullName: System.Runtime.InteropServices._TypeBuilder\n"}