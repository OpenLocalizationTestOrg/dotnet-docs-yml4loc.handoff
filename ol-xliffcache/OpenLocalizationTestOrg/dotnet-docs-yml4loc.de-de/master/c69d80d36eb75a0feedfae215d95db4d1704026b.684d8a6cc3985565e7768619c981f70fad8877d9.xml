{"nodes":[{"content":"The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.","nodes":[{"pos":[0,141],"content":"The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.","nodes":[{"content":"The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.","pos":[0,141]}]}],"pos":[583,725],"yaml":true},{"content":"An <xref:System.IndexOutOfRangeException> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer. This exception  inherits from the <xref:System.Exception> class but adds no unique members.  \n  \n Typically, an <xref:System.IndexOutOfRangeException> exception is thrown as a result of developer error. Instead of handling the exception, you should diagnose the cause of the error and correct your code. The most common causes of the error are:  \n  \n-   Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]\n     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  \n  \n     To correct the error, you can use code like the following.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]\n     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  \n  \n     Alternately, instead of iterating all the elements in the array by their index, you can use the  (in C#) or the  (in Visual Basic).  \n  \n-   Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array. The following example attempts to assign the last element in the `value1` array to the same element in the `value2` array. However, the `value2` array has been incorrectly dimensioned to have six instead of seven elements. As a result, the assignment throws an <xref:System.IndexOutOfRangeException> exception.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]\n     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  \n  \n-   Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position. If you forget to check whether the search operation found a match, the runtime throws an <xref:System.IndexOutOfRangeException> exception, as shown in this example.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]\n     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  \n  \n     In this case, the <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=fullName> method returns -1, which is an invalid index value, when it fails to find a match. To correct this error, check the search method's return value before iterating the array, as shown in this example.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]\n     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  \n  \n-   Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.  \n  \n-   Using a computed value to define the starting index, the ending index, or the number of items to be iterated. If the result of the computation is unexpected, it might result in an <xref:System.IndexOutOfRangeException> exception. You should check your program's logic in calculating the index value and validate the value before iterating the array or collection. The following conditions must all be true; otherwise, an <xref:System.IndexOutOfRangeException> exception is thrown:  \n  \n    -   The starting index must be greater than or equal to <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.  \n  \n    -   The ending index cannot exceed <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the `Count` property of a collection.  \n  \n    -   The following equation must be true for the dimension of the array that you want to iterate:  \n  \n        ```  \n        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  \n        ```  \n  \n         For a collection, the following equation must be true:  \n  \n        ```  \n        start_index >= 0 And start_index + items_to_iterate <= Count  \n        ```  \n  \n        > [!TIP]\n        >  The starting index of an array or collection can never be a negative number.  \n  \n-   Assuming that an array must be zero-based. Arrays that are not zero-based can be created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method and can be returned by COM interop, although they aren’t CLS-compliant. The following example illustrates the <xref:System.IndexOutOfRangeException> that is thrown when you try to iterate a non-zero-based array created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]\n     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  \n  \n     To correct the error, as the following example does, you can call the <xref:System.Array.GetLowerBound%2A> method instead of making assumptions about the starting index of an array.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]\n     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  \n  \n     Note that when you call the <xref:System.Array.GetLowerBound%2A> method to get the starting index of an array, you should also call the <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=fullName> method to get its ending index.  \n  \n-   Confusing an index and the value at that index in a numeric array or collection. This issue usually occurs when using the `foreach` statement (in C#) or the `For Each` statement (in Visual Basic). The following example illustrates the problem.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]\n     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  \n  \n     The iteration construct returns each value in an array or collection, not its index. To eliminate the exception, use this code.  \n  \n     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]\n     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  \n  \n-   Providing an invalid column name to the <xref:System.Data.DataView.Sort%2A?displayProperty=fullName> property.  \n  \n-   Violating thread safety. Operations such as reading from the same <xref:System.IO.StreamReader> object, writing to the same <xref:System.IO.StreamWriter> object from multiple threads, or enumerating the objects in a <xref:System.Collections.Hashtable> from different threads can throw an <xref:System.IndexOutOfRangeException> if the object isn’t accessed in a thread-safe way. This exception is typically intermittent because it relies on a race condition.  \n  \n Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected. To prevent an operation from throwing an  <xref:System.IndexOutOfRangeException> exception, you can do the following:  \n  \n-   Iterate the elements of the array using the [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) statement (in C#) or the [For Each...Next](https://msdn.microsoft.com/library/5ebk1751.aspx) construct (in Visual Basic)  instead of iterating elements by index.  \n  \n-   Iterate the elements by index starting with the index returned by the <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> method and ending with the index returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> method.  \n  \n-   If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <xref:System.Array.Length%2A?displayProperty=fullName> properties.  \n  \n For a list of initial property values for an instance of <xref:System.IndexOutOfRangeException>, see the <xref:System.IndexOutOfRangeException> constructors.  \n  \n The following intermediate language (IL) instructions throw <xref:System.IndexOutOfRangeException>:  \n  \n-   ldelem.\\<type>  \n  \n-   ldelema  \n  \n-   stelem.\\<type>  \n  \n <xref:System.IndexOutOfRangeException> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.","nodes":[{"pos":[0,291],"content":"An <xref:System.IndexOutOfRangeException> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer. This exception  inherits from the <xref:System.Exception> class but adds no unique members.","nodes":[{"content":"An <xref:System.IndexOutOfRangeException> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer. This exception  inherits from the <xref:System.Exception> class but adds no unique members.","pos":[0,291],"nodes":[{"content":"An <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer.","pos":[0,199],"source":"An <xref:System.IndexOutOfRangeException> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer."},{"content":"This exception  inherits from the <ph id=\"ph1\">&lt;xref:System.Exception&gt;</ph> class but adds no unique members.","pos":[200,291],"source":" This exception  inherits from the <xref:System.Exception> class but adds no unique members."}]}]},{"pos":[298,544],"content":"Typically, an <xref:System.IndexOutOfRangeException> exception is thrown as a result of developer error. Instead of handling the exception, you should diagnose the cause of the error and correct your code. The most common causes of the error are:","nodes":[{"content":"Typically, an <xref:System.IndexOutOfRangeException> exception is thrown as a result of developer error. Instead of handling the exception, you should diagnose the cause of the error and correct your code. The most common causes of the error are:","pos":[0,246],"nodes":[{"content":"Typically, an <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown as a result of developer error.","pos":[0,104],"source":"Typically, an <xref:System.IndexOutOfRangeException> exception is thrown as a result of developer error."},{"content":"Instead of handling the exception, you should diagnose the cause of the error and correct your code.","pos":[105,205]},{"content":"The most common causes of the error are:","pos":[206,246]}]}]},{"pos":[554,713],"content":"Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.","nodes":[{"content":"Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.","pos":[0,159]}]},{"pos":[724,1025],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]\n [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]"},{"pos":[1036,1094],"content":"To correct the error, you can use code like the following.","nodes":[{"content":"To correct the error, you can use code like the following.","pos":[0,58]}]},{"pos":[1105,1406],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]\n [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]"},{"pos":[1417,1548],"content":"Alternately, instead of iterating all the elements in the array by their index, you can use the  (in C#) or the  (in Visual Basic).","nodes":[{"content":"Alternately, instead of iterating all the elements in the array by their index, you can use the  (in C#) or the  (in Visual Basic).","pos":[0,131]}]},{"pos":[1558,2017],"content":"Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array. The following example attempts to assign the last element in the `value1` array to the same element in the `value2` array. However, the `value2` array has been incorrectly dimensioned to have six instead of seven elements. As a result, the assignment throws an <xref:System.IndexOutOfRangeException> exception.","nodes":[{"content":"Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array.","pos":[0,148]},{"content":"The following example attempts to assign the last element in the <ph id=\"ph1\">`value1`</ph> array to the same element in the <ph id=\"ph2\">`value2`</ph> array.","pos":[149,271],"source":" The following example attempts to assign the last element in the `value1` array to the same element in the `value2` array."},{"content":"However, the <ph id=\"ph1\">`value2`</ph> array has been incorrectly dimensioned to have six instead of seven elements.","pos":[272,371],"source":" However, the `value2` array has been incorrectly dimensioned to have six instead of seven elements."},{"content":"As a result, the assignment throws an <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception.","pos":[372,459],"source":" As a result, the assignment throws an <xref:System.IndexOutOfRangeException> exception."}]},{"pos":[2028,2333],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#10<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#10<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]\n [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]"},{"pos":[2343,2637],"content":"Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position. If you forget to check whether the search operation found a match, the runtime throws an <xref:System.IndexOutOfRangeException> exception, as shown in this example.","nodes":[{"content":"Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position. If you forget to check whether the search operation found a match, the runtime throws an <xref:System.IndexOutOfRangeException> exception, as shown in this example.","pos":[0,294],"nodes":[{"content":"Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position.","pos":[0,129]},{"content":"If you forget to check whether the search operation found a match, the runtime throws an <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception, as shown in this example.","pos":[130,294],"source":" If you forget to check whether the search operation found a match, the runtime throws an <xref:System.IndexOutOfRangeException> exception, as shown in this example."}]}]},{"pos":[2648,2953],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#5<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#5<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]\n [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]"},{"pos":[2964,3259],"content":"In this case, the <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=fullName> method returns -1, which is an invalid index value, when it fails to find a match. To correct this error, check the search method's return value before iterating the array, as shown in this example.","nodes":[{"content":"In this case, the <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=fullName> method returns -1, which is an invalid index value, when it fails to find a match. To correct this error, check the search method's return value before iterating the array, as shown in this example.","pos":[0,295],"nodes":[{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=fullName&gt;</ph> method returns -1, which is an invalid index value, when it fails to find a match.","pos":[0,179],"source":"In this case, the <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=fullName> method returns -1, which is an invalid index value, when it fails to find a match."},{"content":"To correct this error, check the search method's return value before iterating the array, as shown in this example.","pos":[180,295]}]}]},{"pos":[3270,3575],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#6<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#6<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]\n [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]"},{"pos":[3585,3730],"content":"Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.","nodes":[{"content":"Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.","pos":[0,145]}]},{"pos":[3740,4220],"content":"Using a computed value to define the starting index, the ending index, or the number of items to be iterated. If the result of the computation is unexpected, it might result in an <xref:System.IndexOutOfRangeException> exception. You should check your program's logic in calculating the index value and validate the value before iterating the array or collection. The following conditions must all be true; otherwise, an <xref:System.IndexOutOfRangeException> exception is thrown:","nodes":[{"content":"Using a computed value to define the starting index, the ending index, or the number of items to be iterated. If the result of the computation is unexpected, it might result in an <xref:System.IndexOutOfRangeException> exception. You should check your program's logic in calculating the index value and validate the value before iterating the array or collection. The following conditions must all be true; otherwise, an <xref:System.IndexOutOfRangeException> exception is thrown:","pos":[0,480],"nodes":[{"content":"Using a computed value to define the starting index, the ending index, or the number of items to be iterated.","pos":[0,109]},{"content":"If the result of the computation is unexpected, it might result in an <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception.","pos":[110,229],"source":" If the result of the computation is unexpected, it might result in an <xref:System.IndexOutOfRangeException> exception."},{"content":"You should check your program's logic in calculating the index value and validate the value before iterating the array or collection.","pos":[230,363]},{"content":"The following conditions must all be true; otherwise, an <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception is thrown:","pos":[364,480],"source":" The following conditions must all be true; otherwise, an <xref:System.IndexOutOfRangeException> exception is thrown:"}]}]},{"pos":[4234,4452],"content":"The starting index must be greater than or equal to <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.","nodes":[{"content":"The starting index must be greater than or equal to <ph id=\"ph1\">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=fullName&gt;</ph> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.","pos":[0,218],"source":"The starting index must be greater than or equal to <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection."}]},{"pos":[4466,4691],"content":"The ending index cannot exceed <ph id=\"ph1\">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=fullName&gt;</ph> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the <ph id=\"ph2\">`Count`</ph> property of a collection.","source":"The ending index cannot exceed <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the `Count` property of a collection."},{"pos":[4705,4797],"content":"The following equation must be true for the dimension of the array that you want to iterate:","nodes":[{"content":"The following equation must be true for the dimension of the array that you want to iterate:","pos":[0,92]}]},{"pos":[4934,4988],"content":"For a collection, the following equation must be true:","nodes":[{"content":"For a collection, the following equation must be true:","pos":[0,54]}]},{"pos":[5106,5200],"content":"[!TIP]\nThe starting index of an array or collection can never be a negative number.","leadings":["","        >  "],"nodes":[{"content":"The starting index of an array or collection can never be a negative number.","pos":[7,83]}]},{"pos":[5210,5784],"content":"Assuming that an array must be zero-based. Arrays that are not zero-based can be created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method and can be returned by COM interop, although they aren’t CLS-compliant. The following example illustrates the <xref:System.IndexOutOfRangeException> that is thrown when you try to iterate a non-zero-based array created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method.","nodes":[{"content":"Assuming that an array must be zero-based. Arrays that are not zero-based can be created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method and can be returned by COM interop, although they aren’t CLS-compliant. The following example illustrates the <xref:System.IndexOutOfRangeException> that is thrown when you try to iterate a non-zero-based array created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method.","pos":[0,574],"nodes":[{"content":"Assuming that an array must be zero-based.","pos":[0,42]},{"content":"Arrays that are not zero-based can be created by the <ph id=\"ph1\">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName&gt;</ph> method and can be returned by COM interop, although they aren’t CLS-compliant.","pos":[43,293],"source":" Arrays that are not zero-based can be created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method and can be returned by COM interop, although they aren’t CLS-compliant."},{"content":"The following example illustrates the <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> that is thrown when you try to iterate a non-zero-based array created by the <ph id=\"ph2\">&lt;xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName&gt;</ph> method.","pos":[294,574],"source":" The following example illustrates the <xref:System.IndexOutOfRangeException> that is thrown when you try to iterate a non-zero-based array created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method."}]}]},{"pos":[5795,6098],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]\n [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]"},{"pos":[6109,6290],"content":"To correct the error, as the following example does, you can call the <xref:System.Array.GetLowerBound%2A> method instead of making assumptions about the starting index of an array.","nodes":[{"content":"To correct the error, as the following example does, you can call the <ph id=\"ph1\">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> method instead of making assumptions about the starting index of an array.","pos":[0,181],"source":"To correct the error, as the following example does, you can call the <xref:System.Array.GetLowerBound%2A> method instead of making assumptions about the starting index of an array."}]},{"pos":[6301,6604],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]\n [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]"},{"pos":[6615,6859],"content":"Note that when you call the <xref:System.Array.GetLowerBound%2A> method to get the starting index of an array, you should also call the <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=fullName> method to get its ending index.","nodes":[{"content":"Note that when you call the <ph id=\"ph1\">&lt;xref:System.Array.GetLowerBound%2A&gt;</ph> method to get the starting index of an array, you should also call the <ph id=\"ph2\">&lt;xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=fullName&gt;</ph> method to get its ending index.","pos":[0,244],"source":"Note that when you call the <xref:System.Array.GetLowerBound%2A> method to get the starting index of an array, you should also call the <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=fullName> method to get its ending index."}]},{"pos":[6869,7112],"content":"Confusing an index and the value at that index in a numeric array or collection. This issue usually occurs when using the `foreach` statement (in C#) or the `For Each` statement (in Visual Basic). The following example illustrates the problem.","nodes":[{"content":"Confusing an index and the value at that index in a numeric array or collection.","pos":[0,80]},{"content":"This issue usually occurs when using the <ph id=\"ph1\">`foreach`</ph> statement (in C#) or the <ph id=\"ph2\">`For Each`</ph> statement (in Visual Basic).","pos":[81,196],"source":" This issue usually occurs when using the `foreach` statement (in C#) or the `For Each` statement (in Visual Basic)."},{"content":"The following example illustrates the problem.","pos":[197,243]}]},{"pos":[7123,7426],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#7<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#7<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]\n [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]"},{"pos":[7437,7564],"content":"The iteration construct returns each value in an array or collection, not its index. To eliminate the exception, use this code.","nodes":[{"content":"The iteration construct returns each value in an array or collection, not its index. To eliminate the exception, use this code.","pos":[0,127],"nodes":[{"content":"The iteration construct returns each value in an array or collection, not its index.","pos":[0,84]},{"content":"To eliminate the exception, use this code.","pos":[85,127]}]}]},{"pos":[7575,7878],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.IndexOutOfRangeException#8<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)</ept><ept id=\"p1\">]</ept>  <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.IndexOutOfRangeException#8<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)</ept><ept id=\"p3\">]</ept>","leadings":["","    "],"source":"[!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]\n [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]"},{"pos":[7888,7998],"content":"Providing an invalid column name to the <xref:System.Data.DataView.Sort%2A?displayProperty=fullName> property.","nodes":[{"content":"Providing an invalid column name to the <ph id=\"ph1\">&lt;xref:System.Data.DataView.Sort%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,110],"source":"Providing an invalid column name to the <xref:System.Data.DataView.Sort%2A?displayProperty=fullName> property."}]},{"pos":[8008,8465],"content":"Violating thread safety. Operations such as reading from the same <xref:System.IO.StreamReader> object, writing to the same <xref:System.IO.StreamWriter> object from multiple threads, or enumerating the objects in a <xref:System.Collections.Hashtable> from different threads can throw an <xref:System.IndexOutOfRangeException> if the object isn’t accessed in a thread-safe way. This exception is typically intermittent because it relies on a race condition.","nodes":[{"content":"Violating thread safety. Operations such as reading from the same <xref:System.IO.StreamReader> object, writing to the same <xref:System.IO.StreamWriter> object from multiple threads, or enumerating the objects in a <xref:System.Collections.Hashtable> from different threads can throw an <xref:System.IndexOutOfRangeException> if the object isn’t accessed in a thread-safe way. This exception is typically intermittent because it relies on a race condition.","pos":[0,457],"nodes":[{"content":"Violating thread safety.","pos":[0,24]},{"content":"Operations such as reading from the same <ph id=\"ph1\">&lt;xref:System.IO.StreamReader&gt;</ph> object, writing to the same <ph id=\"ph2\">&lt;xref:System.IO.StreamWriter&gt;</ph> object from multiple threads, or enumerating the objects in a <ph id=\"ph3\">&lt;xref:System.Collections.Hashtable&gt;</ph> from different threads can throw an <ph id=\"ph4\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> if the object isn’t accessed in a thread-safe way.","pos":[25,377],"source":" Operations such as reading from the same <xref:System.IO.StreamReader> object, writing to the same <xref:System.IO.StreamWriter> object from multiple threads, or enumerating the objects in a <xref:System.Collections.Hashtable> from different threads can throw an <xref:System.IndexOutOfRangeException> if the object isn’t accessed in a thread-safe way."},{"content":"This exception is typically intermittent because it relies on a race condition.","pos":[378,457]}]}]},{"pos":[8472,8780],"content":"Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected. To prevent an operation from throwing an  <xref:System.IndexOutOfRangeException> exception, you can do the following:","nodes":[{"content":"Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected. To prevent an operation from throwing an  <xref:System.IndexOutOfRangeException> exception, you can do the following:","pos":[0,308],"nodes":[{"content":"Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected.","pos":[0,190]},{"content":"To prevent an operation from throwing an  <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> exception, you can do the following:","pos":[191,308],"source":" To prevent an operation from throwing an  <xref:System.IndexOutOfRangeException> exception, you can do the following:"}]}]},{"pos":[8790,9055],"content":"Iterate the elements of the array using the <bpt id=\"p1\">[</bpt>foreach<ept id=\"p1\">](https://msdn.microsoft.com/library/ttw7t8t6.aspx)</ept> statement (in C#) or the <bpt id=\"p2\">[</bpt>For Each...Next<ept id=\"p2\">](https://msdn.microsoft.com/library/5ebk1751.aspx)</ept> construct (in Visual Basic)  instead of iterating elements by index.","source":"Iterate the elements of the array using the [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) statement (in C#) or the [For Each...Next](https://msdn.microsoft.com/library/5ebk1751.aspx) construct (in Visual Basic)  instead of iterating elements by index."},{"pos":[9065,9315],"content":"Iterate the elements by index starting with the index returned by the <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> method and ending with the index returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> method.","nodes":[{"content":"Iterate the elements by index starting with the index returned by the <ph id=\"ph1\">&lt;xref:System.Array.GetLowerBound%2A?displayProperty=fullName&gt;</ph> method and ending with the index returned by the <ph id=\"ph2\">&lt;xref:System.Array.GetUpperBound%2A?displayProperty=fullName&gt;</ph> method.","pos":[0,250],"source":"Iterate the elements by index starting with the index returned by the <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> method and ending with the index returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> method."}]},{"pos":[9325,9545],"content":"If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <xref:System.Array.Length%2A?displayProperty=fullName> properties.","nodes":[{"content":"If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <ph id=\"ph1\">&lt;xref:System.Array.Length%2A?displayProperty=fullName&gt;</ph> properties.","pos":[0,220],"source":"If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <xref:System.Array.Length%2A?displayProperty=fullName> properties."}]},{"pos":[9552,9709],"content":"For a list of initial property values for an instance of <xref:System.IndexOutOfRangeException>, see the <xref:System.IndexOutOfRangeException> constructors.","nodes":[{"content":"For a list of initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph>, see the <ph id=\"ph2\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> constructors.","pos":[0,157],"source":"For a list of initial property values for an instance of <xref:System.IndexOutOfRangeException>, see the <xref:System.IndexOutOfRangeException> constructors."}]},{"pos":[9716,9815],"content":"The following intermediate language (IL) instructions throw <xref:System.IndexOutOfRangeException>:","nodes":[{"content":"The following intermediate language (IL) instructions throw <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph>:","pos":[0,99],"source":"The following intermediate language (IL) instructions throw <xref:System.IndexOutOfRangeException>:"}]},{"pos":[9825,9839],"content":"ldelem.\\<type>","nodes":[{"content":"ldelem.<ph id=\"ph1\">\\&lt;</ph>type&gt;","pos":[0,14],"source":"ldelem.\\<type>"}]},{"pos":[9849,9856],"content":"ldelema","nodes":[{"content":"ldelema","pos":[0,7]}]},{"pos":[9866,9880],"content":"stelem.\\<type>","nodes":[{"content":"stelem.<ph id=\"ph1\">\\&lt;</ph>type&gt;","pos":[0,14],"source":"stelem.\\<type>"}]},{"pos":[9887,9997],"content":"<xref:System.IndexOutOfRangeException> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.","pos":[0,110],"source":"<xref:System.IndexOutOfRangeException> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508."}]}],"pos":[736,10836],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class.","nodes":[{"pos":[0,93],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IndexOutOfRangeException\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class."}],"pos":[13411,13505],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"An array index is out of range.\" This message takes into account the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The localized error message string.|","nodes":[{"pos":[0,253],"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"An array index is out of range.\" This message takes into account the current system culture.","nodes":[{"content":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"An array index is out of range.\" This message takes into account the current system culture.","pos":[0,253],"nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the new instance to a system-supplied message that describes the error, such as \"An array index is out of range.\"","pos":[0,193],"source":"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \"An array index is out of range.\""},{"content":"This message takes into account the current system culture.","pos":[194,253]}]}]},{"pos":[260,372],"content":"The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.","pos":[0,112],"source":"The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>."}]},{"pos":[379,387],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[388,393],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[429,470],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[471,516],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[521,555],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[556,591],"content":"The localized error message string.","nodes":[{"content":"The localized error message string.","pos":[0,35]}]}],"pos":[13516,14120],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class with a specified error message.","nodes":[{"pos":[0,124],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IndexOutOfRangeException\"&gt;&lt;/xref&gt;</ph> class with a specified error message.","source":"Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class with a specified error message."}],"pos":[15855,15980],"yaml":true},{"content":"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter. The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  \n  \n The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,339],"content":"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter. The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.","nodes":[{"content":"This constructor initializes the <ph id=\"ph1\">&lt;xref:System.Exception.Message%2A?displayProperty=fullName&gt;</ph> property of the new exception using the <ph id=\"ph2\">`message`</ph> parameter.","pos":[0,153],"source":"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter."},{"content":"The content of <ph id=\"ph1\">`message`</ph> is intended to be understood by humans.","pos":[154,218],"source":" The content of `message` is intended to be understood by humans."},{"content":"The caller of this constructor is required to ensure that this string has been localized for the current system culture.","pos":[219,339]}]},{"pos":[346,458],"content":"The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.","pos":[0,112],"source":"The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>."}]},{"pos":[465,473],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[474,479],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[515,556],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[557,602],"content":"A null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic).","source":"A null reference (`Nothing` in Visual Basic)."},{"pos":[607,641],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[642,667],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[15991,16669],"yaml":true,"extradata":"MT"},{"content":"The message that describes the error.","nodes":[{"pos":[0,37],"content":"The message that describes the error.","nodes":[{"content":"The message that describes the error.","pos":[0,37]}]}],"pos":[16821,16859],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.","nodes":[{"pos":[0,199],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IndexOutOfRangeException\"&gt;&lt;/xref&gt;</ph> class with a specified error message and a reference to the inner exception that is the cause of this exception.","source":"Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception."}],"pos":[18600,18800],"yaml":true},{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The `InnerException` property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the `InnerException` property does not supply the inner exception value to the constructor.  \n  \n The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.  \n  \n|Property|Value|  \n|--------------|-----------|  \n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \n|<xref:System.Exception.Message%2A>|The error message string.|","nodes":[{"pos":[0,415],"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The `InnerException` property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the `InnerException` property does not supply the inner exception value to the constructor.","nodes":[{"content":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <ph id=\"ph1\">&lt;xref:System.Exception.InnerException%2A&gt;</ph> property.","pos":[0,182],"source":"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property."},{"content":"The <ph id=\"ph1\">`InnerException`</ph> property returns the same value that is passed into the constructor, or a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic) if the <ph id=\"ph3\">`InnerException`</ph> property does not supply the inner exception value to the constructor.","pos":[183,415],"source":" The `InnerException` property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the `InnerException` property does not supply the inner exception value to the constructor."}]},{"pos":[422,534],"content":"The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.","nodes":[{"content":"The following table shows the initial property values for an instance of <ph id=\"ph1\">&lt;xref:System.IndexOutOfRangeException&gt;</ph>.","pos":[0,112],"source":"The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>."}]},{"pos":[541,549],"content":"Property","nodes":[{"content":"Property","pos":[0,8]}]},{"pos":[550,555],"content":"Value","nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[591,632],"content":"<xref:System.Exception.InnerException%2A>","nodes":[]},{"pos":[633,663],"content":"The inner exception reference.","nodes":[{"content":"The inner exception reference.","pos":[0,30]}]},{"pos":[668,702],"content":"<xref:System.Exception.Message%2A>","nodes":[]},{"pos":[703,728],"content":"The error message string.","nodes":[{"content":"The error message string.","pos":[0,25]}]}],"pos":[18811,19550],"yaml":true,"extradata":"MT"},{"content":"The error message that explains the reason for the exception.","nodes":[{"pos":[0,61],"content":"The error message that explains the reason for the exception.","nodes":[{"content":"The error message that explains the reason for the exception.","pos":[0,61]}]}],"pos":[19728,19790],"yaml":true},{"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"pos":[0,240],"content":"The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.","nodes":[{"content":"The exception that is the cause of the current exception.","pos":[0,57]},{"content":"If the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">innerException</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic), the current exception is raised in a <ph id=\"ph3\">`catch`</ph> block that handles the inner exception.","pos":[58,240],"source":" If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception."}]}],"pos":[19863,20104],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n  id: IndexOutOfRangeException\n  children:\n  - System.IndexOutOfRangeException.#ctor\n  - System.IndexOutOfRangeException.#ctor(System.String)\n  - System.IndexOutOfRangeException.#ctor(System.String,System.Exception)\n  langs:\n  - csharp\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  type: Class\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: The exception that is thrown when an attempt is made to access an element of an array or collection with an index that is outside its bounds.\n  remarks: \"An <xref:System.IndexOutOfRangeException> exception is thrown when an invalid index is used to access a member of an array or a collection, or to read or write from a particular location in a buffer. This exception  inherits from the <xref:System.Exception> class but adds no unique members.  \\n  \\n Typically, an <xref:System.IndexOutOfRangeException> exception is thrown as a result of developer error. Instead of handling the exception, you should diagnose the cause of the error and correct your code. The most common causes of the error are:  \\n  \\n-   Forgetting that the upper bound of a collection or a zero-based array is one less than its number of members or elements, as the following example illustrates.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length1.cs#3)]\\n     [!code-vb[System.IndexOutOfRangeException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length1.vb#3)]  \\n  \\n     To correct the error, you can use code like the following.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/length2.cs#4)]\\n     [!code-vb[System.IndexOutOfRangeException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/length2.vb#4)]  \\n  \\n     Alternately, instead of iterating all the elements in the array by their index, you can use the  (in C#) or the  (in Visual Basic).  \\n  \\n-   Attempting to assign an array element to another array that has not been adequately dimensioned and that has fewer elements than the original array. The following example attempts to assign the last element in the `value1` array to the same element in the `value2` array. However, the `value2` array has been incorrectly dimensioned to have six instead of seven elements. As a result, the assignment throws an <xref:System.IndexOutOfRangeException> exception.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/Uninit1.cs#10)]\\n     [!code-vb[System.IndexOutOfRangeException#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/Uninit1.vb#10)]  \\n  \\n-   Using a value returned by a search method to iterate a portion of an array or collection starting at a particular index position. If you forget to check whether the search operation found a match, the runtime throws an <xref:System.IndexOutOfRangeException> exception, as shown in this example.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative1.cs#5)]\\n     [!code-vb[System.IndexOutOfRangeException#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative1.vb#5)]  \\n  \\n     In this case, the <xref:System.Collections.Generic.List%601.IndexOf%2A?displayProperty=fullName> method returns -1, which is an invalid index value, when it fails to find a match. To correct this error, check the search method's return value before iterating the array, as shown in this example.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/negative2.cs#6)]\\n     [!code-vb[System.IndexOutOfRangeException#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/negative2.vb#6)]  \\n  \\n-   Trying to use or enumerate a result set, collection, or array returned by a query without testing whether the returned object has any valid data.  \\n  \\n-   Using a computed value to define the starting index, the ending index, or the number of items to be iterated. If the result of the computation is unexpected, it might result in an <xref:System.IndexOutOfRangeException> exception. You should check your program's logic in calculating the index value and validate the value before iterating the array or collection. The following conditions must all be true; otherwise, an <xref:System.IndexOutOfRangeException> exception is thrown:  \\n  \\n    -   The starting index must be greater than or equal to <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> for the dimension of the array that you want to iterate, or greater than or equal to 0 for a collection.  \\n  \\n    -   The ending index cannot exceed <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> for the dimension of the array that you want to iterate, or cannot be greater than or equal to the `Count` property of a collection.  \\n  \\n    -   The following equation must be true for the dimension of the array that you want to iterate:  \\n  \\n        ```  \\n        start_index >= lower_bound And start_index + items_to_iterate – 1 <= upper_bound  \\n        ```  \\n  \\n         For a collection, the following equation must be true:  \\n  \\n        ```  \\n        start_index >= 0 And start_index + items_to_iterate <= Count  \\n        ```  \\n  \\n        > [!TIP]\\n        >  The starting index of an array or collection can never be a negative number.  \\n  \\n-   Assuming that an array must be zero-based. Arrays that are not zero-based can be created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method and can be returned by COM interop, although they aren’t CLS-compliant. The following example illustrates the <xref:System.IndexOutOfRangeException> that is thrown when you try to iterate a non-zero-based array created by the <xref:System.Array.CreateInstance%28System.Type%2CSystem.Int32%5B%5D%2CSystem.Int32%5B%5D%29?displayProperty=fullName> method.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero1.cs#1)]\\n     [!code-vb[System.IndexOutOfRangeException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero1.vb#1)]  \\n  \\n     To correct the error, as the following example does, you can call the <xref:System.Array.GetLowerBound%2A> method instead of making assumptions about the starting index of an array.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/nonzero2.cs#2)]\\n     [!code-vb[System.IndexOutOfRangeException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/nonzero2.vb#2)]  \\n  \\n     Note that when you call the <xref:System.Array.GetLowerBound%2A> method to get the starting index of an array, you should also call the <xref:System.Array.GetUpperBound%28System.Int32%29?displayProperty=fullName> method to get its ending index.  \\n  \\n-   Confusing an index and the value at that index in a numeric array or collection. This issue usually occurs when using the `foreach` statement (in C#) or the `For Each` statement (in Visual Basic). The following example illustrates the problem.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach1.cs#7)]\\n     [!code-vb[System.IndexOutOfRangeException#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach1.vb#7)]  \\n  \\n     The iteration construct returns each value in an array or collection, not its index. To eliminate the exception, use this code.  \\n  \\n     [!code-csharp[System.IndexOutOfRangeException#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.indexoutofrangeexception/cs/foreach2.cs#8)]\\n     [!code-vb[System.IndexOutOfRangeException#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.indexoutofrangeexception/vb/foreach2.vb#8)]  \\n  \\n-   Providing an invalid column name to the <xref:System.Data.DataView.Sort%2A?displayProperty=fullName> property.  \\n  \\n-   Violating thread safety. Operations such as reading from the same <xref:System.IO.StreamReader> object, writing to the same <xref:System.IO.StreamWriter> object from multiple threads, or enumerating the objects in a <xref:System.Collections.Hashtable> from different threads can throw an <xref:System.IndexOutOfRangeException> if the object isn’t accessed in a thread-safe way. This exception is typically intermittent because it relies on a race condition.  \\n  \\n Using hard-coded index values to manipulate an array is likely to throw an exception if the index value is incorrect or invalid, or if the size of the array being manipulation is unexpected. To prevent an operation from throwing an  <xref:System.IndexOutOfRangeException> exception, you can do the following:  \\n  \\n-   Iterate the elements of the array using the [foreach](https://msdn.microsoft.com/library/ttw7t8t6.aspx) statement (in C#) or the [For Each...Next](https://msdn.microsoft.com/library/5ebk1751.aspx) construct (in Visual Basic)  instead of iterating elements by index.  \\n  \\n-   Iterate the elements by index starting with the index returned by the <xref:System.Array.GetLowerBound%2A?displayProperty=fullName> method and ending with the index returned by the <xref:System.Array.GetUpperBound%2A?displayProperty=fullName> method.  \\n  \\n-   If you are assigning elements in one array to another, ensure that  the target array has at least as many elements as the source array by comparing their <xref:System.Array.Length%2A?displayProperty=fullName> properties.  \\n  \\n For a list of initial property values for an instance of <xref:System.IndexOutOfRangeException>, see the <xref:System.IndexOutOfRangeException> constructors.  \\n  \\n The following intermediate language (IL) instructions throw <xref:System.IndexOutOfRangeException>:  \\n  \\n-   ldelem.\\\\<type>  \\n  \\n-   ldelema  \\n  \\n-   stelem.\\\\<type>  \\n  \\n <xref:System.IndexOutOfRangeException> uses the HRESULT COR_E_INDEXOUTOFRANGE, which has the value 0x80131508.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class IndexOutOfRangeException : SystemException\n  inheritance:\n  - System.Object\n  - System.Exception\n  implements: []\n  inheritedMembers:\n  - System.Exception.Data\n  - System.Exception.GetBaseException\n  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Exception.GetType\n  - System.Exception.HelpLink\n  - System.Exception.HResult\n  - System.Exception.InnerException\n  - System.Exception.Message\n  - System.Exception.SerializeObjectState\n  - System.Exception.Source\n  - System.Exception.StackTrace\n  - System.Exception.TargetSite\n  - System.Exception.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IndexOutOfRangeException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IndexOutOfRangeException.#ctor\n  commentId: M:System.IndexOutOfRangeException.#ctor\n  id: '#ctor'\n  parent: System.IndexOutOfRangeException\n  langs:\n  - csharp\n  name: IndexOutOfRangeException()\n  nameWithType: IndexOutOfRangeException.IndexOutOfRangeException()\n  fullName: IndexOutOfRangeException.IndexOutOfRangeException()\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as \\\"An array index is out of range.\\\" This message takes into account the current system culture.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The localized error message string.|\"\n  syntax:\n    content: public IndexOutOfRangeException ();\n    parameters: []\n  overload: System.IndexOutOfRangeException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IndexOutOfRangeException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IndexOutOfRangeException.#ctor(System.String)\n  commentId: M:System.IndexOutOfRangeException.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IndexOutOfRangeException\n  langs:\n  - csharp\n  name: IndexOutOfRangeException(String)\n  nameWithType: IndexOutOfRangeException.IndexOutOfRangeException(String)\n  fullName: IndexOutOfRangeException.IndexOutOfRangeException(String)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class with a specified error message.\n  remarks: \"This constructor initializes the <xref:System.Exception.Message%2A?displayProperty=fullName> property of the new exception using the `message` parameter. The content of `message` is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|A null reference (`Nothing` in Visual Basic).|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  syntax:\n    content: public IndexOutOfRangeException (string message);\n    parameters:\n    - id: message\n      type: System.String\n      description: The message that describes the error.\n  overload: System.IndexOutOfRangeException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IndexOutOfRangeException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.IndexOutOfRangeException.#ctor(System.String,System.Exception)\n  commentId: M:System.IndexOutOfRangeException.#ctor(System.String,System.Exception)\n  id: '#ctor(System.String,System.Exception)'\n  parent: System.IndexOutOfRangeException\n  langs:\n  - csharp\n  name: IndexOutOfRangeException(String, Exception)\n  nameWithType: IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)\n  fullName: IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)\n  type: Constructor\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Initializes a new instance of the <xref href=\"System.IndexOutOfRangeException\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.\n  remarks: \"An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref:System.Exception.InnerException%2A> property. The `InnerException` property returns the same value that is passed into the constructor, or a null reference (`Nothing` in Visual Basic) if the `InnerException` property does not supply the inner exception value to the constructor.  \\n  \\n The following table shows the initial property values for an instance of <xref:System.IndexOutOfRangeException>.  \\n  \\n|Property|Value|  \\n|--------------|-----------|  \\n|<xref:System.Exception.InnerException%2A>|The inner exception reference.|  \\n|<xref:System.Exception.Message%2A>|The error message string.|\"\n  syntax:\n    content: public IndexOutOfRangeException (string message, Exception innerException);\n    parameters:\n    - id: message\n      type: System.String\n      description: The error message that explains the reason for the exception.\n    - id: innerException\n      type: System.Exception\n      description: The exception that is the cause of the current exception. If the <code>innerException</code> parameter is not a null reference (`Nothing` in Visual Basic), the current exception is raised in a `catch` block that handles the inner exception.\n  overload: System.IndexOutOfRangeException.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IndexOutOfRangeException.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.IndexOutOfRangeException.#ctor\n  parent: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException()\n  nameWithType: IndexOutOfRangeException.IndexOutOfRangeException()\n  fullName: IndexOutOfRangeException.IndexOutOfRangeException()\n- uid: System.IndexOutOfRangeException.#ctor(System.String)\n  parent: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException(String)\n  nameWithType: IndexOutOfRangeException.IndexOutOfRangeException(String)\n  fullName: IndexOutOfRangeException.IndexOutOfRangeException(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IndexOutOfRangeException.#ctor(System.String,System.Exception)\n  parent: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException(String, Exception)\n  nameWithType: IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)\n  fullName: IndexOutOfRangeException.IndexOutOfRangeException(String, Exception)\n- uid: System.IndexOutOfRangeException.#ctor*\n  parent: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException.IndexOutOfRangeException\n  fullName: IndexOutOfRangeException.IndexOutOfRangeException\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/IndexOutOfRangeException.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Exception.GetType\n  parent: System.Exception\n  isExternal: false\n  name: GetType()\n  nameWithType: Exception.GetType()\n  fullName: Exception.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Exception.ToString\n  parent: System.Exception\n  isExternal: false\n  name: ToString()\n  nameWithType: Exception.ToString()\n  fullName: Exception.ToString()\n- uid: System.Exception.Data\n  parent: System.Exception\n  isExternal: false\n  name: Data\n  nameWithType: Exception.Data\n  fullName: Exception.Data\n- uid: System.Exception.GetBaseException\n  parent: System.Exception\n  isExternal: false\n  name: GetBaseException()\n  nameWithType: Exception.GetBaseException()\n  fullName: Exception.GetBaseException()\n- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Exception\n  isExternal: false\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)\n  fullName: Exception.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Exception.HelpLink\n  parent: System.Exception\n  isExternal: false\n  name: HelpLink\n  nameWithType: Exception.HelpLink\n  fullName: Exception.HelpLink\n- uid: System.Exception.HResult\n  parent: System.Exception\n  isExternal: false\n  name: HResult\n  nameWithType: Exception.HResult\n  fullName: Exception.HResult\n- uid: System.Exception.InnerException\n  parent: System.Exception\n  isExternal: false\n  name: InnerException\n  nameWithType: Exception.InnerException\n  fullName: Exception.InnerException\n- uid: System.Exception.Message\n  parent: System.Exception\n  isExternal: false\n  name: Message\n  nameWithType: Exception.Message\n  fullName: Exception.Message\n- uid: System.Exception.SerializeObjectState\n  parent: System.Exception\n  isExternal: false\n  name: SerializeObjectState\n  nameWithType: Exception.SerializeObjectState\n  fullName: Exception.SerializeObjectState\n- uid: System.Exception.Source\n  parent: System.Exception\n  isExternal: false\n  name: Source\n  nameWithType: Exception.Source\n  fullName: Exception.Source\n- uid: System.Exception.StackTrace\n  parent: System.Exception\n  isExternal: false\n  name: StackTrace\n  nameWithType: Exception.StackTrace\n  fullName: Exception.StackTrace\n- uid: System.Exception.TargetSite\n  parent: System.Exception\n  isExternal: false\n  name: TargetSite\n  nameWithType: Exception.TargetSite\n  fullName: Exception.TargetSite\n"}