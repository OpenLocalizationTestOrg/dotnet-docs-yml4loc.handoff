<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="de-de">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f2eaa30d4d40c0e5e1d7cefa8bff3d8eedf23d10</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.TransportBindingElement.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">126a12e1de5db5958d5e04ff73aa7fb9e40ca747</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">a99656bef9ecd74fd3564d0ba8c37a9507edf68d</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">`abstract`</ph> base class that represents a transport binding element.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class factors out properties that are common to all of the transport binding elements provided by the <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>It handles the translation of the base transport settings into run-time manifestations.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>It delegates the translation of transport-specific settings (for example, HttpProxySettings for HTTP) logic in its concrete derived class transport bindings, which include the following classes:</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Custom transport binding element developers must inherit from this class, which derives from the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.BindingElement&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Creates a new instance of this class.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Creates a new instance of this class from an existing instance.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.TransportBindingElement"&gt;&lt;/xref&gt;</ph> to be cloned.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Gets a property from the specified <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method receives a binding context as an input parameter, which represents the stack of binding elements.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method gets the specified object directly, delegates the inquiry to the next lower binding element in the stack, or a combination of the two.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>It can modify the context if it delegates the inquiry.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each binding element in the stack can repeat this process, if it has been delegated to, until the bottom of the stack is reached.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The object returned is usually a collection of properties.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of <ph id="ph1">`T`</ph> is <ph id="ph2">&lt;xref:System.ServiceModel.Security.ChannelProtectionRequirements&gt;</ph>, <ph id="ph3">&lt;xref:System.Xml.XmlDictionaryReaderQuotas&gt;</ph>, or <ph id="ph4">&lt;xref:System.ServiceModel.Channels.MessageVersion&gt;</ph> then an instance of this class is returned.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the type of <ph id="ph1">`T`</ph> matches the type of an instance in <ph id="ph2">&lt;xref:System.ServiceModel.Channels.BindingContext.BindingParameters%2A&gt;</ph>, that instance is returned.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method is implemented by binding elements as well as by the run-time objects such as <ph id="ph1">&lt;xref:System.ServiceModel.Channels.IChannelFactory&gt;</ph>, <ph id="ph2">&lt;xref:System.ServiceModel.Channels.IChannelListener&gt;</ph>, and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.IChannel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The property to get.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>The property from the specified <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingContext"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether manual addressing of the message is required.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property is usually used in router scenarios, where the application determines which one of several destinations to send a message to.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>If this property is set to <ph id="ph1">`true`</ph>, the channel assumes the message has already been addressed and does not add any additional information.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>If <ph id="ph1">`false`</ph>, the sending channel applies the <ph id="ph2">&lt;xref:System.ServiceModel.EndpointAddress&gt;</ph> configured as the <ph id="ph3">`To`</ph> addressee on the channel to outgoing messages.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if manual addressing of the message is required; otherwise <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets or sets the maximum size, in bytes, of any buffer pools used by the transport.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Many parts of WCF use buffers.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>Creating and destroying buffers each time they are used is expensive, and garbage collection for buffers is also expensive.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>With buffer pools, you can take a buffer from the pool, use it, and return it to the pool once you are done.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Thus the overhead in creating and destroying buffers is avoided.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>The downside is that there is an increase in memory usage because your buffers are not getting garbage collected.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>If the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.TransportBindingElement.MaxBufferPoolSize%2A&gt;</ph> is set to 0, no buffers are returned to the pool, and instead garbage collection begins.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The maximum size of the buffer pool.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The default is 524,288 bytes.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets and sets the maximum allowable message size, in bytes, that can be received.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property can counter a hacker scenario where a message is sent with a very large or infinite specified length, or where data is sent continuously to a connected Named Pipe.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The maximum allowable message size that can be received.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The default is 65,536 bytes.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>Gets the URI scheme for the transport.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is overridden by each concrete transport implementation and is provided to validate bindings against base addresses.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns the URI scheme for the transport, which varies depending on what derived class implements this method.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>